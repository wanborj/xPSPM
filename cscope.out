cscope 15 $HOME/workspace/xPSPM-C -q 0000016440 0002478031
	@/home/wanbo/workspace/xPSPM-C/apps/FreeRTOSConfig.h

54 #i‚de‡
FREERTOS_CONFIG_H


55 
	#FREERTOS_CONFIG_H


	)

57 
	#xP‹tPídSVH™dÀr
 
PídSV_H™dÀr


	)

58 
	#xP‹tSysTickH™dÀr
 
SysTick_H™dÀr


	)

59 
	#vP‹tSVCH™dÀr
 
SVC_H™dÀr


	)

75 
	#c⁄figUSE_PREEMPTION
 0

	)

76 
	#c⁄figUSE_IDLE_HOOK
 1

	)

77 
	#c⁄figUSE_TICK_HOOK
 1

	)

78 
	#c⁄figCPU_CLOCK_HZ
 ( ( Ë72000000 )

	)

79 
	#c⁄figTICK_RATE_HZ
 ( ( 
p‹tTickTy≥
 ) 1000 )

	)

80 
	#c⁄figMAX_PRIORITIES
 ( ( 
p‹tBASE_TYPE
 ) 5 )

	)

81 
	#c⁄figMINIMAL_STACK_SIZE
 ( ( Ë128 )

	)

82 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) ( 50*1024 ) )

	)

83 
	#c⁄figMAX_TASK_NAME_LEN
 ( 16 )

	)

84 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

85 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

86 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

87 
	#c⁄figUSE_MUTEXES
 1

	)

90 
	#c⁄figUSE_CO_ROUTINES
 0

	)

91 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

96 
	#INCLUDE_vTaskPri‹ôySë
 1

	)

97 
	#INCLUDE_uxTaskPri‹ôyGë
 1

	)

98 
	#INCLUDE_vTaskDñëe
 1

	)

99 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

100 
	#INCLUDE_vTaskSu•íd
 1

	)

101 
	#INCLUDE_vTaskDñayU¡û
 1

	)

102 
	#INCLUDE_vTaskDñay
 1

	)

105 
	#INCLUDE_SEFM
 1

	)

107 
	#c⁄figCPU_NUMBER
 1

	)

111 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 127

112 
	#c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 191

	)

119 
	#c⁄figLIBRARY_KERNEL_INTERRUPT_PRIORITY
 15

	)

123 
	#åa˚TASK_CREATE
(
pxNewTCB
Ë
	`myTø˚Cª©e
’xNewTCB)

	)

124 
	#åa˚TASK_SWITCHED_IN
(Ë
	`myTø˚SwôchedIn
()

	)

125 
	#åa˚TASK_SWITCHED_OUT
(Ë
	`myTø˚SwôchedOut
()

	)

127 
myTø˚Cª©e
 ();

128 
myTø˚SwôchedIn
 ();

129 
myTø˚SwôchedOut
 ();

	@/home/wanbo/workspace/xPSPM-C/apps/app.c

1 
	~"≠p.h
"

3 
	$£ns‹1
–* 
∑ø
 )

5 
¥v_id_t
 
id
 = *(’rv_id_à*)
∑ø
);

9 
	`ps_£rv™t_waô
(
id
);

11 
	`p‹t_¥öt
("sensor 1\n\r");

13 
	}
}

15 
	$c⁄åﬁÀr11
(* 
∑ø
)

17 
¥v_id_t
 
id
 = *(’rv_id_à*)
∑ø
);

21 
	`ps_£rv™t_waô
(
id
);

24 
	`p‹t_¥öt
("controller 1-1\n\r");

26 
	}
}

28 
	$c⁄åﬁÀr12
(* 
∑ø
)

30 
¥v_id_t
 
id
 = *(’rv_id_à*)
∑ø
);

34 
	`ps_£rv™t_waô
(
id
);

37 
	`p‹t_¥öt
("controller 1-2\n\r");

39 
	}
}

41 
	$a˘u©‹1
(* 
∑ø
)

43 
¥v_id_t
 
id
 = *(’rv_id_à*)
∑ø
);

47 
	`ps_£rv™t_waô
(
id
);

49 
	`p‹t_¥öt
("actuator 1\n\r");

52 
	}
}

54 
	$£ns‹2
(* 
∑ø
)

56 
¥v_id_t
 
id
 = *(’rv_id_à*)
∑ø
);

60 
	`ps_£rv™t_waô
(
id
);

63 
	`p‹t_¥öt
("sensor 2\n\r");

66 
	}
}

68 
	$c⁄åﬁÀr21
(* 
∑ø
)

70 
¥v_id_t
 
id
 = *(’rv_id_à*)
∑ø
);

74 
	`ps_£rv™t_waô
(
id
);

76 
	`p‹t_¥öt
("controller 2-1\n\r");

79 
	}
}

81 
	$c⁄åﬁÀr22
(* 
∑ø
)

83 
¥v_id_t
 
id
 = *(’rv_id_à*)
∑ø
);

87 
	`ps_£rv™t_waô
(
id
);

90 
	`p‹t_¥öt
("controller 2-2\n\r");

94 
	}
}

96 
	$a˘u©‹2
(* 
∑ø
)

98 
¥v_id_t
 
id
 = *(’rv_id_à*)
∑ø
);

102 
	`ps_£rv™t_waô
(
id
);

105 
	`p‹t_¥öt
("actuator 2\n\r");

108 
	}
}

111 
boﬁ
 
	$mode_swôch1
()

114 
	}
}

	@/home/wanbo/workspace/xPSPM-C/apps/app.h

1 
	~"ef.h
"

2 
	~"FªeRTOSC⁄fig.h
"

3 
	~"FªeRTOS.h
"

4 
	~"°m32_p103.h
"

6 
£ns‹1
(*);

7 
£ns‹2
( * );

10 
c⁄åﬁÀr11
(*);

11 
c⁄åﬁÀr12
(*);

12 
c⁄åﬁÀr21
(*);

13 
c⁄åﬁÀr22
(*);

16 
a˘u©‹1
(*);

17 
a˘u©‹2
(*);

19 
boﬁ
 
mode_swôch1
();

	@/home/wanbo/workspace/xPSPM-C/apps/stm32_p103.c

1 
	~"°m32_p103.h
"

2 
	~"°m32f10x.h
"

3 
	~"°m32f10x_gpio.h
"

4 
	~"°m32f10x_rcc.h
"

5 
	~"°m32f10x_ußπ.h
"

6 
	~"°m32f10x_exti.h
"

7 
	~"misc.h
"

9 
	$öô_Àd
()

11 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

14 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

20 
	`GPIO_WrôeBô
(
GPIOC
,
GPIO_Pö_12
,
Bô_SET
);

23 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_12
;

24 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_Out_PP
;

25 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

26 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

27 
	}
}

29 
	$öô_buâ⁄
()

31 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

34 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

37 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
;

38 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

39 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

40 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

41 
	}
}

43 
	$íabÀ_buâ⁄_öãºu±s
()

45 
EXTI_InôTy≥Def
 
EXTI_InôSåu˘uª
;

46 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

51 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

54 
	`GPIO_EXTILöeC⁄fig
(
GPIO_P‹tSour˚GPIOA
, 
GPIO_PöSour˚0
);

59 
EXTI_InôSåu˘uª
.
EXTI_Löe
 = 
EXTI_Löe0
;

60 
EXTI_InôSåu˘uª
.
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

61 
EXTI_InôSåu˘uª
.
EXTI_Triggî
 = 
EXTI_Triggî_Risög
;

62 
EXTI_InôSåu˘uª
.
EXTI_LöeCmd
 = 
ENABLE
;

63 
	`EXTI_Inô
(&
EXTI_InôSåu˘uª
);

66 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
EXTI0_IRQn
;

67 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0x0F;

68 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0x0F;

69 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

70 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

71 
	}
}

73 
	$öô_rs232
()

75 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

76 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

79 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_GPIOA
 | 
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

80 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

83 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_3
;

84 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

85 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

88 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_2
;

89 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

90 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF_PP
;

91 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

94 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 9600;

95 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

96 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

97 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

98 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

99 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

100 
	`USART_Inô
(
USART2
, &
USART_InôSåu˘uª
);

101 
	`USART_Cmd
(
USART2
, 
ENABLE
);

102 
	}
}

104 
	$íabÀ_rs232_öãºu±s
()

106 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

109 
	`USART_ITC⁄fig
(
USART2
, 
USART_IT_TXE
, 
DISABLE
);

110 
	`USART_ITC⁄fig
(
USART2
, 
USART_IT_RXNE
, 
ENABLE
);

114 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART2_IRQn
;

115 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

116 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

117 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

118 
	}
}

120 
	$íabÀ_rs232
()

123 
	`USART_Cmd
(
USART2
, 
ENABLE
);

124 
	}
}

126 
	$£nd_byã
(
uöt8_t
 
b
)

128 
	`USART_GëFœgSètus
(
USART2
, 
USART_FLAG_TXE
Ë=
RESET
);

130 
GPIOC
->
ODR
 ^= 0x00001000;

132 
	`USART_SídD©a
(
USART2
, 
b
);

133 
	}
}

139 
	$£nd_num
(
uöt8_t
 
b
)

141 
	`£nd_byã
(
b
+'0');

142 
	}
}

149 
	$vPrötSåög
–c⁄° * 
°rög
)

151 
i
 = 0;

152 
°rög
[
i
] != '\0')

154 
	`£nd_byã
(
°rög
[
i
]);

155 
i
++;

157 
	}
}

163 
	$vPrötNumbî
–c⁄° 
c_num
)

165 
time
[15], 
tmp
;

166 
i
, 
cou¡
 = 0;

167 
num
 = 
c_num
;

169 if(
num
 == 0)

171 
	`vPrötSåög
("0\n\r");

176  
num
 )

178 
time
[
cou¡
] = 
num
%10 +'0';

179 
cou¡
 ++;

180 
num
 /= 10;

183 
time
[
cou¡
] = '\0';

186  
i
 = 0; i < 
cou¡
/2; ++i )

188 
tmp
 = 
time
[
i
];

189 
time
[
i
] =Åime[
cou¡
-1-i];

190 
time
[
cou¡
-1-
i
] = 
tmp
;

193 
	`vPrötSåög
(
time
);

194 
	`vPrötSåög
("\n\r");

196 
	}
}

	@/home/wanbo/workspace/xPSPM-C/apps/stm32_p103.h

1 #i‚de‡
__STM32_P103_H


2 
	#__STM32_P103_H


	)

7 
öô_Àd
();

10 
öô_buâ⁄
();

20 
öô_rs232
();

22 
íabÀ_rs232_öãºu±s
();

24 
íabÀ_rs232
();

26 
vPrötSåög
(const * );

28 
vPrötNumbî
–c⁄° 
c_num
 );

	@/home/wanbo/workspace/xPSPM-C/apps/stm32f10x_conf.h

22 #i‚de‡
__STM32F10x_CONF_H


23 
	#__STM32F10x_CONF_H


	)

38 
	~"°m32f10x_gpio.h
"

42 
	~"°m32f10x_rcc.h
"

47 
	~"°m32f10x_ußπ.h
"

58 #ifde‡ 
USE_FULL_ASSERT


68 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

70 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

72 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/CMSIS/CM3/CoreSupport/core_cm3.c

24 
	~<°döt.h
>

27 #i‡
deföed
 ( 
__CC_ARM
 )

28 
	#__ASM
 
__asm


	)

29 
	#__INLINE
 
__ölöe


	)

31 #ñi‡
deföed
 ( 
__ICCARM__
 )

32 
	#__ASM
 
__asm


	)

33 
	#__INLINE
 
ölöe


	)

35 #ñi‡
deföed
 ( 
__GNUC__
 )

36 
	#__ASM
 
__asm


	)

37 
	#__INLINE
 
ölöe


	)

39 #ñi‡
deföed
 ( 
__TASKING__
 )

40 
	#__ASM
 
__asm


	)

41 
	#__INLINE
 
ölöe


	)

48 #i‡
deföed
 ( 
__CC_ARM
 )

58 
__ASM
 
uöt32_t
 
	$__gë_PSP
()

60 
mrs
 
r0
, 
p•


61 
bx
 
Ã


62 
	}
}

72 
__ASM
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

74 
m§
 
p•
, 
r0


75 
bx
 
Ã


76 
	}
}

86 
__ASM
 
uöt32_t
 
	$__gë_MSP
()

88 
mrs
 
r0
, 
m•


89 
bx
 
Ã


90 
	}
}

100 
__ASM
 
	$__£t_MSP
(
uöt32_t
 
maöSèckPoöãr
)

102 
m§
 
m•
, 
r0


103 
bx
 
Ã


104 
	}
}

114 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__ASM
 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡(
__ARMCC_VERSION
 < 400000)

142 
__ASM
 
	$__CLREX
()

144 
˛ªx


145 
	}
}

154 
__ASM
 
uöt32_t
 
	$__gë_BASEPRI
()

156 
mrs
 
r0
, 
ba£¥i


157 
bx
 
Ã


158 
	}
}

167 
__ASM
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

169 
m§
 
ba£¥i
, 
r0


170 
bx
 
Ã


171 
	}
}

180 
__ASM
 
uöt32_t
 
	$__gë_PRIMASK
()

182 
mrs
 
r0
, 
¥imask


183 
bx
 
Ã


184 
	}
}

193 
__ASM
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

195 
m§
 
¥imask
, 
r0


196 
bx
 
Ã


197 
	}
}

206 
__ASM
 
uöt32_t
 
	$__gë_FAULTMASK
()

208 
mrs
 
r0
, 
Áu…mask


209 
bx
 
Ã


210 
	}
}

219 
__ASM
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

221 
m§
 
Áu…mask
, 
r0


222 
bx
 
Ã


223 
	}
}

232 
__ASM
 
uöt32_t
 
	$__gë_CONTROL
()

234 
mrs
 
r0
, 
c⁄åﬁ


235 
bx
 
Ã


236 
	}
}

245 
__ASM
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

247 
m§
 
c⁄åﬁ
, 
r0


248 
bx
 
Ã


249 
	}
}

255 #ñi‡(
deföed
 (
__ICCARM__
))

257 #¥agm®
düg_suµªss
=
Pe940


266 
uöt32_t
 
	$__gë_PSP
()

268 
	`__ASM
("mrsÑ0,Ösp");

269 
	`__ASM
("bxÜr");

270 
	}
}

280 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

282 
	`__ASM
("msrÖsp,Ñ0");

283 
	`__ASM
("bxÜr");

284 
	}
}

294 
uöt32_t
 
	$__gë_MSP
()

296 
	`__ASM
("mrsÑ0, msp");

297 
	`__ASM
("bxÜr");

298 
	}
}

308 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

310 
	`__ASM
("msr msp,Ñ0");

311 
	`__ASM
("bxÜr");

312 
	}
}

322 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

324 
	`__ASM
("rev16Ñ0,Ñ0");

325 
	`__ASM
("bxÜr");

326 
	}
}

336 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

338 
	`__ASM
("rbitÑ0,Ñ0");

339 
	`__ASM
("bxÜr");

340 
	}
}

350 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

352 
	`__ASM
("ldrexbÑ0, [r0]");

353 
	`__ASM
("bxÜr");

354 
	}
}

364 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

366 
	`__ASM
("ldrexhÑ0, [r0]");

367 
	`__ASM
("bxÜr");

368 
	}
}

378 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

380 
	`__ASM
("ldrexÑ0, [r0]");

381 
	`__ASM
("bxÜr");

382 
	}
}

393 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

395 
	`__ASM
("strexbÑ0,Ñ0, [r1]");

396 
	`__ASM
("bxÜr");

397 
	}
}

408 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

410 
	`__ASM
("strexhÑ0,Ñ0, [r1]");

411 
	`__ASM
("bxÜr");

412 
	}
}

423 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

425 
	`__ASM
("strexÑ0,Ñ0, [r1]");

426 
	`__ASM
("bxÜr");

427 
	}
}

429 #¥agm®
düg_deÁu…
=
Pe940


432 #ñi‡(
deföed
 (
__GNUC__
))

442 
uöt32_t
 
	$__gë_PSP
(Ë
	`__©åibuã__
––
«ked
 ) );

443 
uöt32_t
 
	$__gë_PSP
()

445 
uöt32_t
 
ªsu…
=0;

447 
__ASM
 volatile ("MRS %0,Ösp\n\t"

449 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

450 (
ªsu…
);

451 
	}
}

461 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
Ë
	`__©åibuã__
––
«ked
 ) );

462 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

464 
__ASM
 volatile ("MSRÖsp, %0\n\t"

465 "BXÜ∏ \n\t" : : "r" (
t›OfProcSèck
) );

466 
	}
}

476 
uöt32_t
 
	$__gë_MSP
(Ë
	`__©åibuã__
––
«ked
 ) );

477 
uöt32_t
 
	$__gë_MSP
()

479 
uöt32_t
 
ªsu…
=0;

481 
__ASM
 volatile ("MRS %0, msp\n\t"

483 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

484 (
ªsu…
);

485 
	}
}

495 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
Ë
	`__©åibuã__
––
«ked
 ) );

496 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

498 
__ASM
 volatile ("MSR msp, %0\n\t"

499 "BXÜ∏ \n\t" : : "r" (
t›OfMaöSèck
) );

500 
	}
}

509 
uöt32_t
 
	$__gë_BASEPRI
()

511 
uöt32_t
 
ªsu…
=0;

513 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

514 (
ªsu…
);

515 
	}
}

524 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

526 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

527 
	}
}

536 
uöt32_t
 
	$__gë_PRIMASK
()

538 
uöt32_t
 
ªsu…
=0;

540 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

541 (
ªsu…
);

542 
	}
}

551 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

553 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

554 
	}
}

563 
uöt32_t
 
	$__gë_FAULTMASK
()

565 
uöt32_t
 
ªsu…
=0;

567 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

568 (
ªsu…
);

569 
	}
}

578 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

580 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

581 
	}
}

590 
uöt32_t
 
	$__gë_CONTROL
()

592 
uöt32_t
 
ªsu…
=0;

594 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

595 (
ªsu…
);

596 
	}
}

605 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

607 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

608 
	}
}

619 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

621 
uöt32_t
 
ªsu…
=0;

623 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

624 (
ªsu…
);

625 
	}
}

635 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

637 
uöt32_t
 
ªsu…
=0;

639 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

640 (
ªsu…
);

641 
	}
}

651 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

653 
uöt32_t
 
ªsu…
=0;

655 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

656 (
ªsu…
);

657 
	}
}

667 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

669 
uöt32_t
 
ªsu…
=0;

671 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

672 (
ªsu…
);

673 
	}
}

683 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

685 
uöt8_t
 
ªsu…
=0;

687 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

688 (
ªsu…
);

689 
	}
}

699 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

701 
uöt16_t
 
ªsu…
=0;

703 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

704 (
ªsu…
);

705 
	}
}

715 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

717 
uöt32_t
 
ªsu…
=0;

719 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

720 (
ªsu…
);

721 
	}
}

732 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

734 
uöt32_t
 
ªsu…
=0;

736 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "=&r" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

737 (
ªsu…
);

738 
	}
}

749 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

751 
uöt32_t
 
ªsu…
=0;

753 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "=&r" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

754 (
ªsu…
);

755 
	}
}

766 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

768 
uöt32_t
 
ªsu…
=0;

770 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

771 (
ªsu…
);

772 
	}
}

775 #ñi‡(
deföed
 (
__TASKING__
))

	@/home/wanbo/workspace/xPSPM-C/libraries/CMSIS/CM3/CoreSupport/core_cm3.h

24 #i‚de‡
__CM3_CORE_H__


25 
	#__CM3_CORE_H__


	)

80 #ifde‡
__˝lu•lus


84 
	#__CM3_CMSIS_VERSION_MAIN
 (0x01Ë

	)

85 
	#__CM3_CMSIS_VERSION_SUB
 (0x30Ë

	)

86 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM3_CMSIS_VERSION_SUB
Ë

	)

88 
	#__CORTEX_M
 (0x03Ë

	)

90 
	~<°döt.h
>

92 #i‡
deföed
 (
__ICCARM__
)

93 
	~<öåösics.h
>

97 #i‚de‡
__NVIC_PRIO_BITS


98 
	#__NVIC_PRIO_BITS
 4

	)

110 #ifde‡
__˝lu•lus


111 
	#__I
 vﬁ©ûê

	)

113 
	#__I
 vﬁ©ûêc⁄°

	)

115 
	#__O
 vﬁ©ûê

	)

116 
	#__IO
 vﬁ©ûê

	)

134 
__IO
 
uöt32_t
 
ISER
[8];

135 
uöt32_t
 
RESERVED0
[24];

136 
__IO
 
uöt32_t
 
ICER
[8];

137 
uöt32_t
 
RSERVED1
[24];

138 
__IO
 
uöt32_t
 
ISPR
[8];

139 
uöt32_t
 
RESERVED2
[24];

140 
__IO
 
uöt32_t
 
ICPR
[8];

141 
uöt32_t
 
RESERVED3
[24];

142 
__IO
 
uöt32_t
 
IABR
[8];

143 
uöt32_t
 
RESERVED4
[56];

144 
__IO
 
uöt8_t
 
IP
[240];

145 
uöt32_t
 
RESERVED5
[644];

146 
__O
 
uöt32_t
 
STIR
;

147 } 
	tNVIC_Ty≥
;

157 
__I
 
uöt32_t
 
CPUID
;

158 
__IO
 
uöt32_t
 
ICSR
;

159 
__IO
 
uöt32_t
 
VTOR
;

160 
__IO
 
uöt32_t
 
AIRCR
;

161 
__IO
 
uöt32_t
 
SCR
;

162 
__IO
 
uöt32_t
 
CCR
;

163 
__IO
 
uöt8_t
 
SHP
[12];

164 
__IO
 
uöt32_t
 
SHCSR
;

165 
__IO
 
uöt32_t
 
CFSR
;

166 
__IO
 
uöt32_t
 
HFSR
;

167 
__IO
 
uöt32_t
 
DFSR
;

168 
__IO
 
uöt32_t
 
MMFAR
;

169 
__IO
 
uöt32_t
 
BFAR
;

170 
__IO
 
uöt32_t
 
AFSR
;

171 
__I
 
uöt32_t
 
PFR
[2];

172 
__I
 
uöt32_t
 
DFR
;

173 
__I
 
uöt32_t
 
ADR
;

174 
__I
 
uöt32_t
 
MMFR
[4];

175 
__I
 
uöt32_t
 
ISAR
[5];

176 } 
	tSCB_Ty≥
;

179 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

180 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFu»<< 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

182 
	#SCB_CPUID_VARIANT_Pos
 20

	)

183 
	#SCB_CPUID_VARIANT_Msk
 (0xFu»<< 
SCB_CPUID_VARIANT_Pos
Ë

	)

185 
	#SCB_CPUID_PARTNO_Pos
 4

	)

186 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFu»<< 
SCB_CPUID_PARTNO_Pos
Ë

	)

188 
	#SCB_CPUID_REVISION_Pos
 0

	)

189 
	#SCB_CPUID_REVISION_Msk
 (0xFu»<< 
SCB_CPUID_REVISION_Pos
Ë

	)

192 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

193 
	#SCB_ICSR_NMIPENDSET_Msk
 (1u»<< 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

195 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

196 
	#SCB_ICSR_PENDSVSET_Msk
 (1u»<< 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

198 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

199 
	#SCB_ICSR_PENDSVCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

201 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

202 
	#SCB_ICSR_PENDSTSET_Msk
 (1u»<< 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

204 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

205 
	#SCB_ICSR_PENDSTCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

207 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

208 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1u»<< 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

210 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

211 
	#SCB_ICSR_ISRPENDING_Msk
 (1u»<< 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

213 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

214 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

216 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

217 
	#SCB_ICSR_RETTOBASE_Msk
 (1u»<< 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

219 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

220 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

223 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

224 
	#SCB_VTOR_TBLBASE_Msk
 (0x1FFu»<< 
SCB_VTOR_TBLBASE_Pos
Ë

	)

226 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

227 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFu»<< 
SCB_VTOR_TBLOFF_Pos
Ë

	)

230 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

231 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

233 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

234 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

236 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

237 
	#SCB_AIRCR_ENDIANESS_Msk
 (1u»<< 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

239 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

240 
	#SCB_AIRCR_PRIGROUP_Msk
 (7u»<< 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

242 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

243 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1u»<< 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

245 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

246 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1u»<< 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

248 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

249 
	#SCB_AIRCR_VECTRESET_Msk
 (1u»<< 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

252 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

253 
	#SCB_SCR_SEVONPEND_Msk
 (1u»<< 
SCB_SCR_SEVONPEND_Pos
Ë

	)

255 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

256 
	#SCB_SCR_SLEEPDEEP_Msk
 (1u»<< 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

258 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

259 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1u»<< 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

262 
	#SCB_CCR_STKALIGN_Pos
 9

	)

263 
	#SCB_CCR_STKALIGN_Msk
 (1u»<< 
SCB_CCR_STKALIGN_Pos
Ë

	)

265 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

266 
	#SCB_CCR_BFHFNMIGN_Msk
 (1u»<< 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

268 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

269 
	#SCB_CCR_DIV_0_TRP_Msk
 (1u»<< 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

271 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

272 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1u»<< 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

274 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

275 
	#SCB_CCR_USERSETMPEND_Msk
 (1u»<< 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

277 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

278 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1u»<< 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

281 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

282 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

284 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

285 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

287 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

288 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

290 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

291 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1u»<< 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

293 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

294 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

296 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

297 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

299 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

300 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

302 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

303 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1u»<< 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

305 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

306 
	#SCB_SHCSR_PENDSVACT_Msk
 (1u»<< 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

308 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

309 
	#SCB_SHCSR_MONITORACT_Msk
 (1u»<< 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

311 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

312 
	#SCB_SHCSR_SVCALLACT_Msk
 (1u»<< 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

314 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

315 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

317 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

318 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

320 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

321 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1u»<< 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

324 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

325 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFu»<< 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

327 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

328 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

330 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

331 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFu»<< 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

334 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

335 
	#SCB_HFSR_DEBUGEVT_Msk
 (1u»<< 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

337 
	#SCB_HFSR_FORCED_Pos
 30

	)

338 
	#SCB_HFSR_FORCED_Msk
 (1u»<< 
SCB_HFSR_FORCED_Pos
Ë

	)

340 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

341 
	#SCB_HFSR_VECTTBL_Msk
 (1u»<< 
SCB_HFSR_VECTTBL_Pos
Ë

	)

344 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

345 
	#SCB_DFSR_EXTERNAL_Msk
 (1u»<< 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

347 
	#SCB_DFSR_VCATCH_Pos
 3

	)

348 
	#SCB_DFSR_VCATCH_Msk
 (1u»<< 
SCB_DFSR_VCATCH_Pos
Ë

	)

350 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

351 
	#SCB_DFSR_DWTTRAP_Msk
 (1u»<< 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

353 
	#SCB_DFSR_BKPT_Pos
 1

	)

354 
	#SCB_DFSR_BKPT_Msk
 (1u»<< 
SCB_DFSR_BKPT_Pos
Ë

	)

356 
	#SCB_DFSR_HALTED_Pos
 0

	)

357 
	#SCB_DFSR_HALTED_Msk
 (1u»<< 
SCB_DFSR_HALTED_Pos
Ë

	)

367 
__IO
 
uöt32_t
 
CTRL
;

368 
__IO
 
uöt32_t
 
LOAD
;

369 
__IO
 
uöt32_t
 
VAL
;

370 
__I
 
uöt32_t
 
CALIB
;

371 } 
	tSysTick_Ty≥
;

374 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

375 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1u»<< 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

377 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

378 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1u»<< 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

380 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

381 
	#SysTick_CTRL_TICKINT_Msk
 (1u»<< 
SysTick_CTRL_TICKINT_Pos
Ë

	)

383 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

384 
	#SysTick_CTRL_ENABLE_Msk
 (1u»<< 
SysTick_CTRL_ENABLE_Pos
Ë

	)

387 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

388 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFu»<< 
SysTick_LOAD_RELOAD_Pos
Ë

	)

391 
	#SysTick_VAL_CURRENT_Pos
 0

	)

392 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

395 
	#SysTick_CALIB_NOREF_Pos
 31

	)

396 
	#SysTick_CALIB_NOREF_Msk
 (1u»<< 
SysTick_CALIB_NOREF_Pos
Ë

	)

398 
	#SysTick_CALIB_SKEW_Pos
 30

	)

399 
	#SysTick_CALIB_SKEW_Msk
 (1u»<< 
SysTick_CALIB_SKEW_Pos
Ë

	)

401 
	#SysTick_CALIB_TENMS_Pos
 0

	)

402 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

412 
__O
 union

414 
__O
 
uöt8_t
 
u8
;

415 
__O
 
uöt16_t
 
u16
;

416 
__O
 
uöt32_t
 
u32
;

417 } 
PORT
 [32];

418 
uöt32_t
 
RESERVED0
[864];

419 
__IO
 
uöt32_t
 
TER
;

420 
uöt32_t
 
RESERVED1
[15];

421 
__IO
 
uöt32_t
 
TPR
;

422 
uöt32_t
 
RESERVED2
[15];

423 
__IO
 
uöt32_t
 
TCR
;

424 
uöt32_t
 
RESERVED3
[29];

425 
__IO
 
uöt32_t
 
IWR
;

426 
__IO
 
uöt32_t
 
IRR
;

427 
__IO
 
uöt32_t
 
IMCR
;

428 
uöt32_t
 
RESERVED4
[43];

429 
__IO
 
uöt32_t
 
LAR
;

430 
__IO
 
uöt32_t
 
LSR
;

431 
uöt32_t
 
RESERVED5
[6];

432 
__I
 
uöt32_t
 
PID4
;

433 
__I
 
uöt32_t
 
PID5
;

434 
__I
 
uöt32_t
 
PID6
;

435 
__I
 
uöt32_t
 
PID7
;

436 
__I
 
uöt32_t
 
PID0
;

437 
__I
 
uöt32_t
 
PID1
;

438 
__I
 
uöt32_t
 
PID2
;

439 
__I
 
uöt32_t
 
PID3
;

440 
__I
 
uöt32_t
 
CID0
;

441 
__I
 
uöt32_t
 
CID1
;

442 
__I
 
uöt32_t
 
CID2
;

443 
__I
 
uöt32_t
 
CID3
;

444 } 
	tITM_Ty≥
;

447 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

448 
	#ITM_TPR_PRIVMASK_Msk
 (0xFu»<< 
ITM_TPR_PRIVMASK_Pos
Ë

	)

451 
	#ITM_TCR_BUSY_Pos
 23

	)

452 
	#ITM_TCR_BUSY_Msk
 (1u»<< 
ITM_TCR_BUSY_Pos
Ë

	)

454 
	#ITM_TCR_ATBID_Pos
 16

	)

455 
	#ITM_TCR_ATBID_Msk
 (0x7Fu»<< 
ITM_TCR_ATBID_Pos
Ë

	)

457 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

458 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3u»<< 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

460 
	#ITM_TCR_SWOENA_Pos
 4

	)

461 
	#ITM_TCR_SWOENA_Msk
 (1u»<< 
ITM_TCR_SWOENA_Pos
Ë

	)

463 
	#ITM_TCR_DWTENA_Pos
 3

	)

464 
	#ITM_TCR_DWTENA_Msk
 (1u»<< 
ITM_TCR_DWTENA_Pos
Ë

	)

466 
	#ITM_TCR_SYNCENA_Pos
 2

	)

467 
	#ITM_TCR_SYNCENA_Msk
 (1u»<< 
ITM_TCR_SYNCENA_Pos
Ë

	)

469 
	#ITM_TCR_TSENA_Pos
 1

	)

470 
	#ITM_TCR_TSENA_Msk
 (1u»<< 
ITM_TCR_TSENA_Pos
Ë

	)

472 
	#ITM_TCR_ITMENA_Pos
 0

	)

473 
	#ITM_TCR_ITMENA_Msk
 (1u»<< 
ITM_TCR_ITMENA_Pos
Ë

	)

476 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

477 
	#ITM_IWR_ATVALIDM_Msk
 (1u»<< 
ITM_IWR_ATVALIDM_Pos
Ë

	)

480 
	#ITM_IRR_ATREADYM_Pos
 0

	)

481 
	#ITM_IRR_ATREADYM_Msk
 (1u»<< 
ITM_IRR_ATREADYM_Pos
Ë

	)

484 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

485 
	#ITM_IMCR_INTEGRATION_Msk
 (1u»<< 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

488 
	#ITM_LSR_ByãAcc_Pos
 2

	)

489 
	#ITM_LSR_ByãAcc_Msk
 (1u»<< 
ITM_LSR_ByãAcc_Pos
Ë

	)

491 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

492 
	#ITM_LSR_Ac˚ss_Msk
 (1u»<< 
ITM_LSR_Ac˚ss_Pos
Ë

	)

494 
	#ITM_LSR_Pª£¡_Pos
 0

	)

495 
	#ITM_LSR_Pª£¡_Msk
 (1u»<< 
ITM_LSR_Pª£¡_Pos
Ë

	)

505 
uöt32_t
 
RESERVED0
;

506 
__I
 
uöt32_t
 
ICTR
;

507 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

508 
__IO
 
uöt32_t
 
ACTLR
;

510 
uöt32_t
 
RESERVED1
;

512 } 
	tI¡îru±Ty≥_Ty≥
;

515 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
 0

	)

516 
	#I¡îru±Ty≥_ICTR_INTLINESNUM_Msk
 (0x1Fu»<< 
I¡îru±Ty≥_ICTR_INTLINESNUM_Pos
Ë

	)

519 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Pos
 2

	)

520 
	#I¡îru±Ty≥_ACTLR_DISFOLD_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISFOLD_Pos
Ë

	)

522 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
 1

	)

523 
	#I¡îru±Ty≥_ACTLR_DISDEFWBUF_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISDEFWBUF_Pos
Ë

	)

525 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
 0

	)

526 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Msk
 (1u»<< 
I¡îru±Ty≥_ACTLR_DISMCYCINT_Pos
Ë

	)

530 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

537 
__I
 
uöt32_t
 
TYPE
;

538 
__IO
 
uöt32_t
 
CTRL
;

539 
__IO
 
uöt32_t
 
RNR
;

540 
__IO
 
uöt32_t
 
RBAR
;

541 
__IO
 
uöt32_t
 
RASR
;

542 
__IO
 
uöt32_t
 
RBAR_A1
;

543 
__IO
 
uöt32_t
 
RASR_A1
;

544 
__IO
 
uöt32_t
 
RBAR_A2
;

545 
__IO
 
uöt32_t
 
RASR_A2
;

546 
__IO
 
uöt32_t
 
RBAR_A3
;

547 
__IO
 
uöt32_t
 
RASR_A3
;

548 } 
	tMPU_Ty≥
;

551 
	#MPU_TYPE_IREGION_Pos
 16

	)

552 
	#MPU_TYPE_IREGION_Msk
 (0xFFu»<< 
MPU_TYPE_IREGION_Pos
Ë

	)

554 
	#MPU_TYPE_DREGION_Pos
 8

	)

555 
	#MPU_TYPE_DREGION_Msk
 (0xFFu»<< 
MPU_TYPE_DREGION_Pos
Ë

	)

557 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

558 
	#MPU_TYPE_SEPARATE_Msk
 (1u»<< 
MPU_TYPE_SEPARATE_Pos
Ë

	)

561 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

562 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1u»<< 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

564 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

565 
	#MPU_CTRL_HFNMIENA_Msk
 (1u»<< 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

567 
	#MPU_CTRL_ENABLE_Pos
 0

	)

568 
	#MPU_CTRL_ENABLE_Msk
 (1u»<< 
MPU_CTRL_ENABLE_Pos
Ë

	)

571 
	#MPU_RNR_REGION_Pos
 0

	)

572 
	#MPU_RNR_REGION_Msk
 (0xFFu»<< 
MPU_RNR_REGION_Pos
Ë

	)

575 
	#MPU_RBAR_ADDR_Pos
 5

	)

576 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFu»<< 
MPU_RBAR_ADDR_Pos
Ë

	)

578 
	#MPU_RBAR_VALID_Pos
 4

	)

579 
	#MPU_RBAR_VALID_Msk
 (1u»<< 
MPU_RBAR_VALID_Pos
Ë

	)

581 
	#MPU_RBAR_REGION_Pos
 0

	)

582 
	#MPU_RBAR_REGION_Msk
 (0xFu»<< 
MPU_RBAR_REGION_Pos
Ë

	)

585 
	#MPU_RASR_XN_Pos
 28

	)

586 
	#MPU_RASR_XN_Msk
 (1u»<< 
MPU_RASR_XN_Pos
Ë

	)

588 
	#MPU_RASR_AP_Pos
 24

	)

589 
	#MPU_RASR_AP_Msk
 (7u»<< 
MPU_RASR_AP_Pos
Ë

	)

591 
	#MPU_RASR_TEX_Pos
 19

	)

592 
	#MPU_RASR_TEX_Msk
 (7u»<< 
MPU_RASR_TEX_Pos
Ë

	)

594 
	#MPU_RASR_S_Pos
 18

	)

595 
	#MPU_RASR_S_Msk
 (1u»<< 
MPU_RASR_S_Pos
Ë

	)

597 
	#MPU_RASR_C_Pos
 17

	)

598 
	#MPU_RASR_C_Msk
 (1u»<< 
MPU_RASR_C_Pos
Ë

	)

600 
	#MPU_RASR_B_Pos
 16

	)

601 
	#MPU_RASR_B_Msk
 (1u»<< 
MPU_RASR_B_Pos
Ë

	)

603 
	#MPU_RASR_SRD_Pos
 8

	)

604 
	#MPU_RASR_SRD_Msk
 (0xFFu»<< 
MPU_RASR_SRD_Pos
Ë

	)

606 
	#MPU_RASR_SIZE_Pos
 1

	)

607 
	#MPU_RASR_SIZE_Msk
 (0x1Fu»<< 
MPU_RASR_SIZE_Pos
Ë

	)

609 
	#MPU_RASR_ENA_Pos
 0

	)

610 
	#MPU_RASR_ENA_Msk
 (0x1Fu»<< 
MPU_RASR_ENA_Pos
Ë

	)

622 
__IO
 
uöt32_t
 
DHCSR
;

623 
__O
 
uöt32_t
 
DCRSR
;

624 
__IO
 
uöt32_t
 
DCRDR
;

625 
__IO
 
uöt32_t
 
DEMCR
;

626 } 
	tC‹eDebug_Ty≥
;

629 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

630 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFu»<< 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

632 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

633 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

635 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

636 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

638 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

639 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

641 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

642 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

644 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

645 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

647 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

648 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

650 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

651 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

653 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

654 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

656 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

657 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

659 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

660 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

662 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

663 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

666 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

667 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1u»<< 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

669 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

670 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1Fu»<< 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

673 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

674 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1u»<< 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

676 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

677 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

679 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

680 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

682 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

683 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

685 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

686 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1u»<< 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

688 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

689 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

691 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

692 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

694 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

695 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

697 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

698 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

700 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

701 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

703 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

704 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

706 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

707 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

709 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

710 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

715 
	#SCS_BASE
 (0xE000E000Ë

	)

716 
	#ITM_BASE
 (0xE0000000Ë

	)

717 
	#C‹eDebug_BASE
 (0xE000EDF0Ë

	)

718 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010Ë

	)

719 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100Ë

	)

720 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00Ë

	)

722 
	#I¡îru±Ty≥
 ((
I¡îru±Ty≥_Ty≥
 *Ë
SCS_BASE
Ë

	)

723 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
Ë

	)

724 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
Ë

	)

725 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
Ë

	)

726 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
Ë

	)

727 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

729 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1)

730 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90Ë

	)

731 
	#MPU
 ((
MPU_Ty≥
*Ë
MPU_BASE
Ë

	)

741 #i‡
deföed
 ( 
__CC_ARM
 )

742 
	#__ASM
 
__asm


	)

743 
	#__INLINE
 
__ölöe


	)

745 #ñi‡
deföed
 ( 
__ICCARM__
 )

746 
	#__ASM
 
__asm


	)

747 
	#__INLINE
 
ölöe


	)

749 #ñi‡
deföed
 ( 
__GNUC__
 )

750 
	#__ASM
 
__asm


	)

751 
	#__INLINE
 
ölöe


	)

753 #ñi‡
deföed
 ( 
__TASKING__
 )

754 
	#__ASM
 
__asm


	)

755 
	#__INLINE
 
ölöe


	)

762 #i‡
deföed
 ( 
__CC_ARM
 )

765 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

766 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

768 
	#__NOP
 
__n›


	)

769 
	#__WFI
 
__wfi


	)

770 
	#__WFE
 
__w„


	)

771 
	#__SEV
 
__£v


	)

772 
	#__ISB
(Ë
	`__isb
(0)

	)

773 
	#__DSB
(Ë
	`__dsb
(0)

	)

774 
	#__DMB
(Ë
	`__dmb
(0)

	)

775 
	#__REV
 
__ªv


	)

776 
	#__RBIT
 
__rbô


	)

777 
	#__LDREXB
(
±r
Ë((Ë
	`__ldªx
’å))

	)

778 
	#__LDREXH
(
±r
Ë((Ë
	`__ldªx
’å))

	)

779 
	#__LDREXW
(
±r
Ë((Ë
	`__ldªx
’å))

	)

780 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

781 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

782 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

798 
uöt32_t
 
__gë_PSP
();

808 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

818 
uöt32_t
 
__gë_MSP
();

828 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

838 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

848 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

851 #i‡(
__ARMCC_VERSION
 < 400000)

858 
__CLREX
();

867 
uöt32_t
 
__gë_BASEPRI
();

876 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

885 
uöt32_t
 
__gë_PRIMASK
();

894 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

903 
uöt32_t
 
__gë_FAULTMASK
();

912 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

921 
uöt32_t
 
__gë_CONTROL
();

930 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

939 
	#__CLREX
 
__˛ªx


	)

948 
__INLINE
 
uöt32_t
 
__gë_BASEPRI
()

950 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

951 (
	g__ªgBa£Pri
);

961 
__INLINE
 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

963 
uöt32_t
 
__ªgBa£Pri
 
__ASM
("basepri");

964 
	g__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

974 
__INLINE
 
uöt32_t
 
__gë_PRIMASK
()

976 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

977 (
	g__ªgPriMask
);

987 
__INLINE
 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

989 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

990 
	g__ªgPriMask
 = (
¥iMask
);

1000 
__INLINE
 
uöt32_t
 
__gë_FAULTMASK
()

1002 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1003 (
	g__ªgFau…Mask
);

1013 
__INLINE
 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

1015 
uöt32_t
 
__ªgFau…Mask
 
__ASM
("faultmask");

1016 
	g__ªgFau…Mask
 = (
Áu…Mask
 & 1);

1026 
__INLINE
 
uöt32_t
 
__gë_CONTROL
()

1028 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1029 (
	g__ªgC⁄åﬁ
);

1039 
__INLINE
 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

1041 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

1042 
	g__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

1049 #ñi‡(
deföed
 (
__ICCARM__
))

1052 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

1053 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

1055 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsie f"); }

1056 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsid f"); }

1058 
	#__NOP
 
__no_›î©i⁄


	)

1059 
__INLINE
 
__WFI
(Ë{ 
__ASM
 ("wfi"); }

1060 
__INLINE
 
__WFE
(Ë{ 
__ASM
 ("wfe"); }

1061 
__INLINE
 
__SEV
(Ë{ 
__ASM
 ("sev"); }

1062 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 ("clrex"); }

1084 
uöt32_t
 
__gë_PSP
();

1094 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1104 
uöt32_t
 
__gë_MSP
();

1114 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1124 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1134 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1144 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1154 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1164 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1175 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1186 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1197 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1201 #ñi‡(
deföed
 (
__GNUC__
))

1204 
__INLINE
 
__íabÀ_úq
(Ë{ 
__ASM
 volatile ("cpsie i"); }

1205 
__INLINE
 
__dißbÀ_úq
(Ë{ 
__ASM
 volatile ("cpsid i"); }

1207 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsie f"); }

1208 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsid f"); }

1210 
__INLINE
 
__NOP
(Ë{ 
__ASM
 volatile ("nop"); }

1211 
__INLINE
 
__WFI
(Ë{ 
__ASM
 volatile ("wfi"); }

1212 
__INLINE
 
__WFE
(Ë{ 
__ASM
 volatile ("wfe"); }

1213 
__INLINE
 
__SEV
(Ë{ 
__ASM
 volatile ("sev"); }

1214 
__INLINE
 
__ISB
(Ë{ 
__ASM
 volatile ("isb"); }

1215 
__INLINE
 
__DSB
(Ë{ 
__ASM
 volatile ("dsb"); }

1216 
__INLINE
 
__DMB
(Ë{ 
__ASM
 volatile ("dmb"); }

1217 
__INLINE
 
__CLREX
(Ë{ 
__ASM
 volatile ("clrex"); }

1227 
uöt32_t
 
__gë_PSP
();

1237 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

1247 
uöt32_t
 
__gë_MSP
();

1257 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

1266 
uöt32_t
 
__gë_BASEPRI
();

1275 
__£t_BASEPRI
(
uöt32_t
 
ba£Pri
);

1284 
uöt32_t
 
__gë_PRIMASK
();

1293 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

1302 
uöt32_t
 
__gë_FAULTMASK
();

1311 
__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
);

1320 
uöt32_t
 
__gë_CONTROL
();

1329 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

1339 
uöt32_t
 
__REV
(uöt32_à
vÆue
);

1349 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

1359 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

1369 
uöt32_t
 
__RBIT
(uöt32_à
vÆue
);

1379 
uöt8_t
 
__LDREXB
(uöt8_à*
addr
);

1389 
uöt16_t
 
__LDREXH
(uöt16_à*
addr
);

1399 
uöt32_t
 
__LDREXW
(uöt32_à*
addr
);

1410 
uöt32_t
 
__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
);

1421 
uöt32_t
 
__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
);

1432 
uöt32_t
 
__STREXW
(uöt32_à
vÆue
, uöt32_à*
addr
);

1435 #ñi‡(
deföed
 (
__TASKING__
))

1468 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1470 
uöt32_t
 
	gªg_vÆue
;

1471 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1473 
	gªg_vÆue
 = 
SCB
->
AIRCR
;

1474 
	gªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1475 
	gªg_vÆue
 = (
ªg_vÆue
 |

1476 (0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1477 (
Pri‹ôyGroupTmp
 << 8));

1478 
	gSCB
->
	gAIRCR
 = 
ªg_vÆue
;

1489 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1491  ((
	gSCB
->
	gAIRCR
 & 
	gSCB_AIRCR_PRIGROUP_Msk
Ë>> 
	gSCB_AIRCR_PRIGROUP_Pos
);

1502 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1504 
	gNVIC
->
	gISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1515 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1517 
	gNVIC
->
	gICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1529 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1531 ((
	guöt32_t
Ë((
	gNVIC
->
	gISPR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1542 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1544 
	gNVIC
->
	gISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1555 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1557 
	gNVIC
->
	gICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1569 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1571 ((
	guöt32_t
)((
	gNVIC
->
	gIABR
[(
uöt32_t
)(
IRQn
Ë>> 5] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

1586 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1588 if(
	gIRQn
 < 0) {

1589 
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1591 
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1609 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1612 if(
	gIRQn
 < 0) {

1613 ((
	guöt32_t
)(
	gSCB
->
	gSHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1615 ((
	guöt32_t
)(
	gNVIC
->
	gIP
[(
uöt32_t
)(
IRQn
)] >> (8 - 
	g__NVIC_PRIO_BITS
))); }

1634 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1636 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1637 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1638 
uöt32_t
 
	gSubPri‹ôyBôs
;

1640 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1641 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1644 ((
	gPªem±Pri‹ôy
 & ((1 << (
	gPªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
	gSubPri‹ôyBôs
) |

1645 ((
	gSubPri‹ôy
 & ((1 << (
	gSubPri‹ôyBôs
 )) - 1)))

1665 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1667 
uöt32_t
 
	gPri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1668 
uöt32_t
 
	gPªem±Pri‹ôyBôs
;

1669 
uöt32_t
 
	gSubPri‹ôyBôs
;

1671 
	gPªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1672 
	gSubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1674 *
	gpPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1675 *
	gpSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1682 #i‡(!
deföed
 (
__Víd‹_SysTickC⁄fig
)) || (__Vendor_SysTickConfig == 0)

1694 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1696 i‡(
	gticks
 > 
	gSysTick_LOAD_RELOAD_Msk
)  (1);

1698 
	gSysTick
->
	gLOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1699 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1700 
	gSysTick
->
	gVAL
 = 0;

1701 
	gSysTick
->
	gCTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1702 
SysTick_CTRL_TICKINT_Msk
 |

1703 
SysTick_CTRL_ENABLE_Msk
;

1719 
__INLINE
 
NVIC_Sy°emRe£t
()

1721 
	gSCB
->
	gAIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1722 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1723 
SCB_AIRCR_SYSRESETREQ_Msk
);

1724 
__DSB
();

1742 vﬁ©ûê
ITM_RxBuf„r
;

1743 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1756 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1758 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1759 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1760 (
	gITM
->
	gTER
 & (1ul << 0) ) )

1762 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1763 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1765  (
	gch
);

1778 
__INLINE
 
ITM_Re˚iveCh¨
 () {

1779 
	gch
 = -1;

1781 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1782 
ch
 = 
ITM_RxBuf„r
;

1783 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1786  (
	gch
);

1798 
__INLINE
 
ITM_CheckCh¨
 () {

1800 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1810 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h

50 #i‚de‡
__STM32F10x_H


51 
	#__STM32F10x_H


	)

53 #ifde‡
__˝lu•lus


65 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

68 
	#STM32F10X_MD


	)

95 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_XL
Ë&& !deföed (
STM32F10X_CL
)

99 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


105 
	#USE_STDPERIPH_DRIVER


	)

115 #i‡!
deföed
 
HSE_VALUE


116 #ifde‡
STM32F10X_CL


117 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

119 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

128 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

130 
	#HSI_VALUE
 ((
uöt32_t
)8000000Ë

	)

135 
	#__STM32F10X_STDPERIPH_VERSION_MAIN
 (0x03Ë

	)

136 
	#__STM32F10X_STDPERIPH_VERSION_SUB1
 (0x05Ë

	)

137 
	#__STM32F10X_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

138 
	#__STM32F10X_STDPERIPH_VERSION_RC
 (0x00Ë

	)

139 
	#__STM32F10X_STDPERIPH_VERSION
 ( (
__STM32F10X_STDPERIPH_VERSION_MAIN
 << 24)\

140 |(
__STM32F10X_STDPERIPH_VERSION_SUB1
 << 16)\

141 |(
__STM32F10X_STDPERIPH_VERSION_SUB2
 << 8)\

142 |(
__STM32F10X_STDPERIPH_VERSION_RC
))

	)

155 #ifde‡
STM32F10X_XL


156 
	#__MPU_PRESENT
 1

	)

158 
	#__MPU_PRESENT
 0

	)

160 
	#__NVIC_PRIO_BITS
 4

	)

161 
	#__Víd‹_SysTickC⁄fig
 0

	)

167 
	eIRQn


170 
N⁄MaskabÀI¡_IRQn
 = -14,

171 
Mem‹yM™agemít_IRQn
 = -12,

172 
BusFau…_IRQn
 = -11,

173 
UßgeFau…_IRQn
 = -10,

174 
SVCÆl_IRQn
 = -5,

175 
DebugM⁄ô‹_IRQn
 = -4,

176 
PídSV_IRQn
 = -2,

177 
SysTick_IRQn
 = -1,

180 
WWDG_IRQn
 = 0,

181 
PVD_IRQn
 = 1,

182 
TAMPER_IRQn
 = 2,

183 
RTC_IRQn
 = 3,

184 
FLASH_IRQn
 = 4,

185 
RCC_IRQn
 = 5,

186 
EXTI0_IRQn
 = 6,

187 
EXTI1_IRQn
 = 7,

188 
EXTI2_IRQn
 = 8,

189 
EXTI3_IRQn
 = 9,

190 
EXTI4_IRQn
 = 10,

191 
DMA1_Ch™√l1_IRQn
 = 11,

192 
DMA1_Ch™√l2_IRQn
 = 12,

193 
DMA1_Ch™√l3_IRQn
 = 13,

194 
DMA1_Ch™√l4_IRQn
 = 14,

195 
DMA1_Ch™√l5_IRQn
 = 15,

196 
DMA1_Ch™√l6_IRQn
 = 16,

197 
DMA1_Ch™√l7_IRQn
 = 17,

199 #ifde‡
STM32F10X_LD


200 
ADC1_2_IRQn
 = 18,

201 
USB_HP_CAN1_TX_IRQn
 = 19,

202 
USB_LP_CAN1_RX0_IRQn
 = 20,

203 
CAN1_RX1_IRQn
 = 21,

204 
CAN1_SCE_IRQn
 = 22,

205 
EXTI9_5_IRQn
 = 23,

206 
TIM1_BRK_IRQn
 = 24,

207 
TIM1_UP_IRQn
 = 25,

208 
TIM1_TRG_COM_IRQn
 = 26,

209 
TIM1_CC_IRQn
 = 27,

210 
TIM2_IRQn
 = 28,

211 
TIM3_IRQn
 = 29,

212 
I2C1_EV_IRQn
 = 31,

213 
I2C1_ER_IRQn
 = 32,

214 
SPI1_IRQn
 = 35,

215 
USART1_IRQn
 = 37,

216 
USART2_IRQn
 = 38,

217 
EXTI15_10_IRQn
 = 40,

218 
RTCAœrm_IRQn
 = 41,

219 
USBWakeUp_IRQn
 = 42

222 #ifde‡
STM32F10X_LD_VL


223 
ADC1_IRQn
 = 18,

224 
EXTI9_5_IRQn
 = 23,

225 
TIM1_BRK_TIM15_IRQn
 = 24,

226 
TIM1_UP_TIM16_IRQn
 = 25,

227 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

228 
TIM1_CC_IRQn
 = 27,

229 
TIM2_IRQn
 = 28,

230 
TIM3_IRQn
 = 29,

231 
I2C1_EV_IRQn
 = 31,

232 
I2C1_ER_IRQn
 = 32,

233 
SPI1_IRQn
 = 35,

234 
USART1_IRQn
 = 37,

235 
USART2_IRQn
 = 38,

236 
EXTI15_10_IRQn
 = 40,

237 
RTCAœrm_IRQn
 = 41,

238 
CEC_IRQn
 = 42,

239 
TIM6_DAC_IRQn
 = 54,

240 
TIM7_IRQn
 = 55

243 #ifde‡
STM32F10X_MD


244 
ADC1_2_IRQn
 = 18,

245 
USB_HP_CAN1_TX_IRQn
 = 19,

246 
USB_LP_CAN1_RX0_IRQn
 = 20,

247 
CAN1_RX1_IRQn
 = 21,

248 
CAN1_SCE_IRQn
 = 22,

249 
EXTI9_5_IRQn
 = 23,

250 
TIM1_BRK_IRQn
 = 24,

251 
TIM1_UP_IRQn
 = 25,

252 
TIM1_TRG_COM_IRQn
 = 26,

253 
TIM1_CC_IRQn
 = 27,

254 
TIM2_IRQn
 = 28,

255 
TIM3_IRQn
 = 29,

256 
TIM4_IRQn
 = 30,

257 
I2C1_EV_IRQn
 = 31,

258 
I2C1_ER_IRQn
 = 32,

259 
I2C2_EV_IRQn
 = 33,

260 
I2C2_ER_IRQn
 = 34,

261 
SPI1_IRQn
 = 35,

262 
SPI2_IRQn
 = 36,

263 
USART1_IRQn
 = 37,

264 
USART2_IRQn
 = 38,

265 
USART3_IRQn
 = 39,

266 
EXTI15_10_IRQn
 = 40,

267 
RTCAœrm_IRQn
 = 41,

268 
USBWakeUp_IRQn
 = 42

271 #ifde‡
STM32F10X_MD_VL


272 
ADC1_IRQn
 = 18,

273 
EXTI9_5_IRQn
 = 23,

274 
TIM1_BRK_TIM15_IRQn
 = 24,

275 
TIM1_UP_TIM16_IRQn
 = 25,

276 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

277 
TIM1_CC_IRQn
 = 27,

278 
TIM2_IRQn
 = 28,

279 
TIM3_IRQn
 = 29,

280 
TIM4_IRQn
 = 30,

281 
I2C1_EV_IRQn
 = 31,

282 
I2C1_ER_IRQn
 = 32,

283 
I2C2_EV_IRQn
 = 33,

284 
I2C2_ER_IRQn
 = 34,

285 
SPI1_IRQn
 = 35,

286 
SPI2_IRQn
 = 36,

287 
USART1_IRQn
 = 37,

288 
USART2_IRQn
 = 38,

289 
USART3_IRQn
 = 39,

290 
EXTI15_10_IRQn
 = 40,

291 
RTCAœrm_IRQn
 = 41,

292 
CEC_IRQn
 = 42,

293 
TIM6_DAC_IRQn
 = 54,

294 
TIM7_IRQn
 = 55

297 #ifde‡
STM32F10X_HD


298 
ADC1_2_IRQn
 = 18,

299 
USB_HP_CAN1_TX_IRQn
 = 19,

300 
USB_LP_CAN1_RX0_IRQn
 = 20,

301 
CAN1_RX1_IRQn
 = 21,

302 
CAN1_SCE_IRQn
 = 22,

303 
EXTI9_5_IRQn
 = 23,

304 
TIM1_BRK_IRQn
 = 24,

305 
TIM1_UP_IRQn
 = 25,

306 
TIM1_TRG_COM_IRQn
 = 26,

307 
TIM1_CC_IRQn
 = 27,

308 
TIM2_IRQn
 = 28,

309 
TIM3_IRQn
 = 29,

310 
TIM4_IRQn
 = 30,

311 
I2C1_EV_IRQn
 = 31,

312 
I2C1_ER_IRQn
 = 32,

313 
I2C2_EV_IRQn
 = 33,

314 
I2C2_ER_IRQn
 = 34,

315 
SPI1_IRQn
 = 35,

316 
SPI2_IRQn
 = 36,

317 
USART1_IRQn
 = 37,

318 
USART2_IRQn
 = 38,

319 
USART3_IRQn
 = 39,

320 
EXTI15_10_IRQn
 = 40,

321 
RTCAœrm_IRQn
 = 41,

322 
USBWakeUp_IRQn
 = 42,

323 
TIM8_BRK_IRQn
 = 43,

324 
TIM8_UP_IRQn
 = 44,

325 
TIM8_TRG_COM_IRQn
 = 45,

326 
TIM8_CC_IRQn
 = 46,

327 
ADC3_IRQn
 = 47,

328 
FSMC_IRQn
 = 48,

329 
SDIO_IRQn
 = 49,

330 
TIM5_IRQn
 = 50,

331 
SPI3_IRQn
 = 51,

332 
UART4_IRQn
 = 52,

333 
UART5_IRQn
 = 53,

334 
TIM6_IRQn
 = 54,

335 
TIM7_IRQn
 = 55,

336 
DMA2_Ch™√l1_IRQn
 = 56,

337 
DMA2_Ch™√l2_IRQn
 = 57,

338 
DMA2_Ch™√l3_IRQn
 = 58,

339 
DMA2_Ch™√l4_5_IRQn
 = 59

342 #ifde‡
STM32F10X_HD_VL


343 
ADC1_IRQn
 = 18,

344 
EXTI9_5_IRQn
 = 23,

345 
TIM1_BRK_TIM15_IRQn
 = 24,

346 
TIM1_UP_TIM16_IRQn
 = 25,

347 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

348 
TIM1_CC_IRQn
 = 27,

349 
TIM2_IRQn
 = 28,

350 
TIM3_IRQn
 = 29,

351 
TIM4_IRQn
 = 30,

352 
I2C1_EV_IRQn
 = 31,

353 
I2C1_ER_IRQn
 = 32,

354 
I2C2_EV_IRQn
 = 33,

355 
I2C2_ER_IRQn
 = 34,

356 
SPI1_IRQn
 = 35,

357 
SPI2_IRQn
 = 36,

358 
USART1_IRQn
 = 37,

359 
USART2_IRQn
 = 38,

360 
USART3_IRQn
 = 39,

361 
EXTI15_10_IRQn
 = 40,

362 
RTCAœrm_IRQn
 = 41,

363 
CEC_IRQn
 = 42,

364 
TIM12_IRQn
 = 43,

365 
TIM13_IRQn
 = 44,

366 
TIM14_IRQn
 = 45,

367 
TIM5_IRQn
 = 50,

368 
SPI3_IRQn
 = 51,

369 
UART4_IRQn
 = 52,

370 
UART5_IRQn
 = 53,

371 
TIM6_DAC_IRQn
 = 54,

372 
TIM7_IRQn
 = 55,

373 
DMA2_Ch™√l1_IRQn
 = 56,

374 
DMA2_Ch™√l2_IRQn
 = 57,

375 
DMA2_Ch™√l3_IRQn
 = 58,

376 
DMA2_Ch™√l4_5_IRQn
 = 59,

377 
DMA2_Ch™√l5_IRQn
 = 60

382 #ifde‡
STM32F10X_XL


383 
ADC1_2_IRQn
 = 18,

384 
USB_HP_CAN1_TX_IRQn
 = 19,

385 
USB_LP_CAN1_RX0_IRQn
 = 20,

386 
CAN1_RX1_IRQn
 = 21,

387 
CAN1_SCE_IRQn
 = 22,

388 
EXTI9_5_IRQn
 = 23,

389 
TIM1_BRK_TIM9_IRQn
 = 24,

390 
TIM1_UP_TIM10_IRQn
 = 25,

391 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

392 
TIM1_CC_IRQn
 = 27,

393 
TIM2_IRQn
 = 28,

394 
TIM3_IRQn
 = 29,

395 
TIM4_IRQn
 = 30,

396 
I2C1_EV_IRQn
 = 31,

397 
I2C1_ER_IRQn
 = 32,

398 
I2C2_EV_IRQn
 = 33,

399 
I2C2_ER_IRQn
 = 34,

400 
SPI1_IRQn
 = 35,

401 
SPI2_IRQn
 = 36,

402 
USART1_IRQn
 = 37,

403 
USART2_IRQn
 = 38,

404 
USART3_IRQn
 = 39,

405 
EXTI15_10_IRQn
 = 40,

406 
RTCAœrm_IRQn
 = 41,

407 
USBWakeUp_IRQn
 = 42,

408 
TIM8_BRK_TIM12_IRQn
 = 43,

409 
TIM8_UP_TIM13_IRQn
 = 44,

410 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

411 
TIM8_CC_IRQn
 = 46,

412 
ADC3_IRQn
 = 47,

413 
FSMC_IRQn
 = 48,

414 
SDIO_IRQn
 = 49,

415 
TIM5_IRQn
 = 50,

416 
SPI3_IRQn
 = 51,

417 
UART4_IRQn
 = 52,

418 
UART5_IRQn
 = 53,

419 
TIM6_IRQn
 = 54,

420 
TIM7_IRQn
 = 55,

421 
DMA2_Ch™√l1_IRQn
 = 56,

422 
DMA2_Ch™√l2_IRQn
 = 57,

423 
DMA2_Ch™√l3_IRQn
 = 58,

424 
DMA2_Ch™√l4_5_IRQn
 = 59

427 #ifde‡
STM32F10X_CL


428 
ADC1_2_IRQn
 = 18,

429 
CAN1_TX_IRQn
 = 19,

430 
CAN1_RX0_IRQn
 = 20,

431 
CAN1_RX1_IRQn
 = 21,

432 
CAN1_SCE_IRQn
 = 22,

433 
EXTI9_5_IRQn
 = 23,

434 
TIM1_BRK_IRQn
 = 24,

435 
TIM1_UP_IRQn
 = 25,

436 
TIM1_TRG_COM_IRQn
 = 26,

437 
TIM1_CC_IRQn
 = 27,

438 
TIM2_IRQn
 = 28,

439 
TIM3_IRQn
 = 29,

440 
TIM4_IRQn
 = 30,

441 
I2C1_EV_IRQn
 = 31,

442 
I2C1_ER_IRQn
 = 32,

443 
I2C2_EV_IRQn
 = 33,

444 
I2C2_ER_IRQn
 = 34,

445 
SPI1_IRQn
 = 35,

446 
SPI2_IRQn
 = 36,

447 
USART1_IRQn
 = 37,

448 
USART2_IRQn
 = 38,

449 
USART3_IRQn
 = 39,

450 
EXTI15_10_IRQn
 = 40,

451 
RTCAœrm_IRQn
 = 41,

452 
OTG_FS_WKUP_IRQn
 = 42,

453 
TIM5_IRQn
 = 50,

454 
SPI3_IRQn
 = 51,

455 
UART4_IRQn
 = 52,

456 
UART5_IRQn
 = 53,

457 
TIM6_IRQn
 = 54,

458 
TIM7_IRQn
 = 55,

459 
DMA2_Ch™√l1_IRQn
 = 56,

460 
DMA2_Ch™√l2_IRQn
 = 57,

461 
DMA2_Ch™√l3_IRQn
 = 58,

462 
DMA2_Ch™√l4_IRQn
 = 59,

463 
DMA2_Ch™√l5_IRQn
 = 60,

464 
ETH_IRQn
 = 61,

465 
ETH_WKUP_IRQn
 = 62,

466 
CAN2_TX_IRQn
 = 63,

467 
CAN2_RX0_IRQn
 = 64,

468 
CAN2_RX1_IRQn
 = 65,

469 
CAN2_SCE_IRQn
 = 66,

470 
OTG_FS_IRQn
 = 67

472 } 
	tIRQn_Ty≥
;

478 
	~"c‹e_cm3.h
"

479 
	~"sy°em_°m32f10x.h
"

480 
	~<°döt.h
>

487 
öt32_t
 
	ts32
;

488 
öt16_t
 
	ts16
;

489 
öt8_t
 
	ts8
;

491 c⁄° 
	töt32_t
 
	tsc32
;

492 c⁄° 
	töt16_t
 
	tsc16
;

493 c⁄° 
	töt8_t
 
	tsc8
;

495 
__IO
 
	töt32_t
 
	tvs32
;

496 
__IO
 
	töt16_t
 
	tvs16
;

497 
__IO
 
	töt8_t
 
	tvs8
;

499 
__I
 
	töt32_t
 
	tvsc32
;

500 
__I
 
	töt16_t
 
	tvsc16
;

501 
__I
 
	töt8_t
 
	tvsc8
;

503 
uöt32_t
 
	tu32
;

504 
uöt16_t
 
	tu16
;

505 
uöt8_t
 
	tu8
;

507 c⁄° 
	tuöt32_t
 
	tuc32
;

508 c⁄° 
	tuöt16_t
 
	tuc16
;

509 c⁄° 
	tuöt8_t
 
	tuc8
;

511 
__IO
 
	tuöt32_t
 
	tvu32
;

512 
__IO
 
	tuöt16_t
 
	tvu16
;

513 
__IO
 
	tuöt8_t
 
	tvu8
;

515 
__I
 
	tuöt32_t
 
	tvuc32
;

516 
__I
 
	tuöt16_t
 
	tvuc16
;

517 
__I
 
	tuöt8_t
 
	tvuc8
;

519 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

521 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

522 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

524 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

527 
	#HSESèπUp_TimeOut
 
HSE_STARTUP_TIMEOUT


	)

528 
	#HSE_VÆue
 
HSE_VALUE


	)

529 
	#HSI_VÆue
 
HSI_VALUE


	)

544 
__IO
 
uöt32_t
 
SR
;

545 
__IO
 
uöt32_t
 
CR1
;

546 
__IO
 
uöt32_t
 
CR2
;

547 
__IO
 
uöt32_t
 
SMPR1
;

548 
__IO
 
uöt32_t
 
SMPR2
;

549 
__IO
 
uöt32_t
 
JOFR1
;

550 
__IO
 
uöt32_t
 
JOFR2
;

551 
__IO
 
uöt32_t
 
JOFR3
;

552 
__IO
 
uöt32_t
 
JOFR4
;

553 
__IO
 
uöt32_t
 
HTR
;

554 
__IO
 
uöt32_t
 
LTR
;

555 
__IO
 
uöt32_t
 
SQR1
;

556 
__IO
 
uöt32_t
 
SQR2
;

557 
__IO
 
uöt32_t
 
SQR3
;

558 
__IO
 
uöt32_t
 
JSQR
;

559 
__IO
 
uöt32_t
 
JDR1
;

560 
__IO
 
uöt32_t
 
JDR2
;

561 
__IO
 
uöt32_t
 
JDR3
;

562 
__IO
 
uöt32_t
 
JDR4
;

563 
__IO
 
uöt32_t
 
DR
;

564 } 
	tADC_Ty≥Def
;

572 
uöt32_t
 
RESERVED0
;

573 
__IO
 
uöt16_t
 
DR1
;

574 
uöt16_t
 
RESERVED1
;

575 
__IO
 
uöt16_t
 
DR2
;

576 
uöt16_t
 
RESERVED2
;

577 
__IO
 
uöt16_t
 
DR3
;

578 
uöt16_t
 
RESERVED3
;

579 
__IO
 
uöt16_t
 
DR4
;

580 
uöt16_t
 
RESERVED4
;

581 
__IO
 
uöt16_t
 
DR5
;

582 
uöt16_t
 
RESERVED5
;

583 
__IO
 
uöt16_t
 
DR6
;

584 
uöt16_t
 
RESERVED6
;

585 
__IO
 
uöt16_t
 
DR7
;

586 
uöt16_t
 
RESERVED7
;

587 
__IO
 
uöt16_t
 
DR8
;

588 
uöt16_t
 
RESERVED8
;

589 
__IO
 
uöt16_t
 
DR9
;

590 
uöt16_t
 
RESERVED9
;

591 
__IO
 
uöt16_t
 
DR10
;

592 
uöt16_t
 
RESERVED10
;

593 
__IO
 
uöt16_t
 
RTCCR
;

594 
uöt16_t
 
RESERVED11
;

595 
__IO
 
uöt16_t
 
CR
;

596 
uöt16_t
 
RESERVED12
;

597 
__IO
 
uöt16_t
 
CSR
;

598 
uöt16_t
 
RESERVED13
[5];

599 
__IO
 
uöt16_t
 
DR11
;

600 
uöt16_t
 
RESERVED14
;

601 
__IO
 
uöt16_t
 
DR12
;

602 
uöt16_t
 
RESERVED15
;

603 
__IO
 
uöt16_t
 
DR13
;

604 
uöt16_t
 
RESERVED16
;

605 
__IO
 
uöt16_t
 
DR14
;

606 
uöt16_t
 
RESERVED17
;

607 
__IO
 
uöt16_t
 
DR15
;

608 
uöt16_t
 
RESERVED18
;

609 
__IO
 
uöt16_t
 
DR16
;

610 
uöt16_t
 
RESERVED19
;

611 
__IO
 
uöt16_t
 
DR17
;

612 
uöt16_t
 
RESERVED20
;

613 
__IO
 
uöt16_t
 
DR18
;

614 
uöt16_t
 
RESERVED21
;

615 
__IO
 
uöt16_t
 
DR19
;

616 
uöt16_t
 
RESERVED22
;

617 
__IO
 
uöt16_t
 
DR20
;

618 
uöt16_t
 
RESERVED23
;

619 
__IO
 
uöt16_t
 
DR21
;

620 
uöt16_t
 
RESERVED24
;

621 
__IO
 
uöt16_t
 
DR22
;

622 
uöt16_t
 
RESERVED25
;

623 
__IO
 
uöt16_t
 
DR23
;

624 
uöt16_t
 
RESERVED26
;

625 
__IO
 
uöt16_t
 
DR24
;

626 
uöt16_t
 
RESERVED27
;

627 
__IO
 
uöt16_t
 
DR25
;

628 
uöt16_t
 
RESERVED28
;

629 
__IO
 
uöt16_t
 
DR26
;

630 
uöt16_t
 
RESERVED29
;

631 
__IO
 
uöt16_t
 
DR27
;

632 
uöt16_t
 
RESERVED30
;

633 
__IO
 
uöt16_t
 
DR28
;

634 
uöt16_t
 
RESERVED31
;

635 
__IO
 
uöt16_t
 
DR29
;

636 
uöt16_t
 
RESERVED32
;

637 
__IO
 
uöt16_t
 
DR30
;

638 
uöt16_t
 
RESERVED33
;

639 
__IO
 
uöt16_t
 
DR31
;

640 
uöt16_t
 
RESERVED34
;

641 
__IO
 
uöt16_t
 
DR32
;

642 
uöt16_t
 
RESERVED35
;

643 
__IO
 
uöt16_t
 
DR33
;

644 
uöt16_t
 
RESERVED36
;

645 
__IO
 
uöt16_t
 
DR34
;

646 
uöt16_t
 
RESERVED37
;

647 
__IO
 
uöt16_t
 
DR35
;

648 
uöt16_t
 
RESERVED38
;

649 
__IO
 
uöt16_t
 
DR36
;

650 
uöt16_t
 
RESERVED39
;

651 
__IO
 
uöt16_t
 
DR37
;

652 
uöt16_t
 
RESERVED40
;

653 
__IO
 
uöt16_t
 
DR38
;

654 
uöt16_t
 
RESERVED41
;

655 
__IO
 
uöt16_t
 
DR39
;

656 
uöt16_t
 
RESERVED42
;

657 
__IO
 
uöt16_t
 
DR40
;

658 
uöt16_t
 
RESERVED43
;

659 
__IO
 
uöt16_t
 
DR41
;

660 
uöt16_t
 
RESERVED44
;

661 
__IO
 
uöt16_t
 
DR42
;

662 
uöt16_t
 
RESERVED45
;

663 } 
	tBKP_Ty≥Def
;

671 
__IO
 
uöt32_t
 
TIR
;

672 
__IO
 
uöt32_t
 
TDTR
;

673 
__IO
 
uöt32_t
 
TDLR
;

674 
__IO
 
uöt32_t
 
TDHR
;

675 } 
	tCAN_TxMaûBox_Ty≥Def
;

683 
__IO
 
uöt32_t
 
RIR
;

684 
__IO
 
uöt32_t
 
RDTR
;

685 
__IO
 
uöt32_t
 
RDLR
;

686 
__IO
 
uöt32_t
 
RDHR
;

687 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

695 
__IO
 
uöt32_t
 
FR1
;

696 
__IO
 
uöt32_t
 
FR2
;

697 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

705 
__IO
 
uöt32_t
 
MCR
;

706 
__IO
 
uöt32_t
 
MSR
;

707 
__IO
 
uöt32_t
 
TSR
;

708 
__IO
 
uöt32_t
 
RF0R
;

709 
__IO
 
uöt32_t
 
RF1R
;

710 
__IO
 
uöt32_t
 
IER
;

711 
__IO
 
uöt32_t
 
ESR
;

712 
__IO
 
uöt32_t
 
BTR
;

713 
uöt32_t
 
RESERVED0
[88];

714 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

715 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

716 
uöt32_t
 
RESERVED1
[12];

717 
__IO
 
uöt32_t
 
FMR
;

718 
__IO
 
uöt32_t
 
FM1R
;

719 
uöt32_t
 
RESERVED2
;

720 
__IO
 
uöt32_t
 
FS1R
;

721 
uöt32_t
 
RESERVED3
;

722 
__IO
 
uöt32_t
 
FFA1R
;

723 
uöt32_t
 
RESERVED4
;

724 
__IO
 
uöt32_t
 
FA1R
;

725 
uöt32_t
 
RESERVED5
[8];

726 #i‚de‡
STM32F10X_CL


727 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[14];

729 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

731 } 
	tCAN_Ty≥Def
;

738 
__IO
 
uöt32_t
 
CFGR
;

739 
__IO
 
uöt32_t
 
OAR
;

740 
__IO
 
uöt32_t
 
PRES
;

741 
__IO
 
uöt32_t
 
ESR
;

742 
__IO
 
uöt32_t
 
CSR
;

743 
__IO
 
uöt32_t
 
TXD
;

744 
__IO
 
uöt32_t
 
RXD
;

745 } 
	tCEC_Ty≥Def
;

753 
__IO
 
uöt32_t
 
DR
;

754 
__IO
 
uöt8_t
 
IDR
;

755 
uöt8_t
 
RESERVED0
;

756 
uöt16_t
 
RESERVED1
;

757 
__IO
 
uöt32_t
 
CR
;

758 } 
	tCRC_Ty≥Def
;

766 
__IO
 
uöt32_t
 
CR
;

767 
__IO
 
uöt32_t
 
SWTRIGR
;

768 
__IO
 
uöt32_t
 
DHR12R1
;

769 
__IO
 
uöt32_t
 
DHR12L1
;

770 
__IO
 
uöt32_t
 
DHR8R1
;

771 
__IO
 
uöt32_t
 
DHR12R2
;

772 
__IO
 
uöt32_t
 
DHR12L2
;

773 
__IO
 
uöt32_t
 
DHR8R2
;

774 
__IO
 
uöt32_t
 
DHR12RD
;

775 
__IO
 
uöt32_t
 
DHR12LD
;

776 
__IO
 
uöt32_t
 
DHR8RD
;

777 
__IO
 
uöt32_t
 
DOR1
;

778 
__IO
 
uöt32_t
 
DOR2
;

779 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

780 
__IO
 
uöt32_t
 
SR
;

782 } 
	tDAC_Ty≥Def
;

790 
__IO
 
uöt32_t
 
IDCODE
;

791 
__IO
 
uöt32_t
 
CR
;

792 }
	tDBGMCU_Ty≥Def
;

800 
__IO
 
uöt32_t
 
CCR
;

801 
__IO
 
uöt32_t
 
CNDTR
;

802 
__IO
 
uöt32_t
 
CPAR
;

803 
__IO
 
uöt32_t
 
CMAR
;

804 } 
	tDMA_Ch™√l_Ty≥Def
;

808 
__IO
 
uöt32_t
 
ISR
;

809 
__IO
 
uöt32_t
 
IFCR
;

810 } 
	tDMA_Ty≥Def
;

818 
__IO
 
uöt32_t
 
MACCR
;

819 
__IO
 
uöt32_t
 
MACFFR
;

820 
__IO
 
uöt32_t
 
MACHTHR
;

821 
__IO
 
uöt32_t
 
MACHTLR
;

822 
__IO
 
uöt32_t
 
MACMIIAR
;

823 
__IO
 
uöt32_t
 
MACMIIDR
;

824 
__IO
 
uöt32_t
 
MACFCR
;

825 
__IO
 
uöt32_t
 
MACVLANTR
;

826 
uöt32_t
 
RESERVED0
[2];

827 
__IO
 
uöt32_t
 
MACRWUFFR
;

828 
__IO
 
uöt32_t
 
MACPMTCSR
;

829 
uöt32_t
 
RESERVED1
[2];

830 
__IO
 
uöt32_t
 
MACSR
;

831 
__IO
 
uöt32_t
 
MACIMR
;

832 
__IO
 
uöt32_t
 
MACA0HR
;

833 
__IO
 
uöt32_t
 
MACA0LR
;

834 
__IO
 
uöt32_t
 
MACA1HR
;

835 
__IO
 
uöt32_t
 
MACA1LR
;

836 
__IO
 
uöt32_t
 
MACA2HR
;

837 
__IO
 
uöt32_t
 
MACA2LR
;

838 
__IO
 
uöt32_t
 
MACA3HR
;

839 
__IO
 
uöt32_t
 
MACA3LR
;

840 
uöt32_t
 
RESERVED2
[40];

841 
__IO
 
uöt32_t
 
MMCCR
;

842 
__IO
 
uöt32_t
 
MMCRIR
;

843 
__IO
 
uöt32_t
 
MMCTIR
;

844 
__IO
 
uöt32_t
 
MMCRIMR
;

845 
__IO
 
uöt32_t
 
MMCTIMR
;

846 
uöt32_t
 
RESERVED3
[14];

847 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

848 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

849 
uöt32_t
 
RESERVED4
[5];

850 
__IO
 
uöt32_t
 
MMCTGFCR
;

851 
uöt32_t
 
RESERVED5
[10];

852 
__IO
 
uöt32_t
 
MMCRFCECR
;

853 
__IO
 
uöt32_t
 
MMCRFAECR
;

854 
uöt32_t
 
RESERVED6
[10];

855 
__IO
 
uöt32_t
 
MMCRGUFCR
;

856 
uöt32_t
 
RESERVED7
[334];

857 
__IO
 
uöt32_t
 
PTPTSCR
;

858 
__IO
 
uöt32_t
 
PTPSSIR
;

859 
__IO
 
uöt32_t
 
PTPTSHR
;

860 
__IO
 
uöt32_t
 
PTPTSLR
;

861 
__IO
 
uöt32_t
 
PTPTSHUR
;

862 
__IO
 
uöt32_t
 
PTPTSLUR
;

863 
__IO
 
uöt32_t
 
PTPTSAR
;

864 
__IO
 
uöt32_t
 
PTPTTHR
;

865 
__IO
 
uöt32_t
 
PTPTTLR
;

866 
uöt32_t
 
RESERVED8
[567];

867 
__IO
 
uöt32_t
 
DMABMR
;

868 
__IO
 
uöt32_t
 
DMATPDR
;

869 
__IO
 
uöt32_t
 
DMARPDR
;

870 
__IO
 
uöt32_t
 
DMARDLAR
;

871 
__IO
 
uöt32_t
 
DMATDLAR
;

872 
__IO
 
uöt32_t
 
DMASR
;

873 
__IO
 
uöt32_t
 
DMAOMR
;

874 
__IO
 
uöt32_t
 
DMAIER
;

875 
__IO
 
uöt32_t
 
DMAMFBOCR
;

876 
uöt32_t
 
RESERVED9
[9];

877 
__IO
 
uöt32_t
 
DMACHTDR
;

878 
__IO
 
uöt32_t
 
DMACHRDR
;

879 
__IO
 
uöt32_t
 
DMACHTBAR
;

880 
__IO
 
uöt32_t
 
DMACHRBAR
;

881 } 
	tETH_Ty≥Def
;

889 
__IO
 
uöt32_t
 
IMR
;

890 
__IO
 
uöt32_t
 
EMR
;

891 
__IO
 
uöt32_t
 
RTSR
;

892 
__IO
 
uöt32_t
 
FTSR
;

893 
__IO
 
uöt32_t
 
SWIER
;

894 
__IO
 
uöt32_t
 
PR
;

895 } 
	tEXTI_Ty≥Def
;

903 
__IO
 
uöt32_t
 
ACR
;

904 
__IO
 
uöt32_t
 
KEYR
;

905 
__IO
 
uöt32_t
 
OPTKEYR
;

906 
__IO
 
uöt32_t
 
SR
;

907 
__IO
 
uöt32_t
 
CR
;

908 
__IO
 
uöt32_t
 
AR
;

909 
__IO
 
uöt32_t
 
RESERVED
;

910 
__IO
 
uöt32_t
 
OBR
;

911 
__IO
 
uöt32_t
 
WRPR
;

912 #ifde‡
STM32F10X_XL


913 
uöt32_t
 
RESERVED1
[8];

914 
__IO
 
uöt32_t
 
KEYR2
;

915 
uöt32_t
 
RESERVED2
;

916 
__IO
 
uöt32_t
 
SR2
;

917 
__IO
 
uöt32_t
 
CR2
;

918 
__IO
 
uöt32_t
 
AR2
;

920 } 
	tFLASH_Ty≥Def
;

928 
__IO
 
uöt16_t
 
RDP
;

929 
__IO
 
uöt16_t
 
USER
;

930 
__IO
 
uöt16_t
 
D©a0
;

931 
__IO
 
uöt16_t
 
D©a1
;

932 
__IO
 
uöt16_t
 
WRP0
;

933 
__IO
 
uöt16_t
 
WRP1
;

934 
__IO
 
uöt16_t
 
WRP2
;

935 
__IO
 
uöt16_t
 
WRP3
;

936 } 
	tOB_Ty≥Def
;

944 
__IO
 
uöt32_t
 
BTCR
[8];

945 } 
	tFSMC_B™k1_Ty≥Def
;

953 
__IO
 
uöt32_t
 
BWTR
[7];

954 } 
	tFSMC_B™k1E_Ty≥Def
;

962 
__IO
 
uöt32_t
 
PCR2
;

963 
__IO
 
uöt32_t
 
SR2
;

964 
__IO
 
uöt32_t
 
PMEM2
;

965 
__IO
 
uöt32_t
 
PATT2
;

966 
uöt32_t
 
RESERVED0
;

967 
__IO
 
uöt32_t
 
ECCR2
;

968 } 
	tFSMC_B™k2_Ty≥Def
;

976 
__IO
 
uöt32_t
 
PCR3
;

977 
__IO
 
uöt32_t
 
SR3
;

978 
__IO
 
uöt32_t
 
PMEM3
;

979 
__IO
 
uöt32_t
 
PATT3
;

980 
uöt32_t
 
RESERVED0
;

981 
__IO
 
uöt32_t
 
ECCR3
;

982 } 
	tFSMC_B™k3_Ty≥Def
;

990 
__IO
 
uöt32_t
 
PCR4
;

991 
__IO
 
uöt32_t
 
SR4
;

992 
__IO
 
uöt32_t
 
PMEM4
;

993 
__IO
 
uöt32_t
 
PATT4
;

994 
__IO
 
uöt32_t
 
PIO4
;

995 } 
	tFSMC_B™k4_Ty≥Def
;

1003 
__IO
 
uöt32_t
 
CRL
;

1004 
__IO
 
uöt32_t
 
CRH
;

1005 
__IO
 
uöt32_t
 
IDR
;

1006 
__IO
 
uöt32_t
 
ODR
;

1007 
__IO
 
uöt32_t
 
BSRR
;

1008 
__IO
 
uöt32_t
 
BRR
;

1009 
__IO
 
uöt32_t
 
LCKR
;

1010 } 
	tGPIO_Ty≥Def
;

1018 
__IO
 
uöt32_t
 
EVCR
;

1019 
__IO
 
uöt32_t
 
MAPR
;

1020 
__IO
 
uöt32_t
 
EXTICR
[4];

1021 
uöt32_t
 
RESERVED0
;

1022 
__IO
 
uöt32_t
 
MAPR2
;

1023 } 
	tAFIO_Ty≥Def
;

1030 
__IO
 
uöt16_t
 
CR1
;

1031 
uöt16_t
 
RESERVED0
;

1032 
__IO
 
uöt16_t
 
CR2
;

1033 
uöt16_t
 
RESERVED1
;

1034 
__IO
 
uöt16_t
 
OAR1
;

1035 
uöt16_t
 
RESERVED2
;

1036 
__IO
 
uöt16_t
 
OAR2
;

1037 
uöt16_t
 
RESERVED3
;

1038 
__IO
 
uöt16_t
 
DR
;

1039 
uöt16_t
 
RESERVED4
;

1040 
__IO
 
uöt16_t
 
SR1
;

1041 
uöt16_t
 
RESERVED5
;

1042 
__IO
 
uöt16_t
 
SR2
;

1043 
uöt16_t
 
RESERVED6
;

1044 
__IO
 
uöt16_t
 
CCR
;

1045 
uöt16_t
 
RESERVED7
;

1046 
__IO
 
uöt16_t
 
TRISE
;

1047 
uöt16_t
 
RESERVED8
;

1048 } 
	tI2C_Ty≥Def
;

1056 
__IO
 
uöt32_t
 
KR
;

1057 
__IO
 
uöt32_t
 
PR
;

1058 
__IO
 
uöt32_t
 
RLR
;

1059 
__IO
 
uöt32_t
 
SR
;

1060 } 
	tIWDG_Ty≥Def
;

1068 
__IO
 
uöt32_t
 
CR
;

1069 
__IO
 
uöt32_t
 
CSR
;

1070 } 
	tPWR_Ty≥Def
;

1078 
__IO
 
uöt32_t
 
CR
;

1079 
__IO
 
uöt32_t
 
CFGR
;

1080 
__IO
 
uöt32_t
 
CIR
;

1081 
__IO
 
uöt32_t
 
APB2RSTR
;

1082 
__IO
 
uöt32_t
 
APB1RSTR
;

1083 
__IO
 
uöt32_t
 
AHBENR
;

1084 
__IO
 
uöt32_t
 
APB2ENR
;

1085 
__IO
 
uöt32_t
 
APB1ENR
;

1086 
__IO
 
uöt32_t
 
BDCR
;

1087 
__IO
 
uöt32_t
 
CSR
;

1089 #ifde‡
STM32F10X_CL


1090 
__IO
 
uöt32_t
 
AHBRSTR
;

1091 
__IO
 
uöt32_t
 
CFGR2
;

1094 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1095 
uöt32_t
 
RESERVED0
;

1096 
__IO
 
uöt32_t
 
CFGR2
;

1098 } 
	tRCC_Ty≥Def
;

1106 
__IO
 
uöt16_t
 
CRH
;

1107 
uöt16_t
 
RESERVED0
;

1108 
__IO
 
uöt16_t
 
CRL
;

1109 
uöt16_t
 
RESERVED1
;

1110 
__IO
 
uöt16_t
 
PRLH
;

1111 
uöt16_t
 
RESERVED2
;

1112 
__IO
 
uöt16_t
 
PRLL
;

1113 
uöt16_t
 
RESERVED3
;

1114 
__IO
 
uöt16_t
 
DIVH
;

1115 
uöt16_t
 
RESERVED4
;

1116 
__IO
 
uöt16_t
 
DIVL
;

1117 
uöt16_t
 
RESERVED5
;

1118 
__IO
 
uöt16_t
 
CNTH
;

1119 
uöt16_t
 
RESERVED6
;

1120 
__IO
 
uöt16_t
 
CNTL
;

1121 
uöt16_t
 
RESERVED7
;

1122 
__IO
 
uöt16_t
 
ALRH
;

1123 
uöt16_t
 
RESERVED8
;

1124 
__IO
 
uöt16_t
 
ALRL
;

1125 
uöt16_t
 
RESERVED9
;

1126 } 
	tRTC_Ty≥Def
;

1134 
__IO
 
uöt32_t
 
POWER
;

1135 
__IO
 
uöt32_t
 
CLKCR
;

1136 
__IO
 
uöt32_t
 
ARG
;

1137 
__IO
 
uöt32_t
 
CMD
;

1138 
__I
 
uöt32_t
 
RESPCMD
;

1139 
__I
 
uöt32_t
 
RESP1
;

1140 
__I
 
uöt32_t
 
RESP2
;

1141 
__I
 
uöt32_t
 
RESP3
;

1142 
__I
 
uöt32_t
 
RESP4
;

1143 
__IO
 
uöt32_t
 
DTIMER
;

1144 
__IO
 
uöt32_t
 
DLEN
;

1145 
__IO
 
uöt32_t
 
DCTRL
;

1146 
__I
 
uöt32_t
 
DCOUNT
;

1147 
__I
 
uöt32_t
 
STA
;

1148 
__IO
 
uöt32_t
 
ICR
;

1149 
__IO
 
uöt32_t
 
MASK
;

1150 
uöt32_t
 
RESERVED0
[2];

1151 
__I
 
uöt32_t
 
FIFOCNT
;

1152 
uöt32_t
 
RESERVED1
[13];

1153 
__IO
 
uöt32_t
 
FIFO
;

1154 } 
	tSDIO_Ty≥Def
;

1162 
__IO
 
uöt16_t
 
CR1
;

1163 
uöt16_t
 
RESERVED0
;

1164 
__IO
 
uöt16_t
 
CR2
;

1165 
uöt16_t
 
RESERVED1
;

1166 
__IO
 
uöt16_t
 
SR
;

1167 
uöt16_t
 
RESERVED2
;

1168 
__IO
 
uöt16_t
 
DR
;

1169 
uöt16_t
 
RESERVED3
;

1170 
__IO
 
uöt16_t
 
CRCPR
;

1171 
uöt16_t
 
RESERVED4
;

1172 
__IO
 
uöt16_t
 
RXCRCR
;

1173 
uöt16_t
 
RESERVED5
;

1174 
__IO
 
uöt16_t
 
TXCRCR
;

1175 
uöt16_t
 
RESERVED6
;

1176 
__IO
 
uöt16_t
 
I2SCFGR
;

1177 
uöt16_t
 
RESERVED7
;

1178 
__IO
 
uöt16_t
 
I2SPR
;

1179 
uöt16_t
 
RESERVED8
;

1180 } 
	tSPI_Ty≥Def
;

1188 
__IO
 
uöt16_t
 
CR1
;

1189 
uöt16_t
 
RESERVED0
;

1190 
__IO
 
uöt16_t
 
CR2
;

1191 
uöt16_t
 
RESERVED1
;

1192 
__IO
 
uöt16_t
 
SMCR
;

1193 
uöt16_t
 
RESERVED2
;

1194 
__IO
 
uöt16_t
 
DIER
;

1195 
uöt16_t
 
RESERVED3
;

1196 
__IO
 
uöt16_t
 
SR
;

1197 
uöt16_t
 
RESERVED4
;

1198 
__IO
 
uöt16_t
 
EGR
;

1199 
uöt16_t
 
RESERVED5
;

1200 
__IO
 
uöt16_t
 
CCMR1
;

1201 
uöt16_t
 
RESERVED6
;

1202 
__IO
 
uöt16_t
 
CCMR2
;

1203 
uöt16_t
 
RESERVED7
;

1204 
__IO
 
uöt16_t
 
CCER
;

1205 
uöt16_t
 
RESERVED8
;

1206 
__IO
 
uöt16_t
 
CNT
;

1207 
uöt16_t
 
RESERVED9
;

1208 
__IO
 
uöt16_t
 
PSC
;

1209 
uöt16_t
 
RESERVED10
;

1210 
__IO
 
uöt16_t
 
ARR
;

1211 
uöt16_t
 
RESERVED11
;

1212 
__IO
 
uöt16_t
 
RCR
;

1213 
uöt16_t
 
RESERVED12
;

1214 
__IO
 
uöt16_t
 
CCR1
;

1215 
uöt16_t
 
RESERVED13
;

1216 
__IO
 
uöt16_t
 
CCR2
;

1217 
uöt16_t
 
RESERVED14
;

1218 
__IO
 
uöt16_t
 
CCR3
;

1219 
uöt16_t
 
RESERVED15
;

1220 
__IO
 
uöt16_t
 
CCR4
;

1221 
uöt16_t
 
RESERVED16
;

1222 
__IO
 
uöt16_t
 
BDTR
;

1223 
uöt16_t
 
RESERVED17
;

1224 
__IO
 
uöt16_t
 
DCR
;

1225 
uöt16_t
 
RESERVED18
;

1226 
__IO
 
uöt16_t
 
DMAR
;

1227 
uöt16_t
 
RESERVED19
;

1228 } 
	tTIM_Ty≥Def
;

1236 
__IO
 
uöt16_t
 
SR
;

1237 
uöt16_t
 
RESERVED0
;

1238 
__IO
 
uöt16_t
 
DR
;

1239 
uöt16_t
 
RESERVED1
;

1240 
__IO
 
uöt16_t
 
BRR
;

1241 
uöt16_t
 
RESERVED2
;

1242 
__IO
 
uöt16_t
 
CR1
;

1243 
uöt16_t
 
RESERVED3
;

1244 
__IO
 
uöt16_t
 
CR2
;

1245 
uöt16_t
 
RESERVED4
;

1246 
__IO
 
uöt16_t
 
CR3
;

1247 
uöt16_t
 
RESERVED5
;

1248 
__IO
 
uöt16_t
 
GTPR
;

1249 
uöt16_t
 
RESERVED6
;

1250 } 
	tUSART_Ty≥Def
;

1258 
__IO
 
uöt32_t
 
CR
;

1259 
__IO
 
uöt32_t
 
CFR
;

1260 
__IO
 
uöt32_t
 
SR
;

1261 } 
	tWWDG_Ty≥Def
;

1272 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1273 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1274 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1276 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1277 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1279 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1282 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1283 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

1284 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

1286 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1287 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1288 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1289 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1290 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1291 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1292 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1293 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1294 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1295 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1296 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1297 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1298 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1299 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1300 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1301 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1302 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1303 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1304 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1305 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1306 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1307 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1308 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

1309 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1310 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1311 
	#CEC_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1313 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1314 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1315 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

1316 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

1317 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1318 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1319 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

1320 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x1C00)

	)

1321 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1322 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

1323 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

1324 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1325 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1326 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1327 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1328 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1329 
	#TIM15_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1330 
	#TIM16_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1331 
	#TIM17_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1332 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4C00)

	)

1333 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1334 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1336 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

1338 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

1339 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

1340 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

1341 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

1342 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

1343 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

1344 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

1345 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

1346 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

1347 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

1348 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

1349 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

1350 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

1351 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

1352 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

1353 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

1355 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

1356 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

1358 
	#ETH_BASE
 (
AHBPERIPH_BASE
 + 0x8000)

	)

1359 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1360 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1361 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1362 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1364 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

1365 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

1366 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060Ë

	)

1367 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080Ë

	)

1368 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0Ë

	)

1370 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

1380 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1381 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1382 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1383 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1384 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1385 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1386 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1387 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1388 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1389 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1390 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1391 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1392 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1393 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1394 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1395 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1396 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1397 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1398 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1399 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1400 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1401 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1402 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

1403 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1404 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1405 
	#CEC
 ((
CEC_Ty≥Def
 *Ë
CEC_BASE
)

	)

1406 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

1407 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1408 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1409 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1410 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1411 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1412 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1413 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1414 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1415 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1416 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1417 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1418 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1419 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1420 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1421 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1422 
	#TIM15
 ((
TIM_Ty≥Def
 *Ë
TIM15_BASE
)

	)

1423 
	#TIM16
 ((
TIM_Ty≥Def
 *Ë
TIM16_BASE
)

	)

1424 
	#TIM17
 ((
TIM_Ty≥Def
 *Ë
TIM17_BASE
)

	)

1425 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1426 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1427 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1428 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1429 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1430 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1431 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1432 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1433 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1434 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1435 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1436 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1437 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1438 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1439 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1440 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1441 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1442 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1443 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1444 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1445 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1446 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1447 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1448 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1449 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1450 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1451 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1452 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1453 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1478 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1482 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1486 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

1495 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

1496 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

1497 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

1498 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

1499 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

1501 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

1502 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

1503 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

1504 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

1507 
	#PWR_CR_PLS_2V2
 ((
uöt16_t
)0x0000Ë

	)

1508 
	#PWR_CR_PLS_2V3
 ((
uöt16_t
)0x0020Ë

	)

1509 
	#PWR_CR_PLS_2V4
 ((
uöt16_t
)0x0040Ë

	)

1510 
	#PWR_CR_PLS_2V5
 ((
uöt16_t
)0x0060Ë

	)

1511 
	#PWR_CR_PLS_2V6
 ((
uöt16_t
)0x0080Ë

	)

1512 
	#PWR_CR_PLS_2V7
 ((
uöt16_t
)0x00A0Ë

	)

1513 
	#PWR_CR_PLS_2V8
 ((
uöt16_t
)0x00C0Ë

	)

1514 
	#PWR_CR_PLS_2V9
 ((
uöt16_t
)0x00E0Ë

	)

1516 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

1520 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

1521 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

1522 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

1523 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

1532 
	#BKP_DR1_D
 ((
uöt16_t
)0xFFFFË

	)

1535 
	#BKP_DR2_D
 ((
uöt16_t
)0xFFFFË

	)

1538 
	#BKP_DR3_D
 ((
uöt16_t
)0xFFFFË

	)

1541 
	#BKP_DR4_D
 ((
uöt16_t
)0xFFFFË

	)

1544 
	#BKP_DR5_D
 ((
uöt16_t
)0xFFFFË

	)

1547 
	#BKP_DR6_D
 ((
uöt16_t
)0xFFFFË

	)

1550 
	#BKP_DR7_D
 ((
uöt16_t
)0xFFFFË

	)

1553 
	#BKP_DR8_D
 ((
uöt16_t
)0xFFFFË

	)

1556 
	#BKP_DR9_D
 ((
uöt16_t
)0xFFFFË

	)

1559 
	#BKP_DR10_D
 ((
uöt16_t
)0xFFFFË

	)

1562 
	#BKP_DR11_D
 ((
uöt16_t
)0xFFFFË

	)

1565 
	#BKP_DR12_D
 ((
uöt16_t
)0xFFFFË

	)

1568 
	#BKP_DR13_D
 ((
uöt16_t
)0xFFFFË

	)

1571 
	#BKP_DR14_D
 ((
uöt16_t
)0xFFFFË

	)

1574 
	#BKP_DR15_D
 ((
uöt16_t
)0xFFFFË

	)

1577 
	#BKP_DR16_D
 ((
uöt16_t
)0xFFFFË

	)

1580 
	#BKP_DR17_D
 ((
uöt16_t
)0xFFFFË

	)

1583 
	#BKP_DR18_D
 ((
uöt16_t
)0xFFFFË

	)

1586 
	#BKP_DR19_D
 ((
uöt16_t
)0xFFFFË

	)

1589 
	#BKP_DR20_D
 ((
uöt16_t
)0xFFFFË

	)

1592 
	#BKP_DR21_D
 ((
uöt16_t
)0xFFFFË

	)

1595 
	#BKP_DR22_D
 ((
uöt16_t
)0xFFFFË

	)

1598 
	#BKP_DR23_D
 ((
uöt16_t
)0xFFFFË

	)

1601 
	#BKP_DR24_D
 ((
uöt16_t
)0xFFFFË

	)

1604 
	#BKP_DR25_D
 ((
uöt16_t
)0xFFFFË

	)

1607 
	#BKP_DR26_D
 ((
uöt16_t
)0xFFFFË

	)

1610 
	#BKP_DR27_D
 ((
uöt16_t
)0xFFFFË

	)

1613 
	#BKP_DR28_D
 ((
uöt16_t
)0xFFFFË

	)

1616 
	#BKP_DR29_D
 ((
uöt16_t
)0xFFFFË

	)

1619 
	#BKP_DR30_D
 ((
uöt16_t
)0xFFFFË

	)

1622 
	#BKP_DR31_D
 ((
uöt16_t
)0xFFFFË

	)

1625 
	#BKP_DR32_D
 ((
uöt16_t
)0xFFFFË

	)

1628 
	#BKP_DR33_D
 ((
uöt16_t
)0xFFFFË

	)

1631 
	#BKP_DR34_D
 ((
uöt16_t
)0xFFFFË

	)

1634 
	#BKP_DR35_D
 ((
uöt16_t
)0xFFFFË

	)

1637 
	#BKP_DR36_D
 ((
uöt16_t
)0xFFFFË

	)

1640 
	#BKP_DR37_D
 ((
uöt16_t
)0xFFFFË

	)

1643 
	#BKP_DR38_D
 ((
uöt16_t
)0xFFFFË

	)

1646 
	#BKP_DR39_D
 ((
uöt16_t
)0xFFFFË

	)

1649 
	#BKP_DR40_D
 ((
uöt16_t
)0xFFFFË

	)

1652 
	#BKP_DR41_D
 ((
uöt16_t
)0xFFFFË

	)

1655 
	#BKP_DR42_D
 ((
uöt16_t
)0xFFFFË

	)

1658 
	#BKP_RTCCR_CAL
 ((
uöt16_t
)0x007FË

	)

1659 
	#BKP_RTCCR_CCO
 ((
uöt16_t
)0x0080Ë

	)

1660 
	#BKP_RTCCR_ASOE
 ((
uöt16_t
)0x0100Ë

	)

1661 
	#BKP_RTCCR_ASOS
 ((
uöt16_t
)0x0200Ë

	)

1664 
	#BKP_CR_TPE
 ((
uöt8_t
)0x01Ë

	)

1665 
	#BKP_CR_TPAL
 ((
uöt8_t
)0x02Ë

	)

1668 
	#BKP_CSR_CTE
 ((
uöt16_t
)0x0001Ë

	)

1669 
	#BKP_CSR_CTI
 ((
uöt16_t
)0x0002Ë

	)

1670 
	#BKP_CSR_TPIE
 ((
uöt16_t
)0x0004Ë

	)

1671 
	#BKP_CSR_TEF
 ((
uöt16_t
)0x0100Ë

	)

1672 
	#BKP_CSR_TIF
 ((
uöt16_t
)0x0200Ë

	)

1681 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1682 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1683 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1684 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1685 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1686 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1687 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1688 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1689 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1690 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1692 #ifde‡
STM32F10X_CL


1693 
	#RCC_CR_PLL2ON
 ((
uöt32_t
)0x04000000Ë

	)

1694 
	#RCC_CR_PLL2RDY
 ((
uöt32_t
)0x08000000Ë

	)

1695 
	#RCC_CR_PLL3ON
 ((
uöt32_t
)0x10000000Ë

	)

1696 
	#RCC_CR_PLL3RDY
 ((
uöt32_t
)0x20000000Ë

	)

1701 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1702 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1703 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1705 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1706 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1707 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1710 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1711 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1712 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1714 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1715 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1716 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1719 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1720 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1721 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1722 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1723 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1725 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1726 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1727 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1728 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1729 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1730 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1731 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1732 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1733 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1736 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1737 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1738 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1739 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1741 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1742 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1743 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1744 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1745 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1748 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1749 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1750 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1751 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1753 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1754 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1755 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1756 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1757 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1760 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1761 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1762 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1764 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1765 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1766 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1767 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1769 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1771 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1774 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1775 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1776 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1777 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1778 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1780 #ifde‡
STM32F10X_CL


1781 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1782 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1784 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1785 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1787 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1788 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1789 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1790 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1791 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1792 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1793 
	#RCC_CFGR_PLLMULL6_5
 ((
uöt32_t
)0x00340000Ë

	)

1795 
	#RCC_CFGR_OTGFSPRE
 ((
uöt32_t
)0x00400000Ë

	)

1798 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x0F000000Ë

	)

1799 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1800 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1801 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1802 
	#RCC_CFGR_MCO_3
 ((
uöt32_t
)0x08000000Ë

	)

1804 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1805 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1806 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1807 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1808 
	#RCC_CFGR_MCO_PLLCLK_Div2
 ((
uöt32_t
)0x07000000Ë

	)

1809 
	#RCC_CFGR_MCO_PLL2CLK
 ((
uöt32_t
)0x08000000Ë

	)

1810 
	#RCC_CFGR_MCO_PLL3CLK_Div2
 ((
uöt32_t
)0x09000000Ë

	)

1811 
	#RCC_CFGR_MCO_Ext_HSE
 ((
uöt32_t
)0x0A000000Ë

	)

1812 
	#RCC_CFGR_MCO_PLL3CLK
 ((
uöt32_t
)0x0B000000Ë

	)

1813 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1814 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1815 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

1817 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1818 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1820 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1821 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1822 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1823 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1824 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1825 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1826 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1827 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1828 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1829 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1830 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1831 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1832 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1833 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1834 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1837 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1838 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1839 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1840 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1842 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1843 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1844 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1845 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1846 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1848 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

1849 
	#RCC_CFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00010000Ë

	)

1851 
	#RCC_CFGR_PLLXTPRE_HSE
 ((
uöt32_t
)0x00000000Ë

	)

1852 
	#RCC_CFGR_PLLXTPRE_HSE_Div2
 ((
uöt32_t
)0x00020000Ë

	)

1854 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

1855 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

1856 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1857 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1858 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1859 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1860 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1861 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1862 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

1863 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

1864 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

1865 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

1866 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

1867 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

1868 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

1869 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

1872 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

1873 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1874 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1875 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1877 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1878 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1879 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1880 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1881 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

1885 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1886 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1887 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1888 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1889 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1890 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1891 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1892 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1893 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1894 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1895 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1896 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1897 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1898 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1899 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1900 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1901 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1903 #ifde‡
STM32F10X_CL


1904 
	#RCC_CIR_PLL2RDYF
 ((
uöt32_t
)0x00000020Ë

	)

1905 
	#RCC_CIR_PLL3RDYF
 ((
uöt32_t
)0x00000040Ë

	)

1906 
	#RCC_CIR_PLL2RDYIE
 ((
uöt32_t
)0x00002000Ë

	)

1907 
	#RCC_CIR_PLL3RDYIE
 ((
uöt32_t
)0x00004000Ë

	)

1908 
	#RCC_CIR_PLL2RDYC
 ((
uöt32_t
)0x00200000Ë

	)

1909 
	#RCC_CIR_PLL3RDYC
 ((
uöt32_t
)0x00400000Ë

	)

1913 
	#RCC_APB2RSTR_AFIORST
 ((
uöt32_t
)0x00000001Ë

	)

1914 
	#RCC_APB2RSTR_IOPARST
 ((
uöt32_t
)0x00000004Ë

	)

1915 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt32_t
)0x00000008Ë

	)

1916 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt32_t
)0x00000010Ë

	)

1917 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt32_t
)0x00000020Ë

	)

1918 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt32_t
)0x00000200Ë

	)

1920 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

1921 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt32_t
)0x00000400Ë

	)

1924 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000800Ë

	)

1925 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000Ë

	)

1926 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00004000Ë

	)

1928 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1929 
	#RCC_APB2RSTR_TIM15RST
 ((
uöt32_t
)0x00010000Ë

	)

1930 
	#RCC_APB2RSTR_TIM16RST
 ((
uöt32_t
)0x00020000Ë

	)

1931 
	#RCC_APB2RSTR_TIM17RST
 ((
uöt32_t
)0x00040000Ë

	)

1934 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1935 
	#RCC_APB2RSTR_IOPERST
 ((
uöt32_t
)0x00000040Ë

	)

1938 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

1939 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1940 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1941 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00002000Ë

	)

1942 
	#RCC_APB2RSTR_ADC3RST
 ((
uöt32_t
)0x00008000Ë

	)

1945 #i‡
deföed
 (
STM32F10X_HD_VL
)

1946 
	#RCC_APB2RSTR_IOPFRST
 ((
uöt32_t
)0x00000080Ë

	)

1947 
	#RCC_APB2RSTR_IOPGRST
 ((
uöt32_t
)0x00000100Ë

	)

1950 #ifde‡
STM32F10X_XL


1951 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00080000Ë

	)

1952 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00100000Ë

	)

1953 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00200000Ë

	)

1957 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1958 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1959 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1960 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1961 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1963 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

1964 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000Ë

	)

1967 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1968 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1970 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

1971 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1972 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1973 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1974 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1977 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
Ë|| deföed (
STM32F10X_XL
)

1978 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

1981 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_XL
)

1982 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1983 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1984 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1985 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1986 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1987 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1988 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1991 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

1992 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1993 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1994 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1995 
	#RCC_APB1RSTR_CECRST
 ((
uöt32_t
)0x40000000Ë

	)

1998 #i‡
deföed
 (
STM32F10X_HD_VL
)

1999 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

2000 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

2001 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

2002 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

2003 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

2004 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

2005 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

2008 #ifde‡
STM32F10X_CL


2009 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000Ë

	)

2012 #ifde‡
STM32F10X_XL


2013 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040Ë

	)

2014 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080Ë

	)

2015 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100Ë

	)

2019 
	#RCC_AHBENR_DMA1EN
 ((
uöt16_t
)0x0001Ë

	)

2020 
	#RCC_AHBENR_SRAMEN
 ((
uöt16_t
)0x0004Ë

	)

2021 
	#RCC_AHBENR_FLITFEN
 ((
uöt16_t
)0x0010Ë

	)

2022 
	#RCC_AHBENR_CRCEN
 ((
uöt16_t
)0x0040Ë

	)

2024 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
Ë|| deföed (
STM32F10X_HD_VL
)

2025 
	#RCC_AHBENR_DMA2EN
 ((
uöt16_t
)0x0002Ë

	)

2028 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

2029 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

2030 
	#RCC_AHBENR_SDIOEN
 ((
uöt16_t
)0x0400Ë

	)

2033 #i‡
deföed
 (
STM32F10X_HD_VL
)

2034 
	#RCC_AHBENR_FSMCEN
 ((
uöt16_t
)0x0100Ë

	)

2037 #ifde‡
STM32F10X_CL


2038 
	#RCC_AHBENR_OTGFSEN
 ((
uöt32_t
)0x00001000Ë

	)

2039 
	#RCC_AHBENR_ETHMACEN
 ((
uöt32_t
)0x00004000Ë

	)

2040 
	#RCC_AHBENR_ETHMACTXEN
 ((
uöt32_t
)0x00008000Ë

	)

2041 
	#RCC_AHBENR_ETHMACRXEN
 ((
uöt32_t
)0x00010000Ë

	)

2045 
	#RCC_APB2ENR_AFIOEN
 ((
uöt32_t
)0x00000001Ë

	)

2046 
	#RCC_APB2ENR_IOPAEN
 ((
uöt32_t
)0x00000004Ë

	)

2047 
	#RCC_APB2ENR_IOPBEN
 ((
uöt32_t
)0x00000008Ë

	)

2048 
	#RCC_APB2ENR_IOPCEN
 ((
uöt32_t
)0x00000010Ë

	)

2049 
	#RCC_APB2ENR_IOPDEN
 ((
uöt32_t
)0x00000020Ë

	)

2050 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000200Ë

	)

2052 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

2053 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000400Ë

	)

2056 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000800Ë

	)

2057 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000Ë

	)

2058 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00004000Ë

	)

2060 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2061 
	#RCC_APB2ENR_TIM15EN
 ((
uöt32_t
)0x00010000Ë

	)

2062 
	#RCC_APB2ENR_TIM16EN
 ((
uöt32_t
)0x00020000Ë

	)

2063 
	#RCC_APB2ENR_TIM17EN
 ((
uöt32_t
)0x00040000Ë

	)

2066 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2067 
	#RCC_APB2ENR_IOPEEN
 ((
uöt32_t
)0x00000040Ë

	)

2070 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_XL
)

2071 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

2072 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

2073 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00002000Ë

	)

2074 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00008000Ë

	)

2077 #i‡
deföed
 (
STM32F10X_HD_VL
)

2078 
	#RCC_APB2ENR_IOPFEN
 ((
uöt32_t
)0x00000080Ë

	)

2079 
	#RCC_APB2ENR_IOPGEN
 ((
uöt32_t
)0x00000100Ë

	)

2082 #ifde‡
STM32F10X_XL


2083 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00080000Ë

	)

2084 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00100000Ë

	)

2085 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00200000Ë

	)

2089 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

2090 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

2091 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

2092 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

2093 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

2095 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
)

2096 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000Ë

	)

2099 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

2100 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

2102 #i‡!
deföed
 (
STM32F10X_LD
Ë&& !deföed (
STM32F10X_LD_VL
)

2103 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

2104 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

2105 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

2106 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

2109 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_MD
Ë|| deföed (
STM32F10X_LD
)

2110 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

2113 #i‡
deföed
 (
STM32F10X_HD
Ë|| deföed (
STM32F10X_CL
)

2114 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2115 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2116 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2117 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2118 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2119 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2120 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2123 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2124 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

2125 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

2126 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

2127 
	#RCC_APB1ENR_CECEN
 ((
uöt32_t
)0x40000000Ë

	)

2130 #ifde‡
STM32F10X_HD_VL


2131 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

2132 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2133 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2134 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2135 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

2136 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

2137 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

2140 #ifde‡
STM32F10X_CL


2141 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000Ë

	)

2144 #ifde‡
STM32F10X_XL


2145 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040Ë

	)

2146 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080Ë

	)

2147 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100Ë

	)

2151 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

2152 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

2153 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

2155 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

2156 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

2157 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

2160 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

2161 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

2162 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

2163 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

2165 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

2166 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

2169 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

2170 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

2171 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

2172 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

2173 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

2174 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

2175 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

2176 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

2177 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

2179 #ifde‡
STM32F10X_CL


2181 
	#RCC_AHBRSTR_OTGFSRST
 ((
uöt32_t
)0x00001000Ë

	)

2182 
	#RCC_AHBRSTR_ETHMACRST
 ((
uöt32_t
)0x00004000Ë

	)

2186 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2187 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2188 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2189 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2190 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2192 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2193 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2194 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2195 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2196 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2197 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2198 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2199 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2200 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2201 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2202 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2203 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2204 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2205 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2206 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2207 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2210 
	#RCC_CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0Ë

	)

2211 
	#RCC_CFGR2_PREDIV2_0
 ((
uöt32_t
)0x00000010Ë

	)

2212 
	#RCC_CFGR2_PREDIV2_1
 ((
uöt32_t
)0x00000020Ë

	)

2213 
	#RCC_CFGR2_PREDIV2_2
 ((
uöt32_t
)0x00000040Ë

	)

2214 
	#RCC_CFGR2_PREDIV2_3
 ((
uöt32_t
)0x00000080Ë

	)

2216 
	#RCC_CFGR2_PREDIV2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2217 
	#RCC_CFGR2_PREDIV2_DIV2
 ((
uöt32_t
)0x00000010Ë

	)

2218 
	#RCC_CFGR2_PREDIV2_DIV3
 ((
uöt32_t
)0x00000020Ë

	)

2219 
	#RCC_CFGR2_PREDIV2_DIV4
 ((
uöt32_t
)0x00000030Ë

	)

2220 
	#RCC_CFGR2_PREDIV2_DIV5
 ((
uöt32_t
)0x00000040Ë

	)

2221 
	#RCC_CFGR2_PREDIV2_DIV6
 ((
uöt32_t
)0x00000050Ë

	)

2222 
	#RCC_CFGR2_PREDIV2_DIV7
 ((
uöt32_t
)0x00000060Ë

	)

2223 
	#RCC_CFGR2_PREDIV2_DIV8
 ((
uöt32_t
)0x00000070Ë

	)

2224 
	#RCC_CFGR2_PREDIV2_DIV9
 ((
uöt32_t
)0x00000080Ë

	)

2225 
	#RCC_CFGR2_PREDIV2_DIV10
 ((
uöt32_t
)0x00000090Ë

	)

2226 
	#RCC_CFGR2_PREDIV2_DIV11
 ((
uöt32_t
)0x000000A0Ë

	)

2227 
	#RCC_CFGR2_PREDIV2_DIV12
 ((
uöt32_t
)0x000000B0Ë

	)

2228 
	#RCC_CFGR2_PREDIV2_DIV13
 ((
uöt32_t
)0x000000C0Ë

	)

2229 
	#RCC_CFGR2_PREDIV2_DIV14
 ((
uöt32_t
)0x000000D0Ë

	)

2230 
	#RCC_CFGR2_PREDIV2_DIV15
 ((
uöt32_t
)0x000000E0Ë

	)

2231 
	#RCC_CFGR2_PREDIV2_DIV16
 ((
uöt32_t
)0x000000F0Ë

	)

2234 
	#RCC_CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00Ë

	)

2235 
	#RCC_CFGR2_PLL2MUL_0
 ((
uöt32_t
)0x00000100Ë

	)

2236 
	#RCC_CFGR2_PLL2MUL_1
 ((
uöt32_t
)0x00000200Ë

	)

2237 
	#RCC_CFGR2_PLL2MUL_2
 ((
uöt32_t
)0x00000400Ë

	)

2238 
	#RCC_CFGR2_PLL2MUL_3
 ((
uöt32_t
)0x00000800Ë

	)

2240 
	#RCC_CFGR2_PLL2MUL8
 ((
uöt32_t
)0x00000600Ë

	)

2241 
	#RCC_CFGR2_PLL2MUL9
 ((
uöt32_t
)0x00000700Ë

	)

2242 
	#RCC_CFGR2_PLL2MUL10
 ((
uöt32_t
)0x00000800Ë

	)

2243 
	#RCC_CFGR2_PLL2MUL11
 ((
uöt32_t
)0x00000900Ë

	)

2244 
	#RCC_CFGR2_PLL2MUL12
 ((
uöt32_t
)0x00000A00Ë

	)

2245 
	#RCC_CFGR2_PLL2MUL13
 ((
uöt32_t
)0x00000B00Ë

	)

2246 
	#RCC_CFGR2_PLL2MUL14
 ((
uöt32_t
)0x00000C00Ë

	)

2247 
	#RCC_CFGR2_PLL2MUL16
 ((
uöt32_t
)0x00000E00Ë

	)

2248 
	#RCC_CFGR2_PLL2MUL20
 ((
uöt32_t
)0x00000F00Ë

	)

2251 
	#RCC_CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000Ë

	)

2252 
	#RCC_CFGR2_PLL3MUL_0
 ((
uöt32_t
)0x00001000Ë

	)

2253 
	#RCC_CFGR2_PLL3MUL_1
 ((
uöt32_t
)0x00002000Ë

	)

2254 
	#RCC_CFGR2_PLL3MUL_2
 ((
uöt32_t
)0x00004000Ë

	)

2255 
	#RCC_CFGR2_PLL3MUL_3
 ((
uöt32_t
)0x00008000Ë

	)

2257 
	#RCC_CFGR2_PLL3MUL8
 ((
uöt32_t
)0x00006000Ë

	)

2258 
	#RCC_CFGR2_PLL3MUL9
 ((
uöt32_t
)0x00007000Ë

	)

2259 
	#RCC_CFGR2_PLL3MUL10
 ((
uöt32_t
)0x00008000Ë

	)

2260 
	#RCC_CFGR2_PLL3MUL11
 ((
uöt32_t
)0x00009000Ë

	)

2261 
	#RCC_CFGR2_PLL3MUL12
 ((
uöt32_t
)0x0000A000Ë

	)

2262 
	#RCC_CFGR2_PLL3MUL13
 ((
uöt32_t
)0x0000B000Ë

	)

2263 
	#RCC_CFGR2_PLL3MUL14
 ((
uöt32_t
)0x0000C000Ë

	)

2264 
	#RCC_CFGR2_PLL3MUL16
 ((
uöt32_t
)0x0000E000Ë

	)

2265 
	#RCC_CFGR2_PLL3MUL20
 ((
uöt32_t
)0x0000F000Ë

	)

2267 
	#RCC_CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000Ë

	)

2268 
	#RCC_CFGR2_PREDIV1SRC_PLL2
 ((
uöt32_t
)0x00010000Ë

	)

2269 
	#RCC_CFGR2_PREDIV1SRC_HSE
 ((
uöt32_t
)0x00000000Ë

	)

2270 
	#RCC_CFGR2_I2S2SRC
 ((
uöt32_t
)0x00020000Ë

	)

2271 
	#RCC_CFGR2_I2S3SRC
 ((
uöt32_t
)0x00040000Ë

	)

2274 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2277 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

2278 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

2279 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

2280 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

2281 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

2283 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2284 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

2285 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

2286 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

2287 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

2288 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

2289 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

2290 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

2291 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

2292 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

2293 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

2294 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

2295 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

2296 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

2297 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

2298 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

2308 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2310 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

2311 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

2312 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

2314 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

2315 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

2316 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

2318 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

2319 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

2320 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

2322 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

2323 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

2324 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

2326 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

2327 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

2328 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

2330 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

2331 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

2332 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

2334 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

2335 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

2336 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

2338 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

2339 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

2340 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

2342 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2344 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

2345 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

2346 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

2348 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

2349 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

2350 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

2352 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

2353 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

2354 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

2356 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

2357 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

2358 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

2360 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

2361 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

2362 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

2364 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

2365 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

2366 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

2368 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

2369 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

2370 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

2372 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

2373 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

2374 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

2377 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

2379 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

2380 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

2381 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

2383 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

2384 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

2385 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

2387 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

2388 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

2389 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

2391 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

2392 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

2393 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

2395 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

2396 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

2397 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

2399 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

2400 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

2401 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

2403 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

2404 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

2405 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

2407 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

2408 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

2409 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

2411 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

2413 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

2414 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

2415 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

2417 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

2418 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

2419 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

2421 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

2422 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

2423 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

2425 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

2426 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

2427 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

2429 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

2430 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

2431 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

2433 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

2434 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

2435 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

2437 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

2438 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

2439 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

2441 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

2442 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

2443 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

2446 
	#GPIO_IDR_IDR0
 ((
uöt16_t
)0x0001Ë

	)

2447 
	#GPIO_IDR_IDR1
 ((
uöt16_t
)0x0002Ë

	)

2448 
	#GPIO_IDR_IDR2
 ((
uöt16_t
)0x0004Ë

	)

2449 
	#GPIO_IDR_IDR3
 ((
uöt16_t
)0x0008Ë

	)

2450 
	#GPIO_IDR_IDR4
 ((
uöt16_t
)0x0010Ë

	)

2451 
	#GPIO_IDR_IDR5
 ((
uöt16_t
)0x0020Ë

	)

2452 
	#GPIO_IDR_IDR6
 ((
uöt16_t
)0x0040Ë

	)

2453 
	#GPIO_IDR_IDR7
 ((
uöt16_t
)0x0080Ë

	)

2454 
	#GPIO_IDR_IDR8
 ((
uöt16_t
)0x0100Ë

	)

2455 
	#GPIO_IDR_IDR9
 ((
uöt16_t
)0x0200Ë

	)

2456 
	#GPIO_IDR_IDR10
 ((
uöt16_t
)0x0400Ë

	)

2457 
	#GPIO_IDR_IDR11
 ((
uöt16_t
)0x0800Ë

	)

2458 
	#GPIO_IDR_IDR12
 ((
uöt16_t
)0x1000Ë

	)

2459 
	#GPIO_IDR_IDR13
 ((
uöt16_t
)0x2000Ë

	)

2460 
	#GPIO_IDR_IDR14
 ((
uöt16_t
)0x4000Ë

	)

2461 
	#GPIO_IDR_IDR15
 ((
uöt16_t
)0x8000Ë

	)

2464 
	#GPIO_ODR_ODR0
 ((
uöt16_t
)0x0001Ë

	)

2465 
	#GPIO_ODR_ODR1
 ((
uöt16_t
)0x0002Ë

	)

2466 
	#GPIO_ODR_ODR2
 ((
uöt16_t
)0x0004Ë

	)

2467 
	#GPIO_ODR_ODR3
 ((
uöt16_t
)0x0008Ë

	)

2468 
	#GPIO_ODR_ODR4
 ((
uöt16_t
)0x0010Ë

	)

2469 
	#GPIO_ODR_ODR5
 ((
uöt16_t
)0x0020Ë

	)

2470 
	#GPIO_ODR_ODR6
 ((
uöt16_t
)0x0040Ë

	)

2471 
	#GPIO_ODR_ODR7
 ((
uöt16_t
)0x0080Ë

	)

2472 
	#GPIO_ODR_ODR8
 ((
uöt16_t
)0x0100Ë

	)

2473 
	#GPIO_ODR_ODR9
 ((
uöt16_t
)0x0200Ë

	)

2474 
	#GPIO_ODR_ODR10
 ((
uöt16_t
)0x0400Ë

	)

2475 
	#GPIO_ODR_ODR11
 ((
uöt16_t
)0x0800Ë

	)

2476 
	#GPIO_ODR_ODR12
 ((
uöt16_t
)0x1000Ë

	)

2477 
	#GPIO_ODR_ODR13
 ((
uöt16_t
)0x2000Ë

	)

2478 
	#GPIO_ODR_ODR14
 ((
uöt16_t
)0x4000Ë

	)

2479 
	#GPIO_ODR_ODR15
 ((
uöt16_t
)0x8000Ë

	)

2482 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

2483 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

2484 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

2485 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

2486 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

2487 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

2488 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

2489 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

2490 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

2491 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

2492 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

2493 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

2494 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

2495 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

2496 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

2497 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

2499 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

2500 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

2501 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

2502 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

2503 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

2504 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

2505 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

2506 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

2507 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

2508 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

2509 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

2510 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

2511 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

2512 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

2513 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

2514 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

2517 
	#GPIO_BRR_BR0
 ((
uöt16_t
)0x0001Ë

	)

2518 
	#GPIO_BRR_BR1
 ((
uöt16_t
)0x0002Ë

	)

2519 
	#GPIO_BRR_BR2
 ((
uöt16_t
)0x0004Ë

	)

2520 
	#GPIO_BRR_BR3
 ((
uöt16_t
)0x0008Ë

	)

2521 
	#GPIO_BRR_BR4
 ((
uöt16_t
)0x0010Ë

	)

2522 
	#GPIO_BRR_BR5
 ((
uöt16_t
)0x0020Ë

	)

2523 
	#GPIO_BRR_BR6
 ((
uöt16_t
)0x0040Ë

	)

2524 
	#GPIO_BRR_BR7
 ((
uöt16_t
)0x0080Ë

	)

2525 
	#GPIO_BRR_BR8
 ((
uöt16_t
)0x0100Ë

	)

2526 
	#GPIO_BRR_BR9
 ((
uöt16_t
)0x0200Ë

	)

2527 
	#GPIO_BRR_BR10
 ((
uöt16_t
)0x0400Ë

	)

2528 
	#GPIO_BRR_BR11
 ((
uöt16_t
)0x0800Ë

	)

2529 
	#GPIO_BRR_BR12
 ((
uöt16_t
)0x1000Ë

	)

2530 
	#GPIO_BRR_BR13
 ((
uöt16_t
)0x2000Ë

	)

2531 
	#GPIO_BRR_BR14
 ((
uöt16_t
)0x4000Ë

	)

2532 
	#GPIO_BRR_BR15
 ((
uöt16_t
)0x8000Ë

	)

2535 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

2536 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

2537 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

2538 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

2539 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

2540 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

2541 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

2542 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

2543 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

2544 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

2545 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

2546 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

2547 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

2548 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

2549 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

2550 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

2551 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

2556 
	#AFIO_EVCR_PIN
 ((
uöt8_t
)0x0FË

	)

2557 
	#AFIO_EVCR_PIN_0
 ((
uöt8_t
)0x01Ë

	)

2558 
	#AFIO_EVCR_PIN_1
 ((
uöt8_t
)0x02Ë

	)

2559 
	#AFIO_EVCR_PIN_2
 ((
uöt8_t
)0x04Ë

	)

2560 
	#AFIO_EVCR_PIN_3
 ((
uöt8_t
)0x08Ë

	)

2563 
	#AFIO_EVCR_PIN_PX0
 ((
uöt8_t
)0x00Ë

	)

2564 
	#AFIO_EVCR_PIN_PX1
 ((
uöt8_t
)0x01Ë

	)

2565 
	#AFIO_EVCR_PIN_PX2
 ((
uöt8_t
)0x02Ë

	)

2566 
	#AFIO_EVCR_PIN_PX3
 ((
uöt8_t
)0x03Ë

	)

2567 
	#AFIO_EVCR_PIN_PX4
 ((
uöt8_t
)0x04Ë

	)

2568 
	#AFIO_EVCR_PIN_PX5
 ((
uöt8_t
)0x05Ë

	)

2569 
	#AFIO_EVCR_PIN_PX6
 ((
uöt8_t
)0x06Ë

	)

2570 
	#AFIO_EVCR_PIN_PX7
 ((
uöt8_t
)0x07Ë

	)

2571 
	#AFIO_EVCR_PIN_PX8
 ((
uöt8_t
)0x08Ë

	)

2572 
	#AFIO_EVCR_PIN_PX9
 ((
uöt8_t
)0x09Ë

	)

2573 
	#AFIO_EVCR_PIN_PX10
 ((
uöt8_t
)0x0AË

	)

2574 
	#AFIO_EVCR_PIN_PX11
 ((
uöt8_t
)0x0BË

	)

2575 
	#AFIO_EVCR_PIN_PX12
 ((
uöt8_t
)0x0CË

	)

2576 
	#AFIO_EVCR_PIN_PX13
 ((
uöt8_t
)0x0DË

	)

2577 
	#AFIO_EVCR_PIN_PX14
 ((
uöt8_t
)0x0EË

	)

2578 
	#AFIO_EVCR_PIN_PX15
 ((
uöt8_t
)0x0FË

	)

2580 
	#AFIO_EVCR_PORT
 ((
uöt8_t
)0x70Ë

	)

2581 
	#AFIO_EVCR_PORT_0
 ((
uöt8_t
)0x10Ë

	)

2582 
	#AFIO_EVCR_PORT_1
 ((
uöt8_t
)0x20Ë

	)

2583 
	#AFIO_EVCR_PORT_2
 ((
uöt8_t
)0x40Ë

	)

2586 
	#AFIO_EVCR_PORT_PA
 ((
uöt8_t
)0x00Ë

	)

2587 
	#AFIO_EVCR_PORT_PB
 ((
uöt8_t
)0x10Ë

	)

2588 
	#AFIO_EVCR_PORT_PC
 ((
uöt8_t
)0x20Ë

	)

2589 
	#AFIO_EVCR_PORT_PD
 ((
uöt8_t
)0x30Ë

	)

2590 
	#AFIO_EVCR_PORT_PE
 ((
uöt8_t
)0x40Ë

	)

2592 
	#AFIO_EVCR_EVOE
 ((
uöt8_t
)0x80Ë

	)

2595 
	#AFIO_MAPR_SPI1_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2596 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2597 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2598 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2600 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

2601 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

2602 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

2605 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2606 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

2607 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

2609 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2610 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

2611 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

2614 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2615 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

2616 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

2618 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

2619 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

2620 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

2623 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2624 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

2625 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

2626 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

2628 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2629 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

2630 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

2633 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

2634 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

2635 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

2637 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2639 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

2640 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

2641 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

2644 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

2645 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

2646 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

2648 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

2649 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

2650 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 ((
uöt32_t
)0x00020000Ë

	)

2651 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 ((
uöt32_t
)0x00040000Ë

	)

2652 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 ((
uöt32_t
)0x00080000Ë

	)

2653 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 ((
uöt32_t
)0x00100000Ë

	)

2656 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

2657 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

2658 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

2659 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

2661 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

2662 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

2663 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

2664 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

2666 #ifde‡
STM32F10X_CL


2668 
	#AFIO_MAPR_ETH_REMAP
 ((
uöt32_t
)0x00200000Ë

	)

2671 
	#AFIO_MAPR_CAN2_REMAP
 ((
uöt32_t
)0x00400000Ë

	)

2674 
	#AFIO_MAPR_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

2677 
	#AFIO_MAPR_SPI3_REMAP
 ((
uöt32_t
)0x10000000Ë

	)

2680 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 ((
uöt32_t
)0x20000000Ë

	)

2683 
	#AFIO_MAPR_PTP_PPS_REMAP
 ((
uöt32_t
)0x40000000Ë

	)

2687 
	#AFIO_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

2688 
	#AFIO_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

2689 
	#AFIO_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

2690 
	#AFIO_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

2693 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

2694 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

2695 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

2696 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

2697 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

2698 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

2699 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

2702 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

2703 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

2704 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

2705 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

2706 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

2707 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

2708 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

2711 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

2712 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

2713 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

2714 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

2715 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

2716 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

2717 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

2720 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

2721 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

2722 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

2723 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

2724 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

2725 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

2726 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

2729 
	#AFIO_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

2730 
	#AFIO_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

2731 
	#AFIO_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

2732 
	#AFIO_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

2735 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

2736 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

2737 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

2738 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

2739 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

2740 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

2741 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

2744 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

2745 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

2746 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

2747 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

2748 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

2749 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

2750 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

2753 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

2754 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

2755 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

2756 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

2757 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

2758 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

2759 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

2762 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

2763 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

2764 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

2765 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

2766 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

2767 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

2768 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

2771 
	#AFIO_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

2772 
	#AFIO_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

2773 
	#AFIO_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

2774 
	#AFIO_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

2777 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

2778 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

2779 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

2780 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

2781 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

2782 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

2783 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

2786 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

2787 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

2788 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

2789 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

2790 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

2791 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

2792 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

2795 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

2796 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

2797 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

2798 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

2799 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

2800 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

2801 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

2804 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

2805 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

2806 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

2807 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

2808 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

2809 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

2810 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

2813 
	#AFIO_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

2814 
	#AFIO_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

2815 
	#AFIO_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

2816 
	#AFIO_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

2819 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

2820 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

2821 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

2822 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

2823 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

2824 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

2825 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

2828 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

2829 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

2830 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

2831 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

2832 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

2833 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

2834 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

2837 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

2838 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

2839 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

2840 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

2841 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

2842 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

2843 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

2846 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

2847 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

2848 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

2849 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

2850 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

2851 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

2852 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

2854 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

2856 
	#AFIO_MAPR2_TIM15_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

2857 
	#AFIO_MAPR2_TIM16_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

2858 
	#AFIO_MAPR2_TIM17_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

2859 
	#AFIO_MAPR2_CEC_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

2860 
	#AFIO_MAPR2_TIM1_DMA_REMAP
 ((
uöt32_t
)0x00000010Ë

	)

2863 #ifde‡
STM32F10X_HD_VL


2864 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2865 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2866 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2867 
	#AFIO_MAPR2_TIM67_DAC_DMA_REMAP
 ((
uöt32_t
)0x00000800Ë

	)

2868 
	#AFIO_MAPR2_TIM12_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

2869 
	#AFIO_MAPR2_MISC_REMAP
 ((
uöt32_t
)0x00002000Ë

	)

2872 #ifde‡
STM32F10X_XL


2874 
	#AFIO_MAPR2_TIM9_REMAP
 ((
uöt32_t
)0x00000020Ë

	)

2875 
	#AFIO_MAPR2_TIM10_REMAP
 ((
uöt32_t
)0x00000040Ë

	)

2876 
	#AFIO_MAPR2_TIM11_REMAP
 ((
uöt32_t
)0x00000080Ë

	)

2877 
	#AFIO_MAPR2_TIM13_REMAP
 ((
uöt32_t
)0x00000100Ë

	)

2878 
	#AFIO_MAPR2_TIM14_REMAP
 ((
uöt32_t
)0x00000200Ë

	)

2879 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 ((
uöt32_t
)0x00000400Ë

	)

2889 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2890 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2891 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2892 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2895 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2898 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2901 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2902 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2903 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2912 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2913 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2914 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2915 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2916 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2917 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2918 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2919 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2920 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2921 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2922 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2923 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2924 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2925 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2926 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2927 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2928 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2929 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2930 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2931 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2932 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2933 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2934 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2935 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2936 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2937 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2938 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2939 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2940 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2941 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2942 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2943 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2944 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2947 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2948 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2949 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2950 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2951 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2952 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2953 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2954 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2955 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2956 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2957 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2958 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2959 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2960 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2961 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2962 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2963 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2964 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2965 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2966 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2967 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2968 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2969 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2970 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2971 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2972 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2973 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2974 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2975 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2976 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2977 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2978 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2979 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2982 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2983 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2984 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2985 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2986 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2987 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2988 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2989 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2990 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2991 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2992 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2993 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2994 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2995 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2996 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2997 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2998 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2999 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

3000 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

3001 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

3002 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

3003 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

3004 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

3005 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

3006 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

3007 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

3008 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

3009 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

3010 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

3011 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

3012 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

3013 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

3014 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

3017 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

3018 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

3019 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

3020 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

3021 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

3022 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

3023 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

3024 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

3025 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

3026 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

3027 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

3028 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

3029 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

3030 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

3031 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

3032 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

3033 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

3034 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

3035 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

3036 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

3037 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

3038 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

3039 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

3040 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

3041 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

3042 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

3043 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

3044 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

3045 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

3046 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

3047 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

3048 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

3049 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

3052 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

3053 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

3054 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

3055 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

3056 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

3057 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

3058 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

3059 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

3060 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

3061 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

3062 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

3063 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

3064 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

3065 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

3066 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

3067 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

3068 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

3069 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

3070 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

3071 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

3072 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

3073 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

3074 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

3075 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

3076 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

3077 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

3078 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

3079 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

3080 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

3081 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

3082 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

3083 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

3084 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

3087 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

3088 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

3089 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

3090 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

3093 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

3094 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

3095 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

3096 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

3099 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

3100 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

3101 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

3102 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

3105 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

3106 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

3107 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

3108 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

3111 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

3112 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

3113 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

3114 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

3117 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

3118 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

3119 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

3120 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

3123 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

3124 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

3125 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

3126 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

3129 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

3130 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

3131 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

3132 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

3135 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

3136 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

3137 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

3138 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

3139 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

3142 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

3143 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

3144 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

3145 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

3146 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

3147 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

3148 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

3149 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

3150 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

3151 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

3154 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

3155 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

3158 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

3159 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

3160 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

3162 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

3163 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

3164 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

3165 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

3168 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

3169 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

3170 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

3171 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

3172 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

3173 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

3174 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

3175 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

3177 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

3178 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

3181 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

3182 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

3183 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

3186 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

3187 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

3188 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

3189 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

3190 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

3191 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

3194 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

3195 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

3196 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

3197 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

3200 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

3201 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

3202 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

3203 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

3204 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

3205 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

3206 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

3207 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

3208 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

3209 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

3210 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

3211 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

3212 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

3213 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

3217 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

3218 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

3219 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

3220 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

3221 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

3223 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

3224 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

3225 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

3226 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

3227 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

3228 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

3230 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

3231 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

3232 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

3233 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

3234 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

3235 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

3238 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

3239 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

3240 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

3243 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

3244 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

3245 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

3246 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

3247 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

3250 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3253 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

3256 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

3265 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3266 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3267 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3268 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3269 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3270 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3271 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3272 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3273 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3274 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3275 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3276 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3277 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3278 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3279 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3280 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3281 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3282 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3283 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3284 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3287 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3288 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3289 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3290 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3291 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3292 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3293 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3294 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3295 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3296 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3297 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3298 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3299 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3300 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3301 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3302 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3303 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3304 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3305 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3306 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3309 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3310 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3311 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3312 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3313 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3314 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3315 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3316 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3317 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3318 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3319 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3320 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3321 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3322 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3323 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3324 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3325 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3326 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3327 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3328 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3331 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3332 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3333 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3334 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3335 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3336 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3337 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3338 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3339 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3340 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3341 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3342 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3343 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3344 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3345 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3346 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3347 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3348 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3349 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3350 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3353 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3354 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3355 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3356 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3357 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3358 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3359 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3360 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3361 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3362 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3363 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3364 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3365 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3366 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3367 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3368 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3369 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3370 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3371 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3372 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3375 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3376 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3377 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3378 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3379 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3380 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3381 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3382 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3383 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

3384 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

3385 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

3386 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

3387 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

3388 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

3389 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

3390 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

3391 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

3392 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

3393 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

3394 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

3403 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

3404 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3405 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3406 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3407 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

3408 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3409 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3410 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3411 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

3412 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3413 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3414 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3415 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

3416 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3417 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3418 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3419 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

3420 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3421 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3422 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3423 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

3424 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3425 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3426 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3427 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

3428 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3429 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3430 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3433 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

3434 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3435 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3436 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3437 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

3438 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3439 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3440 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3441 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

3442 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3443 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3444 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3445 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

3446 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3447 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3448 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3449 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

3450 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3451 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3452 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3453 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

3454 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3455 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3456 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3457 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

3458 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3459 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3460 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3463 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

3464 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3465 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3466 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3467 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

3468 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3469 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

3470 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

3472 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3473 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3474 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3476 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3477 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3478 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3480 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

3481 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3482 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3484 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3487 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

3488 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3489 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3490 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3491 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

3492 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3493 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

3494 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

3496 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3497 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3498 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3500 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3501 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3502 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3504 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

3505 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3506 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3508 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3511 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

3512 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3513 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3514 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3515 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

3516 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3517 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

3518 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

3520 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3521 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3522 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3524 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3525 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3526 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3528 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

3529 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3530 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3532 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3535 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

3536 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3537 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3538 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3539 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

3540 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3541 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

3542 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

3544 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3545 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3546 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3548 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3549 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3550 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3552 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

3553 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3554 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3556 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3559 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

3560 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3561 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3562 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3563 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

3564 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3565 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

3566 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

3568 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3569 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3570 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3572 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3573 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3574 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3576 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

3577 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3578 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3580 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3583 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

3584 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3585 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3586 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3587 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

3588 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3589 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

3590 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

3592 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

3593 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3594 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3596 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3597 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3598 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3600 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

3601 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3602 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3604 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3607 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

3608 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

3609 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

3610 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

3611 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

3612 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

3613 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

3614 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

3616 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

3617 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

3618 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

3620 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

3621 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

3622 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

3624 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

3625 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

3626 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

3628 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

3631 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

3634 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

3637 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

3640 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

3643 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

3646 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

3649 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

3652 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3655 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3658 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3662 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3665 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3668 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3672 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3675 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3678 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3681 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3685 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3688 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3691 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3694 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3703 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

3704 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

3705 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

3706 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

3707 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

3710 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

3711 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

3712 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

3713 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

3714 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

3715 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

3717 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

3718 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

3719 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

3720 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

3721 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

3722 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

3723 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

3724 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

3726 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

3727 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

3728 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

3729 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

3731 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

3732 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

3733 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

3734 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

3735 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

3737 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

3738 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

3742 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

3743 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

3744 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

3745 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

3746 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

3747 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

3749 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

3750 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

3751 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

3752 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

3754 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

3756 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

3757 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

3758 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

3759 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

3761 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

3762 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

3763 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

3764 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

3767 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

3768 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

3769 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

3770 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

3772 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

3773 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

3774 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

3775 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

3777 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

3778 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

3779 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

3780 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

3782 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

3783 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

3784 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

3785 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

3787 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

3788 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

3789 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

3790 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

3792 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

3793 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

3794 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

3795 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

3797 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

3798 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

3799 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

3800 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

3802 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

3803 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

3804 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

3805 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

3808 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

3809 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

3810 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

3811 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

3813 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

3814 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

3815 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

3816 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

3818 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

3819 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

3820 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

3821 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

3823 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

3824 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

3825 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

3826 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

3828 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

3829 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

3830 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

3831 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

3833 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

3834 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

3835 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

3836 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

3838 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

3839 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

3840 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

3841 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

3843 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

3844 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

3845 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

3846 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

3848 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

3849 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

3850 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

3851 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

3853 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

3854 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

3855 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

3856 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3859 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

3862 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

3865 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

3868 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

3871 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

3874 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

3877 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3878 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3879 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3880 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3881 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3882 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3884 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3885 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3886 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3887 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3888 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3889 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3891 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3892 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3893 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3894 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3895 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3896 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3898 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3899 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3900 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3901 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3902 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3903 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3905 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3906 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3907 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3908 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3909 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3912 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3913 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3914 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3915 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3916 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3917 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3919 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3920 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3921 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3922 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3923 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3924 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3926 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3927 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3928 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3929 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3930 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3931 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3933 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3934 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3935 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3936 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3937 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3938 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3940 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3941 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3942 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3943 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3944 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3945 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3947 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3948 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3949 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3950 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3951 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3952 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3955 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3956 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3957 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3958 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3959 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3960 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3962 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3963 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3964 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3965 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3966 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3967 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3969 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3970 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3971 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3972 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3973 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3974 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3976 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3977 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3978 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3979 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3980 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3981 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3983 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3984 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3985 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3986 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3987 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3988 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3990 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3991 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3992 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3993 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3994 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3995 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

3998 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

3999 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

4000 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

4001 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

4002 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

4003 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

4005 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

4006 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

4007 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

4008 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

4009 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

4010 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

4012 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

4013 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

4014 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

4015 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

4016 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

4017 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

4019 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

4020 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

4021 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

4022 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

4023 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

4024 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

4026 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

4027 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

4028 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

4031 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4034 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4037 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4040 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

4043 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

4044 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

4053 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

4054 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

4055 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

4057 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

4058 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

4059 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

4060 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

4062 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

4063 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

4064 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

4066 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

4067 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

4068 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

4069 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

4070 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

4072 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

4073 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

4074 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

4075 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

4077 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

4078 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

4079 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

4080 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

4082 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

4083 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

4084 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

4086 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

4087 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

4088 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

4089 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

4090 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

4092 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

4095 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

4096 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

4099 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

4102 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4105 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

4108 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

4111 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4114 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

4117 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

4118 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

4121 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

4122 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

4125 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

4126 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

4129 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

4132 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

4135 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

4136 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

4144 
	#CEC_CFGR_PE
 ((
uöt16_t
)0x0001Ë

	)

4145 
	#CEC_CFGR_IE
 ((
uöt16_t
)0x0002Ë

	)

4146 
	#CEC_CFGR_BTEM
 ((
uöt16_t
)0x0004Ë

	)

4147 
	#CEC_CFGR_BPEM
 ((
uöt16_t
)0x0008Ë

	)

4150 
	#CEC_OAR_OA
 ((
uöt16_t
)0x000FË

	)

4151 
	#CEC_OAR_OA_0
 ((
uöt16_t
)0x0001Ë

	)

4152 
	#CEC_OAR_OA_1
 ((
uöt16_t
)0x0002Ë

	)

4153 
	#CEC_OAR_OA_2
 ((
uöt16_t
)0x0004Ë

	)

4154 
	#CEC_OAR_OA_3
 ((
uöt16_t
)0x0008Ë

	)

4157 
	#CEC_PRES_PRES
 ((
uöt16_t
)0x3FFFË

	)

4160 
	#CEC_ESR_BTE
 ((
uöt16_t
)0x0001Ë

	)

4161 
	#CEC_ESR_BPE
 ((
uöt16_t
)0x0002Ë

	)

4162 
	#CEC_ESR_RBTFE
 ((
uöt16_t
)0x0004Ë

	)

4163 
	#CEC_ESR_SBE
 ((
uöt16_t
)0x0008Ë

	)

4164 
	#CEC_ESR_ACKE
 ((
uöt16_t
)0x0010Ë

	)

4165 
	#CEC_ESR_LINE
 ((
uöt16_t
)0x0020Ë

	)

4166 
	#CEC_ESR_TBTFE
 ((
uöt16_t
)0x0040Ë

	)

4169 
	#CEC_CSR_TSOM
 ((
uöt16_t
)0x0001Ë

	)

4170 
	#CEC_CSR_TEOM
 ((
uöt16_t
)0x0002Ë

	)

4171 
	#CEC_CSR_TERR
 ((
uöt16_t
)0x0004Ë

	)

4172 
	#CEC_CSR_TBTRF
 ((
uöt16_t
)0x0008Ë

	)

4173 
	#CEC_CSR_RSOM
 ((
uöt16_t
)0x0010Ë

	)

4174 
	#CEC_CSR_REOM
 ((
uöt16_t
)0x0020Ë

	)

4175 
	#CEC_CSR_RERR
 ((
uöt16_t
)0x0040Ë

	)

4176 
	#CEC_CSR_RBTF
 ((
uöt16_t
)0x0080Ë

	)

4179 
	#CEC_TXD_TXD
 ((
uöt16_t
)0x00FFË

	)

4182 
	#CEC_RXD_RXD
 ((
uöt16_t
)0x00FFË

	)

4191 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

4192 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

4193 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

4194 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

4195 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

4197 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

4198 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

4199 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

4201 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

4203 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

4204 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

4205 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

4208 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

4209 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

4210 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

4212 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

4213 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

4214 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

4215 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

4217 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

4218 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

4219 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

4220 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

4221 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

4222 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

4223 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

4224 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

4227 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

4228 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

4229 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

4230 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

4232 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

4233 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

4234 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

4235 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

4237 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

4239 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

4240 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

4241 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

4242 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

4243 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

4245 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

4246 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

4247 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

4249 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

4250 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

4253 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

4254 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

4255 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

4256 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

4257 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

4258 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

4259 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

4260 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

4261 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

4262 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

4263 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

4264 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

4265 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

4266 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

4267 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

4270 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

4271 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

4272 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

4273 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

4274 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

4275 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

4276 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

4277 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

4278 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

4279 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

4280 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

4281 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

4284 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

4285 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

4286 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

4287 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

4288 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

4289 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

4290 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

4291 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

4294 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

4295 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

4296 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

4298 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

4299 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

4301 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

4302 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

4303 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

4304 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

4306 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

4308 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

4309 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

4310 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

4312 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

4313 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

4315 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

4316 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

4317 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

4318 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

4320 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

4324 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

4325 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4326 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4328 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

4329 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

4330 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

4331 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

4332 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

4334 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

4335 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4336 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4338 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

4339 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

4340 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

4341 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

4342 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

4345 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

4346 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

4347 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

4349 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

4350 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

4352 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

4353 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

4354 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

4355 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

4357 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

4359 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

4360 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

4361 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

4363 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

4364 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

4366 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

4367 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

4368 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

4369 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

4371 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

4375 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

4376 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

4377 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

4379 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

4380 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

4381 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

4382 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

4383 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

4385 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

4386 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

4387 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

4389 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

4390 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

4391 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

4392 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

4393 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

4396 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

4397 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

4398 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

4399 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

4400 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

4401 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

4402 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

4403 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

4404 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

4405 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

4406 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

4407 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

4408 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

4409 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

4410 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

4413 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

4416 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

4419 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

4422 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

4425 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

4428 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

4431 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

4434 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

4437 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

4438 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

4439 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

4440 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

4441 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

4442 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

4443 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

4444 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

4445 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

4447 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

4448 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

4449 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

4451 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

4452 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

4453 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

4454 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

4455 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

4456 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

4459 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

4460 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

4461 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

4462 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

4463 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

4464 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

4466 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

4467 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

4468 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

4469 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

4470 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

4471 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

4474 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

4483 
	#RTC_CRH_SECIE
 ((
uöt8_t
)0x01Ë

	)

4484 
	#RTC_CRH_ALRIE
 ((
uöt8_t
)0x02Ë

	)

4485 
	#RTC_CRH_OWIE
 ((
uöt8_t
)0x04Ë

	)

4488 
	#RTC_CRL_SECF
 ((
uöt8_t
)0x01Ë

	)

4489 
	#RTC_CRL_ALRF
 ((
uöt8_t
)0x02Ë

	)

4490 
	#RTC_CRL_OWF
 ((
uöt8_t
)0x04Ë

	)

4491 
	#RTC_CRL_RSF
 ((
uöt8_t
)0x08Ë

	)

4492 
	#RTC_CRL_CNF
 ((
uöt8_t
)0x10Ë

	)

4493 
	#RTC_CRL_RTOFF
 ((
uöt8_t
)0x20Ë

	)

4496 
	#RTC_PRLH_PRL
 ((
uöt16_t
)0x000FË

	)

4499 
	#RTC_PRLL_PRL
 ((
uöt16_t
)0xFFFFË

	)

4502 
	#RTC_DIVH_RTC_DIV
 ((
uöt16_t
)0x000FË

	)

4505 
	#RTC_DIVL_RTC_DIV
 ((
uöt16_t
)0xFFFFË

	)

4508 
	#RTC_CNTH_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4511 
	#RTC_CNTL_RTC_CNT
 ((
uöt16_t
)0xFFFFË

	)

4514 
	#RTC_ALRH_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4517 
	#RTC_ALRL_RTC_ALR
 ((
uöt16_t
)0xFFFFË

	)

4526 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

4529 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

4530 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

4531 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

4532 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

4535 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

4538 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

4539 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

4548 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

4549 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

4550 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

4551 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

4552 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

4553 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

4554 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

4555 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

4557 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

4560 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

4561 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

4562 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

4563 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

4564 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

4565 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

4566 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

4567 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

4569 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

4570 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

4571 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

4573 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

4576 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

4585 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4586 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4588 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4589 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4590 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4592 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4593 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4594 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4596 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4597 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4598 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4599 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4600 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4601 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4602 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4603 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4604 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4605 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4608 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4609 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4611 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4612 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4613 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4615 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4616 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4617 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4619 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4620 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4621 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4622 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4623 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4624 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4625 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4626 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4627 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4628 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4631 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4632 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4634 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4635 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4636 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4638 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4639 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4640 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4642 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4643 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4644 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4645 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4646 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4647 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4648 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4649 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4650 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4651 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4654 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4655 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4657 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4658 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4659 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4661 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4662 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4663 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4665 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4666 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4667 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4668 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4669 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4670 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4671 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4672 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4673 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4674 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4677 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4678 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4679 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4680 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4681 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4683 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4684 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4685 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4686 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4687 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4689 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4690 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4691 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4692 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4693 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4695 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4696 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4697 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4698 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4699 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4701 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4702 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4703 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4704 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4705 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4707 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4708 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4709 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4710 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4711 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4713 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4714 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4715 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4718 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4719 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4720 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4721 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4722 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4724 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4725 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4726 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4727 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4728 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4730 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4731 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4732 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4733 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4734 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4736 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4737 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4738 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4739 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4740 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4742 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4743 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4744 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4745 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4746 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4748 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4749 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4750 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4751 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4752 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4754 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4755 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4756 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4759 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4760 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4761 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4762 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4763 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4765 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4766 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4767 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4768 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4769 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4771 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4772 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4773 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4774 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4775 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4777 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4778 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4779 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4780 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4781 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4783 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4784 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4785 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4786 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4787 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4789 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4790 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4791 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4792 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4793 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4795 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4796 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4797 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4800 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4801 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4802 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4803 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4804 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4806 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4807 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4808 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4809 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4810 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4812 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4813 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4814 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4815 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4816 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4818 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4819 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4820 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4821 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4822 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4824 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4825 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4826 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4827 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4828 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4830 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4831 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4832 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4833 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4834 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4836 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4837 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4838 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4841 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4842 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4843 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4844 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4845 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4847 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4848 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4849 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4850 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4851 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4853 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4854 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4855 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4856 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4857 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4859 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4860 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4861 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4862 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4863 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4865 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4866 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4867 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4868 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4869 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4871 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4872 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4873 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4876 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4877 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4878 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4879 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4880 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4882 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4883 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4884 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4885 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4886 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4888 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4889 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4890 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4891 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4892 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4894 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4895 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4896 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4897 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4898 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4900 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4901 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4902 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4903 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4904 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4906 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4907 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4908 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4911 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4912 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4913 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4914 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4915 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4917 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4918 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4919 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4920 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4921 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4923 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4924 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4925 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4926 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4927 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4929 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4930 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4931 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4932 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4933 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4935 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4936 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4937 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4938 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4939 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4941 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4942 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4943 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4946 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4947 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4948 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4949 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4950 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4952 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4953 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4954 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4955 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4956 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4958 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4959 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4960 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4961 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4962 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4964 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4965 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4966 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4967 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4968 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4970 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4971 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4972 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4973 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4974 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4976 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4977 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4978 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4981 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4982 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4983 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4985 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4986 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4987 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4989 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4991 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4992 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4993 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4994 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4995 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4997 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4998 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4999 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5000 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5001 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5003 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5004 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5005 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5006 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5009 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5010 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5011 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5013 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5014 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5015 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5017 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5019 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5020 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5021 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5022 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5023 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5025 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5026 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5027 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5028 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5029 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5031 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5032 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5033 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5034 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5037 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5038 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5039 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5041 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5042 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5043 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5045 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5047 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5048 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5049 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5050 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5051 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5053 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5054 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5055 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5056 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5057 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5059 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5060 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5061 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5062 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5065 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

5066 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

5067 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

5068 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

5069 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

5070 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

5071 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5074 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

5075 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

5076 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

5077 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

5078 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

5079 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

5080 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5083 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

5084 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

5085 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

5086 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

5087 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

5088 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

5089 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5092 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

5093 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5094 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5095 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5096 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5097 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5098 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5099 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5100 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5102 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5103 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5104 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5105 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5106 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5107 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5108 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5109 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5110 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5112 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5113 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5114 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5115 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5116 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5117 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5118 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5119 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5120 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5122 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5123 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5124 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5125 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5126 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5127 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5128 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5129 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5130 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5133 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5134 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5135 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5136 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5137 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5138 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5139 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5140 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5141 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5143 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5144 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5145 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5146 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5147 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5148 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5149 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5150 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5151 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5153 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5154 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5155 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5156 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5157 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5158 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5159 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5160 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5161 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5163 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5164 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5165 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5166 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5167 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5168 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5169 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5170 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5171 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5174 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5175 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5176 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5177 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5178 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5179 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5180 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5181 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5182 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5184 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5185 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5186 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5187 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5188 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5189 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5190 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5191 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5192 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5194 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5195 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5196 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5197 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5198 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5199 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5200 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5201 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5202 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5204 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5205 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5206 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5207 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5208 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5209 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5210 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5211 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5212 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5215 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5216 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5217 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5218 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5219 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5220 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5221 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5222 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5223 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5225 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5226 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5227 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5228 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5229 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5230 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5231 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5232 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5233 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5235 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5236 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5237 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5238 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5239 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5240 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5241 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5242 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5243 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5245 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5246 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5247 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5248 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5249 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5250 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5251 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5252 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5253 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5256 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5257 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5258 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5259 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5260 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5261 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5262 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5263 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5264 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5266 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5267 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5268 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5269 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5270 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5271 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5272 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5273 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5274 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5276 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5277 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5278 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5279 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5280 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5281 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5282 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5283 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5284 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5286 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5287 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5288 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5289 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5290 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5291 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5292 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5293 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5294 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5297 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5298 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5299 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5300 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5301 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5302 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5303 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5304 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5305 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5307 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5308 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5309 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5310 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5311 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5312 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5313 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5314 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5315 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5317 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5318 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5319 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5320 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5321 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5322 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5323 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5324 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5325 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5327 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5328 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5329 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5330 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5331 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5332 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5333 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5334 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5335 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5338 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5339 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5340 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5341 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5342 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5343 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5344 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5345 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5346 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5348 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5349 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5350 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5351 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5352 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5353 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5354 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5355 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5356 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5358 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5359 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5360 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5361 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5362 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5363 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5364 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5365 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5366 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5368 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5369 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5370 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5371 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5372 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5373 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5374 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5375 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5376 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5379 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5382 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5391 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

5392 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

5393 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

5396 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

5397 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

5398 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

5399 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

5401 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

5402 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

5403 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

5405 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

5406 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

5409 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

5412 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

5414 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

5415 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

5416 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

5418 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

5419 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

5420 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

5421 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

5422 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

5423 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

5424 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

5427 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

5430 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

5433 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

5436 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5439 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5442 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

5445 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

5448 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

5451 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

5452 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

5453 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

5454 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

5456 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

5457 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

5458 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

5459 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

5460 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

5462 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

5463 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

5464 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

5465 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

5468 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

5471 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

5472 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

5473 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

5474 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

5475 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

5476 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

5477 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

5478 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

5479 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

5480 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

5481 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

5482 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

5483 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

5484 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

5485 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

5486 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

5487 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

5488 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

5489 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

5490 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

5491 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

5492 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

5493 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

5494 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

5497 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

5498 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

5499 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

5500 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

5501 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

5502 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

5503 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

5504 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

5505 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

5506 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

5507 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

5508 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

5509 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

5512 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

5513 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

5514 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

5515 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

5516 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

5517 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

5518 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

5519 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

5520 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

5521 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

5522 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

5523 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

5524 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

5525 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

5526 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

5527 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

5528 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

5529 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

5530 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

5531 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

5532 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

5533 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

5534 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

5535 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

5538 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

5541 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5551 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

5553 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5554 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5555 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5557 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5558 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5559 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5561 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5562 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5563 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5565 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5567 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5568 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5569 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5571 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5572 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5575 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

5577 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5578 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5579 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5581 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5582 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5583 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5585 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5586 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5587 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5589 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5591 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5592 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5593 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5595 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5596 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5599 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

5601 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5602 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5603 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5605 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5606 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5607 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5609 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5610 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5611 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5613 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5615 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5616 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5617 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5619 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5620 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5623 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

5625 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5626 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5627 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5629 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5630 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5631 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5633 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5634 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5635 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5637 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5639 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5640 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5641 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5643 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5644 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5647 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

5649 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5650 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5651 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5653 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5654 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5655 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5657 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5658 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5659 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5661 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5663 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5664 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5665 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5667 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5668 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5671 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

5673 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5674 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5675 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5677 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5678 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5679 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5681 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5682 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5683 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5685 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5687 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5688 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5689 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5691 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5692 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5695 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

5697 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5698 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5699 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5701 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5702 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5703 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5705 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5706 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5707 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5709 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5711 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5712 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5713 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5715 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5716 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5719 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

5721 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5722 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5723 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5725 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5726 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5727 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5729 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5730 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5731 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5733 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5735 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5736 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5737 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5739 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5740 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5744 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

5745 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

5746 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

5747 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

5748 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

5749 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

5750 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

5751 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

5752 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

5753 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

5754 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

5755 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

5756 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

5759 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

5760 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

5761 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

5762 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

5763 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

5764 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

5765 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

5766 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

5767 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

5768 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

5771 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

5772 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

5773 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

5774 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

5775 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

5778 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

5779 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

5780 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

5781 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

5782 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

5783 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

5784 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

5785 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

5787 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

5790 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

5794 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

5797 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

5800 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

5803 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

5806 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

5809 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

5812 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

5815 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

5820 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

5823 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

5826 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

5829 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

5832 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

5835 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

5838 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

5841 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

5846 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5849 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5852 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5855 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5858 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5861 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5864 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

5867 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

5870 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5873 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5876 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5879 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5882 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5885 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5888 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5891 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5896 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

5899 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5902 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5905 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5908 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5911 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5914 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5917 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5922 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5924 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5925 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5926 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5927 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5928 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5929 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5931 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5934 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5936 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5937 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5938 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5939 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5940 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5941 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5943 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5946 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5948 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5949 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5950 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5951 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5952 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5953 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5955 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5958 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5960 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5961 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5962 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5963 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5964 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5965 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5967 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5970 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5972 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5973 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5974 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5975 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5976 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5977 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5979 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5982 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5984 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5985 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5986 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5987 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5988 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5989 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5991 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5994 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

5996 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5997 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5998 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5999 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

6000 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

6001 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

6003 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

6006 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

6008 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

6009 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

6010 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

6011 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

6012 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

6013 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

6015 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

6020 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6022 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6023 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6024 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6025 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6026 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6027 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6029 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6032 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6034 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6035 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6036 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6037 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6038 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6039 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6041 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6044 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6046 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6047 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6048 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6049 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6050 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6051 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6053 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6056 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6058 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6059 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6060 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6061 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6062 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6063 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6065 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6068 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6070 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6071 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6072 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6073 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6074 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6075 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6077 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6080 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6082 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6083 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6084 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6085 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6086 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6087 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6089 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6092 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6094 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6095 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6096 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6097 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6098 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6099 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6101 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6104 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6106 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6107 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6108 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6109 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6110 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6111 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6113 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6116 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6118 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6119 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6120 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6121 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6122 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6123 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6125 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6128 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6130 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6131 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6132 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6133 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6134 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6135 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6137 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6140 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6142 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6143 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6144 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6145 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6146 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6147 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6149 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6152 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6154 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6155 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6156 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6157 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6158 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6159 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6161 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6164 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6166 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6167 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6168 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6169 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6170 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6171 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6173 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6176 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6178 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6179 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6180 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6181 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6182 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6183 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6185 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6188 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

6190 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

6191 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

6192 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

6193 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

6194 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

6195 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

6197 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

6200 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

6202 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

6203 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

6204 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

6205 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

6206 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

6207 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

6209 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

6219 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

6220 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

6221 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

6222 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

6223 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

6224 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

6225 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

6226 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

6227 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

6230 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

6231 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

6232 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

6233 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

6234 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

6235 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

6236 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

6237 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

6238 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

6241 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

6242 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

6243 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

6244 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

6245 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

6246 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

6247 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

6248 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

6249 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

6250 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

6251 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

6252 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

6253 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

6254 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

6255 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

6256 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

6258 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

6259 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

6260 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

6261 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

6263 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

6264 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

6265 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

6266 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

6269 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

6270 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

6271 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

6272 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

6275 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

6276 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

6277 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

6278 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

6281 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

6282 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

6283 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

6284 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

6285 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

6286 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

6287 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

6288 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

6289 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

6290 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

6291 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

6292 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

6293 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

6294 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

6297 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

6298 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

6299 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

6301 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

6302 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

6303 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

6304 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

6306 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

6307 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

6310 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

6311 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

6312 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

6313 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

6314 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

6315 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

6319 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6320 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6321 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6322 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6323 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6326 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6327 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6328 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6331 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6332 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6333 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6334 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6337 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6338 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6339 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6340 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6343 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6344 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6345 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6346 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6347 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6350 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6351 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6352 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6355 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6356 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6357 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6358 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6361 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6362 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6363 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6364 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6367 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

6368 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6369 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6370 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6371 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6374 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6375 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

6376 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6379 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6380 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6381 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6382 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6385 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6386 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6387 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6388 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6391 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6392 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6393 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6394 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6397 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6398 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6399 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6402 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6403 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6404 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6405 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6408 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6409 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6410 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6411 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6414 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

6415 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

6416 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

6417 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

6420 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

6421 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

6422 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

6425 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6426 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

6427 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

6428 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

6431 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

6432 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

6433 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

6434 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

6438 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

6441 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

6442 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

6443 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

6444 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

6445 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

6446 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

6447 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

6448 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

6449 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

6450 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

6451 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

6452 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

6453 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

6454 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

6455 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

6458 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

6459 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

6460 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

6461 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

6462 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

6463 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

6464 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

6465 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

6466 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

6467 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

6468 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

6469 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

6470 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

6471 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

6472 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

6475 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

6476 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

6477 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

6478 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

6479 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

6480 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

6481 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

6482 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

6483 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

6484 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

6485 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

6486 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

6487 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

6488 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

6489 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

6492 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

6493 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

6494 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

6495 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

6496 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

6497 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

6498 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

6499 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

6500 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

6501 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

6502 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

6503 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

6504 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

6505 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

6506 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

6509 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6510 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6511 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6512 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6513 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6514 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6515 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6516 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6517 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6518 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6519 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6520 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6521 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6522 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6523 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6524 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6525 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6526 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6527 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6528 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6529 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6530 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6531 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6532 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6533 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6534 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6535 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6536 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6537 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6538 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6539 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6540 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6543 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6544 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6545 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6546 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6547 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6548 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6549 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6550 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6551 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6552 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6553 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6554 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6555 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6556 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6557 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6558 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6559 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6560 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6561 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6562 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6563 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6564 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6565 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6566 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6567 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6568 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6569 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6570 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6571 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6572 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6573 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6574 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6577 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6578 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6579 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6580 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6581 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6582 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6583 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6584 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6585 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6586 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6587 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6588 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6589 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6590 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6591 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6592 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6593 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6594 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6595 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6596 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6597 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6598 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6599 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6600 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6601 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6602 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6603 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6604 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6605 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6606 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6607 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6608 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6611 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6612 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6613 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6614 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6615 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6616 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6617 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6618 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6619 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6620 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6621 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6622 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6623 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6624 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6625 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6626 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6627 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6628 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6629 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6630 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6631 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6632 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6633 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6634 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6635 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6636 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6637 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6638 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6639 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6640 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6641 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6642 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6645 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6646 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6647 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6648 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6649 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6650 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6651 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6652 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6653 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6654 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6655 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6656 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6657 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6658 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6659 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6660 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6661 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6662 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6663 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6664 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6665 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6666 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6667 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6668 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6669 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6670 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6671 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6672 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6673 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6674 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6675 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6676 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6679 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6680 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6681 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6682 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6683 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6684 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6685 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6686 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6687 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6688 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6689 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6690 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6691 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6692 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6693 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6694 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6695 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6696 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6697 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6698 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6699 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6700 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6701 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6702 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6703 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6704 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6705 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6706 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6707 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6708 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6709 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6710 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6713 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6714 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6715 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6716 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6717 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6718 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6719 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6720 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6721 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6722 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6723 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6724 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6725 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6726 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6727 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6728 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6729 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6730 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6731 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6732 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6733 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6734 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6735 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6736 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6737 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6738 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6739 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6740 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6741 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6742 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6743 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6744 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6747 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6748 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6749 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6750 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6751 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6752 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6753 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6754 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6755 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6756 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6757 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6758 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6759 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6760 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6761 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6762 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6763 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6764 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6765 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6766 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6767 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6768 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6769 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6770 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6771 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6772 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6773 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6774 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6775 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6776 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6777 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6778 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6781 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6782 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6783 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6784 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6785 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6786 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6787 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6788 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6789 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6790 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6791 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6792 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6793 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6794 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6795 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6796 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6797 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6798 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6799 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6800 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6801 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6802 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6803 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6804 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6805 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6806 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6807 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6808 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6809 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6810 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6811 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6812 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6815 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6816 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6817 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6818 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6819 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6820 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6821 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6822 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6823 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6824 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6825 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6826 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6827 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6828 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6829 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6830 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6831 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6832 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6833 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6834 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6835 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6836 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6837 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6838 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6839 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6840 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6841 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6842 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6843 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6844 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6845 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6846 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6849 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6850 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6851 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6852 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6853 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6854 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6855 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6856 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6857 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6858 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6859 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6860 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6861 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6862 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6863 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6864 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6865 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6866 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6867 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6868 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6869 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6870 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6871 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6872 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6873 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6874 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6875 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6876 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6877 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6878 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6879 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6880 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6883 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6884 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6885 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6886 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6887 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6888 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6889 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6890 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6891 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6892 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6893 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6894 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6895 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6896 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6897 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6898 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6899 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6900 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6901 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6902 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6903 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6904 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6905 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6906 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6907 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6908 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6909 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6910 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6911 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6912 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6913 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6914 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6917 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6918 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6919 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6920 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6921 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6922 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6923 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6924 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6925 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6926 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6927 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6928 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6929 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6930 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6931 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6932 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6933 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6934 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6935 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6936 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6937 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6938 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6939 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6940 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6941 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6942 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6943 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6944 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6945 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6946 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6947 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6948 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6951 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6952 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6953 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6954 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6955 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6956 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6957 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6958 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6959 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6960 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6961 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6962 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6963 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6964 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6965 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6966 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6967 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6968 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6969 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6970 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6971 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6972 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6973 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6974 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6975 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6976 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6977 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6978 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6979 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6980 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6981 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6982 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6985 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6986 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6987 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6988 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6989 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6990 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6991 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6992 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6993 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6994 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6995 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6996 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6997 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6998 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6999 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7000 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7001 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7002 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7003 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7004 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7005 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7006 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7007 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7008 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7009 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7010 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7011 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7012 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7013 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7014 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7015 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7016 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7019 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7020 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7021 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7022 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7023 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7024 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7025 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7026 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7027 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7028 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7029 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7030 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7031 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7032 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7033 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7034 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7035 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7036 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7037 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7038 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7039 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7040 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7041 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7042 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7043 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7044 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7045 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7046 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7047 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7048 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7049 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7050 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7053 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7054 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7055 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7056 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7057 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7058 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7059 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7060 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7061 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7062 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7063 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7064 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7065 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7066 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7067 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7068 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7069 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7070 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7071 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7072 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7073 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7074 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7075 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7076 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7077 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7078 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7079 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7080 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7081 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7082 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7083 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7084 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7087 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7088 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7089 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7090 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7091 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7092 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7093 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7094 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7095 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7096 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7097 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7098 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7099 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7100 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7101 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7102 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7103 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7104 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7105 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7106 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7107 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7108 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7109 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7110 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7111 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7112 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7113 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7114 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7115 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7116 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7117 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7118 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7121 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7122 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7123 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7124 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7125 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7126 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7127 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7128 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7129 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7130 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7131 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7132 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7133 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7134 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7135 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7136 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7137 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7138 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7139 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7140 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7141 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7142 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7143 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7144 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7145 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7146 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7147 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7148 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7149 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7150 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7151 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7152 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7155 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7156 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7157 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7158 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7159 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7160 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7161 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7162 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7163 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7164 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7165 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7166 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7167 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7168 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7169 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7170 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7171 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7172 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7173 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7174 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7175 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7176 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7177 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7178 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7179 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7180 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7181 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7182 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7183 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7184 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7185 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7186 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7189 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7190 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7191 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7192 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7193 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7194 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7195 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7196 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7197 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7198 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7199 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7200 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7201 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7202 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7203 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7204 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7205 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7206 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7207 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7208 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7209 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7210 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7211 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7212 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7213 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7214 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7215 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7216 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7217 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7218 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7219 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7220 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7223 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7224 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7225 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7226 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7227 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7228 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7229 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7230 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7231 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7232 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7233 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7234 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7235 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7236 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7237 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7238 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7239 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7240 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7241 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7242 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7243 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7244 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7245 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7246 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7247 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7248 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7249 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7250 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7251 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7252 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7253 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7254 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7257 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7258 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7259 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7260 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7261 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7262 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7263 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7264 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7265 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7266 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7267 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7268 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7269 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7270 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7271 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7272 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7273 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7274 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7275 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7276 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7277 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7278 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7279 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7280 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7281 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7282 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7283 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7284 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7285 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7286 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7287 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7288 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7291 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7292 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7293 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7294 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7295 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7296 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7297 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7298 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7299 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7300 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7301 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7302 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7303 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7304 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7305 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7306 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7307 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7308 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7309 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7310 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7311 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7312 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7313 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7314 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7315 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7316 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7317 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7318 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7319 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7320 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7321 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7322 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7325 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7326 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7327 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7328 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7329 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7330 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7331 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7332 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7333 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7334 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7335 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7336 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7337 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7338 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7339 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7340 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7341 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7342 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7343 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7344 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7345 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7346 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7347 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7348 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7349 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7350 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7351 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7352 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7353 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7354 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7355 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7356 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7359 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7360 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7361 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7362 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7363 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7364 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7365 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7366 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7367 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7368 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7369 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7370 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7371 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7372 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7373 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7374 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7375 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7376 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7377 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7378 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7379 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7380 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7381 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7382 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7383 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7384 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7385 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7386 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7387 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7388 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7389 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7390 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7393 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7394 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7395 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7396 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7397 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7398 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7399 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7400 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7401 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7402 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7403 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7404 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7405 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7406 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7407 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7408 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7409 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7410 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7411 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7412 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7413 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7414 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7415 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7416 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7417 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7418 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7419 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7420 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7421 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7422 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7423 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7424 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7427 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

7428 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

7429 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

7430 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

7431 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

7432 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

7433 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

7434 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

7435 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

7436 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

7437 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

7438 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

7439 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

7440 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

7441 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

7442 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

7443 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

7444 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

7445 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

7446 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

7447 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

7448 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

7449 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

7450 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

7451 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

7452 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

7453 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

7454 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

7455 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

7456 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

7457 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

7458 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

7467 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

7468 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

7469 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

7471 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

7472 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

7473 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

7474 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

7476 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

7477 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

7478 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

7479 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

7480 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

7481 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

7482 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

7483 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

7484 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

7485 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

7488 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

7489 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

7490 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

7491 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

7492 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

7493 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

7496 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

7497 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

7498 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

7499 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

7500 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

7501 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

7502 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

7503 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

7506 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

7509 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

7512 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

7515 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

7518 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

7520 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

7521 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

7522 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

7524 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

7526 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

7527 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

7528 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

7530 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

7532 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

7533 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

7534 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

7536 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

7537 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

7540 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

7541 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

7542 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

7551 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

7552 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

7553 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

7554 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

7555 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

7556 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

7557 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

7558 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

7559 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

7560 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

7561 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

7562 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

7563 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

7564 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

7567 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

7568 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

7569 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

7570 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

7571 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

7572 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

7573 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

7575 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

7576 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

7577 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

7578 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

7579 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

7582 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

7583 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

7585 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

7586 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

7587 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

7588 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

7589 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

7590 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

7591 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

7592 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

7593 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

7594 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

7596 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

7599 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

7600 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

7603 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

7606 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

7607 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

7608 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

7609 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

7610 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

7611 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

7612 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

7613 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

7614 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

7615 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

7616 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

7617 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

7618 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

7619 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

7622 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

7623 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

7624 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

7625 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

7626 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

7627 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

7628 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

7629 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

7632 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

7633 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

7634 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

7637 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

7646 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

7647 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

7648 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

7649 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

7650 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

7651 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

7652 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

7653 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

7654 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

7655 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

7658 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

7661 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

7662 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

7665 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

7666 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

7667 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

7668 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

7669 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

7670 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

7671 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

7672 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

7673 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

7674 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

7675 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

7676 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

7677 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

7678 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

7679 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

7682 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

7683 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

7684 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

7685 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

7686 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

7687 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

7688 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

7690 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

7691 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

7692 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

7694 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

7697 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

7698 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

7699 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

7700 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

7701 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

7702 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

7703 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

7704 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

7705 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

7706 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

7707 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

7708 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

7711 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

7712 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

7713 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

7714 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

7715 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

7716 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

7717 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

7718 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

7719 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

7721 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

7730 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

7732 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

7733 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

7734 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

7735 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

7736 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

7737 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

7738 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

7739 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

7740 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

7741 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

7742 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

7743 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

7744 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

7745 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

7746 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

7747 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

7748 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

7751 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

7752 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

7753 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

7754 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

7756 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

7757 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

7758 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

7760 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

7761 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

7762 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

7763 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

7764 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

7765 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

7766 
	#DBGMCU_CR_DBG_CAN1_STOP
 ((
uöt32_t
)0x00004000Ë

	)

7767 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

7768 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

7769 
	#DBGMCU_CR_DBG_TIM8_STOP
 ((
uöt32_t
)0x00020000Ë

	)

7770 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00040000Ë

	)

7771 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00080000Ë

	)

7772 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00100000Ë

	)

7773 
	#DBGMCU_CR_DBG_CAN2_STOP
 ((
uöt32_t
)0x00200000Ë

	)

7774 
	#DBGMCU_CR_DBG_TIM15_STOP
 ((
uöt32_t
)0x00400000Ë

	)

7775 
	#DBGMCU_CR_DBG_TIM16_STOP
 ((
uöt32_t
)0x00800000Ë

	)

7776 
	#DBGMCU_CR_DBG_TIM17_STOP
 ((
uöt32_t
)0x01000000Ë

	)

7777 
	#DBGMCU_CR_DBG_TIM12_STOP
 ((
uöt32_t
)0x02000000Ë

	)

7778 
	#DBGMCU_CR_DBG_TIM13_STOP
 ((
uöt32_t
)0x04000000Ë

	)

7779 
	#DBGMCU_CR_DBG_TIM14_STOP
 ((
uöt32_t
)0x08000000Ë

	)

7780 
	#DBGMCU_CR_DBG_TIM9_STOP
 ((
uöt32_t
)0x10000000Ë

	)

7781 
	#DBGMCU_CR_DBG_TIM10_STOP
 ((
uöt32_t
)0x20000000Ë

	)

7782 
	#DBGMCU_CR_DBG_TIM11_STOP
 ((
uöt32_t
)0x40000000Ë

	)

7791 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

7792 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x00Ë

	)

7793 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x01Ë

	)

7794 
	#FLASH_ACR_LATENCY_2
 ((
uöt8_t
)0x02Ë

	)

7796 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

7797 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

7798 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20Ë

	)

7801 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7804 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7807 
	#FLASH_SR_BSY
 ((
uöt8_t
)0x01Ë

	)

7808 
	#FLASH_SR_PGERR
 ((
uöt8_t
)0x04Ë

	)

7809 
	#FLASH_SR_WRPRTERR
 ((
uöt8_t
)0x10Ë

	)

7810 
	#FLASH_SR_EOP
 ((
uöt8_t
)0x20Ë

	)

7813 
	#FLASH_CR_PG
 ((
uöt16_t
)0x0001Ë

	)

7814 
	#FLASH_CR_PER
 ((
uöt16_t
)0x0002Ë

	)

7815 
	#FLASH_CR_MER
 ((
uöt16_t
)0x0004Ë

	)

7816 
	#FLASH_CR_OPTPG
 ((
uöt16_t
)0x0010Ë

	)

7817 
	#FLASH_CR_OPTER
 ((
uöt16_t
)0x0020Ë

	)

7818 
	#FLASH_CR_STRT
 ((
uöt16_t
)0x0040Ë

	)

7819 
	#FLASH_CR_LOCK
 ((
uöt16_t
)0x0080Ë

	)

7820 
	#FLASH_CR_OPTWRE
 ((
uöt16_t
)0x0200Ë

	)

7821 
	#FLASH_CR_ERRIE
 ((
uöt16_t
)0x0400Ë

	)

7822 
	#FLASH_CR_EOPIE
 ((
uöt16_t
)0x1000Ë

	)

7825 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7828 
	#FLASH_OBR_OPTERR
 ((
uöt16_t
)0x0001Ë

	)

7829 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x0002Ë

	)

7831 
	#FLASH_OBR_USER
 ((
uöt16_t
)0x03FCË

	)

7832 
	#FLASH_OBR_WDG_SW
 ((
uöt16_t
)0x0004Ë

	)

7833 
	#FLASH_OBR_nRST_STOP
 ((
uöt16_t
)0x0008Ë

	)

7834 
	#FLASH_OBR_nRST_STDBY
 ((
uöt16_t
)0x0010Ë

	)

7835 
	#FLASH_OBR_BFB2
 ((
uöt16_t
)0x0020Ë

	)

7838 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7843 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

7844 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

7847 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

7848 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

7851 
	#FLASH_D©a0_D©a0
 ((
uöt32_t
)0x000000FFË

	)

7852 
	#FLASH_D©a0_nD©a0
 ((
uöt32_t
)0x0000FF00Ë

	)

7855 
	#FLASH_D©a1_D©a1
 ((
uöt32_t
)0x00FF0000Ë

	)

7856 
	#FLASH_D©a1_nD©a1
 ((
uöt32_t
)0xFF000000Ë

	)

7859 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

7860 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

7863 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

7864 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

7867 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

7868 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

7871 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

7872 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

7874 #ifde‡
STM32F10X_CL


7879 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7880 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7881 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7882 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7883 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7884 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7885 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7886 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7887 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7888 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7889 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7890 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7891 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7892 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7893 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7894 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7895 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7896 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7897 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7898 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7900 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7901 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7902 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7903 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7904 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7905 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7906 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7909 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7910 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7911 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7912 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7913 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7914 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7915 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7916 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7917 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7918 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7919 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7920 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7921 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7922 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7925 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7928 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7931 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7932 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7933 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7934 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7935 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7936 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7937 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7938 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7941 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7944 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7945 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7946 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7947 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7948 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7949 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7950 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7951 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7952 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7953 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7954 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7957 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7958 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7961 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7975 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7976 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7977 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7978 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7979 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7980 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7981 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7984 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7985 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7986 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7987 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7988 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7991 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7992 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7995 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

7998 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8001 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8002 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8003 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8004 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8005 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8006 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8007 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8008 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8009 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8010 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

8013 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8016 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8017 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8018 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8019 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8020 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8021 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8022 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8023 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8024 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8025 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

8028 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8031 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

8032 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

8033 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

8034 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

8035 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

8036 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

8037 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

8038 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

8039 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

8040 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

8043 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

8050 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

8051 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

8052 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

8053 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

8056 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

8057 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

8058 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

8061 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

8062 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

8063 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

8066 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

8067 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

8068 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

8071 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

8072 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

8073 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

8076 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8079 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8082 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8085 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8088 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8091 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

8098 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

8099 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

8100 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

8101 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

8102 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

8103 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

8106 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

8109 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8112 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

8113 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8116 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

8119 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

8120 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

8123 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8126 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

8129 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8136 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

8137 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

8138 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

8139 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

8140 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

8141 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

8142 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

8143 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

8144 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

8145 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

8146 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

8147 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

8148 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

8149 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

8150 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

8151 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

8152 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

8153 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

8154 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

8155 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

8156 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

8157 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

8158 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

8159 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

8160 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

8161 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

8162 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

8163 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

8164 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

8165 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

8166 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

8167 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

8168 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

8169 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

8170 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

8171 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

8172 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

8173 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

8176 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8179 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

8182 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8185 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8188 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

8189 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

8190 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

8191 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

8193 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

8194 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

8195 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

8196 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

8197 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8198 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

8199 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

8200 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

8201 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

8202 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

8203 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

8204 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

8205 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

8206 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

8207 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

8208 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

8209 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

8210 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

8211 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

8212 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

8213 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

8214 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

8215 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

8216 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

8217 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

8218 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

8219 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

8220 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

8221 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

8222 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

8223 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

8224 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

8227 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

8228 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

8229 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

8230 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

8231 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

8232 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

8233 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8234 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

8235 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

8236 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

8237 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

8238 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

8239 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

8240 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

8241 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

8242 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

8243 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

8244 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

8245 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

8246 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

8247 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

8248 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

8249 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

8250 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

8253 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

8254 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

8255 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

8256 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

8257 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

8258 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

8259 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

8260 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

8261 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

8262 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

8263 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

8264 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

8265 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

8266 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

8267 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

8270 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

8271 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

8272 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

8273 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

8276 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8279 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8282 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8285 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

8296 #ifde‡
USE_STDPERIPH_DRIVER


8297 
	~"°m32f10x_c⁄f.h
"

8304 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

8306 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

8308 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

8310 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

8312 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

8314 
	#READ_REG
(
REG
Ë((REG))

	)

8316 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

8322 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.c

65 
	~"°m32f10x.h
"

106 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| (deföed 
STM32F10X_MD_VL
Ë|| (deföed 
STM32F10X_HD_VL
)

108 
	#SYSCLK_FREQ_24MHz
 24000000

	)

115 
	#SYSCLK_FREQ_72MHz
 72000000

	)

121 #i‡
deföed
 (
STM32F10X_HD
Ë|| (deföed 
STM32F10X_XL
Ë|| (deföed 
STM32F10X_HD_VL
)

128 
	#VECT_TAB_OFFSET
 0x0

	)

151 #ifde‡
SYSCLK_FREQ_HSE


152 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_HSE
;

153 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


154 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_24MHz
;

155 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


156 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_36MHz
;

157 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


158 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_48MHz
;

159 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


160 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_56MHz
;

161 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


162 
uöt32_t
 
	gSy°emC‹eClock
 = 
SYSCLK_FREQ_72MHz
;

164 
uöt32_t
 
	gSy°emC‹eClock
 = 
HSI_VALUE
;

167 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

176 
SëSysClock
();

178 #ifde‡
SYSCLK_FREQ_HSE


179 
SëSysClockToHSE
();

180 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


181 
SëSysClockTo24
();

182 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


183 
SëSysClockTo36
();

184 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


185 
SëSysClockTo48
();

186 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


187 
SëSysClockTo56
();

188 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


189 
SëSysClockTo72
();

192 #ifde‡
DATA_IN_ExtSRAM


193 
Sy°emInô_ExtMemCé
();

212 
	$Sy°emInô
 ()

216 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

219 #i‚de‡
STM32F10X_CL


220 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

222 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

226 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

229 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

232 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

234 #ifde‡
STM32F10X_CL


236 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

239 
RCC
->
CIR
 = 0x00FF0000;

242 
RCC
->
CFGR2
 = 0x00000000;

243 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| (
deföed
 
STM32F10X_HD_VL
)

245 
RCC
->
CIR
 = 0x009F0000;

248 
RCC
->
CFGR2
 = 0x00000000;

251 
RCC
->
CIR
 = 0x009F0000;

254 #i‡
	`deföed
 (
STM32F10X_HD
Ë|| (
deföed
 
STM32F10X_XL
Ë|| (deföed 
STM32F10X_HD_VL
)

255 #ifde‡
DATA_IN_ExtSRAM


256 
	`Sy°emInô_ExtMemCé
();

262 
	`SëSysClock
();

264 #ifde‡
VECT_TAB_SRAM


265 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

267 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

269 
	}
}

306 
	$Sy°emC‹eClockUpd©e
 ()

308 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0;

310 #ifde‡ 
STM32F10X_CL


311 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

314 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| (
deföed
 
STM32F10X_HD_VL
)

315 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

319 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

321 
tmp
)

324 
Sy°emC‹eClock
 = 
HSI_VALUE
;

327 
Sy°emC‹eClock
 = 
HSE_VALUE
;

332 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

333 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

335 #i‚de‡
STM32F10X_CL


336 
∂lmuŒ
 = (Öllmull >> 18) + 2;

338 i‡(
∂lsour˚
 == 0x00)

341 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

345 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| (
deföed
 
STM32F10X_HD_VL
)

346 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

348 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

351 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë!(
uöt32_t
)
RESET
)

353 
Sy°emC‹eClock
 = (
HSE_VALUE
 >> 1Ë* 
∂lmuŒ
;

357 
Sy°emC‹eClock
 = 
HSE_VALUE
 * 
∂lmuŒ
;

362 
∂lmuŒ
 =Öllmull >> 18;

364 i‡(
∂lmuŒ
 != 0x0D)

366 
∂lmuŒ
 += 2;

370 
∂lmuŒ
 = 13 / 2;

373 i‡(
∂lsour˚
 == 0x00)

376 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

382 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1SRC
;

383 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

385 i‡(
¥ediv1sour˚
 == 0)

388 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

394 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
) >> 4) + 1;

395 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
) >> 8 ) + 2;

396 
Sy°emC‹eClock
 = (((
HSE_VALUE
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

403 
Sy°emC‹eClock
 = 
HSI_VALUE
;

409 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

411 
Sy°emC‹eClock
 >>
tmp
;

412 
	}
}

419 
	$SëSysClock
()

421 #ifde‡
SYSCLK_FREQ_HSE


422 
	`SëSysClockToHSE
();

423 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


424 
	`SëSysClockTo24
();

425 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


426 
	`SëSysClockTo36
();

427 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


428 
	`SëSysClockTo48
();

429 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


430 
	`SëSysClockTo56
();

431 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


432 
	`SëSysClockTo72
();

437 
	}
}

445 #ifde‡
DATA_IN_ExtSRAM


455 
	$Sy°emInô_ExtMemCé
()

461 
RCC
->
AHBENR
 = 0x00000114;

464 
RCC
->
APB2ENR
 = 0x000001E0;

472 
GPIOD
->
CRL
 = 0x44BB44BB;

473 
GPIOD
->
CRH
 = 0xBBBBBBBB;

475 
GPIOE
->
CRL
 = 0xB44444BB;

476 
GPIOE
->
CRH
 = 0xBBBBBBBB;

478 
GPIOF
->
CRL
 = 0x44BBBBBB;

479 
GPIOF
->
CRH
 = 0xBBBB4444;

481 
GPIOG
->
CRL
 = 0x44BBBBBB;

482 
GPIOG
->
CRH
 = 0x44444B44;

487 
FSMC_B™k1
->
BTCR
[4] = 0x00001011;

488 
FSMC_B™k1
->
BTCR
[5] = 0x00000200;

489 
	}
}

492 #ifde‡
SYSCLK_FREQ_HSE


500 
	$SëSysClockToHSE
()

502 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

506 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

511 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

512 
SèπUpCou¡î
++;

513 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

515 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

517 
HSESètus
 = (
uöt32_t
)0x01;

521 
HSESètus
 = (
uöt32_t
)0x00;

524 i‡(
HSESètus
 =(
uöt32_t
)0x01)

527 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL
 && !deföed 
STM32F10X_HD_VL


529 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

532 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

534 #i‚de‡
STM32F10X_CL


535 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

537 i‡(
HSE_VALUE
 <= 24000000)

539 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

543 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

549 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

552 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

555 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

558 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

559 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_HSE
;

562 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x04)

570 
	}
}

571 #ñi‡
deföed
 
SYSCLK_FREQ_24MHz


579 
	$SëSysClockTo24
()

581 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

585 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

590 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

591 
SèπUpCou¡î
++;

592 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

594 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

596 
HSESètus
 = (
uöt32_t
)0x01;

600 
HSESètus
 = (
uöt32_t
)0x00;

603 i‡(
HSESètus
 =(
uöt32_t
)0x01)

605 #i‡!
deföed
 
STM32F10X_LD_VL
 && !deföed 
STM32F10X_MD_VL
 && !deföed 
STM32F10X_HD_VL


607 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

610 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

611 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_0
;

615 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

618 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

621 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

623 #ifde‡
STM32F10X_CL


626 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

627 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

628 
RCC_CFGR_PLLMULL6
);

632 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

633 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

634 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

635 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

638 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

640 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

643 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

645 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

646 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_PREDIV1
 | 
RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 | 
RCC_CFGR_PLLMULL6
);

649 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

650 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL6
);

654 
RCC
->
CR
 |
RCC_CR_PLLON
;

657 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

662 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

663 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

666 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

674 
	}
}

675 #ñi‡
deföed
 
SYSCLK_FREQ_36MHz


683 
	$SëSysClockTo36
()

685 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

689 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

694 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

695 
SèπUpCou¡î
++;

696 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

698 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

700 
HSESètus
 = (
uöt32_t
)0x01;

704 
HSESètus
 = (
uöt32_t
)0x00;

707 i‡(
HSESètus
 =(
uöt32_t
)0x01)

710 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

713 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

714 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

717 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

720 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

723 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

725 #ifde‡
STM32F10X_CL


729 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

730 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

731 
RCC_CFGR_PLLMULL9
);

736 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

737 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

738 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

739 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV10
);

742 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

744 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

750 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

751 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLXTPRE_HSE_Div2
 | 
RCC_CFGR_PLLMULL9
);

755 
RCC
->
CR
 |
RCC_CR_PLLON
;

758 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

763 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

764 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

767 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

775 
	}
}

776 #ñi‡
deföed
 
SYSCLK_FREQ_48MHz


784 
	$SëSysClockTo48
()

786 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

790 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

795 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

796 
SèπUpCou¡î
++;

797 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

799 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

801 
HSESètus
 = (
uöt32_t
)0x01;

805 
HSESètus
 = (
uöt32_t
)0x00;

808 i‡(
HSESètus
 =(
uöt32_t
)0x01)

811 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

814 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

815 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_1
;

818 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

821 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

824 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

826 #ifde‡
STM32F10X_CL


831 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

832 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

833 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

834 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

837 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

839 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

845 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

846 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

847 
RCC_CFGR_PLLMULL6
);

850 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

851 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL6
);

855 
RCC
->
CR
 |
RCC_CR_PLLON
;

858 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

863 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

864 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

867 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

875 
	}
}

877 #ñi‡
deföed
 
SYSCLK_FREQ_56MHz


885 
	$SëSysClockTo56
()

887 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

891 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

896 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

897 
SèπUpCou¡î
++;

898 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

900 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

902 
HSESètus
 = (
uöt32_t
)0x01;

906 
HSESètus
 = (
uöt32_t
)0x00;

909 i‡(
HSESètus
 =(
uöt32_t
)0x01)

912 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

915 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

916 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

919 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

922 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

925 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

927 #ifde‡
STM32F10X_CL


932 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

933 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

934 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

935 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

938 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

940 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

946 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

947 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

948 
RCC_CFGR_PLLMULL7
);

951 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

952 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL7
);

957 
RCC
->
CR
 |
RCC_CR_PLLON
;

960 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

965 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

966 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

969 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

977 
	}
}

979 #ñi‡
deföed
 
SYSCLK_FREQ_72MHz


987 
	$SëSysClockTo72
()

989 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

993 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

998 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

999 
SèπUpCou¡î
++;

1000 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

1002 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

1004 
HSESètus
 = (
uöt32_t
)0x01;

1008 
HSESètus
 = (
uöt32_t
)0x00;

1011 i‡(
HSESètus
 =(
uöt32_t
)0x01)

1014 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

1017 
FLASH
->
ACR
 &(
uöt32_t
)((uöt32_t)~
FLASH_ACR_LATENCY
);

1018 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_LATENCY_2
;

1022 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

1025 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

1028 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

1030 #ifde‡
STM32F10X_CL


1035 
RCC
->
CFGR2
 &(
uöt32_t
)~(
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
 |

1036 
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
);

1037 
RCC
->
CFGR2
 |(
uöt32_t
)(
RCC_CFGR2_PREDIV2_DIV5
 | 
RCC_CFGR2_PLL2MUL8
 |

1038 
RCC_CFGR2_PREDIV1SRC_PLL2
 | 
RCC_CFGR2_PREDIV1_DIV5
);

1041 
RCC
->
CR
 |
RCC_CR_PLL2ON
;

1043 (
RCC
->
CR
 & 
RCC_CR_PLL2RDY
) == 0)

1049 
RCC
->
CFGR
 &(
uöt32_t
)~(
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
);

1050 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLSRC_PREDIV1
 |

1051 
RCC_CFGR_PLLMULL9
);

1054 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 |

1055 
RCC_CFGR_PLLMULL
));

1056 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMULL9
);

1060 
RCC
->
CR
 |
RCC_CR_PLLON
;

1063 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

1068 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

1069 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

1072 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
) != (uint32_t)0x08)

1080 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h

33 #i‚de‡
__SYSTEM_STM32F10X_H


34 
	#__SYSTEM_STM32F10X_H


	)

36 #ifde‡
__˝lu•lus


53 
uöt32_t
 
Sy°emC‹eClock
;

79 
Sy°emInô
();

80 
Sy°emC‹eClockUpd©e
();

85 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/croutine.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

69 
	~"¸outöe.h
"

75 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


76 

	)

81 
xLi°
 
	gpxRódyCoRoutöeLi°s
[ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 ];

82 
xLi°
 
	gxDñayedCoRoutöeLi°1
;

83 
xLi°
 
	gxDñayedCoRoutöeLi°2
;

84 
xLi°
 * 
	gpxDñayedCoRoutöeLi°
;

85 
xLi°
 * 
	gpxOvîÊowDñayedCoRoutöeLi°
;

86 
xLi°
 
	gxPídögRódyCoRoutöeLi°
;

89 
c‹CRCB
 * 
	gpxCuºítCoRoutöe
 = 
NULL
;

90 
p‹tBASE_TYPE
 
	guxT›CoRoutöeRódyPri‹ôy
 = 0;

91 
p‹tTickTy≥
 
	gxCoRoutöeTickCou¡
 = 0, 
	gxLa°TickCou¡
 = 0, 
	gxPas£dTicks
 = 0;

94 
	#c‹INITIAL_STATE
 ( 0 )

	)

103 
	#¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 ) \

105 if–
pxCRCB
->
uxPri‹ôy
 > 
uxT›CoRoutöeRódyPri‹ôy
 ) \

107 
uxT›CoRoutöeRódyPri‹ôy
 = 
pxCRCB
->
uxPri‹ôy
; \

109 
	`vLi°In£πEnd
––
xLi°
 * ) &–
pxRódyCoRoutöeLi°s
[ 
pxCRCB
->
uxPri‹ôy
 ] ), &–pxCRCB->
xGíîicLi°Iãm
 ) ); \

110 }

	)

116 
¥vInôüli£CoRoutöeLi°s
( );

124 
¥vCheckPídögRódyLi°
( );

134 
¥vCheckDñayedLi°
( );

138 sig√d 
p‹tBASE_TYPE
 
	$xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, p‹tBASE_TYPE 
uxIndex
 )

140 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

141 
c‹CRCB
 *
pxCoRoutöe
;

144 
pxCoRoutöe
 = ( 
c‹CRCB
 * ) 
	`pvP‹tMÆloc
( ( corCRCB ) );

145 if–
pxCoRoutöe
 )

149 if–
pxCuºítCoRoutöe
 =
NULL
 )

151 
pxCuºítCoRoutöe
 = 
pxCoRoutöe
;

152 
	`¥vInôüli£CoRoutöeLi°s
();

156 if–
uxPri‹ôy
 >
c⁄figMAX_CO_ROUTINE_PRIORITIES
 )

158 
uxPri‹ôy
 = 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - 1;

162 
pxCoRoutöe
->
uxSèã
 = 
c‹INITIAL_STATE
;

163 
pxCoRoutöe
->
uxPri‹ôy
 = uxPriority;

164 
pxCoRoutöe
->
uxIndex
 = uxIndex;

165 
pxCoRoutöe
->
pxCoRoutöeFun˘i⁄
 = 
pxCoRoutöeCode
;

168 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ) );

169 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ) );

174 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ),ÖxCoRoutine );

175 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ),ÖxCoRoutine );

178 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
uxPri‹ôy
 );

182 
	`¥vAddCoRoutöeToRódyQueue
–
pxCoRoutöe
 );

184 
xRëu∫
 = 
pdPASS
;

188 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

191  
xRëu∫
;

192 
	}
}

195 
	$vCoRoutöeAddToDñayedLi°
–
p‹tTickTy≥
 
xTicksToDñay
, 
xLi°
 *
pxEvítLi°
 )

197 
p‹tTickTy≥
 
xTimeToWake
;

201 
xTimeToWake
 = 
xCoRoutöeTickCou¡
 + 
xTicksToDñay
;

206 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

209 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

211 if–
xTimeToWake
 < 
xCoRoutöeTickCou¡
 )

215 
	`vLi°In£π
––
xLi°
 * ) 
pxOvîÊowDñayedCoRoutöeLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

221 
	`vLi°In£π
––
xLi°
 * ) 
pxDñayedCoRoutöeLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

224 if–
pxEvítLi°
 )

228 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítCoRoutöe
->
xEvítLi°Iãm
 ) );

230 
	}
}

233 
	$¥vCheckPídögRódyLi°
( )

238  
	`li°LIST_IS_EMPTY
–&
xPídögRódyCoRoutöeLi°
 ) =
pdFALSE
 )

240 
c‹CRCB
 *
pxUnblockedCRCB
;

243 
	`p‹tDISABLE_INTERRUPTS
();

245 
pxUnblockedCRCB
 = ( 
c‹CRCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–(&
xPídögRódyCoRoutöeLi°
) );

246 
	`vLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

248 
	`p‹tENABLE_INTERRUPTS
();

250 
	`vLi°Remove
–&–
pxUnblockedCRCB
->
xGíîicLi°Iãm
 ) );

251 
	`¥vAddCoRoutöeToRódyQueue
–
pxUnblockedCRCB
 );

253 
	}
}

256 
	$¥vCheckDñayedLi°
( )

258 
c‹CRCB
 *
pxCRCB
;

260 
xPas£dTicks
 = 
	`xTaskGëTickCou¡
(Ë- 
xLa°TickCou¡
;

261  
xPas£dTicks
 )

263 
xCoRoutöeTickCou¡
++;

264 
xPas£dTicks
--;

267 if–
xCoRoutöeTickCou¡
 == 0 )

269 
xLi°
 * 
pxTemp
;

273 
pxTemp
 = 
pxDñayedCoRoutöeLi°
;

274 
pxDñayedCoRoutöeLi°
 = 
pxOvîÊowDñayedCoRoutöeLi°
;

275 
pxOvîÊowDñayedCoRoutöeLi°
 = 
pxTemp
;

279  
	`li°LIST_IS_EMPTY
–
pxDñayedCoRoutöeLi°
 ) =
pdFALSE
 )

281 
pxCRCB
 = ( 
c‹CRCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedCoRoutöeLi°
 );

283 if–
xCoRoutöeTickCou¡
 < 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) ) )

289 
	`p‹tDISABLE_INTERRUPTS
();

296 
	`vLi°Remove
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) );

299 if–
pxCRCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 )

301 
	`vLi°Remove
–&–
pxCRCB
->
xEvítLi°Iãm
 ) );

304 
	`p‹tENABLE_INTERRUPTS
();

306 
	`¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 );

310 
xLa°TickCou¡
 = 
xCoRoutöeTickCou¡
;

311 
	}
}

314 
	$vCoRoutöeScheduÀ
( )

317 
	`¥vCheckPídögRódyLi°
();

320 
	`¥vCheckDñayedLi°
();

323  
	`li°LIST_IS_EMPTY
–&–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) ) )

325 if–
uxT›CoRoutöeRódyPri‹ôy
 == 0 )

330 --
uxT›CoRoutöeRódyPri‹ôy
;

335 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítCoRoutöe
, &–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) );

338 –
pxCuºítCoRoutöe
->
pxCoRoutöeFun˘i⁄
 )–pxCuºítCoRoutöe,ÖxCuºítCoRoutöe->
uxIndex
 );

341 
	}
}

344 
	$¥vInôüli£CoRoutöeLi°s
( )

346 
p‹tBASE_TYPE
 
uxPri‹ôy
;

348  
uxPri‹ôy
 = 0; uxPri‹ôy < 
c⁄figMAX_CO_ROUTINE_PRIORITIES
; uxPriority++ )

350 
	`vLi°Inôüli£
––
xLi°
 * ) &–
pxRódyCoRoutöeLi°s
[ 
uxPri‹ôy
 ] ) );

353 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedCoRoutöeLi°1
 );

354 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedCoRoutöeLi°2
 );

355 
	`vLi°Inôüli£
––
xLi°
 * ) &
xPídögRódyCoRoutöeLi°
 );

359 
pxDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°1
;

360 
pxOvîÊowDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°2
;

361 
	}
}

364 sig√d 
p‹tBASE_TYPE
 
	$xCoRoutöeRemoveFromEvítLi°
–c⁄° 
xLi°
 *
pxEvítLi°
 )

366 
c‹CRCB
 *
pxUnblockedCRCB
;

367 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

372 
pxUnblockedCRCB
 = ( 
c‹CRCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

373 
	`vLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

374 
	`vLi°In£πEnd
––
xLi°
 * ) &–
xPídögRódyCoRoutöeLi°
 ), &–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

376 if–
pxUnblockedCRCB
->
uxPri‹ôy
 >
pxCuºítCoRoutöe
->uxPriority )

378 
xRëu∫
 = 
pdTRUE
;

382 
xRëu∫
 = 
pdFALSE
;

385  
xRëu∫
;

386 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/FreeRTOS.h

67 #i‚de‡
INC_FREERTOS_H


68 
	#INC_FREERTOS_H


	)

74 
	~<°ddef.h
>

77 
	~"¥ojdefs.h
"

80 
	~"FªeRTOSC⁄fig.h
"

83 
	~"p‹èbÀ.h
"

88 
	$p‹tBASE_TYPE
 (*
	tpdTASK_HOOK_CODE
)( * );

100 #i‚de‡
c⁄figUSE_PREEMPTION


101 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_PREEMPTION
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

104 #i‚de‡
c⁄figUSE_IDLE_HOOK


105 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_IDLE_HOOK
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

108 #i‚de‡
c⁄figUSE_TICK_HOOK


109 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_TICK_HOOK
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

112 #i‚de‡
c⁄figUSE_CO_ROUTINES


113 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_CO_ROUTINES
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

116 #i‚de‡
INCLUDE_vTaskPri‹ôySë


117 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskPri‹ôySë
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

120 #i‚de‡
INCLUDE_uxTaskPri‹ôyGë


121 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_uxTaskPri‹ôyGë
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

124 #i‚de‡
INCLUDE_vTaskDñëe


125 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñëe
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

128 #i‚de‡
INCLUDE_vTaskSu•íd


129 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskSu•íd
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

132 #i‚de‡
INCLUDE_vTaskDñayU¡û


133 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñayU¡û
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

136 #i‚de‡
INCLUDE_vTaskDñay


137 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñay
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

140 #i‚de‡
c⁄figUSE_16_BIT_TICKS


141 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_16_BIT_TICKS
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

144 #i‚de‡
INCLUDE_xTaskGëIdÀTaskH™dÀ


145 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 0

	)

148 #i‚de‡
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ


149 
	#INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 0

	)

152 #i‚de‡
INCLUDE_pcTaskGëTaskName


153 
	#INCLUDE_pcTaskGëTaskName
 0

	)

156 #i‚de‡
c⁄figUSE_APPLICATION_TASK_TAG


157 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

160 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k


161 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 0

	)

164 #i‚de‡
c⁄figUSE_RECURSIVE_MUTEXES


165 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

168 #i‚de‡
c⁄figUSE_MUTEXES


169 
	#c⁄figUSE_MUTEXES
 0

	)

172 #i‚de‡
c⁄figUSE_TIMERS


173 
	#c⁄figUSE_TIMERS
 0

	)

176 #i‚de‡
c⁄figUSE_COUNTING_SEMAPHORES


177 
	#c⁄figUSE_COUNTING_SEMAPHORES
 0

	)

180 #i‚de‡
c⁄figUSE_ALTERNATIVE_API


181 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

184 #i‚de‡
p‹tCRITICAL_NESTING_IN_TCB


185 
	#p‹tCRITICAL_NESTING_IN_TCB
 0

	)

188 #i‚de‡
c⁄figMAX_TASK_NAME_LEN


189 
	#c⁄figMAX_TASK_NAME_LEN
 16

	)

192 #i‚de‡
c⁄figIDLE_SHOULD_YIELD


193 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

196 #i‡
c⁄figMAX_TASK_NAME_LEN
 < 1

197 #îr‹ 
c⁄figMAX_TASK_NAME_LEN
 
mu°
 
be
 
£t
 
to
 
a
 
möimum
 
of
 1 
ö
 
FªeRTOSC⁄fig
.
h


200 #i‚de‡
INCLUDE_xTaskResumeFromISR


201 
	#INCLUDE_xTaskResumeFromISR
 1

	)

204 #i‚de‡
c⁄figASSERT


205 
	#c⁄figASSERT
–
x
 )

	)

208 #i‚de‡
p‹tALIGNMENT_ASSERT_pxCuºítTCB


209 
	#p‹tALIGNMENT_ASSERT_pxCuºítTCB
 
c⁄figASSERT


	)

213 #i‡
c⁄figUSE_TIMERS
 == 1

215 #i‚de‡
c⁄figTIMER_TASK_PRIORITY


216 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
Æso
 
be
 
deföed
.

219 #i‚de‡
c⁄figTIMER_QUEUE_LENGTH


220 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_QUEUE_LENGTH
 
mu°
 
Æso
 
be
 
deföed
.

223 #i‚de‡
c⁄figTIMER_TASK_STACK_DEPTH


224 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_STACK_DEPTH
 
mu°
 
Æso
 
be
 
deföed
.

229 #i‚de‡
INCLUDE_xTaskGëScheduÀrSèã


230 
	#INCLUDE_xTaskGëScheduÀrSèã
 0

	)

233 #i‚de‡
INCLUDE_xTaskGëCuºítTaskH™dÀ


234 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 0

	)

238 #i‚de‡
p‹tSET_INTERRUPT_MASK_FROM_ISR


239 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

242 #i‚de‡
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR


243 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusVÆue
 ) ( Ë
	)
uxSavedStatusValue

246 #i‚de‡
p‹tCLEAN_UP_TCB


247 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

250 #i‚de‡
p‹tSETUP_TCB


251 
	#p‹tSETUP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

254 #i‚de‡
c⁄figQUEUE_REGISTRY_SIZE


255 
	#c⁄figQUEUE_REGISTRY_SIZE
 0U

	)

258 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 < 1 )

259 
	#vQueueAddToRegi°ry
–
xQueue
, 
pcName
 )

	)

260 
	#vQueueUƒegi°îQueue
–
xQueue
 )

	)

263 #i‚de‡
p‹tPOINTER_SIZE_TYPE


264 
	#p‹tPOINTER_SIZE_TYPE
 

	)

268 #i‚de‡
åa˚START


271 
	#åa˚START
()

	)

274 #i‚de‡
åa˚END


277 
	#åa˚END
()

	)

280 #i‚de‡
åa˚TASK_SWITCHED_IN


283 
	#åa˚TASK_SWITCHED_IN
()

	)

286 #i‚de‡
åa˚TASK_SWITCHED_OUT


289 
	#åa˚TASK_SWITCHED_OUT
()

	)

292 #i‚de‡
åa˚TASK_PRIORITY_INHERIT


298 
	#åa˚TASK_PRIORITY_INHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxInhîôedPri‹ôy
 )

	)

301 #i‚de‡
åa˚TASK_PRIORITY_DISINHERIT


306 
	#åa˚TASK_PRIORITY_DISINHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxOrigöÆPri‹ôy
 )

	)

309 #i‚de‡
åa˚BLOCKING_ON_QUEUE_RECEIVE


314 
	#åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 )

	)

317 #i‚de‡
åa˚BLOCKING_ON_QUEUE_SEND


322 
	#åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 )

	)

325 #i‚de‡
c⁄figCHECK_FOR_STACK_OVERFLOW


326 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

331 #i‚de‡
åa˚MOVED_TASK_TO_READY_STATE


332 
	#åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

335 #i‚de‡
åa˚QUEUE_CREATE


336 
	#åa˚QUEUE_CREATE
–
pxNewQueue
 )

	)

339 #i‚de‡
åa˚QUEUE_CREATE_FAILED


340 
	#åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 )

	)

343 #i‚de‡
åa˚CREATE_MUTEX


344 
	#åa˚CREATE_MUTEX
–
pxNewQueue
 )

	)

347 #i‚de‡
åa˚CREATE_MUTEX_FAILED


348 
	#åa˚CREATE_MUTEX_FAILED
()

	)

351 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE


352 
	#åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

355 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE_FAILED


356 
	#åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

359 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE


360 
	#åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

363 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE_FAILED


364 
	#åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

367 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE


368 
	#åa˚CREATE_COUNTING_SEMAPHORE
()

	)

371 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE_FAILED


372 
	#åa˚CREATE_COUNTING_SEMAPHORE_FAILED
()

	)

375 #i‚de‡
åa˚QUEUE_SEND


376 
	#åa˚QUEUE_SEND
–
pxQueue
 )

	)

379 #i‚de‡
åa˚QUEUE_SEND_FAILED


380 
	#åa˚QUEUE_SEND_FAILED
–
pxQueue
 )

	)

383 #i‚de‡
åa˚QUEUE_RECEIVE


384 
	#åa˚QUEUE_RECEIVE
–
pxQueue
 )

	)

387 #i‚de‡
åa˚QUEUE_PEEK


388 
	#åa˚QUEUE_PEEK
–
pxQueue
 )

	)

391 #i‚de‡
åa˚QUEUE_RECEIVE_FAILED


392 
	#åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 )

	)

395 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR


396 
	#åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 )

	)

399 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR_FAILED


400 
	#åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 )

	)

403 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR


404 
	#åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 )

	)

407 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR_FAILED


408 
	#åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 )

	)

411 #i‚de‡
åa˚QUEUE_DELETE


412 
	#åa˚QUEUE_DELETE
–
pxQueue
 )

	)

415 #i‚de‡
åa˚TASK_CREATE


416 
	#åa˚TASK_CREATE
–
pxNewTCB
 )

	)

419 #i‚de‡
åa˚TASK_CREATE_FAILED


420 
	#åa˚TASK_CREATE_FAILED
()

	)

423 #i‚de‡
åa˚TASK_DELETE


424 
	#åa˚TASK_DELETE
–
pxTaskToDñëe
 )

	)

427 #i‚de‡
åa˚TASK_DELAY_UNTIL


428 
	#åa˚TASK_DELAY_UNTIL
()

	)

431 #i‚de‡
åa˚TASK_DELAY


432 
	#åa˚TASK_DELAY
()

	)

435 #i‚de‡
åa˚TASK_PRIORITY_SET


436 
	#åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 )

	)

439 #i‚de‡
åa˚TASK_SUSPEND


440 
	#åa˚TASK_SUSPEND
–
pxTaskToSu•íd
 )

	)

443 #i‚de‡
åa˚TASK_RESUME


444 
	#åa˚TASK_RESUME
–
pxTaskToResume
 )

	)

447 #i‚de‡
åa˚TASK_RESUME_FROM_ISR


448 
	#åa˚TASK_RESUME_FROM_ISR
–
pxTaskToResume
 )

	)

451 #i‚de‡
åa˚TASK_INCREMENT_TICK


452 
	#åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 )

	)

455 #i‚de‡
åa˚TIMER_CREATE


456 
	#åa˚TIMER_CREATE
–
pxNewTimî
 )

	)

459 #i‚de‡
åa˚TIMER_CREATE_FAILED


460 
	#åa˚TIMER_CREATE_FAILED
()

	)

463 #i‚de‡
åa˚TIMER_COMMAND_SEND


464 
	#åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xMesßgeID
, 
xMesßgeVÆueVÆue
, 
xRëu∫
 )

	)

467 #i‚de‡
åa˚TIMER_EXPIRED


468 
	#åa˚TIMER_EXPIRED
–
pxTimî
 )

	)

471 #i‚de‡
åa˚TIMER_COMMAND_RECEIVED


472 
	#åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßgeID
, 
xMesßgeVÆue
 )

	)

475 #i‚de‡
c⁄figGENERATE_RUN_TIME_STATS


476 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

479 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

481 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


482 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
 
mu°
 
Æso
 
be
 deföed.Ö‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS 
should
 
ˇŒ
 
a
 
p‹t
 
œyî
 
fun˘i⁄
 
to
 
£tup
á 
≥rùhîÆ
 
timî
/
cou¡î
 
th©
 
ˇn
Åhí bê
u£d
 
as
 
the
 
run
 
time
 cou¡îÅimê
ba£
.

485 #i‚de‡
p‹tGET_RUN_TIME_COUNTER_VALUE


486 #i‚de‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


487 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
eôhî
 
p‹tGET_RUN_TIME_COUNTER_VALUE
 
‹
 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
 
mu°
 
Æso
 
be
 deföed. 
Sì
 
the
 
exam∂es
 
¥ovided
 
™d
Åhê
FªeRTOS
 
web
 
sôe
 
m‹e
 
öf‹m©i⁄
.

493 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


494 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
()

	)

497 #i‚de‡
c⁄figUSE_MALLOC_FAILED_HOOK


498 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 0

	)

501 #i‚de‡
p‹tPRIVILEGE_BIT


502 
	#p‹tPRIVILEGE_BIT
 ( ( 
p‹tBASE_TYPE
 ) 0x00 )

	)

505 #i‚de‡
p‹tYIELD_WITHIN_API


506 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

509 #i‚de‡
pvP‹tMÆlocAlig√d


510 
	#pvP‹tMÆlocAlig√d
–
x
, 
puxSèckBuf„r
 ) ( ( (ÖuxSèckBuf„∏Ë=
NULL
 ) ? ( 
	`pvP‹tMÆloc
––x ) ) ) : (ÖuxSèckBuf„∏Ë)

	)

513 #i‚de‡
vP‹tFªeAlig√d


514 
	#vP‹tFªeAlig√d
–
pvBlockToFªe
 ) 
	`vP‹tFªe
–pvBlockToFªê)

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/StackMacros.h

67 #i‚de‡
STACK_MACROS_H


68 
	#STACK_MACROS_H


	)

86 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 == 0 )

89 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
()

	)

90 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
()

	)

95 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 == 1 )

99 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
()

	)

104 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

107 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
() \

110 if–
pxCuºítTCB
->
pxT›OfSèck
 <pxCuºítTCB->
pxSèck
 ) \

112 
	`vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

114 }

	)

119 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

122 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
() \

126 if–
pxCuºítTCB
->
pxT›OfSèck
 >pxCuºítTCB->
pxEndOfSèck
 ) \

128 
	`vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

130 }

	)

135 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

137 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
() \

139 c⁄° 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

140 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

141 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

142 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

143 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

147 if–
	`memcmp
––* ) 
pxCuºítTCB
->
pxSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

149 
	`vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

151 }

	)

156 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

158 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
() \

160 *
pcEndOfSèck
 = ( * ) 
pxCuºítTCB
->
pxEndOfSèck
; \

161 c⁄° 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

162 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

163 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

164 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

165 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

168 
pcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

171 if–
	`memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

173 
	`vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

175 }

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/croutine.h

67 #i‚de‡
CO_ROUTINE_H


68 
	#CO_ROUTINE_H


	)

70 #i‚de‡
INC_FREERTOS_H


74 
	~"li°.h
"

76 #ifde‡
__˝lu•lus


83 * 
	txCoRoutöeH™dÀ
;

86 (*
¸COROUTINE_CODE
)–
	txCoRoutöeH™dÀ
, 
	tp‹tBASE_TYPE
 );

88 
	sc‹CoRoutöeC⁄åﬁBlock


90 
¸COROUTINE_CODE
 
pxCoRoutöeFun˘i⁄
;

91 
xLi°Iãm
 
xGíîicLi°Iãm
;

92 
xLi°Iãm
 
xEvítLi°Iãm
;

93 
p‹tBASE_TYPE
 
uxPri‹ôy
;

94 
p‹tBASE_TYPE
 
uxIndex
;

95 
uxSèã
;

96 } 
	tc‹CRCB
;

170 sig√d 
p‹tBASE_TYPE
 
xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, p‹tBASE_TYPE 
uxPri‹ôy
, p‹tBASE_TYPE 
uxIndex
 );

212 
vCoRoutöeScheduÀ
( );

243 
	#¸START
–
pxCRCB
 )  ( ( 
c‹CRCB
 * )–pxCRCB ) )->
uxSèã
 ) { 0:

	)

274 
	#¸END
(Ë}

	)

280 
	#¸SET_STATE0
–
xH™dÀ
 ) ( ( 
c‹CRCB
 * )–xH™dÀ ) )->
uxSèã
 = (
__LINE__
 * 2); ; (__LINE__ * 2):

	)

281 
	#¸SET_STATE1
–
xH™dÀ
 ) ( ( 
c‹CRCB
 * )–xH™dÀ ) )->
uxSèã
 = ((
__LINE__
 * 2)+1); ; ((__LINE__ * 2)+1):

	)

329 
	#¸DELAY
–
xH™dÀ
, 
xTicksToDñay
 ) \

330 if––
xTicksToDñay
 ) > 0 ) \

332 
	`vCoRoutöeAddToDñayedLi°
––
xTicksToDñay
 ), 
NULL
 ); \

334 
	`¸SET_STATE0
––
xH™dÀ
 ) );

	)

419 
	#¸QUEUE_SEND
–
xH™dÀ
, 
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
pxResu…
 ) \

421 *–
pxResu…
 ) = 
	`xQueueCRSíd
––
pxQueue
Ë, ( 
pvIãmToQueue
Ë, ( 
xTicksToWaô
 ) ); \

422 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

424 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

425 *
pxResu…
 = 
	`xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), 0 ); \

427 if–*
pxResu…
 =
îrQUEUE_YIELD
 ) \

429 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

430 *
pxResu…
 = 
pdPASS
; \

432 }

	)

511 
	#¸QUEUE_RECEIVE
–
xH™dÀ
, 
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
pxResu…
 ) \

513 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), ( 
xTicksToWaô
 ) ); \

514 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

516 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

517 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), 0 ); \

519 if–*–
pxResu…
 ) =
îrQUEUE_YIELD
 ) \

521 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

522 *–
pxResu…
 ) = 
pdPASS
; \

524 }

	)

620 
	#¸QUEUE_SEND_FROM_ISR
–
pxQueue
, 
pvIãmToQueue
, 
xCoRoutöePªviou¶yWokí
 ) 
	`xQueueCRSídFromISR
––pxQueuê), (ÖvIãmToQueuê), ( xCoRoutöePªviou¶yWokí ) )

	)

733 
	#¸QUEUE_RECEIVE_FROM_ISR
–
pxQueue
, 
pvBuf„r
, 
pxCoRoutöeWokí
 ) 
	`xQueueCRRe˚iveFromISR
––pxQueuê), (ÖvBuf„∏), (ÖxCoRoutöeWokí ) )

	)

744 
vCoRoutöeAddToDñayedLi°
–
p‹tTickTy≥
 
xTicksToDñay
, 
xLi°
 *
pxEvítLi°
 );

753 sig√d 
p‹tBASE_TYPE
 
xCoRoutöeRemoveFromEvítLi°
–c⁄° 
xLi°
 *
pxEvítLi°
 );

755 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/list.h

96 #i‚de‡
LIST_H


97 
	#LIST_H


	)

99 #ifde‡
__˝lu•lus


105 
	sxLIST_ITEM


107 
p‹tTickTy≥
 
xIãmVÆue
;

108 vﬁ©ûê
xLIST_ITEM
 * 
pxNext
;

109 vﬁ©ûê
xLIST_ITEM
 * 
pxPªvious
;

110 * 
pvOw√r
;

111 * 
pvC⁄èöî
;

113 
xLIST_ITEM
 
	txLi°Iãm
;

115 
	sxMINI_LIST_ITEM


117 
p‹tTickTy≥
 
xIãmVÆue
;

118 vﬁ©ûê
xLIST_ITEM
 *
pxNext
;

119 vﬁ©ûê
xLIST_ITEM
 *
pxPªvious
;

121 
xMINI_LIST_ITEM
 
	txMöiLi°Iãm
;

126 
	sxLIST


128 vﬁ©ûê
p‹tBASE_TYPE
 
uxNumbîOfIãms
;

129 vﬁ©ûê
xLi°Iãm
 * 
pxIndex
;

130 vﬁ©ûê
xMöiLi°Iãm
 
xLi°End
;

131 } 
	txLi°
;

140 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏)

	)

149 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuê)

	)

159 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

168 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
xIãmVÆue
 )

	)

177 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 =–
p‹tBASE_TYPE
 ) 0 )

	)

182 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

203 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

205 
xLi°
 * c⁄° 
pxC⁄°Li°
 = ( 
pxLi°
 ); \

208 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

209 if––
pxC⁄°Li°
 )->
pxIndex
 =–
xLi°Iãm
 * ) &––pxC⁄°Li° )->
xLi°End
 ) ) \

211 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

213 –
pxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

214 }

	)

233 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
pvOw√r
 )

	)

245 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 =–* ) (ÖxLi° ) )

	)

257 
vLi°Inôüli£
–
xLi°
 *
pxLi°
 );

268 
vLi°Inôüli£Iãm
–
xLi°Iãm
 *
pxIãm
 );

281 
vLi°In£π
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 );

302 
vLi°In£πEnd
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 );

314 
vLi°Remove
–
xLi°Iãm
 *
pxIãmToRemove
 );

316 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/mpu_wrappers.h

67 #i‚de‡
MPU_WRAPPERS_H


68 
	#MPU_WRAPPERS_H


	)

72 #ifde‡
p‹tUSING_MPU_WRAPPERS


77 #i‚de‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


79 
	#xTaskGíîicCª©e
 
MPU_xTaskGíîicCª©e


	)

80 
	#vTaskAŒoˇãMPURegi⁄s
 
MPU_vTaskAŒoˇãMPURegi⁄s


	)

81 
	#vTaskDñëe
 
MPU_vTaskDñëe


	)

82 
	#vTaskDñayU¡û
 
MPU_vTaskDñayU¡û


	)

83 
	#vTaskDñay
 
MPU_vTaskDñay


	)

84 
	#uxTaskPri‹ôyGë
 
MPU_uxTaskPri‹ôyGë


	)

85 
	#vTaskPri‹ôySë
 
MPU_vTaskPri‹ôySë


	)

86 
	#vTaskSu•íd
 
MPU_vTaskSu•íd


	)

87 
	#xTaskIsTaskSu•íded
 
MPU_xTaskIsTaskSu•íded


	)

88 
	#vTaskResume
 
MPU_vTaskResume


	)

89 
	#vTaskSu•ídAŒ
 
MPU_vTaskSu•ídAŒ


	)

90 
	#xTaskResumeAŒ
 
MPU_xTaskResumeAŒ


	)

91 
	#xTaskGëTickCou¡
 
MPU_xTaskGëTickCou¡


	)

92 
	#uxTaskGëNumbîOfTasks
 
MPU_uxTaskGëNumbîOfTasks


	)

93 
	#vTaskLi°
 
MPU_vTaskLi°


	)

94 
	#vTaskGëRunTimeSèts
 
MPU_vTaskGëRunTimeSèts


	)

95 
	#vTaskSèπTø˚
 
MPU_vTaskSèπTø˚


	)

96 
	#ulTaskEndTø˚
 
MPU_ulTaskEndTø˚


	)

97 
	#vTaskSëAµliˇti⁄TaskTag
 
MPU_vTaskSëAµliˇti⁄TaskTag


	)

98 
	#xTaskGëAµliˇti⁄TaskTag
 
MPU_xTaskGëAµliˇti⁄TaskTag


	)

99 
	#xTaskCÆlAµliˇti⁄TaskHook
 
MPU_xTaskCÆlAµliˇti⁄TaskHook


	)

100 
	#uxTaskGëSèckHighW©îM¨k
 
MPU_uxTaskGëSèckHighW©îM¨k


	)

101 
	#xTaskGëCuºítTaskH™dÀ
 
MPU_xTaskGëCuºítTaskH™dÀ


	)

102 
	#xTaskGëScheduÀrSèã
 
MPU_xTaskGëScheduÀrSèã


	)

104 
	#xQueueGíîicCª©e
 
MPU_xQueueGíîicCª©e


	)

105 
	#xQueueCª©eMuãx
 
MPU_xQueueCª©eMuãx


	)

106 
	#xQueueGiveMuãxRecursive
 
MPU_xQueueGiveMuãxRecursive


	)

107 
	#xQueueTakeMuãxRecursive
 
MPU_xQueueTakeMuãxRecursive


	)

108 
	#xQueueCª©eCou¡ögSem≠h‹e
 
MPU_xQueueCª©eCou¡ögSem≠h‹e


	)

109 
	#xQueueGíîicSíd
 
MPU_xQueueGíîicSíd


	)

110 
	#xQueueA…GíîicSíd
 
MPU_xQueueA…GíîicSíd


	)

111 
	#xQueueA…GíîicRe˚ive
 
MPU_xQueueA…GíîicRe˚ive


	)

112 
	#xQueueGíîicRe˚ive
 
MPU_xQueueGíîicRe˚ive


	)

113 
	#uxQueueMesßgesWaôög
 
MPU_uxQueueMesßgesWaôög


	)

114 
	#vQueueDñëe
 
MPU_vQueueDñëe


	)

116 
	#pvP‹tMÆloc
 
MPU_pvP‹tMÆloc


	)

117 
	#vP‹tFªe
 
MPU_vP‹tFªe


	)

118 
	#xP‹tGëFªeHópSize
 
MPU_xP‹tGëFªeHópSize


	)

119 
	#vP‹tInôüli£Blocks
 
MPU_vP‹tInôüli£Blocks


	)

121 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

122 
	#vQueueAddToRegi°ry
 
MPU_vQueueAddToRegi°ry


	)

123 
	#vQueueUƒegi°îQueue
 
MPU_vQueueUƒegi°îQueue


	)

127 
	#PRIVILEGED_FUNCTION


	)

132 
	#PRIVILEGED_FUNCTION
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_fun˘i⁄s")))

	)

133 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

140 
	#PRIVILEGED_FUNCTION


	)

141 
	#PRIVILEGED_DATA


	)

142 
	#p‹tUSING_MPU_WRAPPERS
 0

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/portable.h

71 #i‚de‡
PORTABLE_H


72 
	#PORTABLE_H


	)

76 #ifde‡
OPEN_WATCOM_INDUSTRIAL_PC_PORT


77 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\pc\p‹tma¸o.h
"

78 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

81 #ifde‡
OPEN_WATCOM_FLASH_LITE_186_PORT


82 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\Êsh186\p‹tma¸o.h
"

83 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

86 #ifde‡
GCC_MEGA_AVR


87 
	~"../p‹èbÀ/GCC/ATMega323/p‹tma¸o.h
"

90 #ifde‡
IAR_MEGA_AVR


91 
	~"../p‹èbÀ/IAR/ATMega323/p‹tma¸o.h
"

94 #ifde‡
MPLAB_PIC24_PORT


95 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC24_dsPIC\p‹tma¸o.h
"

98 #ifde‡
MPLAB_DSPIC_PORT


99 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC24_dsPIC\p‹tma¸o.h
"

102 #ifde‡
MPLAB_PIC18F_PORT


103 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC18F\p‹tma¸o.h
"

106 #ifde‡
MPLAB_PIC32MX_PORT


107 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC32MX\p‹tma¸o.h
"

110 #ifde‡
_FEDPICC


111 
	~"libFªeRTOS/In˛ude/p‹tma¸o.h
"

114 #ifde‡
SDCC_CYGNAL


115 
	~"../../Sour˚/p‹èbÀ/SDCC/Cyg«l/p‹tma¸o.h
"

118 #ifde‡
GCC_ARM7


119 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC2000/p‹tma¸o.h
"

122 #ifde‡
GCC_ARM7_ECLIPSE


123 
	~"p‹tma¸o.h
"

126 #ifde‡
ROWLEY_LPC23xx


127 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC23xx/p‹tma¸o.h
"

130 #ifde‡
IAR_MSP430


131 
	~"..\..\Sour˚\p‹èbÀ\IAR\MSP430\p‹tma¸o.h
"

134 #ifde‡
GCC_MSP430


135 
	~"../../Sour˚/p‹èbÀ/GCC/MSP430F449/p‹tma¸o.h
"

138 #ifde‡
ROWLEY_MSP430


139 
	~"../../Sour˚/p‹èbÀ/RowÀy/MSP430F449/p‹tma¸o.h
"

142 #ifde‡
ARM7_LPC21xx_KEIL_RVDS


143 
	~"..\..\Sour˚\p‹èbÀ\RVDS\ARM7_LPC21xx\p‹tma¸o.h
"

146 #ifde‡
SAM7_GCC


147 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91SAM7S/p‹tma¸o.h
"

150 #ifde‡
SAM7_IAR


151 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM7S64\p‹tma¸o.h
"

154 #ifde‡
SAM9XE_IAR


155 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM9XE\p‹tma¸o.h
"

158 #ifde‡
LPC2000_IAR


159 
	~"..\..\Sour˚\p‹èbÀ\IAR\LPC2000\p‹tma¸o.h
"

162 #ifde‡
STR71X_IAR


163 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR71x\p‹tma¸o.h
"

166 #ifde‡
STR75X_IAR


167 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR75x\p‹tma¸o.h
"

170 #ifde‡
STR75X_GCC


171 
	~"..\..\Sour˚\p‹èbÀ\GCC\STR75x\p‹tma¸o.h
"

174 #ifde‡
STR91X_IAR


175 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR91x\p‹tma¸o.h
"

178 #ifde‡
GCC_H8S


179 
	~"../../Sour˚/p‹èbÀ/GCC/H8S2329/p‹tma¸o.h
"

182 #ifde‡
GCC_AT91FR40008


183 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91FR40008/p‹tma¸o.h
"

186 #ifde‡
RVDS_ARMCM3_LM3S102


187 
	~"../../Sour˚/p‹èbÀ/RVDS/ARM_CM3/p‹tma¸o.h
"

190 #ifde‡
GCC_ARMCM3_LM3S102


191 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

194 #ifde‡
GCC_ARMCM3


195 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

198 #ifde‡
IAR_ARM_CM3


199 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

202 #ifde‡
IAR_ARMCM3_LM


203 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

206 #ifde‡
HCS12_CODE_WARRIOR


207 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/HCS12/p‹tma¸o.h
"

210 #ifde‡
MICROBLAZE_GCC


211 
	~"../../Sour˚/p‹èbÀ/GCC/Mi¸oBœze/p‹tma¸o.h
"

214 #ifde‡
TERN_EE


215 
	~"..\..\Sour˚\p‹èbÀ\P¨adigm\Tîn_EE\smÆl\p‹tma¸o.h
"

218 #ifde‡
GCC_HCS12


219 
	~"../../Sour˚/p‹èbÀ/GCC/HCS12/p‹tma¸o.h
"

222 #ifde‡
GCC_MCF5235


223 
	~"../../Sour˚/p‹èbÀ/GCC/MCF5235/p‹tma¸o.h
"

226 #ifde‡
COLDFIRE_V2_GCC


227 
	~"../../../Sour˚/p‹èbÀ/GCC/CﬁdFúe_V2/p‹tma¸o.h
"

230 #ifde‡
COLDFIRE_V2_CODEWARRIOR


231 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/CﬁdFúe_V2/p‹tma¸o.h
"

234 #ifde‡
GCC_PPC405


235 
	~"../../Sour˚/p‹èbÀ/GCC/PPC405_Xûöx/p‹tma¸o.h
"

238 #ifde‡
GCC_PPC440


239 
	~"../../Sour˚/p‹èbÀ/GCC/PPC440_Xûöx/p‹tma¸o.h
"

242 #ifde‡
_16FX_SOFTUNE


243 
	~"..\..\Sour˚\p‹èbÀ\So·u√\MB96340\p‹tma¸o.h
"

246 #ifde‡
BCC_INDUSTRIAL_PC_PORT


249 
	~"‰c⁄fig.h
"

250 
	~"..\p‹èbÀ\BCC\16BôDOS\PC\¥tma¸o.h
"

251 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

254 #ifde‡
BCC_FLASH_LITE_186_PORT


257 
	~"‰c⁄fig.h
"

258 
	~"..\p‹èbÀ\BCC\16BôDOS\Êsh186\¥tma¸o.h
"

259 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

262 #ifde‡
__GNUC__


263 #ifde‡
__AVR32_AVR32A__


264 
	~"p‹tma¸o.h
"

268 #ifde‡
__ICCAVR32__


269 #ifde‡
__CORE__


270 #i‡
__CORE__
 =
__AVR32A__


271 
	~"p‹tma¸o.h
"

276 #ifde‡
__91467D


277 
	~"p‹tma¸o.h
"

280 #ifde‡
__96340


281 
	~"p‹tma¸o.h
"

285 #ifde‡
__IAR_V850ES_Fx3__


286 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

289 #ifde‡
__IAR_V850ES_Jx3__


290 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

293 #ifde‡
__IAR_V850ES_Jx3_L__


294 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

297 #ifde‡
__IAR_V850ES_Jx2__


298 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

301 #ifde‡
__IAR_V850ES_Hx2__


302 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

305 #ifde‡
__IAR_78K0R_Kx3__


306 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

309 #ifde‡
__IAR_78K0R_Kx3L__


310 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

319 #i‚de‡
p‹tENTER_CRITICAL


320 
	~"p‹tma¸o.h
"

323 #i‡
p‹tBYTE_ALIGNMENT
 == 8

324 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

327 #i‡
p‹tBYTE_ALIGNMENT
 == 4

328 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0003 )

	)

331 #i‡
p‹tBYTE_ALIGNMENT
 == 2

332 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0001 )

	)

335 #i‡
p‹tBYTE_ALIGNMENT
 == 1

336 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0000 )

	)

339 #i‚de‡
p‹tBYTE_ALIGNMENT_MASK


343 #i‚de‡
p‹tNUM_CONFIGURABLE_REGIONS


344 
	#p‹tNUM_CONFIGURABLE_REGIONS
 1

	)

347 #ifde‡
__˝lu•lus


351 
	~"mpu_wøµîs.h
"

359 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

360 
p‹tSTACK_TYPE
 *
pxP‹tInôüli£Sèck
–p‹tSTACK_TYPE *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
, 
p‹tBASE_TYPE
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

362 
p‹tSTACK_TYPE
 *
pxP‹tInôüli£Sèck
–p‹tSTACK_TYPE *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 );

368 *
pvP‹tMÆloc
–
size_t
 
xSize
 ) 
	gPRIVILEGED_FUNCTION
;

369 
vP‹tFªe
–*
pv
 ) 
	gPRIVILEGED_FUNCTION
;

370 
vP‹tInôüli£Blocks
–Ë
	gPRIVILEGED_FUNCTION
;

371 
size_t
 
xP‹tGëFªeHópSize
–Ë
	gPRIVILEGED_FUNCTION
;

377 
p‹tBASE_TYPE
 
xP‹tSèπScheduÀr
–Ë
	gPRIVILEGED_FUNCTION
;

384 
vP‹tEndScheduÀr
–Ë
	gPRIVILEGED_FUNCTION
;

393 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

394 
	gxMEMORY_REGION
;

395 
vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
, 
p‹tSTACK_TYPE
 *
pxBŸtomOfSèck
, 
usSèckDïth
 ) 
	gPRIVILEGED_FUNCTION
;

398 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/projdefs.h

67 #i‚de‡
PROJDEFS_H


68 
	#PROJDEFS_H


	)

71 (*
	tpdTASK_CODE
)( * );

73 
	#pdTRUE
 ( 1 )

	)

74 
	#pdFALSE
 ( 0 )

	)

76 
	#pdPASS
 ( 1 )

	)

77 
	#pdFAIL
 ( 0 )

	)

78 
	#îrQUEUE_EMPTY
 ( 0 )

	)

79 
	#îrQUEUE_FULL
 ( 0 )

	)

82 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

83 
	#îrNO_TASK_TO_RUN
 ( -2 )

	)

84 
	#îrQUEUE_BLOCKED
 ( -4 )

	)

85 
	#îrQUEUE_YIELD
 ( -5 )

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/queue.h

68 #i‚de‡
QUEUE_H


69 
	#QUEUE_H


	)

71 #i‚de‡
INC_FREERTOS_H


72 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include queue.h"

75 #ifde‡
__˝lu•lus


80 
	~"mpu_wøµîs.h
"

87 * 
	txQueueH™dÀ
;

91 
	#queueSEND_TO_BACK
 ( 0 )

	)

92 
	#queueSEND_TO_FRONT
 ( 1 )

	)

95 
	#queueQUEUE_TYPE_BASE
 ( 0U )

	)

96 
	#queueQUEUE_TYPE_MUTEX
 ( 1U )

	)

97 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( 2U )

	)

98 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( 3U )

	)

99 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( 4U )

	)

157 
	#xQueueCª©e
–
uxQueueLígth
, 
uxIãmSize
 ) 
	`xQueueGíîicCª©e
–uxQueueLígth, uxIãmSize, 
queueQUEUE_TYPE_BASE
 )

	)

239 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

321 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

405 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

493 sig√d 
p‹tBASE_TYPE
 
xQueueGíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

587 
	#xQueuePìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

680 
	#xQueueRe˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

779 sig√d 
p‹tBASE_TYPE
 
xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
xQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xJu°Pìk
 );

794 
p‹tBASE_TYPE
 
uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
xQueue
 );

808 
vQueueDñëe
–
xQueueH™dÀ
 
pxQueue
 );

878 
	#xQueueSídToFr⁄tFromISR
–
pxQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––pxQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_FRONT
 )

	)

949 
	#xQueueSídToBackFromISR
–
pxQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––pxQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1023 
	#xQueueSídFromISR
–
pxQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––pxQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1101 sig√d 
p‹tBASE_TYPE
 
xQueueGíîicSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, sig√dÖ‹tBASE_TYPE *
pxHighîPri‹ôyTaskWokí
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

1190 sig√d 
p‹tBASE_TYPE
 
xQueueRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, sig√dÖ‹tBASE_TYPE *
pxTaskWokí
 );

1196 sig√d 
p‹tBASE_TYPE
 
xQueueIsQueueEm±yFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 );

1197 sig√d 
p‹tBASE_TYPE
 
xQueueIsQueueFuŒFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 );

1198 
p‹tBASE_TYPE
 
uxQueueMesßgesWaôögFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 );

1215 sig√d 
p‹tBASE_TYPE
 
xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

1216 sig√d 
p‹tBASE_TYPE
 
xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xJu°Pìkög
 );

1217 
	#xQueueA…SídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

1218 
	#xQueueA…SídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

1219 
	#xQueueA…Re˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

1220 
	#xQueueA…Pìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

1231 sig√d 
p‹tBASE_TYPE
 
xQueueCRSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, sig√dÖ‹tBASE_TYPE 
xCoRoutöePªviou¶yWokí
 );

1232 sig√d 
p‹tBASE_TYPE
 
xQueueCRRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, sig√dÖ‹tBASE_TYPE *
pxTaskWokí
 );

1233 sig√d 
p‹tBASE_TYPE
 
xQueueCRSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 );

1234 sig√d 
p‹tBASE_TYPE
 
xQueueCRRe˚ive
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
 );

1241 
xQueueH™dÀ
 
xQueueCª©eMuãx
–
ucQueueTy≥
 );

1242 
xQueueH™dÀ
 
xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 );

1243 * 
xQueueGëMuãxHﬁdî
–
xQueueH™dÀ
 
xSem≠h‹e
 );

1249 
p‹tBASE_TYPE
 
xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
, 
p‹tTickTy≥
 
xBlockTime
 );

1250 
p‹tBASE_TYPE
 
xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
 );

1258 
	#xQueueRe£t
–
pxQueue
 ) 
	`xQueueGíîicRe£t
–pxQueue, 
pdFALSE
 )

	)

1280 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0U

1281 
vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcName
 );

1288 
xQueueH™dÀ
 
xQueueGíîicCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
, 
ucQueueTy≥
 );

1291 
vQueueWaôF‹MesßgeRe°ri˘ed
–
xQueueH™dÀ
 
pxQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 );

1292 
p‹tBASE_TYPE
 
xQueueGíîicRe£t
–
xQueueH™dÀ
 
pxQueue
,Ö‹tBASE_TYPE 
xNewQueue
 );

1295 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/semphr.h

67 #i‚de‡
SEMAPHORE_H


68 
	#SEMAPHORE_H


	)

70 #i‚de‡
INC_FREERTOS_H


71 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include semphr.h"

74 
	~"queue.h
"

76 
xQueueH™dÀ
 
	txSem≠h‹eH™dÀ
;

78 
	#£mBINARY_SEMAPHORE_QUEUE_LENGTH
 ( ( Ë1U )

	)

79 
	#£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( Ë0U )

	)

80 
	#£mGIVE_BLOCK_TIME
 ( ( 
p‹tTickTy≥
 ) 0U )

	)

121 
	#vSem≠h‹eCª©eBö¨y
–
xSem≠h‹e
 ) \

123 –
xSem≠h‹e
 ) = 
	`xQueueGíîicCª©e
––
p‹tBASE_TYPE
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 ); \

124 if––
xSem≠h‹e
 ) !
NULL
 ) \

126 
	`xSem≠h‹eGive
––
xSem≠h‹e
 ) ); \

128 }

	)

195 
	#xSem≠h‹eTake
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueGíîicRe˚ive
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

288 
	#xSem≠h‹eTakeRecursive
–
xMuãx
, 
xBlockTime
 ) 
	`xQueueTakeMuãxRecursive
––xMuãx ), ( xBlockTimêË)

	)

303 
	#xSem≠h‹eA…Take
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueA…GíîicRe˚ive
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

366 
	#xSem≠h‹eGive
–
xSem≠h‹e
 ) 
	`xQueueGíîicSíd
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

450 
	#xSem≠h‹eGiveRecursive
–
xMuãx
 ) 
	`xQueueGiveMuãxRecursive
––xMuãx ) )

	)

464 
	#xSem≠h‹eA…Give
–
xSem≠h‹e
 ) 
	`xQueueA…GíîicSíd
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

555 
	#xSem≠h‹eGiveFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

602 
	#xSem≠h‹eCª©eMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 )

	)

657 
	#xSem≠h‹eCª©eRecursiveMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
 )

	)

720 
	#xSem≠h‹eCª©eCou¡ög
–
uxMaxCou¡
, 
uxInôülCou¡
 ) 
	`xQueueCª©eCou¡ögSem≠h‹e
––uxMaxCou¡ ), ( uxInôülCou¡ ) )

	)

734 
	#vSem≠h‹eDñëe
–
xSem≠h‹e
 ) 
	`vQueueDñëe
––
xQueueH™dÀ
 ) ( xSem≠h‹êË)

	)

749 
	#xSem≠h‹eGëMuãxHﬁdî
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdî
––xSem≠h‹êË)

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/task.h

69 #i‚de‡
TASK_H


70 
	#TASK_H


	)

72 #i‚de‡
INC_FREERTOS_H


76 
	~"p‹èbÀ.h
"

77 
	~"li°.h
"

79 #ifde‡
__˝lu•lus


87 
	#tskKERNEL_VERSION_NUMBER
 "V7.1.1"

	)

99 * 
	txTaskH™dÀ
;

104 
	sxTIME_OUT


106 
p‹tBASE_TYPE
 
xOvîÊowCou¡
;

107 
p‹tTickTy≥
 
xTimeOnE¡îög
;

108 } 
	txTimeOutTy≥
;

113 
	sxMEMORY_REGION


115 *
pvBa£Addªss
;

116 
ulLígthInByãs
;

117 
ulP¨amëîs
;

118 } 
	txMem‹yRegi⁄
;

123 
	sxTASK_PARAMTERS


125 
pdTASK_CODE
 
pvTaskCode
;

126 c⁄° sig√d * c⁄° 
pcName
;

127 
usSèckDïth
;

128 *
pvP¨amëîs
;

129 
p‹tBASE_TYPE
 
uxPri‹ôy
;

130 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
;

131 
xMem‹yRegi⁄
 
xRegi⁄s
[ 
p‹tNUM_CONFIGURABLE_REGIONS
 ];

132 } 
	txTaskP¨amëîs
;

139 
	#tskIDLE_PRIORITY
 ( ( 
p‹tBASE_TYPE
 ) 0U )

	)

149 
	#èskYIELD
(Ë
	`p‹tYIELD
()

	)

163 
	#èskENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

177 
	#èskEXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

187 
	#èskDISABLE_INTERRUPTS
(Ë
	`p‹tDISABLE_INTERRUPTS
()

	)

197 
	#èskENABLE_INTERRUPTS
(Ë
	`p‹tENABLE_INTERRUPTS
()

	)

200 
	#èskSCHEDULER_NOT_STARTED
 0

	)

201 
	#èskSCHEDULER_RUNNING
 1

	)

202 
	#èskSCHEDULER_SUSPENDED
 2

	)

284 
	#xTaskCª©e
–
pvTaskCode
, 
pcName
, 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
 ) 
	`xTaskGíîicCª©e
––pvTaskCodê), (ÖcNamê), ( usSèckDïth ), (ÖvP¨amëî†), ( uxPri‹ôy ), (ÖxCª©edTask ), ( 
NULL
 ), ( NULL ) )

	)

353 
	#xTaskCª©eRe°ri˘ed
–
x
, 
pxCª©edTask
 ) 
	`xTaskGíîicCª©e
–((x)->
pvTaskCode
), ((x)->
pcName
), ((x)->
usSèckDïth
), ((x)->
pvP¨amëîs
), ((x)->
uxPri‹ôy
), (pxCª©edTask), ((x)->
puxSèckBuf„r
), ((x)->
xRegi⁄s
Ë)

	)

401 
vTaskAŒoˇãMPURegi⁄s
–
xTaskH™dÀ
 
xTask
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
pxRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

442 
vTaskDñëe
–
xTaskH™dÀ
 
pxTaskToDñëe
 ) 
PRIVILEGED_FUNCTION
;

496 
vTaskDñay
–
p‹tTickTy≥
 
xTicksToDñay
 ) 
PRIVILEGED_FUNCTION
;

555 
vTaskDñayU¡û
–
p‹tTickTy≥
 * c⁄° 
pxPªviousWakeTime
,Ö‹tTickTy≥ 
xTimeIn¸emít
 ) 
PRIVILEGED_FUNCTION
;

602 
p‹tBASE_TYPE
 
uxTaskPri‹ôyGë
–
xTaskH™dÀ
 
pxTask
 ) 
PRIVILEGED_FUNCTION
;

644 
vTaskPri‹ôySë
–
xTaskH™dÀ
 
pxTask
, 
p‹tBASE_TYPE
 
uxNewPri‹ôy
 ) 
PRIVILEGED_FUNCTION
;

695 
vTaskSu•íd
–
xTaskH™dÀ
 
pxTaskToSu•íd
 ) 
PRIVILEGED_FUNCTION
;

744 
vTaskResume
–
xTaskH™dÀ
 
pxTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

764 
p‹tBASE_TYPE
 
xTaskResumeFromISR
–
xTaskH™dÀ
 
pxTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

802 
vTaskSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

855 
vTaskEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

906 
vTaskSu•ídAŒ
–Ë
PRIVILEGED_FUNCTION
;

958 sig√d 
p‹tBASE_TYPE
 
xTaskResumeAŒ
–Ë
PRIVILEGED_FUNCTION
;

969 sig√d 
p‹tBASE_TYPE
 
xTaskIsTaskSu•íded
–
xTaskH™dÀ
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

984 
p‹tTickTy≥
 
xTaskGëTickCou¡
–Ë
PRIVILEGED_FUNCTION
;

1000 
p‹tTickTy≥
 
xTaskGëTickCou¡FromISR
–Ë
PRIVILEGED_FUNCTION
;

1014 
p‹tBASE_TYPE
 
uxTaskGëNumbîOfTasks
–Ë
PRIVILEGED_FUNCTION
;

1028 sig√d *
pcTaskGëTaskName
–
xTaskH™dÀ
 
xTaskToQuîy
 );

1054 
vTaskLi°
–sig√d *
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1086 
vTaskGëRunTimeSèts
–sig√d *
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1107 
vTaskSèπTø˚
–sig√d * 
pcBuf„r
, 
ulBuf„rSize
 ) 
PRIVILEGED_FUNCTION
;

1120 
ulTaskEndTø˚
–Ë
PRIVILEGED_FUNCTION
;

1140 
p‹tBASE_TYPE
 
uxTaskGëSèckHighW©îM¨k
–
xTaskH™dÀ
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1148 #ifde‡
c⁄figUSE_APPLICATION_TASK_TAG


1149 #i‡
c⁄figUSE_APPLICATION_TASK_TAG
 == 1

1158 
vTaskSëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
, 
pdTASK_HOOK_CODE
 
pxHookFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

1166 
pdTASK_HOOK_CODE
 
xTaskGëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1180 
p‹tBASE_TYPE
 
xTaskCÆlAµliˇti⁄TaskHook
–
xTaskH™dÀ
 
xTask
, *
pvP¨amëî
 ) 
PRIVILEGED_FUNCTION
;

1189 
xTaskH™dÀ
 
xTaskGëIdÀTaskH™dÀ
( );

1205 
vTaskIn¸emítTick
–Ë
PRIVILEGED_FUNCTION
;

1228 
vTaskPœ˚OnEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1243 
vTaskPœ˚OnEvítLi°Re°ri˘ed
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1260 sig√d 
p‹tBASE_TYPE
 
xTaskRemoveFromEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
 ) 
PRIVILEGED_FUNCTION
;

1270 
vTaskSwôchC⁄ãxt
–Ë
PRIVILEGED_FUNCTION
;

1275 
xTaskH™dÀ
 
xTaskGëCuºítTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

1280 
vTaskSëTimeOutSèã
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

1286 
p‹tBASE_TYPE
 
xTaskCheckF‹TimeOut
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
, 
p‹tTickTy≥
 * c⁄° 
pxTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1292 
vTaskMis£dYõld
–Ë
PRIVILEGED_FUNCTION
;

1298 
p‹tBASE_TYPE
 
xTaskGëScheduÀrSèã
–Ë
PRIVILEGED_FUNCTION
;

1304 
vTaskPri‹ôyInhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

1310 
vTaskPri‹ôyDisöhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

1316 sig√d 
p‹tBASE_TYPE
 
xTaskGíîicCª©e
–
pdTASK_CODE
 
pxTaskCode
, c⁄° sig√d * c⁄° 
pcName
, 
usSèckDïth
, *
pvP¨amëîs
, p‹tBASE_TYPE 
uxPri‹ôy
, 
xTaskH™dÀ
 *
pxCª©edTask
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

1321 
p‹tBASE_TYPE
 
uxTaskGëTaskNumbî
–
xTaskH™dÀ
 
xTask
 );

1327 
vTaskSëTaskNumbî
–
xTaskH™dÀ
 
xTask
, 
p‹tBASE_TYPE
 
uxH™dÀ
 );

1330 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/timers.h

68 #i‚de‡
TIMERS_H


69 
	#TIMERS_H


	)

71 #i‚de‡
INC_FREERTOS_H


75 
	~"p‹èbÀ.h
"

76 
	~"li°.h
"

77 
	~"èsk.h
"

79 #ifde‡
__˝lu•lus


86 
	#tmrCOMMAND_START
 0

	)

87 
	#tmrCOMMAND_STOP
 1

	)

88 
	#tmrCOMMAND_CHANGE_PERIOD
 2

	)

89 
	#tmrCOMMAND_DELETE
 3

	)

101 * 
	txTimîH™dÀ
;

104 (*
tmrTIMER_CALLBACK
)–
	txTimîH™dÀ
 
	txTimî
 );

233 
xTimîH™dÀ
 
xTimîCª©e
–c⁄° sig√d *
pcTimîName
, 
p‹tTickTy≥
 
xTimîPîiodInTicks
, 
p‹tBASE_TYPE
 
uxAutoRñﬂd
, * 
pvTimîID
, 
tmrTIMER_CALLBACK
 
pxCÆlbackFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

255 *
pvTimîGëTimîID
–
xTimîH™dÀ
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

291 
p‹tBASE_TYPE
 
xTimîIsTimîA˘ive
–
xTimîH™dÀ
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

300 
xTaskH™dÀ
 
xTimîGëTimîD´m⁄TaskH™dÀ
( );

352 
	#xTimîSèπ
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xBlockTimêË)

	)

394 
	#xTimîSt›
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0U, 
NULL
, ( xBlockTimêË)

	)

473 
	#xTimîCh™gePîiod
–
xTimî
, 
xNewPîiod
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), 
NULL
, ( xBlockTimêË)

	)

511 
	#xTimîDñëe
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_DELETE
, 0U, 
NULL
, ( xBlockTimêË)

	)

634 
	#xTimîRe£t
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xBlockTimêË)

	)

718 
	#xTimîSèπFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

780 
	#xTimîSt›FromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0, (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

852 
	#xTimîCh™gePîiodFromISR
–
xTimî
, 
xNewPîiod
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

937 
	#xTimîRe£tFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

943 
p‹tBASE_TYPE
 
xTimîCª©eTimîTask
–Ë
PRIVILEGED_FUNCTION
;

944 
p‹tBASE_TYPE
 
xTimîGíîicComm™d
–
xTimîH™dÀ
 
xTimî
,Ö‹tBASE_TYPE 
xComm™dID
, 
p‹tTickTy≥
 
xO±i⁄ÆVÆue
, sig√dÖ‹tBASE_TYPE *
pxHighîPri‹ôyTaskWokí
,Ö‹tTickTy≥ 
xBlockTime
 ) 
PRIVILEGED_FUNCTION
;

946 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/list.c

68 
	~<°dlib.h
>

69 
	~"FªeRTOS.h
"

70 
	~"li°.h
"

76 
	$vLi°Inôüli£
–
xLi°
 *
pxLi°
 )

81 
pxLi°
->
pxIndex
 = ( 
xLi°Iãm
 * ) &–pxLi°->
xLi°End
 );

85 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

89 
pxLi°
->
xLi°End
.
pxNext
 = ( 
xLi°Iãm
 * ) &(ÖxList->xListEnd );

90 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
xLi°Iãm
 * ) &(ÖxList->xListEnd );

92 
pxLi°
->
uxNumbîOfIãms
 = ( 
p‹tBASE_TYPE
 ) 0U;

93 
	}
}

96 
	$vLi°Inôüli£Iãm
–
xLi°Iãm
 *
pxIãm
 )

99 
pxIãm
->
pvC⁄èöî
 = 
NULL
;

100 
	}
}

103 
	$vLi°In£πEnd
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 )

105 vﬁ©ûê
xLi°Iãm
 * 
pxIndex
;

111 
pxIndex
 = 
pxLi°
->pxIndex;

113 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
->pxNext;

114 
pxNewLi°Iãm
->
pxPªvious
 = 
pxLi°
->
pxIndex
;

115 
pxIndex
->
pxNext
->
pxPªvious
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

116 
pxIndex
->
pxNext
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

117 
pxLi°
->
pxIndex
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

120 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

122 –
pxLi°
->
uxNumbîOfIãms
 )++;

123 
	}
}

126 
	$vLi°In£π
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 )

128 vﬁ©ûê
xLi°Iãm
 *
pxIãøt‹
;

129 
p‹tTickTy≥
 
xVÆueOfIn£πi⁄
;

132 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

141 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

143 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

163  
pxIãøt‹
 = ( 
xLi°Iãm
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

170 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

171 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 = ( vﬁ©ûê
xLi°Iãm
 * )ÖxNewListItem;

172 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

173 
pxIãøt‹
->
pxNext
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

177 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

179 –
pxLi°
->
uxNumbîOfIãms
 )++;

180 
	}
}

183 
	$vLi°Remove
–
xLi°Iãm
 *
pxIãmToRemove
 )

185 
xLi°
 * 
pxLi°
;

187 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

188 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

192 
pxLi°
 = ( 
xLi°
 * ) 
pxIãmToRemove
->
pvC⁄èöî
;

195 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

197 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

200 
pxIãmToRemove
->
pvC⁄èöî
 = 
NULL
;

201 –
pxLi°
->
uxNumbîOfIãms
 )--;

202 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/Flsh186/port.c

85 
	~<dos.h
>

86 
	~<°dlib.h
>

87 
	~<£tjmp.h
>

89 
	~"FªeRTOS.h
"

90 
	~"èsk.h
"

91 
	~"p‹èsm.h
"

95 
	#p‹tTIMER_EOI_TYPE
 ( 8 )

	)

96 
	#p‹tRESET_PIC
(Ë
	`p‹tOUTPUT_WORD
––Ë0xff22, 
p‹tTIMER_EOI_TYPE
 )

	)

97 
	#p‹tTIMER_INT_NUMBER
 0x12

	)

99 
	#p‹tTIMER_1_CONTROL_REGISTER
 ( ( Ë0xff5ê)

	)

100 
	#p‹tTIMER_0_CONTROL_REGISTER
 ( ( Ë0xff56 )

	)

101 
	#p‹tTIMER_INTERRUPT_ENABLE
 ( ( Ë0x2000 )

	)

104 
¥vSëTickFªquícy
–
ulTickR©eHz
 );

107 
¥vExôFun˘i⁄
( );

111 #if–
c⁄figUSE_PREEMPTION
 == 1 )

114 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

118 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

122 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

127 
p‹tBASE_TYPE
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

132 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISR
 )();

135 
jmp_buf
 
	gxJumpBuf
;

140 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

146 
pxOldSwôchISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 );

150 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

152 #if–
c⁄figUSE_PREEMPTION
 == 1 )

155 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vPªem±iveTick
 );

160 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vN⁄Pªem±iveTick
 );

164 
	`¥vSëTickFªquícy
–
c⁄figTICK_RATE_HZ
 );

167 if–
	`£tjmp
–
xJumpBuf
 ) != 0 )

169 
	`¥vExôFun˘i⁄
();

170 
xScheduÀrRu¬ög
 = 
pdFALSE
;

174 
xScheduÀrRu¬ög
 = 
pdTRUE
;

177 
	`p‹tFIRST_CONTEXT
();

180  
xScheduÀrRu¬ög
;

181 
	}
}

186 #if–
c⁄figUSE_PREEMPTION
 == 1 )

187 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

190 
	`vTaskIn¸emítTick
();

193 
	`p‹tSWITCH_CONTEXT
();

196 
	`p‹tRESET_PIC
();

197 
	}
}

199 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

203 
	`vTaskIn¸emítTick
();

204 
	`p‹tRESET_PIC
();

205 
	}
}

209 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

212 
	`p‹tSWITCH_CONTEXT
();

213 
	}
}

216 
	$vP‹tEndScheduÀr
( )

221 
	`l⁄gjmp
–
xJumpBuf
, 1 );

222 
	}
}

225 
	$¥vExôFun˘i⁄
( )

227 c⁄° 
usTimîDißbÀ
 = 0x0000;

228 
usTimî0C⁄åﬁ
;

232 
	`p‹tDISABLE_INTERRUPTS
();

233 if–
xScheduÀrRu¬ög
 =
pdTRUE
 )

237 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
pxOldSwôchISR
 );

243 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_1_CONTROL_REGISTER
, 
usTimîDißbÀ
 );

246 
usTimî0C⁄åﬁ
 = 
	`p‹tINPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
 );

247 
usTimî0C⁄åﬁ
 |
p‹tTIMER_INTERRUPT_ENABLE
;

248 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
, 
usTimî0C⁄åﬁ
 );

251 
	`p‹tENABLE_INTERRUPTS
();

252 
	}
}

255 
	$¥vSëTickFªquícy
–
ulTickR©eHz
 )

257 c⁄° 
usMaxCou¡Regi°î
 = 0xff5a;

258 c⁄° 
usTimîPri‹ôyRegi°î
 = 0xff32;

259 c⁄° 
usTimîE«bÀ
 = 0xC000;

260 c⁄° 
usRëriggî
 = 0x0001;

261 c⁄° 
usTimîHighPri‹ôy
 = 0x0000;

262 
usTimî0C⁄åﬁ
;

266 c⁄° 
ulClockFªquícy
 = ( ) 0x7f31a0UL;

268 
ulTimîCou¡
 = 
ulClockFªquícy
 / 
ulTickR©eHz
;

270 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_1_CONTROL_REGISTER
, 
usTimîE«bÀ
 | 
p‹tTIMER_INTERRUPT_ENABLE
 | 
usRëriggî
 );

271 
	`p‹tOUTPUT_WORD
–
usMaxCou¡Regi°î
, ( Ë
ulTimîCou¡
 );

272 
	`p‹tOUTPUT_WORD
–
usTimîPri‹ôyRegi°î
, 
usTimîHighPri‹ôy
 );

275 
usTimî0C⁄åﬁ
 = 
	`p‹tINPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
 );

276 
usTimî0C⁄åﬁ
 &~
p‹tTIMER_INTERRUPT_ENABLE
;

277 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
, 
usTimî0C⁄åﬁ
 );

278 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/Flsh186/prtmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

81 
	#p‹tCHAR
 

	)

82 
	#p‹tFLOAT
 

	)

83 
	#p‹tDOUBLE
 

	)

84 
	#p‹tLONG
 

	)

85 
	#p‹tSHORT
 

	)

86 
	#p‹tSTACK_TYPE
 
p‹tSHORT


	)

87 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

89 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

90 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

91 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

93 
	tp‹tLONG
 
	tp‹tTickTy≥
;

94 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

99 
	#p‹tENTER_CRITICAL
(Ë
__asm
{ 
pushf
 } \

100 
__asm
{ 
˛i
 } \

101 

	)

102 
	#p‹tEXIT_CRITICAL
(Ë
__asm
{ 
p›f
 }

	)

104 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
{ 
˛i
 }

	)

106 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
{ 
°i
 }

	)

110 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

111 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

112 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

113 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

114 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

115 
	#p‹tBYTE_ALIGNMENT
 2

	)

116 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

120 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

121 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

122 
	#p‹tINPUT_WORD
–
xAddr
 ) 
	`öpw
–xAdd∏)

	)

123 
	#p‹tOUTPUT_WORD
–
xAddr
, 
usVÆue
 ) 
	`ouçw
–xAddr, usVÆuê)

	)

128 
	#p‹tTASK_FUNCTION_PROTO
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

129 
	#p‹tTASK_FUNCTION
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/PC/port.c

79 
	~<°dlib.h
>

80 
	~<dos.h
>

81 
	~<£tjmp.h
>

83 
	~"FªeRTOS.h
"

84 
	~"èsk.h
"

85 
	~"p‹èsm.h
"

94 
	#p‹tTIMER_INT_NUMBER
 0x08

	)

97 
¥vSëTickFªquícy
–
ulTickR©eHz
 );

100 
¥vExôFun˘i⁄
( );

105 
¥vP‹tRe£tPIC
( );

109 #if–
c⁄figUSE_PREEMPTION
 == 1 )

112 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

116 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

120 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

124 
¥vSëTickFªquícyDeÁu…
( );

129 
	gsDOSTickCou¡î
;

132 
p‹tBASE_TYPE
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

135 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISR
 )();

138 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISRPlus1
 )();

141 
jmp_buf
 
	gxJumpBuf
;

146 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

148 
pxISR
 
pxOrigöÆTickISR
;

154 
pxOldSwôchISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 );

155 
pxOrigöÆTickISR
 = 
	`_dos_gëve˘
–
p‹tTIMER_INT_NUMBER
 );

156 
pxOldSwôchISRPlus1
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 + 1 );

158 
	`¥vSëTickFªquícy
–
c⁄figTICK_RATE_HZ
 );

162 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

166 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
 + 1, 
pxOrigöÆTickISR
 );

170 #if–
c⁄figUSE_PREEMPTION
 == 1 )

173 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vPªem±iveTick
 );

178 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vN⁄Pªem±iveTick
 );

185 
sDOSTickCou¡î
 = 
p‹tTICKS_PER_DOS_TICK
;

188 if–
	`£tjmp
–
xJumpBuf
 ) != 0 )

190 
	`¥vExôFun˘i⁄
();

191 
xScheduÀrRu¬ög
 = 
pdFALSE
;

195 
xScheduÀrRu¬ög
 = 
pdTRUE
;

198 
	`p‹tFIRST_CONTEXT
();

201  
xScheduÀrRu¬ög
;

202 
	}
}

207 #if–
c⁄figUSE_PREEMPTION
 == 1 )

208 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

211 
	`vTaskIn¸emítTick
();

214 
	`p‹tSWITCH_CONTEXT
();

217 
	`¥vP‹tRe£tPIC
();

218 
	}
}

220 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

224 
	`vTaskIn¸emítTick
();

225 
	`¥vP‹tRe£tPIC
();

226 
	}
}

230 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

233 
	`p‹tSWITCH_CONTEXT
();

234 
	}
}

237 
	$¥vP‹tRe£tPIC
( )

243 --
sDOSTickCou¡î
;

244 if–
sDOSTickCou¡î
 <= 0 )

246 
sDOSTickCou¡î
 = ( Ë
p‹tTICKS_PER_DOS_TICK
;

247 
__asm
{ 
p‹tSWITCH_INT_NUMBER
 + 1 };

253 
__asm


255 
mov
 
Æ
, 20
H


256 
out
 20
H
, 
Æ


259 
	}
}

262 
	$vP‹tEndScheduÀr
( )

267 
	`l⁄gjmp
–
xJumpBuf
, 1 );

268 
	}
}

271 
	$¥vExôFun˘i⁄
( )

273 –
__öãºu±
 
__Ár
 *
pxOrigöÆTickISR
 )();

277 
	`p‹tDISABLE_INTERRUPTS
();

278 if–
xScheduÀrRu¬ög
 =
pdTRUE
 )

281 
pxOrigöÆTickISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 + 1 );

282 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
pxOrigöÆTickISR
 );

283 
	`¥vSëTickFªquícyDeÁu…
();

287 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
pxOldSwôchISR
 );

288 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
 + 1, 
pxOldSwôchISRPlus1
 );

292 
	`p‹tENABLE_INTERRUPTS
();

293 
	}
}

296 
	$¥vSëTickFªquícy
–
ulTickR©eHz
 )

298 c⁄° 
usPIT_MODE
 = ( ) 0x43;

299 c⁄° 
usPIT0
 = ( ) 0x40;

300 c⁄° 
ulPIT_CONST
 = ( ) 1193180UL;

301 c⁄° 
us8254_CTR0_MODE3
 = ( ) 0x36;

302 
ulOuçut
;

305 
	`p‹tOUTPUT_BYTE
–
usPIT_MODE
, 
us8254_CTR0_MODE3
 );

306 
ulOuçut
 = 
ulPIT_CONST
 / 
ulTickR©eHz
;

307 
	`p‹tOUTPUT_BYTE
–
usPIT0
, ( )–
ulOuçut
 & ( ) 0xff ) );

308 
ulOuçut
 >>= 8;

309 
	`p‹tOUTPUT_BYTE
–
usPIT0
, ( Ë–
ulOuçut
 & ( ) 0xff ) );

310 
	}
}

313 
	$¥vSëTickFªquícyDeÁu…
( )

315 c⁄° 
usPIT_MODE
 = ( ) 0x43;

316 c⁄° 
usPIT0
 = ( ) 0x40;

317 c⁄° 
us8254_CTR0_MODE3
 = ( ) 0x36;

319 
	`p‹tOUTPUT_BYTE
–
usPIT_MODE
, 
us8254_CTR0_MODE3
 );

320 
	`p‹tOUTPUT_BYTE
–
usPIT0
,0 );

321 
	`p‹tOUTPUT_BYTE
–
usPIT0
,0 );

322 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/PC/prtmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

81 
	#p‹tCHAR
 

	)

82 
	#p‹tFLOAT
 

	)

83 
	#p‹tDOUBLE
 

	)

84 
	#p‹tLONG
 

	)

85 
	#p‹tSHORT
 

	)

86 
	#p‹tSTACK_TYPE
 
p‹tSHORT


	)

87 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

89 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

90 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

91 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

93 
	tp‹tLONG
 
	tp‹tTickTy≥
;

94 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

99 
	#p‹tENTER_CRITICAL
(Ë
__asm
{ 
pushf
 } \

100 
__asm
{ 
˛i
 } \

101 

	)

102 
	#p‹tEXIT_CRITICAL
(Ë
__asm
{ 
p›f
 }

	)

104 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
{ 
˛i
 }

	)

106 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
{ 
°i
 }

	)

110 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

111 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

112 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

113 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

114 
	#p‹tDOS_TICK_RATE
 ( 18.20648 )

	)

115 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

116 
	#p‹tTICKS_PER_DOS_TICK
 ( ( 
p‹tSHORT
 ) ( ( ( 
p‹tDOUBLE
 ) 
c⁄figTICK_RATE_HZ
 / 
p‹tDOS_TICK_RATE
 ) + 0.5 ) )

	)

117 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

118 
	#p‹tBYTE_ALIGNMENT
 ( 2 )

	)

122 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

123 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

128 
	#p‹tTASK_FUNCTION_PROTO
–
vTaskFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*pvP¨amëî†)

	)

129 
	#p‹tTASK_FUNCTION
–
vTaskFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*pvP¨amëî†)

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/common/portasm.h

67 #i‚de‡
PORT_ASM_H


68 
	#PORT_ASM_H


	)

70 
	ttskTCB
;

71 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

72 
vTaskSwôchC⁄ãxt
( );

79 
p‹tSWITCH_CONTEXT
( );

86 
p‹tFIRST_CONTEXT
( );

94 
	#p‹tSWITCH_CONTEXT
() \

95 
asm
 { 
mov
 
ax
, 
£g
 
pxCuºítTCB
 } \

96 
asm
 { 
mov
 
ds
, 
ax
 } \

97 
asm
 { 
Às
 
bx
, 
pxCuºítTCB
 } \

98 
asm
 { 
mov
 
es
:0x2[ 
bx
 ], 
ss
 } \

99 
asm
 { 
mov
 
es
:[ 
bx
 ], 
•
 } \

100 
asm
 { 
ˇŒ
 
Ár
 
±r
 
vTaskSwôchC⁄ãxt
 } \

101 
asm
 { 
mov
 
ax
, 
£g
 
pxCuºítTCB
 } \

102 
asm
 { 
mov
 
ds
, 
ax
 } \

103 
asm
 { 
Às
 
bx
, 
dw‹d
 
±r
 
pxCuºítTCB
 } \

104 
asm
 { 
mov
 
ss
, 
es
:[ 
bx
 + 2 ] } \

105 
asm
 { 
mov
 
•
, 
es
:[ 
bx
 ] }

	)

107 
	#p‹tFIRST_CONTEXT
() \

108 
__asm
 { 
mov
 
ax
, 
£g
 
pxCuºítTCB
 } \

109 
__asm
 { 
mov
 
ds
, 
ax
 } \

110 
__asm
 { 
Às
 
bx
, 
dw‹d
 
±r
 
pxCuºítTCB
 } \

111 
__asm
 { 
mov
 
ss
, 
es
:[ 
bx
 + 2 ] } \

112 
__asm
 { 
mov
 
•
, 
es
:[ 
bx
 ] } \

113 
__asm
 { 
p›
 
bp
 } \

114 
__asm
 { 
p›
 
di
 } \

115 
__asm
 { 
p›
 
si
 } \

116 
__asm
 { 
p›
 
ds
 } \

117 
__asm
 { 
p›
 
es
 } \

118 
__asm
 { 
p›
 
dx
 } \

119 
__asm
 { 
p›
 
cx
 } \

120 
__asm
 { 
p›
 
bx
 } \

121 
__asm
 { 
p›
 
ax
 } \

122 
__asm
 { 
úë
 }

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/common/portcomn.c

80 
	~<dos.h
>

81 
	~<°dlib.h
>

82 
	~"FªeRTOS.h
"

87 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

89 
p‹tSTACK_TYPE
 
DS_Reg
 = 0;

94 *
pxT›OfSèck
 = 0x1111;

95 
pxT›OfSèck
--;

96 *
pxT›OfSèck
 = 0x2222;

97 
pxT›OfSèck
--;

98 *
pxT›OfSèck
 = 0x3333;

99 
pxT›OfSèck
--;

100 *
pxT›OfSèck
 = 0x4444;

101 
pxT›OfSèck
--;

102 *
pxT›OfSèck
 = 0x5555;

103 
pxT›OfSèck
--;

112 *
pxT›OfSèck
 = 
	`FP_SEG
–
pvP¨amëîs
 );

113 
pxT›OfSèck
--;

114 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

115 
pxT›OfSèck
--;

116 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

117 
pxT›OfSèck
--;

118 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

119 
pxT›OfSèck
--;

122 *
pxT›OfSèck
 = 
p‹tINITIAL_SW
;

123 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

125 
pxT›OfSèck
--;

126 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

127 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xAAAA;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xBBBB;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xCCCC;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xDDDD;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xEEEE;

141 
pxT›OfSèck
--;

144 
__asm
{ 
MOV
 
DS_Reg
, 
DS
 };

146 *
pxT›OfSèck
 = 
DS_Reg
;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0123;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xDDDD;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xBBBB;

156  
pxT›OfSèck
;

157 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CCS/MSP430X/data_model.h

54 .
$DEFINED
–
__LARGE_DATA_MODEL__
 )

55 .
	gdeföe
 "pushm.a", 
	gpushm_x


56 .
	gdeföe
 "p›m.a", 
	gp›m_x


57 .
	gdeföe
 "push.a", 
	gpush_x


58 .
	gdeföe
 "p›.a", 
	gp›_x


59 .
	gdeföe
 "mov.a", 
	gmov_x


61 .
	gdeföe
 "pushm.w", 
	gpushm_x


62 .
	gdeföe
 "p›m.w", 
	gp›m_x


63 .
	gdeföe
 "push.w", 
	gpush_x


64 .
	gdeföe
 "p›.w", 
	gp›_x


65 .
	gdeföe
 "mov.w", 
	gmov_x


66 .
	gídif


68 .
$DEFINED
–
__LARGE_CODE_MODEL__
 )

69 .
	gdeföe
 "ˇŒa", 
	gˇŒ_x


70 .
	gdeföe
 "ªè", 
	gªt_x


72 .
	gdeföe
 "ˇŒ", 
	gˇŒ_x


73 .
	gdeföe
 "ªt", 
	gªt_x


74 .
	gídif


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CCS/MSP430X/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

77 
	#p‹tACLK_FREQUENCY_HZ
 ( ( 
p‹tTickTy≥
 ) 32768 )

	)

78 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( Ë10 )

	)

79 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
p‹tSTACK_TYPE
 ) 0x08 )

	)

83 
	ttskTCB
;

84 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

94 vﬁ©ûê
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

102 
vP‹tSëupTimîI¡îru±
( );

111 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

113 *
pusT›OfSèck
;

114 *
pulT›OfSèck
, 
ulTemp
;

130 if––
pxCode
 ) == ( ) )

132 
pusT›OfSèck
 = ( * ) 
pxT›OfSèck
;

133 
ulTemp
 = ( Ë
pxCode
;

134 *
pusT›OfSèck
 = ( Ë
ulTemp
;

139 
pusT›OfSèck
 = ( * ) 
pxT›OfSèck
;

140 
pusT›OfSèck
--;

141 
pulT›OfSèck
 = ( * ) 
pusT›OfSèck
;

142 *
pulT›OfSèck
 = ( Ë
pxCode
;

145 
pusT›OfSèck
--;

146 *
pusT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

147 
pusT›OfSèck
 -––
p‹tSTACK_TYPE
 ) / 2 );

150 
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 * ) 
pusT›OfSèck
;

153 #ifde‡
PRELOAD_REGISTER_VALUES


154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xffff;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xeeee;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xdddd;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xbbbb;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaa;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x9999;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x8888;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x5555;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x6666;

173 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x5555;

175 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x4444;

177 
pxT›OfSèck
--;

179 
pxT›OfSèck
 -= 3;

180 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

181 
pxT›OfSèck
 -= 9;

187 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

191  
pxT›OfSèck
;

192 
	}
}

195 
	$vP‹tEndScheduÀr
( )

199 
	}
}

205 
	$vP‹tSëupTimîI¡îru±
( )

207 
	`vAµliˇti⁄SëupTimîI¡îru±
();

208 
	}
}

211 #¥agm®
ve˘‹
=
c⁄figTICK_VECTOR


212 
öãºu±
 
	$vTickISRE¡ry
( )

214 
	`vP‹tTickISR
( );

216 #i‡
c⁄figUSE_PREEMPTION
 == 1

217 
	`vP‹tPªem±iveTickISR
( );

218 
	`vP‹tPªem±iveTickISR
();

220 
	`vP‹tCo›î©iveTickISR
( );

221 
	`vP‹tCo›î©iveTickISR
();

223 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CCS/MSP430X/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

81 
	~"m•430.h
"

84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

92 #ifde‡
__LARGE_DATA_MODEL__


93 
	#p‹tSTACK_TYPE
 

	)

95 
	#p‹tSTACK_TYPE
 

	)

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

102 
	tp‹tLONG
 
	tp‹tTickTy≥
;

103 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

109 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`_dißbÀ_öãºu±
(); 
	`_n›
()

	)

110 
	#p‹tENABLE_INTERRUPTS
(Ë
	`_íabÀ_öãºu±
()

	)

114 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSHORT
 ) 0 )

	)

116 
	#p‹tENTER_CRITICAL
() \

118 vﬁ©ûê
usCrôiˇlNe°ög
; \

120 
	`p‹tDISABLE_INTERRUPTS
(); \

125 
usCrôiˇlNe°ög
++; \

126 }

	)

128 
	#p‹tEXIT_CRITICAL
() \

130 vﬁ©ûê
usCrôiˇlNe°ög
; \

132 if–
usCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

135 
usCrôiˇlNe°ög
--; \

139 if–
usCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

141 
	`p‹tENABLE_INTERRUPTS
(); \

144 }

	)

152 
vP‹tYõld
( );

153 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

157 
	#p‹tBYTE_ALIGNMENT
 2

	)

158 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

159 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

160 
	#p‹tNOP
(Ë
	`__no_›î©i⁄
()

	)

164 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

165 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

167 
vTaskSwôchC⁄ãxt
( );

168 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x ) 
	`vP‹tYõld
()

	)

170 
vAµliˇti⁄SëupTimîI¡îru±
( );

174 
	#p‹tLU_PRINTF_SPECIFIER_REQUIRED


	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/ColdFire_V1/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

72 
	#p‹tINITIAL_FORMAT_VECTOR
 ( ( 
p‹tSTACK_TYPE
 ) 0x4000 )

	)

75 
	#p‹tINITIAL_STATUS_REGISTER
 ( ( 
p‹tSTACK_TYPE
 ) 0x2000)

	)

78 
	#p‹tPRESCALE_VALUE
 ( ( Ë10 )

	)

81 
	#p‹tRTC_CLOCK_HZ
 ( ( Ë1000 )

	)

83 
asm
 
öãºu±
 
Ve˘‹Numbî_VL1swi
 
vP‹tYõldISR
( );

84 
¥vSëupTimîI¡îru±
( );

88 
	gulCrôiˇlNe°ög
 = 0x9999UL;

92 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 * 
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

95 
ulOrigöÆA5
;

97 
__asm
{ 
MOVE
.
L
 
A5
, 
ulOrigöÆA5
 };

100 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
) 0xDEADBEEF;

101 
pxT›OfSèck
--;

104 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

105 
pxT›OfSèck
--;

107 *
pxT›OfSèck
 = ( 
p‹tINITIAL_FORMAT_VECTOR
 << 16UL ) | ( 
p‹tINITIAL_STATUS_REGISTER
 );

108 
pxT›OfSèck
--;

110 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0;

111 
pxT›OfSèck
 -= 14;

114 *–
pxT›OfSèck
 + 8 ) = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

117 *–
pxT›OfSèck
 + 13 ) = 
ulOrigöÆA5
;

119  
pxT›OfSèck
;

120 
	}
}

123 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

125 
	`vP‹tSèπFú°Task
( );

127 
ulCrôiˇlNe°ög
 = 0UL;

130 
	`¥vSëupTimîI¡îru±
();

133 
	`vP‹tSèπFú°Task
();

135  
pdFALSE
;

136 
	}
}

139 
	$¥vSëupTimîI¡îru±
( )

142 
RTCSC
 |= 8;

145 
RTCMOD
 = 
p‹tRTC_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

149 
RTCSC_RTIE
 = 1;

150 
	}
}

153 
	$vP‹tEndScheduÀr
( )

156 
	}
}

159 
	$vP‹tE¡îCrôiˇl
( )

161 if–
ulCrôiˇlNe°ög
 == 0UL )

167 
	`p‹tDISABLE_INTERRUPTS
();

168 if–
INTC_FRC
 == 0UL )

173 
	`p‹tENABLE_INTERRUPTS
();

177 
ulCrôiˇlNe°ög
++;

178 
	}
}

181 
	$vP‹tExôCrôiˇl
( )

183 
ulCrôiˇlNe°ög
--;

184 if–
ulCrôiˇlNe°ög
 == 0 )

186 
	`p‹tENABLE_INTERRUPTS
();

188 
	}
}

191 
	$vP‹tYõldH™dÀr
( )

193 
ulSavedI¡îru±Mask
;

195 
ulSavedI¡îru±Mask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

198 
INTC_CFRC
 = 0x3E;

199 
	`vTaskSwôchC⁄ãxt
();

201 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulSavedI¡îru±Mask
 );

202 
	}
}

205 
öãºu±
 
Ve˘‹Numbî_Vπc
 
	$vP‹tTickISR
( )

207 
ulSavedI¡îru±Mask
;

210 
RTCSC
 |
RTCSC_RTIF_MASK
;

213 
ulSavedI¡îru±Mask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

215 
	`vTaskIn¸emítTick
();

217 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulSavedI¡îru±Mask
 );

221 #i‡
c⁄figUSE_PREEMPTION
 == 1

223 
	`èskYIELD
();

226 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/ColdFire_V1/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 

	)

91 
	#p‹tBASE_TYPE
 

	)

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

95 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

97 
	tp‹tLONG
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

103 
	#p‹tBYTE_ALIGNMENT
 4

	)

104 
	#p‹tSTACK_GROWTH
 -1

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

108 
p‹tLONG
 
ulP‹tSëIPL
( portLONG );

109 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

110 
	#p‹tENABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–0 )

	)

113 
vP‹tE¡îCrôiˇl
( );

114 
vP‹tExôCrôiˇl
( );

115 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

116 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

118 
p‹tBASE_TYPE
 
uxP‹tSëI¡îru±MaskFromISR
( );

119 
vP‹tCÀ¨I¡îru±MaskFromISR
–
p‹tBASE_TYPE
 );

120 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

121 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusRegi°î
 ) 
	`ulP‹tSëIPL
–uxSavedSètusRegi°î )

	)

126 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"n›" )

	)

129 
	#p‹tYIELD
(Ë
INTC_SFRC
 = 0x3E; 
	`p‹tNOP
();Ö‹tNOP();Ö‹tNOP();Ö‹tNOP();Ö‹tNOP()

	)

134 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
	`__©åibuã__
((
n‹ëu∫
))

	)

135 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

138 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed !
pdFALSE
 ) \

140 
	`p‹tYIELD
(); \

141 }

	)

144 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/ColdFire_V2/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

72 
	#p‹tINITIAL_FORMAT_VECTOR
 ( ( 
p‹tSTACK_TYPE
 ) 0x4000 )

	)

75 
	#p‹tINITIAL_STATUS_REGISTER
 ( ( 
p‹tSTACK_TYPE
 ) 0x2000)

	)

79 
	gulCrôiˇlNe°ög
 = 0x9999UL;

82 
	#p‹tSAVE_CONTEXT
() \

83 
Àa
.
	`l
 (-60, %
•
), %sp; \

84 
movem
.
l
 %
d0
-%
Â
, (%
•
); \

85 
move
.
l
 
pxCuºítTCB
, %
a0
; \

86 
move
.
l
 %
•
, (%
a0
);

	)

88 
	#p‹tRESTORE_CONTEXT
() \

89 
move
.
l
 
pxCuºítTCB
, %
a0
; \

90 
move
.
	`l
 (%
a0
), %
•
; \

91 
movem
.
	`l
 (%
•
), %
d0
-%
Â
; \

92 
Àa
.
l
 %
•
@(60), %sp; \

93 
πe


	)

99 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 * 
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

101 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

102 
pxT›OfSèck
--;

104 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
) 0xDEADBEEF;

105 
pxT›OfSèck
--;

108 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

109 
pxT›OfSèck
--;

111 *
pxT›OfSèck
 = ( 
p‹tINITIAL_FORMAT_VECTOR
 << 16UL ) | ( 
p‹tINITIAL_STATUS_REGISTER
 );

112 
pxT›OfSèck
--;

114 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0;

115 
pxT›OfSèck
 -= 14;

117  
pxT›OfSèck
;

118 
	}
}

121 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

123 
	`vP‹tSèπFú°Task
( );

125 
ulCrôiˇlNe°ög
 = 0UL;

128 
	`vAµliˇti⁄SëupI¡îru±s
();

131 
	`vP‹tSèπFú°Task
();

133  
pdFALSE
;

134 
	}
}

137 
	$vP‹tEndScheduÀr
( )

140 
	}
}

143 
	$vP‹tE¡îCrôiˇl
( )

145 if–
ulCrôiˇlNe°ög
 == 0UL )

151 
	`p‹tDISABLE_INTERRUPTS
();

152 if–
MCF_INTC0_INTFRCH
 == 0UL )

157 
	`p‹tENABLE_INTERRUPTS
();

161 
ulCrôiˇlNe°ög
++;

162 
	}
}

165 
	$vP‹tExôCrôiˇl
( )

167 
ulCrôiˇlNe°ög
--;

168 if–
ulCrôiˇlNe°ög
 == 0 )

170 
	`p‹tENABLE_INTERRUPTS
();

172 
	}
}

175 
	$vP‹tYõldH™dÀr
( )

177 
ulSavedI¡îru±Mask
;

179 
ulSavedI¡îru±Mask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

181 
MCF_INTC0_INTFRCL
 = 0;

182 
	`vTaskSwôchC⁄ãxt
();

183 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulSavedI¡îru±Mask
 );

184 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/ColdFire_V2/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 

	)

91 
	#p‹tBASE_TYPE
 

	)

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

95 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

97 
	tp‹tLONG
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

103 
	#p‹tBYTE_ALIGNMENT
 4

	)

104 
	#p‹tSTACK_GROWTH
 -1

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

107 
p‹tLONG
 
ulP‹tSëIPL
( portLONG );

108 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

109 
	#p‹tENABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–0 )

	)

112 
vP‹tE¡îCrôiˇl
( );

113 
vP‹tExôCrôiˇl
( );

114 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

115 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

117 
p‹tBASE_TYPE
 
uxP‹tSëI¡îru±MaskFromISR
( );

118 
vP‹tCÀ¨I¡îru±MaskFromISR
–
p‹tBASE_TYPE
 );

119 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

120 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusRegi°î
 ) 
	`ulP‹tSëIPL
–uxSavedSètusRegi°î )

	)

126 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"n›" )

	)

129 
	#p‹tYIELD
(Ë
MCF_INTC0_INTFRCL
 = ( 1UL << 
c⁄figYIELD_INTERRUPT_VECTOR
 ); 
	`p‹tNOP
();Ö‹tNOP(Ë

	)

134 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
	`__©åibuã__
((
n‹ëu∫
))

	)

135 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

138 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed !
pdFALSE
 ) \

140 
	`p‹tYIELD
(); \

141 }

	)

144 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/HCS12/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

81 
¥vSëupTimîI¡îru±
( );

85 #¥agm®
CODE_SEG
 
__NEAR_SEG
 
NON_BANKED


88 
öãºu±
 
vP‹tYõld
( );

91 
öãºu±
 
vP‹tTickI¡îru±
( );

97 
p‹tBASE_TYPE
 
xB™kedSèπScheduÀr
( );

99 #¥agm®
CODE_SEG
 
DEFAULT


107 vﬁ©ûê
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xff;

114 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) *–(’‹tSTACK_TYPE *Ë(&
pxCode
) ) + 1 );

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) *–(’‹tSTACK_TYPE *Ë(&
pxCode
) ) + 0 );

139 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xff;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xee;

147 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xdd;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xcc;

153 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) *–(’‹tSTACK_TYPE *Ë(&
pvP¨amëîs
) ) + 0 );

157 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) *–(’‹tSTACK_TYPE *Ë(&
pvP¨amëîs
) ) + 1 );

161 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

166 
pxT›OfSèck
--;

168 #ifde‡
BANKED_MODEL


170 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( ( Ë
pxCode
 );

171 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

178  
pxT›OfSèck
;

179 
	}
}

182 
	$vP‹tEndScheduÀr
( )

185 
	}
}

188 
	$¥vSëupTimîI¡îru±
( )

190 
	`TickTimî_SëFªqHz
–
c⁄figTICK_RATE_HZ
 );

191 
	`TickTimî_E«bÀ
();

192 
	}
}

195 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

203  
	`xB™kedSèπScheduÀr
();

204 
	}
}

207 #¥agm®
CODE_SEG
 
__NEAR_SEG
 
NON_BANKED


209 
p‹tBASE_TYPE
 
	$xB™kedSèπScheduÀr
( )

213 
	`¥vSëupTimîI¡îru±
();

216 
	`p‹tRESTORE_CONTEXT
();

219 
	`__asm
( "rti" );

222  
pdFALSE
;

223 
	}
}

234 
öãºu±
 
	$vP‹tYõld
( )

236 
	`p‹tSAVE_CONTEXT
();

237 
	`vTaskSwôchC⁄ãxt
();

238 
	`p‹tRESTORE_CONTEXT
();

239 
	}
}

247 
öãºu±
 
	$vP‹tTickI¡îru±
( )

249 #i‡
c⁄figUSE_PREEMPTION
 == 1

252 
	`p‹tSAVE_CONTEXT
();

255 
	`vTaskIn¸emítTick
();

259 
	`vTaskSwôchC⁄ãxt
();

261 
TFLG1
 = 1;

265 
	`p‹tRESTORE_CONTEXT
();

269 
	`vTaskIn¸emítTick
();

270 
TFLG1
 = 1;

273 
	}
}

275 #¥agm®
CODE_SEG
 
DEFAULT


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/HCS12/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

82 
	#p‹tCHAR
 

	)

83 
	#p‹tFLOAT
 

	)

84 
	#p‹tDOUBLE
 

	)

85 
	#p‹tLONG
 

	)

86 
	#p‹tSHORT
 

	)

87 
	#p‹tSTACK_TYPE
 
p‹tCHAR


	)

88 
	#p‹tBASE_TYPE
 

	)

90 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

91 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

92 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

94 
	tp‹tLONG
 
	tp‹tTickTy≥
;

95 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

100 
	#p‹tBYTE_ALIGNMENT
 1

	)

101 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

102 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

103 
	#p‹tYIELD
(Ë
	`__asm
–"swi" );

	)

104 
	#p‹tNOP
(Ë
	`__asm
–"n›" );

	)

108 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
–"˛i" )

	)

109 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
–"£i" )

	)

117 
	#p‹tENTER_CRITICAL
() \

119 vﬁ©ûê
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

121 
	`p‹tDISABLE_INTERRUPTS
(); \

122 
uxCrôiˇlNe°ög
++; \

123 }

	)

130 
	#p‹tEXIT_CRITICAL
() \

132 vﬁ©ûê
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

134 
uxCrôiˇlNe°ög
--; \

135 if–
uxCrôiˇlNe°ög
 == 0 ) \

137 
	`p‹tENABLE_INTERRUPTS
(); \

139 }

	)

154 #ifde‡
BANKED_MODEL


160 
	#p‹tRESTORE_CONTEXT
() \

162 vﬁ©ûê* 
pxCuºítTCB
; \

163 vﬁ©ûê
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

165 
	`__asm
( "ldxÖxCurrentTCB" ); \

166 
	`__asm
( "lds 0, x" ); \

167 
	`__asm
( "pula" ); \

168 
	`__asm
( "staa uxCriticalNesting" ); \

169 
	`__asm
( "pula" ); \

170 
	`__asm
( "staa 0x30" ); \

171 }

	)

178 
	#p‹tSAVE_CONTEXT
() \

180 vﬁ©ûê* 
pxCuºítTCB
; \

181 vﬁ©ûê
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

183 
	`__asm
( "ldaa 0x30" ); \

184 
	`__asm
( "psha" ); \

185 
	`__asm
( "ldaa uxCriticalNesting" ); \

186 
	`__asm
( "psha" ); \

187 
	`__asm
( "ldxÖxCurrentTCB" ); \

188 
	`__asm
( "sts 0, x" ); \

189 }

	)

197 
	#p‹tRESTORE_CONTEXT
() \

199 vﬁ©ûê* 
pxCuºítTCB
; \

200 vﬁ©ûê
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

202 
	`__asm
( "ldxÖxCurrentTCB" ); \

203 
	`__asm
( "lds 0, x" ); \

204 
	`__asm
( "pula" ); \

205 
	`__asm
( "staa uxCriticalNesting" ); \

206 }

	)

208 
	#p‹tSAVE_CONTEXT
() \

210 vﬁ©ûê* 
pxCuºítTCB
; \

211 vﬁ©ûê
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

213 
	`__asm
( "ldaa uxCriticalNesting" ); \

214 
	`__asm
( "psha" ); \

215 
	`__asm
( "ldxÖxCurrentTCB" ); \

216 
	`__asm
( "sts 0, x" ); \

217 }

	)

226 
	#p‹tTASK_SWITCH_FROM_ISR
() \

227 
	`p‹tSAVE_CONTEXT
(); \

228 
	`vTaskSwôchC⁄ãxt
(); \

229 
	`p‹tRESTORE_CONTEXT
();

	)

233 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

234 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91FR40008/port.c

78 
	~<°dlib.h
>

81 
	~"FªeRTOS.h
"

82 
	~"èsk.h
"

85 
	~"AT91R40008.h
"

86 
	~"pio.h
"

87 
	~"aic.h
"

88 
	~"tc.h
"

91 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

92 
	#p‹tTHUMB_MODE_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x20 )

	)

93 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

94 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSTACK_TYPE
 ) 0 )

	)

95 
	#p‹tTICK_PRIORITY_6
 ( 6 )

	)

99 
¥vSëupTimîI¡îru±
( );

105 
vP‹tISRSèπFú°Task
( );

115 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

117 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

119 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

123 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

132 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaaaaaa;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

161 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

166 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

172 #ifde‡
THUMB_INTERWORK


175 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

179 
pxT›OfSèck
--;

185 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_SECTION_NESTING
;

187  
pxT›OfSèck
;

188 
	}
}

191 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

195 
	`¥vSëupTimîI¡îru±
();

198 
	`vP‹tISRSèπFú°Task
();

202 
	}
}

205 
	$vP‹tEndScheduÀr
( )

209 
	}
}

215 
	$¥vSëupTimîI¡îru±
( )

217 vﬁ©ûê
ulDummy
;

220 
AT91C_BASE_PS
->
PS_PCER
 = 
p‹tTIMER_CLK_ENABLE_BIT
;

223 
p‹tTIMER_REG_BASE_PTR
->
TC_CCR
 = 
TC_CLKDIS
;

226 
p‹tTIMER_REG_BASE_PTR
->
TC_IDR
 = 0xFFFFFFFF;

229 
ulDummy
 = 
p‹tTIMER_REG_BASE_PTR
->
TC_SR
;

234 #i‡
c⁄figUSE_PREEMPTION
 == 1

236 –
vPªem±iveTick
 )( );

237 
AT91C_BASE_AIC
->
AIC_SVR
[
p‹tTIMER_AIC_CHANNEL
] = ( Ë
vPªem±iveTick
;

241 –
vN⁄Pªem±iveTick
 )( );

242 
AT91C_BASE_AIC
->
AIC_SVR
[
p‹tTIMER_AIC_CHANNEL
] = ( Ë
vN⁄Pªem±iveTick
;

247 
AT91C_BASE_AIC
->
AIC_SMR
[ 
p‹tTIMER_AIC_CHANNEL
 ] = 
AIC_SRCTYPE_INT_LEVEL_SENSITIVE
 | 
p‹tTICK_PRIORITY_6
;

252 
p‹tTIMER_REG_BASE_PTR
->
TC_IER
 = 
TC_CPCS
;

255 
AT91C_BASE_AIC
->
AIC_IECR
 = (1 << 
p‹tTIMER_AIC_CHANNEL
);

258 if–(
c⁄figCPU_CLOCK_HZ
 / (
c⁄figTICK_RATE_HZ
 * 2) ) <= 0xFFFF )

262 
p‹tTIMER_REG_BASE_PTR
->
TC_CMR
 = 
TC_WAVE
 | 
TC_CLKS_MCK2
 | 
TC_BURST_NONE
 | 
TC_CPCTRG
;

263 
p‹tTIMER_REG_BASE_PTR
->
TC_RC
 = 
c⁄figCPU_CLOCK_HZ
 / (
c⁄figTICK_RATE_HZ
 * 2);

269 
p‹tTIMER_REG_BASE_PTR
->
TC_CMR
 = 
TC_WAVE
 | 
TC_CLKS_MCK8
 | 
TC_BURST_NONE
 | 
TC_CPCTRG
;

270 
p‹tTIMER_REG_BASE_PTR
->
TC_RC
 = 
c⁄figCPU_CLOCK_HZ
 / (
c⁄figTICK_RATE_HZ
 * 8);

274 
p‹tTIMER_REG_BASE_PTR
->
TC_CCR
 = 
TC_SWTRG
 | 
TC_CLKEN
;

275 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91FR40008/portISR.c

83 
	~"FªeRTOS.h
"

84 
	~"èsk.h
"

87 
	#p‹tCLEAR_AIC_INTERRUPT
 ( ( Ë0 )

	)

90 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

91 vﬁ©ûê
	gulCrôiˇlNe°ög
 = 9999UL;

96 
	$vP‹tYõldPro˚ss‹
–Ë
	`__©åibuã__
((
	`öãºu±
("SWI"), 
«ked
));

102 
	`vP‹tISRSèπFú°Task
( );

105 
	$vP‹tISRSèπFú°Task
( )

109 
	`p‹tRESTORE_CONTEXT
();

110 
	}
}

121 
	$vP‹tYõldPro˚ss‹
( )

126 
asm
 volatile ( "ADD LR, LR, #4" );

129 
	`p‹tSAVE_CONTEXT
();

132 
	`vTaskSwôchC⁄ãxt
();

135 
	`p‹tRESTORE_CONTEXT
();

136 
	}
}

144 #i‡
c⁄figUSE_PREEMPTION
 == 0

148 
	$vN⁄Pªem±iveTick
–Ë
	`__©åibuã__
 ((
	`öãºu±
 ("IRQ")));

149 
	$vN⁄Pªem±iveTick
( )

151 vﬁ©ûê
ulDummy
;

154 
ulDummy
 = 
p‹tTIMER_REG_BASE_PTR
->
TC_SR
;

156 
	`vTaskIn¸emítTick
();

159 
AT91C_BASE_AIC
->
AIC_EOICR
 = 
p‹tCLEAR_AIC_INTERRUPT
;

160 
	}
}

166 
	$vPªem±iveTick
–Ë
	`__©åibuã__
((
«ked
));

167 
	$vPªem±iveTick
( )

170 
	`p‹tSAVE_CONTEXT
();

174 vﬁ©ûê
ulDummy
;

177 
ulDummy
 = 
p‹tTIMER_REG_BASE_PTR
->
TC_SR
;

181 
	`vTaskIn¸emítTick
();

182 
	`vTaskSwôchC⁄ãxt
();

185 
AT91C_BASE_AIC
->
AIC_EOICR
 = 
p‹tCLEAR_AIC_INTERRUPT
;

188 
	`p‹tRESTORE_CONTEXT
();

189 
	}
}

200 #ifde‡
THUMB_INTERWORK


202 
	$vP‹tDißbÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

203 
	$vP‹tE«bÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

205 
	$vP‹tDißbÀI¡îru±sFromThumb
( )

207 
asm
 volatile (

214 
	}
}

216 
	$vP‹tE«bÀI¡îru±sFromThumb
( )

218 
asm
 volatile (

225 
	}
}

233 
	$vP‹tE¡îCrôiˇl
( )

236 
asm
 volatile (

246 
ulCrôiˇlNe°ög
++;

247 
	}
}

249 
	$vP‹tExôCrôiˇl
( )

251 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

254 
ulCrôiˇlNe°ög
--;

258 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

261 
asm
 volatile (

269 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91FR40008/portmacro.h

90 #i‚de‡
PORTMACRO_H


91 
	#PORTMACRO_H


	)

93 #ifde‡
__˝lu•lus


108 
	#p‹tCHAR
 

	)

109 
	#p‹tFLOAT
 

	)

110 
	#p‹tDOUBLE
 

	)

111 
	#p‹tLONG
 

	)

112 
	#p‹tSHORT
 

	)

113 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

114 
	#p‹tBASE_TYPE
 

	)

116 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

117 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

118 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

120 
	tp‹tLONG
 
	tp‹tTickTy≥
;

121 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

126 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

127 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

128 
	#p‹tBYTE_ALIGNMENT
 8

	)

129 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"SWI 0" )

	)

130 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

137 
	#p‹tTIMER_REG_BASE_PTR
 
AT91C_BASE_TC0


	)

138 
	#p‹tTIMER_CLK_ENABLE_BIT
 
AT91C_PS_TC0


	)

139 
	#p‹tTIMER_AIC_CHANNEL
 ( ( 
p‹tLONG
 ) 4 )

	)

151 
	#p‹tRESTORE_CONTEXT
() \

153 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

154 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

157 
asm
 volatile ( \

183 –Ë
ulCrôiˇlNe°ög
; \

184 –Ë
pxCuºítTCB
; \

185 }

	)

188 
	#p‹tSAVE_CONTEXT
() \

190 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

191 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

194 
asm
 volatile ( \

230 –Ë
ulCrôiˇlNe°ög
; \

231 –Ë
pxCuºítTCB
; \

232 }

	)

234 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

245 #ifde‡
THUMB_INTERWORK


247 
vP‹tDißbÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

248 
vP‹tE«bÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

250 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tDißbÀI¡îru±sFromThumb
()

	)

251 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tE«bÀI¡îru±sFromThumb
()

	)

255 
	#p‹tDISABLE_INTERRUPTS
() \

256 
asm
 volatile ( \

261 "LDMIA SP!, {R0} " )

	)

263 
	#p‹tENABLE_INTERRUPTS
() \

264 
asm
 volatile ( \

269 "LDMIA SP!, {R0} " )

	)

273 
vP‹tE¡îCrôiˇl
( );

274 
vP‹tExôCrôiˇl
( );

276 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

277 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

282 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

283 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

285 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/AT91SAM7X256.h

46 #i‚de‡
AT91SAM7X256_H


47 
	#AT91SAM7X256_H


	)

49 vﬁ©ûê
	tAT91_REG
;

54 
	s_AT91S_SYS
 {

55 
AT91_REG
 
	mAIC_SMR
[32];

56 
AT91_REG
 
	mAIC_SVR
[32];

57 
AT91_REG
 
	mAIC_IVR
;

58 
AT91_REG
 
	mAIC_FVR
;

59 
AT91_REG
 
	mAIC_ISR
;

60 
AT91_REG
 
	mAIC_IPR
;

61 
AT91_REG
 
	mAIC_IMR
;

62 
AT91_REG
 
	mAIC_CISR
;

63 
AT91_REG
 
	mRe£rved0
[2];

64 
AT91_REG
 
	mAIC_IECR
;

65 
AT91_REG
 
	mAIC_IDCR
;

66 
AT91_REG
 
	mAIC_ICCR
;

67 
AT91_REG
 
	mAIC_ISCR
;

68 
AT91_REG
 
	mAIC_EOICR
;

69 
AT91_REG
 
	mAIC_SPU
;

70 
AT91_REG
 
	mAIC_DCR
;

71 
AT91_REG
 
	mRe£rved1
[1];

72 
AT91_REG
 
	mAIC_FFER
;

73 
AT91_REG
 
	mAIC_FFDR
;

74 
AT91_REG
 
	mAIC_FFSR
;

75 
AT91_REG
 
	mRe£rved2
[45];

76 
AT91_REG
 
	mDBGU_CR
;

77 
AT91_REG
 
	mDBGU_MR
;

78 
AT91_REG
 
	mDBGU_IER
;

79 
AT91_REG
 
	mDBGU_IDR
;

80 
AT91_REG
 
	mDBGU_IMR
;

81 
AT91_REG
 
	mDBGU_CSR
;

82 
AT91_REG
 
	mDBGU_RHR
;

83 
AT91_REG
 
	mDBGU_THR
;

84 
AT91_REG
 
	mDBGU_BRGR
;

85 
AT91_REG
 
	mRe£rved3
[7];

86 
AT91_REG
 
	mDBGU_CIDR
;

87 
AT91_REG
 
	mDBGU_EXID
;

88 
AT91_REG
 
	mDBGU_FNTR
;

89 
AT91_REG
 
	mRe£rved4
[45];

90 
AT91_REG
 
	mDBGU_RPR
;

91 
AT91_REG
 
	mDBGU_RCR
;

92 
AT91_REG
 
	mDBGU_TPR
;

93 
AT91_REG
 
	mDBGU_TCR
;

94 
AT91_REG
 
	mDBGU_RNPR
;

95 
AT91_REG
 
	mDBGU_RNCR
;

96 
AT91_REG
 
	mDBGU_TNPR
;

97 
AT91_REG
 
	mDBGU_TNCR
;

98 
AT91_REG
 
	mDBGU_PTCR
;

99 
AT91_REG
 
	mDBGU_PTSR
;

100 
AT91_REG
 
	mRe£rved5
[54];

101 
AT91_REG
 
	mPIOA_PER
;

102 
AT91_REG
 
	mPIOA_PDR
;

103 
AT91_REG
 
	mPIOA_PSR
;

104 
AT91_REG
 
	mRe£rved6
[1];

105 
AT91_REG
 
	mPIOA_OER
;

106 
AT91_REG
 
	mPIOA_ODR
;

107 
AT91_REG
 
	mPIOA_OSR
;

108 
AT91_REG
 
	mRe£rved7
[1];

109 
AT91_REG
 
	mPIOA_IFER
;

110 
AT91_REG
 
	mPIOA_IFDR
;

111 
AT91_REG
 
	mPIOA_IFSR
;

112 
AT91_REG
 
	mRe£rved8
[1];

113 
AT91_REG
 
	mPIOA_SODR
;

114 
AT91_REG
 
	mPIOA_CODR
;

115 
AT91_REG
 
	mPIOA_ODSR
;

116 
AT91_REG
 
	mPIOA_PDSR
;

117 
AT91_REG
 
	mPIOA_IER
;

118 
AT91_REG
 
	mPIOA_IDR
;

119 
AT91_REG
 
	mPIOA_IMR
;

120 
AT91_REG
 
	mPIOA_ISR
;

121 
AT91_REG
 
	mPIOA_MDER
;

122 
AT91_REG
 
	mPIOA_MDDR
;

123 
AT91_REG
 
	mPIOA_MDSR
;

124 
AT91_REG
 
	mRe£rved9
[1];

125 
AT91_REG
 
	mPIOA_PPUDR
;

126 
AT91_REG
 
	mPIOA_PPUER
;

127 
AT91_REG
 
	mPIOA_PPUSR
;

128 
AT91_REG
 
	mRe£rved10
[1];

129 
AT91_REG
 
	mPIOA_ASR
;

130 
AT91_REG
 
	mPIOA_BSR
;

131 
AT91_REG
 
	mPIOA_ABSR
;

132 
AT91_REG
 
	mRe£rved11
[9];

133 
AT91_REG
 
	mPIOA_OWER
;

134 
AT91_REG
 
	mPIOA_OWDR
;

135 
AT91_REG
 
	mPIOA_OWSR
;

136 
AT91_REG
 
	mRe£rved12
[85];

137 
AT91_REG
 
	mPIOB_PER
;

138 
AT91_REG
 
	mPIOB_PDR
;

139 
AT91_REG
 
	mPIOB_PSR
;

140 
AT91_REG
 
	mRe£rved13
[1];

141 
AT91_REG
 
	mPIOB_OER
;

142 
AT91_REG
 
	mPIOB_ODR
;

143 
AT91_REG
 
	mPIOB_OSR
;

144 
AT91_REG
 
	mRe£rved14
[1];

145 
AT91_REG
 
	mPIOB_IFER
;

146 
AT91_REG
 
	mPIOB_IFDR
;

147 
AT91_REG
 
	mPIOB_IFSR
;

148 
AT91_REG
 
	mRe£rved15
[1];

149 
AT91_REG
 
	mPIOB_SODR
;

150 
AT91_REG
 
	mPIOB_CODR
;

151 
AT91_REG
 
	mPIOB_ODSR
;

152 
AT91_REG
 
	mPIOB_PDSR
;

153 
AT91_REG
 
	mPIOB_IER
;

154 
AT91_REG
 
	mPIOB_IDR
;

155 
AT91_REG
 
	mPIOB_IMR
;

156 
AT91_REG
 
	mPIOB_ISR
;

157 
AT91_REG
 
	mPIOB_MDER
;

158 
AT91_REG
 
	mPIOB_MDDR
;

159 
AT91_REG
 
	mPIOB_MDSR
;

160 
AT91_REG
 
	mRe£rved16
[1];

161 
AT91_REG
 
	mPIOB_PPUDR
;

162 
AT91_REG
 
	mPIOB_PPUER
;

163 
AT91_REG
 
	mPIOB_PPUSR
;

164 
AT91_REG
 
	mRe£rved17
[1];

165 
AT91_REG
 
	mPIOB_ASR
;

166 
AT91_REG
 
	mPIOB_BSR
;

167 
AT91_REG
 
	mPIOB_ABSR
;

168 
AT91_REG
 
	mRe£rved18
[9];

169 
AT91_REG
 
	mPIOB_OWER
;

170 
AT91_REG
 
	mPIOB_OWDR
;

171 
AT91_REG
 
	mPIOB_OWSR
;

172 
AT91_REG
 
	mRe£rved19
[341];

173 
AT91_REG
 
	mPMC_SCER
;

174 
AT91_REG
 
	mPMC_SCDR
;

175 
AT91_REG
 
	mPMC_SCSR
;

176 
AT91_REG
 
	mRe£rved20
[1];

177 
AT91_REG
 
	mPMC_PCER
;

178 
AT91_REG
 
	mPMC_PCDR
;

179 
AT91_REG
 
	mPMC_PCSR
;

180 
AT91_REG
 
	mRe£rved21
[1];

181 
AT91_REG
 
	mPMC_MOR
;

182 
AT91_REG
 
	mPMC_MCFR
;

183 
AT91_REG
 
	mRe£rved22
[1];

184 
AT91_REG
 
	mPMC_PLLR
;

185 
AT91_REG
 
	mPMC_MCKR
;

186 
AT91_REG
 
	mRe£rved23
[3];

187 
AT91_REG
 
	mPMC_PCKR
[4];

188 
AT91_REG
 
	mRe£rved24
[4];

189 
AT91_REG
 
	mPMC_IER
;

190 
AT91_REG
 
	mPMC_IDR
;

191 
AT91_REG
 
	mPMC_SR
;

192 
AT91_REG
 
	mPMC_IMR
;

193 
AT91_REG
 
	mRe£rved25
[36];

194 
AT91_REG
 
	mRSTC_RCR
;

195 
AT91_REG
 
	mRSTC_RSR
;

196 
AT91_REG
 
	mRSTC_RMR
;

197 
AT91_REG
 
	mRe£rved26
[5];

198 
AT91_REG
 
	mRTTC_RTMR
;

199 
AT91_REG
 
	mRTTC_RTAR
;

200 
AT91_REG
 
	mRTTC_RTVR
;

201 
AT91_REG
 
	mRTTC_RTSR
;

202 
AT91_REG
 
	mPITC_PIMR
;

203 
AT91_REG
 
	mPITC_PISR
;

204 
AT91_REG
 
	mPITC_PIVR
;

205 
AT91_REG
 
	mPITC_PIIR
;

206 
AT91_REG
 
	mWDTC_WDCR
;

207 
AT91_REG
 
	mWDTC_WDMR
;

208 
AT91_REG
 
	mWDTC_WDSR
;

209 
AT91_REG
 
	mRe£rved27
[5];

210 
AT91_REG
 
	mVREG_MR
;

211 } 
	tAT91S_SYS
, *
	tAT91PS_SYS
;

217 
	s_AT91S_AIC
 {

218 
AT91_REG
 
	mAIC_SMR
[32];

219 
AT91_REG
 
	mAIC_SVR
[32];

220 
AT91_REG
 
	mAIC_IVR
;

221 
AT91_REG
 
	mAIC_FVR
;

222 
AT91_REG
 
	mAIC_ISR
;

223 
AT91_REG
 
	mAIC_IPR
;

224 
AT91_REG
 
	mAIC_IMR
;

225 
AT91_REG
 
	mAIC_CISR
;

226 
AT91_REG
 
	mRe£rved0
[2];

227 
AT91_REG
 
	mAIC_IECR
;

228 
AT91_REG
 
	mAIC_IDCR
;

229 
AT91_REG
 
	mAIC_ICCR
;

230 
AT91_REG
 
	mAIC_ISCR
;

231 
AT91_REG
 
	mAIC_EOICR
;

232 
AT91_REG
 
	mAIC_SPU
;

233 
AT91_REG
 
	mAIC_DCR
;

234 
AT91_REG
 
	mRe£rved1
[1];

235 
AT91_REG
 
	mAIC_FFER
;

236 
AT91_REG
 
	mAIC_FFDR
;

237 
AT91_REG
 
	mAIC_FFSR
;

238 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

241 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

242 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

243 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

244 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

245 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (() 0x0 << 5)

246 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (() 0x0 << 5)

247 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (() 0x1 << 5)

248 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (() 0x1 << 5)

249 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (() 0x2 << 5)

250 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (() 0x3 << 5)

252 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

253 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

255 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

256 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

257 

	)

261 
	s_AT91S_PDC
 {

262 
AT91_REG
 
	mPDC_RPR
;

263 
AT91_REG
 
	mPDC_RCR
;

264 
AT91_REG
 
	mPDC_TPR
;

265 
AT91_REG
 
	mPDC_TCR
;

266 
AT91_REG
 
	mPDC_RNPR
;

267 
AT91_REG
 
	mPDC_RNCR
;

268 
AT91_REG
 
	mPDC_TNPR
;

269 
AT91_REG
 
	mPDC_TNCR
;

270 
AT91_REG
 
	mPDC_PTCR
;

271 
AT91_REG
 
	mPDC_PTSR
;

272 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

275 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

276 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

277 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

278 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

280 

	)

284 
	s_AT91S_DBGU
 {

285 
AT91_REG
 
	mDBGU_CR
;

286 
AT91_REG
 
	mDBGU_MR
;

287 
AT91_REG
 
	mDBGU_IER
;

288 
AT91_REG
 
	mDBGU_IDR
;

289 
AT91_REG
 
	mDBGU_IMR
;

290 
AT91_REG
 
	mDBGU_CSR
;

291 
AT91_REG
 
	mDBGU_RHR
;

292 
AT91_REG
 
	mDBGU_THR
;

293 
AT91_REG
 
	mDBGU_BRGR
;

294 
AT91_REG
 
	mRe£rved0
[7];

295 
AT91_REG
 
	mDBGU_CIDR
;

296 
AT91_REG
 
	mDBGU_EXID
;

297 
AT91_REG
 
	mDBGU_FNTR
;

298 
AT91_REG
 
	mRe£rved1
[45];

299 
AT91_REG
 
	mDBGU_RPR
;

300 
AT91_REG
 
	mDBGU_RCR
;

301 
AT91_REG
 
	mDBGU_TPR
;

302 
AT91_REG
 
	mDBGU_TCR
;

303 
AT91_REG
 
	mDBGU_RNPR
;

304 
AT91_REG
 
	mDBGU_RNCR
;

305 
AT91_REG
 
	mDBGU_TNPR
;

306 
AT91_REG
 
	mDBGU_TNCR
;

307 
AT91_REG
 
	mDBGU_PTCR
;

308 
AT91_REG
 
	mDBGU_PTSR
;

309 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

312 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

313 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

314 
	#AT91C_US_RXEN
 (() 0x1 << 4)

315 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

316 
	#AT91C_US_TXEN
 (() 0x1 << 6)

317 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

318 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

320 
	#AT91C_US_PAR
 (() 0x7 << 9)

321 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

322 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

323 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

324 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

325 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

326 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

327 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

328 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

329 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

330 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

331 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

333 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

334 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

335 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

336 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

337 
	#AT91C_US_OVRE
 (() 0x1 << 5)

338 
	#AT91C_US_FRAME
 (() 0x1 << 6)

339 
	#AT91C_US_PARE
 (() 0x1 << 7)

340 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

341 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

342 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

343 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

344 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

349 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

350 

	)

354 
	s_AT91S_PIO
 {

355 
AT91_REG
 
	mPIO_PER
;

356 
AT91_REG
 
	mPIO_PDR
;

357 
AT91_REG
 
	mPIO_PSR
;

358 
AT91_REG
 
	mRe£rved0
[1];

359 
AT91_REG
 
	mPIO_OER
;

360 
AT91_REG
 
	mPIO_ODR
;

361 
AT91_REG
 
	mPIO_OSR
;

362 
AT91_REG
 
	mRe£rved1
[1];

363 
AT91_REG
 
	mPIO_IFER
;

364 
AT91_REG
 
	mPIO_IFDR
;

365 
AT91_REG
 
	mPIO_IFSR
;

366 
AT91_REG
 
	mRe£rved2
[1];

367 
AT91_REG
 
	mPIO_SODR
;

368 
AT91_REG
 
	mPIO_CODR
;

369 
AT91_REG
 
	mPIO_ODSR
;

370 
AT91_REG
 
	mPIO_PDSR
;

371 
AT91_REG
 
	mPIO_IER
;

372 
AT91_REG
 
	mPIO_IDR
;

373 
AT91_REG
 
	mPIO_IMR
;

374 
AT91_REG
 
	mPIO_ISR
;

375 
AT91_REG
 
	mPIO_MDER
;

376 
AT91_REG
 
	mPIO_MDDR
;

377 
AT91_REG
 
	mPIO_MDSR
;

378 
AT91_REG
 
	mRe£rved3
[1];

379 
AT91_REG
 
	mPIO_PPUDR
;

380 
AT91_REG
 
	mPIO_PPUER
;

381 
AT91_REG
 
	mPIO_PPUSR
;

382 
AT91_REG
 
	mRe£rved4
[1];

383 
AT91_REG
 
	mPIO_ASR
;

384 
AT91_REG
 
	mPIO_BSR
;

385 
AT91_REG
 
	mPIO_ABSR
;

386 
AT91_REG
 
	mRe£rved5
[9];

387 
AT91_REG
 
	mPIO_OWER
;

388 
AT91_REG
 
	mPIO_OWDR
;

389 
AT91_REG
 
	mPIO_OWSR
;

390 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

396 
	s_AT91S_CKGR
 {

397 
AT91_REG
 
	mCKGR_MOR
;

398 
AT91_REG
 
	mCKGR_MCFR
;

399 
AT91_REG
 
	mRe£rved0
[1];

400 
AT91_REG
 
	mCKGR_PLLR
;

401 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

404 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

405 
	#AT91C_CKGR_OSCBYPASS
 (() 0x1 << 1)

406 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

408 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

409 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

411 
	#AT91C_CKGR_DIV
 (() 0xFF << 0)

412 
	#AT91C_CKGR_DIV_0
 (() 0x0)

413 
	#AT91C_CKGR_DIV_BYPASS
 (() 0x1)

414 
	#AT91C_CKGR_PLLCOUNT
 (() 0x3F << 8)

415 
	#AT91C_CKGR_OUT
 (() 0x3 << 14)

416 
	#AT91C_CKGR_OUT_0
 (() 0x0 << 14)

417 
	#AT91C_CKGR_OUT_1
 (() 0x1 << 14)

418 
	#AT91C_CKGR_OUT_2
 (() 0x2 << 14)

419 
	#AT91C_CKGR_OUT_3
 (() 0x3 << 14)

420 
	#AT91C_CKGR_MUL
 (() 0x7FF << 16)

421 
	#AT91C_CKGR_USBDIV
 (() 0x3 << 28)

422 
	#AT91C_CKGR_USBDIV_0
 (() 0x0 << 28)

423 
	#AT91C_CKGR_USBDIV_1
 (() 0x1 << 28)

424 
	#AT91C_CKGR_USBDIV_2
 (() 0x2 << 28)

425 

	)

429 
	s_AT91S_PMC
 {

430 
AT91_REG
 
	mPMC_SCER
;

431 
AT91_REG
 
	mPMC_SCDR
;

432 
AT91_REG
 
	mPMC_SCSR
;

433 
AT91_REG
 
	mRe£rved0
[1];

434 
AT91_REG
 
	mPMC_PCER
;

435 
AT91_REG
 
	mPMC_PCDR
;

436 
AT91_REG
 
	mPMC_PCSR
;

437 
AT91_REG
 
	mRe£rved1
[1];

438 
AT91_REG
 
	mPMC_MOR
;

439 
AT91_REG
 
	mPMC_MCFR
;

440 
AT91_REG
 
	mRe£rved2
[1];

441 
AT91_REG
 
	mPMC_PLLR
;

442 
AT91_REG
 
	mPMC_MCKR
;

443 
AT91_REG
 
	mRe£rved3
[3];

444 
AT91_REG
 
	mPMC_PCKR
[4];

445 
AT91_REG
 
	mRe£rved4
[4];

446 
AT91_REG
 
	mPMC_IER
;

447 
AT91_REG
 
	mPMC_IDR
;

448 
AT91_REG
 
	mPMC_SR
;

449 
AT91_REG
 
	mPMC_IMR
;

450 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

453 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

454 
	#AT91C_PMC_UDP
 (() 0x1 << 7)

455 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

456 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

457 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

458 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

465 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

466 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

467 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

468 
	#AT91C_PMC_CSS_PLL_CLK
 (() 0x3)

469 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

470 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

471 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

472 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

473 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

474 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

475 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

476 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

479 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

480 
	#AT91C_PMC_LOCK
 (() 0x1 << 2)

481 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

482 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

483 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

484 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

485 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

489 

	)

493 
	s_AT91S_RSTC
 {

494 
AT91_REG
 
	mRSTC_RCR
;

495 
AT91_REG
 
	mRSTC_RSR
;

496 
AT91_REG
 
	mRSTC_RMR
;

497 } 
	tAT91S_RSTC
, *
	tAT91PS_RSTC
;

500 
	#AT91C_RSTC_PROCRST
 (() 0x1 << 0)

501 
	#AT91C_RSTC_PERRST
 (() 0x1 << 2)

502 
	#AT91C_RSTC_EXTRST
 (() 0x1 << 3)

503 
	#AT91C_RSTC_KEY
 (() 0xFF << 24)

505 
	#AT91C_RSTC_URSTS
 (() 0x1 << 0)

506 
	#AT91C_RSTC_BODSTS
 (() 0x1 << 1)

507 
	#AT91C_RSTC_RSTTYP
 (() 0x7 << 8)

508 
	#AT91C_RSTC_RSTTYP_POWERUP
 (() 0x0 << 8)

509 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (() 0x1 << 8)

510 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (() 0x2 << 8)

511 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (() 0x3 << 8)

512 
	#AT91C_RSTC_RSTTYP_USER
 (() 0x4 << 8)

513 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (() 0x5 << 8)

514 
	#AT91C_RSTC_NRSTL
 (() 0x1 << 16)

515 
	#AT91C_RSTC_SRCMP
 (() 0x1 << 17)

517 
	#AT91C_RSTC_URSTEN
 (() 0x1 << 0)

518 
	#AT91C_RSTC_URSTIEN
 (() 0x1 << 4)

519 
	#AT91C_RSTC_ERSTL
 (() 0xF << 8)

520 
	#AT91C_RSTC_BODIEN
 (() 0x1 << 16)

521 

	)

525 
	s_AT91S_RTTC
 {

526 
AT91_REG
 
	mRTTC_RTMR
;

527 
AT91_REG
 
	mRTTC_RTAR
;

528 
AT91_REG
 
	mRTTC_RTVR
;

529 
AT91_REG
 
	mRTTC_RTSR
;

530 } 
	tAT91S_RTTC
, *
	tAT91PS_RTTC
;

533 
	#AT91C_RTTC_RTPRES
 (() 0xFFFF << 0)

534 
	#AT91C_RTTC_ALMIEN
 (() 0x1 << 16)

535 
	#AT91C_RTTC_RTTINCIEN
 (() 0x1 << 17)

536 
	#AT91C_RTTC_RTTRST
 (() 0x1 << 18)

538 
	#AT91C_RTTC_ALMV
 (() 0x0 << 0)

540 
	#AT91C_RTTC_CRTV
 (() 0x0 << 0)

542 
	#AT91C_RTTC_ALMS
 (() 0x1 << 0)

543 
	#AT91C_RTTC_RTTINC
 (() 0x1 << 1)

544 

	)

548 
	s_AT91S_PITC
 {

549 
AT91_REG
 
	mPITC_PIMR
;

550 
AT91_REG
 
	mPITC_PISR
;

551 
AT91_REG
 
	mPITC_PIVR
;

552 
AT91_REG
 
	mPITC_PIIR
;

553 } 
	tAT91S_PITC
, *
	tAT91PS_PITC
;

556 
	#AT91C_PITC_PIV
 (() 0xFFFFF << 0)

557 
	#AT91C_PITC_PITEN
 (() 0x1 << 24)

558 
	#AT91C_PITC_PITIEN
 (() 0x1 << 25)

560 
	#AT91C_PITC_PITS
 (() 0x1 << 0)

562 
	#AT91C_PITC_CPIV
 (() 0xFFFFF << 0)

563 
	#AT91C_PITC_PICNT
 (() 0xFFF << 20)

565 

	)

569 
	s_AT91S_WDTC
 {

570 
AT91_REG
 
	mWDTC_WDCR
;

571 
AT91_REG
 
	mWDTC_WDMR
;

572 
AT91_REG
 
	mWDTC_WDSR
;

573 } 
	tAT91S_WDTC
, *
	tAT91PS_WDTC
;

576 
	#AT91C_WDTC_WDRSTT
 (() 0x1 << 0)

577 
	#AT91C_WDTC_KEY
 (() 0xFF << 24)

579 
	#AT91C_WDTC_WDV
 (() 0xFFF << 0)

580 
	#AT91C_WDTC_WDFIEN
 (() 0x1 << 12)

581 
	#AT91C_WDTC_WDRSTEN
 (() 0x1 << 13)

582 
	#AT91C_WDTC_WDRPROC
 (() 0x1 << 14)

583 
	#AT91C_WDTC_WDDIS
 (() 0x1 << 15)

584 
	#AT91C_WDTC_WDD
 (() 0xFFF << 16)

585 
	#AT91C_WDTC_WDDBGHLT
 (() 0x1 << 28)

586 
	#AT91C_WDTC_WDIDLEHLT
 (() 0x1 << 29)

588 
	#AT91C_WDTC_WDUNF
 (() 0x1 << 0)

589 
	#AT91C_WDTC_WDERR
 (() 0x1 << 1)

590 

	)

594 
	s_AT91S_VREG
 {

595 
AT91_REG
 
	mVREG_MR
;

596 } 
	tAT91S_VREG
, *
	tAT91PS_VREG
;

599 
	#AT91C_VREG_PSTDBY
 (() 0x1 << 0)

600 

	)

604 
	s_AT91S_MC
 {

605 
AT91_REG
 
	mMC_RCR
;

606 
AT91_REG
 
	mMC_ASR
;

607 
AT91_REG
 
	mMC_AASR
;

608 
AT91_REG
 
	mRe£rved0
[21];

609 
AT91_REG
 
	mMC_FMR
;

610 
AT91_REG
 
	mMC_FCR
;

611 
AT91_REG
 
	mMC_FSR
;

612 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

615 
	#AT91C_MC_RCB
 (() 0x1 << 0)

617 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

618 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

619 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

620 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

621 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

622 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

623 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

624 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

625 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

626 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

627 
	#AT91C_MC_MST0
 (() 0x1 << 16)

628 
	#AT91C_MC_MST1
 (() 0x1 << 17)

629 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

630 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

632 
	#AT91C_MC_FRDY
 (() 0x1 << 0)

633 
	#AT91C_MC_LOCKE
 (() 0x1 << 2)

634 
	#AT91C_MC_PROGE
 (() 0x1 << 3)

635 
	#AT91C_MC_NEBP
 (() 0x1 << 7)

636 
	#AT91C_MC_FWS
 (() 0x3 << 8)

637 
	#AT91C_MC_FWS_0FWS
 (() 0x0 << 8)

638 
	#AT91C_MC_FWS_1FWS
 (() 0x1 << 8)

639 
	#AT91C_MC_FWS_2FWS
 (() 0x2 << 8)

640 
	#AT91C_MC_FWS_3FWS
 (() 0x3 << 8)

641 
	#AT91C_MC_FMCN
 (() 0xFF << 16)

643 
	#AT91C_MC_FCMD
 (() 0xF << 0)

644 
	#AT91C_MC_FCMD_START_PROG
 (() 0x1)

645 
	#AT91C_MC_FCMD_LOCK
 (() 0x2)

646 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (() 0x3)

647 
	#AT91C_MC_FCMD_UNLOCK
 (() 0x4)

648 
	#AT91C_MC_FCMD_ERASE_ALL
 (() 0x8)

649 
	#AT91C_MC_FCMD_SET_GP_NVM
 (() 0xB)

650 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (() 0xD)

651 
	#AT91C_MC_FCMD_SET_SECURITY
 (() 0xF)

652 
	#AT91C_MC_PAGEN
 (() 0x3FF << 8)

653 
	#AT91C_MC_KEY
 (() 0xFF << 24)

655 
	#AT91C_MC_SECURITY
 (() 0x1 << 4)

656 
	#AT91C_MC_GPNVM0
 (() 0x1 << 8)

657 
	#AT91C_MC_GPNVM1
 (() 0x1 << 9)

658 
	#AT91C_MC_GPNVM2
 (() 0x1 << 10)

659 
	#AT91C_MC_GPNVM3
 (() 0x1 << 11)

660 
	#AT91C_MC_GPNVM4
 (() 0x1 << 12)

661 
	#AT91C_MC_GPNVM5
 (() 0x1 << 13)

662 
	#AT91C_MC_GPNVM6
 (() 0x1 << 14)

663 
	#AT91C_MC_GPNVM7
 (() 0x1 << 15)

664 
	#AT91C_MC_LOCKS0
 (() 0x1 << 16)

665 
	#AT91C_MC_LOCKS1
 (() 0x1 << 17)

666 
	#AT91C_MC_LOCKS2
 (() 0x1 << 18)

667 
	#AT91C_MC_LOCKS3
 (() 0x1 << 19)

668 
	#AT91C_MC_LOCKS4
 (() 0x1 << 20)

669 
	#AT91C_MC_LOCKS5
 (() 0x1 << 21)

670 
	#AT91C_MC_LOCKS6
 (() 0x1 << 22)

671 
	#AT91C_MC_LOCKS7
 (() 0x1 << 23)

672 
	#AT91C_MC_LOCKS8
 (() 0x1 << 24)

673 
	#AT91C_MC_LOCKS9
 (() 0x1 << 25)

674 
	#AT91C_MC_LOCKS10
 (() 0x1 << 26)

675 
	#AT91C_MC_LOCKS11
 (() 0x1 << 27)

676 
	#AT91C_MC_LOCKS12
 (() 0x1 << 28)

677 
	#AT91C_MC_LOCKS13
 (() 0x1 << 29)

678 
	#AT91C_MC_LOCKS14
 (() 0x1 << 30)

679 
	#AT91C_MC_LOCKS15
 (() 0x1 << 31)

680 

	)

684 
	s_AT91S_SPI
 {

685 
AT91_REG
 
	mSPI_CR
;

686 
AT91_REG
 
	mSPI_MR
;

687 
AT91_REG
 
	mSPI_RDR
;

688 
AT91_REG
 
	mSPI_TDR
;

689 
AT91_REG
 
	mSPI_SR
;

690 
AT91_REG
 
	mSPI_IER
;

691 
AT91_REG
 
	mSPI_IDR
;

692 
AT91_REG
 
	mSPI_IMR
;

693 
AT91_REG
 
	mRe£rved0
[4];

694 
AT91_REG
 
	mSPI_CSR
[4];

695 
AT91_REG
 
	mRe£rved1
[48];

696 
AT91_REG
 
	mSPI_RPR
;

697 
AT91_REG
 
	mSPI_RCR
;

698 
AT91_REG
 
	mSPI_TPR
;

699 
AT91_REG
 
	mSPI_TCR
;

700 
AT91_REG
 
	mSPI_RNPR
;

701 
AT91_REG
 
	mSPI_RNCR
;

702 
AT91_REG
 
	mSPI_TNPR
;

703 
AT91_REG
 
	mSPI_TNCR
;

704 
AT91_REG
 
	mSPI_PTCR
;

705 
AT91_REG
 
	mSPI_PTSR
;

706 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

709 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

710 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

711 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

712 
	#AT91C_SPI_LASTXFER
 (() 0x1 << 24)

714 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

715 
	#AT91C_SPI_PS
 (() 0x1 << 1)

716 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

717 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

718 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

719 
	#AT91C_SPI_FDIV
 (() 0x1 << 3)

720 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

721 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

722 
	#AT91C_SPI_PCS
 (() 0xF << 16)

723 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

725 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

726 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

728 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

729 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

731 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

732 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

733 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

734 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

735 
	#AT91C_SPI_ENDRX
 (() 0x1 << 4)

736 
	#AT91C_SPI_ENDTX
 (() 0x1 << 5)

737 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

738 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

739 
	#AT91C_SPI_NSSR
 (() 0x1 << 8)

740 
	#AT91C_SPI_TXEMPTY
 (() 0x1 << 9)

741 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

746 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

747 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

748 
	#AT91C_SPI_CSAAT
 (() 0x1 << 3)

749 
	#AT91C_SPI_BITS
 (() 0xF << 4)

750 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

751 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

752 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

753 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

754 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

755 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

756 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

757 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

758 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

759 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

760 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

761 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

762 

	)

766 
	s_AT91S_USART
 {

767 
AT91_REG
 
	mUS_CR
;

768 
AT91_REG
 
	mUS_MR
;

769 
AT91_REG
 
	mUS_IER
;

770 
AT91_REG
 
	mUS_IDR
;

771 
AT91_REG
 
	mUS_IMR
;

772 
AT91_REG
 
	mUS_CSR
;

773 
AT91_REG
 
	mUS_RHR
;

774 
AT91_REG
 
	mUS_THR
;

775 
AT91_REG
 
	mUS_BRGR
;

776 
AT91_REG
 
	mUS_RTOR
;

777 
AT91_REG
 
	mUS_TTGR
;

778 
AT91_REG
 
	mRe£rved0
[5];

779 
AT91_REG
 
	mUS_FIDI
;

780 
AT91_REG
 
	mUS_NER
;

781 
AT91_REG
 
	mRe£rved1
[1];

782 
AT91_REG
 
	mUS_IF
;

783 
AT91_REG
 
	mRe£rved2
[44];

784 
AT91_REG
 
	mUS_RPR
;

785 
AT91_REG
 
	mUS_RCR
;

786 
AT91_REG
 
	mUS_TPR
;

787 
AT91_REG
 
	mUS_TCR
;

788 
AT91_REG
 
	mUS_RNPR
;

789 
AT91_REG
 
	mUS_RNCR
;

790 
AT91_REG
 
	mUS_TNPR
;

791 
AT91_REG
 
	mUS_TNCR
;

792 
AT91_REG
 
	mUS_PTCR
;

793 
AT91_REG
 
	mUS_PTSR
;

794 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

797 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

798 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

799 
	#AT91C_US_STTTO
 (() 0x1 << 11)

800 
	#AT91C_US_SENDA
 (() 0x1 << 12)

801 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

802 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

803 
	#AT91C_US_RETTO
 (() 0x1 << 15)

804 
	#AT91C_US_DTREN
 (() 0x1 << 16)

805 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

806 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

807 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

809 
	#AT91C_US_USMODE
 (() 0xF << 0)

810 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

811 
	#AT91C_US_USMODE_RS485
 (() 0x1)

812 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

813 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

814 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

815 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

816 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

817 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

818 
	#AT91C_US_CLKS
 (() 0x3 << 4)

819 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

820 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

821 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

822 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

823 
	#AT91C_US_CHRL
 (() 0x3 << 6)

824 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

825 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

826 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

827 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

828 
	#AT91C_US_SYNC
 (() 0x1 << 8)

829 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

830 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

831 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

832 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

833 
	#AT91C_US_MSBF
 (() 0x1 << 16)

834 
	#AT91C_US_MODE9
 (() 0x1 << 17)

835 
	#AT91C_US_CKLO
 (() 0x1 << 18)

836 
	#AT91C_US_OVER
 (() 0x1 << 19)

837 
	#AT91C_US_INACK
 (() 0x1 << 20)

838 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

839 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

840 
	#AT91C_US_FILTER
 (() 0x1 << 28)

842 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

843 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

844 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

845 
	#AT91C_US_NACK
 (() 0x1 << 13)

846 
	#AT91C_US_RIIC
 (() 0x1 << 16)

847 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

848 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

849 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

853 
	#AT91C_US_RI
 (() 0x1 << 20)

854 
	#AT91C_US_DSR
 (() 0x1 << 21)

855 
	#AT91C_US_DCD
 (() 0x1 << 22)

856 
	#AT91C_US_CTS
 (() 0x1 << 23)

857 

	)

861 
	s_AT91S_SSC
 {

862 
AT91_REG
 
	mSSC_CR
;

863 
AT91_REG
 
	mSSC_CMR
;

864 
AT91_REG
 
	mRe£rved0
[2];

865 
AT91_REG
 
	mSSC_RCMR
;

866 
AT91_REG
 
	mSSC_RFMR
;

867 
AT91_REG
 
	mSSC_TCMR
;

868 
AT91_REG
 
	mSSC_TFMR
;

869 
AT91_REG
 
	mSSC_RHR
;

870 
AT91_REG
 
	mSSC_THR
;

871 
AT91_REG
 
	mRe£rved1
[2];

872 
AT91_REG
 
	mSSC_RSHR
;

873 
AT91_REG
 
	mSSC_TSHR
;

874 
AT91_REG
 
	mRe£rved2
[2];

875 
AT91_REG
 
	mSSC_SR
;

876 
AT91_REG
 
	mSSC_IER
;

877 
AT91_REG
 
	mSSC_IDR
;

878 
AT91_REG
 
	mSSC_IMR
;

879 
AT91_REG
 
	mRe£rved3
[44];

880 
AT91_REG
 
	mSSC_RPR
;

881 
AT91_REG
 
	mSSC_RCR
;

882 
AT91_REG
 
	mSSC_TPR
;

883 
AT91_REG
 
	mSSC_TCR
;

884 
AT91_REG
 
	mSSC_RNPR
;

885 
AT91_REG
 
	mSSC_RNCR
;

886 
AT91_REG
 
	mSSC_TNPR
;

887 
AT91_REG
 
	mSSC_TNCR
;

888 
AT91_REG
 
	mSSC_PTCR
;

889 
AT91_REG
 
	mSSC_PTSR
;

890 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

893 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

894 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

895 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

896 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

897 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

899 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

900 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

901 
	#AT91C_SSC_CKS_TK
 (() 0x1)

902 
	#AT91C_SSC_CKS_RK
 (() 0x2)

903 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

904 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

905 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

906 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

907 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

908 
	#AT91C_SSC_START
 (() 0xF << 8)

909 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

910 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

911 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

912 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

913 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

914 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

915 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

916 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

917 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

918 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

919 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

921 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

922 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

923 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

924 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

925 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

926 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

927 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

928 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

929 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

930 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

931 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

932 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

933 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

936 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

937 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

939 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

940 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

941 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

942 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

943 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

944 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

945 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

946 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

947 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

948 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

949 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

950 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

954 

	)

958 
	s_AT91S_TWI
 {

959 
AT91_REG
 
	mTWI_CR
;

960 
AT91_REG
 
	mTWI_MMR
;

961 
AT91_REG
 
	mRe£rved0
[1];

962 
AT91_REG
 
	mTWI_IADR
;

963 
AT91_REG
 
	mTWI_CWGR
;

964 
AT91_REG
 
	mRe£rved1
[3];

965 
AT91_REG
 
	mTWI_SR
;

966 
AT91_REG
 
	mTWI_IER
;

967 
AT91_REG
 
	mTWI_IDR
;

968 
AT91_REG
 
	mTWI_IMR
;

969 
AT91_REG
 
	mTWI_RHR
;

970 
AT91_REG
 
	mTWI_THR
;

971 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

974 
	#AT91C_TWI_START
 (() 0x1 << 0)

975 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

976 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

977 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

978 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

980 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

981 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

982 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

983 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

984 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

985 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

986 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

988 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

989 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

990 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

992 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

993 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

994 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

995 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

996 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

997 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1001 

	)

1005 
	s_AT91S_PWMC_CH
 {

1006 
AT91_REG
 
	mPWMC_CMR
;

1007 
AT91_REG
 
	mPWMC_CDTYR
;

1008 
AT91_REG
 
	mPWMC_CPRDR
;

1009 
AT91_REG
 
	mPWMC_CCNTR
;

1010 
AT91_REG
 
	mPWMC_CUPDR
;

1011 
AT91_REG
 
	mPWMC_Re£rved
[3];

1012 } 
	tAT91S_PWMC_CH
, *
	tAT91PS_PWMC_CH
;

1015 
	#AT91C_PWMC_CPRE
 (() 0xF << 0)

1016 
	#AT91C_PWMC_CPRE_MCK
 (() 0x0)

1017 
	#AT91C_PWMC_CPRE_MCKA
 (() 0xB)

1018 
	#AT91C_PWMC_CPRE_MCKB
 (() 0xC)

1019 
	#AT91C_PWMC_CALG
 (() 0x1 << 8)

1020 
	#AT91C_PWMC_CPOL
 (() 0x1 << 9)

1021 
	#AT91C_PWMC_CPD
 (() 0x1 << 10)

1023 
	#AT91C_PWMC_CDTY
 (() 0x0 << 0)

1025 
	#AT91C_PWMC_CPRD
 (() 0x0 << 0)

1027 
	#AT91C_PWMC_CCNT
 (() 0x0 << 0)

1029 
	#AT91C_PWMC_CUPD
 (() 0x0 << 0)

1030 

	)

1034 
	s_AT91S_PWMC
 {

1035 
AT91_REG
 
	mPWMC_MR
;

1036 
AT91_REG
 
	mPWMC_ENA
;

1037 
AT91_REG
 
	mPWMC_DIS
;

1038 
AT91_REG
 
	mPWMC_SR
;

1039 
AT91_REG
 
	mPWMC_IER
;

1040 
AT91_REG
 
	mPWMC_IDR
;

1041 
AT91_REG
 
	mPWMC_IMR
;

1042 
AT91_REG
 
	mPWMC_ISR
;

1043 
AT91_REG
 
	mRe£rved0
[55];

1044 
AT91_REG
 
	mPWMC_VR
;

1045 
AT91_REG
 
	mRe£rved1
[64];

1046 
AT91S_PWMC_CH
 
	mPWMC_CH
[4];

1047 } 
	tAT91S_PWMC
, *
	tAT91PS_PWMC
;

1050 
	#AT91C_PWMC_DIVA
 (() 0xFF << 0)

1051 
	#AT91C_PWMC_PREA
 (() 0xF << 8)

1052 
	#AT91C_PWMC_PREA_MCK
 (() 0x0 << 8)

1053 
	#AT91C_PWMC_DIVB
 (() 0xFF << 16)

1054 
	#AT91C_PWMC_PREB
 (() 0xF << 24)

1055 
	#AT91C_PWMC_PREB_MCK
 (() 0x0 << 24)

1057 
	#AT91C_PWMC_CHID0
 (() 0x1 << 0)

1058 
	#AT91C_PWMC_CHID1
 (() 0x1 << 1)

1059 
	#AT91C_PWMC_CHID2
 (() 0x1 << 2)

1060 
	#AT91C_PWMC_CHID3
 (() 0x1 << 3)

1067 

	)

1071 
	s_AT91S_UDP
 {

1072 
AT91_REG
 
	mUDP_NUM
;

1073 
AT91_REG
 
	mUDP_GLBSTATE
;

1074 
AT91_REG
 
	mUDP_FADDR
;

1075 
AT91_REG
 
	mRe£rved0
[1];

1076 
AT91_REG
 
	mUDP_IER
;

1077 
AT91_REG
 
	mUDP_IDR
;

1078 
AT91_REG
 
	mUDP_IMR
;

1079 
AT91_REG
 
	mUDP_ISR
;

1080 
AT91_REG
 
	mUDP_ICR
;

1081 
AT91_REG
 
	mRe£rved1
[1];

1082 
AT91_REG
 
	mUDP_RSTEP
;

1083 
AT91_REG
 
	mRe£rved2
[1];

1084 
AT91_REG
 
	mUDP_CSR
[6];

1085 
AT91_REG
 
	mRe£rved3
[2];

1086 
AT91_REG
 
	mUDP_FDR
[6];

1087 
AT91_REG
 
	mRe£rved4
[3];

1088 
AT91_REG
 
	mUDP_TXVC
;

1089 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1092 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1093 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1094 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1096 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1097 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1098 
	#AT91C_UDP_ESR
 (() 0x1 << 2)

1099 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1100 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 4)

1102 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1103 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1105 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1106 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1107 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1108 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1109 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1110 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1111 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1112 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1113 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1114 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1115 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1119 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1122 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1123 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1124 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1125 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1126 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1127 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1129 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1130 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1131 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1132 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1133 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1134 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1135 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1136 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1137 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1138 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1139 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1140 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1141 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1142 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1143 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1144 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1145 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1146 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1147 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1149 
	#AT91C_UDP_TXVDIS
 (() 0x1 << 8)

1150 
	#AT91C_UDP_PUON
 (() 0x1 << 9)

1151 

	)

1155 
	s_AT91S_TC
 {

1156 
AT91_REG
 
	mTC_CCR
;

1157 
AT91_REG
 
	mTC_CMR
;

1158 
AT91_REG
 
	mRe£rved0
[2];

1159 
AT91_REG
 
	mTC_CV
;

1160 
AT91_REG
 
	mTC_RA
;

1161 
AT91_REG
 
	mTC_RB
;

1162 
AT91_REG
 
	mTC_RC
;

1163 
AT91_REG
 
	mTC_SR
;

1164 
AT91_REG
 
	mTC_IER
;

1165 
AT91_REG
 
	mTC_IDR
;

1166 
AT91_REG
 
	mTC_IMR
;

1167 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1170 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1171 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1172 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1174 
	#AT91C_TC_CLKS
 (() 0x7 << 0)

1175 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (() 0x0)

1176 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (() 0x1)

1177 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (() 0x2)

1178 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (() 0x3)

1179 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (() 0x4)

1180 
	#AT91C_TC_CLKS_XC0
 (() 0x5)

1181 
	#AT91C_TC_CLKS_XC1
 (() 0x6)

1182 
	#AT91C_TC_CLKS_XC2
 (() 0x7)

1183 
	#AT91C_TC_CLKI
 (() 0x1 << 3)

1184 
	#AT91C_TC_BURST
 (() 0x3 << 4)

1185 
	#AT91C_TC_BURST_NONE
 (() 0x0 << 4)

1186 
	#AT91C_TC_BURST_XC0
 (() 0x1 << 4)

1187 
	#AT91C_TC_BURST_XC1
 (() 0x2 << 4)

1188 
	#AT91C_TC_BURST_XC2
 (() 0x3 << 4)

1189 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1190 
	#AT91C_TC_LDBSTOP
 (() 0x1 << 6)

1191 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1192 
	#AT91C_TC_LDBDIS
 (() 0x1 << 7)

1193 
	#AT91C_TC_ETRGEDG
 (() 0x3 << 8)

1194 
	#AT91C_TC_ETRGEDG_NONE
 (() 0x0 << 8)

1195 
	#AT91C_TC_ETRGEDG_RISING
 (() 0x1 << 8)

1196 
	#AT91C_TC_ETRGEDG_FALLING
 (() 0x2 << 8)

1197 
	#AT91C_TC_ETRGEDG_BOTH
 (() 0x3 << 8)

1198 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1199 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1200 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1201 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1202 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1203 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1204 
	#AT91C_TC_EEVT_TIOB
 (() 0x0 << 10)

1205 
	#AT91C_TC_EEVT_XC0
 (() 0x1 << 10)

1206 
	#AT91C_TC_EEVT_XC1
 (() 0x2 << 10)

1207 
	#AT91C_TC_EEVT_XC2
 (() 0x3 << 10)

1208 
	#AT91C_TC_ABETRG
 (() 0x1 << 10)

1209 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1210 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1211 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1212 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1213 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1214 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1215 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1216 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1217 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1218 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1219 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1220 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1221 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1222 
	#AT91C_TC_LDRA
 (() 0x3 << 16)

1223 
	#AT91C_TC_LDRA_NONE
 (() 0x0 << 16)

1224 
	#AT91C_TC_LDRA_RISING
 (() 0x1 << 16)

1225 
	#AT91C_TC_LDRA_FALLING
 (() 0x2 << 16)

1226 
	#AT91C_TC_LDRA_BOTH
 (() 0x3 << 16)

1227 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1228 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1229 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1230 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1231 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1232 
	#AT91C_TC_LDRB
 (() 0x3 << 18)

1233 
	#AT91C_TC_LDRB_NONE
 (() 0x0 << 18)

1234 
	#AT91C_TC_LDRB_RISING
 (() 0x1 << 18)

1235 
	#AT91C_TC_LDRB_FALLING
 (() 0x2 << 18)

1236 
	#AT91C_TC_LDRB_BOTH
 (() 0x3 << 18)

1237 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1238 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1239 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1240 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1241 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1242 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1243 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1244 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1245 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1246 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1247 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1248 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1249 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1250 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1251 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1252 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1253 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1254 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1255 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1256 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1257 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1258 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1259 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1260 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1261 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1262 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1263 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1264 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1265 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1266 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1268 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1269 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1270 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1271 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1272 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1273 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1274 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1275 
	#AT91C_TC_ETRGS
 (() 0x1 << 7)

1276 
	#AT91C_TC_CLKSTA
 (() 0x1 << 16)

1277 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1278 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1282 

	)

1286 
	s_AT91S_TCB
 {

1287 
AT91S_TC
 
	mTCB_TC0
;

1288 
AT91_REG
 
	mRe£rved0
[4];

1289 
AT91S_TC
 
	mTCB_TC1
;

1290 
AT91_REG
 
	mRe£rved1
[4];

1291 
AT91S_TC
 
	mTCB_TC2
;

1292 
AT91_REG
 
	mRe£rved2
[4];

1293 
AT91_REG
 
	mTCB_BCR
;

1294 
AT91_REG
 
	mTCB_BMR
;

1295 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1298 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1300 
	#AT91C_TCB_TC0XC0S
 (() 0x3 << 0)

1301 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1302 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1303 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1304 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1305 
	#AT91C_TCB_TC1XC1S
 (() 0x3 << 2)

1306 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1307 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1308 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1309 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1310 
	#AT91C_TCB_TC2XC2S
 (() 0x3 << 4)

1311 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1312 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1313 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1314 
	#AT91C_TCB_TC2XC2S_TIOA1
 (() 0x3 << 4)

1315 

	)

1319 
	s_AT91S_CAN_MB
 {

1320 
AT91_REG
 
	mCAN_MB_MMR
;

1321 
AT91_REG
 
	mCAN_MB_MAM
;

1322 
AT91_REG
 
	mCAN_MB_MID
;

1323 
AT91_REG
 
	mCAN_MB_MFID
;

1324 
AT91_REG
 
	mCAN_MB_MSR
;

1325 
AT91_REG
 
	mCAN_MB_MDL
;

1326 
AT91_REG
 
	mCAN_MB_MDH
;

1327 
AT91_REG
 
	mCAN_MB_MCR
;

1328 } 
	tAT91S_CAN_MB
, *
	tAT91PS_CAN_MB
;

1331 
	#AT91C_CAN_MTIMEMARK
 (() 0xFFFF << 0)

1332 
	#AT91C_CAN_PRIOR
 (() 0xF << 16)

1333 
	#AT91C_CAN_MOT
 (() 0x7 << 24)

1334 
	#AT91C_CAN_MOT_DIS
 (() 0x0 << 24)

1335 
	#AT91C_CAN_MOT_RX
 (() 0x1 << 24)

1336 
	#AT91C_CAN_MOT_RXOVERWRITE
 (() 0x2 << 24)

1337 
	#AT91C_CAN_MOT_TX
 (() 0x3 << 24)

1338 
	#AT91C_CAN_MOT_CONSUMER
 (() 0x4 << 24)

1339 
	#AT91C_CAN_MOT_PRODUCER
 (() 0x5 << 24)

1341 
	#AT91C_CAN_MIDvB
 (() 0x3FFFF << 0)

1342 
	#AT91C_CAN_MIDvA
 (() 0x7FF << 18)

1343 
	#AT91C_CAN_MIDE
 (() 0x1 << 29)

1347 
	#AT91C_CAN_MTIMESTAMP
 (() 0xFFFF << 0)

1348 
	#AT91C_CAN_MDLC
 (() 0xF << 16)

1349 
	#AT91C_CAN_MRTR
 (() 0x1 << 20)

1350 
	#AT91C_CAN_MABT
 (() 0x1 << 22)

1351 
	#AT91C_CAN_MRDY
 (() 0x1 << 23)

1352 
	#AT91C_CAN_MMI
 (() 0x1 << 24)

1356 
	#AT91C_CAN_MACR
 (() 0x1 << 22)

1357 
	#AT91C_CAN_MTCR
 (() 0x1 << 23)

1358 

	)

1362 
	s_AT91S_CAN
 {

1363 
AT91_REG
 
	mCAN_MR
;

1364 
AT91_REG
 
	mCAN_IER
;

1365 
AT91_REG
 
	mCAN_IDR
;

1366 
AT91_REG
 
	mCAN_IMR
;

1367 
AT91_REG
 
	mCAN_SR
;

1368 
AT91_REG
 
	mCAN_BR
;

1369 
AT91_REG
 
	mCAN_TIM
;

1370 
AT91_REG
 
	mCAN_TIMESTP
;

1371 
AT91_REG
 
	mCAN_ECR
;

1372 
AT91_REG
 
	mCAN_TCR
;

1373 
AT91_REG
 
	mCAN_ACR
;

1374 
AT91_REG
 
	mRe£rved0
[52];

1375 
AT91_REG
 
	mCAN_VR
;

1376 
AT91_REG
 
	mRe£rved1
[64];

1377 
AT91S_CAN_MB
 
	mCAN_MB0
;

1378 
AT91S_CAN_MB
 
	mCAN_MB1
;

1379 
AT91S_CAN_MB
 
	mCAN_MB2
;

1380 
AT91S_CAN_MB
 
	mCAN_MB3
;

1381 
AT91S_CAN_MB
 
	mCAN_MB4
;

1382 
AT91S_CAN_MB
 
	mCAN_MB5
;

1383 
AT91S_CAN_MB
 
	mCAN_MB6
;

1384 
AT91S_CAN_MB
 
	mCAN_MB7
;

1385 
AT91S_CAN_MB
 
	mCAN_MB8
;

1386 
AT91S_CAN_MB
 
	mCAN_MB9
;

1387 
AT91S_CAN_MB
 
	mCAN_MB10
;

1388 
AT91S_CAN_MB
 
	mCAN_MB11
;

1389 
AT91S_CAN_MB
 
	mCAN_MB12
;

1390 
AT91S_CAN_MB
 
	mCAN_MB13
;

1391 
AT91S_CAN_MB
 
	mCAN_MB14
;

1392 
AT91S_CAN_MB
 
	mCAN_MB15
;

1393 } 
	tAT91S_CAN
, *
	tAT91PS_CAN
;

1396 
	#AT91C_CAN_CANEN
 (() 0x1 << 0)

1397 
	#AT91C_CAN_LPM
 (() 0x1 << 1)

1398 
	#AT91C_CAN_ABM
 (() 0x1 << 2)

1399 
	#AT91C_CAN_OVL
 (() 0x1 << 3)

1400 
	#AT91C_CAN_TEOF
 (() 0x1 << 4)

1401 
	#AT91C_CAN_TTM
 (() 0x1 << 5)

1402 
	#AT91C_CAN_TIMFRZ
 (() 0x1 << 6)

1403 
	#AT91C_CAN_DRPT
 (() 0x1 << 7)

1405 
	#AT91C_CAN_MB0
 (() 0x1 << 0)

1406 
	#AT91C_CAN_MB1
 (() 0x1 << 1)

1407 
	#AT91C_CAN_MB2
 (() 0x1 << 2)

1408 
	#AT91C_CAN_MB3
 (() 0x1 << 3)

1409 
	#AT91C_CAN_MB4
 (() 0x1 << 4)

1410 
	#AT91C_CAN_MB5
 (() 0x1 << 5)

1411 
	#AT91C_CAN_MB6
 (() 0x1 << 6)

1412 
	#AT91C_CAN_MB7
 (() 0x1 << 7)

1413 
	#AT91C_CAN_MB8
 (() 0x1 << 8)

1414 
	#AT91C_CAN_MB9
 (() 0x1 << 9)

1415 
	#AT91C_CAN_MB10
 (() 0x1 << 10)

1416 
	#AT91C_CAN_MB11
 (() 0x1 << 11)

1417 
	#AT91C_CAN_MB12
 (() 0x1 << 12)

1418 
	#AT91C_CAN_MB13
 (() 0x1 << 13)

1419 
	#AT91C_CAN_MB14
 (() 0x1 << 14)

1420 
	#AT91C_CAN_MB15
 (() 0x1 << 15)

1421 
	#AT91C_CAN_ERRA
 (() 0x1 << 16)

1422 
	#AT91C_CAN_WARN
 (() 0x1 << 17)

1423 
	#AT91C_CAN_ERRP
 (() 0x1 << 18)

1424 
	#AT91C_CAN_BOFF
 (() 0x1 << 19)

1425 
	#AT91C_CAN_SLEEP
 (() 0x1 << 20)

1426 
	#AT91C_CAN_WAKEUP
 (() 0x1 << 21)

1427 
	#AT91C_CAN_TOVF
 (() 0x1 << 22)

1428 
	#AT91C_CAN_TSTP
 (() 0x1 << 23)

1429 
	#AT91C_CAN_CERR
 (() 0x1 << 24)

1430 
	#AT91C_CAN_SERR
 (() 0x1 << 25)

1431 
	#AT91C_CAN_AERR
 (() 0x1 << 26)

1432 
	#AT91C_CAN_FERR
 (() 0x1 << 27)

1433 
	#AT91C_CAN_BERR
 (() 0x1 << 28)

1437 
	#AT91C_CAN_RBSY
 (() 0x1 << 29)

1438 
	#AT91C_CAN_TBSY
 (() 0x1 << 30)

1439 
	#AT91C_CAN_OVLY
 (() 0x1 << 31)

1441 
	#AT91C_CAN_PHASE2
 (() 0x7 << 0)

1442 
	#AT91C_CAN_PHASE1
 (() 0x7 << 4)

1443 
	#AT91C_CAN_PROPAG
 (() 0x7 << 8)

1444 
	#AT91C_CAN_SYNC
 (() 0x3 << 12)

1445 
	#AT91C_CAN_BRP
 (() 0x7F << 16)

1446 
	#AT91C_CAN_SMP
 (() 0x1 << 24)

1448 
	#AT91C_CAN_TIMER
 (() 0xFFFF << 0)

1451 
	#AT91C_CAN_REC
 (() 0xFF << 0)

1452 
	#AT91C_CAN_TEC
 (() 0xFF << 16)

1454 
	#AT91C_CAN_TIMRST
 (() 0x1 << 31)

1456 

	)

1460 
	s_AT91S_EMAC
 {

1461 
AT91_REG
 
	mEMAC_NCR
;

1462 
AT91_REG
 
	mEMAC_NCFGR
;

1463 
AT91_REG
 
	mEMAC_NSR
;

1464 
AT91_REG
 
	mRe£rved0
[2];

1465 
AT91_REG
 
	mEMAC_TSR
;

1466 
AT91_REG
 
	mEMAC_RBQP
;

1467 
AT91_REG
 
	mEMAC_TBQP
;

1468 
AT91_REG
 
	mEMAC_RSR
;

1469 
AT91_REG
 
	mEMAC_ISR
;

1470 
AT91_REG
 
	mEMAC_IER
;

1471 
AT91_REG
 
	mEMAC_IDR
;

1472 
AT91_REG
 
	mEMAC_IMR
;

1473 
AT91_REG
 
	mEMAC_MAN
;

1474 
AT91_REG
 
	mEMAC_PTR
;

1475 
AT91_REG
 
	mEMAC_PFR
;

1476 
AT91_REG
 
	mEMAC_FTO
;

1477 
AT91_REG
 
	mEMAC_SCF
;

1478 
AT91_REG
 
	mEMAC_MCF
;

1479 
AT91_REG
 
	mEMAC_FRO
;

1480 
AT91_REG
 
	mEMAC_FCSE
;

1481 
AT91_REG
 
	mEMAC_ALE
;

1482 
AT91_REG
 
	mEMAC_DTF
;

1483 
AT91_REG
 
	mEMAC_LCOL
;

1484 
AT91_REG
 
	mEMAC_ECOL
;

1485 
AT91_REG
 
	mEMAC_TUND
;

1486 
AT91_REG
 
	mEMAC_CSE
;

1487 
AT91_REG
 
	mEMAC_RRE
;

1488 
AT91_REG
 
	mEMAC_ROV
;

1489 
AT91_REG
 
	mEMAC_RSE
;

1490 
AT91_REG
 
	mEMAC_ELE
;

1491 
AT91_REG
 
	mEMAC_RJA
;

1492 
AT91_REG
 
	mEMAC_USF
;

1493 
AT91_REG
 
	mEMAC_STE
;

1494 
AT91_REG
 
	mEMAC_RLE
;

1495 
AT91_REG
 
	mEMAC_TPF
;

1496 
AT91_REG
 
	mEMAC_HRB
;

1497 
AT91_REG
 
	mEMAC_HRT
;

1498 
AT91_REG
 
	mEMAC_SA1L
;

1499 
AT91_REG
 
	mEMAC_SA1H
;

1500 
AT91_REG
 
	mEMAC_SA2L
;

1501 
AT91_REG
 
	mEMAC_SA2H
;

1502 
AT91_REG
 
	mEMAC_SA3L
;

1503 
AT91_REG
 
	mEMAC_SA3H
;

1504 
AT91_REG
 
	mEMAC_SA4L
;

1505 
AT91_REG
 
	mEMAC_SA4H
;

1506 
AT91_REG
 
	mEMAC_TID
;

1507 
AT91_REG
 
	mEMAC_TPQ
;

1508 
AT91_REG
 
	mEMAC_USRIO
;

1509 
AT91_REG
 
	mEMAC_WOL
;

1510 
AT91_REG
 
	mRe£rved1
[13];

1511 
AT91_REG
 
	mEMAC_REV
;

1512 } 
	tAT91S_EMAC
, *
	tAT91PS_EMAC
;

1515 
	#AT91C_EMAC_LB
 (() 0x1 << 0)

1516 
	#AT91C_EMAC_LLB
 (() 0x1 << 1)

1517 
	#AT91C_EMAC_RE
 (() 0x1 << 2)

1518 
	#AT91C_EMAC_TE
 (() 0x1 << 3)

1519 
	#AT91C_EMAC_MPE
 (() 0x1 << 4)

1520 
	#AT91C_EMAC_CLRSTAT
 (() 0x1 << 5)

1521 
	#AT91C_EMAC_INCSTAT
 (() 0x1 << 6)

1522 
	#AT91C_EMAC_WESTAT
 (() 0x1 << 7)

1523 
	#AT91C_EMAC_BP
 (() 0x1 << 8)

1524 
	#AT91C_EMAC_TSTART
 (() 0x1 << 9)

1525 
	#AT91C_EMAC_THALT
 (() 0x1 << 10)

1526 
	#AT91C_EMAC_TPFR
 (() 0x1 << 11)

1527 
	#AT91C_EMAC_TZQ
 (() 0x1 << 12)

1529 
	#AT91C_EMAC_SPD
 (() 0x1 << 0)

1530 
	#AT91C_EMAC_FD
 (() 0x1 << 1)

1531 
	#AT91C_EMAC_JFRAME
 (() 0x1 << 3)

1532 
	#AT91C_EMAC_CAF
 (() 0x1 << 4)

1533 
	#AT91C_EMAC_NBC
 (() 0x1 << 5)

1534 
	#AT91C_EMAC_MTI
 (() 0x1 << 6)

1535 
	#AT91C_EMAC_UNI
 (() 0x1 << 7)

1536 
	#AT91C_EMAC_BIG
 (() 0x1 << 8)

1537 
	#AT91C_EMAC_EAE
 (() 0x1 << 9)

1538 
	#AT91C_EMAC_CLK
 (() 0x3 << 10)

1539 
	#AT91C_EMAC_CLK_HCLK_8
 (() 0x0 << 10)

1540 
	#AT91C_EMAC_CLK_HCLK_16
 (() 0x1 << 10)

1541 
	#AT91C_EMAC_CLK_HCLK_32
 (() 0x2 << 10)

1542 
	#AT91C_EMAC_CLK_HCLK_64
 (() 0x3 << 10)

1543 
	#AT91C_EMAC_RTY
 (() 0x1 << 12)

1544 
	#AT91C_EMAC_PAE
 (() 0x1 << 13)

1545 
	#AT91C_EMAC_RBOF
 (() 0x3 << 14)

1546 
	#AT91C_EMAC_RBOF_OFFSET_0
 (() 0x0 << 14)

1547 
	#AT91C_EMAC_RBOF_OFFSET_1
 (() 0x1 << 14)

1548 
	#AT91C_EMAC_RBOF_OFFSET_2
 (() 0x2 << 14)

1549 
	#AT91C_EMAC_RBOF_OFFSET_3
 (() 0x3 << 14)

1550 
	#AT91C_EMAC_RLCE
 (() 0x1 << 16)

1551 
	#AT91C_EMAC_DRFCS
 (() 0x1 << 17)

1552 
	#AT91C_EMAC_EFRHD
 (() 0x1 << 18)

1553 
	#AT91C_EMAC_IRXFCS
 (() 0x1 << 19)

1555 
	#AT91C_EMAC_LINKR
 (() 0x1 << 0)

1556 
	#AT91C_EMAC_MDIO
 (() 0x1 << 1)

1557 
	#AT91C_EMAC_IDLE
 (() 0x1 << 2)

1559 
	#AT91C_EMAC_UBR
 (() 0x1 << 0)

1560 
	#AT91C_EMAC_COL
 (() 0x1 << 1)

1561 
	#AT91C_EMAC_RLES
 (() 0x1 << 2)

1562 
	#AT91C_EMAC_TGO
 (() 0x1 << 3)

1563 
	#AT91C_EMAC_BEX
 (() 0x1 << 4)

1564 
	#AT91C_EMAC_COMP
 (() 0x1 << 5)

1565 
	#AT91C_EMAC_UND
 (() 0x1 << 6)

1567 
	#AT91C_EMAC_BNA
 (() 0x1 << 0)

1568 
	#AT91C_EMAC_REC
 (() 0x1 << 1)

1569 
	#AT91C_EMAC_OVR
 (() 0x1 << 2)

1571 
	#AT91C_EMAC_MFD
 (() 0x1 << 0)

1572 
	#AT91C_EMAC_RCOMP
 (() 0x1 << 1)

1573 
	#AT91C_EMAC_RXUBR
 (() 0x1 << 2)

1574 
	#AT91C_EMAC_TXUBR
 (() 0x1 << 3)

1575 
	#AT91C_EMAC_TUNDR
 (() 0x1 << 4)

1576 
	#AT91C_EMAC_RLEX
 (() 0x1 << 5)

1577 
	#AT91C_EMAC_TXERR
 (() 0x1 << 6)

1578 
	#AT91C_EMAC_TCOMP
 (() 0x1 << 7)

1579 
	#AT91C_EMAC_LINK
 (() 0x1 << 9)

1580 
	#AT91C_EMAC_ROVR
 (() 0x1 << 10)

1581 
	#AT91C_EMAC_HRESP
 (() 0x1 << 11)

1582 
	#AT91C_EMAC_PFRE
 (() 0x1 << 12)

1583 
	#AT91C_EMAC_PTZ
 (() 0x1 << 13)

1588 
	#AT91C_EMAC_DATA
 (() 0xFFFF << 0)

1589 
	#AT91C_EMAC_CODE
 (() 0x3 << 16)

1590 
	#AT91C_EMAC_REGA
 (() 0x1F << 18)

1591 
	#AT91C_EMAC_PHYA
 (() 0x1F << 23)

1592 
	#AT91C_EMAC_RW
 (() 0x3 << 28)

1593 
	#AT91C_EMAC_SOF
 (() 0x3 << 30)

1595 
	#AT91C_EMAC_RMII
 (() 0x1 << 0)

1597 
	#AT91C_EMAC_IP
 (() 0xFFFF << 0)

1598 
	#AT91C_EMAC_MAG
 (() 0x1 << 16)

1599 
	#AT91C_EMAC_ARP
 (() 0x1 << 17)

1600 
	#AT91C_EMAC_SA1
 (() 0x1 << 18)

1602 
	#AT91C_EMAC_REVREF
 (() 0xFFFF << 0)

1603 
	#AT91C_EMAC_PARTREF
 (() 0xFFFF << 16)

1604 

	)

1608 
	s_AT91S_ADC
 {

1609 
AT91_REG
 
	mADC_CR
;

1610 
AT91_REG
 
	mADC_MR
;

1611 
AT91_REG
 
	mRe£rved0
[2];

1612 
AT91_REG
 
	mADC_CHER
;

1613 
AT91_REG
 
	mADC_CHDR
;

1614 
AT91_REG
 
	mADC_CHSR
;

1615 
AT91_REG
 
	mADC_SR
;

1616 
AT91_REG
 
	mADC_LCDR
;

1617 
AT91_REG
 
	mADC_IER
;

1618 
AT91_REG
 
	mADC_IDR
;

1619 
AT91_REG
 
	mADC_IMR
;

1620 
AT91_REG
 
	mADC_CDR0
;

1621 
AT91_REG
 
	mADC_CDR1
;

1622 
AT91_REG
 
	mADC_CDR2
;

1623 
AT91_REG
 
	mADC_CDR3
;

1624 
AT91_REG
 
	mADC_CDR4
;

1625 
AT91_REG
 
	mADC_CDR5
;

1626 
AT91_REG
 
	mADC_CDR6
;

1627 
AT91_REG
 
	mADC_CDR7
;

1628 
AT91_REG
 
	mRe£rved1
[44];

1629 
AT91_REG
 
	mADC_RPR
;

1630 
AT91_REG
 
	mADC_RCR
;

1631 
AT91_REG
 
	mADC_TPR
;

1632 
AT91_REG
 
	mADC_TCR
;

1633 
AT91_REG
 
	mADC_RNPR
;

1634 
AT91_REG
 
	mADC_RNCR
;

1635 
AT91_REG
 
	mADC_TNPR
;

1636 
AT91_REG
 
	mADC_TNCR
;

1637 
AT91_REG
 
	mADC_PTCR
;

1638 
AT91_REG
 
	mADC_PTSR
;

1639 } 
	tAT91S_ADC
, *
	tAT91PS_ADC
;

1642 
	#AT91C_ADC_SWRST
 (() 0x1 << 0)

1643 
	#AT91C_ADC_START
 (() 0x1 << 1)

1645 
	#AT91C_ADC_TRGEN
 (() 0x1 << 0)

1646 
	#AT91C_ADC_TRGEN_DIS
 (() 0x0)

1647 
	#AT91C_ADC_TRGEN_EN
 (() 0x1)

1648 
	#AT91C_ADC_TRGSEL
 (() 0x7 << 1)

1649 
	#AT91C_ADC_TRGSEL_TIOA0
 (() 0x0 << 1)

1650 
	#AT91C_ADC_TRGSEL_TIOA1
 (() 0x1 << 1)

1651 
	#AT91C_ADC_TRGSEL_TIOA2
 (() 0x2 << 1)

1652 
	#AT91C_ADC_TRGSEL_TIOA3
 (() 0x3 << 1)

1653 
	#AT91C_ADC_TRGSEL_TIOA4
 (() 0x4 << 1)

1654 
	#AT91C_ADC_TRGSEL_TIOA5
 (() 0x5 << 1)

1655 
	#AT91C_ADC_TRGSEL_EXT
 (() 0x6 << 1)

1656 
	#AT91C_ADC_LOWRES
 (() 0x1 << 4)

1657 
	#AT91C_ADC_LOWRES_10_BIT
 (() 0x0 << 4)

1658 
	#AT91C_ADC_LOWRES_8_BIT
 (() 0x1 << 4)

1659 
	#AT91C_ADC_SLEEP
 (() 0x1 << 5)

1660 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (() 0x0 << 5)

1661 
	#AT91C_ADC_SLEEP_MODE
 (() 0x1 << 5)

1662 
	#AT91C_ADC_PRESCAL
 (() 0x3F << 8)

1663 
	#AT91C_ADC_STARTUP
 (() 0x1F << 16)

1664 
	#AT91C_ADC_SHTIM
 (() 0xF << 24)

1666 
	#AT91C_ADC_CH0
 (() 0x1 << 0)

1667 
	#AT91C_ADC_CH1
 (() 0x1 << 1)

1668 
	#AT91C_ADC_CH2
 (() 0x1 << 2)

1669 
	#AT91C_ADC_CH3
 (() 0x1 << 3)

1670 
	#AT91C_ADC_CH4
 (() 0x1 << 4)

1671 
	#AT91C_ADC_CH5
 (() 0x1 << 5)

1672 
	#AT91C_ADC_CH6
 (() 0x1 << 6)

1673 
	#AT91C_ADC_CH7
 (() 0x1 << 7)

1677 
	#AT91C_ADC_EOC0
 (() 0x1 << 0)

1678 
	#AT91C_ADC_EOC1
 (() 0x1 << 1)

1679 
	#AT91C_ADC_EOC2
 (() 0x1 << 2)

1680 
	#AT91C_ADC_EOC3
 (() 0x1 << 3)

1681 
	#AT91C_ADC_EOC4
 (() 0x1 << 4)

1682 
	#AT91C_ADC_EOC5
 (() 0x1 << 5)

1683 
	#AT91C_ADC_EOC6
 (() 0x1 << 6)

1684 
	#AT91C_ADC_EOC7
 (() 0x1 << 7)

1685 
	#AT91C_ADC_OVRE0
 (() 0x1 << 8)

1686 
	#AT91C_ADC_OVRE1
 (() 0x1 << 9)

1687 
	#AT91C_ADC_OVRE2
 (() 0x1 << 10)

1688 
	#AT91C_ADC_OVRE3
 (() 0x1 << 11)

1689 
	#AT91C_ADC_OVRE4
 (() 0x1 << 12)

1690 
	#AT91C_ADC_OVRE5
 (() 0x1 << 13)

1691 
	#AT91C_ADC_OVRE6
 (() 0x1 << 14)

1692 
	#AT91C_ADC_OVRE7
 (() 0x1 << 15)

1693 
	#AT91C_ADC_DRDY
 (() 0x1 << 16)

1694 
	#AT91C_ADC_GOVRE
 (() 0x1 << 17)

1695 
	#AT91C_ADC_ENDRX
 (() 0x1 << 18)

1696 
	#AT91C_ADC_RXBUFF
 (() 0x1 << 19)

1698 
	#AT91C_ADC_LDATA
 (() 0x3FF << 0)

1703 
	#AT91C_ADC_DATA
 (() 0x3FF << 0)

1711 

	)

1715 
	s_AT91S_AES
 {

1716 
AT91_REG
 
	mAES_CR
;

1717 
AT91_REG
 
	mAES_MR
;

1718 
AT91_REG
 
	mRe£rved0
[2];

1719 
AT91_REG
 
	mAES_IER
;

1720 
AT91_REG
 
	mAES_IDR
;

1721 
AT91_REG
 
	mAES_IMR
;

1722 
AT91_REG
 
	mAES_ISR
;

1723 
AT91_REG
 
	mAES_KEYWxR
[4];

1724 
AT91_REG
 
	mRe£rved1
[4];

1725 
AT91_REG
 
	mAES_IDATAxR
[4];

1726 
AT91_REG
 
	mAES_ODATAxR
[4];

1727 
AT91_REG
 
	mAES_IVxR
[4];

1728 
AT91_REG
 
	mRe£rved2
[35];

1729 
AT91_REG
 
	mAES_VR
;

1730 
AT91_REG
 
	mAES_RPR
;

1731 
AT91_REG
 
	mAES_RCR
;

1732 
AT91_REG
 
	mAES_TPR
;

1733 
AT91_REG
 
	mAES_TCR
;

1734 
AT91_REG
 
	mAES_RNPR
;

1735 
AT91_REG
 
	mAES_RNCR
;

1736 
AT91_REG
 
	mAES_TNPR
;

1737 
AT91_REG
 
	mAES_TNCR
;

1738 
AT91_REG
 
	mAES_PTCR
;

1739 
AT91_REG
 
	mAES_PTSR
;

1740 } 
	tAT91S_AES
, *
	tAT91PS_AES
;

1743 
	#AT91C_AES_START
 (() 0x1 << 0)

1744 
	#AT91C_AES_SWRST
 (() 0x1 << 8)

1745 
	#AT91C_AES_LOADSEED
 (() 0x1 << 16)

1747 
	#AT91C_AES_CIPHER
 (() 0x1 << 0)

1748 
	#AT91C_AES_PROCDLY
 (() 0xF << 4)

1749 
	#AT91C_AES_SMOD
 (() 0x3 << 8)

1750 
	#AT91C_AES_SMOD_MANUAL
 (() 0x0 << 8)

1751 
	#AT91C_AES_SMOD_AUTO
 (() 0x1 << 8)

1752 
	#AT91C_AES_SMOD_PDC
 (() 0x2 << 8)

1753 
	#AT91C_AES_OPMOD
 (() 0x7 << 12)

1754 
	#AT91C_AES_OPMOD_ECB
 (() 0x0 << 12)

1755 
	#AT91C_AES_OPMOD_CBC
 (() 0x1 << 12)

1756 
	#AT91C_AES_OPMOD_OFB
 (() 0x2 << 12)

1757 
	#AT91C_AES_OPMOD_CFB
 (() 0x3 << 12)

1758 
	#AT91C_AES_OPMOD_CTR
 (() 0x4 << 12)

1759 
	#AT91C_AES_LOD
 (() 0x1 << 15)

1760 
	#AT91C_AES_CFBS
 (() 0x7 << 16)

1761 
	#AT91C_AES_CFBS_128_BIT
 (() 0x0 << 16)

1762 
	#AT91C_AES_CFBS_64_BIT
 (() 0x1 << 16)

1763 
	#AT91C_AES_CFBS_32_BIT
 (() 0x2 << 16)

1764 
	#AT91C_AES_CFBS_16_BIT
 (() 0x3 << 16)

1765 
	#AT91C_AES_CFBS_8_BIT
 (() 0x4 << 16)

1766 
	#AT91C_AES_CKEY
 (() 0xF << 20)

1767 
	#AT91C_AES_CTYPE
 (() 0x1F << 24)

1768 
	#AT91C_AES_CTYPE_TYPE1_EN
 (() 0x1 << 24)

1769 
	#AT91C_AES_CTYPE_TYPE2_EN
 (() 0x2 << 24)

1770 
	#AT91C_AES_CTYPE_TYPE3_EN
 (() 0x4 << 24)

1771 
	#AT91C_AES_CTYPE_TYPE4_EN
 (() 0x8 << 24)

1772 
	#AT91C_AES_CTYPE_TYPE5_EN
 (() 0x10 << 24)

1774 
	#AT91C_AES_DATRDY
 (() 0x1 << 0)

1775 
	#AT91C_AES_ENDRX
 (() 0x1 << 1)

1776 
	#AT91C_AES_ENDTX
 (() 0x1 << 2)

1777 
	#AT91C_AES_RXBUFF
 (() 0x1 << 3)

1778 
	#AT91C_AES_TXBUFE
 (() 0x1 << 4)

1779 
	#AT91C_AES_URAD
 (() 0x1 << 8)

1783 
	#AT91C_AES_URAT
 (() 0x7 << 12)

1784 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1785 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1786 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1787 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (() 0x3 << 12)

1788 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (() 0x4 << 12)

1789 
	#AT91C_AES_URAT_WO_REG_READ
 (() 0x5 << 12)

1790 

	)

1794 
	s_AT91S_TDES
 {

1795 
AT91_REG
 
	mTDES_CR
;

1796 
AT91_REG
 
	mTDES_MR
;

1797 
AT91_REG
 
	mRe£rved0
[2];

1798 
AT91_REG
 
	mTDES_IER
;

1799 
AT91_REG
 
	mTDES_IDR
;

1800 
AT91_REG
 
	mTDES_IMR
;

1801 
AT91_REG
 
	mTDES_ISR
;

1802 
AT91_REG
 
	mTDES_KEY1WxR
[2];

1803 
AT91_REG
 
	mTDES_KEY2WxR
[2];

1804 
AT91_REG
 
	mTDES_KEY3WxR
[2];

1805 
AT91_REG
 
	mRe£rved1
[2];

1806 
AT91_REG
 
	mTDES_IDATAxR
[2];

1807 
AT91_REG
 
	mRe£rved2
[2];

1808 
AT91_REG
 
	mTDES_ODATAxR
[2];

1809 
AT91_REG
 
	mRe£rved3
[2];

1810 
AT91_REG
 
	mTDES_IVxR
[2];

1811 
AT91_REG
 
	mRe£rved4
[37];

1812 
AT91_REG
 
	mTDES_VR
;

1813 
AT91_REG
 
	mTDES_RPR
;

1814 
AT91_REG
 
	mTDES_RCR
;

1815 
AT91_REG
 
	mTDES_TPR
;

1816 
AT91_REG
 
	mTDES_TCR
;

1817 
AT91_REG
 
	mTDES_RNPR
;

1818 
AT91_REG
 
	mTDES_RNCR
;

1819 
AT91_REG
 
	mTDES_TNPR
;

1820 
AT91_REG
 
	mTDES_TNCR
;

1821 
AT91_REG
 
	mTDES_PTCR
;

1822 
AT91_REG
 
	mTDES_PTSR
;

1823 } 
	tAT91S_TDES
, *
	tAT91PS_TDES
;

1826 
	#AT91C_TDES_START
 (() 0x1 << 0)

1827 
	#AT91C_TDES_SWRST
 (() 0x1 << 8)

1829 
	#AT91C_TDES_CIPHER
 (() 0x1 << 0)

1830 
	#AT91C_TDES_TDESMOD
 (() 0x1 << 1)

1831 
	#AT91C_TDES_KEYMOD
 (() 0x1 << 4)

1832 
	#AT91C_TDES_SMOD
 (() 0x3 << 8)

1833 
	#AT91C_TDES_SMOD_MANUAL
 (() 0x0 << 8)

1834 
	#AT91C_TDES_SMOD_AUTO
 (() 0x1 << 8)

1835 
	#AT91C_TDES_SMOD_PDC
 (() 0x2 << 8)

1836 
	#AT91C_TDES_OPMOD
 (() 0x3 << 12)

1837 
	#AT91C_TDES_OPMOD_ECB
 (() 0x0 << 12)

1838 
	#AT91C_TDES_OPMOD_CBC
 (() 0x1 << 12)

1839 
	#AT91C_TDES_OPMOD_OFB
 (() 0x2 << 12)

1840 
	#AT91C_TDES_OPMOD_CFB
 (() 0x3 << 12)

1841 
	#AT91C_TDES_LOD
 (() 0x1 << 15)

1842 
	#AT91C_TDES_CFBS
 (() 0x3 << 16)

1843 
	#AT91C_TDES_CFBS_64_BIT
 (() 0x0 << 16)

1844 
	#AT91C_TDES_CFBS_32_BIT
 (() 0x1 << 16)

1845 
	#AT91C_TDES_CFBS_16_BIT
 (() 0x2 << 16)

1846 
	#AT91C_TDES_CFBS_8_BIT
 (() 0x3 << 16)

1848 
	#AT91C_TDES_DATRDY
 (() 0x1 << 0)

1849 
	#AT91C_TDES_ENDRX
 (() 0x1 << 1)

1850 
	#AT91C_TDES_ENDTX
 (() 0x1 << 2)

1851 
	#AT91C_TDES_RXBUFF
 (() 0x1 << 3)

1852 
	#AT91C_TDES_TXBUFE
 (() 0x1 << 4)

1853 
	#AT91C_TDES_URAD
 (() 0x1 << 8)

1857 
	#AT91C_TDES_URAT
 (() 0x3 << 12)

1858 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1859 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1860 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1861 
	#AT91C_TDES_URAT_WO_REG_READ
 (() 0x3 << 12)

1862 

	)

1868 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1869 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1870 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1871 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1872 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1873 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1874 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1875 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1876 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1877 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1878 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1879 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1880 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1881 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1882 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1883 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1884 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1885 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1887 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1888 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1889 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1890 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1891 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1892 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1893 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1894 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1895 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1896 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1898 
	#AT91C_DBGU_EXID
 ((
AT91_REG
 *) 0xFFFFF244)

1899 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1900 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1901 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1902 
	#AT91C_DBGU_CIDR
 ((
AT91_REG
 *) 0xFFFFF240)

1903 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1904 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1905 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1906 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1907 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1908 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1909 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1911 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1912 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1913 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1914 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1915 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1916 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1917 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1918 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1919 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1920 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1921 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1922 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1923 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1924 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1925 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1926 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1927 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1928 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1929 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1930 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1931 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1932 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1933 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1934 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1935 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1936 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1937 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1938 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1939 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1941 
	#AT91C_PIOB_OWDR
 ((
AT91_REG
 *) 0xFFFFF6A4)

1942 
	#AT91C_PIOB_MDER
 ((
AT91_REG
 *) 0xFFFFF650)

1943 
	#AT91C_PIOB_PPUSR
 ((
AT91_REG
 *) 0xFFFFF668)

1944 
	#AT91C_PIOB_IMR
 ((
AT91_REG
 *) 0xFFFFF648)

1945 
	#AT91C_PIOB_ASR
 ((
AT91_REG
 *) 0xFFFFF670)

1946 
	#AT91C_PIOB_PPUDR
 ((
AT91_REG
 *) 0xFFFFF660)

1947 
	#AT91C_PIOB_PSR
 ((
AT91_REG
 *) 0xFFFFF608)

1948 
	#AT91C_PIOB_IER
 ((
AT91_REG
 *) 0xFFFFF640)

1949 
	#AT91C_PIOB_CODR
 ((
AT91_REG
 *) 0xFFFFF634)

1950 
	#AT91C_PIOB_OWER
 ((
AT91_REG
 *) 0xFFFFF6A0)

1951 
	#AT91C_PIOB_ABSR
 ((
AT91_REG
 *) 0xFFFFF678)

1952 
	#AT91C_PIOB_IFDR
 ((
AT91_REG
 *) 0xFFFFF624)

1953 
	#AT91C_PIOB_PDSR
 ((
AT91_REG
 *) 0xFFFFF63C)

1954 
	#AT91C_PIOB_IDR
 ((
AT91_REG
 *) 0xFFFFF644)

1955 
	#AT91C_PIOB_OWSR
 ((
AT91_REG
 *) 0xFFFFF6A8)

1956 
	#AT91C_PIOB_PDR
 ((
AT91_REG
 *) 0xFFFFF604)

1957 
	#AT91C_PIOB_ODR
 ((
AT91_REG
 *) 0xFFFFF614)

1958 
	#AT91C_PIOB_IFSR
 ((
AT91_REG
 *) 0xFFFFF628)

1959 
	#AT91C_PIOB_PPUER
 ((
AT91_REG
 *) 0xFFFFF664)

1960 
	#AT91C_PIOB_SODR
 ((
AT91_REG
 *) 0xFFFFF630)

1961 
	#AT91C_PIOB_ISR
 ((
AT91_REG
 *) 0xFFFFF64C)

1962 
	#AT91C_PIOB_ODSR
 ((
AT91_REG
 *) 0xFFFFF638)

1963 
	#AT91C_PIOB_OSR
 ((
AT91_REG
 *) 0xFFFFF618)

1964 
	#AT91C_PIOB_MDSR
 ((
AT91_REG
 *) 0xFFFFF658)

1965 
	#AT91C_PIOB_IFER
 ((
AT91_REG
 *) 0xFFFFF620)

1966 
	#AT91C_PIOB_BSR
 ((
AT91_REG
 *) 0xFFFFF674)

1967 
	#AT91C_PIOB_MDDR
 ((
AT91_REG
 *) 0xFFFFF654)

1968 
	#AT91C_PIOB_OER
 ((
AT91_REG
 *) 0xFFFFF610)

1969 
	#AT91C_PIOB_PER
 ((
AT91_REG
 *) 0xFFFFF600)

1971 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1972 
	#AT91C_CKGR_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1973 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1975 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1976 
	#AT91C_PMC_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1977 
	#AT91C_PMC_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1978 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1979 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1980 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1981 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1982 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1983 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1984 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1985 
	#AT91C_PMC_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1986 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1987 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1988 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1989 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1991 
	#AT91C_RSTC_RCR
 ((
AT91_REG
 *) 0xFFFFFD00)

1992 
	#AT91C_RSTC_RMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1993 
	#AT91C_RSTC_RSR
 ((
AT91_REG
 *) 0xFFFFFD04)

1995 
	#AT91C_RTTC_RTSR
 ((
AT91_REG
 *) 0xFFFFFD2C)

1996 
	#AT91C_RTTC_RTMR
 ((
AT91_REG
 *) 0xFFFFFD20)

1997 
	#AT91C_RTTC_RTVR
 ((
AT91_REG
 *) 0xFFFFFD28)

1998 
	#AT91C_RTTC_RTAR
 ((
AT91_REG
 *) 0xFFFFFD24)

2000 
	#AT91C_PITC_PIVR
 ((
AT91_REG
 *) 0xFFFFFD38)

2001 
	#AT91C_PITC_PISR
 ((
AT91_REG
 *) 0xFFFFFD34)

2002 
	#AT91C_PITC_PIIR
 ((
AT91_REG
 *) 0xFFFFFD3C)

2003 
	#AT91C_PITC_PIMR
 ((
AT91_REG
 *) 0xFFFFFD30)

2005 
	#AT91C_WDTC_WDCR
 ((
AT91_REG
 *) 0xFFFFFD40)

2006 
	#AT91C_WDTC_WDSR
 ((
AT91_REG
 *) 0xFFFFFD48)

2007 
	#AT91C_WDTC_WDMR
 ((
AT91_REG
 *) 0xFFFFFD44)

2009 
	#AT91C_VREG_MR
 ((
AT91_REG
 *) 0xFFFFFD60)

2011 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

2012 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

2013 
	#AT91C_MC_FCR
 ((
AT91_REG
 *) 0xFFFFFF64)

2014 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

2015 
	#AT91C_MC_FSR
 ((
AT91_REG
 *) 0xFFFFFF68)

2016 
	#AT91C_MC_FMR
 ((
AT91_REG
 *) 0xFFFFFF60)

2018 
	#AT91C_SPI1_PTCR
 ((
AT91_REG
 *) 0xFFFE4120)

2019 
	#AT91C_SPI1_RPR
 ((
AT91_REG
 *) 0xFFFE4100)

2020 
	#AT91C_SPI1_TNCR
 ((
AT91_REG
 *) 0xFFFE411C)

2021 
	#AT91C_SPI1_TPR
 ((
AT91_REG
 *) 0xFFFE4108)

2022 
	#AT91C_SPI1_TNPR
 ((
AT91_REG
 *) 0xFFFE4118)

2023 
	#AT91C_SPI1_TCR
 ((
AT91_REG
 *) 0xFFFE410C)

2024 
	#AT91C_SPI1_RCR
 ((
AT91_REG
 *) 0xFFFE4104)

2025 
	#AT91C_SPI1_RNPR
 ((
AT91_REG
 *) 0xFFFE4110)

2026 
	#AT91C_SPI1_RNCR
 ((
AT91_REG
 *) 0xFFFE4114)

2027 
	#AT91C_SPI1_PTSR
 ((
AT91_REG
 *) 0xFFFE4124)

2029 
	#AT91C_SPI1_IMR
 ((
AT91_REG
 *) 0xFFFE401C)

2030 
	#AT91C_SPI1_IER
 ((
AT91_REG
 *) 0xFFFE4014)

2031 
	#AT91C_SPI1_MR
 ((
AT91_REG
 *) 0xFFFE4004)

2032 
	#AT91C_SPI1_RDR
 ((
AT91_REG
 *) 0xFFFE4008)

2033 
	#AT91C_SPI1_IDR
 ((
AT91_REG
 *) 0xFFFE4018)

2034 
	#AT91C_SPI1_SR
 ((
AT91_REG
 *) 0xFFFE4010)

2035 
	#AT91C_SPI1_TDR
 ((
AT91_REG
 *) 0xFFFE400C)

2036 
	#AT91C_SPI1_CR
 ((
AT91_REG
 *) 0xFFFE4000)

2037 
	#AT91C_SPI1_CSR
 ((
AT91_REG
 *) 0xFFFE4030)

2039 
	#AT91C_SPI0_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

2040 
	#AT91C_SPI0_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

2041 
	#AT91C_SPI0_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

2042 
	#AT91C_SPI0_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

2043 
	#AT91C_SPI0_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

2044 
	#AT91C_SPI0_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

2045 
	#AT91C_SPI0_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

2046 
	#AT91C_SPI0_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

2047 
	#AT91C_SPI0_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

2048 
	#AT91C_SPI0_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

2050 
	#AT91C_SPI0_IER
 ((
AT91_REG
 *) 0xFFFE0014)

2051 
	#AT91C_SPI0_SR
 ((
AT91_REG
 *) 0xFFFE0010)

2052 
	#AT91C_SPI0_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

2053 
	#AT91C_SPI0_CR
 ((
AT91_REG
 *) 0xFFFE0000)

2054 
	#AT91C_SPI0_MR
 ((
AT91_REG
 *) 0xFFFE0004)

2055 
	#AT91C_SPI0_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

2056 
	#AT91C_SPI0_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

2057 
	#AT91C_SPI0_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

2058 
	#AT91C_SPI0_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

2060 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

2061 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

2062 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

2063 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

2064 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

2065 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

2066 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

2067 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

2068 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

2069 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

2071 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

2072 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

2073 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

2074 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

2075 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

2076 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

2077 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

2078 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

2079 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

2080 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

2081 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

2082 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

2083 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

2084 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

2086 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

2087 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

2088 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

2089 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

2090 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

2091 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

2092 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

2093 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

2094 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

2095 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

2097 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

2098 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

2099 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

2100 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

2101 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

2102 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

2103 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

2104 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

2105 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

2106 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

2107 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

2108 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

2109 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

2110 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

2112 
	#AT91C_SSC_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

2113 
	#AT91C_SSC_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

2114 
	#AT91C_SSC_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

2115 
	#AT91C_SSC_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

2116 
	#AT91C_SSC_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

2117 
	#AT91C_SSC_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

2118 
	#AT91C_SSC_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

2119 
	#AT91C_SSC_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

2120 
	#AT91C_SSC_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

2121 
	#AT91C_SSC_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

2123 
	#AT91C_SSC_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

2124 
	#AT91C_SSC_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

2125 
	#AT91C_SSC_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

2126 
	#AT91C_SSC_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

2127 
	#AT91C_SSC_THR
 ((
AT91_REG
 *) 0xFFFD4024)

2128 
	#AT91C_SSC_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

2129 
	#AT91C_SSC_IER
 ((
AT91_REG
 *) 0xFFFD4044)

2130 
	#AT91C_SSC_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

2131 
	#AT91C_SSC_SR
 ((
AT91_REG
 *) 0xFFFD4040)

2132 
	#AT91C_SSC_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

2133 
	#AT91C_SSC_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

2134 
	#AT91C_SSC_CR
 ((
AT91_REG
 *) 0xFFFD4000)

2135 
	#AT91C_SSC_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

2136 
	#AT91C_SSC_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

2138 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

2139 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

2140 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

2141 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

2142 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

2143 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

2144 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

2145 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

2146 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

2147 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

2149 
	#AT91C_PWMC_CH3_CUPDR
 ((
AT91_REG
 *) 0xFFFCC270)

2150 
	#AT91C_PWMC_CH3_Re£rved
 ((
AT91_REG
 *) 0xFFFCC274)

2151 
	#AT91C_PWMC_CH3_CPRDR
 ((
AT91_REG
 *) 0xFFFCC268)

2152 
	#AT91C_PWMC_CH3_CDTYR
 ((
AT91_REG
 *) 0xFFFCC264)

2153 
	#AT91C_PWMC_CH3_CCNTR
 ((
AT91_REG
 *) 0xFFFCC26C)

2154 
	#AT91C_PWMC_CH3_CMR
 ((
AT91_REG
 *) 0xFFFCC260)

2156 
	#AT91C_PWMC_CH2_Re£rved
 ((
AT91_REG
 *) 0xFFFCC254)

2157 
	#AT91C_PWMC_CH2_CMR
 ((
AT91_REG
 *) 0xFFFCC240)

2158 
	#AT91C_PWMC_CH2_CCNTR
 ((
AT91_REG
 *) 0xFFFCC24C)

2159 
	#AT91C_PWMC_CH2_CPRDR
 ((
AT91_REG
 *) 0xFFFCC248)

2160 
	#AT91C_PWMC_CH2_CUPDR
 ((
AT91_REG
 *) 0xFFFCC250)

2161 
	#AT91C_PWMC_CH2_CDTYR
 ((
AT91_REG
 *) 0xFFFCC244)

2163 
	#AT91C_PWMC_CH1_Re£rved
 ((
AT91_REG
 *) 0xFFFCC234)

2164 
	#AT91C_PWMC_CH1_CUPDR
 ((
AT91_REG
 *) 0xFFFCC230)

2165 
	#AT91C_PWMC_CH1_CPRDR
 ((
AT91_REG
 *) 0xFFFCC228)

2166 
	#AT91C_PWMC_CH1_CCNTR
 ((
AT91_REG
 *) 0xFFFCC22C)

2167 
	#AT91C_PWMC_CH1_CDTYR
 ((
AT91_REG
 *) 0xFFFCC224)

2168 
	#AT91C_PWMC_CH1_CMR
 ((
AT91_REG
 *) 0xFFFCC220)

2170 
	#AT91C_PWMC_CH0_Re£rved
 ((
AT91_REG
 *) 0xFFFCC214)

2171 
	#AT91C_PWMC_CH0_CPRDR
 ((
AT91_REG
 *) 0xFFFCC208)

2172 
	#AT91C_PWMC_CH0_CDTYR
 ((
AT91_REG
 *) 0xFFFCC204)

2173 
	#AT91C_PWMC_CH0_CMR
 ((
AT91_REG
 *) 0xFFFCC200)

2174 
	#AT91C_PWMC_CH0_CUPDR
 ((
AT91_REG
 *) 0xFFFCC210)

2175 
	#AT91C_PWMC_CH0_CCNTR
 ((
AT91_REG
 *) 0xFFFCC20C)

2177 
	#AT91C_PWMC_IDR
 ((
AT91_REG
 *) 0xFFFCC014)

2178 
	#AT91C_PWMC_DIS
 ((
AT91_REG
 *) 0xFFFCC008)

2179 
	#AT91C_PWMC_IER
 ((
AT91_REG
 *) 0xFFFCC010)

2180 
	#AT91C_PWMC_VR
 ((
AT91_REG
 *) 0xFFFCC0FC)

2181 
	#AT91C_PWMC_ISR
 ((
AT91_REG
 *) 0xFFFCC01C)

2182 
	#AT91C_PWMC_SR
 ((
AT91_REG
 *) 0xFFFCC00C)

2183 
	#AT91C_PWMC_IMR
 ((
AT91_REG
 *) 0xFFFCC018)

2184 
	#AT91C_PWMC_MR
 ((
AT91_REG
 *) 0xFFFCC000)

2185 
	#AT91C_PWMC_ENA
 ((
AT91_REG
 *) 0xFFFCC004)

2187 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

2188 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

2189 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

2190 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

2191 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

2192 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

2193 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

2194 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

2195 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

2196 
	#AT91C_UDP_TXVC
 ((
AT91_REG
 *) 0xFFFB0074)

2197 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

2198 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

2200 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

2201 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

2202 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

2203 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

2204 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

2205 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

2206 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

2207 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

2208 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

2209 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

2211 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

2212 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

2213 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

2214 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

2215 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

2216 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

2217 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

2218 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

2219 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

2220 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

2222 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

2223 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

2224 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

2225 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

2226 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

2227 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

2228 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

2229 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

2230 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

2231 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

2233 
	#AT91C_TCB_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

2234 
	#AT91C_TCB_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

2236 
	#AT91C_CAN_MB0_MDL
 ((
AT91_REG
 *) 0xFFFD0214)

2237 
	#AT91C_CAN_MB0_MAM
 ((
AT91_REG
 *) 0xFFFD0204)

2238 
	#AT91C_CAN_MB0_MCR
 ((
AT91_REG
 *) 0xFFFD021C)

2239 
	#AT91C_CAN_MB0_MID
 ((
AT91_REG
 *) 0xFFFD0208)

2240 
	#AT91C_CAN_MB0_MSR
 ((
AT91_REG
 *) 0xFFFD0210)

2241 
	#AT91C_CAN_MB0_MFID
 ((
AT91_REG
 *) 0xFFFD020C)

2242 
	#AT91C_CAN_MB0_MDH
 ((
AT91_REG
 *) 0xFFFD0218)

2243 
	#AT91C_CAN_MB0_MMR
 ((
AT91_REG
 *) 0xFFFD0200)

2245 
	#AT91C_CAN_MB1_MDL
 ((
AT91_REG
 *) 0xFFFD0234)

2246 
	#AT91C_CAN_MB1_MID
 ((
AT91_REG
 *) 0xFFFD0228)

2247 
	#AT91C_CAN_MB1_MMR
 ((
AT91_REG
 *) 0xFFFD0220)

2248 
	#AT91C_CAN_MB1_MSR
 ((
AT91_REG
 *) 0xFFFD0230)

2249 
	#AT91C_CAN_MB1_MAM
 ((
AT91_REG
 *) 0xFFFD0224)

2250 
	#AT91C_CAN_MB1_MDH
 ((
AT91_REG
 *) 0xFFFD0238)

2251 
	#AT91C_CAN_MB1_MCR
 ((
AT91_REG
 *) 0xFFFD023C)

2252 
	#AT91C_CAN_MB1_MFID
 ((
AT91_REG
 *) 0xFFFD022C)

2254 
	#AT91C_CAN_MB2_MCR
 ((
AT91_REG
 *) 0xFFFD025C)

2255 
	#AT91C_CAN_MB2_MDH
 ((
AT91_REG
 *) 0xFFFD0258)

2256 
	#AT91C_CAN_MB2_MID
 ((
AT91_REG
 *) 0xFFFD0248)

2257 
	#AT91C_CAN_MB2_MDL
 ((
AT91_REG
 *) 0xFFFD0254)

2258 
	#AT91C_CAN_MB2_MMR
 ((
AT91_REG
 *) 0xFFFD0240)

2259 
	#AT91C_CAN_MB2_MAM
 ((
AT91_REG
 *) 0xFFFD0244)

2260 
	#AT91C_CAN_MB2_MFID
 ((
AT91_REG
 *) 0xFFFD024C)

2261 
	#AT91C_CAN_MB2_MSR
 ((
AT91_REG
 *) 0xFFFD0250)

2263 
	#AT91C_CAN_MB3_MFID
 ((
AT91_REG
 *) 0xFFFD026C)

2264 
	#AT91C_CAN_MB3_MAM
 ((
AT91_REG
 *) 0xFFFD0264)

2265 
	#AT91C_CAN_MB3_MID
 ((
AT91_REG
 *) 0xFFFD0268)

2266 
	#AT91C_CAN_MB3_MCR
 ((
AT91_REG
 *) 0xFFFD027C)

2267 
	#AT91C_CAN_MB3_MMR
 ((
AT91_REG
 *) 0xFFFD0260)

2268 
	#AT91C_CAN_MB3_MSR
 ((
AT91_REG
 *) 0xFFFD0270)

2269 
	#AT91C_CAN_MB3_MDL
 ((
AT91_REG
 *) 0xFFFD0274)

2270 
	#AT91C_CAN_MB3_MDH
 ((
AT91_REG
 *) 0xFFFD0278)

2272 
	#AT91C_CAN_MB4_MID
 ((
AT91_REG
 *) 0xFFFD0288)

2273 
	#AT91C_CAN_MB4_MMR
 ((
AT91_REG
 *) 0xFFFD0280)

2274 
	#AT91C_CAN_MB4_MDH
 ((
AT91_REG
 *) 0xFFFD0298)

2275 
	#AT91C_CAN_MB4_MFID
 ((
AT91_REG
 *) 0xFFFD028C)

2276 
	#AT91C_CAN_MB4_MSR
 ((
AT91_REG
 *) 0xFFFD0290)

2277 
	#AT91C_CAN_MB4_MCR
 ((
AT91_REG
 *) 0xFFFD029C)

2278 
	#AT91C_CAN_MB4_MDL
 ((
AT91_REG
 *) 0xFFFD0294)

2279 
	#AT91C_CAN_MB4_MAM
 ((
AT91_REG
 *) 0xFFFD0284)

2281 
	#AT91C_CAN_MB5_MSR
 ((
AT91_REG
 *) 0xFFFD02B0)

2282 
	#AT91C_CAN_MB5_MCR
 ((
AT91_REG
 *) 0xFFFD02BC)

2283 
	#AT91C_CAN_MB5_MFID
 ((
AT91_REG
 *) 0xFFFD02AC)

2284 
	#AT91C_CAN_MB5_MDH
 ((
AT91_REG
 *) 0xFFFD02B8)

2285 
	#AT91C_CAN_MB5_MID
 ((
AT91_REG
 *) 0xFFFD02A8)

2286 
	#AT91C_CAN_MB5_MMR
 ((
AT91_REG
 *) 0xFFFD02A0)

2287 
	#AT91C_CAN_MB5_MDL
 ((
AT91_REG
 *) 0xFFFD02B4)

2288 
	#AT91C_CAN_MB5_MAM
 ((
AT91_REG
 *) 0xFFFD02A4)

2290 
	#AT91C_CAN_MB6_MFID
 ((
AT91_REG
 *) 0xFFFD02CC)

2291 
	#AT91C_CAN_MB6_MID
 ((
AT91_REG
 *) 0xFFFD02C8)

2292 
	#AT91C_CAN_MB6_MAM
 ((
AT91_REG
 *) 0xFFFD02C4)

2293 
	#AT91C_CAN_MB6_MSR
 ((
AT91_REG
 *) 0xFFFD02D0)

2294 
	#AT91C_CAN_MB6_MDL
 ((
AT91_REG
 *) 0xFFFD02D4)

2295 
	#AT91C_CAN_MB6_MCR
 ((
AT91_REG
 *) 0xFFFD02DC)

2296 
	#AT91C_CAN_MB6_MDH
 ((
AT91_REG
 *) 0xFFFD02D8)

2297 
	#AT91C_CAN_MB6_MMR
 ((
AT91_REG
 *) 0xFFFD02C0)

2299 
	#AT91C_CAN_MB7_MCR
 ((
AT91_REG
 *) 0xFFFD02FC)

2300 
	#AT91C_CAN_MB7_MDH
 ((
AT91_REG
 *) 0xFFFD02F8)

2301 
	#AT91C_CAN_MB7_MFID
 ((
AT91_REG
 *) 0xFFFD02EC)

2302 
	#AT91C_CAN_MB7_MDL
 ((
AT91_REG
 *) 0xFFFD02F4)

2303 
	#AT91C_CAN_MB7_MID
 ((
AT91_REG
 *) 0xFFFD02E8)

2304 
	#AT91C_CAN_MB7_MMR
 ((
AT91_REG
 *) 0xFFFD02E0)

2305 
	#AT91C_CAN_MB7_MAM
 ((
AT91_REG
 *) 0xFFFD02E4)

2306 
	#AT91C_CAN_MB7_MSR
 ((
AT91_REG
 *) 0xFFFD02F0)

2308 
	#AT91C_CAN_TCR
 ((
AT91_REG
 *) 0xFFFD0024)

2309 
	#AT91C_CAN_IMR
 ((
AT91_REG
 *) 0xFFFD000C)

2310 
	#AT91C_CAN_IER
 ((
AT91_REG
 *) 0xFFFD0004)

2311 
	#AT91C_CAN_ECR
 ((
AT91_REG
 *) 0xFFFD0020)

2312 
	#AT91C_CAN_TIMESTP
 ((
AT91_REG
 *) 0xFFFD001C)

2313 
	#AT91C_CAN_MR
 ((
AT91_REG
 *) 0xFFFD0000)

2314 
	#AT91C_CAN_IDR
 ((
AT91_REG
 *) 0xFFFD0008)

2315 
	#AT91C_CAN_ACR
 ((
AT91_REG
 *) 0xFFFD0028)

2316 
	#AT91C_CAN_TIM
 ((
AT91_REG
 *) 0xFFFD0018)

2317 
	#AT91C_CAN_SR
 ((
AT91_REG
 *) 0xFFFD0010)

2318 
	#AT91C_CAN_BR
 ((
AT91_REG
 *) 0xFFFD0014)

2319 
	#AT91C_CAN_VR
 ((
AT91_REG
 *) 0xFFFD00FC)

2321 
	#AT91C_EMAC_ISR
 ((
AT91_REG
 *) 0xFFFDC024)

2322 
	#AT91C_EMAC_SA4H
 ((
AT91_REG
 *) 0xFFFDC0B4)

2323 
	#AT91C_EMAC_SA1L
 ((
AT91_REG
 *) 0xFFFDC098)

2324 
	#AT91C_EMAC_ELE
 ((
AT91_REG
 *) 0xFFFDC078)

2325 
	#AT91C_EMAC_LCOL
 ((
AT91_REG
 *) 0xFFFDC05C)

2326 
	#AT91C_EMAC_RLE
 ((
AT91_REG
 *) 0xFFFDC088)

2327 
	#AT91C_EMAC_WOL
 ((
AT91_REG
 *) 0xFFFDC0C4)

2328 
	#AT91C_EMAC_DTF
 ((
AT91_REG
 *) 0xFFFDC058)

2329 
	#AT91C_EMAC_TUND
 ((
AT91_REG
 *) 0xFFFDC064)

2330 
	#AT91C_EMAC_NCR
 ((
AT91_REG
 *) 0xFFFDC000)

2331 
	#AT91C_EMAC_SA4L
 ((
AT91_REG
 *) 0xFFFDC0B0)

2332 
	#AT91C_EMAC_RSR
 ((
AT91_REG
 *) 0xFFFDC020)

2333 
	#AT91C_EMAC_SA3L
 ((
AT91_REG
 *) 0xFFFDC0A8)

2334 
	#AT91C_EMAC_TSR
 ((
AT91_REG
 *) 0xFFFDC014)

2335 
	#AT91C_EMAC_IDR
 ((
AT91_REG
 *) 0xFFFDC02C)

2336 
	#AT91C_EMAC_RSE
 ((
AT91_REG
 *) 0xFFFDC074)

2337 
	#AT91C_EMAC_ECOL
 ((
AT91_REG
 *) 0xFFFDC060)

2338 
	#AT91C_EMAC_TID
 ((
AT91_REG
 *) 0xFFFDC0B8)

2339 
	#AT91C_EMAC_HRB
 ((
AT91_REG
 *) 0xFFFDC090)

2340 
	#AT91C_EMAC_TBQP
 ((
AT91_REG
 *) 0xFFFDC01C)

2341 
	#AT91C_EMAC_USRIO
 ((
AT91_REG
 *) 0xFFFDC0C0)

2342 
	#AT91C_EMAC_PTR
 ((
AT91_REG
 *) 0xFFFDC038)

2343 
	#AT91C_EMAC_SA2H
 ((
AT91_REG
 *) 0xFFFDC0A4)

2344 
	#AT91C_EMAC_ROV
 ((
AT91_REG
 *) 0xFFFDC070)

2345 
	#AT91C_EMAC_ALE
 ((
AT91_REG
 *) 0xFFFDC054)

2346 
	#AT91C_EMAC_RJA
 ((
AT91_REG
 *) 0xFFFDC07C)

2347 
	#AT91C_EMAC_RBQP
 ((
AT91_REG
 *) 0xFFFDC018)

2348 
	#AT91C_EMAC_TPF
 ((
AT91_REG
 *) 0xFFFDC08C)

2349 
	#AT91C_EMAC_NCFGR
 ((
AT91_REG
 *) 0xFFFDC004)

2350 
	#AT91C_EMAC_HRT
 ((
AT91_REG
 *) 0xFFFDC094)

2351 
	#AT91C_EMAC_USF
 ((
AT91_REG
 *) 0xFFFDC080)

2352 
	#AT91C_EMAC_FCSE
 ((
AT91_REG
 *) 0xFFFDC050)

2353 
	#AT91C_EMAC_TPQ
 ((
AT91_REG
 *) 0xFFFDC0BC)

2354 
	#AT91C_EMAC_MAN
 ((
AT91_REG
 *) 0xFFFDC034)

2355 
	#AT91C_EMAC_FTO
 ((
AT91_REG
 *) 0xFFFDC040)

2356 
	#AT91C_EMAC_REV
 ((
AT91_REG
 *) 0xFFFDC0FC)

2357 
	#AT91C_EMAC_IMR
 ((
AT91_REG
 *) 0xFFFDC030)

2358 
	#AT91C_EMAC_SCF
 ((
AT91_REG
 *) 0xFFFDC044)

2359 
	#AT91C_EMAC_PFR
 ((
AT91_REG
 *) 0xFFFDC03C)

2360 
	#AT91C_EMAC_MCF
 ((
AT91_REG
 *) 0xFFFDC048)

2361 
	#AT91C_EMAC_NSR
 ((
AT91_REG
 *) 0xFFFDC008)

2362 
	#AT91C_EMAC_SA2L
 ((
AT91_REG
 *) 0xFFFDC0A0)

2363 
	#AT91C_EMAC_FRO
 ((
AT91_REG
 *) 0xFFFDC04C)

2364 
	#AT91C_EMAC_IER
 ((
AT91_REG
 *) 0xFFFDC028)

2365 
	#AT91C_EMAC_SA1H
 ((
AT91_REG
 *) 0xFFFDC09C)

2366 
	#AT91C_EMAC_CSE
 ((
AT91_REG
 *) 0xFFFDC068)

2367 
	#AT91C_EMAC_SA3H
 ((
AT91_REG
 *) 0xFFFDC0AC)

2368 
	#AT91C_EMAC_RRE
 ((
AT91_REG
 *) 0xFFFDC06C)

2369 
	#AT91C_EMAC_STE
 ((
AT91_REG
 *) 0xFFFDC084)

2371 
	#AT91C_ADC_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

2372 
	#AT91C_ADC_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

2373 
	#AT91C_ADC_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

2374 
	#AT91C_ADC_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

2375 
	#AT91C_ADC_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

2376 
	#AT91C_ADC_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

2377 
	#AT91C_ADC_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

2378 
	#AT91C_ADC_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

2379 
	#AT91C_ADC_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

2380 
	#AT91C_ADC_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

2382 
	#AT91C_ADC_CDR2
 ((
AT91_REG
 *) 0xFFFD8038)

2383 
	#AT91C_ADC_CDR3
 ((
AT91_REG
 *) 0xFFFD803C)

2384 
	#AT91C_ADC_CDR0
 ((
AT91_REG
 *) 0xFFFD8030)

2385 
	#AT91C_ADC_CDR5
 ((
AT91_REG
 *) 0xFFFD8044)

2386 
	#AT91C_ADC_CHDR
 ((
AT91_REG
 *) 0xFFFD8014)

2387 
	#AT91C_ADC_SR
 ((
AT91_REG
 *) 0xFFFD801C)

2388 
	#AT91C_ADC_CDR4
 ((
AT91_REG
 *) 0xFFFD8040)

2389 
	#AT91C_ADC_CDR1
 ((
AT91_REG
 *) 0xFFFD8034)

2390 
	#AT91C_ADC_LCDR
 ((
AT91_REG
 *) 0xFFFD8020)

2391 
	#AT91C_ADC_IDR
 ((
AT91_REG
 *) 0xFFFD8028)

2392 
	#AT91C_ADC_CR
 ((
AT91_REG
 *) 0xFFFD8000)

2393 
	#AT91C_ADC_CDR7
 ((
AT91_REG
 *) 0xFFFD804C)

2394 
	#AT91C_ADC_CDR6
 ((
AT91_REG
 *) 0xFFFD8048)

2395 
	#AT91C_ADC_IER
 ((
AT91_REG
 *) 0xFFFD8024)

2396 
	#AT91C_ADC_CHER
 ((
AT91_REG
 *) 0xFFFD8010)

2397 
	#AT91C_ADC_CHSR
 ((
AT91_REG
 *) 0xFFFD8018)

2398 
	#AT91C_ADC_MR
 ((
AT91_REG
 *) 0xFFFD8004)

2399 
	#AT91C_ADC_IMR
 ((
AT91_REG
 *) 0xFFFD802C)

2401 
	#AT91C_AES_TPR
 ((
AT91_REG
 *) 0xFFFA4108)

2402 
	#AT91C_AES_PTCR
 ((
AT91_REG
 *) 0xFFFA4120)

2403 
	#AT91C_AES_RNPR
 ((
AT91_REG
 *) 0xFFFA4110)

2404 
	#AT91C_AES_TNCR
 ((
AT91_REG
 *) 0xFFFA411C)

2405 
	#AT91C_AES_TCR
 ((
AT91_REG
 *) 0xFFFA410C)

2406 
	#AT91C_AES_RCR
 ((
AT91_REG
 *) 0xFFFA4104)

2407 
	#AT91C_AES_RNCR
 ((
AT91_REG
 *) 0xFFFA4114)

2408 
	#AT91C_AES_TNPR
 ((
AT91_REG
 *) 0xFFFA4118)

2409 
	#AT91C_AES_RPR
 ((
AT91_REG
 *) 0xFFFA4100)

2410 
	#AT91C_AES_PTSR
 ((
AT91_REG
 *) 0xFFFA4124)

2412 
	#AT91C_AES_IVxR
 ((
AT91_REG
 *) 0xFFFA4060)

2413 
	#AT91C_AES_MR
 ((
AT91_REG
 *) 0xFFFA4004)

2414 
	#AT91C_AES_VR
 ((
AT91_REG
 *) 0xFFFA40FC)

2415 
	#AT91C_AES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA4050)

2416 
	#AT91C_AES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA4040)

2417 
	#AT91C_AES_CR
 ((
AT91_REG
 *) 0xFFFA4000)

2418 
	#AT91C_AES_IDR
 ((
AT91_REG
 *) 0xFFFA4014)

2419 
	#AT91C_AES_IMR
 ((
AT91_REG
 *) 0xFFFA4018)

2420 
	#AT91C_AES_IER
 ((
AT91_REG
 *) 0xFFFA4010)

2421 
	#AT91C_AES_KEYWxR
 ((
AT91_REG
 *) 0xFFFA4020)

2422 
	#AT91C_AES_ISR
 ((
AT91_REG
 *) 0xFFFA401C)

2424 
	#AT91C_TDES_RNCR
 ((
AT91_REG
 *) 0xFFFA8114)

2425 
	#AT91C_TDES_TCR
 ((
AT91_REG
 *) 0xFFFA810C)

2426 
	#AT91C_TDES_RCR
 ((
AT91_REG
 *) 0xFFFA8104)

2427 
	#AT91C_TDES_TNPR
 ((
AT91_REG
 *) 0xFFFA8118)

2428 
	#AT91C_TDES_RNPR
 ((
AT91_REG
 *) 0xFFFA8110)

2429 
	#AT91C_TDES_RPR
 ((
AT91_REG
 *) 0xFFFA8100)

2430 
	#AT91C_TDES_TNCR
 ((
AT91_REG
 *) 0xFFFA811C)

2431 
	#AT91C_TDES_TPR
 ((
AT91_REG
 *) 0xFFFA8108)

2432 
	#AT91C_TDES_PTSR
 ((
AT91_REG
 *) 0xFFFA8124)

2433 
	#AT91C_TDES_PTCR
 ((
AT91_REG
 *) 0xFFFA8120)

2435 
	#AT91C_TDES_KEY2WxR
 ((
AT91_REG
 *) 0xFFFA8028)

2436 
	#AT91C_TDES_KEY3WxR
 ((
AT91_REG
 *) 0xFFFA8030)

2437 
	#AT91C_TDES_IDR
 ((
AT91_REG
 *) 0xFFFA8014)

2438 
	#AT91C_TDES_VR
 ((
AT91_REG
 *) 0xFFFA80FC)

2439 
	#AT91C_TDES_IVxR
 ((
AT91_REG
 *) 0xFFFA8060)

2440 
	#AT91C_TDES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA8050)

2441 
	#AT91C_TDES_IMR
 ((
AT91_REG
 *) 0xFFFA8018)

2442 
	#AT91C_TDES_MR
 ((
AT91_REG
 *) 0xFFFA8004)

2443 
	#AT91C_TDES_CR
 ((
AT91_REG
 *) 0xFFFA8000)

2444 
	#AT91C_TDES_IER
 ((
AT91_REG
 *) 0xFFFA8010)

2445 
	#AT91C_TDES_ISR
 ((
AT91_REG
 *) 0xFFFA801C)

2446 
	#AT91C_TDES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA8040)

2447 
	#AT91C_TDES_KEY1WxR
 ((
AT91_REG
 *) 0xFFFA8020)

2448 

	)

2452 
	#AT91C_PIO_PA0
 (() 1 << 0)

2453 
	#AT91C_PA0_RXD0
 ((Ë
AT91C_PIO_PA0
)

2454 
	#AT91C_PIO_PA1
 (() 1 << 1)

2455 
	#AT91C_PA1_TXD0
 ((Ë
AT91C_PIO_PA1
)

2456 
	#AT91C_PIO_PA10
 (() 1 << 10)

2457 
	#AT91C_PA10_TWD
 ((Ë
AT91C_PIO_PA10
)

2458 
	#AT91C_PIO_PA11
 (() 1 << 11)

2459 
	#AT91C_PA11_TWCK
 ((Ë
AT91C_PIO_PA11
)

2460 
	#AT91C_PIO_PA12
 (() 1 << 12)

2461 
	#AT91C_PA12_NPCS00
 ((Ë
AT91C_PIO_PA12
)

2462 
	#AT91C_PIO_PA13
 (() 1 << 13)

2463 
	#AT91C_PA13_NPCS01
 ((Ë
AT91C_PIO_PA13
)

2464 
	#AT91C_PA13_PCK1
 ((Ë
AT91C_PIO_PA13
)

2465 
	#AT91C_PIO_PA14
 (() 1 << 14)

2466 
	#AT91C_PA14_NPCS02
 ((Ë
AT91C_PIO_PA14
)

2467 
	#AT91C_PA14_IRQ1
 ((Ë
AT91C_PIO_PA14
)

2468 
	#AT91C_PIO_PA15
 (() 1 << 15)

2469 
	#AT91C_PA15_NPCS03
 ((Ë
AT91C_PIO_PA15
)

2470 
	#AT91C_PA15_TCLK2
 ((Ë
AT91C_PIO_PA15
)

2471 
	#AT91C_PIO_PA16
 (() 1 << 16)

2472 
	#AT91C_PA16_MISO0
 ((Ë
AT91C_PIO_PA16
)

2473 
	#AT91C_PIO_PA17
 (() 1 << 17)

2474 
	#AT91C_PA17_MOSI0
 ((Ë
AT91C_PIO_PA17
)

2475 
	#AT91C_PIO_PA18
 (() 1 << 18)

2476 
	#AT91C_PA18_SPCK0
 ((Ë
AT91C_PIO_PA18
)

2477 
	#AT91C_PIO_PA19
 (() 1 << 19)

2478 
	#AT91C_PA19_CANRX
 ((Ë
AT91C_PIO_PA19
)

2479 
	#AT91C_PIO_PA2
 (() 1 << 2)

2480 
	#AT91C_PA2_SCK0
 ((Ë
AT91C_PIO_PA2
)

2481 
	#AT91C_PA2_NPCS11
 ((Ë
AT91C_PIO_PA2
)

2482 
	#AT91C_PIO_PA20
 (() 1 << 20)

2483 
	#AT91C_PA20_CANTX
 ((Ë
AT91C_PIO_PA20
)

2484 
	#AT91C_PIO_PA21
 (() 1 << 21)

2485 
	#AT91C_PA21_TF
 ((Ë
AT91C_PIO_PA21
)

2486 
	#AT91C_PA21_NPCS10
 ((Ë
AT91C_PIO_PA21
)

2487 
	#AT91C_PIO_PA22
 (() 1 << 22)

2488 
	#AT91C_PA22_TK
 ((Ë
AT91C_PIO_PA22
)

2489 
	#AT91C_PA22_SPCK1
 ((Ë
AT91C_PIO_PA22
)

2490 
	#AT91C_PIO_PA23
 (() 1 << 23)

2491 
	#AT91C_PA23_TD
 ((Ë
AT91C_PIO_PA23
)

2492 
	#AT91C_PA23_MOSI1
 ((Ë
AT91C_PIO_PA23
)

2493 
	#AT91C_PIO_PA24
 (() 1 << 24)

2494 
	#AT91C_PA24_RD
 ((Ë
AT91C_PIO_PA24
)

2495 
	#AT91C_PA24_MISO1
 ((Ë
AT91C_PIO_PA24
)

2496 
	#AT91C_PIO_PA25
 (() 1 << 25)

2497 
	#AT91C_PA25_RK
 ((Ë
AT91C_PIO_PA25
)

2498 
	#AT91C_PA25_NPCS11
 ((Ë
AT91C_PIO_PA25
)

2499 
	#AT91C_PIO_PA26
 (() 1 << 26)

2500 
	#AT91C_PA26_RF
 ((Ë
AT91C_PIO_PA26
)

2501 
	#AT91C_PA26_NPCS12
 ((Ë
AT91C_PIO_PA26
)

2502 
	#AT91C_PIO_PA27
 (() 1 << 27)

2503 
	#AT91C_PA27_DRXD
 ((Ë
AT91C_PIO_PA27
)

2504 
	#AT91C_PA27_PCK3
 ((Ë
AT91C_PIO_PA27
)

2505 
	#AT91C_PIO_PA28
 (() 1 << 28)

2506 
	#AT91C_PA28_DTXD
 ((Ë
AT91C_PIO_PA28
)

2507 
	#AT91C_PIO_PA29
 (() 1 << 29)

2508 
	#AT91C_PA29_FIQ
 ((Ë
AT91C_PIO_PA29
)

2509 
	#AT91C_PA29_NPCS13
 ((Ë
AT91C_PIO_PA29
)

2510 
	#AT91C_PIO_PA3
 (() 1 << 3)

2511 
	#AT91C_PA3_RTS0
 ((Ë
AT91C_PIO_PA3
)

2512 
	#AT91C_PA3_NPCS12
 ((Ë
AT91C_PIO_PA3
)

2513 
	#AT91C_PIO_PA30
 (() 1 << 30)

2514 
	#AT91C_PA30_IRQ0
 ((Ë
AT91C_PIO_PA30
)

2515 
	#AT91C_PA30_PCK2
 ((Ë
AT91C_PIO_PA30
)

2516 
	#AT91C_PIO_PA4
 (() 1 << 4)

2517 
	#AT91C_PA4_CTS0
 ((Ë
AT91C_PIO_PA4
)

2518 
	#AT91C_PA4_NPCS13
 ((Ë
AT91C_PIO_PA4
)

2519 
	#AT91C_PIO_PA5
 (() 1 << 5)

2520 
	#AT91C_PA5_RXD1
 ((Ë
AT91C_PIO_PA5
)

2521 
	#AT91C_PIO_PA6
 (() 1 << 6)

2522 
	#AT91C_PA6_TXD1
 ((Ë
AT91C_PIO_PA6
)

2523 
	#AT91C_PIO_PA7
 (() 1 << 7)

2524 
	#AT91C_PA7_SCK1
 ((Ë
AT91C_PIO_PA7
)

2525 
	#AT91C_PA7_NPCS01
 ((Ë
AT91C_PIO_PA7
)

2526 
	#AT91C_PIO_PA8
 (() 1 << 8)

2527 
	#AT91C_PA8_RTS1
 ((Ë
AT91C_PIO_PA8
)

2528 
	#AT91C_PA8_NPCS02
 ((Ë
AT91C_PIO_PA8
)

2529 
	#AT91C_PIO_PA9
 (() 1 << 9)

2530 
	#AT91C_PA9_CTS1
 ((Ë
AT91C_PIO_PA9
)

2531 
	#AT91C_PA9_NPCS03
 ((Ë
AT91C_PIO_PA9
)

2532 
	#AT91C_PIO_PB0
 (() 1 << 0)

2533 
	#AT91C_PB0_ETXCK_EREFCK
 ((Ë
AT91C_PIO_PB0
)

2534 
	#AT91C_PB0_PCK0
 ((Ë
AT91C_PIO_PB0
)

2535 
	#AT91C_PIO_PB1
 (() 1 << 1)

2536 
	#AT91C_PB1_ETXEN
 ((Ë
AT91C_PIO_PB1
)

2537 
	#AT91C_PIO_PB10
 (() 1 << 10)

2538 
	#AT91C_PB10_ETX2
 ((Ë
AT91C_PIO_PB10
)

2539 
	#AT91C_PB10_NPCS11
 ((Ë
AT91C_PIO_PB10
)

2540 
	#AT91C_PIO_PB11
 (() 1 << 11)

2541 
	#AT91C_PB11_ETX3
 ((Ë
AT91C_PIO_PB11
)

2542 
	#AT91C_PB11_NPCS12
 ((Ë
AT91C_PIO_PB11
)

2543 
	#AT91C_PIO_PB12
 (() 1 << 12)

2544 
	#AT91C_PB12_ETXER
 ((Ë
AT91C_PIO_PB12
)

2545 
	#AT91C_PB12_TCLK0
 ((Ë
AT91C_PIO_PB12
)

2546 
	#AT91C_PIO_PB13
 (() 1 << 13)

2547 
	#AT91C_PB13_ERX2
 ((Ë
AT91C_PIO_PB13
)

2548 
	#AT91C_PB13_NPCS01
 ((Ë
AT91C_PIO_PB13
)

2549 
	#AT91C_PIO_PB14
 (() 1 << 14)

2550 
	#AT91C_PB14_ERX3
 ((Ë
AT91C_PIO_PB14
)

2551 
	#AT91C_PB14_NPCS02
 ((Ë
AT91C_PIO_PB14
)

2552 
	#AT91C_PIO_PB15
 (() 1 << 15)

2553 
	#AT91C_PB15_ERXDV
 ((Ë
AT91C_PIO_PB15
)

2554 
	#AT91C_PIO_PB16
 (() 1 << 16)

2555 
	#AT91C_PB16_ECOL
 ((Ë
AT91C_PIO_PB16
)

2556 
	#AT91C_PB16_NPCS13
 ((Ë
AT91C_PIO_PB16
)

2557 
	#AT91C_PIO_PB17
 (() 1 << 17)

2558 
	#AT91C_PB17_ERXCK
 ((Ë
AT91C_PIO_PB17
)

2559 
	#AT91C_PB17_NPCS03
 ((Ë
AT91C_PIO_PB17
)

2560 
	#AT91C_PIO_PB18
 (() 1 << 18)

2561 
	#AT91C_PB18_EF100
 ((Ë
AT91C_PIO_PB18
)

2562 
	#AT91C_PB18_ADTRG
 ((Ë
AT91C_PIO_PB18
)

2563 
	#AT91C_PIO_PB19
 (() 1 << 19)

2564 
	#AT91C_PB19_PWM0
 ((Ë
AT91C_PIO_PB19
)

2565 
	#AT91C_PB19_TCLK1
 ((Ë
AT91C_PIO_PB19
)

2566 
	#AT91C_PIO_PB2
 (() 1 << 2)

2567 
	#AT91C_PB2_ETX0
 ((Ë
AT91C_PIO_PB2
)

2568 
	#AT91C_PIO_PB20
 (() 1 << 20)

2569 
	#AT91C_PB20_PWM1
 ((Ë
AT91C_PIO_PB20
)

2570 
	#AT91C_PB20_PCK0
 ((Ë
AT91C_PIO_PB20
)

2571 
	#AT91C_PIO_PB21
 (() 1 << 21)

2572 
	#AT91C_PB21_PWM2
 ((Ë
AT91C_PIO_PB21
)

2573 
	#AT91C_PB21_PCK1
 ((Ë
AT91C_PIO_PB21
)

2574 
	#AT91C_PIO_PB22
 (() 1 << 22)

2575 
	#AT91C_PB22_PWM3
 ((Ë
AT91C_PIO_PB22
)

2576 
	#AT91C_PB22_PCK2
 ((Ë
AT91C_PIO_PB22
)

2577 
	#AT91C_PIO_PB23
 (() 1 << 23)

2578 
	#AT91C_PB23_TIOA0
 ((Ë
AT91C_PIO_PB23
)

2579 
	#AT91C_PB23_DCD1
 ((Ë
AT91C_PIO_PB23
)

2580 
	#AT91C_PIO_PB24
 (() 1 << 24)

2581 
	#AT91C_PB24_TIOB0
 ((Ë
AT91C_PIO_PB24
)

2582 
	#AT91C_PB24_DSR1
 ((Ë
AT91C_PIO_PB24
)

2583 
	#AT91C_PIO_PB25
 (() 1 << 25)

2584 
	#AT91C_PB25_TIOA1
 ((Ë
AT91C_PIO_PB25
)

2585 
	#AT91C_PB25_DTR1
 ((Ë
AT91C_PIO_PB25
)

2586 
	#AT91C_PIO_PB26
 (() 1 << 26)

2587 
	#AT91C_PB26_TIOB1
 ((Ë
AT91C_PIO_PB26
)

2588 
	#AT91C_PB26_RI1
 ((Ë
AT91C_PIO_PB26
)

2589 
	#AT91C_PIO_PB27
 (() 1 << 27)

2590 
	#AT91C_PB27_TIOA2
 ((Ë
AT91C_PIO_PB27
)

2591 
	#AT91C_PB27_PWM0
 ((Ë
AT91C_PIO_PB27
)

2592 
	#AT91C_PIO_PB28
 (() 1 << 28)

2593 
	#AT91C_PB28_TIOB2
 ((Ë
AT91C_PIO_PB28
)

2594 
	#AT91C_PB28_PWM1
 ((Ë
AT91C_PIO_PB28
)

2595 
	#AT91C_PIO_PB29
 (() 1 << 29)

2596 
	#AT91C_PB29_PCK1
 ((Ë
AT91C_PIO_PB29
)

2597 
	#AT91C_PB29_PWM2
 ((Ë
AT91C_PIO_PB29
)

2598 
	#AT91C_PIO_PB3
 (() 1 << 3)

2599 
	#AT91C_PB3_ETX1
 ((Ë
AT91C_PIO_PB3
)

2600 
	#AT91C_PIO_PB30
 (() 1 << 30)

2601 
	#AT91C_PB30_PCK2
 ((Ë
AT91C_PIO_PB30
)

2602 
	#AT91C_PB30_PWM3
 ((Ë
AT91C_PIO_PB30
)

2603 
	#AT91C_PIO_PB4
 (() 1 << 4)

2604 
	#AT91C_PB4_ECRS_ECRSDV
 ((Ë
AT91C_PIO_PB4
)

2605 
	#AT91C_PIO_PB5
 (() 1 << 5)

2606 
	#AT91C_PB5_ERX0
 ((Ë
AT91C_PIO_PB5
)

2607 
	#AT91C_PIO_PB6
 (() 1 << 6)

2608 
	#AT91C_PB6_ERX1
 ((Ë
AT91C_PIO_PB6
)

2609 
	#AT91C_PIO_PB7
 (() 1 << 7)

2610 
	#AT91C_PB7_ERXER
 ((Ë
AT91C_PIO_PB7
)

2611 
	#AT91C_PIO_PB8
 (() 1 << 8)

2612 
	#AT91C_PB8_EMDC
 ((Ë
AT91C_PIO_PB8
)

2613 
	#AT91C_PIO_PB9
 (() 1 << 9)

2614 
	#AT91C_PB9_EMDIO
 ((Ë
AT91C_PIO_PB9
)

2615 

	)

2619 
	#AT91C_ID_FIQ
 (() 0)

2620 
	#AT91C_ID_SYS
 (() 1)

2621 
	#AT91C_ID_PIOA
 (() 2)

2622 
	#AT91C_ID_PIOB
 (() 3)

2623 
	#AT91C_ID_SPI0
 (() 4)

2624 
	#AT91C_ID_SPI1
 (() 5)

2625 
	#AT91C_ID_US0
 (() 6)

2626 
	#AT91C_ID_US1
 (() 7)

2627 
	#AT91C_ID_SSC
 (() 8)

2628 
	#AT91C_ID_TWI
 (() 9)

2629 
	#AT91C_ID_PWMC
 (() 10)

2630 
	#AT91C_ID_UDP
 (() 11)

2631 
	#AT91C_ID_TC0
 (() 12)

2632 
	#AT91C_ID_TC1
 (() 13)

2633 
	#AT91C_ID_TC2
 (() 14)

2634 
	#AT91C_ID_CAN
 (() 15)

2635 
	#AT91C_ID_EMAC
 (() 16)

2636 
	#AT91C_ID_ADC
 (() 17)

2637 
	#AT91C_ID_AES
 (() 18)

2638 
	#AT91C_ID_TDES
 (() 19)

2639 
	#AT91C_ID_20_Re£rved
 (() 20)

2640 
	#AT91C_ID_21_Re£rved
 (() 21)

2641 
	#AT91C_ID_22_Re£rved
 (() 22)

2642 
	#AT91C_ID_23_Re£rved
 (() 23)

2643 
	#AT91C_ID_24_Re£rved
 (() 24)

2644 
	#AT91C_ID_25_Re£rved
 (() 25)

2645 
	#AT91C_ID_26_Re£rved
 (() 26)

2646 
	#AT91C_ID_27_Re£rved
 (() 27)

2647 
	#AT91C_ID_28_Re£rved
 (() 28)

2648 
	#AT91C_ID_29_Re£rved
 (() 29)

2649 
	#AT91C_ID_IRQ0
 (() 30)

2650 
	#AT91C_ID_IRQ1
 (() 31)

2651 

	)

2655 
	#AT91C_BASE_SYS
 ((
AT91PS_SYS
) 0xFFFFF000)

2656 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

2657 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

2658 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

2659 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

2660 
	#AT91C_BASE_PIOB
 ((
AT91PS_PIO
) 0xFFFFF600)

2661 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

2662 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

2663 
	#AT91C_BASE_RSTC
 ((
AT91PS_RSTC
) 0xFFFFFD00)

2664 
	#AT91C_BASE_RTTC
 ((
AT91PS_RTTC
) 0xFFFFFD20)

2665 
	#AT91C_BASE_PITC
 ((
AT91PS_PITC
) 0xFFFFFD30)

2666 
	#AT91C_BASE_WDTC
 ((
AT91PS_WDTC
) 0xFFFFFD40)

2667 
	#AT91C_BASE_VREG
 ((
AT91PS_VREG
) 0xFFFFFD60)

2668 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

2669 
	#AT91C_BASE_PDC_SPI1
 ((
AT91PS_PDC
) 0xFFFE4100)

2670 
	#AT91C_BASE_SPI1
 ((
AT91PS_SPI
) 0xFFFE4000)

2671 
	#AT91C_BASE_PDC_SPI0
 ((
AT91PS_PDC
) 0xFFFE0100)

2672 
	#AT91C_BASE_SPI0
 ((
AT91PS_SPI
) 0xFFFE0000)

2673 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

2674 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

2675 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

2676 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

2677 
	#AT91C_BASE_PDC_SSC
 ((
AT91PS_PDC
) 0xFFFD4100)

2678 
	#AT91C_BASE_SSC
 ((
AT91PS_SSC
) 0xFFFD4000)

2679 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

2680 
	#AT91C_BASE_PWMC_CH3
 ((
AT91PS_PWMC_CH
) 0xFFFCC260)

2681 
	#AT91C_BASE_PWMC_CH2
 ((
AT91PS_PWMC_CH
) 0xFFFCC240)

2682 
	#AT91C_BASE_PWMC_CH1
 ((
AT91PS_PWMC_CH
) 0xFFFCC220)

2683 
	#AT91C_BASE_PWMC_CH0
 ((
AT91PS_PWMC_CH
) 0xFFFCC200)

2684 
	#AT91C_BASE_PWMC
 ((
AT91PS_PWMC
) 0xFFFCC000)

2685 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

2686 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

2687 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

2688 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

2689 
	#AT91C_BASE_TCB
 ((
AT91PS_TCB
) 0xFFFA0000)

2690 
	#AT91C_BASE_CAN_MB0
 ((
AT91PS_CAN_MB
) 0xFFFD0200)

2691 
	#AT91C_BASE_CAN_MB1
 ((
AT91PS_CAN_MB
) 0xFFFD0220)

2692 
	#AT91C_BASE_CAN_MB2
 ((
AT91PS_CAN_MB
) 0xFFFD0240)

2693 
	#AT91C_BASE_CAN_MB3
 ((
AT91PS_CAN_MB
) 0xFFFD0260)

2694 
	#AT91C_BASE_CAN_MB4
 ((
AT91PS_CAN_MB
) 0xFFFD0280)

2695 
	#AT91C_BASE_CAN_MB5
 ((
AT91PS_CAN_MB
) 0xFFFD02A0)

2696 
	#AT91C_BASE_CAN_MB6
 ((
AT91PS_CAN_MB
) 0xFFFD02C0)

2697 
	#AT91C_BASE_CAN_MB7
 ((
AT91PS_CAN_MB
) 0xFFFD02E0)

2698 
	#AT91C_BASE_CAN
 ((
AT91PS_CAN
) 0xFFFD0000)

2699 
	#AT91C_BASE_EMAC
 ((
AT91PS_EMAC
) 0xFFFDC000)

2700 
	#AT91C_BASE_PDC_ADC
 ((
AT91PS_PDC
) 0xFFFD8100)

2701 
	#AT91C_BASE_ADC
 ((
AT91PS_ADC
) 0xFFFD8000)

2702 
	#AT91C_BASE_PDC_AES
 ((
AT91PS_PDC
) 0xFFFA4100)

2703 
	#AT91C_BASE_AES
 ((
AT91PS_AES
) 0xFFFA4000)

2704 
	#AT91C_BASE_PDC_TDES
 ((
AT91PS_PDC
) 0xFFFA8100)

2705 
	#AT91C_BASE_TDES
 ((
AT91PS_TDES
) 0xFFFA8000)

2706 

	)

2710 
	#AT91C_ISRAM
 ((*) 0x00200000)

2711 
	#AT91C_ISRAM_SIZE
 (() 0x00010000)

2712 
	#AT91C_IFLASH
 ((*) 0x00100000)

2713 
	#AT91C_IFLASH_SIZE
 (() 0x00040000)

2714 

	)

2715 
	#AT91F_AIC_C⁄figuªIt
–
úq_id
, 
¥i‹ôy
, 
§c_ty≥
, 
√wH™dÀr
 ) \

2717 
mask
 ; \

2719 
mask
 = 0x1 << 
úq_id
; \

2721 
AT91C_BASE_AIC
->
AIC_IDCR
 = 
mask
 ; \

2723 
AT91C_BASE_AIC
->
AIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ; \

2725 
AT91C_BASE_AIC
->
AIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ; \

2727 
AT91C_BASE_AIC
->
AIC_ICCR
 = 
mask
 ; \

2728 }

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/ioat91sam7x256.h

46 #i‚de‡
AT91SAM7X256_H


47 
	#AT91SAM7X256_H


	)

49 vﬁ©ûê
	tAT91_REG
;

54 
	s_AT91S_SYS
 {

55 
AT91_REG
 
	mAIC_SMR
[32];

56 
AT91_REG
 
	mAIC_SVR
[32];

57 
AT91_REG
 
	mAIC_IVR
;

58 
AT91_REG
 
	mAIC_FVR
;

59 
AT91_REG
 
	mAIC_ISR
;

60 
AT91_REG
 
	mAIC_IPR
;

61 
AT91_REG
 
	mAIC_IMR
;

62 
AT91_REG
 
	mAIC_CISR
;

63 
AT91_REG
 
	mRe£rved0
[2];

64 
AT91_REG
 
	mAIC_IECR
;

65 
AT91_REG
 
	mAIC_IDCR
;

66 
AT91_REG
 
	mAIC_ICCR
;

67 
AT91_REG
 
	mAIC_ISCR
;

68 
AT91_REG
 
	mAIC_EOICR
;

69 
AT91_REG
 
	mAIC_SPU
;

70 
AT91_REG
 
	mAIC_DCR
;

71 
AT91_REG
 
	mRe£rved1
[1];

72 
AT91_REG
 
	mAIC_FFER
;

73 
AT91_REG
 
	mAIC_FFDR
;

74 
AT91_REG
 
	mAIC_FFSR
;

75 
AT91_REG
 
	mRe£rved2
[45];

76 
AT91_REG
 
	mDBGU_CR
;

77 
AT91_REG
 
	mDBGU_MR
;

78 
AT91_REG
 
	mDBGU_IER
;

79 
AT91_REG
 
	mDBGU_IDR
;

80 
AT91_REG
 
	mDBGU_IMR
;

81 
AT91_REG
 
	mDBGU_CSR
;

82 
AT91_REG
 
	mDBGU_RHR
;

83 
AT91_REG
 
	mDBGU_THR
;

84 
AT91_REG
 
	mDBGU_BRGR
;

85 
AT91_REG
 
	mRe£rved3
[7];

86 
AT91_REG
 
	mDBGU_CIDR
;

87 
AT91_REG
 
	mDBGU_EXID
;

88 
AT91_REG
 
	mDBGU_FNTR
;

89 
AT91_REG
 
	mRe£rved4
[45];

90 
AT91_REG
 
	mDBGU_RPR
;

91 
AT91_REG
 
	mDBGU_RCR
;

92 
AT91_REG
 
	mDBGU_TPR
;

93 
AT91_REG
 
	mDBGU_TCR
;

94 
AT91_REG
 
	mDBGU_RNPR
;

95 
AT91_REG
 
	mDBGU_RNCR
;

96 
AT91_REG
 
	mDBGU_TNPR
;

97 
AT91_REG
 
	mDBGU_TNCR
;

98 
AT91_REG
 
	mDBGU_PTCR
;

99 
AT91_REG
 
	mDBGU_PTSR
;

100 
AT91_REG
 
	mRe£rved5
[54];

101 
AT91_REG
 
	mPIOA_PER
;

102 
AT91_REG
 
	mPIOA_PDR
;

103 
AT91_REG
 
	mPIOA_PSR
;

104 
AT91_REG
 
	mRe£rved6
[1];

105 
AT91_REG
 
	mPIOA_OER
;

106 
AT91_REG
 
	mPIOA_ODR
;

107 
AT91_REG
 
	mPIOA_OSR
;

108 
AT91_REG
 
	mRe£rved7
[1];

109 
AT91_REG
 
	mPIOA_IFER
;

110 
AT91_REG
 
	mPIOA_IFDR
;

111 
AT91_REG
 
	mPIOA_IFSR
;

112 
AT91_REG
 
	mRe£rved8
[1];

113 
AT91_REG
 
	mPIOA_SODR
;

114 
AT91_REG
 
	mPIOA_CODR
;

115 
AT91_REG
 
	mPIOA_ODSR
;

116 
AT91_REG
 
	mPIOA_PDSR
;

117 
AT91_REG
 
	mPIOA_IER
;

118 
AT91_REG
 
	mPIOA_IDR
;

119 
AT91_REG
 
	mPIOA_IMR
;

120 
AT91_REG
 
	mPIOA_ISR
;

121 
AT91_REG
 
	mPIOA_MDER
;

122 
AT91_REG
 
	mPIOA_MDDR
;

123 
AT91_REG
 
	mPIOA_MDSR
;

124 
AT91_REG
 
	mRe£rved9
[1];

125 
AT91_REG
 
	mPIOA_PPUDR
;

126 
AT91_REG
 
	mPIOA_PPUER
;

127 
AT91_REG
 
	mPIOA_PPUSR
;

128 
AT91_REG
 
	mRe£rved10
[1];

129 
AT91_REG
 
	mPIOA_ASR
;

130 
AT91_REG
 
	mPIOA_BSR
;

131 
AT91_REG
 
	mPIOA_ABSR
;

132 
AT91_REG
 
	mRe£rved11
[9];

133 
AT91_REG
 
	mPIOA_OWER
;

134 
AT91_REG
 
	mPIOA_OWDR
;

135 
AT91_REG
 
	mPIOA_OWSR
;

136 
AT91_REG
 
	mRe£rved12
[85];

137 
AT91_REG
 
	mPIOB_PER
;

138 
AT91_REG
 
	mPIOB_PDR
;

139 
AT91_REG
 
	mPIOB_PSR
;

140 
AT91_REG
 
	mRe£rved13
[1];

141 
AT91_REG
 
	mPIOB_OER
;

142 
AT91_REG
 
	mPIOB_ODR
;

143 
AT91_REG
 
	mPIOB_OSR
;

144 
AT91_REG
 
	mRe£rved14
[1];

145 
AT91_REG
 
	mPIOB_IFER
;

146 
AT91_REG
 
	mPIOB_IFDR
;

147 
AT91_REG
 
	mPIOB_IFSR
;

148 
AT91_REG
 
	mRe£rved15
[1];

149 
AT91_REG
 
	mPIOB_SODR
;

150 
AT91_REG
 
	mPIOB_CODR
;

151 
AT91_REG
 
	mPIOB_ODSR
;

152 
AT91_REG
 
	mPIOB_PDSR
;

153 
AT91_REG
 
	mPIOB_IER
;

154 
AT91_REG
 
	mPIOB_IDR
;

155 
AT91_REG
 
	mPIOB_IMR
;

156 
AT91_REG
 
	mPIOB_ISR
;

157 
AT91_REG
 
	mPIOB_MDER
;

158 
AT91_REG
 
	mPIOB_MDDR
;

159 
AT91_REG
 
	mPIOB_MDSR
;

160 
AT91_REG
 
	mRe£rved16
[1];

161 
AT91_REG
 
	mPIOB_PPUDR
;

162 
AT91_REG
 
	mPIOB_PPUER
;

163 
AT91_REG
 
	mPIOB_PPUSR
;

164 
AT91_REG
 
	mRe£rved17
[1];

165 
AT91_REG
 
	mPIOB_ASR
;

166 
AT91_REG
 
	mPIOB_BSR
;

167 
AT91_REG
 
	mPIOB_ABSR
;

168 
AT91_REG
 
	mRe£rved18
[9];

169 
AT91_REG
 
	mPIOB_OWER
;

170 
AT91_REG
 
	mPIOB_OWDR
;

171 
AT91_REG
 
	mPIOB_OWSR
;

172 
AT91_REG
 
	mRe£rved19
[341];

173 
AT91_REG
 
	mPMC_SCER
;

174 
AT91_REG
 
	mPMC_SCDR
;

175 
AT91_REG
 
	mPMC_SCSR
;

176 
AT91_REG
 
	mRe£rved20
[1];

177 
AT91_REG
 
	mPMC_PCER
;

178 
AT91_REG
 
	mPMC_PCDR
;

179 
AT91_REG
 
	mPMC_PCSR
;

180 
AT91_REG
 
	mRe£rved21
[1];

181 
AT91_REG
 
	mPMC_MOR
;

182 
AT91_REG
 
	mPMC_MCFR
;

183 
AT91_REG
 
	mRe£rved22
[1];

184 
AT91_REG
 
	mPMC_PLLR
;

185 
AT91_REG
 
	mPMC_MCKR
;

186 
AT91_REG
 
	mRe£rved23
[3];

187 
AT91_REG
 
	mPMC_PCKR
[4];

188 
AT91_REG
 
	mRe£rved24
[4];

189 
AT91_REG
 
	mPMC_IER
;

190 
AT91_REG
 
	mPMC_IDR
;

191 
AT91_REG
 
	mPMC_SR
;

192 
AT91_REG
 
	mPMC_IMR
;

193 
AT91_REG
 
	mRe£rved25
[36];

194 
AT91_REG
 
	mRSTC_RCR
;

195 
AT91_REG
 
	mRSTC_RSR
;

196 
AT91_REG
 
	mRSTC_RMR
;

197 
AT91_REG
 
	mRe£rved26
[5];

198 
AT91_REG
 
	mRTTC_RTMR
;

199 
AT91_REG
 
	mRTTC_RTAR
;

200 
AT91_REG
 
	mRTTC_RTVR
;

201 
AT91_REG
 
	mRTTC_RTSR
;

202 
AT91_REG
 
	mPITC_PIMR
;

203 
AT91_REG
 
	mPITC_PISR
;

204 
AT91_REG
 
	mPITC_PIVR
;

205 
AT91_REG
 
	mPITC_PIIR
;

206 
AT91_REG
 
	mWDTC_WDCR
;

207 
AT91_REG
 
	mWDTC_WDMR
;

208 
AT91_REG
 
	mWDTC_WDSR
;

209 
AT91_REG
 
	mRe£rved27
[5];

210 
AT91_REG
 
	mVREG_MR
;

211 } 
	tAT91S_SYS
, *
	tAT91PS_SYS
;

217 
	s_AT91S_AIC
 {

218 
AT91_REG
 
	mAIC_SMR
[32];

219 
AT91_REG
 
	mAIC_SVR
[32];

220 
AT91_REG
 
	mAIC_IVR
;

221 
AT91_REG
 
	mAIC_FVR
;

222 
AT91_REG
 
	mAIC_ISR
;

223 
AT91_REG
 
	mAIC_IPR
;

224 
AT91_REG
 
	mAIC_IMR
;

225 
AT91_REG
 
	mAIC_CISR
;

226 
AT91_REG
 
	mRe£rved0
[2];

227 
AT91_REG
 
	mAIC_IECR
;

228 
AT91_REG
 
	mAIC_IDCR
;

229 
AT91_REG
 
	mAIC_ICCR
;

230 
AT91_REG
 
	mAIC_ISCR
;

231 
AT91_REG
 
	mAIC_EOICR
;

232 
AT91_REG
 
	mAIC_SPU
;

233 
AT91_REG
 
	mAIC_DCR
;

234 
AT91_REG
 
	mRe£rved1
[1];

235 
AT91_REG
 
	mAIC_FFER
;

236 
AT91_REG
 
	mAIC_FFDR
;

237 
AT91_REG
 
	mAIC_FFSR
;

238 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

241 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

242 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

243 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

244 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

245 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (() 0x0 << 5)

246 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (() 0x0 << 5)

247 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (() 0x1 << 5)

248 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (() 0x1 << 5)

249 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (() 0x2 << 5)

250 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (() 0x3 << 5)

252 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

253 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

255 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

256 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

257 

	)

261 
	s_AT91S_PDC
 {

262 
AT91_REG
 
	mPDC_RPR
;

263 
AT91_REG
 
	mPDC_RCR
;

264 
AT91_REG
 
	mPDC_TPR
;

265 
AT91_REG
 
	mPDC_TCR
;

266 
AT91_REG
 
	mPDC_RNPR
;

267 
AT91_REG
 
	mPDC_RNCR
;

268 
AT91_REG
 
	mPDC_TNPR
;

269 
AT91_REG
 
	mPDC_TNCR
;

270 
AT91_REG
 
	mPDC_PTCR
;

271 
AT91_REG
 
	mPDC_PTSR
;

272 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

275 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

276 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

277 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

278 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

280 

	)

284 
	s_AT91S_DBGU
 {

285 
AT91_REG
 
	mDBGU_CR
;

286 
AT91_REG
 
	mDBGU_MR
;

287 
AT91_REG
 
	mDBGU_IER
;

288 
AT91_REG
 
	mDBGU_IDR
;

289 
AT91_REG
 
	mDBGU_IMR
;

290 
AT91_REG
 
	mDBGU_CSR
;

291 
AT91_REG
 
	mDBGU_RHR
;

292 
AT91_REG
 
	mDBGU_THR
;

293 
AT91_REG
 
	mDBGU_BRGR
;

294 
AT91_REG
 
	mRe£rved0
[7];

295 
AT91_REG
 
	mDBGU_CIDR
;

296 
AT91_REG
 
	mDBGU_EXID
;

297 
AT91_REG
 
	mDBGU_FNTR
;

298 
AT91_REG
 
	mRe£rved1
[45];

299 
AT91_REG
 
	mDBGU_RPR
;

300 
AT91_REG
 
	mDBGU_RCR
;

301 
AT91_REG
 
	mDBGU_TPR
;

302 
AT91_REG
 
	mDBGU_TCR
;

303 
AT91_REG
 
	mDBGU_RNPR
;

304 
AT91_REG
 
	mDBGU_RNCR
;

305 
AT91_REG
 
	mDBGU_TNPR
;

306 
AT91_REG
 
	mDBGU_TNCR
;

307 
AT91_REG
 
	mDBGU_PTCR
;

308 
AT91_REG
 
	mDBGU_PTSR
;

309 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

312 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

313 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

314 
	#AT91C_US_RXEN
 (() 0x1 << 4)

315 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

316 
	#AT91C_US_TXEN
 (() 0x1 << 6)

317 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

318 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

320 
	#AT91C_US_PAR
 (() 0x7 << 9)

321 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

322 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

323 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

324 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

325 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

326 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

327 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

328 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

329 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

330 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

331 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

333 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

334 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

335 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

336 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

337 
	#AT91C_US_OVRE
 (() 0x1 << 5)

338 
	#AT91C_US_FRAME
 (() 0x1 << 6)

339 
	#AT91C_US_PARE
 (() 0x1 << 7)

340 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

341 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

342 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

343 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

344 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

349 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

350 

	)

354 
	s_AT91S_PIO
 {

355 
AT91_REG
 
	mPIO_PER
;

356 
AT91_REG
 
	mPIO_PDR
;

357 
AT91_REG
 
	mPIO_PSR
;

358 
AT91_REG
 
	mRe£rved0
[1];

359 
AT91_REG
 
	mPIO_OER
;

360 
AT91_REG
 
	mPIO_ODR
;

361 
AT91_REG
 
	mPIO_OSR
;

362 
AT91_REG
 
	mRe£rved1
[1];

363 
AT91_REG
 
	mPIO_IFER
;

364 
AT91_REG
 
	mPIO_IFDR
;

365 
AT91_REG
 
	mPIO_IFSR
;

366 
AT91_REG
 
	mRe£rved2
[1];

367 
AT91_REG
 
	mPIO_SODR
;

368 
AT91_REG
 
	mPIO_CODR
;

369 
AT91_REG
 
	mPIO_ODSR
;

370 
AT91_REG
 
	mPIO_PDSR
;

371 
AT91_REG
 
	mPIO_IER
;

372 
AT91_REG
 
	mPIO_IDR
;

373 
AT91_REG
 
	mPIO_IMR
;

374 
AT91_REG
 
	mPIO_ISR
;

375 
AT91_REG
 
	mPIO_MDER
;

376 
AT91_REG
 
	mPIO_MDDR
;

377 
AT91_REG
 
	mPIO_MDSR
;

378 
AT91_REG
 
	mRe£rved3
[1];

379 
AT91_REG
 
	mPIO_PPUDR
;

380 
AT91_REG
 
	mPIO_PPUER
;

381 
AT91_REG
 
	mPIO_PPUSR
;

382 
AT91_REG
 
	mRe£rved4
[1];

383 
AT91_REG
 
	mPIO_ASR
;

384 
AT91_REG
 
	mPIO_BSR
;

385 
AT91_REG
 
	mPIO_ABSR
;

386 
AT91_REG
 
	mRe£rved5
[9];

387 
AT91_REG
 
	mPIO_OWER
;

388 
AT91_REG
 
	mPIO_OWDR
;

389 
AT91_REG
 
	mPIO_OWSR
;

390 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

396 
	s_AT91S_CKGR
 {

397 
AT91_REG
 
	mCKGR_MOR
;

398 
AT91_REG
 
	mCKGR_MCFR
;

399 
AT91_REG
 
	mRe£rved0
[1];

400 
AT91_REG
 
	mCKGR_PLLR
;

401 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

404 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

405 
	#AT91C_CKGR_OSCBYPASS
 (() 0x1 << 1)

406 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

408 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

409 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

411 
	#AT91C_CKGR_DIV
 (() 0xFF << 0)

412 
	#AT91C_CKGR_DIV_0
 (() 0x0)

413 
	#AT91C_CKGR_DIV_BYPASS
 (() 0x1)

414 
	#AT91C_CKGR_PLLCOUNT
 (() 0x3F << 8)

415 
	#AT91C_CKGR_OUT
 (() 0x3 << 14)

416 
	#AT91C_CKGR_OUT_0
 (() 0x0 << 14)

417 
	#AT91C_CKGR_OUT_1
 (() 0x1 << 14)

418 
	#AT91C_CKGR_OUT_2
 (() 0x2 << 14)

419 
	#AT91C_CKGR_OUT_3
 (() 0x3 << 14)

420 
	#AT91C_CKGR_MUL
 (() 0x7FF << 16)

421 
	#AT91C_CKGR_USBDIV
 (() 0x3 << 28)

422 
	#AT91C_CKGR_USBDIV_0
 (() 0x0 << 28)

423 
	#AT91C_CKGR_USBDIV_1
 (() 0x1 << 28)

424 
	#AT91C_CKGR_USBDIV_2
 (() 0x2 << 28)

425 

	)

429 
	s_AT91S_PMC
 {

430 
AT91_REG
 
	mPMC_SCER
;

431 
AT91_REG
 
	mPMC_SCDR
;

432 
AT91_REG
 
	mPMC_SCSR
;

433 
AT91_REG
 
	mRe£rved0
[1];

434 
AT91_REG
 
	mPMC_PCER
;

435 
AT91_REG
 
	mPMC_PCDR
;

436 
AT91_REG
 
	mPMC_PCSR
;

437 
AT91_REG
 
	mRe£rved1
[1];

438 
AT91_REG
 
	mPMC_MOR
;

439 
AT91_REG
 
	mPMC_MCFR
;

440 
AT91_REG
 
	mRe£rved2
[1];

441 
AT91_REG
 
	mPMC_PLLR
;

442 
AT91_REG
 
	mPMC_MCKR
;

443 
AT91_REG
 
	mRe£rved3
[3];

444 
AT91_REG
 
	mPMC_PCKR
[4];

445 
AT91_REG
 
	mRe£rved4
[4];

446 
AT91_REG
 
	mPMC_IER
;

447 
AT91_REG
 
	mPMC_IDR
;

448 
AT91_REG
 
	mPMC_SR
;

449 
AT91_REG
 
	mPMC_IMR
;

450 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

453 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

454 
	#AT91C_PMC_UDP
 (() 0x1 << 7)

455 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

456 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

457 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

458 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

465 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

466 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

467 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

468 
	#AT91C_PMC_CSS_PLL_CLK
 (() 0x3)

469 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

470 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

471 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

472 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

473 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

474 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

475 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

476 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

479 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

480 
	#AT91C_PMC_LOCK
 (() 0x1 << 2)

481 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

482 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

483 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

484 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

485 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

489 

	)

493 
	s_AT91S_RSTC
 {

494 
AT91_REG
 
	mRSTC_RCR
;

495 
AT91_REG
 
	mRSTC_RSR
;

496 
AT91_REG
 
	mRSTC_RMR
;

497 } 
	tAT91S_RSTC
, *
	tAT91PS_RSTC
;

500 
	#AT91C_RSTC_PROCRST
 (() 0x1 << 0)

501 
	#AT91C_RSTC_PERRST
 (() 0x1 << 2)

502 
	#AT91C_RSTC_EXTRST
 (() 0x1 << 3)

503 
	#AT91C_RSTC_KEY
 (() 0xFF << 24)

505 
	#AT91C_RSTC_URSTS
 (() 0x1 << 0)

506 
	#AT91C_RSTC_BODSTS
 (() 0x1 << 1)

507 
	#AT91C_RSTC_RSTTYP
 (() 0x7 << 8)

508 
	#AT91C_RSTC_RSTTYP_POWERUP
 (() 0x0 << 8)

509 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (() 0x1 << 8)

510 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (() 0x2 << 8)

511 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (() 0x3 << 8)

512 
	#AT91C_RSTC_RSTTYP_USER
 (() 0x4 << 8)

513 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (() 0x5 << 8)

514 
	#AT91C_RSTC_NRSTL
 (() 0x1 << 16)

515 
	#AT91C_RSTC_SRCMP
 (() 0x1 << 17)

517 
	#AT91C_RSTC_URSTEN
 (() 0x1 << 0)

518 
	#AT91C_RSTC_URSTIEN
 (() 0x1 << 4)

519 
	#AT91C_RSTC_ERSTL
 (() 0xF << 8)

520 
	#AT91C_RSTC_BODIEN
 (() 0x1 << 16)

521 

	)

525 
	s_AT91S_RTTC
 {

526 
AT91_REG
 
	mRTTC_RTMR
;

527 
AT91_REG
 
	mRTTC_RTAR
;

528 
AT91_REG
 
	mRTTC_RTVR
;

529 
AT91_REG
 
	mRTTC_RTSR
;

530 } 
	tAT91S_RTTC
, *
	tAT91PS_RTTC
;

533 
	#AT91C_RTTC_RTPRES
 (() 0xFFFF << 0)

534 
	#AT91C_RTTC_ALMIEN
 (() 0x1 << 16)

535 
	#AT91C_RTTC_RTTINCIEN
 (() 0x1 << 17)

536 
	#AT91C_RTTC_RTTRST
 (() 0x1 << 18)

538 
	#AT91C_RTTC_ALMV
 (() 0x0 << 0)

540 
	#AT91C_RTTC_CRTV
 (() 0x0 << 0)

542 
	#AT91C_RTTC_ALMS
 (() 0x1 << 0)

543 
	#AT91C_RTTC_RTTINC
 (() 0x1 << 1)

544 

	)

548 
	s_AT91S_PITC
 {

549 
AT91_REG
 
	mPITC_PIMR
;

550 
AT91_REG
 
	mPITC_PISR
;

551 
AT91_REG
 
	mPITC_PIVR
;

552 
AT91_REG
 
	mPITC_PIIR
;

553 } 
	tAT91S_PITC
, *
	tAT91PS_PITC
;

556 
	#AT91C_PITC_PIV
 (() 0xFFFFF << 0)

557 
	#AT91C_PITC_PITEN
 (() 0x1 << 24)

558 
	#AT91C_PITC_PITIEN
 (() 0x1 << 25)

560 
	#AT91C_PITC_PITS
 (() 0x1 << 0)

562 
	#AT91C_PITC_CPIV
 (() 0xFFFFF << 0)

563 
	#AT91C_PITC_PICNT
 (() 0xFFF << 20)

565 

	)

569 
	s_AT91S_WDTC
 {

570 
AT91_REG
 
	mWDTC_WDCR
;

571 
AT91_REG
 
	mWDTC_WDMR
;

572 
AT91_REG
 
	mWDTC_WDSR
;

573 } 
	tAT91S_WDTC
, *
	tAT91PS_WDTC
;

576 
	#AT91C_WDTC_WDRSTT
 (() 0x1 << 0)

577 
	#AT91C_WDTC_KEY
 (() 0xFF << 24)

579 
	#AT91C_WDTC_WDV
 (() 0xFFF << 0)

580 
	#AT91C_WDTC_WDFIEN
 (() 0x1 << 12)

581 
	#AT91C_WDTC_WDRSTEN
 (() 0x1 << 13)

582 
	#AT91C_WDTC_WDRPROC
 (() 0x1 << 14)

583 
	#AT91C_WDTC_WDDIS
 (() 0x1 << 15)

584 
	#AT91C_WDTC_WDD
 (() 0xFFF << 16)

585 
	#AT91C_WDTC_WDDBGHLT
 (() 0x1 << 28)

586 
	#AT91C_WDTC_WDIDLEHLT
 (() 0x1 << 29)

588 
	#AT91C_WDTC_WDUNF
 (() 0x1 << 0)

589 
	#AT91C_WDTC_WDERR
 (() 0x1 << 1)

590 

	)

594 
	s_AT91S_VREG
 {

595 
AT91_REG
 
	mVREG_MR
;

596 } 
	tAT91S_VREG
, *
	tAT91PS_VREG
;

599 
	#AT91C_VREG_PSTDBY
 (() 0x1 << 0)

600 

	)

604 
	s_AT91S_MC
 {

605 
AT91_REG
 
	mMC_RCR
;

606 
AT91_REG
 
	mMC_ASR
;

607 
AT91_REG
 
	mMC_AASR
;

608 
AT91_REG
 
	mRe£rved0
[21];

609 
AT91_REG
 
	mMC_FMR
;

610 
AT91_REG
 
	mMC_FCR
;

611 
AT91_REG
 
	mMC_FSR
;

612 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

615 
	#AT91C_MC_RCB
 (() 0x1 << 0)

617 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

618 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

619 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

620 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

621 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

622 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

623 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

624 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

625 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

626 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

627 
	#AT91C_MC_MST0
 (() 0x1 << 16)

628 
	#AT91C_MC_MST1
 (() 0x1 << 17)

629 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

630 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

632 
	#AT91C_MC_FRDY
 (() 0x1 << 0)

633 
	#AT91C_MC_LOCKE
 (() 0x1 << 2)

634 
	#AT91C_MC_PROGE
 (() 0x1 << 3)

635 
	#AT91C_MC_NEBP
 (() 0x1 << 7)

636 
	#AT91C_MC_FWS
 (() 0x3 << 8)

637 
	#AT91C_MC_FWS_0FWS
 (() 0x0 << 8)

638 
	#AT91C_MC_FWS_1FWS
 (() 0x1 << 8)

639 
	#AT91C_MC_FWS_2FWS
 (() 0x2 << 8)

640 
	#AT91C_MC_FWS_3FWS
 (() 0x3 << 8)

641 
	#AT91C_MC_FMCN
 (() 0xFF << 16)

643 
	#AT91C_MC_FCMD
 (() 0xF << 0)

644 
	#AT91C_MC_FCMD_START_PROG
 (() 0x1)

645 
	#AT91C_MC_FCMD_LOCK
 (() 0x2)

646 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (() 0x3)

647 
	#AT91C_MC_FCMD_UNLOCK
 (() 0x4)

648 
	#AT91C_MC_FCMD_ERASE_ALL
 (() 0x8)

649 
	#AT91C_MC_FCMD_SET_GP_NVM
 (() 0xB)

650 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (() 0xD)

651 
	#AT91C_MC_FCMD_SET_SECURITY
 (() 0xF)

652 
	#AT91C_MC_PAGEN
 (() 0x3FF << 8)

653 
	#AT91C_MC_KEY
 (() 0xFF << 24)

655 
	#AT91C_MC_SECURITY
 (() 0x1 << 4)

656 
	#AT91C_MC_GPNVM0
 (() 0x1 << 8)

657 
	#AT91C_MC_GPNVM1
 (() 0x1 << 9)

658 
	#AT91C_MC_GPNVM2
 (() 0x1 << 10)

659 
	#AT91C_MC_GPNVM3
 (() 0x1 << 11)

660 
	#AT91C_MC_GPNVM4
 (() 0x1 << 12)

661 
	#AT91C_MC_GPNVM5
 (() 0x1 << 13)

662 
	#AT91C_MC_GPNVM6
 (() 0x1 << 14)

663 
	#AT91C_MC_GPNVM7
 (() 0x1 << 15)

664 
	#AT91C_MC_LOCKS0
 (() 0x1 << 16)

665 
	#AT91C_MC_LOCKS1
 (() 0x1 << 17)

666 
	#AT91C_MC_LOCKS2
 (() 0x1 << 18)

667 
	#AT91C_MC_LOCKS3
 (() 0x1 << 19)

668 
	#AT91C_MC_LOCKS4
 (() 0x1 << 20)

669 
	#AT91C_MC_LOCKS5
 (() 0x1 << 21)

670 
	#AT91C_MC_LOCKS6
 (() 0x1 << 22)

671 
	#AT91C_MC_LOCKS7
 (() 0x1 << 23)

672 
	#AT91C_MC_LOCKS8
 (() 0x1 << 24)

673 
	#AT91C_MC_LOCKS9
 (() 0x1 << 25)

674 
	#AT91C_MC_LOCKS10
 (() 0x1 << 26)

675 
	#AT91C_MC_LOCKS11
 (() 0x1 << 27)

676 
	#AT91C_MC_LOCKS12
 (() 0x1 << 28)

677 
	#AT91C_MC_LOCKS13
 (() 0x1 << 29)

678 
	#AT91C_MC_LOCKS14
 (() 0x1 << 30)

679 
	#AT91C_MC_LOCKS15
 (() 0x1 << 31)

680 

	)

684 
	s_AT91S_SPI
 {

685 
AT91_REG
 
	mSPI_CR
;

686 
AT91_REG
 
	mSPI_MR
;

687 
AT91_REG
 
	mSPI_RDR
;

688 
AT91_REG
 
	mSPI_TDR
;

689 
AT91_REG
 
	mSPI_SR
;

690 
AT91_REG
 
	mSPI_IER
;

691 
AT91_REG
 
	mSPI_IDR
;

692 
AT91_REG
 
	mSPI_IMR
;

693 
AT91_REG
 
	mRe£rved0
[4];

694 
AT91_REG
 
	mSPI_CSR
[4];

695 
AT91_REG
 
	mRe£rved1
[48];

696 
AT91_REG
 
	mSPI_RPR
;

697 
AT91_REG
 
	mSPI_RCR
;

698 
AT91_REG
 
	mSPI_TPR
;

699 
AT91_REG
 
	mSPI_TCR
;

700 
AT91_REG
 
	mSPI_RNPR
;

701 
AT91_REG
 
	mSPI_RNCR
;

702 
AT91_REG
 
	mSPI_TNPR
;

703 
AT91_REG
 
	mSPI_TNCR
;

704 
AT91_REG
 
	mSPI_PTCR
;

705 
AT91_REG
 
	mSPI_PTSR
;

706 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

709 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

710 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

711 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

712 
	#AT91C_SPI_LASTXFER
 (() 0x1 << 24)

714 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

715 
	#AT91C_SPI_PS
 (() 0x1 << 1)

716 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

717 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

718 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

719 
	#AT91C_SPI_FDIV
 (() 0x1 << 3)

720 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

721 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

722 
	#AT91C_SPI_PCS
 (() 0xF << 16)

723 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

725 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

726 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

728 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

729 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

731 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

732 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

733 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

734 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

735 
	#AT91C_SPI_ENDRX
 (() 0x1 << 4)

736 
	#AT91C_SPI_ENDTX
 (() 0x1 << 5)

737 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

738 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

739 
	#AT91C_SPI_NSSR
 (() 0x1 << 8)

740 
	#AT91C_SPI_TXEMPTY
 (() 0x1 << 9)

741 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

746 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

747 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

748 
	#AT91C_SPI_CSAAT
 (() 0x1 << 3)

749 
	#AT91C_SPI_BITS
 (() 0xF << 4)

750 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

751 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

752 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

753 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

754 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

755 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

756 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

757 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

758 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

759 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

760 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

761 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

762 

	)

766 
	s_AT91S_USART
 {

767 
AT91_REG
 
	mUS_CR
;

768 
AT91_REG
 
	mUS_MR
;

769 
AT91_REG
 
	mUS_IER
;

770 
AT91_REG
 
	mUS_IDR
;

771 
AT91_REG
 
	mUS_IMR
;

772 
AT91_REG
 
	mUS_CSR
;

773 
AT91_REG
 
	mUS_RHR
;

774 
AT91_REG
 
	mUS_THR
;

775 
AT91_REG
 
	mUS_BRGR
;

776 
AT91_REG
 
	mUS_RTOR
;

777 
AT91_REG
 
	mUS_TTGR
;

778 
AT91_REG
 
	mRe£rved0
[5];

779 
AT91_REG
 
	mUS_FIDI
;

780 
AT91_REG
 
	mUS_NER
;

781 
AT91_REG
 
	mRe£rved1
[1];

782 
AT91_REG
 
	mUS_IF
;

783 
AT91_REG
 
	mRe£rved2
[44];

784 
AT91_REG
 
	mUS_RPR
;

785 
AT91_REG
 
	mUS_RCR
;

786 
AT91_REG
 
	mUS_TPR
;

787 
AT91_REG
 
	mUS_TCR
;

788 
AT91_REG
 
	mUS_RNPR
;

789 
AT91_REG
 
	mUS_RNCR
;

790 
AT91_REG
 
	mUS_TNPR
;

791 
AT91_REG
 
	mUS_TNCR
;

792 
AT91_REG
 
	mUS_PTCR
;

793 
AT91_REG
 
	mUS_PTSR
;

794 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

797 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

798 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

799 
	#AT91C_US_STTTO
 (() 0x1 << 11)

800 
	#AT91C_US_SENDA
 (() 0x1 << 12)

801 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

802 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

803 
	#AT91C_US_RETTO
 (() 0x1 << 15)

804 
	#AT91C_US_DTREN
 (() 0x1 << 16)

805 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

806 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

807 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

809 
	#AT91C_US_USMODE
 (() 0xF << 0)

810 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

811 
	#AT91C_US_USMODE_RS485
 (() 0x1)

812 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

813 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

814 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

815 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

816 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

817 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

818 
	#AT91C_US_CLKS
 (() 0x3 << 4)

819 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

820 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

821 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

822 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

823 
	#AT91C_US_CHRL
 (() 0x3 << 6)

824 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

825 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

826 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

827 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

828 
	#AT91C_US_SYNC
 (() 0x1 << 8)

829 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

830 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

831 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

832 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

833 
	#AT91C_US_MSBF
 (() 0x1 << 16)

834 
	#AT91C_US_MODE9
 (() 0x1 << 17)

835 
	#AT91C_US_CKLO
 (() 0x1 << 18)

836 
	#AT91C_US_OVER
 (() 0x1 << 19)

837 
	#AT91C_US_INACK
 (() 0x1 << 20)

838 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

839 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

840 
	#AT91C_US_FILTER
 (() 0x1 << 28)

842 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

843 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

844 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

845 
	#AT91C_US_NACK
 (() 0x1 << 13)

846 
	#AT91C_US_RIIC
 (() 0x1 << 16)

847 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

848 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

849 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

853 
	#AT91C_US_RI
 (() 0x1 << 20)

854 
	#AT91C_US_DSR
 (() 0x1 << 21)

855 
	#AT91C_US_DCD
 (() 0x1 << 22)

856 
	#AT91C_US_CTS
 (() 0x1 << 23)

857 

	)

861 
	s_AT91S_SSC
 {

862 
AT91_REG
 
	mSSC_CR
;

863 
AT91_REG
 
	mSSC_CMR
;

864 
AT91_REG
 
	mRe£rved0
[2];

865 
AT91_REG
 
	mSSC_RCMR
;

866 
AT91_REG
 
	mSSC_RFMR
;

867 
AT91_REG
 
	mSSC_TCMR
;

868 
AT91_REG
 
	mSSC_TFMR
;

869 
AT91_REG
 
	mSSC_RHR
;

870 
AT91_REG
 
	mSSC_THR
;

871 
AT91_REG
 
	mRe£rved1
[2];

872 
AT91_REG
 
	mSSC_RSHR
;

873 
AT91_REG
 
	mSSC_TSHR
;

874 
AT91_REG
 
	mRe£rved2
[2];

875 
AT91_REG
 
	mSSC_SR
;

876 
AT91_REG
 
	mSSC_IER
;

877 
AT91_REG
 
	mSSC_IDR
;

878 
AT91_REG
 
	mSSC_IMR
;

879 
AT91_REG
 
	mRe£rved3
[44];

880 
AT91_REG
 
	mSSC_RPR
;

881 
AT91_REG
 
	mSSC_RCR
;

882 
AT91_REG
 
	mSSC_TPR
;

883 
AT91_REG
 
	mSSC_TCR
;

884 
AT91_REG
 
	mSSC_RNPR
;

885 
AT91_REG
 
	mSSC_RNCR
;

886 
AT91_REG
 
	mSSC_TNPR
;

887 
AT91_REG
 
	mSSC_TNCR
;

888 
AT91_REG
 
	mSSC_PTCR
;

889 
AT91_REG
 
	mSSC_PTSR
;

890 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

893 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

894 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

895 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

896 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

897 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

899 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

900 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

901 
	#AT91C_SSC_CKS_TK
 (() 0x1)

902 
	#AT91C_SSC_CKS_RK
 (() 0x2)

903 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

904 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

905 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

906 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

907 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

908 
	#AT91C_SSC_START
 (() 0xF << 8)

909 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

910 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

911 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

912 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

913 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

914 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

915 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

916 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

917 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

918 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

919 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

921 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

922 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

923 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

924 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

925 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

926 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

927 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

928 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

929 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

930 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

931 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

932 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

933 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

936 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

937 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

939 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

940 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

941 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

942 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

943 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

944 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

945 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

946 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

947 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

948 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

949 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

950 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

954 

	)

958 
	s_AT91S_TWI
 {

959 
AT91_REG
 
	mTWI_CR
;

960 
AT91_REG
 
	mTWI_MMR
;

961 
AT91_REG
 
	mRe£rved0
[1];

962 
AT91_REG
 
	mTWI_IADR
;

963 
AT91_REG
 
	mTWI_CWGR
;

964 
AT91_REG
 
	mRe£rved1
[3];

965 
AT91_REG
 
	mTWI_SR
;

966 
AT91_REG
 
	mTWI_IER
;

967 
AT91_REG
 
	mTWI_IDR
;

968 
AT91_REG
 
	mTWI_IMR
;

969 
AT91_REG
 
	mTWI_RHR
;

970 
AT91_REG
 
	mTWI_THR
;

971 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

974 
	#AT91C_TWI_START
 (() 0x1 << 0)

975 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

976 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

977 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

978 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

980 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

981 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

982 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

983 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

984 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

985 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

986 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

988 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

989 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

990 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

992 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

993 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

994 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

995 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

996 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

997 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1001 

	)

1005 
	s_AT91S_PWMC_CH
 {

1006 
AT91_REG
 
	mPWMC_CMR
;

1007 
AT91_REG
 
	mPWMC_CDTYR
;

1008 
AT91_REG
 
	mPWMC_CPRDR
;

1009 
AT91_REG
 
	mPWMC_CCNTR
;

1010 
AT91_REG
 
	mPWMC_CUPDR
;

1011 
AT91_REG
 
	mPWMC_Re£rved
[3];

1012 } 
	tAT91S_PWMC_CH
, *
	tAT91PS_PWMC_CH
;

1015 
	#AT91C_PWMC_CPRE
 (() 0xF << 0)

1016 
	#AT91C_PWMC_CPRE_MCK
 (() 0x0)

1017 
	#AT91C_PWMC_CPRE_MCKA
 (() 0xB)

1018 
	#AT91C_PWMC_CPRE_MCKB
 (() 0xC)

1019 
	#AT91C_PWMC_CALG
 (() 0x1 << 8)

1020 
	#AT91C_PWMC_CPOL
 (() 0x1 << 9)

1021 
	#AT91C_PWMC_CPD
 (() 0x1 << 10)

1023 
	#AT91C_PWMC_CDTY
 (() 0x0 << 0)

1025 
	#AT91C_PWMC_CPRD
 (() 0x0 << 0)

1027 
	#AT91C_PWMC_CCNT
 (() 0x0 << 0)

1029 
	#AT91C_PWMC_CUPD
 (() 0x0 << 0)

1030 

	)

1034 
	s_AT91S_PWMC
 {

1035 
AT91_REG
 
	mPWMC_MR
;

1036 
AT91_REG
 
	mPWMC_ENA
;

1037 
AT91_REG
 
	mPWMC_DIS
;

1038 
AT91_REG
 
	mPWMC_SR
;

1039 
AT91_REG
 
	mPWMC_IER
;

1040 
AT91_REG
 
	mPWMC_IDR
;

1041 
AT91_REG
 
	mPWMC_IMR
;

1042 
AT91_REG
 
	mPWMC_ISR
;

1043 
AT91_REG
 
	mRe£rved0
[55];

1044 
AT91_REG
 
	mPWMC_VR
;

1045 
AT91_REG
 
	mRe£rved1
[64];

1046 
AT91S_PWMC_CH
 
	mPWMC_CH
[4];

1047 } 
	tAT91S_PWMC
, *
	tAT91PS_PWMC
;

1050 
	#AT91C_PWMC_DIVA
 (() 0xFF << 0)

1051 
	#AT91C_PWMC_PREA
 (() 0xF << 8)

1052 
	#AT91C_PWMC_PREA_MCK
 (() 0x0 << 8)

1053 
	#AT91C_PWMC_DIVB
 (() 0xFF << 16)

1054 
	#AT91C_PWMC_PREB
 (() 0xF << 24)

1055 
	#AT91C_PWMC_PREB_MCK
 (() 0x0 << 24)

1057 
	#AT91C_PWMC_CHID0
 (() 0x1 << 0)

1058 
	#AT91C_PWMC_CHID1
 (() 0x1 << 1)

1059 
	#AT91C_PWMC_CHID2
 (() 0x1 << 2)

1060 
	#AT91C_PWMC_CHID3
 (() 0x1 << 3)

1067 

	)

1071 
	s_AT91S_UDP
 {

1072 
AT91_REG
 
	mUDP_NUM
;

1073 
AT91_REG
 
	mUDP_GLBSTATE
;

1074 
AT91_REG
 
	mUDP_FADDR
;

1075 
AT91_REG
 
	mRe£rved0
[1];

1076 
AT91_REG
 
	mUDP_IER
;

1077 
AT91_REG
 
	mUDP_IDR
;

1078 
AT91_REG
 
	mUDP_IMR
;

1079 
AT91_REG
 
	mUDP_ISR
;

1080 
AT91_REG
 
	mUDP_ICR
;

1081 
AT91_REG
 
	mRe£rved1
[1];

1082 
AT91_REG
 
	mUDP_RSTEP
;

1083 
AT91_REG
 
	mRe£rved2
[1];

1084 
AT91_REG
 
	mUDP_CSR
[6];

1085 
AT91_REG
 
	mRe£rved3
[2];

1086 
AT91_REG
 
	mUDP_FDR
[6];

1087 
AT91_REG
 
	mRe£rved4
[3];

1088 
AT91_REG
 
	mUDP_TXVC
;

1089 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1092 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1093 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1094 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1096 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1097 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1098 
	#AT91C_UDP_ESR
 (() 0x1 << 2)

1099 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1100 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 4)

1102 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1103 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1105 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1106 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1107 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1108 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1109 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1110 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1111 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1112 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1113 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1114 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1115 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1119 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1122 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1123 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1124 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1125 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1126 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1127 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1129 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1130 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1131 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1132 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1133 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1134 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1135 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1136 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1137 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1138 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1139 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1140 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1141 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1142 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1143 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1144 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1145 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1146 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1147 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1149 
	#AT91C_UDP_TXVDIS
 (() 0x1 << 8)

1150 
	#AT91C_UDP_PUON
 (() 0x1 << 9)

1151 

	)

1155 
	s_AT91S_TC
 {

1156 
AT91_REG
 
	mTC_CCR
;

1157 
AT91_REG
 
	mTC_CMR
;

1158 
AT91_REG
 
	mRe£rved0
[2];

1159 
AT91_REG
 
	mTC_CV
;

1160 
AT91_REG
 
	mTC_RA
;

1161 
AT91_REG
 
	mTC_RB
;

1162 
AT91_REG
 
	mTC_RC
;

1163 
AT91_REG
 
	mTC_SR
;

1164 
AT91_REG
 
	mTC_IER
;

1165 
AT91_REG
 
	mTC_IDR
;

1166 
AT91_REG
 
	mTC_IMR
;

1167 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1170 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1171 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1172 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1174 
	#AT91C_TC_CLKS
 (() 0x7 << 0)

1175 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (() 0x0)

1176 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (() 0x1)

1177 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (() 0x2)

1178 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (() 0x3)

1179 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (() 0x4)

1180 
	#AT91C_TC_CLKS_XC0
 (() 0x5)

1181 
	#AT91C_TC_CLKS_XC1
 (() 0x6)

1182 
	#AT91C_TC_CLKS_XC2
 (() 0x7)

1183 
	#AT91C_TC_CLKI
 (() 0x1 << 3)

1184 
	#AT91C_TC_BURST
 (() 0x3 << 4)

1185 
	#AT91C_TC_BURST_NONE
 (() 0x0 << 4)

1186 
	#AT91C_TC_BURST_XC0
 (() 0x1 << 4)

1187 
	#AT91C_TC_BURST_XC1
 (() 0x2 << 4)

1188 
	#AT91C_TC_BURST_XC2
 (() 0x3 << 4)

1189 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1190 
	#AT91C_TC_LDBSTOP
 (() 0x1 << 6)

1191 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1192 
	#AT91C_TC_LDBDIS
 (() 0x1 << 7)

1193 
	#AT91C_TC_ETRGEDG
 (() 0x3 << 8)

1194 
	#AT91C_TC_ETRGEDG_NONE
 (() 0x0 << 8)

1195 
	#AT91C_TC_ETRGEDG_RISING
 (() 0x1 << 8)

1196 
	#AT91C_TC_ETRGEDG_FALLING
 (() 0x2 << 8)

1197 
	#AT91C_TC_ETRGEDG_BOTH
 (() 0x3 << 8)

1198 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1199 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1200 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1201 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1202 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1203 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1204 
	#AT91C_TC_EEVT_TIOB
 (() 0x0 << 10)

1205 
	#AT91C_TC_EEVT_XC0
 (() 0x1 << 10)

1206 
	#AT91C_TC_EEVT_XC1
 (() 0x2 << 10)

1207 
	#AT91C_TC_EEVT_XC2
 (() 0x3 << 10)

1208 
	#AT91C_TC_ABETRG
 (() 0x1 << 10)

1209 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1210 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1211 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1212 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1213 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1214 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1215 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1216 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1217 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1218 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1219 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1220 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1221 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1222 
	#AT91C_TC_LDRA
 (() 0x3 << 16)

1223 
	#AT91C_TC_LDRA_NONE
 (() 0x0 << 16)

1224 
	#AT91C_TC_LDRA_RISING
 (() 0x1 << 16)

1225 
	#AT91C_TC_LDRA_FALLING
 (() 0x2 << 16)

1226 
	#AT91C_TC_LDRA_BOTH
 (() 0x3 << 16)

1227 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1228 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1229 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1230 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1231 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1232 
	#AT91C_TC_LDRB
 (() 0x3 << 18)

1233 
	#AT91C_TC_LDRB_NONE
 (() 0x0 << 18)

1234 
	#AT91C_TC_LDRB_RISING
 (() 0x1 << 18)

1235 
	#AT91C_TC_LDRB_FALLING
 (() 0x2 << 18)

1236 
	#AT91C_TC_LDRB_BOTH
 (() 0x3 << 18)

1237 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1238 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1239 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1240 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1241 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1242 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1243 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1244 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1245 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1246 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1247 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1248 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1249 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1250 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1251 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1252 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1253 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1254 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1255 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1256 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1257 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1258 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1259 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1260 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1261 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1262 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1263 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1264 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1265 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1266 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1268 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1269 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1270 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1271 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1272 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1273 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1274 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1275 
	#AT91C_TC_ETRGS
 (() 0x1 << 7)

1276 
	#AT91C_TC_CLKSTA
 (() 0x1 << 16)

1277 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1278 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1282 

	)

1286 
	s_AT91S_TCB
 {

1287 
AT91S_TC
 
	mTCB_TC0
;

1288 
AT91_REG
 
	mRe£rved0
[4];

1289 
AT91S_TC
 
	mTCB_TC1
;

1290 
AT91_REG
 
	mRe£rved1
[4];

1291 
AT91S_TC
 
	mTCB_TC2
;

1292 
AT91_REG
 
	mRe£rved2
[4];

1293 
AT91_REG
 
	mTCB_BCR
;

1294 
AT91_REG
 
	mTCB_BMR
;

1295 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1298 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1300 
	#AT91C_TCB_TC0XC0S
 (() 0x3 << 0)

1301 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1302 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1303 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1304 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1305 
	#AT91C_TCB_TC1XC1S
 (() 0x3 << 2)

1306 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1307 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1308 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1309 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1310 
	#AT91C_TCB_TC2XC2S
 (() 0x3 << 4)

1311 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1312 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1313 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1314 
	#AT91C_TCB_TC2XC2S_TIOA1
 (() 0x3 << 4)

1315 

	)

1319 
	s_AT91S_CAN_MB
 {

1320 
AT91_REG
 
	mCAN_MB_MMR
;

1321 
AT91_REG
 
	mCAN_MB_MAM
;

1322 
AT91_REG
 
	mCAN_MB_MID
;

1323 
AT91_REG
 
	mCAN_MB_MFID
;

1324 
AT91_REG
 
	mCAN_MB_MSR
;

1325 
AT91_REG
 
	mCAN_MB_MDL
;

1326 
AT91_REG
 
	mCAN_MB_MDH
;

1327 
AT91_REG
 
	mCAN_MB_MCR
;

1328 } 
	tAT91S_CAN_MB
, *
	tAT91PS_CAN_MB
;

1331 
	#AT91C_CAN_MTIMEMARK
 (() 0xFFFF << 0)

1332 
	#AT91C_CAN_PRIOR
 (() 0xF << 16)

1333 
	#AT91C_CAN_MOT
 (() 0x7 << 24)

1334 
	#AT91C_CAN_MOT_DIS
 (() 0x0 << 24)

1335 
	#AT91C_CAN_MOT_RX
 (() 0x1 << 24)

1336 
	#AT91C_CAN_MOT_RXOVERWRITE
 (() 0x2 << 24)

1337 
	#AT91C_CAN_MOT_TX
 (() 0x3 << 24)

1338 
	#AT91C_CAN_MOT_CONSUMER
 (() 0x4 << 24)

1339 
	#AT91C_CAN_MOT_PRODUCER
 (() 0x5 << 24)

1341 
	#AT91C_CAN_MIDvB
 (() 0x3FFFF << 0)

1342 
	#AT91C_CAN_MIDvA
 (() 0x7FF << 18)

1343 
	#AT91C_CAN_MIDE
 (() 0x1 << 29)

1347 
	#AT91C_CAN_MTIMESTAMP
 (() 0xFFFF << 0)

1348 
	#AT91C_CAN_MDLC
 (() 0xF << 16)

1349 
	#AT91C_CAN_MRTR
 (() 0x1 << 20)

1350 
	#AT91C_CAN_MABT
 (() 0x1 << 22)

1351 
	#AT91C_CAN_MRDY
 (() 0x1 << 23)

1352 
	#AT91C_CAN_MMI
 (() 0x1 << 24)

1356 
	#AT91C_CAN_MACR
 (() 0x1 << 22)

1357 
	#AT91C_CAN_MTCR
 (() 0x1 << 23)

1358 

	)

1362 
	s_AT91S_CAN
 {

1363 
AT91_REG
 
	mCAN_MR
;

1364 
AT91_REG
 
	mCAN_IER
;

1365 
AT91_REG
 
	mCAN_IDR
;

1366 
AT91_REG
 
	mCAN_IMR
;

1367 
AT91_REG
 
	mCAN_SR
;

1368 
AT91_REG
 
	mCAN_BR
;

1369 
AT91_REG
 
	mCAN_TIM
;

1370 
AT91_REG
 
	mCAN_TIMESTP
;

1371 
AT91_REG
 
	mCAN_ECR
;

1372 
AT91_REG
 
	mCAN_TCR
;

1373 
AT91_REG
 
	mCAN_ACR
;

1374 
AT91_REG
 
	mRe£rved0
[52];

1375 
AT91_REG
 
	mCAN_VR
;

1376 
AT91_REG
 
	mRe£rved1
[64];

1377 
AT91S_CAN_MB
 
	mCAN_MB0
;

1378 
AT91S_CAN_MB
 
	mCAN_MB1
;

1379 
AT91S_CAN_MB
 
	mCAN_MB2
;

1380 
AT91S_CAN_MB
 
	mCAN_MB3
;

1381 
AT91S_CAN_MB
 
	mCAN_MB4
;

1382 
AT91S_CAN_MB
 
	mCAN_MB5
;

1383 
AT91S_CAN_MB
 
	mCAN_MB6
;

1384 
AT91S_CAN_MB
 
	mCAN_MB7
;

1385 
AT91S_CAN_MB
 
	mCAN_MB8
;

1386 
AT91S_CAN_MB
 
	mCAN_MB9
;

1387 
AT91S_CAN_MB
 
	mCAN_MB10
;

1388 
AT91S_CAN_MB
 
	mCAN_MB11
;

1389 
AT91S_CAN_MB
 
	mCAN_MB12
;

1390 
AT91S_CAN_MB
 
	mCAN_MB13
;

1391 
AT91S_CAN_MB
 
	mCAN_MB14
;

1392 
AT91S_CAN_MB
 
	mCAN_MB15
;

1393 } 
	tAT91S_CAN
, *
	tAT91PS_CAN
;

1396 
	#AT91C_CAN_CANEN
 (() 0x1 << 0)

1397 
	#AT91C_CAN_LPM
 (() 0x1 << 1)

1398 
	#AT91C_CAN_ABM
 (() 0x1 << 2)

1399 
	#AT91C_CAN_OVL
 (() 0x1 << 3)

1400 
	#AT91C_CAN_TEOF
 (() 0x1 << 4)

1401 
	#AT91C_CAN_TTM
 (() 0x1 << 5)

1402 
	#AT91C_CAN_TIMFRZ
 (() 0x1 << 6)

1403 
	#AT91C_CAN_DRPT
 (() 0x1 << 7)

1405 
	#AT91C_CAN_MB0
 (() 0x1 << 0)

1406 
	#AT91C_CAN_MB1
 (() 0x1 << 1)

1407 
	#AT91C_CAN_MB2
 (() 0x1 << 2)

1408 
	#AT91C_CAN_MB3
 (() 0x1 << 3)

1409 
	#AT91C_CAN_MB4
 (() 0x1 << 4)

1410 
	#AT91C_CAN_MB5
 (() 0x1 << 5)

1411 
	#AT91C_CAN_MB6
 (() 0x1 << 6)

1412 
	#AT91C_CAN_MB7
 (() 0x1 << 7)

1413 
	#AT91C_CAN_MB8
 (() 0x1 << 8)

1414 
	#AT91C_CAN_MB9
 (() 0x1 << 9)

1415 
	#AT91C_CAN_MB10
 (() 0x1 << 10)

1416 
	#AT91C_CAN_MB11
 (() 0x1 << 11)

1417 
	#AT91C_CAN_MB12
 (() 0x1 << 12)

1418 
	#AT91C_CAN_MB13
 (() 0x1 << 13)

1419 
	#AT91C_CAN_MB14
 (() 0x1 << 14)

1420 
	#AT91C_CAN_MB15
 (() 0x1 << 15)

1421 
	#AT91C_CAN_ERRA
 (() 0x1 << 16)

1422 
	#AT91C_CAN_WARN
 (() 0x1 << 17)

1423 
	#AT91C_CAN_ERRP
 (() 0x1 << 18)

1424 
	#AT91C_CAN_BOFF
 (() 0x1 << 19)

1425 
	#AT91C_CAN_SLEEP
 (() 0x1 << 20)

1426 
	#AT91C_CAN_WAKEUP
 (() 0x1 << 21)

1427 
	#AT91C_CAN_TOVF
 (() 0x1 << 22)

1428 
	#AT91C_CAN_TSTP
 (() 0x1 << 23)

1429 
	#AT91C_CAN_CERR
 (() 0x1 << 24)

1430 
	#AT91C_CAN_SERR
 (() 0x1 << 25)

1431 
	#AT91C_CAN_AERR
 (() 0x1 << 26)

1432 
	#AT91C_CAN_FERR
 (() 0x1 << 27)

1433 
	#AT91C_CAN_BERR
 (() 0x1 << 28)

1437 
	#AT91C_CAN_RBSY
 (() 0x1 << 29)

1438 
	#AT91C_CAN_TBSY
 (() 0x1 << 30)

1439 
	#AT91C_CAN_OVLY
 (() 0x1 << 31)

1441 
	#AT91C_CAN_PHASE2
 (() 0x7 << 0)

1442 
	#AT91C_CAN_PHASE1
 (() 0x7 << 4)

1443 
	#AT91C_CAN_PROPAG
 (() 0x7 << 8)

1444 
	#AT91C_CAN_SYNC
 (() 0x3 << 12)

1445 
	#AT91C_CAN_BRP
 (() 0x7F << 16)

1446 
	#AT91C_CAN_SMP
 (() 0x1 << 24)

1448 
	#AT91C_CAN_TIMER
 (() 0xFFFF << 0)

1451 
	#AT91C_CAN_REC
 (() 0xFF << 0)

1452 
	#AT91C_CAN_TEC
 (() 0xFF << 16)

1454 
	#AT91C_CAN_TIMRST
 (() 0x1 << 31)

1456 

	)

1460 
	s_AT91S_EMAC
 {

1461 
AT91_REG
 
	mEMAC_NCR
;

1462 
AT91_REG
 
	mEMAC_NCFGR
;

1463 
AT91_REG
 
	mEMAC_NSR
;

1464 
AT91_REG
 
	mRe£rved0
[2];

1465 
AT91_REG
 
	mEMAC_TSR
;

1466 
AT91_REG
 
	mEMAC_RBQP
;

1467 
AT91_REG
 
	mEMAC_TBQP
;

1468 
AT91_REG
 
	mEMAC_RSR
;

1469 
AT91_REG
 
	mEMAC_ISR
;

1470 
AT91_REG
 
	mEMAC_IER
;

1471 
AT91_REG
 
	mEMAC_IDR
;

1472 
AT91_REG
 
	mEMAC_IMR
;

1473 
AT91_REG
 
	mEMAC_MAN
;

1474 
AT91_REG
 
	mEMAC_PTR
;

1475 
AT91_REG
 
	mEMAC_PFR
;

1476 
AT91_REG
 
	mEMAC_FTO
;

1477 
AT91_REG
 
	mEMAC_SCF
;

1478 
AT91_REG
 
	mEMAC_MCF
;

1479 
AT91_REG
 
	mEMAC_FRO
;

1480 
AT91_REG
 
	mEMAC_FCSE
;

1481 
AT91_REG
 
	mEMAC_ALE
;

1482 
AT91_REG
 
	mEMAC_DTF
;

1483 
AT91_REG
 
	mEMAC_LCOL
;

1484 
AT91_REG
 
	mEMAC_ECOL
;

1485 
AT91_REG
 
	mEMAC_TUND
;

1486 
AT91_REG
 
	mEMAC_CSE
;

1487 
AT91_REG
 
	mEMAC_RRE
;

1488 
AT91_REG
 
	mEMAC_ROV
;

1489 
AT91_REG
 
	mEMAC_RSE
;

1490 
AT91_REG
 
	mEMAC_ELE
;

1491 
AT91_REG
 
	mEMAC_RJA
;

1492 
AT91_REG
 
	mEMAC_USF
;

1493 
AT91_REG
 
	mEMAC_STE
;

1494 
AT91_REG
 
	mEMAC_RLE
;

1495 
AT91_REG
 
	mEMAC_TPF
;

1496 
AT91_REG
 
	mEMAC_HRB
;

1497 
AT91_REG
 
	mEMAC_HRT
;

1498 
AT91_REG
 
	mEMAC_SA1L
;

1499 
AT91_REG
 
	mEMAC_SA1H
;

1500 
AT91_REG
 
	mEMAC_SA2L
;

1501 
AT91_REG
 
	mEMAC_SA2H
;

1502 
AT91_REG
 
	mEMAC_SA3L
;

1503 
AT91_REG
 
	mEMAC_SA3H
;

1504 
AT91_REG
 
	mEMAC_SA4L
;

1505 
AT91_REG
 
	mEMAC_SA4H
;

1506 
AT91_REG
 
	mEMAC_TID
;

1507 
AT91_REG
 
	mEMAC_TPQ
;

1508 
AT91_REG
 
	mEMAC_USRIO
;

1509 
AT91_REG
 
	mEMAC_WOL
;

1510 
AT91_REG
 
	mRe£rved1
[13];

1511 
AT91_REG
 
	mEMAC_REV
;

1512 } 
	tAT91S_EMAC
, *
	tAT91PS_EMAC
;

1515 
	#AT91C_EMAC_LB
 (() 0x1 << 0)

1516 
	#AT91C_EMAC_LLB
 (() 0x1 << 1)

1517 
	#AT91C_EMAC_RE
 (() 0x1 << 2)

1518 
	#AT91C_EMAC_TE
 (() 0x1 << 3)

1519 
	#AT91C_EMAC_MPE
 (() 0x1 << 4)

1520 
	#AT91C_EMAC_CLRSTAT
 (() 0x1 << 5)

1521 
	#AT91C_EMAC_INCSTAT
 (() 0x1 << 6)

1522 
	#AT91C_EMAC_WESTAT
 (() 0x1 << 7)

1523 
	#AT91C_EMAC_BP
 (() 0x1 << 8)

1524 
	#AT91C_EMAC_TSTART
 (() 0x1 << 9)

1525 
	#AT91C_EMAC_THALT
 (() 0x1 << 10)

1526 
	#AT91C_EMAC_TPFR
 (() 0x1 << 11)

1527 
	#AT91C_EMAC_TZQ
 (() 0x1 << 12)

1529 
	#AT91C_EMAC_SPD
 (() 0x1 << 0)

1530 
	#AT91C_EMAC_FD
 (() 0x1 << 1)

1531 
	#AT91C_EMAC_JFRAME
 (() 0x1 << 3)

1532 
	#AT91C_EMAC_CAF
 (() 0x1 << 4)

1533 
	#AT91C_EMAC_NBC
 (() 0x1 << 5)

1534 
	#AT91C_EMAC_MTI
 (() 0x1 << 6)

1535 
	#AT91C_EMAC_UNI
 (() 0x1 << 7)

1536 
	#AT91C_EMAC_BIG
 (() 0x1 << 8)

1537 
	#AT91C_EMAC_EAE
 (() 0x1 << 9)

1538 
	#AT91C_EMAC_CLK
 (() 0x3 << 10)

1539 
	#AT91C_EMAC_CLK_HCLK_8
 (() 0x0 << 10)

1540 
	#AT91C_EMAC_CLK_HCLK_16
 (() 0x1 << 10)

1541 
	#AT91C_EMAC_CLK_HCLK_32
 (() 0x2 << 10)

1542 
	#AT91C_EMAC_CLK_HCLK_64
 (() 0x3 << 10)

1543 
	#AT91C_EMAC_RTY
 (() 0x1 << 12)

1544 
	#AT91C_EMAC_PAE
 (() 0x1 << 13)

1545 
	#AT91C_EMAC_RBOF
 (() 0x3 << 14)

1546 
	#AT91C_EMAC_RBOF_OFFSET_0
 (() 0x0 << 14)

1547 
	#AT91C_EMAC_RBOF_OFFSET_1
 (() 0x1 << 14)

1548 
	#AT91C_EMAC_RBOF_OFFSET_2
 (() 0x2 << 14)

1549 
	#AT91C_EMAC_RBOF_OFFSET_3
 (() 0x3 << 14)

1550 
	#AT91C_EMAC_RLCE
 (() 0x1 << 16)

1551 
	#AT91C_EMAC_DRFCS
 (() 0x1 << 17)

1552 
	#AT91C_EMAC_EFRHD
 (() 0x1 << 18)

1553 
	#AT91C_EMAC_IRXFCS
 (() 0x1 << 19)

1555 
	#AT91C_EMAC_LINKR
 (() 0x1 << 0)

1556 
	#AT91C_EMAC_MDIO
 (() 0x1 << 1)

1557 
	#AT91C_EMAC_IDLE
 (() 0x1 << 2)

1559 
	#AT91C_EMAC_UBR
 (() 0x1 << 0)

1560 
	#AT91C_EMAC_COL
 (() 0x1 << 1)

1561 
	#AT91C_EMAC_RLES
 (() 0x1 << 2)

1562 
	#AT91C_EMAC_TGO
 (() 0x1 << 3)

1563 
	#AT91C_EMAC_BEX
 (() 0x1 << 4)

1564 
	#AT91C_EMAC_COMP
 (() 0x1 << 5)

1565 
	#AT91C_EMAC_UND
 (() 0x1 << 6)

1567 
	#AT91C_EMAC_BNA
 (() 0x1 << 0)

1568 
	#AT91C_EMAC_REC
 (() 0x1 << 1)

1569 
	#AT91C_EMAC_OVR
 (() 0x1 << 2)

1571 
	#AT91C_EMAC_MFD
 (() 0x1 << 0)

1572 
	#AT91C_EMAC_RCOMP
 (() 0x1 << 1)

1573 
	#AT91C_EMAC_RXUBR
 (() 0x1 << 2)

1574 
	#AT91C_EMAC_TXUBR
 (() 0x1 << 3)

1575 
	#AT91C_EMAC_TUNDR
 (() 0x1 << 4)

1576 
	#AT91C_EMAC_RLEX
 (() 0x1 << 5)

1577 
	#AT91C_EMAC_TXERR
 (() 0x1 << 6)

1578 
	#AT91C_EMAC_TCOMP
 (() 0x1 << 7)

1579 
	#AT91C_EMAC_LINK
 (() 0x1 << 9)

1580 
	#AT91C_EMAC_ROVR
 (() 0x1 << 10)

1581 
	#AT91C_EMAC_HRESP
 (() 0x1 << 11)

1582 
	#AT91C_EMAC_PFRE
 (() 0x1 << 12)

1583 
	#AT91C_EMAC_PTZ
 (() 0x1 << 13)

1588 
	#AT91C_EMAC_DATA
 (() 0xFFFF << 0)

1589 
	#AT91C_EMAC_CODE
 (() 0x3 << 16)

1590 
	#AT91C_EMAC_REGA
 (() 0x1F << 18)

1591 
	#AT91C_EMAC_PHYA
 (() 0x1F << 23)

1592 
	#AT91C_EMAC_RW
 (() 0x3 << 28)

1593 
	#AT91C_EMAC_SOF
 (() 0x3 << 30)

1595 
	#AT91C_EMAC_RMII
 (() 0x1 << 0)

1597 
	#AT91C_EMAC_IP
 (() 0xFFFF << 0)

1598 
	#AT91C_EMAC_MAG
 (() 0x1 << 16)

1599 
	#AT91C_EMAC_ARP
 (() 0x1 << 17)

1600 
	#AT91C_EMAC_SA1
 (() 0x1 << 18)

1602 
	#AT91C_EMAC_REVREF
 (() 0xFFFF << 0)

1603 
	#AT91C_EMAC_PARTREF
 (() 0xFFFF << 16)

1604 

	)

1608 
	s_AT91S_ADC
 {

1609 
AT91_REG
 
	mADC_CR
;

1610 
AT91_REG
 
	mADC_MR
;

1611 
AT91_REG
 
	mRe£rved0
[2];

1612 
AT91_REG
 
	mADC_CHER
;

1613 
AT91_REG
 
	mADC_CHDR
;

1614 
AT91_REG
 
	mADC_CHSR
;

1615 
AT91_REG
 
	mADC_SR
;

1616 
AT91_REG
 
	mADC_LCDR
;

1617 
AT91_REG
 
	mADC_IER
;

1618 
AT91_REG
 
	mADC_IDR
;

1619 
AT91_REG
 
	mADC_IMR
;

1620 
AT91_REG
 
	mADC_CDR0
;

1621 
AT91_REG
 
	mADC_CDR1
;

1622 
AT91_REG
 
	mADC_CDR2
;

1623 
AT91_REG
 
	mADC_CDR3
;

1624 
AT91_REG
 
	mADC_CDR4
;

1625 
AT91_REG
 
	mADC_CDR5
;

1626 
AT91_REG
 
	mADC_CDR6
;

1627 
AT91_REG
 
	mADC_CDR7
;

1628 
AT91_REG
 
	mRe£rved1
[44];

1629 
AT91_REG
 
	mADC_RPR
;

1630 
AT91_REG
 
	mADC_RCR
;

1631 
AT91_REG
 
	mADC_TPR
;

1632 
AT91_REG
 
	mADC_TCR
;

1633 
AT91_REG
 
	mADC_RNPR
;

1634 
AT91_REG
 
	mADC_RNCR
;

1635 
AT91_REG
 
	mADC_TNPR
;

1636 
AT91_REG
 
	mADC_TNCR
;

1637 
AT91_REG
 
	mADC_PTCR
;

1638 
AT91_REG
 
	mADC_PTSR
;

1639 } 
	tAT91S_ADC
, *
	tAT91PS_ADC
;

1642 
	#AT91C_ADC_SWRST
 (() 0x1 << 0)

1643 
	#AT91C_ADC_START
 (() 0x1 << 1)

1645 
	#AT91C_ADC_TRGEN
 (() 0x1 << 0)

1646 
	#AT91C_ADC_TRGEN_DIS
 (() 0x0)

1647 
	#AT91C_ADC_TRGEN_EN
 (() 0x1)

1648 
	#AT91C_ADC_TRGSEL
 (() 0x7 << 1)

1649 
	#AT91C_ADC_TRGSEL_TIOA0
 (() 0x0 << 1)

1650 
	#AT91C_ADC_TRGSEL_TIOA1
 (() 0x1 << 1)

1651 
	#AT91C_ADC_TRGSEL_TIOA2
 (() 0x2 << 1)

1652 
	#AT91C_ADC_TRGSEL_TIOA3
 (() 0x3 << 1)

1653 
	#AT91C_ADC_TRGSEL_TIOA4
 (() 0x4 << 1)

1654 
	#AT91C_ADC_TRGSEL_TIOA5
 (() 0x5 << 1)

1655 
	#AT91C_ADC_TRGSEL_EXT
 (() 0x6 << 1)

1656 
	#AT91C_ADC_LOWRES
 (() 0x1 << 4)

1657 
	#AT91C_ADC_LOWRES_10_BIT
 (() 0x0 << 4)

1658 
	#AT91C_ADC_LOWRES_8_BIT
 (() 0x1 << 4)

1659 
	#AT91C_ADC_SLEEP
 (() 0x1 << 5)

1660 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (() 0x0 << 5)

1661 
	#AT91C_ADC_SLEEP_MODE
 (() 0x1 << 5)

1662 
	#AT91C_ADC_PRESCAL
 (() 0x3F << 8)

1663 
	#AT91C_ADC_STARTUP
 (() 0x1F << 16)

1664 
	#AT91C_ADC_SHTIM
 (() 0xF << 24)

1666 
	#AT91C_ADC_CH0
 (() 0x1 << 0)

1667 
	#AT91C_ADC_CH1
 (() 0x1 << 1)

1668 
	#AT91C_ADC_CH2
 (() 0x1 << 2)

1669 
	#AT91C_ADC_CH3
 (() 0x1 << 3)

1670 
	#AT91C_ADC_CH4
 (() 0x1 << 4)

1671 
	#AT91C_ADC_CH5
 (() 0x1 << 5)

1672 
	#AT91C_ADC_CH6
 (() 0x1 << 6)

1673 
	#AT91C_ADC_CH7
 (() 0x1 << 7)

1677 
	#AT91C_ADC_EOC0
 (() 0x1 << 0)

1678 
	#AT91C_ADC_EOC1
 (() 0x1 << 1)

1679 
	#AT91C_ADC_EOC2
 (() 0x1 << 2)

1680 
	#AT91C_ADC_EOC3
 (() 0x1 << 3)

1681 
	#AT91C_ADC_EOC4
 (() 0x1 << 4)

1682 
	#AT91C_ADC_EOC5
 (() 0x1 << 5)

1683 
	#AT91C_ADC_EOC6
 (() 0x1 << 6)

1684 
	#AT91C_ADC_EOC7
 (() 0x1 << 7)

1685 
	#AT91C_ADC_OVRE0
 (() 0x1 << 8)

1686 
	#AT91C_ADC_OVRE1
 (() 0x1 << 9)

1687 
	#AT91C_ADC_OVRE2
 (() 0x1 << 10)

1688 
	#AT91C_ADC_OVRE3
 (() 0x1 << 11)

1689 
	#AT91C_ADC_OVRE4
 (() 0x1 << 12)

1690 
	#AT91C_ADC_OVRE5
 (() 0x1 << 13)

1691 
	#AT91C_ADC_OVRE6
 (() 0x1 << 14)

1692 
	#AT91C_ADC_OVRE7
 (() 0x1 << 15)

1693 
	#AT91C_ADC_DRDY
 (() 0x1 << 16)

1694 
	#AT91C_ADC_GOVRE
 (() 0x1 << 17)

1695 
	#AT91C_ADC_ENDRX
 (() 0x1 << 18)

1696 
	#AT91C_ADC_RXBUFF
 (() 0x1 << 19)

1698 
	#AT91C_ADC_LDATA
 (() 0x3FF << 0)

1703 
	#AT91C_ADC_DATA
 (() 0x3FF << 0)

1711 

	)

1715 
	s_AT91S_AES
 {

1716 
AT91_REG
 
	mAES_CR
;

1717 
AT91_REG
 
	mAES_MR
;

1718 
AT91_REG
 
	mRe£rved0
[2];

1719 
AT91_REG
 
	mAES_IER
;

1720 
AT91_REG
 
	mAES_IDR
;

1721 
AT91_REG
 
	mAES_IMR
;

1722 
AT91_REG
 
	mAES_ISR
;

1723 
AT91_REG
 
	mAES_KEYWxR
[4];

1724 
AT91_REG
 
	mRe£rved1
[4];

1725 
AT91_REG
 
	mAES_IDATAxR
[4];

1726 
AT91_REG
 
	mAES_ODATAxR
[4];

1727 
AT91_REG
 
	mAES_IVxR
[4];

1728 
AT91_REG
 
	mRe£rved2
[35];

1729 
AT91_REG
 
	mAES_VR
;

1730 
AT91_REG
 
	mAES_RPR
;

1731 
AT91_REG
 
	mAES_RCR
;

1732 
AT91_REG
 
	mAES_TPR
;

1733 
AT91_REG
 
	mAES_TCR
;

1734 
AT91_REG
 
	mAES_RNPR
;

1735 
AT91_REG
 
	mAES_RNCR
;

1736 
AT91_REG
 
	mAES_TNPR
;

1737 
AT91_REG
 
	mAES_TNCR
;

1738 
AT91_REG
 
	mAES_PTCR
;

1739 
AT91_REG
 
	mAES_PTSR
;

1740 } 
	tAT91S_AES
, *
	tAT91PS_AES
;

1743 
	#AT91C_AES_START
 (() 0x1 << 0)

1744 
	#AT91C_AES_SWRST
 (() 0x1 << 8)

1745 
	#AT91C_AES_LOADSEED
 (() 0x1 << 16)

1747 
	#AT91C_AES_CIPHER
 (() 0x1 << 0)

1748 
	#AT91C_AES_PROCDLY
 (() 0xF << 4)

1749 
	#AT91C_AES_SMOD
 (() 0x3 << 8)

1750 
	#AT91C_AES_SMOD_MANUAL
 (() 0x0 << 8)

1751 
	#AT91C_AES_SMOD_AUTO
 (() 0x1 << 8)

1752 
	#AT91C_AES_SMOD_PDC
 (() 0x2 << 8)

1753 
	#AT91C_AES_OPMOD
 (() 0x7 << 12)

1754 
	#AT91C_AES_OPMOD_ECB
 (() 0x0 << 12)

1755 
	#AT91C_AES_OPMOD_CBC
 (() 0x1 << 12)

1756 
	#AT91C_AES_OPMOD_OFB
 (() 0x2 << 12)

1757 
	#AT91C_AES_OPMOD_CFB
 (() 0x3 << 12)

1758 
	#AT91C_AES_OPMOD_CTR
 (() 0x4 << 12)

1759 
	#AT91C_AES_LOD
 (() 0x1 << 15)

1760 
	#AT91C_AES_CFBS
 (() 0x7 << 16)

1761 
	#AT91C_AES_CFBS_128_BIT
 (() 0x0 << 16)

1762 
	#AT91C_AES_CFBS_64_BIT
 (() 0x1 << 16)

1763 
	#AT91C_AES_CFBS_32_BIT
 (() 0x2 << 16)

1764 
	#AT91C_AES_CFBS_16_BIT
 (() 0x3 << 16)

1765 
	#AT91C_AES_CFBS_8_BIT
 (() 0x4 << 16)

1766 
	#AT91C_AES_CKEY
 (() 0xF << 20)

1767 
	#AT91C_AES_CTYPE
 (() 0x1F << 24)

1768 
	#AT91C_AES_CTYPE_TYPE1_EN
 (() 0x1 << 24)

1769 
	#AT91C_AES_CTYPE_TYPE2_EN
 (() 0x2 << 24)

1770 
	#AT91C_AES_CTYPE_TYPE3_EN
 (() 0x4 << 24)

1771 
	#AT91C_AES_CTYPE_TYPE4_EN
 (() 0x8 << 24)

1772 
	#AT91C_AES_CTYPE_TYPE5_EN
 (() 0x10 << 24)

1774 
	#AT91C_AES_DATRDY
 (() 0x1 << 0)

1775 
	#AT91C_AES_ENDRX
 (() 0x1 << 1)

1776 
	#AT91C_AES_ENDTX
 (() 0x1 << 2)

1777 
	#AT91C_AES_RXBUFF
 (() 0x1 << 3)

1778 
	#AT91C_AES_TXBUFE
 (() 0x1 << 4)

1779 
	#AT91C_AES_URAD
 (() 0x1 << 8)

1783 
	#AT91C_AES_URAT
 (() 0x7 << 12)

1784 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1785 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1786 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1787 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (() 0x3 << 12)

1788 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (() 0x4 << 12)

1789 
	#AT91C_AES_URAT_WO_REG_READ
 (() 0x5 << 12)

1790 

	)

1794 
	s_AT91S_TDES
 {

1795 
AT91_REG
 
	mTDES_CR
;

1796 
AT91_REG
 
	mTDES_MR
;

1797 
AT91_REG
 
	mRe£rved0
[2];

1798 
AT91_REG
 
	mTDES_IER
;

1799 
AT91_REG
 
	mTDES_IDR
;

1800 
AT91_REG
 
	mTDES_IMR
;

1801 
AT91_REG
 
	mTDES_ISR
;

1802 
AT91_REG
 
	mTDES_KEY1WxR
[2];

1803 
AT91_REG
 
	mTDES_KEY2WxR
[2];

1804 
AT91_REG
 
	mTDES_KEY3WxR
[2];

1805 
AT91_REG
 
	mRe£rved1
[2];

1806 
AT91_REG
 
	mTDES_IDATAxR
[2];

1807 
AT91_REG
 
	mRe£rved2
[2];

1808 
AT91_REG
 
	mTDES_ODATAxR
[2];

1809 
AT91_REG
 
	mRe£rved3
[2];

1810 
AT91_REG
 
	mTDES_IVxR
[2];

1811 
AT91_REG
 
	mRe£rved4
[37];

1812 
AT91_REG
 
	mTDES_VR
;

1813 
AT91_REG
 
	mTDES_RPR
;

1814 
AT91_REG
 
	mTDES_RCR
;

1815 
AT91_REG
 
	mTDES_TPR
;

1816 
AT91_REG
 
	mTDES_TCR
;

1817 
AT91_REG
 
	mTDES_RNPR
;

1818 
AT91_REG
 
	mTDES_RNCR
;

1819 
AT91_REG
 
	mTDES_TNPR
;

1820 
AT91_REG
 
	mTDES_TNCR
;

1821 
AT91_REG
 
	mTDES_PTCR
;

1822 
AT91_REG
 
	mTDES_PTSR
;

1823 } 
	tAT91S_TDES
, *
	tAT91PS_TDES
;

1826 
	#AT91C_TDES_START
 (() 0x1 << 0)

1827 
	#AT91C_TDES_SWRST
 (() 0x1 << 8)

1829 
	#AT91C_TDES_CIPHER
 (() 0x1 << 0)

1830 
	#AT91C_TDES_TDESMOD
 (() 0x1 << 1)

1831 
	#AT91C_TDES_KEYMOD
 (() 0x1 << 4)

1832 
	#AT91C_TDES_SMOD
 (() 0x3 << 8)

1833 
	#AT91C_TDES_SMOD_MANUAL
 (() 0x0 << 8)

1834 
	#AT91C_TDES_SMOD_AUTO
 (() 0x1 << 8)

1835 
	#AT91C_TDES_SMOD_PDC
 (() 0x2 << 8)

1836 
	#AT91C_TDES_OPMOD
 (() 0x3 << 12)

1837 
	#AT91C_TDES_OPMOD_ECB
 (() 0x0 << 12)

1838 
	#AT91C_TDES_OPMOD_CBC
 (() 0x1 << 12)

1839 
	#AT91C_TDES_OPMOD_OFB
 (() 0x2 << 12)

1840 
	#AT91C_TDES_OPMOD_CFB
 (() 0x3 << 12)

1841 
	#AT91C_TDES_LOD
 (() 0x1 << 15)

1842 
	#AT91C_TDES_CFBS
 (() 0x3 << 16)

1843 
	#AT91C_TDES_CFBS_64_BIT
 (() 0x0 << 16)

1844 
	#AT91C_TDES_CFBS_32_BIT
 (() 0x1 << 16)

1845 
	#AT91C_TDES_CFBS_16_BIT
 (() 0x2 << 16)

1846 
	#AT91C_TDES_CFBS_8_BIT
 (() 0x3 << 16)

1848 
	#AT91C_TDES_DATRDY
 (() 0x1 << 0)

1849 
	#AT91C_TDES_ENDRX
 (() 0x1 << 1)

1850 
	#AT91C_TDES_ENDTX
 (() 0x1 << 2)

1851 
	#AT91C_TDES_RXBUFF
 (() 0x1 << 3)

1852 
	#AT91C_TDES_TXBUFE
 (() 0x1 << 4)

1853 
	#AT91C_TDES_URAD
 (() 0x1 << 8)

1857 
	#AT91C_TDES_URAT
 (() 0x3 << 12)

1858 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1859 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1860 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1861 
	#AT91C_TDES_URAT_WO_REG_READ
 (() 0x3 << 12)

1862 

	)

1868 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1869 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1870 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1871 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1872 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1873 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1874 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1875 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1876 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1877 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1878 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1879 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1880 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1881 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1882 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1883 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1884 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1885 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1887 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1888 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1889 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1890 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1891 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1892 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1893 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1894 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1895 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1896 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1898 
	#AT91C_DBGU_EXID
 ((
AT91_REG
 *) 0xFFFFF244)

1899 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1900 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1901 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1902 
	#AT91C_DBGU_CIDR
 ((
AT91_REG
 *) 0xFFFFF240)

1903 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1904 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1905 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1906 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1907 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1908 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1909 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1911 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1912 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1913 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1914 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1915 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1916 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1917 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1918 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1919 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1920 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1921 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1922 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1923 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1924 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1925 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1926 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1927 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1928 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1929 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1930 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1931 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1932 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1933 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1934 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1935 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1936 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1937 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1938 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1939 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1941 
	#AT91C_PIOB_OWDR
 ((
AT91_REG
 *) 0xFFFFF6A4)

1942 
	#AT91C_PIOB_MDER
 ((
AT91_REG
 *) 0xFFFFF650)

1943 
	#AT91C_PIOB_PPUSR
 ((
AT91_REG
 *) 0xFFFFF668)

1944 
	#AT91C_PIOB_IMR
 ((
AT91_REG
 *) 0xFFFFF648)

1945 
	#AT91C_PIOB_ASR
 ((
AT91_REG
 *) 0xFFFFF670)

1946 
	#AT91C_PIOB_PPUDR
 ((
AT91_REG
 *) 0xFFFFF660)

1947 
	#AT91C_PIOB_PSR
 ((
AT91_REG
 *) 0xFFFFF608)

1948 
	#AT91C_PIOB_IER
 ((
AT91_REG
 *) 0xFFFFF640)

1949 
	#AT91C_PIOB_CODR
 ((
AT91_REG
 *) 0xFFFFF634)

1950 
	#AT91C_PIOB_OWER
 ((
AT91_REG
 *) 0xFFFFF6A0)

1951 
	#AT91C_PIOB_ABSR
 ((
AT91_REG
 *) 0xFFFFF678)

1952 
	#AT91C_PIOB_IFDR
 ((
AT91_REG
 *) 0xFFFFF624)

1953 
	#AT91C_PIOB_PDSR
 ((
AT91_REG
 *) 0xFFFFF63C)

1954 
	#AT91C_PIOB_IDR
 ((
AT91_REG
 *) 0xFFFFF644)

1955 
	#AT91C_PIOB_OWSR
 ((
AT91_REG
 *) 0xFFFFF6A8)

1956 
	#AT91C_PIOB_PDR
 ((
AT91_REG
 *) 0xFFFFF604)

1957 
	#AT91C_PIOB_ODR
 ((
AT91_REG
 *) 0xFFFFF614)

1958 
	#AT91C_PIOB_IFSR
 ((
AT91_REG
 *) 0xFFFFF628)

1959 
	#AT91C_PIOB_PPUER
 ((
AT91_REG
 *) 0xFFFFF664)

1960 
	#AT91C_PIOB_SODR
 ((
AT91_REG
 *) 0xFFFFF630)

1961 
	#AT91C_PIOB_ISR
 ((
AT91_REG
 *) 0xFFFFF64C)

1962 
	#AT91C_PIOB_ODSR
 ((
AT91_REG
 *) 0xFFFFF638)

1963 
	#AT91C_PIOB_OSR
 ((
AT91_REG
 *) 0xFFFFF618)

1964 
	#AT91C_PIOB_MDSR
 ((
AT91_REG
 *) 0xFFFFF658)

1965 
	#AT91C_PIOB_IFER
 ((
AT91_REG
 *) 0xFFFFF620)

1966 
	#AT91C_PIOB_BSR
 ((
AT91_REG
 *) 0xFFFFF674)

1967 
	#AT91C_PIOB_MDDR
 ((
AT91_REG
 *) 0xFFFFF654)

1968 
	#AT91C_PIOB_OER
 ((
AT91_REG
 *) 0xFFFFF610)

1969 
	#AT91C_PIOB_PER
 ((
AT91_REG
 *) 0xFFFFF600)

1971 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1972 
	#AT91C_CKGR_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1973 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1975 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1976 
	#AT91C_PMC_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1977 
	#AT91C_PMC_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1978 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1979 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1980 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1981 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1982 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1983 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1984 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1985 
	#AT91C_PMC_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1986 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1987 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1988 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1989 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1991 
	#AT91C_RSTC_RCR
 ((
AT91_REG
 *) 0xFFFFFD00)

1992 
	#AT91C_RSTC_RMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1993 
	#AT91C_RSTC_RSR
 ((
AT91_REG
 *) 0xFFFFFD04)

1995 
	#AT91C_RTTC_RTSR
 ((
AT91_REG
 *) 0xFFFFFD2C)

1996 
	#AT91C_RTTC_RTMR
 ((
AT91_REG
 *) 0xFFFFFD20)

1997 
	#AT91C_RTTC_RTVR
 ((
AT91_REG
 *) 0xFFFFFD28)

1998 
	#AT91C_RTTC_RTAR
 ((
AT91_REG
 *) 0xFFFFFD24)

2000 
	#AT91C_PITC_PIVR
 ((
AT91_REG
 *) 0xFFFFFD38)

2001 
	#AT91C_PITC_PISR
 ((
AT91_REG
 *) 0xFFFFFD34)

2002 
	#AT91C_PITC_PIIR
 ((
AT91_REG
 *) 0xFFFFFD3C)

2003 
	#AT91C_PITC_PIMR
 ((
AT91_REG
 *) 0xFFFFFD30)

2005 
	#AT91C_WDTC_WDCR
 ((
AT91_REG
 *) 0xFFFFFD40)

2006 
	#AT91C_WDTC_WDSR
 ((
AT91_REG
 *) 0xFFFFFD48)

2007 
	#AT91C_WDTC_WDMR
 ((
AT91_REG
 *) 0xFFFFFD44)

2009 
	#AT91C_VREG_MR
 ((
AT91_REG
 *) 0xFFFFFD60)

2011 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

2012 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

2013 
	#AT91C_MC_FCR
 ((
AT91_REG
 *) 0xFFFFFF64)

2014 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

2015 
	#AT91C_MC_FSR
 ((
AT91_REG
 *) 0xFFFFFF68)

2016 
	#AT91C_MC_FMR
 ((
AT91_REG
 *) 0xFFFFFF60)

2018 
	#AT91C_SPI1_PTCR
 ((
AT91_REG
 *) 0xFFFE4120)

2019 
	#AT91C_SPI1_RPR
 ((
AT91_REG
 *) 0xFFFE4100)

2020 
	#AT91C_SPI1_TNCR
 ((
AT91_REG
 *) 0xFFFE411C)

2021 
	#AT91C_SPI1_TPR
 ((
AT91_REG
 *) 0xFFFE4108)

2022 
	#AT91C_SPI1_TNPR
 ((
AT91_REG
 *) 0xFFFE4118)

2023 
	#AT91C_SPI1_TCR
 ((
AT91_REG
 *) 0xFFFE410C)

2024 
	#AT91C_SPI1_RCR
 ((
AT91_REG
 *) 0xFFFE4104)

2025 
	#AT91C_SPI1_RNPR
 ((
AT91_REG
 *) 0xFFFE4110)

2026 
	#AT91C_SPI1_RNCR
 ((
AT91_REG
 *) 0xFFFE4114)

2027 
	#AT91C_SPI1_PTSR
 ((
AT91_REG
 *) 0xFFFE4124)

2029 
	#AT91C_SPI1_IMR
 ((
AT91_REG
 *) 0xFFFE401C)

2030 
	#AT91C_SPI1_IER
 ((
AT91_REG
 *) 0xFFFE4014)

2031 
	#AT91C_SPI1_MR
 ((
AT91_REG
 *) 0xFFFE4004)

2032 
	#AT91C_SPI1_RDR
 ((
AT91_REG
 *) 0xFFFE4008)

2033 
	#AT91C_SPI1_IDR
 ((
AT91_REG
 *) 0xFFFE4018)

2034 
	#AT91C_SPI1_SR
 ((
AT91_REG
 *) 0xFFFE4010)

2035 
	#AT91C_SPI1_TDR
 ((
AT91_REG
 *) 0xFFFE400C)

2036 
	#AT91C_SPI1_CR
 ((
AT91_REG
 *) 0xFFFE4000)

2037 
	#AT91C_SPI1_CSR
 ((
AT91_REG
 *) 0xFFFE4030)

2039 
	#AT91C_SPI0_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

2040 
	#AT91C_SPI0_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

2041 
	#AT91C_SPI0_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

2042 
	#AT91C_SPI0_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

2043 
	#AT91C_SPI0_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

2044 
	#AT91C_SPI0_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

2045 
	#AT91C_SPI0_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

2046 
	#AT91C_SPI0_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

2047 
	#AT91C_SPI0_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

2048 
	#AT91C_SPI0_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

2050 
	#AT91C_SPI0_IER
 ((
AT91_REG
 *) 0xFFFE0014)

2051 
	#AT91C_SPI0_SR
 ((
AT91_REG
 *) 0xFFFE0010)

2052 
	#AT91C_SPI0_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

2053 
	#AT91C_SPI0_CR
 ((
AT91_REG
 *) 0xFFFE0000)

2054 
	#AT91C_SPI0_MR
 ((
AT91_REG
 *) 0xFFFE0004)

2055 
	#AT91C_SPI0_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

2056 
	#AT91C_SPI0_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

2057 
	#AT91C_SPI0_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

2058 
	#AT91C_SPI0_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

2060 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

2061 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

2062 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

2063 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

2064 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

2065 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

2066 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

2067 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

2068 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

2069 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

2071 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

2072 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

2073 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

2074 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

2075 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

2076 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

2077 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

2078 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

2079 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

2080 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

2081 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

2082 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

2083 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

2084 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

2086 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

2087 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

2088 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

2089 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

2090 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

2091 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

2092 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

2093 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

2094 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

2095 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

2097 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

2098 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

2099 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

2100 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

2101 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

2102 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

2103 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

2104 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

2105 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

2106 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

2107 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

2108 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

2109 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

2110 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

2112 
	#AT91C_SSC_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

2113 
	#AT91C_SSC_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

2114 
	#AT91C_SSC_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

2115 
	#AT91C_SSC_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

2116 
	#AT91C_SSC_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

2117 
	#AT91C_SSC_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

2118 
	#AT91C_SSC_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

2119 
	#AT91C_SSC_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

2120 
	#AT91C_SSC_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

2121 
	#AT91C_SSC_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

2123 
	#AT91C_SSC_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

2124 
	#AT91C_SSC_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

2125 
	#AT91C_SSC_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

2126 
	#AT91C_SSC_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

2127 
	#AT91C_SSC_THR
 ((
AT91_REG
 *) 0xFFFD4024)

2128 
	#AT91C_SSC_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

2129 
	#AT91C_SSC_IER
 ((
AT91_REG
 *) 0xFFFD4044)

2130 
	#AT91C_SSC_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

2131 
	#AT91C_SSC_SR
 ((
AT91_REG
 *) 0xFFFD4040)

2132 
	#AT91C_SSC_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

2133 
	#AT91C_SSC_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

2134 
	#AT91C_SSC_CR
 ((
AT91_REG
 *) 0xFFFD4000)

2135 
	#AT91C_SSC_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

2136 
	#AT91C_SSC_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

2138 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

2139 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

2140 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

2141 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

2142 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

2143 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

2144 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

2145 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

2146 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

2147 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

2149 
	#AT91C_PWMC_CH3_CUPDR
 ((
AT91_REG
 *) 0xFFFCC270)

2150 
	#AT91C_PWMC_CH3_Re£rved
 ((
AT91_REG
 *) 0xFFFCC274)

2151 
	#AT91C_PWMC_CH3_CPRDR
 ((
AT91_REG
 *) 0xFFFCC268)

2152 
	#AT91C_PWMC_CH3_CDTYR
 ((
AT91_REG
 *) 0xFFFCC264)

2153 
	#AT91C_PWMC_CH3_CCNTR
 ((
AT91_REG
 *) 0xFFFCC26C)

2154 
	#AT91C_PWMC_CH3_CMR
 ((
AT91_REG
 *) 0xFFFCC260)

2156 
	#AT91C_PWMC_CH2_Re£rved
 ((
AT91_REG
 *) 0xFFFCC254)

2157 
	#AT91C_PWMC_CH2_CMR
 ((
AT91_REG
 *) 0xFFFCC240)

2158 
	#AT91C_PWMC_CH2_CCNTR
 ((
AT91_REG
 *) 0xFFFCC24C)

2159 
	#AT91C_PWMC_CH2_CPRDR
 ((
AT91_REG
 *) 0xFFFCC248)

2160 
	#AT91C_PWMC_CH2_CUPDR
 ((
AT91_REG
 *) 0xFFFCC250)

2161 
	#AT91C_PWMC_CH2_CDTYR
 ((
AT91_REG
 *) 0xFFFCC244)

2163 
	#AT91C_PWMC_CH1_Re£rved
 ((
AT91_REG
 *) 0xFFFCC234)

2164 
	#AT91C_PWMC_CH1_CUPDR
 ((
AT91_REG
 *) 0xFFFCC230)

2165 
	#AT91C_PWMC_CH1_CPRDR
 ((
AT91_REG
 *) 0xFFFCC228)

2166 
	#AT91C_PWMC_CH1_CCNTR
 ((
AT91_REG
 *) 0xFFFCC22C)

2167 
	#AT91C_PWMC_CH1_CDTYR
 ((
AT91_REG
 *) 0xFFFCC224)

2168 
	#AT91C_PWMC_CH1_CMR
 ((
AT91_REG
 *) 0xFFFCC220)

2170 
	#AT91C_PWMC_CH0_Re£rved
 ((
AT91_REG
 *) 0xFFFCC214)

2171 
	#AT91C_PWMC_CH0_CPRDR
 ((
AT91_REG
 *) 0xFFFCC208)

2172 
	#AT91C_PWMC_CH0_CDTYR
 ((
AT91_REG
 *) 0xFFFCC204)

2173 
	#AT91C_PWMC_CH0_CMR
 ((
AT91_REG
 *) 0xFFFCC200)

2174 
	#AT91C_PWMC_CH0_CUPDR
 ((
AT91_REG
 *) 0xFFFCC210)

2175 
	#AT91C_PWMC_CH0_CCNTR
 ((
AT91_REG
 *) 0xFFFCC20C)

2177 
	#AT91C_PWMC_IDR
 ((
AT91_REG
 *) 0xFFFCC014)

2178 
	#AT91C_PWMC_DIS
 ((
AT91_REG
 *) 0xFFFCC008)

2179 
	#AT91C_PWMC_IER
 ((
AT91_REG
 *) 0xFFFCC010)

2180 
	#AT91C_PWMC_VR
 ((
AT91_REG
 *) 0xFFFCC0FC)

2181 
	#AT91C_PWMC_ISR
 ((
AT91_REG
 *) 0xFFFCC01C)

2182 
	#AT91C_PWMC_SR
 ((
AT91_REG
 *) 0xFFFCC00C)

2183 
	#AT91C_PWMC_IMR
 ((
AT91_REG
 *) 0xFFFCC018)

2184 
	#AT91C_PWMC_MR
 ((
AT91_REG
 *) 0xFFFCC000)

2185 
	#AT91C_PWMC_ENA
 ((
AT91_REG
 *) 0xFFFCC004)

2187 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

2188 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

2189 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

2190 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

2191 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

2192 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

2193 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

2194 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

2195 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

2196 
	#AT91C_UDP_TXVC
 ((
AT91_REG
 *) 0xFFFB0074)

2197 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

2198 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

2200 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

2201 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

2202 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

2203 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

2204 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

2205 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

2206 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

2207 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

2208 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

2209 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

2211 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

2212 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

2213 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

2214 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

2215 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

2216 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

2217 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

2218 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

2219 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

2220 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

2222 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

2223 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

2224 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

2225 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

2226 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

2227 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

2228 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

2229 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

2230 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

2231 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

2233 
	#AT91C_TCB_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

2234 
	#AT91C_TCB_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

2236 
	#AT91C_CAN_MB0_MDL
 ((
AT91_REG
 *) 0xFFFD0214)

2237 
	#AT91C_CAN_MB0_MAM
 ((
AT91_REG
 *) 0xFFFD0204)

2238 
	#AT91C_CAN_MB0_MCR
 ((
AT91_REG
 *) 0xFFFD021C)

2239 
	#AT91C_CAN_MB0_MID
 ((
AT91_REG
 *) 0xFFFD0208)

2240 
	#AT91C_CAN_MB0_MSR
 ((
AT91_REG
 *) 0xFFFD0210)

2241 
	#AT91C_CAN_MB0_MFID
 ((
AT91_REG
 *) 0xFFFD020C)

2242 
	#AT91C_CAN_MB0_MDH
 ((
AT91_REG
 *) 0xFFFD0218)

2243 
	#AT91C_CAN_MB0_MMR
 ((
AT91_REG
 *) 0xFFFD0200)

2245 
	#AT91C_CAN_MB1_MDL
 ((
AT91_REG
 *) 0xFFFD0234)

2246 
	#AT91C_CAN_MB1_MID
 ((
AT91_REG
 *) 0xFFFD0228)

2247 
	#AT91C_CAN_MB1_MMR
 ((
AT91_REG
 *) 0xFFFD0220)

2248 
	#AT91C_CAN_MB1_MSR
 ((
AT91_REG
 *) 0xFFFD0230)

2249 
	#AT91C_CAN_MB1_MAM
 ((
AT91_REG
 *) 0xFFFD0224)

2250 
	#AT91C_CAN_MB1_MDH
 ((
AT91_REG
 *) 0xFFFD0238)

2251 
	#AT91C_CAN_MB1_MCR
 ((
AT91_REG
 *) 0xFFFD023C)

2252 
	#AT91C_CAN_MB1_MFID
 ((
AT91_REG
 *) 0xFFFD022C)

2254 
	#AT91C_CAN_MB2_MCR
 ((
AT91_REG
 *) 0xFFFD025C)

2255 
	#AT91C_CAN_MB2_MDH
 ((
AT91_REG
 *) 0xFFFD0258)

2256 
	#AT91C_CAN_MB2_MID
 ((
AT91_REG
 *) 0xFFFD0248)

2257 
	#AT91C_CAN_MB2_MDL
 ((
AT91_REG
 *) 0xFFFD0254)

2258 
	#AT91C_CAN_MB2_MMR
 ((
AT91_REG
 *) 0xFFFD0240)

2259 
	#AT91C_CAN_MB2_MAM
 ((
AT91_REG
 *) 0xFFFD0244)

2260 
	#AT91C_CAN_MB2_MFID
 ((
AT91_REG
 *) 0xFFFD024C)

2261 
	#AT91C_CAN_MB2_MSR
 ((
AT91_REG
 *) 0xFFFD0250)

2263 
	#AT91C_CAN_MB3_MFID
 ((
AT91_REG
 *) 0xFFFD026C)

2264 
	#AT91C_CAN_MB3_MAM
 ((
AT91_REG
 *) 0xFFFD0264)

2265 
	#AT91C_CAN_MB3_MID
 ((
AT91_REG
 *) 0xFFFD0268)

2266 
	#AT91C_CAN_MB3_MCR
 ((
AT91_REG
 *) 0xFFFD027C)

2267 
	#AT91C_CAN_MB3_MMR
 ((
AT91_REG
 *) 0xFFFD0260)

2268 
	#AT91C_CAN_MB3_MSR
 ((
AT91_REG
 *) 0xFFFD0270)

2269 
	#AT91C_CAN_MB3_MDL
 ((
AT91_REG
 *) 0xFFFD0274)

2270 
	#AT91C_CAN_MB3_MDH
 ((
AT91_REG
 *) 0xFFFD0278)

2272 
	#AT91C_CAN_MB4_MID
 ((
AT91_REG
 *) 0xFFFD0288)

2273 
	#AT91C_CAN_MB4_MMR
 ((
AT91_REG
 *) 0xFFFD0280)

2274 
	#AT91C_CAN_MB4_MDH
 ((
AT91_REG
 *) 0xFFFD0298)

2275 
	#AT91C_CAN_MB4_MFID
 ((
AT91_REG
 *) 0xFFFD028C)

2276 
	#AT91C_CAN_MB4_MSR
 ((
AT91_REG
 *) 0xFFFD0290)

2277 
	#AT91C_CAN_MB4_MCR
 ((
AT91_REG
 *) 0xFFFD029C)

2278 
	#AT91C_CAN_MB4_MDL
 ((
AT91_REG
 *) 0xFFFD0294)

2279 
	#AT91C_CAN_MB4_MAM
 ((
AT91_REG
 *) 0xFFFD0284)

2281 
	#AT91C_CAN_MB5_MSR
 ((
AT91_REG
 *) 0xFFFD02B0)

2282 
	#AT91C_CAN_MB5_MCR
 ((
AT91_REG
 *) 0xFFFD02BC)

2283 
	#AT91C_CAN_MB5_MFID
 ((
AT91_REG
 *) 0xFFFD02AC)

2284 
	#AT91C_CAN_MB5_MDH
 ((
AT91_REG
 *) 0xFFFD02B8)

2285 
	#AT91C_CAN_MB5_MID
 ((
AT91_REG
 *) 0xFFFD02A8)

2286 
	#AT91C_CAN_MB5_MMR
 ((
AT91_REG
 *) 0xFFFD02A0)

2287 
	#AT91C_CAN_MB5_MDL
 ((
AT91_REG
 *) 0xFFFD02B4)

2288 
	#AT91C_CAN_MB5_MAM
 ((
AT91_REG
 *) 0xFFFD02A4)

2290 
	#AT91C_CAN_MB6_MFID
 ((
AT91_REG
 *) 0xFFFD02CC)

2291 
	#AT91C_CAN_MB6_MID
 ((
AT91_REG
 *) 0xFFFD02C8)

2292 
	#AT91C_CAN_MB6_MAM
 ((
AT91_REG
 *) 0xFFFD02C4)

2293 
	#AT91C_CAN_MB6_MSR
 ((
AT91_REG
 *) 0xFFFD02D0)

2294 
	#AT91C_CAN_MB6_MDL
 ((
AT91_REG
 *) 0xFFFD02D4)

2295 
	#AT91C_CAN_MB6_MCR
 ((
AT91_REG
 *) 0xFFFD02DC)

2296 
	#AT91C_CAN_MB6_MDH
 ((
AT91_REG
 *) 0xFFFD02D8)

2297 
	#AT91C_CAN_MB6_MMR
 ((
AT91_REG
 *) 0xFFFD02C0)

2299 
	#AT91C_CAN_MB7_MCR
 ((
AT91_REG
 *) 0xFFFD02FC)

2300 
	#AT91C_CAN_MB7_MDH
 ((
AT91_REG
 *) 0xFFFD02F8)

2301 
	#AT91C_CAN_MB7_MFID
 ((
AT91_REG
 *) 0xFFFD02EC)

2302 
	#AT91C_CAN_MB7_MDL
 ((
AT91_REG
 *) 0xFFFD02F4)

2303 
	#AT91C_CAN_MB7_MID
 ((
AT91_REG
 *) 0xFFFD02E8)

2304 
	#AT91C_CAN_MB7_MMR
 ((
AT91_REG
 *) 0xFFFD02E0)

2305 
	#AT91C_CAN_MB7_MAM
 ((
AT91_REG
 *) 0xFFFD02E4)

2306 
	#AT91C_CAN_MB7_MSR
 ((
AT91_REG
 *) 0xFFFD02F0)

2308 
	#AT91C_CAN_TCR
 ((
AT91_REG
 *) 0xFFFD0024)

2309 
	#AT91C_CAN_IMR
 ((
AT91_REG
 *) 0xFFFD000C)

2310 
	#AT91C_CAN_IER
 ((
AT91_REG
 *) 0xFFFD0004)

2311 
	#AT91C_CAN_ECR
 ((
AT91_REG
 *) 0xFFFD0020)

2312 
	#AT91C_CAN_TIMESTP
 ((
AT91_REG
 *) 0xFFFD001C)

2313 
	#AT91C_CAN_MR
 ((
AT91_REG
 *) 0xFFFD0000)

2314 
	#AT91C_CAN_IDR
 ((
AT91_REG
 *) 0xFFFD0008)

2315 
	#AT91C_CAN_ACR
 ((
AT91_REG
 *) 0xFFFD0028)

2316 
	#AT91C_CAN_TIM
 ((
AT91_REG
 *) 0xFFFD0018)

2317 
	#AT91C_CAN_SR
 ((
AT91_REG
 *) 0xFFFD0010)

2318 
	#AT91C_CAN_BR
 ((
AT91_REG
 *) 0xFFFD0014)

2319 
	#AT91C_CAN_VR
 ((
AT91_REG
 *) 0xFFFD00FC)

2321 
	#AT91C_EMAC_ISR
 ((
AT91_REG
 *) 0xFFFDC024)

2322 
	#AT91C_EMAC_SA4H
 ((
AT91_REG
 *) 0xFFFDC0B4)

2323 
	#AT91C_EMAC_SA1L
 ((
AT91_REG
 *) 0xFFFDC098)

2324 
	#AT91C_EMAC_ELE
 ((
AT91_REG
 *) 0xFFFDC078)

2325 
	#AT91C_EMAC_LCOL
 ((
AT91_REG
 *) 0xFFFDC05C)

2326 
	#AT91C_EMAC_RLE
 ((
AT91_REG
 *) 0xFFFDC088)

2327 
	#AT91C_EMAC_WOL
 ((
AT91_REG
 *) 0xFFFDC0C4)

2328 
	#AT91C_EMAC_DTF
 ((
AT91_REG
 *) 0xFFFDC058)

2329 
	#AT91C_EMAC_TUND
 ((
AT91_REG
 *) 0xFFFDC064)

2330 
	#AT91C_EMAC_NCR
 ((
AT91_REG
 *) 0xFFFDC000)

2331 
	#AT91C_EMAC_SA4L
 ((
AT91_REG
 *) 0xFFFDC0B0)

2332 
	#AT91C_EMAC_RSR
 ((
AT91_REG
 *) 0xFFFDC020)

2333 
	#AT91C_EMAC_SA3L
 ((
AT91_REG
 *) 0xFFFDC0A8)

2334 
	#AT91C_EMAC_TSR
 ((
AT91_REG
 *) 0xFFFDC014)

2335 
	#AT91C_EMAC_IDR
 ((
AT91_REG
 *) 0xFFFDC02C)

2336 
	#AT91C_EMAC_RSE
 ((
AT91_REG
 *) 0xFFFDC074)

2337 
	#AT91C_EMAC_ECOL
 ((
AT91_REG
 *) 0xFFFDC060)

2338 
	#AT91C_EMAC_TID
 ((
AT91_REG
 *) 0xFFFDC0B8)

2339 
	#AT91C_EMAC_HRB
 ((
AT91_REG
 *) 0xFFFDC090)

2340 
	#AT91C_EMAC_TBQP
 ((
AT91_REG
 *) 0xFFFDC01C)

2341 
	#AT91C_EMAC_USRIO
 ((
AT91_REG
 *) 0xFFFDC0C0)

2342 
	#AT91C_EMAC_PTR
 ((
AT91_REG
 *) 0xFFFDC038)

2343 
	#AT91C_EMAC_SA2H
 ((
AT91_REG
 *) 0xFFFDC0A4)

2344 
	#AT91C_EMAC_ROV
 ((
AT91_REG
 *) 0xFFFDC070)

2345 
	#AT91C_EMAC_ALE
 ((
AT91_REG
 *) 0xFFFDC054)

2346 
	#AT91C_EMAC_RJA
 ((
AT91_REG
 *) 0xFFFDC07C)

2347 
	#AT91C_EMAC_RBQP
 ((
AT91_REG
 *) 0xFFFDC018)

2348 
	#AT91C_EMAC_TPF
 ((
AT91_REG
 *) 0xFFFDC08C)

2349 
	#AT91C_EMAC_NCFGR
 ((
AT91_REG
 *) 0xFFFDC004)

2350 
	#AT91C_EMAC_HRT
 ((
AT91_REG
 *) 0xFFFDC094)

2351 
	#AT91C_EMAC_USF
 ((
AT91_REG
 *) 0xFFFDC080)

2352 
	#AT91C_EMAC_FCSE
 ((
AT91_REG
 *) 0xFFFDC050)

2353 
	#AT91C_EMAC_TPQ
 ((
AT91_REG
 *) 0xFFFDC0BC)

2354 
	#AT91C_EMAC_MAN
 ((
AT91_REG
 *) 0xFFFDC034)

2355 
	#AT91C_EMAC_FTO
 ((
AT91_REG
 *) 0xFFFDC040)

2356 
	#AT91C_EMAC_REV
 ((
AT91_REG
 *) 0xFFFDC0FC)

2357 
	#AT91C_EMAC_IMR
 ((
AT91_REG
 *) 0xFFFDC030)

2358 
	#AT91C_EMAC_SCF
 ((
AT91_REG
 *) 0xFFFDC044)

2359 
	#AT91C_EMAC_PFR
 ((
AT91_REG
 *) 0xFFFDC03C)

2360 
	#AT91C_EMAC_MCF
 ((
AT91_REG
 *) 0xFFFDC048)

2361 
	#AT91C_EMAC_NSR
 ((
AT91_REG
 *) 0xFFFDC008)

2362 
	#AT91C_EMAC_SA2L
 ((
AT91_REG
 *) 0xFFFDC0A0)

2363 
	#AT91C_EMAC_FRO
 ((
AT91_REG
 *) 0xFFFDC04C)

2364 
	#AT91C_EMAC_IER
 ((
AT91_REG
 *) 0xFFFDC028)

2365 
	#AT91C_EMAC_SA1H
 ((
AT91_REG
 *) 0xFFFDC09C)

2366 
	#AT91C_EMAC_CSE
 ((
AT91_REG
 *) 0xFFFDC068)

2367 
	#AT91C_EMAC_SA3H
 ((
AT91_REG
 *) 0xFFFDC0AC)

2368 
	#AT91C_EMAC_RRE
 ((
AT91_REG
 *) 0xFFFDC06C)

2369 
	#AT91C_EMAC_STE
 ((
AT91_REG
 *) 0xFFFDC084)

2371 
	#AT91C_ADC_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

2372 
	#AT91C_ADC_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

2373 
	#AT91C_ADC_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

2374 
	#AT91C_ADC_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

2375 
	#AT91C_ADC_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

2376 
	#AT91C_ADC_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

2377 
	#AT91C_ADC_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

2378 
	#AT91C_ADC_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

2379 
	#AT91C_ADC_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

2380 
	#AT91C_ADC_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

2382 
	#AT91C_ADC_CDR2
 ((
AT91_REG
 *) 0xFFFD8038)

2383 
	#AT91C_ADC_CDR3
 ((
AT91_REG
 *) 0xFFFD803C)

2384 
	#AT91C_ADC_CDR0
 ((
AT91_REG
 *) 0xFFFD8030)

2385 
	#AT91C_ADC_CDR5
 ((
AT91_REG
 *) 0xFFFD8044)

2386 
	#AT91C_ADC_CHDR
 ((
AT91_REG
 *) 0xFFFD8014)

2387 
	#AT91C_ADC_SR
 ((
AT91_REG
 *) 0xFFFD801C)

2388 
	#AT91C_ADC_CDR4
 ((
AT91_REG
 *) 0xFFFD8040)

2389 
	#AT91C_ADC_CDR1
 ((
AT91_REG
 *) 0xFFFD8034)

2390 
	#AT91C_ADC_LCDR
 ((
AT91_REG
 *) 0xFFFD8020)

2391 
	#AT91C_ADC_IDR
 ((
AT91_REG
 *) 0xFFFD8028)

2392 
	#AT91C_ADC_CR
 ((
AT91_REG
 *) 0xFFFD8000)

2393 
	#AT91C_ADC_CDR7
 ((
AT91_REG
 *) 0xFFFD804C)

2394 
	#AT91C_ADC_CDR6
 ((
AT91_REG
 *) 0xFFFD8048)

2395 
	#AT91C_ADC_IER
 ((
AT91_REG
 *) 0xFFFD8024)

2396 
	#AT91C_ADC_CHER
 ((
AT91_REG
 *) 0xFFFD8010)

2397 
	#AT91C_ADC_CHSR
 ((
AT91_REG
 *) 0xFFFD8018)

2398 
	#AT91C_ADC_MR
 ((
AT91_REG
 *) 0xFFFD8004)

2399 
	#AT91C_ADC_IMR
 ((
AT91_REG
 *) 0xFFFD802C)

2401 
	#AT91C_AES_TPR
 ((
AT91_REG
 *) 0xFFFA4108)

2402 
	#AT91C_AES_PTCR
 ((
AT91_REG
 *) 0xFFFA4120)

2403 
	#AT91C_AES_RNPR
 ((
AT91_REG
 *) 0xFFFA4110)

2404 
	#AT91C_AES_TNCR
 ((
AT91_REG
 *) 0xFFFA411C)

2405 
	#AT91C_AES_TCR
 ((
AT91_REG
 *) 0xFFFA410C)

2406 
	#AT91C_AES_RCR
 ((
AT91_REG
 *) 0xFFFA4104)

2407 
	#AT91C_AES_RNCR
 ((
AT91_REG
 *) 0xFFFA4114)

2408 
	#AT91C_AES_TNPR
 ((
AT91_REG
 *) 0xFFFA4118)

2409 
	#AT91C_AES_RPR
 ((
AT91_REG
 *) 0xFFFA4100)

2410 
	#AT91C_AES_PTSR
 ((
AT91_REG
 *) 0xFFFA4124)

2412 
	#AT91C_AES_IVxR
 ((
AT91_REG
 *) 0xFFFA4060)

2413 
	#AT91C_AES_MR
 ((
AT91_REG
 *) 0xFFFA4004)

2414 
	#AT91C_AES_VR
 ((
AT91_REG
 *) 0xFFFA40FC)

2415 
	#AT91C_AES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA4050)

2416 
	#AT91C_AES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA4040)

2417 
	#AT91C_AES_CR
 ((
AT91_REG
 *) 0xFFFA4000)

2418 
	#AT91C_AES_IDR
 ((
AT91_REG
 *) 0xFFFA4014)

2419 
	#AT91C_AES_IMR
 ((
AT91_REG
 *) 0xFFFA4018)

2420 
	#AT91C_AES_IER
 ((
AT91_REG
 *) 0xFFFA4010)

2421 
	#AT91C_AES_KEYWxR
 ((
AT91_REG
 *) 0xFFFA4020)

2422 
	#AT91C_AES_ISR
 ((
AT91_REG
 *) 0xFFFA401C)

2424 
	#AT91C_TDES_RNCR
 ((
AT91_REG
 *) 0xFFFA8114)

2425 
	#AT91C_TDES_TCR
 ((
AT91_REG
 *) 0xFFFA810C)

2426 
	#AT91C_TDES_RCR
 ((
AT91_REG
 *) 0xFFFA8104)

2427 
	#AT91C_TDES_TNPR
 ((
AT91_REG
 *) 0xFFFA8118)

2428 
	#AT91C_TDES_RNPR
 ((
AT91_REG
 *) 0xFFFA8110)

2429 
	#AT91C_TDES_RPR
 ((
AT91_REG
 *) 0xFFFA8100)

2430 
	#AT91C_TDES_TNCR
 ((
AT91_REG
 *) 0xFFFA811C)

2431 
	#AT91C_TDES_TPR
 ((
AT91_REG
 *) 0xFFFA8108)

2432 
	#AT91C_TDES_PTSR
 ((
AT91_REG
 *) 0xFFFA8124)

2433 
	#AT91C_TDES_PTCR
 ((
AT91_REG
 *) 0xFFFA8120)

2435 
	#AT91C_TDES_KEY2WxR
 ((
AT91_REG
 *) 0xFFFA8028)

2436 
	#AT91C_TDES_KEY3WxR
 ((
AT91_REG
 *) 0xFFFA8030)

2437 
	#AT91C_TDES_IDR
 ((
AT91_REG
 *) 0xFFFA8014)

2438 
	#AT91C_TDES_VR
 ((
AT91_REG
 *) 0xFFFA80FC)

2439 
	#AT91C_TDES_IVxR
 ((
AT91_REG
 *) 0xFFFA8060)

2440 
	#AT91C_TDES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA8050)

2441 
	#AT91C_TDES_IMR
 ((
AT91_REG
 *) 0xFFFA8018)

2442 
	#AT91C_TDES_MR
 ((
AT91_REG
 *) 0xFFFA8004)

2443 
	#AT91C_TDES_CR
 ((
AT91_REG
 *) 0xFFFA8000)

2444 
	#AT91C_TDES_IER
 ((
AT91_REG
 *) 0xFFFA8010)

2445 
	#AT91C_TDES_ISR
 ((
AT91_REG
 *) 0xFFFA801C)

2446 
	#AT91C_TDES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA8040)

2447 
	#AT91C_TDES_KEY1WxR
 ((
AT91_REG
 *) 0xFFFA8020)

2448 

	)

2452 
	#AT91C_PIO_PA0
 (() 1 << 0)

2453 
	#AT91C_PA0_RXD0
 ((Ë
AT91C_PIO_PA0
)

2454 
	#AT91C_PIO_PA1
 (() 1 << 1)

2455 
	#AT91C_PA1_TXD0
 ((Ë
AT91C_PIO_PA1
)

2456 
	#AT91C_PIO_PA10
 (() 1 << 10)

2457 
	#AT91C_PA10_TWD
 ((Ë
AT91C_PIO_PA10
)

2458 
	#AT91C_PIO_PA11
 (() 1 << 11)

2459 
	#AT91C_PA11_TWCK
 ((Ë
AT91C_PIO_PA11
)

2460 
	#AT91C_PIO_PA12
 (() 1 << 12)

2461 
	#AT91C_PA12_NPCS00
 ((Ë
AT91C_PIO_PA12
)

2462 
	#AT91C_PIO_PA13
 (() 1 << 13)

2463 
	#AT91C_PA13_NPCS01
 ((Ë
AT91C_PIO_PA13
)

2464 
	#AT91C_PA13_PCK1
 ((Ë
AT91C_PIO_PA13
)

2465 
	#AT91C_PIO_PA14
 (() 1 << 14)

2466 
	#AT91C_PA14_NPCS02
 ((Ë
AT91C_PIO_PA14
)

2467 
	#AT91C_PA14_IRQ1
 ((Ë
AT91C_PIO_PA14
)

2468 
	#AT91C_PIO_PA15
 (() 1 << 15)

2469 
	#AT91C_PA15_NPCS03
 ((Ë
AT91C_PIO_PA15
)

2470 
	#AT91C_PA15_TCLK2
 ((Ë
AT91C_PIO_PA15
)

2471 
	#AT91C_PIO_PA16
 (() 1 << 16)

2472 
	#AT91C_PA16_MISO0
 ((Ë
AT91C_PIO_PA16
)

2473 
	#AT91C_PIO_PA17
 (() 1 << 17)

2474 
	#AT91C_PA17_MOSI0
 ((Ë
AT91C_PIO_PA17
)

2475 
	#AT91C_PIO_PA18
 (() 1 << 18)

2476 
	#AT91C_PA18_SPCK0
 ((Ë
AT91C_PIO_PA18
)

2477 
	#AT91C_PIO_PA19
 (() 1 << 19)

2478 
	#AT91C_PA19_CANRX
 ((Ë
AT91C_PIO_PA19
)

2479 
	#AT91C_PIO_PA2
 (() 1 << 2)

2480 
	#AT91C_PA2_SCK0
 ((Ë
AT91C_PIO_PA2
)

2481 
	#AT91C_PA2_NPCS11
 ((Ë
AT91C_PIO_PA2
)

2482 
	#AT91C_PIO_PA20
 (() 1 << 20)

2483 
	#AT91C_PA20_CANTX
 ((Ë
AT91C_PIO_PA20
)

2484 
	#AT91C_PIO_PA21
 (() 1 << 21)

2485 
	#AT91C_PA21_TF
 ((Ë
AT91C_PIO_PA21
)

2486 
	#AT91C_PA21_NPCS10
 ((Ë
AT91C_PIO_PA21
)

2487 
	#AT91C_PIO_PA22
 (() 1 << 22)

2488 
	#AT91C_PA22_TK
 ((Ë
AT91C_PIO_PA22
)

2489 
	#AT91C_PA22_SPCK1
 ((Ë
AT91C_PIO_PA22
)

2490 
	#AT91C_PIO_PA23
 (() 1 << 23)

2491 
	#AT91C_PA23_TD
 ((Ë
AT91C_PIO_PA23
)

2492 
	#AT91C_PA23_MOSI1
 ((Ë
AT91C_PIO_PA23
)

2493 
	#AT91C_PIO_PA24
 (() 1 << 24)

2494 
	#AT91C_PA24_RD
 ((Ë
AT91C_PIO_PA24
)

2495 
	#AT91C_PA24_MISO1
 ((Ë
AT91C_PIO_PA24
)

2496 
	#AT91C_PIO_PA25
 (() 1 << 25)

2497 
	#AT91C_PA25_RK
 ((Ë
AT91C_PIO_PA25
)

2498 
	#AT91C_PA25_NPCS11
 ((Ë
AT91C_PIO_PA25
)

2499 
	#AT91C_PIO_PA26
 (() 1 << 26)

2500 
	#AT91C_PA26_RF
 ((Ë
AT91C_PIO_PA26
)

2501 
	#AT91C_PA26_NPCS12
 ((Ë
AT91C_PIO_PA26
)

2502 
	#AT91C_PIO_PA27
 (() 1 << 27)

2503 
	#AT91C_PA27_DRXD
 ((Ë
AT91C_PIO_PA27
)

2504 
	#AT91C_PA27_PCK3
 ((Ë
AT91C_PIO_PA27
)

2505 
	#AT91C_PIO_PA28
 (() 1 << 28)

2506 
	#AT91C_PA28_DTXD
 ((Ë
AT91C_PIO_PA28
)

2507 
	#AT91C_PIO_PA29
 (() 1 << 29)

2508 
	#AT91C_PA29_FIQ
 ((Ë
AT91C_PIO_PA29
)

2509 
	#AT91C_PA29_NPCS13
 ((Ë
AT91C_PIO_PA29
)

2510 
	#AT91C_PIO_PA3
 (() 1 << 3)

2511 
	#AT91C_PA3_RTS0
 ((Ë
AT91C_PIO_PA3
)

2512 
	#AT91C_PA3_NPCS12
 ((Ë
AT91C_PIO_PA3
)

2513 
	#AT91C_PIO_PA30
 (() 1 << 30)

2514 
	#AT91C_PA30_IRQ0
 ((Ë
AT91C_PIO_PA30
)

2515 
	#AT91C_PA30_PCK2
 ((Ë
AT91C_PIO_PA30
)

2516 
	#AT91C_PIO_PA4
 (() 1 << 4)

2517 
	#AT91C_PA4_CTS0
 ((Ë
AT91C_PIO_PA4
)

2518 
	#AT91C_PA4_NPCS13
 ((Ë
AT91C_PIO_PA4
)

2519 
	#AT91C_PIO_PA5
 (() 1 << 5)

2520 
	#AT91C_PA5_RXD1
 ((Ë
AT91C_PIO_PA5
)

2521 
	#AT91C_PIO_PA6
 (() 1 << 6)

2522 
	#AT91C_PA6_TXD1
 ((Ë
AT91C_PIO_PA6
)

2523 
	#AT91C_PIO_PA7
 (() 1 << 7)

2524 
	#AT91C_PA7_SCK1
 ((Ë
AT91C_PIO_PA7
)

2525 
	#AT91C_PA7_NPCS01
 ((Ë
AT91C_PIO_PA7
)

2526 
	#AT91C_PIO_PA8
 (() 1 << 8)

2527 
	#AT91C_PA8_RTS1
 ((Ë
AT91C_PIO_PA8
)

2528 
	#AT91C_PA8_NPCS02
 ((Ë
AT91C_PIO_PA8
)

2529 
	#AT91C_PIO_PA9
 (() 1 << 9)

2530 
	#AT91C_PA9_CTS1
 ((Ë
AT91C_PIO_PA9
)

2531 
	#AT91C_PA9_NPCS03
 ((Ë
AT91C_PIO_PA9
)

2532 
	#AT91C_PIO_PB0
 (() 1 << 0)

2533 
	#AT91C_PB0_ETXCK_EREFCK
 ((Ë
AT91C_PIO_PB0
)

2534 
	#AT91C_PB0_PCK0
 ((Ë
AT91C_PIO_PB0
)

2535 
	#AT91C_PIO_PB1
 (() 1 << 1)

2536 
	#AT91C_PB1_ETXEN
 ((Ë
AT91C_PIO_PB1
)

2537 
	#AT91C_PIO_PB10
 (() 1 << 10)

2538 
	#AT91C_PB10_ETX2
 ((Ë
AT91C_PIO_PB10
)

2539 
	#AT91C_PB10_NPCS11
 ((Ë
AT91C_PIO_PB10
)

2540 
	#AT91C_PIO_PB11
 (() 1 << 11)

2541 
	#AT91C_PB11_ETX3
 ((Ë
AT91C_PIO_PB11
)

2542 
	#AT91C_PB11_NPCS12
 ((Ë
AT91C_PIO_PB11
)

2543 
	#AT91C_PIO_PB12
 (() 1 << 12)

2544 
	#AT91C_PB12_ETXER
 ((Ë
AT91C_PIO_PB12
)

2545 
	#AT91C_PB12_TCLK0
 ((Ë
AT91C_PIO_PB12
)

2546 
	#AT91C_PIO_PB13
 (() 1 << 13)

2547 
	#AT91C_PB13_ERX2
 ((Ë
AT91C_PIO_PB13
)

2548 
	#AT91C_PB13_NPCS01
 ((Ë
AT91C_PIO_PB13
)

2549 
	#AT91C_PIO_PB14
 (() 1 << 14)

2550 
	#AT91C_PB14_ERX3
 ((Ë
AT91C_PIO_PB14
)

2551 
	#AT91C_PB14_NPCS02
 ((Ë
AT91C_PIO_PB14
)

2552 
	#AT91C_PIO_PB15
 (() 1 << 15)

2553 
	#AT91C_PB15_ERXDV
 ((Ë
AT91C_PIO_PB15
)

2554 
	#AT91C_PIO_PB16
 (() 1 << 16)

2555 
	#AT91C_PB16_ECOL
 ((Ë
AT91C_PIO_PB16
)

2556 
	#AT91C_PB16_NPCS13
 ((Ë
AT91C_PIO_PB16
)

2557 
	#AT91C_PIO_PB17
 (() 1 << 17)

2558 
	#AT91C_PB17_ERXCK
 ((Ë
AT91C_PIO_PB17
)

2559 
	#AT91C_PB17_NPCS03
 ((Ë
AT91C_PIO_PB17
)

2560 
	#AT91C_PIO_PB18
 (() 1 << 18)

2561 
	#AT91C_PB18_EF100
 ((Ë
AT91C_PIO_PB18
)

2562 
	#AT91C_PB18_ADTRG
 ((Ë
AT91C_PIO_PB18
)

2563 
	#AT91C_PIO_PB19
 (() 1 << 19)

2564 
	#AT91C_PB19_PWM0
 ((Ë
AT91C_PIO_PB19
)

2565 
	#AT91C_PB19_TCLK1
 ((Ë
AT91C_PIO_PB19
)

2566 
	#AT91C_PIO_PB2
 (() 1 << 2)

2567 
	#AT91C_PB2_ETX0
 ((Ë
AT91C_PIO_PB2
)

2568 
	#AT91C_PIO_PB20
 (() 1 << 20)

2569 
	#AT91C_PB20_PWM1
 ((Ë
AT91C_PIO_PB20
)

2570 
	#AT91C_PB20_PCK0
 ((Ë
AT91C_PIO_PB20
)

2571 
	#AT91C_PIO_PB21
 (() 1 << 21)

2572 
	#AT91C_PB21_PWM2
 ((Ë
AT91C_PIO_PB21
)

2573 
	#AT91C_PB21_PCK1
 ((Ë
AT91C_PIO_PB21
)

2574 
	#AT91C_PIO_PB22
 (() 1 << 22)

2575 
	#AT91C_PB22_PWM3
 ((Ë
AT91C_PIO_PB22
)

2576 
	#AT91C_PB22_PCK2
 ((Ë
AT91C_PIO_PB22
)

2577 
	#AT91C_PIO_PB23
 (() 1 << 23)

2578 
	#AT91C_PB23_TIOA0
 ((Ë
AT91C_PIO_PB23
)

2579 
	#AT91C_PB23_DCD1
 ((Ë
AT91C_PIO_PB23
)

2580 
	#AT91C_PIO_PB24
 (() 1 << 24)

2581 
	#AT91C_PB24_TIOB0
 ((Ë
AT91C_PIO_PB24
)

2582 
	#AT91C_PB24_DSR1
 ((Ë
AT91C_PIO_PB24
)

2583 
	#AT91C_PIO_PB25
 (() 1 << 25)

2584 
	#AT91C_PB25_TIOA1
 ((Ë
AT91C_PIO_PB25
)

2585 
	#AT91C_PB25_DTR1
 ((Ë
AT91C_PIO_PB25
)

2586 
	#AT91C_PIO_PB26
 (() 1 << 26)

2587 
	#AT91C_PB26_TIOB1
 ((Ë
AT91C_PIO_PB26
)

2588 
	#AT91C_PB26_RI1
 ((Ë
AT91C_PIO_PB26
)

2589 
	#AT91C_PIO_PB27
 (() 1 << 27)

2590 
	#AT91C_PB27_TIOA2
 ((Ë
AT91C_PIO_PB27
)

2591 
	#AT91C_PB27_PWM0
 ((Ë
AT91C_PIO_PB27
)

2592 
	#AT91C_PIO_PB28
 (() 1 << 28)

2593 
	#AT91C_PB28_TIOB2
 ((Ë
AT91C_PIO_PB28
)

2594 
	#AT91C_PB28_PWM1
 ((Ë
AT91C_PIO_PB28
)

2595 
	#AT91C_PIO_PB29
 (() 1 << 29)

2596 
	#AT91C_PB29_PCK1
 ((Ë
AT91C_PIO_PB29
)

2597 
	#AT91C_PB29_PWM2
 ((Ë
AT91C_PIO_PB29
)

2598 
	#AT91C_PIO_PB3
 (() 1 << 3)

2599 
	#AT91C_PB3_ETX1
 ((Ë
AT91C_PIO_PB3
)

2600 
	#AT91C_PIO_PB30
 (() 1 << 30)

2601 
	#AT91C_PB30_PCK2
 ((Ë
AT91C_PIO_PB30
)

2602 
	#AT91C_PB30_PWM3
 ((Ë
AT91C_PIO_PB30
)

2603 
	#AT91C_PIO_PB4
 (() 1 << 4)

2604 
	#AT91C_PB4_ECRS_ECRSDV
 ((Ë
AT91C_PIO_PB4
)

2605 
	#AT91C_PIO_PB5
 (() 1 << 5)

2606 
	#AT91C_PB5_ERX0
 ((Ë
AT91C_PIO_PB5
)

2607 
	#AT91C_PIO_PB6
 (() 1 << 6)

2608 
	#AT91C_PB6_ERX1
 ((Ë
AT91C_PIO_PB6
)

2609 
	#AT91C_PIO_PB7
 (() 1 << 7)

2610 
	#AT91C_PB7_ERXER
 ((Ë
AT91C_PIO_PB7
)

2611 
	#AT91C_PIO_PB8
 (() 1 << 8)

2612 
	#AT91C_PB8_EMDC
 ((Ë
AT91C_PIO_PB8
)

2613 
	#AT91C_PIO_PB9
 (() 1 << 9)

2614 
	#AT91C_PB9_EMDIO
 ((Ë
AT91C_PIO_PB9
)

2615 

	)

2619 
	#AT91C_ID_FIQ
 (() 0)

2620 
	#AT91C_ID_SYS
 (() 1)

2621 
	#AT91C_ID_PIOA
 (() 2)

2622 
	#AT91C_ID_PIOB
 (() 3)

2623 
	#AT91C_ID_SPI0
 (() 4)

2624 
	#AT91C_ID_SPI1
 (() 5)

2625 
	#AT91C_ID_US0
 (() 6)

2626 
	#AT91C_ID_US1
 (() 7)

2627 
	#AT91C_ID_SSC
 (() 8)

2628 
	#AT91C_ID_TWI
 (() 9)

2629 
	#AT91C_ID_PWMC
 (() 10)

2630 
	#AT91C_ID_UDP
 (() 11)

2631 
	#AT91C_ID_TC0
 (() 12)

2632 
	#AT91C_ID_TC1
 (() 13)

2633 
	#AT91C_ID_TC2
 (() 14)

2634 
	#AT91C_ID_CAN
 (() 15)

2635 
	#AT91C_ID_EMAC
 (() 16)

2636 
	#AT91C_ID_ADC
 (() 17)

2637 
	#AT91C_ID_AES
 (() 18)

2638 
	#AT91C_ID_TDES
 (() 19)

2639 
	#AT91C_ID_20_Re£rved
 (() 20)

2640 
	#AT91C_ID_21_Re£rved
 (() 21)

2641 
	#AT91C_ID_22_Re£rved
 (() 22)

2642 
	#AT91C_ID_23_Re£rved
 (() 23)

2643 
	#AT91C_ID_24_Re£rved
 (() 24)

2644 
	#AT91C_ID_25_Re£rved
 (() 25)

2645 
	#AT91C_ID_26_Re£rved
 (() 26)

2646 
	#AT91C_ID_27_Re£rved
 (() 27)

2647 
	#AT91C_ID_28_Re£rved
 (() 28)

2648 
	#AT91C_ID_29_Re£rved
 (() 29)

2649 
	#AT91C_ID_IRQ0
 (() 30)

2650 
	#AT91C_ID_IRQ1
 (() 31)

2651 

	)

2655 
	#AT91C_BASE_SYS
 ((
AT91PS_SYS
) 0xFFFFF000)

2656 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

2657 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

2658 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

2659 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

2660 
	#AT91C_BASE_PIOB
 ((
AT91PS_PIO
) 0xFFFFF600)

2661 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

2662 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

2663 
	#AT91C_BASE_RSTC
 ((
AT91PS_RSTC
) 0xFFFFFD00)

2664 
	#AT91C_BASE_RTTC
 ((
AT91PS_RTTC
) 0xFFFFFD20)

2665 
	#AT91C_BASE_PITC
 ((
AT91PS_PITC
) 0xFFFFFD30)

2666 
	#AT91C_BASE_WDTC
 ((
AT91PS_WDTC
) 0xFFFFFD40)

2667 
	#AT91C_BASE_VREG
 ((
AT91PS_VREG
) 0xFFFFFD60)

2668 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

2669 
	#AT91C_BASE_PDC_SPI1
 ((
AT91PS_PDC
) 0xFFFE4100)

2670 
	#AT91C_BASE_SPI1
 ((
AT91PS_SPI
) 0xFFFE4000)

2671 
	#AT91C_BASE_PDC_SPI0
 ((
AT91PS_PDC
) 0xFFFE0100)

2672 
	#AT91C_BASE_SPI0
 ((
AT91PS_SPI
) 0xFFFE0000)

2673 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

2674 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

2675 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

2676 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

2677 
	#AT91C_BASE_PDC_SSC
 ((
AT91PS_PDC
) 0xFFFD4100)

2678 
	#AT91C_BASE_SSC
 ((
AT91PS_SSC
) 0xFFFD4000)

2679 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

2680 
	#AT91C_BASE_PWMC_CH3
 ((
AT91PS_PWMC_CH
) 0xFFFCC260)

2681 
	#AT91C_BASE_PWMC_CH2
 ((
AT91PS_PWMC_CH
) 0xFFFCC240)

2682 
	#AT91C_BASE_PWMC_CH1
 ((
AT91PS_PWMC_CH
) 0xFFFCC220)

2683 
	#AT91C_BASE_PWMC_CH0
 ((
AT91PS_PWMC_CH
) 0xFFFCC200)

2684 
	#AT91C_BASE_PWMC
 ((
AT91PS_PWMC
) 0xFFFCC000)

2685 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

2686 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

2687 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

2688 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

2689 
	#AT91C_BASE_TCB
 ((
AT91PS_TCB
) 0xFFFA0000)

2690 
	#AT91C_BASE_CAN_MB0
 ((
AT91PS_CAN_MB
) 0xFFFD0200)

2691 
	#AT91C_BASE_CAN_MB1
 ((
AT91PS_CAN_MB
) 0xFFFD0220)

2692 
	#AT91C_BASE_CAN_MB2
 ((
AT91PS_CAN_MB
) 0xFFFD0240)

2693 
	#AT91C_BASE_CAN_MB3
 ((
AT91PS_CAN_MB
) 0xFFFD0260)

2694 
	#AT91C_BASE_CAN_MB4
 ((
AT91PS_CAN_MB
) 0xFFFD0280)

2695 
	#AT91C_BASE_CAN_MB5
 ((
AT91PS_CAN_MB
) 0xFFFD02A0)

2696 
	#AT91C_BASE_CAN_MB6
 ((
AT91PS_CAN_MB
) 0xFFFD02C0)

2697 
	#AT91C_BASE_CAN_MB7
 ((
AT91PS_CAN_MB
) 0xFFFD02E0)

2698 
	#AT91C_BASE_CAN
 ((
AT91PS_CAN
) 0xFFFD0000)

2699 
	#AT91C_BASE_EMAC
 ((
AT91PS_EMAC
) 0xFFFDC000)

2700 
	#AT91C_BASE_PDC_ADC
 ((
AT91PS_PDC
) 0xFFFD8100)

2701 
	#AT91C_BASE_ADC
 ((
AT91PS_ADC
) 0xFFFD8000)

2702 
	#AT91C_BASE_PDC_AES
 ((
AT91PS_PDC
) 0xFFFA4100)

2703 
	#AT91C_BASE_AES
 ((
AT91PS_AES
) 0xFFFA4000)

2704 
	#AT91C_BASE_PDC_TDES
 ((
AT91PS_PDC
) 0xFFFA8100)

2705 
	#AT91C_BASE_TDES
 ((
AT91PS_TDES
) 0xFFFA8000)

2706 

	)

2710 
	#AT91C_ISRAM
 ((*) 0x00200000)

2711 
	#AT91C_ISRAM_SIZE
 (() 0x00010000)

2712 
	#AT91C_IFLASH
 ((*) 0x00100000)

2713 
	#AT91C_IFLASH_SIZE
 (() 0x00040000)

2714 

	)

2728 
AT91C_AIC_PRIOR
 
EQU
 (0x7 << 0Ë;- (
	gAIC
Ë
Pri‹ôy
 
Levñ


2729 
AT91C_AIC_PRIOR_LOWEST
 
EQU
 (0x0Ë;- (
	gAIC
Ë
Lowe°
 
¥i‹ôy
 
Àvñ


2730 
AT91C_AIC_PRIOR_HIGHEST
 
EQU
 (0x7Ë;- (
	gAIC
Ë
Highe°
 
¥i‹ôy
 
Àvñ


2731 
AT91C_AIC_SRCTYPE
 
EQU
 (0x3 << 5Ë;- (
	gAIC
Ë
I¡îru±
 
Sour˚
 
Ty≥


2732 
AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 
EQU
 (0x0 << 5Ë;- (
	gAIC
Ë
I¡î«l
 
Sour˚s
 
Code
 
Labñ
 
	gHigh
-
Àvñ
 
Sísôive


2733 
AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 
EQU
 (0x0 << 5Ë;- (
	gAIC
Ë
Exã∫Æ
 
Sour˚s
 
Code
 
Labñ
 
	gLow
-
Àvñ
 
Sísôive


2734 
AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 
EQU
 (0x1 << 5Ë;- (
	gAIC
Ë
I¡î«l
 
Sour˚s
 
Code
 
Labñ
 
Posôive
 
Edge
 
åiggîed


2735 
AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 
EQU
 (0x1 << 5Ë;- (
	gAIC
Ë
Exã∫Æ
 
Sour˚s
 
Code
 
Labñ
 
Neg©ive
 
Edge
 
åiggîed


2736 
AT91C_AIC_SRCTYPE_HIGH_LEVEL
 
EQU
 (0x2 << 5Ë;- (
	gAIC
Ë
I¡î«l
 
Or
 
Exã∫Æ
 
Sour˚s
 
Code
 
Labñ
 
	gHigh
-
Àvñ
 
Sísôive


2737 
AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 
EQU
 (0x3 << 5Ë;- (
	gAIC
Ë
I¡î«l
 
Or
 
Exã∫Æ
 
Sour˚s
 
Code
 
Labñ
 
Posôive
 
Edge
 
åiggîed


2739 
AT91C_AIC_NFIQ
 
EQU
 (0x1 << 0Ë;- (
	gAIC
Ë
NFIQ
 
Sètus


2740 
AT91C_AIC_NIRQ
 
EQU
 (0x1 << 1Ë;- (
	gAIC
Ë
NIRQ
 
Sètus


2742 
AT91C_AIC_DCR_PROT
 
EQU
 (0x1 << 0Ë;- (
	gAIC
Ë
PrŸe˘i⁄
 
Mode


2743 
AT91C_AIC_DCR_GMSK
 
EQU
 (0x1 << 1Ë;- (
	gAIC
Ë
GíîÆ
 
	gMask


2749 
AT91C_PDC_RXTEN
 
EQU
 (0x1 << 0Ë;- (
	gPDC
Ë
Re˚ivî
 
Tøns„r
 
E«bÀ


2750 
AT91C_PDC_RXTDIS
 
EQU
 (0x1 << 1Ë;- (
	gPDC
Ë
Re˚ivî
 
Tøns„r
 
DißbÀ


2751 
AT91C_PDC_TXTEN
 
EQU
 (0x1 << 8Ë;- (
	gPDC
Ë
Tønsmôãr
 
Tøns„r
 
E«bÀ


2752 
AT91C_PDC_TXTDIS
 
EQU
 (0x1 << 9Ë;- (
	gPDC
Ë
Tønsmôãr
 
Tøns„r
 
DißbÀ


2759 
AT91C_US_RSTRX
 
EQU
 (0x1 << 2Ë;- (
	gDBGU
Ë
Re£t
 
Re˚ivî


2760 
AT91C_US_RSTTX
 
EQU
 (0x1 << 3Ë;- (
	gDBGU
Ë
Re£t
 
Tønsmôãr


2761 
AT91C_US_RXEN
 
EQU
 (0x1 << 4Ë;- (
	gDBGU
Ë
Re˚ivî
 
E«bÀ


2762 
AT91C_US_RXDIS
 
EQU
 (0x1 << 5Ë;- (
	gDBGU
Ë
Re˚ivî
 
DißbÀ


2763 
AT91C_US_TXEN
 
EQU
 (0x1 << 6Ë;- (
	gDBGU
Ë
Tønsmôãr
 
E«bÀ


2764 
AT91C_US_TXDIS
 
EQU
 (0x1 << 7Ë;- (
	gDBGU
Ë
Tønsmôãr
 
DißbÀ


2765 
AT91C_US_RSTSTA
 
EQU
 (0x1 << 8Ë;- (
	gDBGU
Ë
Re£t
 
Sètus
 
Bôs


2767 
AT91C_US_PAR
 
EQU
 (0x7 << 9Ë;- (
	gDBGU
Ë
P¨ôy
 
ty≥


2768 
AT91C_US_PAR_EVEN
 
EQU
 (0x0 << 9Ë;- (
	gDBGU
Ë
Eví
 
P¨ôy


2769 
AT91C_US_PAR_ODD
 
EQU
 (0x1 << 9Ë;- (
	gDBGU
Ë
Odd
 
P¨ôy


2770 
AT91C_US_PAR_SPACE
 
EQU
 (0x2 << 9Ë;- (
	gDBGU
Ë
P¨ôy
 
f‹˚d
 
	gto
 0 (
	gS∑˚
)

2771 
AT91C_US_PAR_MARK
 
EQU
 (0x3 << 9Ë;- (
	gDBGU
Ë
P¨ôy
 
f‹˚d
 
	gto
 1 (
	gM¨k
)

2772 
AT91C_US_PAR_NONE
 
EQU
 (0x4 << 9Ë;- (
	gDBGU
Ë
No
 
P¨ôy


2773 
AT91C_US_PAR_MULTI_DROP
 
EQU
 (0x6 << 9Ë;- (
	gDBGU
Ë
	gMu…i
-
dr›
 
mode


2774 
AT91C_US_CHMODE
 
EQU
 (0x3 << 14Ë;- (
	gDBGU
Ë
Ch™√l
 
Mode


2775 
AT91C_US_CHMODE_NORMAL
 
EQU
 (0x0 << 14Ë;- (
	gDBGU
Ë
N‹mÆ
 
	gMode
: 
The
 
USART
 
ch™√l
 
›î©es
 
as
 
™
 
RX
/
TX
 USART.

2776 
AT91C_US_CHMODE_AUTO
 
EQU
 (0x1 << 14Ë;- (
	gDBGU
Ë
Autom©ic
 
	gEcho
: 
Re˚ivî
 
D©a
 
I≈ut
 
is
 
c⁄√˘ed
 
to
 
the
 
TXD
 
pö
.

2777 
AT91C_US_CHMODE_LOCAL
 
EQU
 (0x2 << 14Ë;- (
	gDBGU
Ë
Loˇl
 
	gLo›back
: 
Tønsmôãr
 
Ouçut
 
Sig«l
 
is
 
c⁄√˘ed
 
to
 
Re˚ivî
 
I≈ut
 Signal.

2778 
AT91C_US_CHMODE_REMOTE
 
EQU
 (0x3 << 14Ë;- (
	gDBGU
Ë
RemŸe
 
	gLo›back
: 
RXD
 
pö
 
is
 
öã∫Æly
 
c⁄√˘ed
 
to
 
TXD
Öin.

2780 
AT91C_US_RXRDY
 
EQU
 (0x1 << 0Ë;- (
	gDBGU
Ë
RXRDY
 
I¡îru±


2781 
AT91C_US_TXRDY
 
EQU
 (0x1 << 1Ë;- (
	gDBGU
Ë
TXRDY
 
I¡îru±


2782 
AT91C_US_ENDRX
 
EQU
 (0x1 << 3Ë;- (
	gDBGU
Ë
End
 
of
 
Re˚ive
 
Tøns„r
 
I¡îru±


2783 
AT91C_US_ENDTX
 
EQU
 (0x1 << 4Ë;- (
	gDBGU
Ë
End
 
of
 
Tønsmô
 
I¡îru±


2784 
AT91C_US_OVRE
 
EQU
 (0x1 << 5Ë;- (
	gDBGU
Ë
Ovîrun
 
I¡îru±


2785 
AT91C_US_FRAME
 
EQU
 (0x1 << 6Ë;- (
	gDBGU
Ë
Fømög
 
Eº‹
 
I¡îru±


2786 
AT91C_US_PARE
 
EQU
 (0x1 << 7Ë;- (
	gDBGU
Ë
P¨ôy
 
Eº‹
 
I¡îru±


2787 
AT91C_US_TXEMPTY
 
EQU
 (0x1 << 9Ë;- (
	gDBGU
Ë
TXEMPTY
 
I¡îru±


2788 
AT91C_US_TXBUFE
 
EQU
 (0x1 << 11Ë;- (
	gDBGU
Ë
TXBUFE
 
I¡îru±


2789 
AT91C_US_RXBUFF
 
EQU
 (0x1 << 12Ë;- (
	gDBGU
Ë
RXBUFF
 
I¡îru±


2790 
AT91C_US_COMM_TX
 
EQU
 (0x1 << 30Ë;- (
	gDBGU
Ë
COMM_TX
 
I¡îru±


2791 
AT91C_US_COMM_RX
 
EQU
 (0x1 << 31Ë;- (
	gDBGU
Ë
COMM_RX
 
I¡îru±


2796 
AT91C_US_FORCE_NTRST
 
EQU
 (0x1 << 0Ë;- (
	gDBGU
Ë
F‹˚
 
NTRST
 
ö
 
JTAG


2806 
AT91C_CKGR_MOSCEN
 
EQU
 (0x1 << 0Ë;- (
	gCKGR
Ë
Maö
 
Oscûœt‹
 
E«bÀ


2807 
AT91C_CKGR_OSCBYPASS
 
EQU
 (0x1 << 1Ë;- (
	gCKGR
Ë
Maö
 
Oscûœt‹
 
By∑ss


2808 
AT91C_CKGR_OSCOUNT
 
EQU
 (0xFF << 8Ë;- (
	gCKGR
Ë
Maö
 
Oscûœt‹
 
	gSèπ
-
up
 
Time


2810 
AT91C_CKGR_MAINF
 
EQU
 (0xFFFF << 0Ë;- (
	gCKGR
Ë
Maö
 
Clock
 
Fªquícy


2811 
AT91C_CKGR_MAINRDY
 
EQU
 (0x1 << 16Ë;- (
	gCKGR
Ë
Maö
 
Clock
 
Ródy


2813 
AT91C_CKGR_DIV
 
EQU
 (0xFF << 0Ë;- (
	gCKGR
Ë
Dividî
 
Sñe˘ed


2814 
AT91C_CKGR_DIV_0
 
EQU
 (0x0Ë;- (
	gCKGR
Ë
Dividî
 
ouçut
 
	gis
 0

2815 
AT91C_CKGR_DIV_BYPASS
 
EQU
 (0x1Ë;- (
	gCKGR
Ë
Dividî
 
is
 
by∑s£d


2816 
AT91C_CKGR_PLLCOUNT
 
EQU
 (0x3F << 8Ë;- (
	gCKGR
Ë
PLL
 
Cou¡î


2817 
AT91C_CKGR_OUT
 
EQU
 (0x3 << 14Ë;- (
	gCKGR
Ë
PLL
 
Ouçut
 
Fªquícy
 
R™ge


2818 
AT91C_CKGR_OUT_0
 
EQU
 (0x0 << 14Ë;- (
	gCKGR
Ë
PÀa£
 
ª„r
 
to
 
the
 
PLL
 
d©ashìt


2819 
AT91C_CKGR_OUT_1
 
EQU
 (0x1 << 14Ë;- (
	gCKGR
Ë
PÀa£
 
ª„r
 
to
 
the
 
PLL
 
d©ashìt


2820 
AT91C_CKGR_OUT_2
 
EQU
 (0x2 << 14Ë;- (
	gCKGR
Ë
PÀa£
 
ª„r
 
to
 
the
 
PLL
 
d©ashìt


2821 
AT91C_CKGR_OUT_3
 
EQU
 (0x3 << 14Ë;- (
	gCKGR
Ë
PÀa£
 
ª„r
 
to
 
the
 
PLL
 
d©ashìt


2822 
AT91C_CKGR_MUL
 
EQU
 (0x7FF << 16Ë;- (
	gCKGR
Ë
PLL
 
Mu…ùlõr


2823 
AT91C_CKGR_USBDIV
 
EQU
 (0x3 << 28Ë;- (
	gCKGR
Ë
Dividî
 
USB
 
Clocks


2824 
AT91C_CKGR_USBDIV_0
 
EQU
 (0x0 << 28Ë;- (
	gCKGR
Ë
Dividî
 
ouçut
 
is
 
PLL
 
˛ock
 output

2825 
AT91C_CKGR_USBDIV_1
 
EQU
 (0x1 << 28Ë;- (
	gCKGR
Ë
Dividî
 
ouçut
 
is
 
PLL
 
˛ock
 ouçuà
divided
 
	gby
 2

2826 
AT91C_CKGR_USBDIV_2
 
EQU
 (0x2 << 28Ë;- (
	gCKGR
Ë
Dividî
 
ouçut
 
is
 
PLL
 
˛ock
 ouçuà
divided
 
	gby
 4

2832 
AT91C_PMC_PCK
 
EQU
 (0x1 << 0Ë;- (
	gPMC
Ë
Pro˚ss‹
 
Clock


2833 
AT91C_PMC_UDP
 
EQU
 (0x1 << 7Ë;- (
	gPMC
Ë
USB
 
Devi˚
 
P‹t
 
Clock


2834 
AT91C_PMC_PCK0
 
EQU
 (0x1 << 8Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
Ouçut


2835 
AT91C_PMC_PCK1
 
EQU
 (0x1 << 9Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
Ouçut


2836 
AT91C_PMC_PCK2
 
EQU
 (0x1 << 10Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
Ouçut


2837 
AT91C_PMC_PCK3
 
EQU
 (0x1 << 11Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
Ouçut


2844 
AT91C_PMC_CSS
 
EQU
 (0x3 << 0Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
Sñe˘i⁄


2845 
AT91C_PMC_CSS_SLOW_CLK
 
EQU
 (0x0Ë;- (
	gPMC
Ë
Slow
 
Clock
 
is
 
£À˘ed


2846 
AT91C_PMC_CSS_MAIN_CLK
 
EQU
 (0x1Ë;- (
	gPMC
Ë
Maö
 
Clock
 
is
 
£À˘ed


2847 
AT91C_PMC_CSS_PLL_CLK
 
EQU
 (0x3Ë;- (
	gPMC
Ë
Clock
 
‰om
 
PLL
 
is
 
£À˘ed


2848 
AT91C_PMC_PRES
 
EQU
 (0x7 << 2Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
PªsˇÀr


2849 
AT91C_PMC_PRES_CLK
 
EQU
 (0x0 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock


2850 
AT91C_PMC_PRES_CLK_2
 
EQU
 (0x1 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 2

2851 
AT91C_PMC_PRES_CLK_4
 
EQU
 (0x2 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 4

2852 
AT91C_PMC_PRES_CLK_8
 
EQU
 (0x3 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 8

2853 
AT91C_PMC_PRES_CLK_16
 
EQU
 (0x4 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 16

2854 
AT91C_PMC_PRES_CLK_32
 
EQU
 (0x5 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 32

2855 
AT91C_PMC_PRES_CLK_64
 
EQU
 (0x6 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 64

2858 
AT91C_PMC_MOSCS
 
EQU
 (0x1 << 0Ë;- (
	gPMC
Ë
MOSC
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2859 
AT91C_PMC_LOCK
 
EQU
 (0x1 << 2Ë;- (
	gPMC
Ë
PLL
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2860 
AT91C_PMC_MCKRDY
 
EQU
 (0x1 << 3Ë;- (
	gPMC
Ë
MCK_RDY
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2861 
AT91C_PMC_PCK0RDY
 
EQU
 (0x1 << 8Ë;- (
	gPMC
Ë
PCK0_RDY
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2862 
AT91C_PMC_PCK1RDY
 
EQU
 (0x1 << 9Ë;- (
	gPMC
Ë
PCK1_RDY
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2863 
AT91C_PMC_PCK2RDY
 
EQU
 (0x1 << 10Ë;- (
	gPMC
Ë
PCK2_RDY
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2864 
AT91C_PMC_PCK3RDY
 
EQU
 (0x1 << 11Ë;- (
	gPMC
Ë
PCK3_RDY
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2873 
AT91C_RSTC_PROCRST
 
EQU
 (0x1 << 0Ë;- (
	gRSTC
Ë
Pro˚ss‹
 
Re£t


2874 
AT91C_RSTC_PERRST
 
EQU
 (0x1 << 2Ë;- (
	gRSTC
Ë
PîùhîÆ
 
Re£t


2875 
AT91C_RSTC_EXTRST
 
EQU
 (0x1 << 3Ë;- (
	gRSTC
Ë
Exã∫Æ
 
Re£t


2876 
AT91C_RSTC_KEY
 
EQU
 (0xFF << 24Ë;- (
	gRSTC
Ë
Passw‹d


2878 
AT91C_RSTC_URSTS
 
EQU
 (0x1 << 0Ë;- (
	gRSTC
Ë
U£r
 
Re£t
 
Sètus


2879 
AT91C_RSTC_BODSTS
 
EQU
 (0x1 << 1Ë;- (
	gRSTC
Ë
Brownout
 
Dëe˘i⁄
 
Sètus


2880 
AT91C_RSTC_RSTTYP
 
EQU
 (0x7 << 8Ë;- (
	gRSTC
Ë
Re£t
 
Ty≥


2881 
AT91C_RSTC_RSTTYP_POWERUP
 
EQU
 (0x0 << 8Ë;- (
	gRSTC
Ë
	gPowî
-
up
 
	gRe£t
. 
VDDCORE
 
	grisög
.

2882 
AT91C_RSTC_RSTTYP_WAKEUP
 
EQU
 (0x1 << 8Ë;- (
	gRSTC
Ë
WakeUp
 
	gRe£t
. 
VDDCORE
 
	grisög
.

2883 
AT91C_RSTC_RSTTYP_WATCHDOG
 
EQU
 (0x2 << 8Ë;- (
	gRSTC
Ë
W©chdog
 
	gRe£t
. W©chdog 
ovîÊow
 
	goccuªd
.

2884 
AT91C_RSTC_RSTTYP_SOFTWARE
 
EQU
 (0x3 << 8Ë;- (
	gRSTC
Ë
So·w¨e
 
	gRe£t
. 
Pro˚ss‹
 
ª£t
 
ªquúed
 
by
 
the
 
	gso·w¨e
.

2885 
AT91C_RSTC_RSTTYP_USER
 
EQU
 (0x4 << 8Ë;- (
	gRSTC
Ë
U£r
 
	gRe£t
. 
NRST
 
pö
 
dëe˘ed
 
	glow
.

2886 
AT91C_RSTC_RSTTYP_BROWNOUT
 
EQU
 (0x5 << 8Ë;- (
	gRSTC
Ë
Brownout
 
Re£t
 
	goccuªd
.

2887 
AT91C_RSTC_NRSTL
 
EQU
 (0x1 << 16Ë;- (
	gRSTC
Ë
NRST
 
pö
 
Àvñ


2888 
AT91C_RSTC_SRCMP
 
EQU
 (0x1 << 17Ë;- (
	gRSTC
Ë
So·w¨e
 
Re£t
 
Comm™d
 
ö
 
	gProgªss
.

2890 
AT91C_RSTC_URSTEN
 
EQU
 (0x1 << 0Ë;- (
	gRSTC
Ë
U£r
 
Re£t
 
E«bÀ


2891 
AT91C_RSTC_URSTIEN
 
EQU
 (0x1 << 4Ë;- (
	gRSTC
Ë
U£r
 
Re£t
 
I¡îru±
 
E«bÀ


2892 
AT91C_RSTC_ERSTL
 
EQU
 (0xF << 8Ë;- (
	gRSTC
Ë
U£r
 
Re£t
 
E«bÀ


2893 
AT91C_RSTC_BODIEN
 
EQU
 (0x1 << 16Ë;- (
	gRSTC
Ë
Brownout
 
Dëe˘i⁄
 
I¡îru±
 
E«bÀ


2899 
AT91C_RTTC_RTPRES
 
EQU
 (0xFFFF << 0Ë;- (
	gRTTC
Ë
	gRól
-
time
 
Timî
 
PªsˇÀr
 
VÆue


2900 
AT91C_RTTC_ALMIEN
 
EQU
 (0x1 << 16Ë;- (
	gRTTC
Ë
Aœrm
 
I¡îru±
 
E«bÀ


2901 
AT91C_RTTC_RTTINCIEN
 
EQU
 (0x1 << 17Ë;- (
	gRTTC
Ë
Ról
 
Time
 
Timî
 
In¸emít
 
I¡îru±
 
E«bÀ


2902 
AT91C_RTTC_RTTRST
 
EQU
 (0x1 << 18Ë;- (
	gRTTC
Ë
Ról
 
Time
 
Timî
 
Re°¨t


2904 
AT91C_RTTC_ALMV
 
EQU
 (0x0 << 0Ë;- (
	gRTTC
Ë
Aœrm
 
VÆue


2906 
AT91C_RTTC_CRTV
 
EQU
 (0x0 << 0Ë;- (
	gRTTC
Ë
Cuºít
 
	gRól
-
time
 
VÆue


2908 
AT91C_RTTC_ALMS
 
EQU
 (0x1 << 0Ë;- (
	gRTTC
Ë
	gRól
-
time
 
Aœrm
 
Sètus


2909 
AT91C_RTTC_RTTINC
 
EQU
 (0x1 << 1Ë;- (
	gRTTC
Ë
	gRól
-
time
 
Timî
 
In¸emít


2915 
AT91C_PITC_PIV
 
EQU
 (0xFFFFF << 0Ë;- (
	gPITC
Ë
Pîiodic
 
I¡îvÆ
 
VÆue


2916 
AT91C_PITC_PITEN
 
EQU
 (0x1 << 24Ë;- (
	gPITC
Ë
Pîiodic
 
I¡îvÆ
 
Timî
 
E«bÀd


2917 
AT91C_PITC_PITIEN
 
EQU
 (0x1 << 25Ë;- (
	gPITC
Ë
Pîiodic
 
I¡îvÆ
 
Timî
 
I¡îru±
 
E«bÀ


2919 
AT91C_PITC_PITS
 
EQU
 (0x1 << 0Ë;- (
	gPITC
Ë
Pîiodic
 
I¡îvÆ
 
Timî
 
Sètus


2921 
AT91C_PITC_CPIV
 
EQU
 (0xFFFFF << 0Ë;- (
	gPITC
Ë
Cuºít
 
Pîiodic
 
I¡îvÆ
 
VÆue


2922 
AT91C_PITC_PICNT
 
EQU
 (0xFFF << 20Ë;- (
	gPITC
Ë
Pîiodic
 
I¡îvÆ
 
Cou¡î


2929 
AT91C_WDTC_WDRSTT
 
EQU
 (0x1 << 0Ë;- (
	gWDTC
Ë
W©chdog
 
Re°¨t


2930 
AT91C_WDTC_KEY
 
EQU
 (0xFF << 24Ë;- (
	gWDTC
Ë
W©chdog
 
KEY
 
Passw‹d


2932 
AT91C_WDTC_WDV
 
EQU
 (0xFFF << 0Ë;- (
	gWDTC
Ë
W©chdog
 
Timî
 
Re°¨t


2933 
AT91C_WDTC_WDFIEN
 
EQU
 (0x1 << 12Ë;- (
	gWDTC
Ë
W©chdog
 
Fau…
 
I¡îru±
 
E«bÀ


2934 
AT91C_WDTC_WDRSTEN
 
EQU
 (0x1 << 13Ë;- (
	gWDTC
Ë
W©chdog
 
Re£t
 
E«bÀ


2935 
AT91C_WDTC_WDRPROC
 
EQU
 (0x1 << 14Ë;- (
	gWDTC
Ë
W©chdog
 
Timî
 
Re°¨t


2936 
AT91C_WDTC_WDDIS
 
EQU
 (0x1 << 15Ë;- (
	gWDTC
Ë
W©chdog
 
DißbÀ


2937 
AT91C_WDTC_WDD
 
EQU
 (0xFFF << 16Ë;- (
	gWDTC
Ë
W©chdog
 
Dñè
 
VÆue


2938 
AT91C_WDTC_WDDBGHLT
 
EQU
 (0x1 << 28Ë;- (
	gWDTC
Ë
W©chdog
 
Debug
 
HÆt


2939 
AT91C_WDTC_WDIDLEHLT
 
EQU
 (0x1 << 29Ë;- (
	gWDTC
Ë
W©chdog
 
IdÀ
 
HÆt


2941 
AT91C_WDTC_WDUNF
 
EQU
 (0x1 << 0Ë;- (
	gWDTC
Ë
W©chdog
 
UndîÊow


2942 
AT91C_WDTC_WDERR
 
EQU
 (0x1 << 1Ë;- (
	gWDTC
Ë
W©chdog
 
Eº‹


2948 
AT91C_VREG_PSTDBY
 
EQU
 (0x1 << 0Ë;- (
	gVREG
Ë
Vﬁège
 
Reguœt‹
 
Powî
 
Sèndby
 
Mode


2954 
AT91C_MC_RCB
 
EQU
 (0x1 << 0Ë;- (
	gMC
Ë
Rem≠
 
Comm™d
 
Bô


2956 
AT91C_MC_UNDADD
 
EQU
 (0x1 << 0Ë;- (
	gMC
Ë
Undeföed
 
Addess
 
Ab‹t
 
Sètus


2957 
AT91C_MC_MISADD
 
EQU
 (0x1 << 1Ë;- (
	gMC
Ë
Mißlig√d
 
Addess
 
Ab‹t
 
Sètus


2958 
AT91C_MC_ABTSZ
 
EQU
 (0x3 << 8Ë;- (
	gMC
Ë
Ab‹t
 
Size
 
Sètus


2959 
AT91C_MC_ABTSZ_BYTE
 
EQU
 (0x0 << 8Ë;- (
	gMC
Ë
Byã


2960 
AT91C_MC_ABTSZ_HWORD
 
EQU
 (0x1 << 8Ë;- (
	gMC
Ë
	gHÆf
-
w‹d


2961 
AT91C_MC_ABTSZ_WORD
 
EQU
 (0x2 << 8Ë;- (
	gMC
Ë
W‹d


2962 
AT91C_MC_ABTTYP
 
EQU
 (0x3 << 10Ë;- (
	gMC
Ë
Ab‹t
 
Ty≥
 
Sètus


2963 
AT91C_MC_ABTTYP_DATAR
 
EQU
 (0x0 << 10Ë;- (
	gMC
Ë
D©a
 
Ród


2964 
AT91C_MC_ABTTYP_DATAW
 
EQU
 (0x1 << 10Ë;- (
	gMC
Ë
D©a
 
Wrôe


2965 
AT91C_MC_ABTTYP_FETCH
 
EQU
 (0x2 << 10Ë;- (
	gMC
Ë
Code
 
Fëch


2966 
AT91C_MC_MST0
 
EQU
 (0x1 << 16Ë;- (
	gMC
Ë
	gMa°î
 0 
Ab‹t
 
Sour˚


2967 
AT91C_MC_MST1
 
EQU
 (0x1 << 17Ë;- (
	gMC
Ë
	gMa°î
 1 
Ab‹t
 
Sour˚


2968 
AT91C_MC_SVMST0
 
EQU
 (0x1 << 24Ë;- (
	gMC
Ë
Saved
 
	gMa°î
 0 
Ab‹t
 
Sour˚


2969 
AT91C_MC_SVMST1
 
EQU
 (0x1 << 25Ë;- (
	gMC
Ë
Saved
 
	gMa°î
 1 
Ab‹t
 
Sour˚


2971 
AT91C_MC_FRDY
 
EQU
 (0x1 << 0Ë;- (
	gMC
Ë
Fœsh
 
Ródy


2972 
AT91C_MC_LOCKE
 
EQU
 (0x1 << 2Ë;- (
	gMC
Ë
Lock
 
Eº‹


2973 
AT91C_MC_PROGE
 
EQU
 (0x1 << 3Ë;- (
	gMC
Ë
Progømmög
 
Eº‹


2974 
AT91C_MC_NEBP
 
EQU
 (0x1 << 7Ë;- (
	gMC
Ë
No
 
Eø£
 
Bef‹e
 
Progømmög


2975 
AT91C_MC_FWS
 
EQU
 (0x3 << 8Ë;- (
	gMC
Ë
Fœsh
 
Waô
 
Sèã


2976 
AT91C_MC_FWS_0FWS
 
EQU
 (0x0 << 8Ë;- (
	gMC
Ë1 
cy˛e
 
	gRód
, 2 
Wrôe
 
›î©i⁄s


2977 
AT91C_MC_FWS_1FWS
 
EQU
 (0x1 << 8Ë;- (
	gMC
Ë2 
cy˛es
 
	gRód
, 3 
Wrôe
 
›î©i⁄s


2978 
AT91C_MC_FWS_2FWS
 
EQU
 (0x2 << 8Ë;- (
	gMC
Ë3 
cy˛es
 
	gRód
, 4 
Wrôe
 
›î©i⁄s


2979 
AT91C_MC_FWS_3FWS
 
EQU
 (0x3 << 8Ë;- (
	gMC
Ë4 
cy˛es
 
	gRód
, 4 
Wrôe
 
›î©i⁄s


2980 
AT91C_MC_FMCN
 
EQU
 (0xFF << 16Ë;- (
	gMC
Ë
Fœsh
 
Mi¸o£c⁄d
 
Cy˛e
 
Numbî


2982 
AT91C_MC_FCMD
 
EQU
 (0xF << 0Ë;- (
	gMC
Ë
Fœsh
 
Comm™d


2983 
AT91C_MC_FCMD_START_PROG
 
EQU
 (0x1Ë;- (
	gMC
Ë
Sèπs
 
the
 
¥ogømmög
 
of
 
th
 
ïage
 
•ecifõd
 
by
 
	gPAGEN
.

2984 
AT91C_MC_FCMD_LOCK
 
EQU
 (0x2Ë;- (
	gMC
Ë
Sèπs
 
a
 
lock
 
£quí˚
 
of
 
the
 
£˘‹
 
deföed
 
by
Åhê
	gbôs
 4 
	gto
 7 o‡thê
fõld
 
	gPAGEN
.

2985 
AT91C_MC_FCMD_PROG_AND_LOCK
 
EQU
 (0x3Ë;- (
	gMC
Ë
The
 
lock
 
£quí˚
 
autom©iˇŒy
 
h≠≥ns
 
a·î
 
the
 
¥ogømmög
 sequí˚ 
is
 
	gcom∂ëed
.

2986 
AT91C_MC_FCMD_UNLOCK
 
EQU
 (0x4Ë;- (
	gMC
Ë
Sèπs
 
™
 
u∆ock
 
£quí˚
 
of
 
the
 
£˘‹
 
deföed
 
by
Åhê
	gbôs
 4 
	gto
 7 o‡thê
fõld
 
	gPAGEN
.

2987 
AT91C_MC_FCMD_ERASE_ALL
 
EQU
 (0x8Ë;- (
	gMC
Ë
Sèπs
 
the
 
îa£
 
of
Åhê
ítúe
 
	gÊash
.
If
 
©
 
Àa°
 
a
 
∑ge
 
is
 
	glocked
,Åhê
comm™d
 i†
	gˇn˚Œed
.

2988 
AT91C_MC_FCMD_SET_GP_NVM
 
EQU
 (0xBË;- (
	gMC
Ë
Së
 
GíîÆ
 
PuΩo£
 
NVM
 
	gbôs
.

2989 
AT91C_MC_FCMD_CLR_GP_NVM
 
EQU
 (0xDË;- (
	gMC
Ë
CÀ¨
 
GíîÆ
 
PuΩo£
 
NVM
 
	gbôs
.

2990 
AT91C_MC_FCMD_SET_SECURITY
 
EQU
 (0xFË;- (
	gMC
Ë
Së
 
Securôy
 
	gBô
.

2991 
AT91C_MC_PAGEN
 
EQU
 (0x3FF << 8Ë;- (
	gMC
Ë
Page
 
Numbî


2992 
AT91C_MC_KEY
 
EQU
 (0xFF << 24Ë;- (
	gMC
Ë
Wrôög
 
PrŸe˘
 
Key


2994 
AT91C_MC_SECURITY
 
EQU
 (0x1 << 4Ë;- (
	gMC
Ë
Securôy
 
Bô
 
Sètus


2995 
AT91C_MC_GPNVM0
 
EQU
 (0x1 << 8Ë;- (
	gMC
Ë
	gSe˘‹
 0 
Lock
 
Sètus


2996 
AT91C_MC_GPNVM1
 
EQU
 (0x1 << 9Ë;- (
	gMC
Ë
	gSe˘‹
 1 
Lock
 
Sètus


2997 
AT91C_MC_GPNVM2
 
EQU
 (0x1 << 10Ë;- (
	gMC
Ë
	gSe˘‹
 2 
Lock
 
Sètus


2998 
AT91C_MC_GPNVM3
 
EQU
 (0x1 << 11Ë;- (
	gMC
Ë
	gSe˘‹
 3 
Lock
 
Sètus


2999 
AT91C_MC_GPNVM4
 
EQU
 (0x1 << 12Ë;- (
	gMC
Ë
	gSe˘‹
 4 
Lock
 
Sètus


3000 
AT91C_MC_GPNVM5
 
EQU
 (0x1 << 13Ë;- (
	gMC
Ë
	gSe˘‹
 5 
Lock
 
Sètus


3001 
AT91C_MC_GPNVM6
 
EQU
 (0x1 << 14Ë;- (
	gMC
Ë
	gSe˘‹
 6 
Lock
 
Sètus


3002 
AT91C_MC_GPNVM7
 
EQU
 (0x1 << 15Ë;- (
	gMC
Ë
	gSe˘‹
 7 
Lock
 
Sètus


3003 
AT91C_MC_LOCKS0
 
EQU
 (0x1 << 16Ë;- (
	gMC
Ë
	gSe˘‹
 0 
Lock
 
Sètus


3004 
AT91C_MC_LOCKS1
 
EQU
 (0x1 << 17Ë;- (
	gMC
Ë
	gSe˘‹
 1 
Lock
 
Sètus


3005 
AT91C_MC_LOCKS2
 
EQU
 (0x1 << 18Ë;- (
	gMC
Ë
	gSe˘‹
 2 
Lock
 
Sètus


3006 
AT91C_MC_LOCKS3
 
EQU
 (0x1 << 19Ë;- (
	gMC
Ë
	gSe˘‹
 3 
Lock
 
Sètus


3007 
AT91C_MC_LOCKS4
 
EQU
 (0x1 << 20Ë;- (
	gMC
Ë
	gSe˘‹
 4 
Lock
 
Sètus


3008 
AT91C_MC_LOCKS5
 
EQU
 (0x1 << 21Ë;- (
	gMC
Ë
	gSe˘‹
 5 
Lock
 
Sètus


3009 
AT91C_MC_LOCKS6
 
EQU
 (0x1 << 22Ë;- (
	gMC
Ë
	gSe˘‹
 6 
Lock
 
Sètus


3010 
AT91C_MC_LOCKS7
 
EQU
 (0x1 << 23Ë;- (
	gMC
Ë
	gSe˘‹
 7 
Lock
 
Sètus


3011 
AT91C_MC_LOCKS8
 
EQU
 (0x1 << 24Ë;- (
	gMC
Ë
	gSe˘‹
 8 
Lock
 
Sètus


3012 
AT91C_MC_LOCKS9
 
EQU
 (0x1 << 25Ë;- (
	gMC
Ë
	gSe˘‹
 9 
Lock
 
Sètus


3013 
AT91C_MC_LOCKS10
 
EQU
 (0x1 << 26Ë;- (
	gMC
Ë
	gSe˘‹
 10 
Lock
 
Sètus


3014 
AT91C_MC_LOCKS11
 
EQU
 (0x1 << 27Ë;- (
	gMC
Ë
	gSe˘‹
 11 
Lock
 
Sètus


3015 
AT91C_MC_LOCKS12
 
EQU
 (0x1 << 28Ë;- (
	gMC
Ë
	gSe˘‹
 12 
Lock
 
Sètus


3016 
AT91C_MC_LOCKS13
 
EQU
 (0x1 << 29Ë;- (
	gMC
Ë
	gSe˘‹
 13 
Lock
 
Sètus


3017 
AT91C_MC_LOCKS14
 
EQU
 (0x1 << 30Ë;- (
	gMC
Ë
	gSe˘‹
 14 
Lock
 
Sètus


3018 
AT91C_MC_LOCKS15
 
EQU
 (0x1 << 31Ë;- (
	gMC
Ë
	gSe˘‹
 15 
Lock
 
Sètus


3024 
AT91C_SPI_SPIEN
 
EQU
 (0x1 << 0Ë;- (
	gSPI
Ë
SPI
 
E«bÀ


3025 
AT91C_SPI_SPIDIS
 
EQU
 (0x1 << 1Ë;- (
	gSPI
Ë
SPI
 
DißbÀ


3026 
AT91C_SPI_SWRST
 
EQU
 (0x1 << 7Ë;- (
	gSPI
Ë
SPI
 
So·w¨e
 
ª£t


3027 
AT91C_SPI_LASTXFER
 
EQU
 (0x1 << 24Ë;- (
	gSPI
Ë
SPI
 
La°
 
Tøns„r


3029 
AT91C_SPI_MSTR
 
EQU
 (0x1 << 0Ë;- (
	gSPI
Ë
	gMa°î
/
Sœve
 
Mode


3030 
AT91C_SPI_PS
 
EQU
 (0x1 << 1Ë;- (
	gSPI
Ë
PîùhîÆ
 
Sñe˘


3031 
AT91C_SPI_PS_FIXED
 
EQU
 (0x0 << 1Ë;- (
	gSPI
Ë
Fixed
 
PîùhîÆ
 
Sñe˘


3032 
AT91C_SPI_PS_VARIABLE
 
EQU
 (0x1 << 1Ë;- (
	gSPI
Ë
V¨übÀ
 
PîùhîÆ
 
Sñe˘


3033 
AT91C_SPI_PCSDEC
 
EQU
 (0x1 << 2Ë;- (
	gSPI
Ë
Chù
 
Sñe˘
 
Decode


3034 
AT91C_SPI_FDIV
 
EQU
 (0x1 << 3Ë;- (
	gSPI
Ë
Clock
 
Sñe˘i⁄


3035 
AT91C_SPI_MODFDIS
 
EQU
 (0x1 << 4Ë;- (
	gSPI
Ë
Mode
 
Fau…
 
Dëe˘i⁄


3036 
AT91C_SPI_LLB
 
EQU
 (0x1 << 7Ë;- (
	gSPI
Ë
Clock
 
Sñe˘i⁄


3037 
AT91C_SPI_PCS
 
EQU
 (0xF << 16Ë;- (
	gSPI
Ë
PîùhîÆ
 
Chù
 
Sñe˘


3038 
AT91C_SPI_DLYBCS
 
EQU
 (0xFF << 24Ë;- (
	gSPI
Ë
Dñay
 
Bëwìn
 
Chù
 
Sñe˘s


3040 
AT91C_SPI_RD
 
EQU
 (0xFFFF << 0Ë;- (
	gSPI
Ë
Re˚ive
 
D©a


3041 
AT91C_SPI_RPCS
 
EQU
 (0xF << 16Ë;- (
	gSPI
Ë
PîùhîÆ
 
Chù
 
Sñe˘
 
Sètus


3043 
AT91C_SPI_TD
 
EQU
 (0xFFFF << 0Ë;- (
	gSPI
Ë
Tønsmô
 
D©a


3044 
AT91C_SPI_TPCS
 
EQU
 (0xF << 16Ë;- (
	gSPI
Ë
PîùhîÆ
 
Chù
 
Sñe˘
 
Sètus


3046 
AT91C_SPI_RDRF
 
EQU
 (0x1 << 0Ë;- (
	gSPI
Ë
Re˚ive
 
D©a
 
Regi°î
 
FuŒ


3047 
AT91C_SPI_TDRE
 
EQU
 (0x1 << 1Ë;- (
	gSPI
Ë
Tønsmô
 
D©a
 
Regi°î
 
Em±y


3048 
AT91C_SPI_MODF
 
EQU
 (0x1 << 2Ë;- (
	gSPI
Ë
Mode
 
Fau…
 
Eº‹


3049 
AT91C_SPI_OVRES
 
EQU
 (0x1 << 3Ë;- (
	gSPI
Ë
Ovîrun
 
Eº‹
 
Sètus


3050 
AT91C_SPI_ENDRX
 
EQU
 (0x1 << 4Ë;- (
	gSPI
Ë
End
 
of
 
Re˚ivî
 
Tøns„r


3051 
AT91C_SPI_ENDTX
 
EQU
 (0x1 << 5Ë;- (
	gSPI
Ë
End
 
of
 
Re˚ivî
 
Tøns„r


3052 
AT91C_SPI_RXBUFF
 
EQU
 (0x1 << 6Ë;- (
	gSPI
Ë
RXBUFF
 
I¡îru±


3053 
AT91C_SPI_TXBUFE
 
EQU
 (0x1 << 7Ë;- (
	gSPI
Ë
TXBUFE
 
I¡îru±


3054 
AT91C_SPI_NSSR
 
EQU
 (0x1 << 8Ë;- (
	gSPI
Ë
NSSR
 
I¡îru±


3055 
AT91C_SPI_TXEMPTY
 
EQU
 (0x1 << 9Ë;- (
	gSPI
Ë
TXEMPTY
 
I¡îru±


3056 
AT91C_SPI_SPIENS
 
EQU
 (0x1 << 16Ë;- (
	gSPI
Ë
E«bÀ
 
Sètus


3061 
AT91C_SPI_CPOL
 
EQU
 (0x1 << 0Ë;- (
	gSPI
Ë
Clock
 
Pﬁ¨ôy


3062 
AT91C_SPI_NCPHA
 
EQU
 (0x1 << 1Ë;- (
	gSPI
Ë
Clock
 
Pha£


3063 
AT91C_SPI_CSAAT
 
EQU
 (0x1 << 3Ë;- (
	gSPI
Ë
Chù
 
Sñe˘
 
A˘ive
 
A·î
 
Tøns„r


3064 
AT91C_SPI_BITS
 
EQU
 (0xF << 4Ë;- (
	gSPI
Ë
Bôs
 
Pî
 
Tøns„r


3065 
AT91C_SPI_BITS_8
 
EQU
 (0x0 << 4Ë;- (
	gSPI
Ë8 
Bôs
 
Pî
 
å™s„r


3066 
AT91C_SPI_BITS_9
 
EQU
 (0x1 << 4Ë;- (
	gSPI
Ë9 
Bôs
 
Pî
 
å™s„r


3067 
AT91C_SPI_BITS_10
 
EQU
 (0x2 << 4Ë;- (
	gSPI
Ë10 
Bôs
 
Pî
 
å™s„r


3068 
AT91C_SPI_BITS_11
 
EQU
 (0x3 << 4Ë;- (
	gSPI
Ë11 
Bôs
 
Pî
 
å™s„r


3069 
AT91C_SPI_BITS_12
 
EQU
 (0x4 << 4Ë;- (
	gSPI
Ë12 
Bôs
 
Pî
 
å™s„r


3070 
AT91C_SPI_BITS_13
 
EQU
 (0x5 << 4Ë;- (
	gSPI
Ë13 
Bôs
 
Pî
 
å™s„r


3071 
AT91C_SPI_BITS_14
 
EQU
 (0x6 << 4Ë;- (
	gSPI
Ë14 
Bôs
 
Pî
 
å™s„r


3072 
AT91C_SPI_BITS_15
 
EQU
 (0x7 << 4Ë;- (
	gSPI
Ë15 
Bôs
 
Pî
 
å™s„r


3073 
AT91C_SPI_BITS_16
 
EQU
 (0x8 << 4Ë;- (
	gSPI
Ë16 
Bôs
 
Pî
 
å™s„r


3074 
AT91C_SPI_SCBR
 
EQU
 (0xFF << 8Ë;- (
	gSPI
Ë
Sîül
 
Clock
 
Baud
 
R©e


3075 
AT91C_SPI_DLYBS
 
EQU
 (0xFF << 16Ë;- (
	gSPI
Ë
Dñay
 
Bef‹e
 
SPCK


3076 
AT91C_SPI_DLYBCT
 
EQU
 (0xFF << 24Ë;- (
	gSPI
Ë
Dñay
 
Bëwìn
 
C⁄£cutive
 
Tøns„rs


3082 
AT91C_US_STTBRK
 
EQU
 (0x1 << 9Ë;- (
	gUSART
Ë
Sèπ
 
Bªak


3083 
AT91C_US_STPBRK
 
EQU
 (0x1 << 10Ë;- (
	gUSART
Ë
St›
 
Bªak


3084 
AT91C_US_STTTO
 
EQU
 (0x1 << 11Ë;- (
	gUSART
Ë
Sèπ
 
	gTime
-
out


3085 
AT91C_US_SENDA
 
EQU
 (0x1 << 12Ë;- (
	gUSART
Ë
Síd
 
Addªss


3086 
AT91C_US_RSTIT
 
EQU
 (0x1 << 13Ë;- (
	gUSART
Ë
Re£t
 
Iãøti⁄s


3087 
AT91C_US_RSTNACK
 
EQU
 (0x1 << 14Ë;- (
	gUSART
Ë
Re£t
 
N⁄
 
AcknowÀdge


3088 
AT91C_US_RETTO
 
EQU
 (0x1 << 15Ë;- (
	gUSART
Ë
Rórm
 
	gTime
-
out


3089 
AT91C_US_DTREN
 
EQU
 (0x1 << 16Ë;- (
	gUSART
Ë
D©a
 
TîmöÆ
 
ªady
 
E«bÀ


3090 
AT91C_US_DTRDIS
 
EQU
 (0x1 << 17Ë;- (
	gUSART
Ë
D©a
 
TîmöÆ
 
ªady
 
DißbÀ


3091 
AT91C_US_RTSEN
 
EQU
 (0x1 << 18Ë;- (
	gUSART
Ë
Reque°
 
to
 
Síd
 
íabÀ


3092 
AT91C_US_RTSDIS
 
EQU
 (0x1 << 19Ë;- (
	gUSART
Ë
Reque°
 
to
 
Síd
 
DißbÀ


3094 
AT91C_US_USMODE
 
EQU
 (0xF << 0Ë;- (
	gUSART
Ë
Ußπ
 
mode


3095 
AT91C_US_USMODE_NORMAL
 
EQU
 (0x0Ë;- (
	gUSART
Ë
N‹mÆ


3096 
AT91C_US_USMODE_RS485
 
EQU
 (0x1Ë;- (
	gUSART
Ë
RS485


3097 
AT91C_US_USMODE_HWHSH
 
EQU
 (0x2Ë;- (
	gUSART
Ë
H¨dw¨e
 
H™dshakög


3098 
AT91C_US_USMODE_MODEM
 
EQU
 (0x3Ë;- (
	gUSART
Ë
Modem


3099 
AT91C_US_USMODE_ISO7816_0
 
EQU
 (0x4Ë;- (
	gUSART
Ë
ISO7816
 
	g¥Ÿocﬁ
: 
T
 = 0

3100 
AT91C_US_USMODE_ISO7816_1
 
EQU
 (0x6Ë;- (
	gUSART
Ë
ISO7816
 
	g¥Ÿocﬁ
: 
T
 = 1

3101 
AT91C_US_USMODE_IRDA
 
EQU
 (0x8Ë;- (
	gUSART
Ë
IrDA


3102 
AT91C_US_USMODE_SWHSH
 
EQU
 (0xCË;- (
	gUSART
Ë
So·w¨e
 
H™dshakög


3103 
AT91C_US_CLKS
 
EQU
 (0x3 << 4Ë;- (
	gUSART
Ë
Clock
 
Sñe˘i⁄
 (
Baud
 
R©e
 
gíî©‹
 
I≈ut
 Clock

3104 
AT91C_US_CLKS_CLOCK
 
EQU
 (0x0 << 4Ë;- (
USART
Ë
Clock


3105 
AT91C_US_CLKS_FDIV1
 
EQU
 (0x1 << 4Ë;- (
USART
Ë
fdiv1


3106 
AT91C_US_CLKS_SLOW
 
EQU
 (0x2 << 4Ë;- (
USART
Ë
	$¶ow_˛ock
 (
ARM
)

3107 
AT91C_US_CLKS_EXT
 
	`EQU
 (0x3 << 4Ë;- (
USART
Ë
	$Exã∫Æ
 (
SCK
)

3108 
AT91C_US_CHRL
 
	`EQU
 (0x3 << 6Ë;- (
USART
Ë
Clock
 
	`Sñe˘i⁄
 (
Baud
 
R©e
 
gíî©‹
 
I≈ut
 Clock

3109 
AT91C_US_CHRL_5_BITS
 
	`EQU
 (0x0 << 6Ë;- (
USART
Ë
Ch¨a˘î
 
Lígth
: 5 
bôs


3110 
AT91C_US_CHRL_6_BITS
 
	`EQU
 (0x1 << 6Ë;- (
USART
Ë
Ch¨a˘î
 
Lígth
: 6 
bôs


3111 
AT91C_US_CHRL_7_BITS
 
	`EQU
 (0x2 << 6Ë;- (
USART
Ë
Ch¨a˘î
 
Lígth
: 7 
bôs


3112 
AT91C_US_CHRL_8_BITS
 
	`EQU
 (0x3 << 6Ë;- (
USART
Ë
Ch¨a˘î
 
Lígth
: 8 
bôs


3113 
AT91C_US_SYNC
 
	`EQU
 (0x1 << 8Ë;- (
USART
Ë
Synchr⁄ous
 
Mode
 
Sñe˘


3114 
AT91C_US_NBSTOP
 
	`EQU
 (0x3 << 12Ë;- (
USART
Ë
Numbî
 
of
 
St›
 
bôs


3115 
AT91C_US_NBSTOP_1_BIT
 
	`EQU
 (0x0 << 12Ë;- (
USART
Ë1 
°›
 
bô


3116 
AT91C_US_NBSTOP_15_BIT
 
	`EQU
 (0x1 << 12Ë;- (
USART
Ë
	`Asynchr⁄ous
 (
SYNC
=0Ë2 
°›
 
bôs
 
	`Synchr⁄ous
 (SYNC=1) 2 stop bits

3117 
AT91C_US_NBSTOP_2_BIT
 
	`EQU
 (0x2 << 12Ë;- (
USART
Ë2 
°›
 
bôs


3118 
AT91C_US_MSBF
 
	`EQU
 (0x1 << 16Ë;- (
USART
Ë
Bô
 
Ordî


3119 
AT91C_US_MODE9
 
	`EQU
 (0x1 << 17Ë;- (
USART
Ë9-
bô
 
Ch¨a˘î
 
Àngth


3120 
AT91C_US_CKLO
 
	`EQU
 (0x1 << 18Ë;- (
USART
Ë
Clock
 
Ouçut
 
Sñe˘


3121 
AT91C_US_OVER
 
	`EQU
 (0x1 << 19Ë;- (
USART
Ë
Ovî
 
Sam∂ög
 
Mode


3122 
AT91C_US_INACK
 
	`EQU
 (0x1 << 20Ë;- (
USART
Ë
Inhibô
 
N⁄
 
AcknowÀdge


3123 
AT91C_US_DSNACK
 
	`EQU
 (0x1 << 21Ë;- (
USART
Ë
DißbÀ
 
Suc˚ssive
 
NACK


3124 
AT91C_US_MAX_ITER
 
	`EQU
 (0x1 << 24Ë;- (
USART
Ë
Numbî
 
of
 
Rïëôi⁄s


3125 
AT91C_US_FILTER
 
	`EQU
 (0x1 << 28Ë;- (
USART
Ë
Re˚ive
 
Löe
 
Fûãr


3127 
AT91C_US_RXBRK
 
	`EQU
 (0x1 << 2Ë;- (
USART
Ë
Bªak
 
Re˚ived
/
End
 
of
 Break

3128 
AT91C_US_TIMEOUT
 
	`EQU
 (0x1 << 8Ë;- (
USART
Ë
Re˚ivî
 
Time
-
out


3129 
AT91C_US_ITERATION
 
	`EQU
 (0x1 << 10Ë;- (
USART
Ë
Max
 
numbî
 
of
 
Rïëôi⁄s
 
Róched


3130 
AT91C_US_NACK
 
	`EQU
 (0x1 << 13Ë;- (
USART
Ë
N⁄
 
AcknowÀdge


3131 
AT91C_US_RIIC
 
	`EQU
 (0x1 << 16Ë;- (
USART
Ë
Rög
 
INdiˇt‹
 
I≈ut
 
Ch™ge
 
Fœg


3132 
AT91C_US_DSRIC
 
	`EQU
 (0x1 << 17Ë;- (
USART
Ë
D©a
 
Së
 
Ródy
 
I≈ut
 
Ch™ge
 
Fœg


3133 
AT91C_US_DCDIC
 
	`EQU
 (0x1 << 18Ë;- (
USART
Ë
D©a
 
C¨rõr
 
Fœg


3134 
AT91C_US_CTSIC
 
	`EQU
 (0x1 << 19Ë;- (
USART
Ë
CÀ¨
 
To
 
Síd
 
I≈ut
 
Ch™ge
 
Fœg


3138 
AT91C_US_RI
 
	`EQU
 (0x1 << 20Ë;- (
USART
Ë
Image
 
of
 
RI
 
I≈ut


3139 
AT91C_US_DSR
 
	`EQU
 (0x1 << 21Ë;- (
USART
Ë
Image
 
of
 
DSR
 
I≈ut


3140 
AT91C_US_DCD
 
	`EQU
 (0x1 << 22Ë;- (
USART
Ë
Image
 
of
 
DCD
 
I≈ut


3141 
AT91C_US_CTS
 
	`EQU
 (0x1 << 23Ë;- (
USART
Ë
Image
 
of
 
CTS
 
I≈ut


3147 
AT91C_SSC_RXEN
 
	`EQU
 (0x1 << 0Ë;- (
SSC
Ë
Re˚ive
 
E«bÀ


3148 
AT91C_SSC_RXDIS
 
	`EQU
 (0x1 << 1Ë;- (
SSC
Ë
Re˚ive
 
DißbÀ


3149 
AT91C_SSC_TXEN
 
	`EQU
 (0x1 << 8Ë;- (
SSC
Ë
Tønsmô
 
E«bÀ


3150 
AT91C_SSC_TXDIS
 
	`EQU
 (0x1 << 9Ë;- (
SSC
Ë
Tønsmô
 
DißbÀ


3151 
AT91C_SSC_SWRST
 
	`EQU
 (0x1 << 15Ë;- (
SSC
Ë
So·w¨e
 
Re£t


3153 
AT91C_SSC_CKS
 
	`EQU
 (0x3 << 0Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Clock
 
Sñe˘i⁄


3154 
AT91C_SSC_CKS_DIV
 
	`EQU
 (0x0Ë;- (
SSC
Ë
Divided
 
Clock


3155 
AT91C_SSC_CKS_TK
 
	`EQU
 (0x1Ë;- (
SSC
Ë
TK
 
Clock
 
sig«l


3156 
AT91C_SSC_CKS_RK
 
	`EQU
 (0x2Ë;- (
SSC
Ë
RK
 
pö


3157 
AT91C_SSC_CKO
 
	`EQU
 (0x7 << 2Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Clock
 
Ouçut
 
Mode
 
Sñe˘i⁄


3158 
AT91C_SSC_CKO_NONE
 
	`EQU
 (0x0 << 2Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Clock
 
Ouçut
 
Mode
: 
N⁄e
 
RK
 
pö
: 
I≈ut
-
⁄ly


3159 
AT91C_SSC_CKO_CONTINOUS
 
	`EQU
 (0x1 << 2Ë;- (
SSC
Ë
C⁄töuous
 
Re˚ive
/
Tønsmô
 
Clock
 
RK
 
pö
: 
Ouçut


3160 
AT91C_SSC_CKO_DATA_TX
 
	`EQU
 (0x2 << 2Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Clock
 
⁄ly
 
durög
 
d©a
 
å™s„rs
 
RK
 
pö
: 
Ouçut


3161 
AT91C_SSC_CKI
 
	`EQU
 (0x1 << 5Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Clock
 
Invîsi⁄


3162 
AT91C_SSC_START
 
	`EQU
 (0xF << 8Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Sèπ
 
Sñe˘i⁄


3163 
AT91C_SSC_START_CONTINOUS
 
	`EQU
 (0x0 << 8Ë;- (
SSC
Ë
C⁄töuous
, 
as
 
so⁄
á†
the
 
ª˚ivî
 
is
 
íabÀd
, 
™d
 
immedüãly
 
a·î
Åhê
íd
 
of
 
å™s„r
 o‡thê
¥evious
 
d©a
.

3164 
AT91C_SSC_START_TX
 
	`EQU
 (0x1 << 8Ë;- (
SSC
Ë
Tønsmô
/
Re˚ive
 
°¨t


3165 
AT91C_SSC_START_LOW_RF
 
	`EQU
 (0x2 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
a
 
low
 
Àvñ
 
⁄
 
RF
 
öput


3166 
AT91C_SSC_START_HIGH_RF
 
	`EQU
 (0x3 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
a
 
high
 
Àvñ
 
⁄
 
RF
 
öput


3167 
AT91C_SSC_START_FALL_RF
 
	`EQU
 (0x4 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
a
 
ÁŒög
 
edge
 
⁄
 
RF
 
öput


3168 
AT91C_SSC_START_RISE_RF
 
	`EQU
 (0x5 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
a
 
risög
 
edge
 
⁄
 
RF
 
öput


3169 
AT91C_SSC_START_LEVEL_RF
 
	`EQU
 (0x6 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
™y
 
Àvñ
 
ch™ge
 
⁄
 
RF
 
öput


3170 
AT91C_SSC_START_EDGE_RF
 
	`EQU
 (0x7 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
™y
 
edge
 
⁄
 
RF
 
öput


3171 
AT91C_SSC_START_0
 
	`EQU
 (0x8 << 8Ë;- (
SSC
Ë
Com∑ª
 0

3172 
AT91C_SSC_STTDLY
 
	`EQU
 (0xFF << 16Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Sèπ
 
Dñay


3173 
AT91C_SSC_PERIOD
 
	`EQU
 (0xFF << 24Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Pîiod
 
Dividî
 
Sñe˘i⁄


3175 
AT91C_SSC_DATLEN
 
	`EQU
 (0x1F << 0Ë;- (
SSC
Ë
D©a
 
Lígth


3176 
AT91C_SSC_LOOP
 
	`EQU
 (0x1 << 5Ë;- (
SSC
Ë
Lo›
 
Mode


3177 
AT91C_SSC_MSBF
 
	`EQU
 (0x1 << 7Ë;- (
SSC
Ë
Mo°
 
Signifiˇ¡
 
Bô
 
Fú°


3178 
AT91C_SSC_DATNB
 
	`EQU
 (0xF << 8Ë;- (
SSC
Ë
D©a
 
Numbî
 
≥r
 
Føme


3179 
AT91C_SSC_FSLEN
 
	`EQU
 (0xF << 16Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Àngth


3180 
AT91C_SSC_FSOS
 
	`EQU
 (0x7 << 20Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Ouçut
 
Sñe˘i⁄


3181 
AT91C_SSC_FSOS_NONE
 
	`EQU
 (0x0 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
N⁄e
 
RK
 
pö
 
I≈ut
-
⁄ly


3182 
AT91C_SSC_FSOS_NEGATIVE
 
	`EQU
 (0x1 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
Neg©ive
 
Pul£


3183 
AT91C_SSC_FSOS_POSITIVE
 
	`EQU
 (0x2 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
Posôive
 
Pul£


3184 
AT91C_SSC_FSOS_LOW
 
	`EQU
 (0x3 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
Drivî
 
Low
 
durög
 
d©a
 
å™s„r


3185 
AT91C_SSC_FSOS_HIGH
 
	`EQU
 (0x4 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
Drivî
 
High
 
durög
 
d©a
 
å™s„r


3186 
AT91C_SSC_FSOS_TOGGLE
 
	`EQU
 (0x5 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
Togglög
 
©
 
óch
 
°¨t
 
of
 
d©a
 
å™s„r


3187 
AT91C_SSC_FSEDGE
 
	`EQU
 (0x1 << 24Ë;- (
SSC
Ë
Føme
 
Sync
 
Edge
 
Dëe˘i⁄


3190 
AT91C_SSC_DATDEF
 
	`EQU
 (0x1 << 5Ë;- (
SSC
Ë
D©a
 
DeÁu…
 
VÆue


3191 
AT91C_SSC_FSDEN
 
	`EQU
 (0x1 << 23Ë;- (
SSC
Ë
Føme
 
Sync
 
D©a
 
E«bÀ


3193 
AT91C_SSC_TXRDY
 
	`EQU
 (0x1 << 0Ë;- (
SSC
Ë
Tønsmô
 
Ródy


3194 
AT91C_SSC_TXEMPTY
 
	`EQU
 (0x1 << 1Ë;- (
SSC
Ë
Tønsmô
 
Em±y


3195 
AT91C_SSC_ENDTX
 
	`EQU
 (0x1 << 2Ë;- (
SSC
Ë
End
 
Of
 
Tønsmissi⁄


3196 
AT91C_SSC_TXBUFE
 
	`EQU
 (0x1 << 3Ë;- (
SSC
Ë
Tønsmô
 
Buf„r
 
Em±y


3197 
AT91C_SSC_RXRDY
 
	`EQU
 (0x1 << 4Ë;- (
SSC
Ë
Re˚ive
 
Ródy


3198 
AT91C_SSC_OVRUN
 
	`EQU
 (0x1 << 5Ë;- (
SSC
Ë
Re˚ive
 
Ovîrun


3199 
AT91C_SSC_ENDRX
 
	`EQU
 (0x1 << 6Ë;- (
SSC
Ë
End
 
of
 
Re˚±i⁄


3200 
AT91C_SSC_RXBUFF
 
	`EQU
 (0x1 << 7Ë;- (
SSC
Ë
Re˚ive
 
Buf„r
 
FuŒ


3201 
AT91C_SSC_TXSYN
 
	`EQU
 (0x1 << 10Ë;- (
SSC
Ë
Tønsmô
 
Sync


3202 
AT91C_SSC_RXSYN
 
	`EQU
 (0x1 << 11Ë;- (
SSC
Ë
Re˚ive
 
Sync


3203 
AT91C_SSC_TXENA
 
	`EQU
 (0x1 << 16Ë;- (
SSC
Ë
Tønsmô
 
E«bÀ


3204 
AT91C_SSC_RXENA
 
	`EQU
 (0x1 << 17Ë;- (
SSC
Ë
Re˚ive
 
E«bÀ


3213 
AT91C_TWI_START
 
	`EQU
 (0x1 << 0Ë;- (
TWI
Ë
Síd
 
a
 
START
 
C⁄dôi⁄


3214 
AT91C_TWI_STOP
 
	`EQU
 (0x1 << 1Ë;- (
TWI
Ë
Síd
 
a
 
STOP
 
C⁄dôi⁄


3215 
AT91C_TWI_MSEN
 
	`EQU
 (0x1 << 2Ë;- (
TWI
ËTWI 
Ma°î
 
Tøns„r
 
E«bÀd


3216 
AT91C_TWI_MSDIS
 
	`EQU
 (0x1 << 3Ë;- (
TWI
ËTWI 
Ma°î
 
Tøns„r
 
DißbÀd


3217 
AT91C_TWI_SWRST
 
	`EQU
 (0x1 << 7Ë;- (
TWI
Ë
So·w¨e
 
Re£t


3219 
AT91C_TWI_IADRSZ
 
	`EQU
 (0x3 << 8Ë;- (
TWI
Ë
I¡î«l
 
Devi˚
 
Addªss
 
Size


3220 
AT91C_TWI_IADRSZ_NO
 
	`EQU
 (0x0 << 8Ë;- (
TWI
Ë
No
 
öã∫Æ
 
devi˚
 
addªss


3221 
AT91C_TWI_IADRSZ_1_BYTE
 
	`EQU
 (0x1 << 8Ë;- (
TWI
Ë
O√
-
byã
 
öã∫Æ
 
devi˚
 
addªss


3222 
AT91C_TWI_IADRSZ_2_BYTE
 
	`EQU
 (0x2 << 8Ë;- (
TWI
Ë
Two
-
byã
 
öã∫Æ
 
devi˚
 
addªss


3223 
AT91C_TWI_IADRSZ_3_BYTE
 
	`EQU
 (0x3 << 8Ë;- (
TWI
Ë
Thªe
-
byã
 
öã∫Æ
 
devi˚
 
addªss


3224 
AT91C_TWI_MREAD
 
	`EQU
 (0x1 << 12Ë;- (
TWI
Ë
Ma°î
 
Ród
 
Dúe˘i⁄


3225 
AT91C_TWI_DADR
 
	`EQU
 (0x7F << 16Ë;- (
TWI
Ë
Devi˚
 
Addªss


3227 
AT91C_TWI_CLDIV
 
	`EQU
 (0xFF << 0Ë;- (
TWI
Ë
Clock
 
Low
 
Dividî


3228 
AT91C_TWI_CHDIV
 
	`EQU
 (0xFF << 8Ë;- (
TWI
Ë
Clock
 
High
 
Dividî


3229 
AT91C_TWI_CKDIV
 
	`EQU
 (0x7 << 16Ë;- (
TWI
Ë
Clock
 
Dividî


3231 
AT91C_TWI_TXCOMP
 
	`EQU
 (0x1 << 0Ë;- (
TWI
Ë
Tønsmissi⁄
 
Com∂ëed


3232 
AT91C_TWI_RXRDY
 
	`EQU
 (0x1 << 1Ë;- (
TWI
Ë
Re˚ive
 
hﬁdög
 
RóDY


3233 
AT91C_TWI_TXRDY
 
	`EQU
 (0x1 << 2Ë;- (
TWI
Ë
Tønsmô
 
hﬁdög
 
RóDY


3234 
AT91C_TWI_OVRE
 
	`EQU
 (0x1 << 6Ë;- (
TWI
Ë
Ovîrun
 
Eº‹


3235 
AT91C_TWI_UNRE
 
	`EQU
 (0x1 << 7Ë;- (
TWI
Ë
Undîrun
 
Eº‹


3236 
AT91C_TWI_NACK
 
	`EQU
 (0x1 << 8Ë;- (
TWI
Ë
NŸ
 
AcknowÀdged


3245 
AT91C_PWMC_CPRE
 
	`EQU
 (0xF << 0Ë;- (
PWMC_CH
Ë
Ch™√l
 
Pª
-
sˇÀr
 : 
PWMC_CLKx


3246 
AT91C_PWMC_CPRE_MCK
 
	`EQU
 (0x0Ë;- (
PWMC_CH
)

3247 
AT91C_PWMC_CPRE_MCKA
 
	`EQU
 (0xBË;- (
PWMC_CH
)

3248 
AT91C_PWMC_CPRE_MCKB
 
	`EQU
 (0xCË;- (
PWMC_CH
)

3249 
AT91C_PWMC_CALG
 
	`EQU
 (0x1 << 8Ë;- (
PWMC_CH
Ë
Ch™√l
 
Alignmít


3250 
AT91C_PWMC_CPOL
 
	`EQU
 (0x1 << 9Ë;- (
PWMC_CH
Ë
Ch™√l
 
Pﬁ¨ôy


3251 
AT91C_PWMC_CPD
 
	`EQU
 (0x1 << 10Ë;- (
PWMC_CH
Ë
Ch™√l
 
Upd©e
 
Pîiod


3253 
AT91C_PWMC_CDTY
 
	`EQU
 (0x0 << 0Ë;- (
PWMC_CH
Ë
Ch™√l
 
Duty
 
Cy˛e


3255 
AT91C_PWMC_CPRD
 
	`EQU
 (0x0 << 0Ë;- (
PWMC_CH
Ë
Ch™√l
 
Pîiod


3257 
AT91C_PWMC_CCNT
 
	`EQU
 (0x0 << 0Ë;- (
PWMC_CH
Ë
Ch™√l
 
Cou¡î


3259 
AT91C_PWMC_CUPD
 
	`EQU
 (0x0 << 0Ë;- (
PWMC_CH
Ë
Ch™√l
 
Upd©e


3265 
AT91C_PWMC_DIVA
 
	`EQU
 (0xFF << 0Ë;- (
PWMC
Ë
CLKA
 
divide
 
Á˘‹
.

3266 
AT91C_PWMC_PREA
 
	`EQU
 (0xF << 8Ë;- (
PWMC
Ë
Dividî
 
I≈ut
 
Clock
 
PªsˇÀr
 
A


3267 
AT91C_PWMC_PREA_MCK
 
	`EQU
 (0x0 << 8Ë;- (
PWMC
)

3268 
AT91C_PWMC_DIVB
 
	`EQU
 (0xFF << 16Ë;- (
PWMC
Ë
CLKB
 
divide
 
Á˘‹
.

3269 
AT91C_PWMC_PREB
 
	`EQU
 (0xF << 24Ë;- (
PWMC
Ë
Dividî
 
I≈ut
 
Clock
 
PªsˇÀr
 
B


3270 
AT91C_PWMC_PREB_MCK
 
	`EQU
 (0x0 << 24Ë;- (
PWMC
)

3272 
AT91C_PWMC_CHID0
 
	`EQU
 (0x1 << 0Ë;- (
PWMC
Ë
Ch™√l
 
ID
 0

3273 
AT91C_PWMC_CHID1
 
	`EQU
 (0x1 << 1Ë;- (
PWMC
Ë
Ch™√l
 
ID
 1

3274 
AT91C_PWMC_CHID2
 
	`EQU
 (0x1 << 2Ë;- (
PWMC
Ë
Ch™√l
 
ID
 2

3275 
AT91C_PWMC_CHID3
 
	`EQU
 (0x1 << 3Ë;- (
PWMC
Ë
Ch™√l
 
ID
 3

3287 
AT91C_UDP_FRM_NUM
 
	`EQU
 (0x7FF << 0Ë;- (
UDP
Ë
Føme
 
Numbî
 
as
 
Deföed
 
ö
 
the
 
Packë
 
Fõld
 
F‹m©s


3288 
AT91C_UDP_FRM_ERR
 
	`EQU
 (0x1 << 16Ë;- (
UDP
Ë
Føme
 
Eº‹


3289 
AT91C_UDP_FRM_OK
 
	`EQU
 (0x1 << 17Ë;- (
UDP
Ë
Føme
 
OK


3291 
AT91C_UDP_FADDEN
 
	`EQU
 (0x1 << 0Ë;- (
UDP
Ë
Fun˘i⁄
 
Addªss
 
E«bÀ


3292 
AT91C_UDP_CONFG
 
	`EQU
 (0x1 << 1Ë;- (
UDP
Ë
C⁄figuªd


3293 
AT91C_UDP_ESR
 
	`EQU
 (0x1 << 2Ë;- (
UDP
Ë
E«bÀ
 
Síd
 
Resume


3294 
AT91C_UDP_RSMINPR
 
	`EQU
 (0x1 << 3Ë;- (
UDP
Ë
A
 
Resume
 
Has
 
Bìn
 
Sít
 
to
 
the
 
Ho°


3295 
AT91C_UDP_RMWUPE
 
	`EQU
 (0x1 << 4Ë;- (
UDP
Ë
RemŸe
 
Wake
 
Up
 
E«bÀ


3297 
AT91C_UDP_FADD
 
	`EQU
 (0xFF << 0Ë;- (
UDP
Ë
Fun˘i⁄
 
Addªss
 
VÆue


3298 
AT91C_UDP_FEN
 
	`EQU
 (0x1 << 8Ë;- (
UDP
Ë
Fun˘i⁄
 
E«bÀ


3300 
AT91C_UDP_EPINT0
 
	`EQU
 (0x1 << 0Ë;- (
UDP
Ë
Endpoöt
 0 
I¡îru±


3301 
AT91C_UDP_EPINT1
 
	`EQU
 (0x1 << 1Ë;- (
UDP
Ë
Endpoöt
 0 
I¡îru±


3302 
AT91C_UDP_EPINT2
 
	`EQU
 (0x1 << 2Ë;- (
UDP
Ë
Endpoöt
 2 
I¡îru±


3303 
AT91C_UDP_EPINT3
 
	`EQU
 (0x1 << 3Ë;- (
UDP
Ë
Endpoöt
 3 
I¡îru±


3304 
AT91C_UDP_EPINT4
 
	`EQU
 (0x1 << 4Ë;- (
UDP
Ë
Endpoöt
 4 
I¡îru±


3305 
AT91C_UDP_EPINT5
 
	`EQU
 (0x1 << 5Ë;- (
UDP
Ë
Endpoöt
 5 
I¡îru±


3306 
AT91C_UDP_RXSUSP
 
	`EQU
 (0x1 << 8Ë;- (
UDP
Ë
USB
 
Su•íd
 
I¡îru±


3307 
AT91C_UDP_RXRSM
 
	`EQU
 (0x1 << 9Ë;- (
UDP
Ë
USB
 
Resume
 
I¡îru±


3308 
AT91C_UDP_EXTRSM
 
	`EQU
 (0x1 << 10Ë;- (
UDP
Ë
USB
 
Exã∫Æ
 
Resume
 
I¡îru±


3309 
AT91C_UDP_SOFINT
 
	`EQU
 (0x1 << 11Ë;- (
UDP
Ë
USB
 
Sèπ
 
Of
 
‰ame
 
I¡îru±


3310 
AT91C_UDP_WAKEUP
 
	`EQU
 (0x1 << 13Ë;- (
UDP
Ë
USB
 
Resume
 
I¡îru±


3314 
AT91C_UDP_ENDBUSRES
 
	`EQU
 (0x1 << 12Ë;- (
UDP
Ë
USB
 
End
 
Of
 
Bus
 
Re£t
 
I¡îru±


3317 
AT91C_UDP_EP0
 
	`EQU
 (0x1 << 0Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 0

3318 
AT91C_UDP_EP1
 
	`EQU
 (0x1 << 1Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 1

3319 
AT91C_UDP_EP2
 
	`EQU
 (0x1 << 2Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 2

3320 
AT91C_UDP_EP3
 
	`EQU
 (0x1 << 3Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 3

3321 
AT91C_UDP_EP4
 
	`EQU
 (0x1 << 4Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 4

3322 
AT91C_UDP_EP5
 
	`EQU
 (0x1 << 5Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 5

3324 
AT91C_UDP_TXCOMP
 
	`EQU
 (0x1 << 0Ë;- (
UDP
Ë
Gíî©es
 
™
 
IN
 
∑ckë
 
wôh
 
d©a
 
¥eviou¶y
 
wrôãn
 
ö
 
the
 
DPR


3325 
AT91C_UDP_RX_DATA_BK0
 
	`EQU
 (0x1 << 1Ë;- (
UDP
Ë
Re˚ive
 
D©a
 
B™k
 0

3326 
AT91C_UDP_RXSETUP
 
	`EQU
 (0x1 << 2Ë;- (
UDP
Ë
Síds
 
STALL
 
to
 
the
 
	$Ho°
 (
C⁄åﬁ
 
ídpoöts
)

3327 
AT91C_UDP_ISOERROR
 
	`EQU
 (0x1 << 3Ë;- (
UDP
Ë
Isochr⁄ous
 
	$îr‹
 (
Isochr⁄ous
 
ídpoöts
)

3328 
AT91C_UDP_TXPKTRDY
 
	`EQU
 (0x1 << 4Ë;- (
UDP
Ë
Tønsmô
 
Packë
 
Ródy


3329 
AT91C_UDP_FORCESTALL
 
	`EQU
 (0x1 << 5Ë;- (
UDP
Ë
F‹˚
 
	`SèŒ
 (
u£d
 
by
 
C⁄åﬁ
, 
Bulk
 
™d
 
Isochr⁄ous
 
ídpoöts
).

3330 
AT91C_UDP_RX_DATA_BK1
 
	`EQU
 (0x1 << 6Ë;- (
UDP
Ë
Re˚ive
 
D©a
 
B™k
 1 (
⁄ly
 
u£d
 
by
 
ídpoöts
 
wôh
 
pög
-
p⁄g
 
©åibuãs
).

3331 
AT91C_UDP_DIR
 
	`EQU
 (0x1 << 7Ë;- (
UDP
Ë
Tøns„r
 
Dúe˘i⁄


3332 
AT91C_UDP_EPTYPE
 
	`EQU
 (0x7 << 8Ë;- (
UDP
Ë
Endpoöt
 
ty≥


3333 
AT91C_UDP_EPTYPE_CTRL
 
	`EQU
 (0x0 << 8Ë;- (
UDP
Ë
C⁄åﬁ


3334 
AT91C_UDP_EPTYPE_ISO_OUT
 
	`EQU
 (0x1 << 8Ë;- (
UDP
Ë
Isochr⁄ous
 
OUT


3335 
AT91C_UDP_EPTYPE_BULK_OUT
 
	`EQU
 (0x2 << 8Ë;- (
UDP
Ë
Bulk
 
OUT


3336 
AT91C_UDP_EPTYPE_INT_OUT
 
	`EQU
 (0x3 << 8Ë;- (
UDP
Ë
I¡îru±
 
OUT


3337 
AT91C_UDP_EPTYPE_ISO_IN
 
	`EQU
 (0x5 << 8Ë;- (
UDP
Ë
Isochr⁄ous
 
IN


3338 
AT91C_UDP_EPTYPE_BULK_IN
 
	`EQU
 (0x6 << 8Ë;- (
UDP
Ë
Bulk
 
IN


3339 
AT91C_UDP_EPTYPE_INT_IN
 
	`EQU
 (0x7 << 8Ë;- (
UDP
Ë
I¡îru±
 
IN


3340 
AT91C_UDP_DTGLE
 
	`EQU
 (0x1 << 11Ë;- (
UDP
Ë
D©a
 
ToggÀ


3341 
AT91C_UDP_EPEDS
 
	`EQU
 (0x1 << 15Ë;- (
UDP
Ë
Endpoöt
 
E«bÀ
 
DißbÀ


3342 
AT91C_UDP_RXBYTECNT
 
	`EQU
 (0x7FF << 16Ë;- (
UDP
Ë
Numbî
 
Of
 
Byãs
 
AvaûabÀ
 
ö
 
the
 
FIFO


3344 
AT91C_UDP_TXVDIS
 
	`EQU
 (0x1 << 8Ë;- (
UDP
)

3345 
AT91C_UDP_PUON
 
	`EQU
 (0x1 << 9Ë;- (
UDP
Ë
PuŒ
-
up
 
ON


3351 
AT91C_TC_CLKEN
 
	`EQU
 (0x1 << 0Ë;- (
TC
Ë
Cou¡î
 
Clock
 
E«bÀ
 
Comm™d


3352 
AT91C_TC_CLKDIS
 
	`EQU
 (0x1 << 1Ë;- (
TC
Ë
Cou¡î
 
Clock
 
DißbÀ
 
Comm™d


3353 
AT91C_TC_SWTRG
 
	`EQU
 (0x1 << 2Ë;- (
TC
Ë
So·w¨e
 
Triggî
 
Comm™d


3355 
AT91C_TC_CLKS
 
	`EQU
 (0x7 << 0Ë;- (
TC
Ë
Clock
 
Sñe˘i⁄


3356 
AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 
	`EQU
 (0x0Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
TIMER_DIV1_CLOCK


3357 
AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 
	`EQU
 (0x1Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
TIMER_DIV2_CLOCK


3358 
AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 
	`EQU
 (0x2Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
TIMER_DIV3_CLOCK


3359 
AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 
	`EQU
 (0x3Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
TIMER_DIV4_CLOCK


3360 
AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 
	`EQU
 (0x4Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
TIMER_DIV5_CLOCK


3361 
AT91C_TC_CLKS_XC0
 
	`EQU
 (0x5Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
XC0


3362 
AT91C_TC_CLKS_XC1
 
	`EQU
 (0x6Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
XC1


3363 
AT91C_TC_CLKS_XC2
 
	`EQU
 (0x7Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
XC2


3364 
AT91C_TC_CLKI
 
	`EQU
 (0x1 << 3Ë;- (
TC
Ë
Clock
 
Invît


3365 
AT91C_TC_BURST
 
	`EQU
 (0x3 << 4Ë;- (
TC
Ë
Bur°
 
Sig«l
 
Sñe˘i⁄


3366 
AT91C_TC_BURST_NONE
 
	`EQU
 (0x0 << 4Ë;- (
TC
Ë
The
 
˛ock
 
is
 
nŸ
 
g©ed
 
by
 
™
 
exã∫Æ
 
sig«l


3367 
AT91C_TC_BURST_XC0
 
	`EQU
 (0x1 << 4Ë;- (
TC
Ë
XC0
 
is
 
ANDed
 
wôh
 
the
 
£À˘ed
 
˛ock


3368 
AT91C_TC_BURST_XC1
 
	`EQU
 (0x2 << 4Ë;- (
TC
Ë
XC1
 
is
 
ANDed
 
wôh
 
the
 
£À˘ed
 
˛ock


3369 
AT91C_TC_BURST_XC2
 
	`EQU
 (0x3 << 4Ë;- (
TC
Ë
XC2
 
is
 
ANDed
 
wôh
 
the
 
£À˘ed
 
˛ock


3370 
AT91C_TC_CPCSTOP
 
	`EQU
 (0x1 << 6Ë;- (
TC
Ë
Cou¡î
 
Clock
 
St›≥d
 
wôh
 
RC
 
Com∑ª


3371 
AT91C_TC_LDBSTOP
 
	`EQU
 (0x1 << 6Ë;- (
TC
Ë
Cou¡î
 
Clock
 
St›≥d
 
wôh
 
RB
 
Lﬂdög


3372 
AT91C_TC_CPCDIS
 
	`EQU
 (0x1 << 7Ë;- (
TC
Ë
Cou¡î
 
Clock
 
DißbÀ
 
wôh
 
RC
 
Com∑ª


3373 
AT91C_TC_LDBDIS
 
	`EQU
 (0x1 << 7Ë;- (
TC
Ë
Cou¡î
 
Clock
 
DißbÀd
 
wôh
 
RB
 
Lﬂdög


3374 
AT91C_TC_ETRGEDG
 
	`EQU
 (0x3 << 8Ë;- (
TC
Ë
Exã∫Æ
 
Triggî
 
Edge
 
Sñe˘i⁄


3375 
AT91C_TC_ETRGEDG_NONE
 
	`EQU
 (0x0 << 8Ë;- (
TC
Ë
Edge
: 
N⁄e


3376 
AT91C_TC_ETRGEDG_RISING
 
	`EQU
 (0x1 << 8Ë;- (
TC
Ë
Edge
: 
risög
 
edge


3377 
AT91C_TC_ETRGEDG_FALLING
 
	`EQU
 (0x2 << 8Ë;- (
TC
Ë
Edge
: 
ÁŒög
 
edge


3378 
AT91C_TC_ETRGEDG_BOTH
 
	`EQU
 (0x3 << 8Ë;- (
TC
Ë
Edge
: 
óch
 
edge


3379 
AT91C_TC_EEVTEDG
 
	`EQU
 (0x3 << 8Ë;- (
TC
Ë
Exã∫Æ
 
Evít
 
Edge
 
Sñe˘i⁄


3380 
AT91C_TC_EEVTEDG_NONE
 
	`EQU
 (0x0 << 8Ë;- (
TC
Ë
Edge
: 
N⁄e


3381 
AT91C_TC_EEVTEDG_RISING
 
	`EQU
 (0x1 << 8Ë;- (
TC
Ë
Edge
: 
risög
 
edge


3382 
AT91C_TC_EEVTEDG_FALLING
 
	`EQU
 (0x2 << 8Ë;- (
TC
Ë
Edge
: 
ÁŒög
 
edge


3383 
AT91C_TC_EEVTEDG_BOTH
 
	`EQU
 (0x3 << 8Ë;- (
TC
Ë
Edge
: 
óch
 
edge


3384 
AT91C_TC_EEVT
 
	`EQU
 (0x3 << 10Ë;- (
TC
Ë
Exã∫Æ
 
Evít
 
Sñe˘i⁄


3385 
AT91C_TC_EEVT_TIOB
 
	`EQU
 (0x0 << 10Ë;- (
TC
Ë
Sig«l
 
£À˘ed
 
as
 
exã∫Æ
 
evít
: 
TIOB
 TIOB 
dúe˘i⁄
: 
öput


3386 
AT91C_TC_EEVT_XC0
 
	`EQU
 (0x1 << 10Ë;- (
TC
Ë
Sig«l
 
£À˘ed
 
as
 
exã∫Æ
 
evít
: 
XC0
 
TIOB
 
dúe˘i⁄
: 
ouçut


3387 
AT91C_TC_EEVT_XC1
 
	`EQU
 (0x2 << 10Ë;- (
TC
Ë
Sig«l
 
£À˘ed
 
as
 
exã∫Æ
 
evít
: 
XC1
 
TIOB
 
dúe˘i⁄
: 
ouçut


3388 
AT91C_TC_EEVT_XC2
 
	`EQU
 (0x3 << 10Ë;- (
TC
Ë
Sig«l
 
£À˘ed
 
as
 
exã∫Æ
 
evít
: 
XC2
 
TIOB
 
dúe˘i⁄
: 
ouçut


3389 
AT91C_TC_ABETRG
 
	`EQU
 (0x1 << 10Ë;- (
TC
Ë
TIOA
 
‹
 
TIOB
 
Exã∫Æ
 
Triggî
 
Sñe˘i⁄


3390 
AT91C_TC_ENETRG
 
	`EQU
 (0x1 << 12Ë;- (
TC
Ë
Exã∫Æ
 
Evít
 
Triggî
 
íabÀ


3391 
AT91C_TC_WAVESEL
 
	`EQU
 (0x3 << 13Ë;- (
TC
Ë
Wavef‹m
 
Sñe˘i⁄


3392 
AT91C_TC_WAVESEL_UP
 
	`EQU
 (0x0 << 13Ë;- (
TC
Ë
UP
 
mode
 
wôhout
 
©om©ic
 
åiggî
 
⁄
 
RC
 
Com∑ª


3393 
AT91C_TC_WAVESEL_UPDOWN
 
	`EQU
 (0x1 << 13Ë;- (
TC
Ë
UPDOWN
 
mode
 
wôhout
 
autom©ic
 
åiggî
 
⁄
 
RC
 
Com∑ª


3394 
AT91C_TC_WAVESEL_UP_AUTO
 
	`EQU
 (0x2 << 13Ë;- (
TC
Ë
UP
 
mode
 
wôh
 
autom©ic
 
åiggî
 
⁄
 
RC
 
Com∑ª


3395 
AT91C_TC_WAVESEL_UPDOWN_AUTO
 
	`EQU
 (0x3 << 13Ë;- (
TC
Ë
UPDOWN
 
mode
 
wôh
 
autom©ic
 
åiggî
 
⁄
 
RC
 
Com∑ª


3396 
AT91C_TC_CPCTRG
 
	`EQU
 (0x1 << 14Ë;- (
TC
Ë
RC
 
Com∑ª
 
Triggî
 
E«bÀ


3397 
AT91C_TC_WAVE
 
	`EQU
 (0x1 << 15Ë;- (
TC
)

3398 
AT91C_TC_ACPA
 
	`EQU
 (0x3 << 16Ë;- (
TC
Ë
RA
 
Com∑ª
 
Ef„˘
 
⁄
 
TIOA


3399 
AT91C_TC_ACPA_NONE
 
	`EQU
 (0x0 << 16Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3400 
AT91C_TC_ACPA_SET
 
	`EQU
 (0x1 << 16Ë;- (
TC
Ë
Ef„˘
: 
£t


3401 
AT91C_TC_ACPA_CLEAR
 
	`EQU
 (0x2 << 16Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3402 
AT91C_TC_ACPA_TOGGLE
 
	`EQU
 (0x3 << 16Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3403 
AT91C_TC_LDRA
 
	`EQU
 (0x3 << 16Ë;- (
TC
Ë
RA
 
Lﬂdög
 
Sñe˘i⁄


3404 
AT91C_TC_LDRA_NONE
 
	`EQU
 (0x0 << 16Ë;- (
TC
Ë
Edge
: 
N⁄e


3405 
AT91C_TC_LDRA_RISING
 
	`EQU
 (0x1 << 16Ë;- (
TC
Ë
Edge
: 
risög
 
edge
 
of
 
TIOA


3406 
AT91C_TC_LDRA_FALLING
 
	`EQU
 (0x2 << 16Ë;- (
TC
Ë
Edge
: 
ÁŒög
 
edge
 
of
 
TIOA


3407 
AT91C_TC_LDRA_BOTH
 
	`EQU
 (0x3 << 16Ë;- (
TC
Ë
Edge
: 
óch
 
edge
 
of
 
TIOA


3408 
AT91C_TC_ACPC
 
	`EQU
 (0x3 << 18Ë;- (
TC
Ë
RC
 
Com∑ª
 
Ef„˘
 
⁄
 
TIOA


3409 
AT91C_TC_ACPC_NONE
 
	`EQU
 (0x0 << 18Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3410 
AT91C_TC_ACPC_SET
 
	`EQU
 (0x1 << 18Ë;- (
TC
Ë
Ef„˘
: 
£t


3411 
AT91C_TC_ACPC_CLEAR
 
	`EQU
 (0x2 << 18Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3412 
AT91C_TC_ACPC_TOGGLE
 
	`EQU
 (0x3 << 18Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3413 
AT91C_TC_LDRB
 
	`EQU
 (0x3 << 18Ë;- (
TC
Ë
RB
 
Lﬂdög
 
Sñe˘i⁄


3414 
AT91C_TC_LDRB_NONE
 
	`EQU
 (0x0 << 18Ë;- (
TC
Ë
Edge
: 
N⁄e


3415 
AT91C_TC_LDRB_RISING
 
	`EQU
 (0x1 << 18Ë;- (
TC
Ë
Edge
: 
risög
 
edge
 
of
 
TIOA


3416 
AT91C_TC_LDRB_FALLING
 
	`EQU
 (0x2 << 18Ë;- (
TC
Ë
Edge
: 
ÁŒög
 
edge
 
of
 
TIOA


3417 
AT91C_TC_LDRB_BOTH
 
	`EQU
 (0x3 << 18Ë;- (
TC
Ë
Edge
: 
óch
 
edge
 
of
 
TIOA


3418 
AT91C_TC_AEEVT
 
	`EQU
 (0x3 << 20Ë;- (
TC
Ë
Exã∫Æ
 
Evít
 
Ef„˘
 
⁄
 
TIOA


3419 
AT91C_TC_AEEVT_NONE
 
	`EQU
 (0x0 << 20Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3420 
AT91C_TC_AEEVT_SET
 
	`EQU
 (0x1 << 20Ë;- (
TC
Ë
Ef„˘
: 
£t


3421 
AT91C_TC_AEEVT_CLEAR
 
	`EQU
 (0x2 << 20Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3422 
AT91C_TC_AEEVT_TOGGLE
 
	`EQU
 (0x3 << 20Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3423 
AT91C_TC_ASWTRG
 
	`EQU
 (0x3 << 22Ë;- (
TC
Ë
So·w¨e
 
Triggî
 
Ef„˘
 
⁄
 
TIOA


3424 
AT91C_TC_ASWTRG_NONE
 
	`EQU
 (0x0 << 22Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3425 
AT91C_TC_ASWTRG_SET
 
	`EQU
 (0x1 << 22Ë;- (
TC
Ë
Ef„˘
: 
£t


3426 
AT91C_TC_ASWTRG_CLEAR
 
	`EQU
 (0x2 << 22Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3427 
AT91C_TC_ASWTRG_TOGGLE
 
	`EQU
 (0x3 << 22Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3428 
AT91C_TC_BCPB
 
	`EQU
 (0x3 << 24Ë;- (
TC
Ë
RB
 
Com∑ª
 
Ef„˘
 
⁄
 
TIOB


3429 
AT91C_TC_BCPB_NONE
 
	`EQU
 (0x0 << 24Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3430 
AT91C_TC_BCPB_SET
 
	`EQU
 (0x1 << 24Ë;- (
TC
Ë
Ef„˘
: 
£t


3431 
AT91C_TC_BCPB_CLEAR
 
	`EQU
 (0x2 << 24Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3432 
AT91C_TC_BCPB_TOGGLE
 
	`EQU
 (0x3 << 24Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3433 
AT91C_TC_BCPC
 
	`EQU
 (0x3 << 26Ë;- (
TC
Ë
RC
 
Com∑ª
 
Ef„˘
 
⁄
 
TIOB


3434 
AT91C_TC_BCPC_NONE
 
	`EQU
 (0x0 << 26Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3435 
AT91C_TC_BCPC_SET
 
	`EQU
 (0x1 << 26Ë;- (
TC
Ë
Ef„˘
: 
£t


3436 
AT91C_TC_BCPC_CLEAR
 
	`EQU
 (0x2 << 26Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3437 
AT91C_TC_BCPC_TOGGLE
 
	`EQU
 (0x3 << 26Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3438 
AT91C_TC_BEEVT
 
	`EQU
 (0x3 << 28Ë;- (
TC
Ë
Exã∫Æ
 
Evít
 
Ef„˘
 
⁄
 
TIOB


3439 
AT91C_TC_BEEVT_NONE
 
	`EQU
 (0x0 << 28Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3440 
AT91C_TC_BEEVT_SET
 
	`EQU
 (0x1 << 28Ë;- (
TC
Ë
Ef„˘
: 
£t


3441 
AT91C_TC_BEEVT_CLEAR
 
	`EQU
 (0x2 << 28Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3442 
AT91C_TC_BEEVT_TOGGLE
 
	`EQU
 (0x3 << 28Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3443 
AT91C_TC_BSWTRG
 
	`EQU
 (0x3 << 30Ë;- (
TC
Ë
So·w¨e
 
Triggî
 
Ef„˘
 
⁄
 
TIOB


3444 
AT91C_TC_BSWTRG_NONE
 
	`EQU
 (0x0 << 30Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3445 
AT91C_TC_BSWTRG_SET
 
	`EQU
 (0x1 << 30Ë;- (
TC
Ë
Ef„˘
: 
£t


3446 
AT91C_TC_BSWTRG_CLEAR
 
	`EQU
 (0x2 << 30Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3447 
AT91C_TC_BSWTRG_TOGGLE
 
	`EQU
 (0x3 << 30Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3449 
AT91C_TC_COVFS
 
	`EQU
 (0x1 << 0Ë;- (
TC
Ë
Cou¡î
 
OvîÊow


3450 
AT91C_TC_LOVRS
 
	`EQU
 (0x1 << 1Ë;- (
TC
Ë
Lﬂd
 
Ovîrun


3451 
AT91C_TC_CPAS
 
	`EQU
 (0x1 << 2Ë;- (
TC
Ë
RA
 
Com∑ª


3452 
AT91C_TC_CPBS
 
	`EQU
 (0x1 << 3Ë;- (
TC
Ë
RB
 
Com∑ª


3453 
AT91C_TC_CPCS
 
	`EQU
 (0x1 << 4Ë;- (
TC
Ë
RC
 
Com∑ª


3454 
AT91C_TC_LDRAS
 
	`EQU
 (0x1 << 5Ë;- (
TC
Ë
RA
 
Lﬂdög


3455 
AT91C_TC_LDRBS
 
	`EQU
 (0x1 << 6Ë;- (
TC
Ë
RB
 
Lﬂdög


3456 
AT91C_TC_ETRGS
 
	`EQU
 (0x1 << 7Ë;- (
TC
Ë
Exã∫Æ
 
Triggî


3457 
AT91C_TC_CLKSTA
 
	`EQU
 (0x1 << 16Ë;- (
TC
Ë
Clock
 
E«blög


3458 
AT91C_TC_MTIOA
 
	`EQU
 (0x1 << 17Ë;- (
TC
Ë
TIOA
 
Múr‹


3459 
AT91C_TC_MTIOB
 
	`EQU
 (0x1 << 18Ë;- (
TC
Ë
TIOA
 
Múr‹


3468 
AT91C_TCB_SYNC
 
	`EQU
 (0x1 << 0Ë;- (
TCB
Ë
Synchro
 
Comm™d


3470 
AT91C_TCB_TC0XC0S
 
	`EQU
 (0x3 << 0Ë;- (
TCB
Ë
Exã∫Æ
 
Clock
 
Sig«l
 0 
Sñe˘i⁄


3471 
AT91C_TCB_TC0XC0S_TCLK0
 
	`EQU
 (0x0Ë;- (
TCB
Ë
TCLK0
 
c⁄√˘ed
 
to
 
XC0


3472 
AT91C_TCB_TC0XC0S_NONE
 
	`EQU
 (0x1Ë;- (
TCB
Ë
N⁄e
 
sig«l
 
c⁄√˘ed
 
to
 
XC0


3473 
AT91C_TCB_TC0XC0S_TIOA1
 
	`EQU
 (0x2Ë;- (
TCB
Ë
TIOA1
 
c⁄√˘ed
 
to
 
XC0


3474 
AT91C_TCB_TC0XC0S_TIOA2
 
	`EQU
 (0x3Ë;- (
TCB
Ë
TIOA2
 
c⁄√˘ed
 
to
 
XC0


3475 
AT91C_TCB_TC1XC1S
 
	`EQU
 (0x3 << 2Ë;- (
TCB
Ë
Exã∫Æ
 
Clock
 
Sig«l
 1 
Sñe˘i⁄


3476 
AT91C_TCB_TC1XC1S_TCLK1
 
	`EQU
 (0x0 << 2Ë;- (
TCB
Ë
TCLK1
 
c⁄√˘ed
 
to
 
XC1


3477 
AT91C_TCB_TC1XC1S_NONE
 
	`EQU
 (0x1 << 2Ë;- (
TCB
Ë
N⁄e
 
sig«l
 
c⁄√˘ed
 
to
 
XC1


3478 
AT91C_TCB_TC1XC1S_TIOA0
 
	`EQU
 (0x2 << 2Ë;- (
TCB
Ë
TIOA0
 
c⁄√˘ed
 
to
 
XC1


3479 
AT91C_TCB_TC1XC1S_TIOA2
 
	`EQU
 (0x3 << 2Ë;- (
TCB
Ë
TIOA2
 
c⁄√˘ed
 
to
 
XC1


3480 
AT91C_TCB_TC2XC2S
 
	`EQU
 (0x3 << 4Ë;- (
TCB
Ë
Exã∫Æ
 
Clock
 
Sig«l
 2 
Sñe˘i⁄


3481 
AT91C_TCB_TC2XC2S_TCLK2
 
	`EQU
 (0x0 << 4Ë;- (
TCB
Ë
TCLK2
 
c⁄√˘ed
 
to
 
XC2


3482 
AT91C_TCB_TC2XC2S_NONE
 
	`EQU
 (0x1 << 4Ë;- (
TCB
Ë
N⁄e
 
sig«l
 
c⁄√˘ed
 
to
 
XC2


3483 
AT91C_TCB_TC2XC2S_TIOA0
 
	`EQU
 (0x2 << 4Ë;- (
TCB
Ë
TIOA0
 
c⁄√˘ed
 
to
 
XC2


3484 
AT91C_TCB_TC2XC2S_TIOA1
 
	`EQU
 (0x3 << 4Ë;- (
TCB
Ë
TIOA2
 
c⁄√˘ed
 
to
 
XC2


3490 
AT91C_CAN_MTIMEMARK
 
	`EQU
 (0xFFFF << 0Ë;- (
CAN_MB
Ë
Maûbox
 
Timem¨k


3491 
AT91C_CAN_PRIOR
 
	`EQU
 (0xF << 16Ë;- (
CAN_MB
Ë
Maûbox
 
Pri‹ôy


3492 
AT91C_CAN_MOT
 
	`EQU
 (0x7 << 24Ë;- (
CAN_MB
Ë
Maûbox
 
Obje˘
 
Ty≥


3493 
AT91C_CAN_MOT_DIS
 
	`EQU
 (0x0 << 24Ë;- (
CAN_MB
)

3494 
AT91C_CAN_MOT_RX
 
	`EQU
 (0x1 << 24Ë;- (
CAN_MB
)

3495 
AT91C_CAN_MOT_RXOVERWRITE
 
	`EQU
 (0x2 << 24Ë;- (
CAN_MB
)

3496 
AT91C_CAN_MOT_TX
 
	`EQU
 (0x3 << 24Ë;- (
CAN_MB
)

3497 
AT91C_CAN_MOT_CONSUMER
 
	`EQU
 (0x4 << 24Ë;- (
CAN_MB
)

3498 
AT91C_CAN_MOT_PRODUCER
 
	`EQU
 (0x5 << 24Ë;- (
CAN_MB
)

3500 
AT91C_CAN_MIDvB
 
	`EQU
 (0x3FFFF << 0Ë;- (
CAN_MB
Ë
Com∂emíèry
 
bôs
 
idítifõr
 
ö
 
exãnded
 
mode


3501 
AT91C_CAN_MIDvA
 
	`EQU
 (0x7FF << 18Ë;- (
CAN_MB
Ë
Idítifõr
 
°™d¨d
 
‰ame
 
mode


3502 
AT91C_CAN_MIDE
 
	`EQU
 (0x1 << 29Ë;- (
CAN_MB
Ë
Idítifõr
 
Vîsi⁄


3506 
AT91C_CAN_MTIMESTAMP
 
	`EQU
 (0xFFFF << 0Ë;- (
CAN_MB
Ë
Timî
 
VÆue


3507 
AT91C_CAN_MDLC
 
	`EQU
 (0xF << 16Ë;- (
CAN_MB
Ë
Maûbox
 
D©a
 
Lígth
 
Code


3508 
AT91C_CAN_MRTR
 
	`EQU
 (0x1 << 20Ë;- (
CAN_MB
Ë
Maûbox
 
RemŸe
 
Tønsmissi⁄
 
Reque°


3509 
AT91C_CAN_MABT
 
	`EQU
 (0x1 << 22Ë;- (
CAN_MB
Ë
Maûbox
 
Mesßge
 
Ab‹t


3510 
AT91C_CAN_MRDY
 
	`EQU
 (0x1 << 23Ë;- (
CAN_MB
Ë
Maûbox
 
Ródy


3511 
AT91C_CAN_MMI
 
	`EQU
 (0x1 << 24Ë;- (
CAN_MB
Ë
Maûbox
 
Mesßge
 
Ign‹ed


3515 
AT91C_CAN_MACR
 
	`EQU
 (0x1 << 22Ë;- (
CAN_MB
Ë
Ab‹t
 
Reque°
 
Maûbox


3516 
AT91C_CAN_MTCR
 
	`EQU
 (0x1 << 23Ë;- (
CAN_MB
Ë
Maûbox
 
Tøns„r
 
Comm™d


3522 
AT91C_CAN_CANEN
 
	`EQU
 (0x1 << 0Ë;- (
CAN
ËCAN 
C⁄åﬁÀr
 
E«bÀ


3523 
AT91C_CAN_LPM
 
	`EQU
 (0x1 << 1Ë;- (
CAN
Ë
DißbÀ
/
E«bÀ
 
Low
 
Powî
 
Mode


3524 
AT91C_CAN_ABM
 
	`EQU
 (0x1 << 2Ë;- (
CAN
Ë
DißbÀ
/
E«bÀ
 
Autobaud
/
Li°í
 
Mode


3525 
AT91C_CAN_OVL
 
	`EQU
 (0x1 << 3Ë;- (
CAN
Ë
DißbÀ
/
E«bÀ
 
Ovîlﬂd
 
Føme


3526 
AT91C_CAN_TEOF
 
	`EQU
 (0x1 << 4Ë;- (
CAN
Ë
Time
 
Sèmp
 
mesßges
 
©
 
óch
 
íd
 
of
 
Føme


3527 
AT91C_CAN_TTM
 
	`EQU
 (0x1 << 5Ë;- (
CAN
Ë
DißbÀ
/
E«bÀ
 
Time
 
Triggî
 
Mode


3528 
AT91C_CAN_TIMFRZ
 
	`EQU
 (0x1 << 6Ë;- (
CAN
Ë
E«bÀ
 
Timî
 
Fªeze


3529 
AT91C_CAN_DRPT
 
	`EQU
 (0x1 << 7Ë;- (
CAN
Ë
DißbÀ
 
Rïót


3531 
AT91C_CAN_MB0
 
	`EQU
 (0x1 << 0Ë;- (
CAN
Ë
Maûbox
 0 
Fœg


3532 
AT91C_CAN_MB1
 
	`EQU
 (0x1 << 1Ë;- (
CAN
Ë
Maûbox
 1 
Fœg


3533 
AT91C_CAN_MB2
 
	`EQU
 (0x1 << 2Ë;- (
CAN
Ë
Maûbox
 2 
Fœg


3534 
AT91C_CAN_MB3
 
	`EQU
 (0x1 << 3Ë;- (
CAN
Ë
Maûbox
 3 
Fœg


3535 
AT91C_CAN_MB4
 
	`EQU
 (0x1 << 4Ë;- (
CAN
Ë
Maûbox
 4 
Fœg


3536 
AT91C_CAN_MB5
 
	`EQU
 (0x1 << 5Ë;- (
CAN
Ë
Maûbox
 5 
Fœg


3537 
AT91C_CAN_MB6
 
	`EQU
 (0x1 << 6Ë;- (
CAN
Ë
Maûbox
 6 
Fœg


3538 
AT91C_CAN_MB7
 
	`EQU
 (0x1 << 7Ë;- (
CAN
Ë
Maûbox
 7 
Fœg


3539 
AT91C_CAN_MB8
 
	`EQU
 (0x1 << 8Ë;- (
CAN
Ë
Maûbox
 8 
Fœg


3540 
AT91C_CAN_MB9
 
	`EQU
 (0x1 << 9Ë;- (
CAN
Ë
Maûbox
 9 
Fœg


3541 
AT91C_CAN_MB10
 
	`EQU
 (0x1 << 10Ë;- (
CAN
Ë
Maûbox
 10 
Fœg


3542 
AT91C_CAN_MB11
 
	`EQU
 (0x1 << 11Ë;- (
CAN
Ë
Maûbox
 11 
Fœg


3543 
AT91C_CAN_MB12
 
	`EQU
 (0x1 << 12Ë;- (
CAN
Ë
Maûbox
 12 
Fœg


3544 
AT91C_CAN_MB13
 
	`EQU
 (0x1 << 13Ë;- (
CAN
Ë
Maûbox
 13 
Fœg


3545 
AT91C_CAN_MB14
 
	`EQU
 (0x1 << 14Ë;- (
CAN
Ë
Maûbox
 14 
Fœg


3546 
AT91C_CAN_MB15
 
	`EQU
 (0x1 << 15Ë;- (
CAN
Ë
Maûbox
 15 
Fœg


3547 
AT91C_CAN_ERRA
 
	`EQU
 (0x1 << 16Ë;- (
CAN
Ë
Eº‹
 
A˘ive
 
Mode
 
Fœg


3548 
AT91C_CAN_WARN
 
	`EQU
 (0x1 << 17Ë;- (
CAN
Ë
W¨nög
 
Limô
 
Fœg


3549 
AT91C_CAN_ERRP
 
	`EQU
 (0x1 << 18Ë;- (
CAN
Ë
Eº‹
 
Passive
 
Mode
 
Fœg


3550 
AT91C_CAN_BOFF
 
	`EQU
 (0x1 << 19Ë;- (
CAN
Ë
Bus
 
Off
 
Mode
 
Fœg


3551 
AT91C_CAN_SLEEP
 
	`EQU
 (0x1 << 20Ë;- (
CAN
Ë
SÀï
 
Fœg


3552 
AT91C_CAN_WAKEUP
 
	`EQU
 (0x1 << 21Ë;- (
CAN
Ë
Wakeup
 
Fœg


3553 
AT91C_CAN_TOVF
 
	`EQU
 (0x1 << 22Ë;- (
CAN
Ë
Timî
 
OvîÊow
 
Fœg


3554 
AT91C_CAN_TSTP
 
	`EQU
 (0x1 << 23Ë;- (
CAN
Ë
Time°amp
 
Fœg


3555 
AT91C_CAN_CERR
 
	`EQU
 (0x1 << 24Ë;- (
CAN
Ë
CRC
 
Eº‹


3556 
AT91C_CAN_SERR
 
	`EQU
 (0x1 << 25Ë;- (
CAN
Ë
Stuffög
 
Eº‹


3557 
AT91C_CAN_AERR
 
	`EQU
 (0x1 << 26Ë;- (
CAN
Ë
AcknowÀdgmít
 
Eº‹


3558 
AT91C_CAN_FERR
 
	`EQU
 (0x1 << 27Ë;- (
CAN
Ë
F‹m
 
Eº‹


3559 
AT91C_CAN_BERR
 
	`EQU
 (0x1 << 28Ë;- (
CAN
Ë
Bô
 
Eº‹


3563 
AT91C_CAN_RBSY
 
	`EQU
 (0x1 << 29Ë;- (
CAN
Ë
Re˚ivî
 
Busy


3564 
AT91C_CAN_TBSY
 
	`EQU
 (0x1 << 30Ë;- (
CAN
Ë
Tønsmôãr
 
Busy


3565 
AT91C_CAN_OVLY
 
	`EQU
 (0x1 << 31Ë;- (
CAN
Ë
Ovîlﬂd
 
Busy


3567 
AT91C_CAN_PHASE2
 
	`EQU
 (0x7 << 0Ë;- (
CAN
Ë
Pha£
 2 
£gmít


3568 
AT91C_CAN_PHASE1
 
	`EQU
 (0x7 << 4Ë;- (
CAN
Ë
Pha£
 1 
£gmít


3569 
AT91C_CAN_PROPAG
 
	`EQU
 (0x7 << 8Ë;- (
CAN
Ë
Progømm©i⁄
 
time
 
£gmít


3570 
AT91C_CAN_SYNC
 
	`EQU
 (0x3 << 12Ë;- (
CAN
Ë
Re
-
synchr⁄iz©i⁄
 
jump
 
width
 
£gmít


3571 
AT91C_CAN_BRP
 
	`EQU
 (0x7F << 16Ë;- (
CAN
Ë
Baudøã
 
PªsˇÀr


3572 
AT91C_CAN_SMP
 
	`EQU
 (0x1 << 24Ë;- (
CAN
Ë
Sam∂ög
 
mode


3574 
AT91C_CAN_TIMER
 
	`EQU
 (0xFFFF << 0Ë;- (
CAN
Ë
Timî
 
fõld


3577 
AT91C_CAN_REC
 
	`EQU
 (0xFF << 0Ë;- (
CAN
Ë
Re˚ive
 
Eº‹
 
Cou¡î


3578 
AT91C_CAN_TEC
 
	`EQU
 (0xFF << 16Ë;- (
CAN
Ë
Tønsmô
 
Eº‹
 
Cou¡î


3580 
AT91C_CAN_TIMRST
 
	`EQU
 (0x1 << 31Ë;- (
CAN
Ë
Timî
 
Re£t
 
Fõld


3587 
AT91C_EMAC_LB
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
Ë
Lo›back
. 
O±i⁄Æ
. 
Whí
 
£t
, 
lo›back
 
sig«l
 
is
 
©
 
high
 
Àvñ
.

3588 
AT91C_EMAC_LLB
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
Ë
Lo›back
 
loˇl
.

3589 
AT91C_EMAC_RE
 
	`EQU
 (0x1 << 2Ë;- (
EMAC
Ë
Re˚ive
 
íabÀ
.

3590 
AT91C_EMAC_TE
 
	`EQU
 (0x1 << 3Ë;- (
EMAC
Ë
Tønsmô
 
íabÀ
.

3591 
AT91C_EMAC_MPE
 
	`EQU
 (0x1 << 4Ë;- (
EMAC
Ë
M™agemít
 
p‹t
 
íabÀ
.

3592 
AT91C_EMAC_CLRSTAT
 
	`EQU
 (0x1 << 5Ë;- (
EMAC
Ë
CÀ¨
 
°©i°ics
 
ªgi°îs
.

3593 
AT91C_EMAC_INCSTAT
 
	`EQU
 (0x1 << 6Ë;- (
EMAC
Ë
In¸emít
 
°©i°ics
 
ªgi°îs
.

3594 
AT91C_EMAC_WESTAT
 
	`EQU
 (0x1 << 7Ë;- (
EMAC
Ë
Wrôe
 
íabÀ
 
°©i°ics
 
ªgi°îs
.

3595 
AT91C_EMAC_BP
 
	`EQU
 (0x1 << 8Ë;- (
EMAC
Ë
Back
 
¥essuª
.

3596 
AT91C_EMAC_TSTART
 
	`EQU
 (0x1 << 9Ë;- (
EMAC
Ë
Sèπ
 
Tønsmissi⁄
.

3597 
AT91C_EMAC_THALT
 
	`EQU
 (0x1 << 10Ë;- (
EMAC
Ë
Tønsmissi⁄
 
HÆt
.

3598 
AT91C_EMAC_TPFR
 
	`EQU
 (0x1 << 11Ë;- (
EMAC
Ë
Tønsmô
 
∑u£
 
‰ame


3599 
AT91C_EMAC_TZQ
 
	`EQU
 (0x1 << 12Ë;- (
EMAC
Ë
Tønsmô
 
zîo
 
qu™tum
 
∑u£
 
‰ame


3601 
AT91C_EMAC_SPD
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
Ë
S≥ed
.

3602 
AT91C_EMAC_FD
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
Ë
FuŒ
 
du∂ex
.

3603 
AT91C_EMAC_JFRAME
 
	`EQU
 (0x1 << 3Ë;- (
EMAC
Ë
Jumbo
 
Fømes
.

3604 
AT91C_EMAC_CAF
 
	`EQU
 (0x1 << 4Ë;- (
EMAC
Ë
C›y
 
Æl
 
‰ames
.

3605 
AT91C_EMAC_NBC
 
	`EQU
 (0x1 << 5Ë;- (
EMAC
Ë
No
 
brﬂdˇ°
.

3606 
AT91C_EMAC_MTI
 
	`EQU
 (0x1 << 6Ë;- (
EMAC
Ë
Mu…iˇ°
 
hash
 
evít
 
íabÀ


3607 
AT91C_EMAC_UNI
 
	`EQU
 (0x1 << 7Ë;- (
EMAC
Ë
Uniˇ°
 
hash
 
íabÀ
.

3608 
AT91C_EMAC_BIG
 
	`EQU
 (0x1 << 8Ë;- (
EMAC
Ë
Re˚ive
 1522 
byãs
.

3609 
AT91C_EMAC_EAE
 
	`EQU
 (0x1 << 9Ë;- (
EMAC
Ë
Exã∫Æ
 
addªss
 
m©ch
 
íabÀ
.

3610 
AT91C_EMAC_CLK
 
	`EQU
 (0x3 << 10Ë;- (
EMAC
)

3611 
AT91C_EMAC_CLK_HCLK_8
 
	`EQU
 (0x0 << 10Ë;- (
EMAC
Ë
HCLK
 
divided
 
by
 8

3612 
AT91C_EMAC_CLK_HCLK_16
 
	`EQU
 (0x1 << 10Ë;- (
EMAC
Ë
HCLK
 
divided
 
by
 16

3613 
AT91C_EMAC_CLK_HCLK_32
 
	`EQU
 (0x2 << 10Ë;- (
EMAC
Ë
HCLK
 
divided
 
by
 32

3614 
AT91C_EMAC_CLK_HCLK_64
 
	`EQU
 (0x3 << 10Ë;- (
EMAC
Ë
HCLK
 
divided
 
by
 64

3615 
AT91C_EMAC_RTY
 
	`EQU
 (0x1 << 12Ë;- (
EMAC
)

3616 
AT91C_EMAC_PAE
 
	`EQU
 (0x1 << 13Ë;- (
EMAC
)

3617 
AT91C_EMAC_RBOF
 
	`EQU
 (0x3 << 14Ë;- (
EMAC
)

3618 
AT91C_EMAC_RBOF_OFFSET_0
 
	`EQU
 (0x0 << 14Ë;- (
EMAC
Ë
no
 
off£t
 
‰om
 
°¨t
 
of
 
ª˚ive
 
buf„r


3619 
AT91C_EMAC_RBOF_OFFSET_1
 
	`EQU
 (0x1 << 14Ë;- (
EMAC
Ë
⁄e
 
byã
 
off£t
 
‰om
 
°¨t
 
of
 
ª˚ive
 
buf„r


3620 
AT91C_EMAC_RBOF_OFFSET_2
 
	`EQU
 (0x2 << 14Ë;- (
EMAC
Ë
two
 
byãs
 
off£t
 
‰om
 
°¨t
 
of
 
ª˚ive
 
buf„r


3621 
AT91C_EMAC_RBOF_OFFSET_3
 
	`EQU
 (0x3 << 14Ë;- (
EMAC
Ë
thªe
 
byãs
 
off£t
 
‰om
 
°¨t
 
of
 
ª˚ive
 
buf„r


3622 
AT91C_EMAC_RLCE
 
	`EQU
 (0x1 << 16Ë;- (
EMAC
Ë
Re˚ive
 
Lígth
 
fõld
 
Checkög
 
E«bÀ


3623 
AT91C_EMAC_DRFCS
 
	`EQU
 (0x1 << 17Ë;- (
EMAC
Ë
Disˇrd
 
Re˚ive
 
FCS


3624 
AT91C_EMAC_EFRHD
 
	`EQU
 (0x1 << 18Ë;- (
EMAC
)

3625 
AT91C_EMAC_IRXFCS
 
	`EQU
 (0x1 << 19Ë;- (
EMAC
Ë
Ign‹e
 
RX
 
FCS


3627 
AT91C_EMAC_LINKR
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
)

3628 
AT91C_EMAC_MDIO
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
)

3629 
AT91C_EMAC_IDLE
 
	`EQU
 (0x1 << 2Ë;- (
EMAC
)

3631 
AT91C_EMAC_UBR
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
)

3632 
AT91C_EMAC_COL
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
)

3633 
AT91C_EMAC_RLES
 
	`EQU
 (0x1 << 2Ë;- (
EMAC
)

3634 
AT91C_EMAC_TGO
 
	`EQU
 (0x1 << 3Ë;- (
EMAC
Ë
Tønsmô
 
Go


3635 
AT91C_EMAC_BEX
 
	`EQU
 (0x1 << 4Ë;- (
EMAC
Ë
Buf„rs
 
exhau°ed
 
mid
 
‰ame


3636 
AT91C_EMAC_COMP
 
	`EQU
 (0x1 << 5Ë;- (
EMAC
)

3637 
AT91C_EMAC_UND
 
	`EQU
 (0x1 << 6Ë;- (
EMAC
)

3639 
AT91C_EMAC_BNA
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
)

3640 
AT91C_EMAC_REC
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
)

3641 
AT91C_EMAC_OVR
 
	`EQU
 (0x1 << 2Ë;- (
EMAC
)

3643 
AT91C_EMAC_MFD
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
)

3644 
AT91C_EMAC_RCOMP
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
)

3645 
AT91C_EMAC_RXUBR
 
	`EQU
 (0x1 << 2Ë;- (
EMAC
)

3646 
AT91C_EMAC_TXUBR
 
	`EQU
 (0x1 << 3Ë;- (
EMAC
)

3647 
AT91C_EMAC_TUNDR
 
	`EQU
 (0x1 << 4Ë;- (
EMAC
)

3648 
AT91C_EMAC_RLEX
 
	`EQU
 (0x1 << 5Ë;- (
EMAC
)

3649 
AT91C_EMAC_TXERR
 
	`EQU
 (0x1 << 6Ë;- (
EMAC
)

3650 
AT91C_EMAC_TCOMP
 
	`EQU
 (0x1 << 7Ë;- (
EMAC
)

3651 
AT91C_EMAC_LINK
 
	`EQU
 (0x1 << 9Ë;- (
EMAC
)

3652 
AT91C_EMAC_ROVR
 
	`EQU
 (0x1 << 10Ë;- (
EMAC
)

3653 
AT91C_EMAC_HRESP
 
	`EQU
 (0x1 << 11Ë;- (
EMAC
)

3654 
AT91C_EMAC_PFRE
 
	`EQU
 (0x1 << 12Ë;- (
EMAC
)

3655 
AT91C_EMAC_PTZ
 
	`EQU
 (0x1 << 13Ë;- (
EMAC
)

3660 
AT91C_EMAC_DATA
 
	`EQU
 (0xFFFF << 0Ë;- (
EMAC
)

3661 
AT91C_EMAC_CODE
 
	`EQU
 (0x3 << 16Ë;- (
EMAC
)

3662 
AT91C_EMAC_REGA
 
	`EQU
 (0x1F << 18Ë;- (
EMAC
)

3663 
AT91C_EMAC_PHYA
 
	`EQU
 (0x1F << 23Ë;- (
EMAC
)

3664 
AT91C_EMAC_RW
 
	`EQU
 (0x3 << 28Ë;- (
EMAC
)

3665 
AT91C_EMAC_SOF
 
	`EQU
 (0x3 << 30Ë;- (
EMAC
)

3667 
AT91C_EMAC_RMII
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
Ë
Redu˚
 
MII


3669 
AT91C_EMAC_IP
 
	`EQU
 (0xFFFF << 0Ë;- (
EMAC
Ë
ARP
 
ªque°
 
IP
 
addªss


3670 
AT91C_EMAC_MAG
 
	`EQU
 (0x1 << 16Ë;- (
EMAC
Ë
Magic
 
∑ckë
 
evít
 
íabÀ


3671 
AT91C_EMAC_ARP
 
	`EQU
 (0x1 << 17Ë;- (
EMAC
Ë
ARP
 
ªque°
 
evít
 
íabÀ


3672 
AT91C_EMAC_SA1
 
	`EQU
 (0x1 << 18Ë;- (
EMAC
Ë
S≥cific
 
addªss
 1 
evít
 
íabÀ


3674 
AT91C_EMAC_REVREF
 
	`EQU
 (0xFFFF << 0Ë;- (
EMAC
)

3675 
AT91C_EMAC_PARTREF
 
	`EQU
 (0xFFFF << 16Ë;- (
EMAC
)

3681 
AT91C_ADC_SWRST
 
	`EQU
 (0x1 << 0Ë;- (
ADC
Ë
So·w¨e
 
Re£t


3682 
AT91C_ADC_START
 
	`EQU
 (0x1 << 1Ë;- (
ADC
Ë
Sèπ
 
C⁄vîsi⁄


3684 
AT91C_ADC_TRGEN
 
	`EQU
 (0x1 << 0Ë;- (
ADC
Ë
Triggî
 
E«bÀ


3685 
AT91C_ADC_TRGEN_DIS
 
	`EQU
 (0x0Ë;- (
ADC
Ë
Hødw¨e
 
åiggîs
 
¨e
 
dißbÀd
. 
Sèπög
 
a
 
c⁄vîsi⁄
 
is
 
⁄ly
 
possibÀ
 
by
 
so·w¨e


3686 
AT91C_ADC_TRGEN_EN
 
	`EQU
 (0x1Ë;- (
ADC
Ë
H¨dw¨e
 
åiggî
 
£À˘ed
 
by
 
TRGSEL
 
fõld
 
is
 
íabÀd
.

3687 
AT91C_ADC_TRGSEL
 
	`EQU
 (0x7 << 1Ë;- (
ADC
Ë
Triggî
 
Sñe˘i⁄


3688 
AT91C_ADC_TRGSEL_TIOA0
 
	`EQU
 (0x0 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO0


3689 
AT91C_ADC_TRGSEL_TIOA1
 
	`EQU
 (0x1 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO1


3690 
AT91C_ADC_TRGSEL_TIOA2
 
	`EQU
 (0x2 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO2


3691 
AT91C_ADC_TRGSEL_TIOA3
 
	`EQU
 (0x3 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO3


3692 
AT91C_ADC_TRGSEL_TIOA4
 
	`EQU
 (0x4 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO4


3693 
AT91C_ADC_TRGSEL_TIOA5
 
	`EQU
 (0x5 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO5


3694 
AT91C_ADC_TRGSEL_EXT
 
	`EQU
 (0x6 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
Exã∫Æ
 
Triggî


3695 
AT91C_ADC_LOWRES
 
	`EQU
 (0x1 << 4Ë;- (
ADC
Ë
Resﬁuti⁄
.

3696 
AT91C_ADC_LOWRES_10_BIT
 
	`EQU
 (0x0 << 4Ë;- (
ADC
Ë10-
bô
 
ªsﬁuti⁄


3697 
AT91C_ADC_LOWRES_8_BIT
 
	`EQU
 (0x1 << 4Ë;- (
ADC
Ë8-
bô
 
ªsﬁuti⁄


3698 
AT91C_ADC_SLEEP
 
	`EQU
 (0x1 << 5Ë;- (
ADC
Ë
SÀï
 
Mode


3699 
AT91C_ADC_SLEEP_NORMAL_MODE
 
	`EQU
 (0x0 << 5Ë;- (
ADC
Ë
N‹mÆ
 
Mode


3700 
AT91C_ADC_SLEEP_MODE
 
	`EQU
 (0x1 << 5Ë;- (
ADC
Ë
SÀï
 
Mode


3701 
AT91C_ADC_PRESCAL
 
	`EQU
 (0x3F << 8Ë;- (
ADC
Ë
PªsˇÀr
 
øã
 
£À˘i⁄


3702 
AT91C_ADC_STARTUP
 
	`EQU
 (0x1F << 16Ë;- (
ADC
Ë
Sèπup
 
Time


3703 
AT91C_ADC_SHTIM
 
	`EQU
 (0xF << 24Ë;- (
ADC
Ë
Sam∂e
 & 
Hﬁd
 
Time


3705 
AT91C_ADC_CH0
 
	`EQU
 (0x1 << 0Ë;- (
ADC
Ë
Ch™√l
 0

3706 
AT91C_ADC_CH1
 
	`EQU
 (0x1 << 1Ë;- (
ADC
Ë
Ch™√l
 1

3707 
AT91C_ADC_CH2
 
	`EQU
 (0x1 << 2Ë;- (
ADC
Ë
Ch™√l
 2

3708 
AT91C_ADC_CH3
 
	`EQU
 (0x1 << 3Ë;- (
ADC
Ë
Ch™√l
 3

3709 
AT91C_ADC_CH4
 
	`EQU
 (0x1 << 4Ë;- (
ADC
Ë
Ch™√l
 4

3710 
AT91C_ADC_CH5
 
	`EQU
 (0x1 << 5Ë;- (
ADC
Ë
Ch™√l
 5

3711 
AT91C_ADC_CH6
 
	`EQU
 (0x1 << 6Ë;- (
ADC
Ë
Ch™√l
 6

3712 
AT91C_ADC_CH7
 
	`EQU
 (0x1 << 7Ë;- (
ADC
Ë
Ch™√l
 7

3716 
AT91C_ADC_EOC0
 
	`EQU
 (0x1 << 0Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3717 
AT91C_ADC_EOC1
 
	`EQU
 (0x1 << 1Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3718 
AT91C_ADC_EOC2
 
	`EQU
 (0x1 << 2Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3719 
AT91C_ADC_EOC3
 
	`EQU
 (0x1 << 3Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3720 
AT91C_ADC_EOC4
 
	`EQU
 (0x1 << 4Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3721 
AT91C_ADC_EOC5
 
	`EQU
 (0x1 << 5Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3722 
AT91C_ADC_EOC6
 
	`EQU
 (0x1 << 6Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3723 
AT91C_ADC_EOC7
 
	`EQU
 (0x1 << 7Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3724 
AT91C_ADC_OVRE0
 
	`EQU
 (0x1 << 8Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3725 
AT91C_ADC_OVRE1
 
	`EQU
 (0x1 << 9Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3726 
AT91C_ADC_OVRE2
 
	`EQU
 (0x1 << 10Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3727 
AT91C_ADC_OVRE3
 
	`EQU
 (0x1 << 11Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3728 
AT91C_ADC_OVRE4
 
	`EQU
 (0x1 << 12Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3729 
AT91C_ADC_OVRE5
 
	`EQU
 (0x1 << 13Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3730 
AT91C_ADC_OVRE6
 
	`EQU
 (0x1 << 14Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3731 
AT91C_ADC_OVRE7
 
	`EQU
 (0x1 << 15Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3732 
AT91C_ADC_DRDY
 
	`EQU
 (0x1 << 16Ë;- (
ADC
Ë
D©a
 
Ródy


3733 
AT91C_ADC_GOVRE
 
	`EQU
 (0x1 << 17Ë;- (
ADC
Ë
GíîÆ
 
Ovîrun


3734 
AT91C_ADC_ENDRX
 
	`EQU
 (0x1 << 18Ë;- (
ADC
Ë
End
 
of
 
Re˚ivî
 
Tøns„r


3735 
AT91C_ADC_RXBUFF
 
	`EQU
 (0x1 << 19Ë;- (
ADC
Ë
RXBUFF
 
I¡îru±


3737 
AT91C_ADC_LDATA
 
	`EQU
 (0x3FF << 0Ë;- (
ADC
Ë
La°
 
D©a
 
C⁄vîãd


3742 
AT91C_ADC_DATA
 
	`EQU
 (0x3FF << 0Ë;- (
ADC
Ë
C⁄vîãd
 
D©a


3755 
AT91C_AES_START
 
	`EQU
 (0x1 << 0Ë;- (
AES
Ë
Sèπs
 
Pro˚ssög


3756 
AT91C_AES_SWRST
 
	`EQU
 (0x1 << 8Ë;- (
AES
Ë
So·w¨e
 
Re£t


3757 
AT91C_AES_LOADSEED
 
	`EQU
 (0x1 << 16Ë;- (
AES
Ë
R™dom
 
Numbî
 
Gíî©‹
 
Sìd
 
Lﬂdög


3759 
AT91C_AES_CIPHER
 
	`EQU
 (0x1 << 0Ë;- (
AES
Ë
Pro˚ssög
 
Mode


3760 
AT91C_AES_PROCDLY
 
	`EQU
 (0xF << 4Ë;- (
AES
Ë
Pro˚ssög
 
Dñay


3761 
AT91C_AES_SMOD
 
	`EQU
 (0x3 << 8Ë;- (
AES
Ë
Sèπ
 
Mode


3762 
AT91C_AES_SMOD_MANUAL
 
	`EQU
 (0x0 << 8Ë;- (
AES
Ë
M™uÆ
 
Mode
: 
The
 
START
 
bô
 
ö
 
AES_CR
 
mu°
 
be
 
£t
 
to
 
begö
 
í¸y±i⁄
 
‹
 
de¸y±i⁄
.

3763 
AT91C_AES_SMOD_AUTO
 
	`EQU
 (0x1 << 8Ë;- (
AES
Ë
Auto
 
Mode
: 
no
 
a˘i⁄
 
ö
 
AES_CR
 
is
 
	`√˚sßry
 (
cf
 
d©ashìt
).

3764 
AT91C_AES_SMOD_PDC
 
	`EQU
 (0x2 << 8Ë;- (
AES
Ë
PDC
 
	`Mode
 (
cf
 
d©ashìt
).

3765 
AT91C_AES_OPMOD
 
	`EQU
 (0x7 << 12Ë;- (
AES
Ë
O≥øti⁄
 
Mode


3766 
AT91C_AES_OPMOD_ECB
 
	`EQU
 (0x0 << 12Ë;- (
AES
Ë
ECB
 
EÀ˘r⁄ic
 
CodeBook
 
mode
.

3767 
AT91C_AES_OPMOD_CBC
 
	`EQU
 (0x1 << 12Ë;- (
AES
Ë
CBC
 
Cùhî
 
Block
 
Chaöög
 
mode
.

3768 
AT91C_AES_OPMOD_OFB
 
	`EQU
 (0x2 << 12Ë;- (
AES
Ë
OFB
 
Ouçut
 
Fìdback
 
mode
.

3769 
AT91C_AES_OPMOD_CFB
 
	`EQU
 (0x3 << 12Ë;- (
AES
Ë
CFB
 
Cùhî
 
Fìdback
 
mode
.

3770 
AT91C_AES_OPMOD_CTR
 
	`EQU
 (0x4 << 12Ë;- (
AES
Ë
CTR
 
Cou¡î
 
mode
.

3771 
AT91C_AES_LOD
 
	`EQU
 (0x1 << 15Ë;- (
AES
Ë
La°
 
Ouçut
 
D©a
 
Mode


3772 
AT91C_AES_CFBS
 
	`EQU
 (0x7 << 16Ë;- (
AES
Ë
Cùhî
 
Fìdback
 
D©a
 
Size


3773 
AT91C_AES_CFBS_128_BIT
 
	`EQU
 (0x0 << 16Ë;- (
AES
Ë128-
bô
.

3774 
AT91C_AES_CFBS_64_BIT
 
	`EQU
 (0x1 << 16Ë;- (
AES
Ë64-
bô
.

3775 
AT91C_AES_CFBS_32_BIT
 
	`EQU
 (0x2 << 16Ë;- (
AES
Ë32-
bô
.

3776 
AT91C_AES_CFBS_16_BIT
 
	`EQU
 (0x3 << 16Ë;- (
AES
Ë16-
bô
.

3777 
AT91C_AES_CFBS_8_BIT
 
	`EQU
 (0x4 << 16Ë;- (
AES
Ë8-
bô
.

3778 
AT91C_AES_CKEY
 
	`EQU
 (0xF << 20Ë;- (
AES
Ë
Cou¡îmósuª
 
Key


3779 
AT91C_AES_CTYPE
 
	`EQU
 (0x1F << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
Ty≥


3780 
AT91C_AES_CTYPE_TYPE1_EN
 
	`EQU
 (0x1 << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
ty≥
 1 
is
 
íabÀd
.

3781 
AT91C_AES_CTYPE_TYPE2_EN
 
	`EQU
 (0x2 << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
ty≥
 2 
is
 
íabÀd
.

3782 
AT91C_AES_CTYPE_TYPE3_EN
 
	`EQU
 (0x4 << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
ty≥
 3 
is
 
íabÀd
.

3783 
AT91C_AES_CTYPE_TYPE4_EN
 
	`EQU
 (0x8 << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
ty≥
 4 
is
 
íabÀd
.

3784 
AT91C_AES_CTYPE_TYPE5_EN
 
	`EQU
 (0x10 << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
ty≥
 5 
is
 
íabÀd
.

3786 
AT91C_AES_DATRDY
 
	`EQU
 (0x1 << 0Ë;- (
AES
Ë
DATRDY


3787 
AT91C_AES_ENDRX
 
	`EQU
 (0x1 << 1Ë;- (
AES
Ë
PDC
 
Ród
 
Buf„r
 
End


3788 
AT91C_AES_ENDTX
 
	`EQU
 (0x1 << 2Ë;- (
AES
Ë
PDC
 
Wrôe
 
Buf„r
 
End


3789 
AT91C_AES_RXBUFF
 
	`EQU
 (0x1 << 3Ë;- (
AES
Ë
PDC
 
Ród
 
Buf„r
 
FuŒ


3790 
AT91C_AES_TXBUFE
 
	`EQU
 (0x1 << 4Ë;- (
AES
Ë
PDC
 
Wrôe
 
Buf„r
 
Em±y


3791 
AT91C_AES_URAD
 
	`EQU
 (0x1 << 8Ë;- (
AES
Ë
Un•ecifõd
 
Regi°î
 
Ac˚ss
 
Dëe˘i⁄


3795 
AT91C_AES_URAT
 
	`EQU
 (0x7 << 12Ë;- (
AES
Ë
Un•ecifõd
 
Regi°î
 
Ac˚ss
 
Ty≥
 
Sètus


3796 
AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 
	`EQU
 (0x0 << 12Ë;- (
AES
Ë
I≈ut
 
d©a
 
wrôãn
 
durög
 
the
 d©®
¥o˚ssög
 
ö
 
PDC
 
mode
.

3797 
AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 
	`EQU
 (0x1 << 12Ë;- (
AES
Ë
Ouçut
 
d©a
 
ªad
 
durög
 
the
 d©®
¥o˚ssög
.

3798 
AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 
	`EQU
 (0x2 << 12Ë;- (
AES
Ë
Mode
 
wrôãn
 
durög
 
the
 
d©a
 
¥o˚ssög
.

3799 
AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 
	`EQU
 (0x3 << 12Ë;- (
AES
Ë
Ouçut
 
d©a
 
ªad
 
durög
 
the
 
sub
-
keys
 
gíî©i⁄
.

3800 
AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 
	`EQU
 (0x4 << 12Ë;- (
AES
Ë
Mode
 
wrôãn
 
durög
 
the
 
sub
-
keys
 
gíî©i⁄
.

3801 
AT91C_AES_URAT_WO_REG_READ
 
	`EQU
 (0x5 << 12Ë;- (
AES
Ë
Wrôe
-
⁄ly
 
ªad
 
ac˚ss
.

3807 
AT91C_TDES_START
 
	`EQU
 (0x1 << 0Ë;- (
TDES
Ë
Sèπs
 
Pro˚ssög


3808 
AT91C_TDES_SWRST
 
	`EQU
 (0x1 << 8Ë;- (
TDES
Ë
So·w¨e
 
Re£t


3810 
AT91C_TDES_CIPHER
 
	`EQU
 (0x1 << 0Ë;- (
TDES
Ë
Pro˚ssög
 
Mode


3811 
AT91C_TDES_TDESMOD
 
	`EQU
 (0x1 << 1Ë;- (
TDES
Ë
SögÀ
 
‹
 
TrùÀ
 
DES
 
Mode


3812 
AT91C_TDES_KEYMOD
 
	`EQU
 (0x1 << 4Ë;- (
TDES
Ë
Key
 
Mode


3813 
AT91C_TDES_SMOD
 
	`EQU
 (0x3 << 8Ë;- (
TDES
Ë
Sèπ
 
Mode


3814 
AT91C_TDES_SMOD_MANUAL
 
	`EQU
 (0x0 << 8Ë;- (
TDES
Ë
M™uÆ
 
Mode
: 
The
 
START
 
bô
 
ö
 
TDES_CR
 
mu°
 
be
 
£t
 
to
 
begö
 
í¸y±i⁄
 
‹
 
de¸y±i⁄
.

3815 
AT91C_TDES_SMOD_AUTO
 
	`EQU
 (0x1 << 8Ë;- (
TDES
Ë
Auto
 
Mode
: 
no
 
a˘i⁄
 
ö
 
TDES_CR
 
is
 
	`√˚sßry
 (
cf
 
d©ashìt
).

3816 
AT91C_TDES_SMOD_PDC
 
	`EQU
 (0x2 << 8Ë;- (
TDES
Ë
PDC
 
	`Mode
 (
cf
 
d©ashìt
).

3817 
AT91C_TDES_OPMOD
 
	`EQU
 (0x3 << 12Ë;- (
TDES
Ë
O≥øti⁄
 
Mode


3818 
AT91C_TDES_OPMOD_ECB
 
	`EQU
 (0x0 << 12Ë;- (
TDES
Ë
ECB
 
EÀ˘r⁄ic
 
CodeBook
 
mode
.

3819 
AT91C_TDES_OPMOD_CBC
 
	`EQU
 (0x1 << 12Ë;- (
TDES
Ë
CBC
 
Cùhî
 
Block
 
Chaöög
 
mode
.

3820 
AT91C_TDES_OPMOD_OFB
 
	`EQU
 (0x2 << 12Ë;- (
TDES
Ë
OFB
 
Ouçut
 
Fìdback
 
mode
.

3821 
AT91C_TDES_OPMOD_CFB
 
	`EQU
 (0x3 << 12Ë;- (
TDES
Ë
CFB
 
Cùhî
 
Fìdback
 
mode
.

3822 
AT91C_TDES_LOD
 
	`EQU
 (0x1 << 15Ë;- (
TDES
Ë
La°
 
Ouçut
 
D©a
 
Mode


3823 
AT91C_TDES_CFBS
 
	`EQU
 (0x3 << 16Ë;- (
TDES
Ë
Cùhî
 
Fìdback
 
D©a
 
Size


3824 
AT91C_TDES_CFBS_64_BIT
 
	`EQU
 (0x0 << 16Ë;- (
TDES
Ë64-
bô
.

3825 
AT91C_TDES_CFBS_32_BIT
 
	`EQU
 (0x1 << 16Ë;- (
TDES
Ë32-
bô
.

3826 
AT91C_TDES_CFBS_16_BIT
 
	`EQU
 (0x2 << 16Ë;- (
TDES
Ë16-
bô
.

3827 
AT91C_TDES_CFBS_8_BIT
 
	`EQU
 (0x3 << 16Ë;- (
TDES
Ë8-
bô
.

3829 
AT91C_TDES_DATRDY
 
	`EQU
 (0x1 << 0Ë;- (
TDES
Ë
DATRDY


3830 
AT91C_TDES_ENDRX
 
	`EQU
 (0x1 << 1Ë;- (
TDES
Ë
PDC
 
Ród
 
Buf„r
 
End


3831 
AT91C_TDES_ENDTX
 
	`EQU
 (0x1 << 2Ë;- (
TDES
Ë
PDC
 
Wrôe
 
Buf„r
 
End


3832 
AT91C_TDES_RXBUFF
 
	`EQU
 (0x1 << 3Ë;- (
TDES
Ë
PDC
 
Ród
 
Buf„r
 
FuŒ


3833 
AT91C_TDES_TXBUFE
 
	`EQU
 (0x1 << 4Ë;- (
TDES
Ë
PDC
 
Wrôe
 
Buf„r
 
Em±y


3834 
AT91C_TDES_URAD
 
	`EQU
 (0x1 << 8Ë;- (
TDES
Ë
Un•ecifõd
 
Regi°î
 
Ac˚ss
 
Dëe˘i⁄


3838 
AT91C_TDES_URAT
 
	`EQU
 (0x3 << 12Ë;- (
TDES
Ë
Un•ecifõd
 
Regi°î
 
Ac˚ss
 
Ty≥
 
Sètus


3839 
AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 
	`EQU
 (0x0 << 12Ë;- (
TDES
Ë
I≈ut
 
d©a
 
wrôãn
 
durög
 
the
 d©®
¥o˚ssög
 
ö
 
PDC
 
mode
.

3840 
AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 
	`EQU
 (0x1 << 12Ë;- (
TDES
Ë
Ouçut
 
d©a
 
ªad
 
durög
 
the
 d©®
¥o˚ssög
.

3841 
AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 
	`EQU
 (0x2 << 12Ë;- (
TDES
Ë
Mode
 
wrôãn
 
durög
 
the
 
d©a
 
¥o˚ssög
.

3842 
AT91C_TDES_URAT_WO_REG_READ
 
	`EQU
 (0x3 << 12Ë;- (
TDES
Ë
Wrôe
-
⁄ly
 
ªad
 
ac˚ss
.

3849 
AT91C_AIC_IVR
 
	`EQU
 (0xFFFFF100Ë;- (
AIC
Ë
IRQ
 
Ve˘‹
 
Regi°î


3850 
AT91C_AIC_SMR
 
	`EQU
 (0xFFFFF000Ë;- (
AIC
Ë
Sour˚
 
Mode
 
Regi°î


3851 
AT91C_AIC_FVR
 
	`EQU
 (0xFFFFF104Ë;- (
AIC
Ë
FIQ
 
Ve˘‹
 
Regi°î


3852 
AT91C_AIC_DCR
 
	`EQU
 (0xFFFFF138Ë;- (
AIC
Ë
Debug
 
C⁄åﬁ
 
	$Regi°î
 (
PrŸe˘
)

3853 
AT91C_AIC_EOICR
 
	`EQU
 (0xFFFFF130Ë;- (
AIC
Ë
End
 
of
 
I¡îru±
 
Comm™d
 
Regi°î


3854 
AT91C_AIC_SVR
 
	`EQU
 (0xFFFFF080Ë;- (
AIC
Ë
Sour˚
 
Ve˘‹
 
Regi°î


3855 
AT91C_AIC_FFSR
 
	`EQU
 (0xFFFFF148Ë;- (
AIC
Ë
Fa°
 
F‹cög
 
Sètus
 
Regi°î


3856 
AT91C_AIC_ICCR
 
	`EQU
 (0xFFFFF128Ë;- (
AIC
Ë
I¡îru±
 
CÀ¨
 
Comm™d
 
Regi°î


3857 
AT91C_AIC_ISR
 
	`EQU
 (0xFFFFF108Ë;- (
AIC
Ë
I¡îru±
 
Sètus
 
Regi°î


3858 
AT91C_AIC_IMR
 
	`EQU
 (0xFFFFF110Ë;- (
AIC
Ë
I¡îru±
 
Mask
 
Regi°î


3859 
AT91C_AIC_IPR
 
	`EQU
 (0xFFFFF10CË;- (
AIC
Ë
I¡îru±
 
Pídög
 
Regi°î


3860 
AT91C_AIC_FFER
 
	`EQU
 (0xFFFFF140Ë;- (
AIC
Ë
Fa°
 
F‹cög
 
E«bÀ
 
Regi°î


3861 
AT91C_AIC_IECR
 
	`EQU
 (0xFFFFF120Ë;- (
AIC
Ë
I¡îru±
 
E«bÀ
 
Comm™d
 
Regi°î


3862 
AT91C_AIC_ISCR
 
	`EQU
 (0xFFFFF12CË;- (
AIC
Ë
I¡îru±
 
Së
 
Comm™d
 
Regi°î


3863 
AT91C_AIC_FFDR
 
	`EQU
 (0xFFFFF144Ë;- (
AIC
Ë
Fa°
 
F‹cög
 
DißbÀ
 
Regi°î


3864 
AT91C_AIC_CISR
 
	`EQU
 (0xFFFFF114Ë;- (
AIC
Ë
C‹e
 
I¡îru±
 
Sètus
 
Regi°î


3865 
AT91C_AIC_IDCR
 
	`EQU
 (0xFFFFF124Ë;- (
AIC
Ë
I¡îru±
 
DißbÀ
 
Comm™d
 
Regi°î


3866 
AT91C_AIC_SPU
 
	`EQU
 (0xFFFFF134Ë;- (
AIC
Ë
Spurious
 
Ve˘‹
 
Regi°î


3868 
AT91C_DBGU_TCR
 
	`EQU
 (0xFFFFF30CË;- (
PDC_DBGU
Ë
Tønsmô
 
Cou¡î
 
Regi°î


3869 
AT91C_DBGU_RNPR
 
	`EQU
 (0xFFFFF310Ë;- (
PDC_DBGU
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


3870 
AT91C_DBGU_TNPR
 
	`EQU
 (0xFFFFF318Ë;- (
PDC_DBGU
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


3871 
AT91C_DBGU_TPR
 
	`EQU
 (0xFFFFF308Ë;- (
PDC_DBGU
Ë
Tønsmô
 
Poöãr
 
Regi°î


3872 
AT91C_DBGU_RPR
 
	`EQU
 (0xFFFFF300Ë;- (
PDC_DBGU
Ë
Re˚ive
 
Poöãr
 
Regi°î


3873 
AT91C_DBGU_RCR
 
	`EQU
 (0xFFFFF304Ë;- (
PDC_DBGU
Ë
Re˚ive
 
Cou¡î
 
Regi°î


3874 
AT91C_DBGU_RNCR
 
	`EQU
 (0xFFFFF314Ë;- (
PDC_DBGU
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


3875 
AT91C_DBGU_PTCR
 
	`EQU
 (0xFFFFF320Ë;- (
PDC_DBGU
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


3876 
AT91C_DBGU_PTSR
 
	`EQU
 (0xFFFFF324Ë;- (
PDC_DBGU
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


3877 
AT91C_DBGU_TNCR
 
	`EQU
 (0xFFFFF31CË;- (
PDC_DBGU
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


3879 
AT91C_DBGU_EXID
 
	`EQU
 (0xFFFFF244Ë;- (
DBGU
Ë
Chù
 
ID
 
Exãnsi⁄
 
Regi°î


3880 
AT91C_DBGU_BRGR
 
	`EQU
 (0xFFFFF220Ë;- (
DBGU
Ë
Baud
 
R©e
 
Gíî©‹
 
Regi°î


3881 
AT91C_DBGU_IDR
 
	`EQU
 (0xFFFFF20CË;- (
DBGU
Ë
I¡îru±
 
DißbÀ
 
Regi°î


3882 
AT91C_DBGU_CSR
 
	`EQU
 (0xFFFFF214Ë;- (
DBGU
Ë
Ch™√l
 
Sètus
 
Regi°î


3883 
AT91C_DBGU_CIDR
 
	`EQU
 (0xFFFFF240Ë;- (
DBGU
Ë
Chù
 
ID
 
Regi°î


3884 
AT91C_DBGU_MR
 
	`EQU
 (0xFFFFF204Ë;- (
DBGU
Ë
Mode
 
Regi°î


3885 
AT91C_DBGU_IMR
 
	`EQU
 (0xFFFFF210Ë;- (
DBGU
Ë
I¡îru±
 
Mask
 
Regi°î


3886 
AT91C_DBGU_CR
 
	`EQU
 (0xFFFFF200Ë;- (
DBGU
Ë
C⁄åﬁ
 
Regi°î


3887 
AT91C_DBGU_FNTR
 
	`EQU
 (0xFFFFF248Ë;- (
DBGU
Ë
F‹˚
 
NTRST
 
Regi°î


3888 
AT91C_DBGU_THR
 
	`EQU
 (0xFFFFF21CË;- (
DBGU
Ë
Tønsmôãr
 
Hﬁdög
 
Regi°î


3889 
AT91C_DBGU_RHR
 
	`EQU
 (0xFFFFF218Ë;- (
DBGU
Ë
Re˚ivî
 
Hﬁdög
 
Regi°î


3890 
AT91C_DBGU_IER
 
	`EQU
 (0xFFFFF208Ë;- (
DBGU
Ë
I¡îru±
 
E«bÀ
 
Regi°î


3892 
AT91C_PIOA_ODR
 
	`EQU
 (0xFFFFF414Ë;- (
PIOA
Ë
Ouçut
 
DißbÀ
 
Regi°îr


3893 
AT91C_PIOA_SODR
 
	`EQU
 (0xFFFFF430Ë;- (
PIOA
Ë
Së
 
Ouçut
 
D©a
 
Regi°î


3894 
AT91C_PIOA_ISR
 
	`EQU
 (0xFFFFF44CË;- (
PIOA
Ë
I¡îru±
 
Sètus
 
Regi°î


3895 
AT91C_PIOA_ABSR
 
	`EQU
 (0xFFFFF478Ë;- (
PIOA
Ë
AB
 
Sñe˘
 
Sètus
 
Regi°î


3896 
AT91C_PIOA_IER
 
	`EQU
 (0xFFFFF440Ë;- (
PIOA
Ë
I¡îru±
 
E«bÀ
 
Regi°î


3897 
AT91C_PIOA_PPUDR
 
	`EQU
 (0xFFFFF460Ë;- (
PIOA
Ë
PuŒ
-
up
 
DißbÀ
 
Regi°î


3898 
AT91C_PIOA_IMR
 
	`EQU
 (0xFFFFF448Ë;- (
PIOA
Ë
I¡îru±
 
Mask
 
Regi°î


3899 
AT91C_PIOA_PER
 
	`EQU
 (0xFFFFF400Ë;- (
PIOA
Ë
PIO
 
E«bÀ
 
Regi°î


3900 
AT91C_PIOA_IFDR
 
	`EQU
 (0xFFFFF424Ë;- (
PIOA
Ë
I≈ut
 
Fûãr
 
DißbÀ
 
Regi°î


3901 
AT91C_PIOA_OWDR
 
	`EQU
 (0xFFFFF4A4Ë;- (
PIOA
Ë
Ouçut
 
Wrôe
 
DißbÀ
 
Regi°î


3902 
AT91C_PIOA_MDSR
 
	`EQU
 (0xFFFFF458Ë;- (
PIOA
Ë
Mu…i
-
drivî
 
Sètus
 
Regi°î


3903 
AT91C_PIOA_IDR
 
	`EQU
 (0xFFFFF444Ë;- (
PIOA
Ë
I¡îru±
 
DißbÀ
 
Regi°î


3904 
AT91C_PIOA_ODSR
 
	`EQU
 (0xFFFFF438Ë;- (
PIOA
Ë
Ouçut
 
D©a
 
Sètus
 
Regi°î


3905 
AT91C_PIOA_PPUSR
 
	`EQU
 (0xFFFFF468Ë;- (
PIOA
Ë
PuŒ
-
up
 
Sètus
 
Regi°î


3906 
AT91C_PIOA_OWSR
 
	`EQU
 (0xFFFFF4A8Ë;- (
PIOA
Ë
Ouçut
 
Wrôe
 
Sètus
 
Regi°î


3907 
AT91C_PIOA_BSR
 
	`EQU
 (0xFFFFF474Ë;- (
PIOA
Ë
Sñe˘
 
B
 
Regi°î


3908 
AT91C_PIOA_OWER
 
	`EQU
 (0xFFFFF4A0Ë;- (
PIOA
Ë
Ouçut
 
Wrôe
 
E«bÀ
 
Regi°î


3909 
AT91C_PIOA_IFER
 
	`EQU
 (0xFFFFF420Ë;- (
PIOA
Ë
I≈ut
 
Fûãr
 
E«bÀ
 
Regi°î


3910 
AT91C_PIOA_PDSR
 
	`EQU
 (0xFFFFF43CË;- (
PIOA
Ë
Pö
 
D©a
 
Sètus
 
Regi°î


3911 
AT91C_PIOA_PPUER
 
	`EQU
 (0xFFFFF464Ë;- (
PIOA
Ë
PuŒ
-
up
 
E«bÀ
 
Regi°î


3912 
AT91C_PIOA_OSR
 
	`EQU
 (0xFFFFF418Ë;- (
PIOA
Ë
Ouçut
 
Sètus
 
Regi°î


3913 
AT91C_PIOA_ASR
 
	`EQU
 (0xFFFFF470Ë;- (
PIOA
Ë
Sñe˘
 
A
 
Regi°î


3914 
AT91C_PIOA_MDDR
 
	`EQU
 (0xFFFFF454Ë;- (
PIOA
Ë
Mu…i
-
drivî
 
DißbÀ
 
Regi°î


3915 
AT91C_PIOA_CODR
 
	`EQU
 (0xFFFFF434Ë;- (
PIOA
Ë
CÀ¨
 
Ouçut
 
D©a
 
Regi°î


3916 
AT91C_PIOA_MDER
 
	`EQU
 (0xFFFFF450Ë;- (
PIOA
Ë
Mu…i
-
drivî
 
E«bÀ
 
Regi°î


3917 
AT91C_PIOA_PDR
 
	`EQU
 (0xFFFFF404Ë;- (
PIOA
Ë
PIO
 
DißbÀ
 
Regi°î


3918 
AT91C_PIOA_IFSR
 
	`EQU
 (0xFFFFF428Ë;- (
PIOA
Ë
I≈ut
 
Fûãr
 
Sètus
 
Regi°î


3919 
AT91C_PIOA_OER
 
	`EQU
 (0xFFFFF410Ë;- (
PIOA
Ë
Ouçut
 
E«bÀ
 
Regi°î


3920 
AT91C_PIOA_PSR
 
	`EQU
 (0xFFFFF408Ë;- (
PIOA
Ë
PIO
 
Sètus
 
Regi°î


3922 
AT91C_PIOB_OWDR
 
	`EQU
 (0xFFFFF6A4Ë;- (
PIOB
Ë
Ouçut
 
Wrôe
 
DißbÀ
 
Regi°î


3923 
AT91C_PIOB_MDER
 
	`EQU
 (0xFFFFF650Ë;- (
PIOB
Ë
Mu…i
-
drivî
 
E«bÀ
 
Regi°î


3924 
AT91C_PIOB_PPUSR
 
	`EQU
 (0xFFFFF668Ë;- (
PIOB
Ë
PuŒ
-
up
 
Sètus
 
Regi°î


3925 
AT91C_PIOB_IMR
 
	`EQU
 (0xFFFFF648Ë;- (
PIOB
Ë
I¡îru±
 
Mask
 
Regi°î


3926 
AT91C_PIOB_ASR
 
	`EQU
 (0xFFFFF670Ë;- (
PIOB
Ë
Sñe˘
 
A
 
Regi°î


3927 
AT91C_PIOB_PPUDR
 
	`EQU
 (0xFFFFF660Ë;- (
PIOB
Ë
PuŒ
-
up
 
DißbÀ
 
Regi°î


3928 
AT91C_PIOB_PSR
 
	`EQU
 (0xFFFFF608Ë;- (
PIOB
Ë
PIO
 
Sètus
 
Regi°î


3929 
AT91C_PIOB_IER
 
	`EQU
 (0xFFFFF640Ë;- (
PIOB
Ë
I¡îru±
 
E«bÀ
 
Regi°î


3930 
AT91C_PIOB_CODR
 
	`EQU
 (0xFFFFF634Ë;- (
PIOB
Ë
CÀ¨
 
Ouçut
 
D©a
 
Regi°î


3931 
AT91C_PIOB_OWER
 
	`EQU
 (0xFFFFF6A0Ë;- (
PIOB
Ë
Ouçut
 
Wrôe
 
E«bÀ
 
Regi°î


3932 
AT91C_PIOB_ABSR
 
	`EQU
 (0xFFFFF678Ë;- (
PIOB
Ë
AB
 
Sñe˘
 
Sètus
 
Regi°î


3933 
AT91C_PIOB_IFDR
 
	`EQU
 (0xFFFFF624Ë;- (
PIOB
Ë
I≈ut
 
Fûãr
 
DißbÀ
 
Regi°î


3934 
AT91C_PIOB_PDSR
 
	`EQU
 (0xFFFFF63CË;- (
PIOB
Ë
Pö
 
D©a
 
Sètus
 
Regi°î


3935 
AT91C_PIOB_IDR
 
	`EQU
 (0xFFFFF644Ë;- (
PIOB
Ë
I¡îru±
 
DißbÀ
 
Regi°î


3936 
AT91C_PIOB_OWSR
 
	`EQU
 (0xFFFFF6A8Ë;- (
PIOB
Ë
Ouçut
 
Wrôe
 
Sètus
 
Regi°î


3937 
AT91C_PIOB_PDR
 
	`EQU
 (0xFFFFF604Ë;- (
PIOB
Ë
PIO
 
DißbÀ
 
Regi°î


3938 
AT91C_PIOB_ODR
 
	`EQU
 (0xFFFFF614Ë;- (
PIOB
Ë
Ouçut
 
DißbÀ
 
Regi°îr


3939 
AT91C_PIOB_IFSR
 
	`EQU
 (0xFFFFF628Ë;- (
PIOB
Ë
I≈ut
 
Fûãr
 
Sètus
 
Regi°î


3940 
AT91C_PIOB_PPUER
 
	`EQU
 (0xFFFFF664Ë;- (
PIOB
Ë
PuŒ
-
up
 
E«bÀ
 
Regi°î


3941 
AT91C_PIOB_SODR
 
	`EQU
 (0xFFFFF630Ë;- (
PIOB
Ë
Së
 
Ouçut
 
D©a
 
Regi°î


3942 
AT91C_PIOB_ISR
 
	`EQU
 (0xFFFFF64CË;- (
PIOB
Ë
I¡îru±
 
Sètus
 
Regi°î


3943 
AT91C_PIOB_ODSR
 
	`EQU
 (0xFFFFF638Ë;- (
PIOB
Ë
Ouçut
 
D©a
 
Sètus
 
Regi°î


3944 
AT91C_PIOB_OSR
 
	`EQU
 (0xFFFFF618Ë;- (
PIOB
Ë
Ouçut
 
Sètus
 
Regi°î


3945 
AT91C_PIOB_MDSR
 
	`EQU
 (0xFFFFF658Ë;- (
PIOB
Ë
Mu…i
-
drivî
 
Sètus
 
Regi°î


3946 
AT91C_PIOB_IFER
 
	`EQU
 (0xFFFFF620Ë;- (
PIOB
Ë
I≈ut
 
Fûãr
 
E«bÀ
 
Regi°î


3947 
AT91C_PIOB_BSR
 
	`EQU
 (0xFFFFF674Ë;- (
PIOB
Ë
Sñe˘
 
B
 
Regi°î


3948 
AT91C_PIOB_MDDR
 
	`EQU
 (0xFFFFF654Ë;- (
PIOB
Ë
Mu…i
-
drivî
 
DißbÀ
 
Regi°î


3949 
AT91C_PIOB_OER
 
	`EQU
 (0xFFFFF610Ë;- (
PIOB
Ë
Ouçut
 
E«bÀ
 
Regi°î


3950 
AT91C_PIOB_PER
 
	`EQU
 (0xFFFFF600Ë;- (
PIOB
Ë
PIO
 
E«bÀ
 
Regi°î


3952 
AT91C_CKGR_MOR
 
	`EQU
 (0xFFFFFC20Ë;- (
CKGR
Ë
Maö
 
Oscûœt‹
 
Regi°î


3953 
AT91C_CKGR_PLLR
 
	`EQU
 (0xFFFFFC2CË;- (
CKGR
Ë
PLL
 
Regi°î


3954 
AT91C_CKGR_MCFR
 
	`EQU
 (0xFFFFFC24Ë;- (
CKGR
Ë
Maö
 
Clock
 
Fªquícy
 
Regi°î


3956 
AT91C_PMC_IDR
 
	`EQU
 (0xFFFFFC64Ë;- (
PMC
Ë
I¡îru±
 
DißbÀ
 
Regi°î


3957 
AT91C_PMC_MOR
 
	`EQU
 (0xFFFFFC20Ë;- (
PMC
Ë
Maö
 
Oscûœt‹
 
Regi°î


3958 
AT91C_PMC_PLLR
 
	`EQU
 (0xFFFFFC2CË;- (
PMC
Ë
PLL
 
Regi°î


3959 
AT91C_PMC_PCER
 
	`EQU
 (0xFFFFFC10Ë;- (
PMC
Ë
PîùhîÆ
 
Clock
 
E«bÀ
 
Regi°î


3960 
AT91C_PMC_PCKR
 
	`EQU
 (0xFFFFFC40Ë;- (
PMC
Ë
ProgømmabÀ
 
Clock
 
Regi°î


3961 
AT91C_PMC_MCKR
 
	`EQU
 (0xFFFFFC30Ë;- (
PMC
Ë
Ma°î
 
Clock
 
Regi°î


3962 
AT91C_PMC_SCDR
 
	`EQU
 (0xFFFFFC04Ë;- (
PMC
Ë
Sy°em
 
Clock
 
DißbÀ
 
Regi°î


3963 
AT91C_PMC_PCDR
 
	`EQU
 (0xFFFFFC14Ë;- (
PMC
Ë
PîùhîÆ
 
Clock
 
DißbÀ
 
Regi°î


3964 
AT91C_PMC_SCSR
 
	`EQU
 (0xFFFFFC08Ë;- (
PMC
Ë
Sy°em
 
Clock
 
Sètus
 
Regi°î


3965 
AT91C_PMC_PCSR
 
	`EQU
 (0xFFFFFC18Ë;- (
PMC
Ë
PîùhîÆ
 
Clock
 
Sètus
 
Regi°î


3966 
AT91C_PMC_MCFR
 
	`EQU
 (0xFFFFFC24Ë;- (
PMC
Ë
Maö
 
Clock
 
Fªquícy
 
Regi°î


3967 
AT91C_PMC_SCER
 
	`EQU
 (0xFFFFFC00Ë;- (
PMC
Ë
Sy°em
 
Clock
 
E«bÀ
 
Regi°î


3968 
AT91C_PMC_IMR
 
	`EQU
 (0xFFFFFC6CË;- (
PMC
Ë
I¡îru±
 
Mask
 
Regi°î


3969 
AT91C_PMC_IER
 
	`EQU
 (0xFFFFFC60Ë;- (
PMC
Ë
I¡îru±
 
E«bÀ
 
Regi°î


3970 
AT91C_PMC_SR
 
	`EQU
 (0xFFFFFC68Ë;- (
PMC
Ë
Sètus
 
Regi°î


3972 
AT91C_RSTC_RCR
 
	`EQU
 (0xFFFFFD00Ë;- (
RSTC
Ë
Re£t
 
C⁄åﬁ
 
Regi°î


3973 
AT91C_RSTC_RMR
 
	`EQU
 (0xFFFFFD08Ë;- (
RSTC
Ë
Re£t
 
Mode
 
Regi°î


3974 
AT91C_RSTC_RSR
 
	`EQU
 (0xFFFFFD04Ë;- (
RSTC
Ë
Re£t
 
Sètus
 
Regi°î


3976 
AT91C_RTTC_RTSR
 
	`EQU
 (0xFFFFFD2CË;- (
RTTC
Ë
Ról
-
time
 
Sètus
 
Regi°î


3977 
AT91C_RTTC_RTMR
 
	`EQU
 (0xFFFFFD20Ë;- (
RTTC
Ë
Ról
-
time
 
Mode
 
Regi°î


3978 
AT91C_RTTC_RTVR
 
	`EQU
 (0xFFFFFD28Ë;- (
RTTC
Ë
Ról
-
time
 
VÆue
 
Regi°î


3979 
AT91C_RTTC_RTAR
 
	`EQU
 (0xFFFFFD24Ë;- (
RTTC
Ë
Ról
-
time
 
Aœrm
 
Regi°î


3981 
AT91C_PITC_PIVR
 
	`EQU
 (0xFFFFFD38Ë;- (
PITC
Ë
Pîiod
 
I¡îvÆ
 
VÆue
 
Regi°î


3982 
AT91C_PITC_PISR
 
	`EQU
 (0xFFFFFD34Ë;- (
PITC
Ë
Pîiod
 
I¡îvÆ
 
Sètus
 
Regi°î


3983 
AT91C_PITC_PIIR
 
	`EQU
 (0xFFFFFD3CË;- (
PITC
Ë
Pîiod
 
I¡îvÆ
 
Image
 
Regi°î


3984 
AT91C_PITC_PIMR
 
	`EQU
 (0xFFFFFD30Ë;- (
PITC
Ë
Pîiod
 
I¡îvÆ
 
Mode
 
Regi°î


3986 
AT91C_WDTC_WDCR
 
	`EQU
 (0xFFFFFD40Ë;- (
WDTC
Ë
W©chdog
 
C⁄åﬁ
 
Regi°î


3987 
AT91C_WDTC_WDSR
 
	`EQU
 (0xFFFFFD48Ë;- (
WDTC
Ë
W©chdog
 
Sètus
 
Regi°î


3988 
AT91C_WDTC_WDMR
 
	`EQU
 (0xFFFFFD44Ë;- (
WDTC
Ë
W©chdog
 
Mode
 
Regi°î


3990 
AT91C_VREG_MR
 
	`EQU
 (0xFFFFFD60Ë;- (
VREG
Ë
Vﬁège
 
Reguœt‹
 
Mode
 
Regi°î


3992 
AT91C_MC_ASR
 
	`EQU
 (0xFFFFFF04Ë;- (
MC
ËMC 
Ab‹t
 
Sètus
 
Regi°î


3993 
AT91C_MC_RCR
 
	`EQU
 (0xFFFFFF00Ë;- (
MC
ËMC 
Rem≠
 
C⁄åﬁ
 
Regi°î


3994 
AT91C_MC_FCR
 
	`EQU
 (0xFFFFFF64Ë;- (
MC
ËMC 
Fœsh
 
Comm™d
 
Regi°î


3995 
AT91C_MC_AASR
 
	`EQU
 (0xFFFFFF08Ë;- (
MC
ËMC 
Ab‹t
 
Addªss
 
Sètus
 
Regi°î


3996 
AT91C_MC_FSR
 
	`EQU
 (0xFFFFFF68Ë;- (
MC
ËMC 
Fœsh
 
Sètus
 
Regi°î


3997 
AT91C_MC_FMR
 
	`EQU
 (0xFFFFFF60Ë;- (
MC
ËMC 
Fœsh
 
Mode
 
Regi°î


3999 
AT91C_SPI1_PTCR
 
	`EQU
 (0xFFFE4120Ë;- (
PDC_SPI1
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4000 
AT91C_SPI1_RPR
 
	`EQU
 (0xFFFE4100Ë;- (
PDC_SPI1
Ë
Re˚ive
 
Poöãr
 
Regi°î


4001 
AT91C_SPI1_TNCR
 
	`EQU
 (0xFFFE411CË;- (
PDC_SPI1
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4002 
AT91C_SPI1_TPR
 
	`EQU
 (0xFFFE4108Ë;- (
PDC_SPI1
Ë
Tønsmô
 
Poöãr
 
Regi°î


4003 
AT91C_SPI1_TNPR
 
	`EQU
 (0xFFFE4118Ë;- (
PDC_SPI1
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4004 
AT91C_SPI1_TCR
 
	`EQU
 (0xFFFE410CË;- (
PDC_SPI1
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4005 
AT91C_SPI1_RCR
 
	`EQU
 (0xFFFE4104Ë;- (
PDC_SPI1
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4006 
AT91C_SPI1_RNPR
 
	`EQU
 (0xFFFE4110Ë;- (
PDC_SPI1
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4007 
AT91C_SPI1_RNCR
 
	`EQU
 (0xFFFE4114Ë;- (
PDC_SPI1
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4008 
AT91C_SPI1_PTSR
 
	`EQU
 (0xFFFE4124Ë;- (
PDC_SPI1
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4010 
AT91C_SPI1_IMR
 
	`EQU
 (0xFFFE401CË;- (
SPI1
Ë
I¡îru±
 
Mask
 
Regi°î


4011 
AT91C_SPI1_IER
 
	`EQU
 (0xFFFE4014Ë;- (
SPI1
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4012 
AT91C_SPI1_MR
 
	`EQU
 (0xFFFE4004Ë;- (
SPI1
Ë
Mode
 
Regi°î


4013 
AT91C_SPI1_RDR
 
	`EQU
 (0xFFFE4008Ë;- (
SPI1
Ë
Re˚ive
 
D©a
 
Regi°î


4014 
AT91C_SPI1_IDR
 
	`EQU
 (0xFFFE4018Ë;- (
SPI1
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4015 
AT91C_SPI1_SR
 
	`EQU
 (0xFFFE4010Ë;- (
SPI1
Ë
Sètus
 
Regi°î


4016 
AT91C_SPI1_TDR
 
	`EQU
 (0xFFFE400CË;- (
SPI1
Ë
Tønsmô
 
D©a
 
Regi°î


4017 
AT91C_SPI1_CR
 
	`EQU
 (0xFFFE4000Ë;- (
SPI1
Ë
C⁄åﬁ
 
Regi°î


4018 
AT91C_SPI1_CSR
 
	`EQU
 (0xFFFE4030Ë;- (
SPI1
Ë
Chù
 
Sñe˘
 
Regi°î


4020 
AT91C_SPI0_PTCR
 
	`EQU
 (0xFFFE0120Ë;- (
PDC_SPI0
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4021 
AT91C_SPI0_TPR
 
	`EQU
 (0xFFFE0108Ë;- (
PDC_SPI0
Ë
Tønsmô
 
Poöãr
 
Regi°î


4022 
AT91C_SPI0_TCR
 
	`EQU
 (0xFFFE010CË;- (
PDC_SPI0
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4023 
AT91C_SPI0_RCR
 
	`EQU
 (0xFFFE0104Ë;- (
PDC_SPI0
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4024 
AT91C_SPI0_PTSR
 
	`EQU
 (0xFFFE0124Ë;- (
PDC_SPI0
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4025 
AT91C_SPI0_RNPR
 
	`EQU
 (0xFFFE0110Ë;- (
PDC_SPI0
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4026 
AT91C_SPI0_RPR
 
	`EQU
 (0xFFFE0100Ë;- (
PDC_SPI0
Ë
Re˚ive
 
Poöãr
 
Regi°î


4027 
AT91C_SPI0_TNCR
 
	`EQU
 (0xFFFE011CË;- (
PDC_SPI0
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4028 
AT91C_SPI0_RNCR
 
	`EQU
 (0xFFFE0114Ë;- (
PDC_SPI0
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4029 
AT91C_SPI0_TNPR
 
	`EQU
 (0xFFFE0118Ë;- (
PDC_SPI0
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4031 
AT91C_SPI0_IER
 
	`EQU
 (0xFFFE0014Ë;- (
SPI0
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4032 
AT91C_SPI0_SR
 
	`EQU
 (0xFFFE0010Ë;- (
SPI0
Ë
Sètus
 
Regi°î


4033 
AT91C_SPI0_IDR
 
	`EQU
 (0xFFFE0018Ë;- (
SPI0
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4034 
AT91C_SPI0_CR
 
	`EQU
 (0xFFFE0000Ë;- (
SPI0
Ë
C⁄åﬁ
 
Regi°î


4035 
AT91C_SPI0_MR
 
	`EQU
 (0xFFFE0004Ë;- (
SPI0
Ë
Mode
 
Regi°î


4036 
AT91C_SPI0_IMR
 
	`EQU
 (0xFFFE001CË;- (
SPI0
Ë
I¡îru±
 
Mask
 
Regi°î


4037 
AT91C_SPI0_TDR
 
	`EQU
 (0xFFFE000CË;- (
SPI0
Ë
Tønsmô
 
D©a
 
Regi°î


4038 
AT91C_SPI0_RDR
 
	`EQU
 (0xFFFE0008Ë;- (
SPI0
Ë
Re˚ive
 
D©a
 
Regi°î


4039 
AT91C_SPI0_CSR
 
	`EQU
 (0xFFFE0030Ë;- (
SPI0
Ë
Chù
 
Sñe˘
 
Regi°î


4041 
AT91C_US1_RNCR
 
	`EQU
 (0xFFFC4114Ë;- (
PDC_US1
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4042 
AT91C_US1_PTCR
 
	`EQU
 (0xFFFC4120Ë;- (
PDC_US1
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4043 
AT91C_US1_TCR
 
	`EQU
 (0xFFFC410CË;- (
PDC_US1
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4044 
AT91C_US1_PTSR
 
	`EQU
 (0xFFFC4124Ë;- (
PDC_US1
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4045 
AT91C_US1_TNPR
 
	`EQU
 (0xFFFC4118Ë;- (
PDC_US1
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4046 
AT91C_US1_RCR
 
	`EQU
 (0xFFFC4104Ë;- (
PDC_US1
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4047 
AT91C_US1_RNPR
 
	`EQU
 (0xFFFC4110Ë;- (
PDC_US1
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4048 
AT91C_US1_RPR
 
	`EQU
 (0xFFFC4100Ë;- (
PDC_US1
Ë
Re˚ive
 
Poöãr
 
Regi°î


4049 
AT91C_US1_TNCR
 
	`EQU
 (0xFFFC411CË;- (
PDC_US1
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4050 
AT91C_US1_TPR
 
	`EQU
 (0xFFFC4108Ë;- (
PDC_US1
Ë
Tønsmô
 
Poöãr
 
Regi°î


4052 
AT91C_US1_IF
 
	`EQU
 (0xFFFC404CË;- (
US1
Ë
IRDA_FILTER
 
Regi°î


4053 
AT91C_US1_NER
 
	`EQU
 (0xFFFC4044Ë;- (
US1
Ë
Nb
 
Eº‹s
 
Regi°î


4054 
AT91C_US1_RTOR
 
	`EQU
 (0xFFFC4024Ë;- (
US1
Ë
Re˚ivî
 
Time
-
out
 
Regi°î


4055 
AT91C_US1_CSR
 
	`EQU
 (0xFFFC4014Ë;- (
US1
Ë
Ch™√l
 
Sètus
 
Regi°î


4056 
AT91C_US1_IDR
 
	`EQU
 (0xFFFC400CË;- (
US1
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4057 
AT91C_US1_IER
 
	`EQU
 (0xFFFC4008Ë;- (
US1
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4058 
AT91C_US1_THR
 
	`EQU
 (0xFFFC401CË;- (
US1
Ë
Tønsmôãr
 
Hﬁdög
 
Regi°î


4059 
AT91C_US1_TTGR
 
	`EQU
 (0xFFFC4028Ë;- (
US1
Ë
Tønsmôãr
 
Time
-
gu¨d
 
Regi°î


4060 
AT91C_US1_RHR
 
	`EQU
 (0xFFFC4018Ë;- (
US1
Ë
Re˚ivî
 
Hﬁdög
 
Regi°î


4061 
AT91C_US1_BRGR
 
	`EQU
 (0xFFFC4020Ë;- (
US1
Ë
Baud
 
R©e
 
Gíî©‹
 
Regi°î


4062 
AT91C_US1_IMR
 
	`EQU
 (0xFFFC4010Ë;- (
US1
Ë
I¡îru±
 
Mask
 
Regi°î


4063 
AT91C_US1_FIDI
 
	`EQU
 (0xFFFC4040Ë;- (
US1
Ë
FI_DI_R©io
 
Regi°î


4064 
AT91C_US1_CR
 
	`EQU
 (0xFFFC4000Ë;- (
US1
Ë
C⁄åﬁ
 
Regi°î


4065 
AT91C_US1_MR
 
	`EQU
 (0xFFFC4004Ë;- (
US1
Ë
Mode
 
Regi°î


4067 
AT91C_US0_TNPR
 
	`EQU
 (0xFFFC0118Ë;- (
PDC_US0
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4068 
AT91C_US0_RNPR
 
	`EQU
 (0xFFFC0110Ë;- (
PDC_US0
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4069 
AT91C_US0_TCR
 
	`EQU
 (0xFFFC010CË;- (
PDC_US0
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4070 
AT91C_US0_PTCR
 
	`EQU
 (0xFFFC0120Ë;- (
PDC_US0
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4071 
AT91C_US0_PTSR
 
	`EQU
 (0xFFFC0124Ë;- (
PDC_US0
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4072 
AT91C_US0_TNCR
 
	`EQU
 (0xFFFC011CË;- (
PDC_US0
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4073 
AT91C_US0_TPR
 
	`EQU
 (0xFFFC0108Ë;- (
PDC_US0
Ë
Tønsmô
 
Poöãr
 
Regi°î


4074 
AT91C_US0_RCR
 
	`EQU
 (0xFFFC0104Ë;- (
PDC_US0
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4075 
AT91C_US0_RPR
 
	`EQU
 (0xFFFC0100Ë;- (
PDC_US0
Ë
Re˚ive
 
Poöãr
 
Regi°î


4076 
AT91C_US0_RNCR
 
	`EQU
 (0xFFFC0114Ë;- (
PDC_US0
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4078 
AT91C_US0_BRGR
 
	`EQU
 (0xFFFC0020Ë;- (
US0
Ë
Baud
 
R©e
 
Gíî©‹
 
Regi°î


4079 
AT91C_US0_NER
 
	`EQU
 (0xFFFC0044Ë;- (
US0
Ë
Nb
 
Eº‹s
 
Regi°î


4080 
AT91C_US0_CR
 
	`EQU
 (0xFFFC0000Ë;- (
US0
Ë
C⁄åﬁ
 
Regi°î


4081 
AT91C_US0_IMR
 
	`EQU
 (0xFFFC0010Ë;- (
US0
Ë
I¡îru±
 
Mask
 
Regi°î


4082 
AT91C_US0_FIDI
 
	`EQU
 (0xFFFC0040Ë;- (
US0
Ë
FI_DI_R©io
 
Regi°î


4083 
AT91C_US0_TTGR
 
	`EQU
 (0xFFFC0028Ë;- (
US0
Ë
Tønsmôãr
 
Time
-
gu¨d
 
Regi°î


4084 
AT91C_US0_MR
 
	`EQU
 (0xFFFC0004Ë;- (
US0
Ë
Mode
 
Regi°î


4085 
AT91C_US0_RTOR
 
	`EQU
 (0xFFFC0024Ë;- (
US0
Ë
Re˚ivî
 
Time
-
out
 
Regi°î


4086 
AT91C_US0_CSR
 
	`EQU
 (0xFFFC0014Ë;- (
US0
Ë
Ch™√l
 
Sètus
 
Regi°î


4087 
AT91C_US0_RHR
 
	`EQU
 (0xFFFC0018Ë;- (
US0
Ë
Re˚ivî
 
Hﬁdög
 
Regi°î


4088 
AT91C_US0_IDR
 
	`EQU
 (0xFFFC000CË;- (
US0
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4089 
AT91C_US0_THR
 
	`EQU
 (0xFFFC001CË;- (
US0
Ë
Tønsmôãr
 
Hﬁdög
 
Regi°î


4090 
AT91C_US0_IF
 
	`EQU
 (0xFFFC004CË;- (
US0
Ë
IRDA_FILTER
 
Regi°î


4091 
AT91C_US0_IER
 
	`EQU
 (0xFFFC0008Ë;- (
US0
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4093 
AT91C_SSC_TNCR
 
	`EQU
 (0xFFFD411CË;- (
PDC_SSC
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4094 
AT91C_SSC_RPR
 
	`EQU
 (0xFFFD4100Ë;- (
PDC_SSC
Ë
Re˚ive
 
Poöãr
 
Regi°î


4095 
AT91C_SSC_RNCR
 
	`EQU
 (0xFFFD4114Ë;- (
PDC_SSC
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4096 
AT91C_SSC_TPR
 
	`EQU
 (0xFFFD4108Ë;- (
PDC_SSC
Ë
Tønsmô
 
Poöãr
 
Regi°î


4097 
AT91C_SSC_PTCR
 
	`EQU
 (0xFFFD4120Ë;- (
PDC_SSC
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4098 
AT91C_SSC_TCR
 
	`EQU
 (0xFFFD410CË;- (
PDC_SSC
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4099 
AT91C_SSC_RCR
 
	`EQU
 (0xFFFD4104Ë;- (
PDC_SSC
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4100 
AT91C_SSC_RNPR
 
	`EQU
 (0xFFFD4110Ë;- (
PDC_SSC
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4101 
AT91C_SSC_TNPR
 
	`EQU
 (0xFFFD4118Ë;- (
PDC_SSC
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4102 
AT91C_SSC_PTSR
 
	`EQU
 (0xFFFD4124Ë;- (
PDC_SSC
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4104 
AT91C_SSC_RHR
 
	`EQU
 (0xFFFD4020Ë;- (
SSC
Ë
Re˚ive
 
Hﬁdög
 
Regi°î


4105 
AT91C_SSC_RSHR
 
	`EQU
 (0xFFFD4030Ë;- (
SSC
Ë
Re˚ive
 
Sync
 
Hﬁdög
 
Regi°î


4106 
AT91C_SSC_TFMR
 
	`EQU
 (0xFFFD401CË;- (
SSC
Ë
Tønsmô
 
Føme
 
Mode
 
Regi°î


4107 
AT91C_SSC_IDR
 
	`EQU
 (0xFFFD4048Ë;- (
SSC
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4108 
AT91C_SSC_THR
 
	`EQU
 (0xFFFD4024Ë;- (
SSC
Ë
Tønsmô
 
Hﬁdög
 
Regi°î


4109 
AT91C_SSC_RCMR
 
	`EQU
 (0xFFFD4010Ë;- (
SSC
Ë
Re˚ive
 
Clock
 
ModeRegi°î


4110 
AT91C_SSC_IER
 
	`EQU
 (0xFFFD4044Ë;- (
SSC
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4111 
AT91C_SSC_TSHR
 
	`EQU
 (0xFFFD4034Ë;- (
SSC
Ë
Tønsmô
 
Sync
 
Hﬁdög
 
Regi°î


4112 
AT91C_SSC_SR
 
	`EQU
 (0xFFFD4040Ë;- (
SSC
Ë
Sètus
 
Regi°î


4113 
AT91C_SSC_CMR
 
	`EQU
 (0xFFFD4004Ë;- (
SSC
Ë
Clock
 
Mode
 
Regi°î


4114 
AT91C_SSC_TCMR
 
	`EQU
 (0xFFFD4018Ë;- (
SSC
Ë
Tønsmô
 
Clock
 
Mode
 
Regi°î


4115 
AT91C_SSC_CR
 
	`EQU
 (0xFFFD4000Ë;- (
SSC
Ë
C⁄åﬁ
 
Regi°î


4116 
AT91C_SSC_IMR
 
	`EQU
 (0xFFFD404CË;- (
SSC
Ë
I¡îru±
 
Mask
 
Regi°î


4117 
AT91C_SSC_RFMR
 
	`EQU
 (0xFFFD4014Ë;- (
SSC
Ë
Re˚ive
 
Føme
 
Mode
 
Regi°î


4119 
AT91C_TWI_IER
 
	`EQU
 (0xFFFB8024Ë;- (
TWI
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4120 
AT91C_TWI_CR
 
	`EQU
 (0xFFFB8000Ë;- (
TWI
Ë
C⁄åﬁ
 
Regi°î


4121 
AT91C_TWI_SR
 
	`EQU
 (0xFFFB8020Ë;- (
TWI
Ë
Sètus
 
Regi°î


4122 
AT91C_TWI_IMR
 
	`EQU
 (0xFFFB802CË;- (
TWI
Ë
I¡îru±
 
Mask
 
Regi°î


4123 
AT91C_TWI_THR
 
	`EQU
 (0xFFFB8034Ë;- (
TWI
Ë
Tønsmô
 
Hﬁdög
 
Regi°î


4124 
AT91C_TWI_IDR
 
	`EQU
 (0xFFFB8028Ë;- (
TWI
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4125 
AT91C_TWI_IADR
 
	`EQU
 (0xFFFB800CË;- (
TWI
Ë
I¡î«l
 
Addªss
 
Regi°î


4126 
AT91C_TWI_MMR
 
	`EQU
 (0xFFFB8004Ë;- (
TWI
Ë
Ma°î
 
Mode
 
Regi°î


4127 
AT91C_TWI_CWGR
 
	`EQU
 (0xFFFB8010Ë;- (
TWI
Ë
Clock
 
Wavef‹m
 
Gíî©‹
 
Regi°î


4128 
AT91C_TWI_RHR
 
	`EQU
 (0xFFFB8030Ë;- (
TWI
Ë
Re˚ive
 
Hﬁdög
 
Regi°î


4130 
AT91C_PWMC_CH3_CUPDR
 
	`EQU
 (0xFFFCC270Ë;- (
PWMC_CH3
Ë
Ch™√l
 
Upd©e
 
Regi°î


4131 
AT91C_PWMC_CH3_Re£rved
 
	`EQU
 (0xFFFCC274Ë;- (
PWMC_CH3
Ë
Re£rved


4132 
AT91C_PWMC_CH3_CPRDR
 
	`EQU
 (0xFFFCC268Ë;- (
PWMC_CH3
Ë
Ch™√l
 
Pîiod
 
Regi°î


4133 
AT91C_PWMC_CH3_CDTYR
 
	`EQU
 (0xFFFCC264Ë;- (
PWMC_CH3
Ë
Ch™√l
 
Duty
 
Cy˛e
 
Regi°î


4134 
AT91C_PWMC_CH3_CCNTR
 
	`EQU
 (0xFFFCC26CË;- (
PWMC_CH3
Ë
Ch™√l
 
Cou¡î
 
Regi°î


4135 
AT91C_PWMC_CH3_CMR
 
	`EQU
 (0xFFFCC260Ë;- (
PWMC_CH3
Ë
Ch™√l
 
Mode
 
Regi°î


4137 
AT91C_PWMC_CH2_Re£rved
 
	`EQU
 (0xFFFCC254Ë;- (
PWMC_CH2
Ë
Re£rved


4138 
AT91C_PWMC_CH2_CMR
 
	`EQU
 (0xFFFCC240Ë;- (
PWMC_CH2
Ë
Ch™√l
 
Mode
 
Regi°î


4139 
AT91C_PWMC_CH2_CCNTR
 
	`EQU
 (0xFFFCC24CË;- (
PWMC_CH2
Ë
Ch™√l
 
Cou¡î
 
Regi°î


4140 
AT91C_PWMC_CH2_CPRDR
 
	`EQU
 (0xFFFCC248Ë;- (
PWMC_CH2
Ë
Ch™√l
 
Pîiod
 
Regi°î


4141 
AT91C_PWMC_CH2_CUPDR
 
	`EQU
 (0xFFFCC250Ë;- (
PWMC_CH2
Ë
Ch™√l
 
Upd©e
 
Regi°î


4142 
AT91C_PWMC_CH2_CDTYR
 
	`EQU
 (0xFFFCC244Ë;- (
PWMC_CH2
Ë
Ch™√l
 
Duty
 
Cy˛e
 
Regi°î


4144 
AT91C_PWMC_CH1_Re£rved
 
	`EQU
 (0xFFFCC234Ë;- (
PWMC_CH1
Ë
Re£rved


4145 
AT91C_PWMC_CH1_CUPDR
 
	`EQU
 (0xFFFCC230Ë;- (
PWMC_CH1
Ë
Ch™√l
 
Upd©e
 
Regi°î


4146 
AT91C_PWMC_CH1_CPRDR
 
	`EQU
 (0xFFFCC228Ë;- (
PWMC_CH1
Ë
Ch™√l
 
Pîiod
 
Regi°î


4147 
AT91C_PWMC_CH1_CCNTR
 
	`EQU
 (0xFFFCC22CË;- (
PWMC_CH1
Ë
Ch™√l
 
Cou¡î
 
Regi°î


4148 
AT91C_PWMC_CH1_CDTYR
 
	`EQU
 (0xFFFCC224Ë;- (
PWMC_CH1
Ë
Ch™√l
 
Duty
 
Cy˛e
 
Regi°î


4149 
AT91C_PWMC_CH1_CMR
 
	`EQU
 (0xFFFCC220Ë;- (
PWMC_CH1
Ë
Ch™√l
 
Mode
 
Regi°î


4151 
AT91C_PWMC_CH0_Re£rved
 
	`EQU
 (0xFFFCC214Ë;- (
PWMC_CH0
Ë
Re£rved


4152 
AT91C_PWMC_CH0_CPRDR
 
	`EQU
 (0xFFFCC208Ë;- (
PWMC_CH0
Ë
Ch™√l
 
Pîiod
 
Regi°î


4153 
AT91C_PWMC_CH0_CDTYR
 
	`EQU
 (0xFFFCC204Ë;- (
PWMC_CH0
Ë
Ch™√l
 
Duty
 
Cy˛e
 
Regi°î


4154 
AT91C_PWMC_CH0_CMR
 
	`EQU
 (0xFFFCC200Ë;- (
PWMC_CH0
Ë
Ch™√l
 
Mode
 
Regi°î


4155 
AT91C_PWMC_CH0_CUPDR
 
	`EQU
 (0xFFFCC210Ë;- (
PWMC_CH0
Ë
Ch™√l
 
Upd©e
 
Regi°î


4156 
AT91C_PWMC_CH0_CCNTR
 
	`EQU
 (0xFFFCC20CË;- (
PWMC_CH0
Ë
Ch™√l
 
Cou¡î
 
Regi°î


4158 
AT91C_PWMC_IDR
 
	`EQU
 (0xFFFCC014Ë;- (
PWMC
ËPWMC 
I¡îru±
 
DißbÀ
 
Regi°î


4159 
AT91C_PWMC_DIS
 
	`EQU
 (0xFFFCC008Ë;- (
PWMC
ËPWMC 
DißbÀ
 
Regi°î


4160 
AT91C_PWMC_IER
 
	`EQU
 (0xFFFCC010Ë;- (
PWMC
ËPWMC 
I¡îru±
 
E«bÀ
 
Regi°î


4161 
AT91C_PWMC_VR
 
	`EQU
 (0xFFFCC0FCË;- (
PWMC
ËPWMC 
Vîsi⁄
 
Regi°î


4162 
AT91C_PWMC_ISR
 
	`EQU
 (0xFFFCC01CË;- (
PWMC
ËPWMC 
I¡îru±
 
Sètus
 
Regi°î


4163 
AT91C_PWMC_SR
 
	`EQU
 (0xFFFCC00CË;- (
PWMC
ËPWMC 
Sètus
 
Regi°î


4164 
AT91C_PWMC_IMR
 
	`EQU
 (0xFFFCC018Ë;- (
PWMC
ËPWMC 
I¡îru±
 
Mask
 
Regi°î


4165 
AT91C_PWMC_MR
 
	`EQU
 (0xFFFCC000Ë;- (
PWMC
ËPWMC 
Mode
 
Regi°î


4166 
AT91C_PWMC_ENA
 
	`EQU
 (0xFFFCC004Ë;- (
PWMC
ËPWMC 
E«bÀ
 
Regi°î


4168 
AT91C_UDP_IMR
 
	`EQU
 (0xFFFB0018Ë;- (
UDP
Ë
I¡îru±
 
Mask
 
Regi°î


4169 
AT91C_UDP_FADDR
 
	`EQU
 (0xFFFB0008Ë;- (
UDP
Ë
Fun˘i⁄
 
Addªss
 
Regi°î


4170 
AT91C_UDP_NUM
 
	`EQU
 (0xFFFB0000Ë;- (
UDP
Ë
Føme
 
Numbî
 
Regi°î


4171 
AT91C_UDP_FDR
 
	`EQU
 (0xFFFB0050Ë;- (
UDP
Ë
Endpoöt
 
FIFO
 
D©a
 
Regi°î


4172 
AT91C_UDP_ISR
 
	`EQU
 (0xFFFB001CË;- (
UDP
Ë
I¡îru±
 
Sètus
 
Regi°î


4173 
AT91C_UDP_CSR
 
	`EQU
 (0xFFFB0030Ë;- (
UDP
Ë
Endpoöt
 
C⁄åﬁ
 
™d
 
Sètus
 
Regi°î


4174 
AT91C_UDP_IDR
 
	`EQU
 (0xFFFB0014Ë;- (
UDP
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4175 
AT91C_UDP_ICR
 
	`EQU
 (0xFFFB0020Ë;- (
UDP
Ë
I¡îru±
 
CÀ¨
 
Regi°î


4176 
AT91C_UDP_RSTEP
 
	`EQU
 (0xFFFB0028Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 
Regi°î


4177 
AT91C_UDP_TXVC
 
	`EQU
 (0xFFFB0074Ë;- (
UDP
Ë
Tøns˚ivî
 
C⁄åﬁ
 
Regi°î


4178 
AT91C_UDP_GLBSTATE
 
	`EQU
 (0xFFFB0004Ë;- (
UDP
Ë
GlobÆ
 
Sèã
 
Regi°î


4179 
AT91C_UDP_IER
 
	`EQU
 (0xFFFB0010Ë;- (
UDP
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4181 
AT91C_TC0_SR
 
	`EQU
 (0xFFFA0020Ë;- (
TC0
Ë
Sètus
 
Regi°î


4182 
AT91C_TC0_RC
 
	`EQU
 (0xFFFA001CË;- (
TC0
Ë
Regi°î
 
C


4183 
AT91C_TC0_RB
 
	`EQU
 (0xFFFA0018Ë;- (
TC0
Ë
Regi°î
 
B


4184 
AT91C_TC0_CCR
 
	`EQU
 (0xFFFA0000Ë;- (
TC0
Ë
Ch™√l
 
C⁄åﬁ
 
Regi°î


4185 
AT91C_TC0_CMR
 
	`EQU
 (0xFFFA0004Ë;- (
TC0
Ë
Ch™√l
 
Mode
 
	`Regi°î
 (
C≠tuª
 Modê/ 
Wavef‹m
 Mode)

4186 
AT91C_TC0_IER
 
	`EQU
 (0xFFFA0024Ë;- (
TC0
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4187 
AT91C_TC0_RA
 
	`EQU
 (0xFFFA0014Ë;- (
TC0
Ë
Regi°î
 
A


4188 
AT91C_TC0_IDR
 
	`EQU
 (0xFFFA0028Ë;- (
TC0
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4189 
AT91C_TC0_CV
 
	`EQU
 (0xFFFA0010Ë;- (
TC0
Ë
Cou¡î
 
VÆue


4190 
AT91C_TC0_IMR
 
	`EQU
 (0xFFFA002CË;- (
TC0
Ë
I¡îru±
 
Mask
 
Regi°î


4192 
AT91C_TC1_RB
 
	`EQU
 (0xFFFA0058Ë;- (
TC1
Ë
Regi°î
 
B


4193 
AT91C_TC1_CCR
 
	`EQU
 (0xFFFA0040Ë;- (
TC1
Ë
Ch™√l
 
C⁄åﬁ
 
Regi°î


4194 
AT91C_TC1_IER
 
	`EQU
 (0xFFFA0064Ë;- (
TC1
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4195 
AT91C_TC1_IDR
 
	`EQU
 (0xFFFA0068Ë;- (
TC1
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4196 
AT91C_TC1_SR
 
	`EQU
 (0xFFFA0060Ë;- (
TC1
Ë
Sètus
 
Regi°î


4197 
AT91C_TC1_CMR
 
	`EQU
 (0xFFFA0044Ë;- (
TC1
Ë
Ch™√l
 
Mode
 
	`Regi°î
 (
C≠tuª
 Modê/ 
Wavef‹m
 Mode)

4198 
AT91C_TC1_RA
 
	`EQU
 (0xFFFA0054Ë;- (
TC1
Ë
Regi°î
 
A


4199 
AT91C_TC1_RC
 
	`EQU
 (0xFFFA005CË;- (
TC1
Ë
Regi°î
 
C


4200 
AT91C_TC1_IMR
 
	`EQU
 (0xFFFA006CË;- (
TC1
Ë
I¡îru±
 
Mask
 
Regi°î


4201 
AT91C_TC1_CV
 
	`EQU
 (0xFFFA0050Ë;- (
TC1
Ë
Cou¡î
 
VÆue


4203 
AT91C_TC2_CMR
 
	`EQU
 (0xFFFA0084Ë;- (
TC2
Ë
Ch™√l
 
Mode
 
	`Regi°î
 (
C≠tuª
 Modê/ 
Wavef‹m
 Mode)

4204 
AT91C_TC2_CCR
 
	`EQU
 (0xFFFA0080Ë;- (
TC2
Ë
Ch™√l
 
C⁄åﬁ
 
Regi°î


4205 
AT91C_TC2_CV
 
	`EQU
 (0xFFFA0090Ë;- (
TC2
Ë
Cou¡î
 
VÆue


4206 
AT91C_TC2_RA
 
	`EQU
 (0xFFFA0094Ë;- (
TC2
Ë
Regi°î
 
A


4207 
AT91C_TC2_RB
 
	`EQU
 (0xFFFA0098Ë;- (
TC2
Ë
Regi°î
 
B


4208 
AT91C_TC2_IDR
 
	`EQU
 (0xFFFA00A8Ë;- (
TC2
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4209 
AT91C_TC2_IMR
 
	`EQU
 (0xFFFA00ACË;- (
TC2
Ë
I¡îru±
 
Mask
 
Regi°î


4210 
AT91C_TC2_RC
 
	`EQU
 (0xFFFA009CË;- (
TC2
Ë
Regi°î
 
C


4211 
AT91C_TC2_IER
 
	`EQU
 (0xFFFA00A4Ë;- (
TC2
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4212 
AT91C_TC2_SR
 
	`EQU
 (0xFFFA00A0Ë;- (
TC2
Ë
Sètus
 
Regi°î


4214 
AT91C_TCB_BMR
 
	`EQU
 (0xFFFA00C4Ë;- (
TCB
Ë
TC
 
Block
 
Mode
 
Regi°î


4215 
AT91C_TCB_BCR
 
	`EQU
 (0xFFFA00C0Ë;- (
TCB
Ë
TC
 
Block
 
C⁄åﬁ
 
Regi°î


4217 
AT91C_CAN_MB0_MDL
 
	`EQU
 (0xFFFD0214Ë;- (
CAN_MB0
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4218 
AT91C_CAN_MB0_MAM
 
	`EQU
 (0xFFFD0204Ë;- (
CAN_MB0
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4219 
AT91C_CAN_MB0_MCR
 
	`EQU
 (0xFFFD021CË;- (
CAN_MB0
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4220 
AT91C_CAN_MB0_MID
 
	`EQU
 (0xFFFD0208Ë;- (
CAN_MB0
Ë
MaûBox
 
ID
 
Regi°î


4221 
AT91C_CAN_MB0_MSR
 
	`EQU
 (0xFFFD0210Ë;- (
CAN_MB0
Ë
MaûBox
 
Sètus
 
Regi°î


4222 
AT91C_CAN_MB0_MFID
 
	`EQU
 (0xFFFD020CË;- (
CAN_MB0
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4223 
AT91C_CAN_MB0_MDH
 
	`EQU
 (0xFFFD0218Ë;- (
CAN_MB0
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4224 
AT91C_CAN_MB0_MMR
 
	`EQU
 (0xFFFD0200Ë;- (
CAN_MB0
Ë
MaûBox
 
Mode
 
Regi°î


4226 
AT91C_CAN_MB1_MDL
 
	`EQU
 (0xFFFD0234Ë;- (
CAN_MB1
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4227 
AT91C_CAN_MB1_MID
 
	`EQU
 (0xFFFD0228Ë;- (
CAN_MB1
Ë
MaûBox
 
ID
 
Regi°î


4228 
AT91C_CAN_MB1_MMR
 
	`EQU
 (0xFFFD0220Ë;- (
CAN_MB1
Ë
MaûBox
 
Mode
 
Regi°î


4229 
AT91C_CAN_MB1_MSR
 
	`EQU
 (0xFFFD0230Ë;- (
CAN_MB1
Ë
MaûBox
 
Sètus
 
Regi°î


4230 
AT91C_CAN_MB1_MAM
 
	`EQU
 (0xFFFD0224Ë;- (
CAN_MB1
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4231 
AT91C_CAN_MB1_MDH
 
	`EQU
 (0xFFFD0238Ë;- (
CAN_MB1
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4232 
AT91C_CAN_MB1_MCR
 
	`EQU
 (0xFFFD023CË;- (
CAN_MB1
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4233 
AT91C_CAN_MB1_MFID
 
	`EQU
 (0xFFFD022CË;- (
CAN_MB1
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4235 
AT91C_CAN_MB2_MCR
 
	`EQU
 (0xFFFD025CË;- (
CAN_MB2
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4236 
AT91C_CAN_MB2_MDH
 
	`EQU
 (0xFFFD0258Ë;- (
CAN_MB2
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4237 
AT91C_CAN_MB2_MID
 
	`EQU
 (0xFFFD0248Ë;- (
CAN_MB2
Ë
MaûBox
 
ID
 
Regi°î


4238 
AT91C_CAN_MB2_MDL
 
	`EQU
 (0xFFFD0254Ë;- (
CAN_MB2
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4239 
AT91C_CAN_MB2_MMR
 
	`EQU
 (0xFFFD0240Ë;- (
CAN_MB2
Ë
MaûBox
 
Mode
 
Regi°î


4240 
AT91C_CAN_MB2_MAM
 
	`EQU
 (0xFFFD0244Ë;- (
CAN_MB2
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4241 
AT91C_CAN_MB2_MFID
 
	`EQU
 (0xFFFD024CË;- (
CAN_MB2
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4242 
AT91C_CAN_MB2_MSR
 
	`EQU
 (0xFFFD0250Ë;- (
CAN_MB2
Ë
MaûBox
 
Sètus
 
Regi°î


4244 
AT91C_CAN_MB3_MFID
 
	`EQU
 (0xFFFD026CË;- (
CAN_MB3
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4245 
AT91C_CAN_MB3_MAM
 
	`EQU
 (0xFFFD0264Ë;- (
CAN_MB3
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4246 
AT91C_CAN_MB3_MID
 
	`EQU
 (0xFFFD0268Ë;- (
CAN_MB3
Ë
MaûBox
 
ID
 
Regi°î


4247 
AT91C_CAN_MB3_MCR
 
	`EQU
 (0xFFFD027CË;- (
CAN_MB3
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4248 
AT91C_CAN_MB3_MMR
 
	`EQU
 (0xFFFD0260Ë;- (
CAN_MB3
Ë
MaûBox
 
Mode
 
Regi°î


4249 
AT91C_CAN_MB3_MSR
 
	`EQU
 (0xFFFD0270Ë;- (
CAN_MB3
Ë
MaûBox
 
Sètus
 
Regi°î


4250 
AT91C_CAN_MB3_MDL
 
	`EQU
 (0xFFFD0274Ë;- (
CAN_MB3
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4251 
AT91C_CAN_MB3_MDH
 
	`EQU
 (0xFFFD0278Ë;- (
CAN_MB3
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4253 
AT91C_CAN_MB4_MID
 
	`EQU
 (0xFFFD0288Ë;- (
CAN_MB4
Ë
MaûBox
 
ID
 
Regi°î


4254 
AT91C_CAN_MB4_MMR
 
	`EQU
 (0xFFFD0280Ë;- (
CAN_MB4
Ë
MaûBox
 
Mode
 
Regi°î


4255 
AT91C_CAN_MB4_MDH
 
	`EQU
 (0xFFFD0298Ë;- (
CAN_MB4
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4256 
AT91C_CAN_MB4_MFID
 
	`EQU
 (0xFFFD028CË;- (
CAN_MB4
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4257 
AT91C_CAN_MB4_MSR
 
	`EQU
 (0xFFFD0290Ë;- (
CAN_MB4
Ë
MaûBox
 
Sètus
 
Regi°î


4258 
AT91C_CAN_MB4_MCR
 
	`EQU
 (0xFFFD029CË;- (
CAN_MB4
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4259 
AT91C_CAN_MB4_MDL
 
	`EQU
 (0xFFFD0294Ë;- (
CAN_MB4
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4260 
AT91C_CAN_MB4_MAM
 
	`EQU
 (0xFFFD0284Ë;- (
CAN_MB4
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4262 
AT91C_CAN_MB5_MSR
 
	`EQU
 (0xFFFD02B0Ë;- (
CAN_MB5
Ë
MaûBox
 
Sètus
 
Regi°î


4263 
AT91C_CAN_MB5_MCR
 
	`EQU
 (0xFFFD02BCË;- (
CAN_MB5
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4264 
AT91C_CAN_MB5_MFID
 
	`EQU
 (0xFFFD02ACË;- (
CAN_MB5
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4265 
AT91C_CAN_MB5_MDH
 
	`EQU
 (0xFFFD02B8Ë;- (
CAN_MB5
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4266 
AT91C_CAN_MB5_MID
 
	`EQU
 (0xFFFD02A8Ë;- (
CAN_MB5
Ë
MaûBox
 
ID
 
Regi°î


4267 
AT91C_CAN_MB5_MMR
 
	`EQU
 (0xFFFD02A0Ë;- (
CAN_MB5
Ë
MaûBox
 
Mode
 
Regi°î


4268 
AT91C_CAN_MB5_MDL
 
	`EQU
 (0xFFFD02B4Ë;- (
CAN_MB5
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4269 
AT91C_CAN_MB5_MAM
 
	`EQU
 (0xFFFD02A4Ë;- (
CAN_MB5
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4271 
AT91C_CAN_MB6_MFID
 
	`EQU
 (0xFFFD02CCË;- (
CAN_MB6
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4272 
AT91C_CAN_MB6_MID
 
	`EQU
 (0xFFFD02C8Ë;- (
CAN_MB6
Ë
MaûBox
 
ID
 
Regi°î


4273 
AT91C_CAN_MB6_MAM
 
	`EQU
 (0xFFFD02C4Ë;- (
CAN_MB6
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4274 
AT91C_CAN_MB6_MSR
 
	`EQU
 (0xFFFD02D0Ë;- (
CAN_MB6
Ë
MaûBox
 
Sètus
 
Regi°î


4275 
AT91C_CAN_MB6_MDL
 
	`EQU
 (0xFFFD02D4Ë;- (
CAN_MB6
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4276 
AT91C_CAN_MB6_MCR
 
	`EQU
 (0xFFFD02DCË;- (
CAN_MB6
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4277 
AT91C_CAN_MB6_MDH
 
	`EQU
 (0xFFFD02D8Ë;- (
CAN_MB6
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4278 
AT91C_CAN_MB6_MMR
 
	`EQU
 (0xFFFD02C0Ë;- (
CAN_MB6
Ë
MaûBox
 
Mode
 
Regi°î


4280 
AT91C_CAN_MB7_MCR
 
	`EQU
 (0xFFFD02FCË;- (
CAN_MB7
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4281 
AT91C_CAN_MB7_MDH
 
	`EQU
 (0xFFFD02F8Ë;- (
CAN_MB7
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4282 
AT91C_CAN_MB7_MFID
 
	`EQU
 (0xFFFD02ECË;- (
CAN_MB7
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4283 
AT91C_CAN_MB7_MDL
 
	`EQU
 (0xFFFD02F4Ë;- (
CAN_MB7
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4284 
AT91C_CAN_MB7_MID
 
	`EQU
 (0xFFFD02E8Ë;- (
CAN_MB7
Ë
MaûBox
 
ID
 
Regi°î


4285 
AT91C_CAN_MB7_MMR
 
	`EQU
 (0xFFFD02E0Ë;- (
CAN_MB7
Ë
MaûBox
 
Mode
 
Regi°î


4286 
AT91C_CAN_MB7_MAM
 
	`EQU
 (0xFFFD02E4Ë;- (
CAN_MB7
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4287 
AT91C_CAN_MB7_MSR
 
	`EQU
 (0xFFFD02F0Ë;- (
CAN_MB7
Ë
MaûBox
 
Sètus
 
Regi°î


4289 
AT91C_CAN_TCR
 
	`EQU
 (0xFFFD0024Ë;- (
CAN
Ë
Tøns„r
 
Comm™d
 
Regi°î


4290 
AT91C_CAN_IMR
 
	`EQU
 (0xFFFD000CË;- (
CAN
Ë
I¡îru±
 
Mask
 
Regi°î


4291 
AT91C_CAN_IER
 
	`EQU
 (0xFFFD0004Ë;- (
CAN
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4292 
AT91C_CAN_ECR
 
	`EQU
 (0xFFFD0020Ë;- (
CAN
Ë
Eº‹
 
Cou¡î
 
Regi°î


4293 
AT91C_CAN_TIMESTP
 
	`EQU
 (0xFFFD001CË;- (
CAN
Ë
Time
 
Sèmp
 
Regi°î


4294 
AT91C_CAN_MR
 
	`EQU
 (0xFFFD0000Ë;- (
CAN
Ë
Mode
 
Regi°î


4295 
AT91C_CAN_IDR
 
	`EQU
 (0xFFFD0008Ë;- (
CAN
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4296 
AT91C_CAN_ACR
 
	`EQU
 (0xFFFD0028Ë;- (
CAN
Ë
Ab‹t
 
Comm™d
 
Regi°î


4297 
AT91C_CAN_TIM
 
	`EQU
 (0xFFFD0018Ë;- (
CAN
Ë
Timî
 
Regi°î


4298 
AT91C_CAN_SR
 
	`EQU
 (0xFFFD0010Ë;- (
CAN
Ë
Sètus
 
Regi°î


4299 
AT91C_CAN_BR
 
	`EQU
 (0xFFFD0014Ë;- (
CAN
Ë
Baudøã
 
Regi°î


4300 
AT91C_CAN_VR
 
	`EQU
 (0xFFFD00FCË;- (
CAN
Ë
Vîsi⁄
 
Regi°î


4302 
AT91C_EMAC_ISR
 
	`EQU
 (0xFFFDC024Ë;- (
EMAC
Ë
I¡îru±
 
Sètus
 
Regi°î


4303 
AT91C_EMAC_SA4H
 
	`EQU
 (0xFFFDC0B4Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 4 
T›
, 
La°
 2 
byãs


4304 
AT91C_EMAC_SA1L
 
	`EQU
 (0xFFFDC098Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 1 
BŸtom
, 
Fú°
 4 
byãs


4305 
AT91C_EMAC_ELE
 
	`EQU
 (0xFFFDC078Ë;- (
EMAC
Ë
Ex˚ssive
 
Lígth
 
Eº‹s
 
Regi°î


4306 
AT91C_EMAC_LCOL
 
	`EQU
 (0xFFFDC05CË;- (
EMAC
Ë
L©e
 
Cﬁlisi⁄
 
Regi°î


4307 
AT91C_EMAC_RLE
 
	`EQU
 (0xFFFDC088Ë;- (
EMAC
Ë
Re˚ive
 
Lígth
 
Fõld
 
Mism©ch
 
Regi°î


4308 
AT91C_EMAC_WOL
 
	`EQU
 (0xFFFDC0C4Ë;- (
EMAC
Ë
Wake
 
On
 
LAN
 
Regi°î


4309 
AT91C_EMAC_DTF
 
	`EQU
 (0xFFFDC058Ë;- (
EMAC
Ë
De„ºed
 
Tønsmissi⁄
 
Føme
 
Regi°î


4310 
AT91C_EMAC_TUND
 
	`EQU
 (0xFFFDC064Ë;- (
EMAC
Ë
Tønsmô
 
Undîrun
 
Eº‹
 
Regi°î


4311 
AT91C_EMAC_NCR
 
	`EQU
 (0xFFFDC000Ë;- (
EMAC
Ë
Nëw‹k
 
C⁄åﬁ
 
Regi°î


4312 
AT91C_EMAC_SA4L
 
	`EQU
 (0xFFFDC0B0Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 4 
BŸtom
, 
Fú°
 4 
byãs


4313 
AT91C_EMAC_RSR
 
	`EQU
 (0xFFFDC020Ë;- (
EMAC
Ë
Re˚ive
 
Sètus
 
Regi°î


4314 
AT91C_EMAC_SA3L
 
	`EQU
 (0xFFFDC0A8Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 3 
BŸtom
, 
Fú°
 4 
byãs


4315 
AT91C_EMAC_TSR
 
	`EQU
 (0xFFFDC014Ë;- (
EMAC
Ë
Tønsmô
 
Sètus
 
Regi°î


4316 
AT91C_EMAC_IDR
 
	`EQU
 (0xFFFDC02CË;- (
EMAC
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4317 
AT91C_EMAC_RSE
 
	`EQU
 (0xFFFDC074Ë;- (
EMAC
Ë
Re˚ive
 
Symbﬁ
 
Eº‹s
 
Regi°î


4318 
AT91C_EMAC_ECOL
 
	`EQU
 (0xFFFDC060Ë;- (
EMAC
Ë
Ex˚ssive
 
Cﬁlisi⁄
 
Regi°î


4319 
AT91C_EMAC_TID
 
	`EQU
 (0xFFFDC0B8Ë;- (
EMAC
Ë
Ty≥
 
ID
 
Checkög
 
Regi°î


4320 
AT91C_EMAC_HRB
 
	`EQU
 (0xFFFDC090Ë;- (
EMAC
Ë
Hash
 
Addªss
 
BŸtom
[31:0]

4321 
AT91C_EMAC_TBQP
 
	`EQU
 (0xFFFDC01CË;- (
EMAC
Ë
Tønsmô
 
Buf„r
 
Queue
 
Poöãr


4322 
AT91C_EMAC_USRIO
 
	`EQU
 (0xFFFDC0C0Ë;- (
EMAC
Ë
USER
 
I≈ut
/
Ouçut
 
Regi°î


4323 
AT91C_EMAC_PTR
 
	`EQU
 (0xFFFDC038Ë;- (
EMAC
Ë
Pau£
 
Time
 
Regi°î


4324 
AT91C_EMAC_SA2H
 
	`EQU
 (0xFFFDC0A4Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 2 
T›
, 
La°
 2 
byãs


4325 
AT91C_EMAC_ROV
 
	`EQU
 (0xFFFDC070Ë;- (
EMAC
Ë
Re˚ive
 
Ovîrun
 
Eº‹s
 
Regi°î


4326 
AT91C_EMAC_ALE
 
	`EQU
 (0xFFFDC054Ë;- (
EMAC
Ë
Alignmít
 
Eº‹
 
Regi°î


4327 
AT91C_EMAC_RJA
 
	`EQU
 (0xFFFDC07CË;- (
EMAC
Ë
Re˚ive
 
Jabbîs
 
Regi°î


4328 
AT91C_EMAC_RBQP
 
	`EQU
 (0xFFFDC018Ë;- (
EMAC
Ë
Re˚ive
 
Buf„r
 
Queue
 
Poöãr


4329 
AT91C_EMAC_TPF
 
	`EQU
 (0xFFFDC08CË;- (
EMAC
Ë
Tønsmôãd
 
Pau£
 
Fømes
 
Regi°î


4330 
AT91C_EMAC_NCFGR
 
	`EQU
 (0xFFFDC004Ë;- (
EMAC
Ë
Nëw‹k
 
C⁄figuøti⁄
 
Regi°î


4331 
AT91C_EMAC_HRT
 
	`EQU
 (0xFFFDC094Ë;- (
EMAC
Ë
Hash
 
Addªss
 
T›
[63:32]

4332 
AT91C_EMAC_USF
 
	`EQU
 (0xFFFDC080Ë;- (
EMAC
Ë
Undîsize
 
Fømes
 
Regi°î


4333 
AT91C_EMAC_FCSE
 
	`EQU
 (0xFFFDC050Ë;- (
EMAC
Ë
Føme
 
Check
 
Sequí˚
 
Eº‹
 
Regi°î


4334 
AT91C_EMAC_TPQ
 
	`EQU
 (0xFFFDC0BCË;- (
EMAC
Ë
Tønsmô
 
Pau£
 
Qu™tum
 
Regi°î


4335 
AT91C_EMAC_MAN
 
	`EQU
 (0xFFFDC034Ë;- (
EMAC
Ë
PHY
 
Maöã«n˚
 
Regi°î


4336 
AT91C_EMAC_FTO
 
	`EQU
 (0xFFFDC040Ë;- (
EMAC
Ë
Fømes
 
Tønsmôãd
 
OK
 
Regi°î


4337 
AT91C_EMAC_REV
 
	`EQU
 (0xFFFDC0FCË;- (
EMAC
Ë
Revisi⁄
 
Regi°î


4338 
AT91C_EMAC_IMR
 
	`EQU
 (0xFFFDC030Ë;- (
EMAC
Ë
I¡îru±
 
Mask
 
Regi°î


4339 
AT91C_EMAC_SCF
 
	`EQU
 (0xFFFDC044Ë;- (
EMAC
Ë
SögÀ
 
Cﬁlisi⁄
 
Føme
 
Regi°î


4340 
AT91C_EMAC_PFR
 
	`EQU
 (0xFFFDC03CË;- (
EMAC
Ë
Pau£
 
Fømes
 
ª˚ived
 
Regi°î


4341 
AT91C_EMAC_MCF
 
	`EQU
 (0xFFFDC048Ë;- (
EMAC
Ë
Mu…ùÀ
 
Cﬁlisi⁄
 
Føme
 
Regi°î


4342 
AT91C_EMAC_NSR
 
	`EQU
 (0xFFFDC008Ë;- (
EMAC
Ë
Nëw‹k
 
Sètus
 
Regi°î


4343 
AT91C_EMAC_SA2L
 
	`EQU
 (0xFFFDC0A0Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 2 
BŸtom
, 
Fú°
 4 
byãs


4344 
AT91C_EMAC_FRO
 
	`EQU
 (0xFFFDC04CË;- (
EMAC
Ë
Fømes
 
Re˚ived
 
OK
 
Regi°î


4345 
AT91C_EMAC_IER
 
	`EQU
 (0xFFFDC028Ë;- (
EMAC
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4346 
AT91C_EMAC_SA1H
 
	`EQU
 (0xFFFDC09CË;- (
EMAC
Ë
S≥cific
 
Addªss
 1 
T›
, 
La°
 2 
byãs


4347 
AT91C_EMAC_CSE
 
	`EQU
 (0xFFFDC068Ë;- (
EMAC
Ë
C¨rõr
 
Sí£
 
Eº‹
 
Regi°î


4348 
AT91C_EMAC_SA3H
 
	`EQU
 (0xFFFDC0ACË;- (
EMAC
Ë
S≥cific
 
Addªss
 3 
T›
, 
La°
 2 
byãs


4349 
AT91C_EMAC_RRE
 
	`EQU
 (0xFFFDC06CË;- (
EMAC
Ë
Re˚ive
 
Ressour˚
 
Eº‹
 
Regi°î


4350 
AT91C_EMAC_STE
 
	`EQU
 (0xFFFDC084Ë;- (
EMAC
Ë
SQE
 
Te°
 
Eº‹
 
Regi°î


4352 
AT91C_ADC_PTSR
 
	`EQU
 (0xFFFD8124Ë;- (
PDC_ADC
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4353 
AT91C_ADC_PTCR
 
	`EQU
 (0xFFFD8120Ë;- (
PDC_ADC
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4354 
AT91C_ADC_TNPR
 
	`EQU
 (0xFFFD8118Ë;- (
PDC_ADC
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4355 
AT91C_ADC_TNCR
 
	`EQU
 (0xFFFD811CË;- (
PDC_ADC
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4356 
AT91C_ADC_RNPR
 
	`EQU
 (0xFFFD8110Ë;- (
PDC_ADC
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4357 
AT91C_ADC_RNCR
 
	`EQU
 (0xFFFD8114Ë;- (
PDC_ADC
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4358 
AT91C_ADC_RPR
 
	`EQU
 (0xFFFD8100Ë;- (
PDC_ADC
Ë
Re˚ive
 
Poöãr
 
Regi°î


4359 
AT91C_ADC_TCR
 
	`EQU
 (0xFFFD810CË;- (
PDC_ADC
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4360 
AT91C_ADC_TPR
 
	`EQU
 (0xFFFD8108Ë;- (
PDC_ADC
Ë
Tønsmô
 
Poöãr
 
Regi°î


4361 
AT91C_ADC_RCR
 
	`EQU
 (0xFFFD8104Ë;- (
PDC_ADC
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4363 
AT91C_ADC_CDR2
 
	`EQU
 (0xFFFD8038Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 2

4364 
AT91C_ADC_CDR3
 
	`EQU
 (0xFFFD803CË;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 3

4365 
AT91C_ADC_CDR0
 
	`EQU
 (0xFFFD8030Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 0

4366 
AT91C_ADC_CDR5
 
	`EQU
 (0xFFFD8044Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 5

4367 
AT91C_ADC_CHDR
 
	`EQU
 (0xFFFD8014Ë;- (
ADC
ËADC 
Ch™√l
 
DißbÀ
 
Regi°î


4368 
AT91C_ADC_SR
 
	`EQU
 (0xFFFD801CË;- (
ADC
ËADC 
Sètus
 
Regi°î


4369 
AT91C_ADC_CDR4
 
	`EQU
 (0xFFFD8040Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 4

4370 
AT91C_ADC_CDR1
 
	`EQU
 (0xFFFD8034Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 1

4371 
AT91C_ADC_LCDR
 
	`EQU
 (0xFFFD8020Ë;- (
ADC
ËADC 
La°
 
C⁄vîãd
 
D©a
 
Regi°î


4372 
AT91C_ADC_IDR
 
	`EQU
 (0xFFFD8028Ë;- (
ADC
ËADC 
I¡îru±
 
DißbÀ
 
Regi°î


4373 
AT91C_ADC_CR
 
	`EQU
 (0xFFFD8000Ë;- (
ADC
ËADC 
C⁄åﬁ
 
Regi°î


4374 
AT91C_ADC_CDR7
 
	`EQU
 (0xFFFD804CË;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 7

4375 
AT91C_ADC_CDR6
 
	`EQU
 (0xFFFD8048Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 6

4376 
AT91C_ADC_IER
 
	`EQU
 (0xFFFD8024Ë;- (
ADC
ËADC 
I¡îru±
 
E«bÀ
 
Regi°î


4377 
AT91C_ADC_CHER
 
	`EQU
 (0xFFFD8010Ë;- (
ADC
ËADC 
Ch™√l
 
E«bÀ
 
Regi°î


4378 
AT91C_ADC_CHSR
 
	`EQU
 (0xFFFD8018Ë;- (
ADC
ËADC 
Ch™√l
 
Sètus
 
Regi°î


4379 
AT91C_ADC_MR
 
	`EQU
 (0xFFFD8004Ë;- (
ADC
ËADC 
Mode
 
Regi°î


4380 
AT91C_ADC_IMR
 
	`EQU
 (0xFFFD802CË;- (
ADC
ËADC 
I¡îru±
 
Mask
 
Regi°î


4382 
AT91C_AES_TPR
 
	`EQU
 (0xFFFA4108Ë;- (
PDC_AES
Ë
Tønsmô
 
Poöãr
 
Regi°î


4383 
AT91C_AES_PTCR
 
	`EQU
 (0xFFFA4120Ë;- (
PDC_AES
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4384 
AT91C_AES_RNPR
 
	`EQU
 (0xFFFA4110Ë;- (
PDC_AES
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4385 
AT91C_AES_TNCR
 
	`EQU
 (0xFFFA411CË;- (
PDC_AES
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4386 
AT91C_AES_TCR
 
	`EQU
 (0xFFFA410CË;- (
PDC_AES
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4387 
AT91C_AES_RCR
 
	`EQU
 (0xFFFA4104Ë;- (
PDC_AES
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4388 
AT91C_AES_RNCR
 
	`EQU
 (0xFFFA4114Ë;- (
PDC_AES
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4389 
AT91C_AES_TNPR
 
	`EQU
 (0xFFFA4118Ë;- (
PDC_AES
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4390 
AT91C_AES_RPR
 
	`EQU
 (0xFFFA4100Ë;- (
PDC_AES
Ë
Re˚ive
 
Poöãr
 
Regi°î


4391 
AT91C_AES_PTSR
 
	`EQU
 (0xFFFA4124Ë;- (
PDC_AES
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4393 
AT91C_AES_IVxR
 
	`EQU
 (0xFFFA4060Ë;- (
AES
Ë
Inôüliz©i⁄
 
Ve˘‹
 
x
 
Regi°î


4394 
AT91C_AES_MR
 
	`EQU
 (0xFFFA4004Ë;- (
AES
Ë
Mode
 
Regi°î


4395 
AT91C_AES_VR
 
	`EQU
 (0xFFFA40FCË;- (
AES
ËAES 
Vîsi⁄
 
Regi°î


4396 
AT91C_AES_ODATAxR
 
	`EQU
 (0xFFFA4050Ë;- (
AES
Ë
Ouçut
 
D©a
 
x
 
Regi°î


4397 
AT91C_AES_IDATAxR
 
	`EQU
 (0xFFFA4040Ë;- (
AES
Ë
I≈ut
 
D©a
 
x
 
Regi°î


4398 
AT91C_AES_CR
 
	`EQU
 (0xFFFA4000Ë;- (
AES
Ë
C⁄åﬁ
 
Regi°î


4399 
AT91C_AES_IDR
 
	`EQU
 (0xFFFA4014Ë;- (
AES
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4400 
AT91C_AES_IMR
 
	`EQU
 (0xFFFA4018Ë;- (
AES
Ë
I¡îru±
 
Mask
 
Regi°î


4401 
AT91C_AES_IER
 
	`EQU
 (0xFFFA4010Ë;- (
AES
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4402 
AT91C_AES_KEYWxR
 
	`EQU
 (0xFFFA4020Ë;- (
AES
Ë
Key
 
W‹d
 
x
 
Regi°î


4403 
AT91C_AES_ISR
 
	`EQU
 (0xFFFA401CË;- (
AES
Ë
I¡îru±
 
Sètus
 
Regi°î


4405 
AT91C_TDES_RNCR
 
	`EQU
 (0xFFFA8114Ë;- (
PDC_TDES
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4406 
AT91C_TDES_TCR
 
	`EQU
 (0xFFFA810CË;- (
PDC_TDES
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4407 
AT91C_TDES_RCR
 
	`EQU
 (0xFFFA8104Ë;- (
PDC_TDES
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4408 
AT91C_TDES_TNPR
 
	`EQU
 (0xFFFA8118Ë;- (
PDC_TDES
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4409 
AT91C_TDES_RNPR
 
	`EQU
 (0xFFFA8110Ë;- (
PDC_TDES
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4410 
AT91C_TDES_RPR
 
	`EQU
 (0xFFFA8100Ë;- (
PDC_TDES
Ë
Re˚ive
 
Poöãr
 
Regi°î


4411 
AT91C_TDES_TNCR
 
	`EQU
 (0xFFFA811CË;- (
PDC_TDES
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4412 
AT91C_TDES_TPR
 
	`EQU
 (0xFFFA8108Ë;- (
PDC_TDES
Ë
Tønsmô
 
Poöãr
 
Regi°î


4413 
AT91C_TDES_PTSR
 
	`EQU
 (0xFFFA8124Ë;- (
PDC_TDES
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4414 
AT91C_TDES_PTCR
 
	`EQU
 (0xFFFA8120Ë;- (
PDC_TDES
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4416 
AT91C_TDES_KEY2WxR
 
	`EQU
 (0xFFFA8028Ë;- (
TDES
Ë
Key
 2 
W‹d
 
x
 
Regi°î


4417 
AT91C_TDES_KEY3WxR
 
	`EQU
 (0xFFFA8030Ë;- (
TDES
Ë
Key
 3 
W‹d
 
x
 
Regi°î


4418 
AT91C_TDES_IDR
 
	`EQU
 (0xFFFA8014Ë;- (
TDES
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4419 
AT91C_TDES_VR
 
	`EQU
 (0xFFFA80FCË;- (
TDES
ËTDES 
Vîsi⁄
 
Regi°î


4420 
AT91C_TDES_IVxR
 
	`EQU
 (0xFFFA8060Ë;- (
TDES
Ë
Inôüliz©i⁄
 
Ve˘‹
 
x
 
Regi°î


4421 
AT91C_TDES_ODATAxR
 
	`EQU
 (0xFFFA8050Ë;- (
TDES
Ë
Ouçut
 
D©a
 
x
 
Regi°î


4422 
AT91C_TDES_IMR
 
	`EQU
 (0xFFFA8018Ë;- (
TDES
Ë
I¡îru±
 
Mask
 
Regi°î


4423 
AT91C_TDES_MR
 
	`EQU
 (0xFFFA8004Ë;- (
TDES
Ë
Mode
 
Regi°î


4424 
AT91C_TDES_CR
 
	`EQU
 (0xFFFA8000Ë;- (
TDES
Ë
C⁄åﬁ
 
Regi°î


4425 
AT91C_TDES_IER
 
	`EQU
 (0xFFFA8010Ë;- (
TDES
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4426 
AT91C_TDES_ISR
 
	`EQU
 (0xFFFA801CË;- (
TDES
Ë
I¡îru±
 
Sètus
 
Regi°î


4427 
AT91C_TDES_IDATAxR
 
	`EQU
 (0xFFFA8040Ë;- (
TDES
Ë
I≈ut
 
D©a
 
x
 
Regi°î


4428 
AT91C_TDES_KEY1WxR
 
	`EQU
 (0xFFFA8020Ë;- (
TDES
Ë
Key
 1 
W‹d
 
x
 
Regi°î


4433 
AT91C_PIO_PA0
 
	`EQU
 (1 << 0Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA0


4434 
AT91C_PA0_RXD0
 
	`EQU
 (
AT91C_PIO_PA0
Ë;- 
USART
 0 
Re˚ive
 
D©a


4435 
AT91C_PIO_PA1
 
	`EQU
 (1 << 1Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA1


4436 
AT91C_PA1_TXD0
 
	`EQU
 (
AT91C_PIO_PA1
Ë;- 
USART
 0 
Tønsmô
 
D©a


4437 
AT91C_PIO_PA10
 
	`EQU
 (1 << 10Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA10


4438 
AT91C_PA10_TWD
 
	`EQU
 (
AT91C_PIO_PA10
Ë;- 
TWI
 
Two
-
wúe
 
Sîül
 
D©a


4439 
AT91C_PIO_PA11
 
	`EQU
 (1 << 11Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA11


4440 
AT91C_PA11_TWCK
 
	`EQU
 (
AT91C_PIO_PA11
Ë;- 
TWI
 
Two
-
wúe
 
Sîül
 
Clock


4441 
AT91C_PIO_PA12
 
	`EQU
 (1 << 12Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA12


4442 
AT91C_PA12_NPCS00
 
	`EQU
 (
AT91C_PIO_PA12
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 0

4443 
AT91C_PIO_PA13
 
	`EQU
 (1 << 13Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA13


4444 
AT91C_PA13_NPCS01
 
	`EQU
 (
AT91C_PIO_PA13
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4445 
AT91C_PA13_PCK1
 
	`EQU
 (
AT91C_PIO_PA13
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 1

4446 
AT91C_PIO_PA14
 
	`EQU
 (1 << 14Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA14


4447 
AT91C_PA14_NPCS02
 
	`EQU
 (
AT91C_PIO_PA14
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4448 
AT91C_PA14_IRQ1
 
	`EQU
 (
AT91C_PIO_PA14
Ë;- 
Exã∫Æ
 
I¡îru±
 1

4449 
AT91C_PIO_PA15
 
	`EQU
 (1 << 15Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA15


4450 
AT91C_PA15_NPCS03
 
	`EQU
 (
AT91C_PIO_PA15
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4451 
AT91C_PA15_TCLK2
 
	`EQU
 (
AT91C_PIO_PA15
Ë;- 
Timî
 
Cou¡î
 2 
exã∫Æ
 
˛ock
 
öput


4452 
AT91C_PIO_PA16
 
	`EQU
 (1 << 16Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA16


4453 
AT91C_PA16_MISO0
 
	`EQU
 (
AT91C_PIO_PA16
Ë;- 
SPI
 0 
Ma°î
 
In
 
Sœve


4454 
AT91C_PIO_PA17
 
	`EQU
 (1 << 17Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA17


4455 
AT91C_PA17_MOSI0
 
	`EQU
 (
AT91C_PIO_PA17
Ë;- 
SPI
 0 
Ma°î
 
Out
 
Sœve


4456 
AT91C_PIO_PA18
 
	`EQU
 (1 << 18Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA18


4457 
AT91C_PA18_SPCK0
 
	`EQU
 (
AT91C_PIO_PA18
Ë;- 
SPI
 0 
Sîül
 
Clock


4458 
AT91C_PIO_PA19
 
	`EQU
 (1 << 19Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA19


4459 
AT91C_PA19_CANRX
 
	`EQU
 (
AT91C_PIO_PA19
Ë;- 
CAN
 
Re˚ive


4460 
AT91C_PIO_PA2
 
	`EQU
 (1 << 2Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA2


4461 
AT91C_PA2_SCK0
 
	`EQU
 (
AT91C_PIO_PA2
Ë;- 
USART
 0 
Sîül
 
Clock


4462 
AT91C_PA2_NPCS11
 
	`EQU
 (
AT91C_PIO_PA2
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4463 
AT91C_PIO_PA20
 
	`EQU
 (1 << 20Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA20


4464 
AT91C_PA20_CANTX
 
	`EQU
 (
AT91C_PIO_PA20
Ë;- 
CAN
 
Tønsmô


4465 
AT91C_PIO_PA21
 
	`EQU
 (1 << 21Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA21


4466 
AT91C_PA21_TF
 
	`EQU
 (
AT91C_PIO_PA21
Ë;- 
SSC
 
Tønsmô
 
Føme
 
Sync


4467 
AT91C_PA21_NPCS10
 
	`EQU
 (
AT91C_PIO_PA21
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 0

4468 
AT91C_PIO_PA22
 
	`EQU
 (1 << 22Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA22


4469 
AT91C_PA22_TK
 
	`EQU
 (
AT91C_PIO_PA22
Ë;- 
SSC
 
Tønsmô
 
Clock


4470 
AT91C_PA22_SPCK1
 
	`EQU
 (
AT91C_PIO_PA22
Ë;- 
SPI
 1 
Sîül
 
Clock


4471 
AT91C_PIO_PA23
 
	`EQU
 (1 << 23Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA23


4472 
AT91C_PA23_TD
 
	`EQU
 (
AT91C_PIO_PA23
Ë;- 
SSC
 
Tønsmô
 
d©a


4473 
AT91C_PA23_MOSI1
 
	`EQU
 (
AT91C_PIO_PA23
Ë;- 
SPI
 1 
Ma°î
 
Out
 
Sœve


4474 
AT91C_PIO_PA24
 
	`EQU
 (1 << 24Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA24


4475 
AT91C_PA24_RD
 
	`EQU
 (
AT91C_PIO_PA24
Ë;- 
SSC
 
Re˚ive
 
D©a


4476 
AT91C_PA24_MISO1
 
	`EQU
 (
AT91C_PIO_PA24
Ë;- 
SPI
 1 
Ma°î
 
In
 
Sœve


4477 
AT91C_PIO_PA25
 
	`EQU
 (1 << 25Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA25


4478 
AT91C_PA25_RK
 
	`EQU
 (
AT91C_PIO_PA25
Ë;- 
SSC
 
Re˚ive
 
Clock


4479 
AT91C_PA25_NPCS11
 
	`EQU
 (
AT91C_PIO_PA25
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4480 
AT91C_PIO_PA26
 
	`EQU
 (1 << 26Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA26


4481 
AT91C_PA26_RF
 
	`EQU
 (
AT91C_PIO_PA26
Ë;- 
SSC
 
Re˚ive
 
Føme
 
Sync


4482 
AT91C_PA26_NPCS12
 
	`EQU
 (
AT91C_PIO_PA26
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4483 
AT91C_PIO_PA27
 
	`EQU
 (1 << 27Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA27


4484 
AT91C_PA27_DRXD
 
	`EQU
 (
AT91C_PIO_PA27
Ë;- 
DBGU
 
Debug
 
Re˚ive
 
D©a


4485 
AT91C_PA27_PCK3
 
	`EQU
 (
AT91C_PIO_PA27
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 3

4486 
AT91C_PIO_PA28
 
	`EQU
 (1 << 28Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA28


4487 
AT91C_PA28_DTXD
 
	`EQU
 (
AT91C_PIO_PA28
Ë;- 
DBGU
 
Debug
 
Tønsmô
 
D©a


4488 
AT91C_PIO_PA29
 
	`EQU
 (1 << 29Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA29


4489 
AT91C_PA29_FIQ
 
	`EQU
 (
AT91C_PIO_PA29
Ë;- 
AIC
 
Fa°
 
I¡îru±
 
I≈ut


4490 
AT91C_PA29_NPCS13
 
	`EQU
 (
AT91C_PIO_PA29
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4491 
AT91C_PIO_PA3
 
	`EQU
 (1 << 3Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA3


4492 
AT91C_PA3_RTS0
 
	`EQU
 (
AT91C_PIO_PA3
Ë;- 
USART
 0 
Ródy
 
To
 
Síd


4493 
AT91C_PA3_NPCS12
 
	`EQU
 (
AT91C_PIO_PA3
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4494 
AT91C_PIO_PA30
 
	`EQU
 (1 << 30Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA30


4495 
AT91C_PA30_IRQ0
 
	`EQU
 (
AT91C_PIO_PA30
Ë;- 
Exã∫Æ
 
I¡îru±
 0

4496 
AT91C_PA30_PCK2
 
	`EQU
 (
AT91C_PIO_PA30
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 2

4497 
AT91C_PIO_PA4
 
	`EQU
 (1 << 4Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA4


4498 
AT91C_PA4_CTS0
 
	`EQU
 (
AT91C_PIO_PA4
Ë;- 
USART
 0 
CÀ¨
 
To
 
Síd


4499 
AT91C_PA4_NPCS13
 
	`EQU
 (
AT91C_PIO_PA4
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4500 
AT91C_PIO_PA5
 
	`EQU
 (1 << 5Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA5


4501 
AT91C_PA5_RXD1
 
	`EQU
 (
AT91C_PIO_PA5
Ë;- 
USART
 1 
Re˚ive
 
D©a


4502 
AT91C_PIO_PA6
 
	`EQU
 (1 << 6Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA6


4503 
AT91C_PA6_TXD1
 
	`EQU
 (
AT91C_PIO_PA6
Ë;- 
USART
 1 
Tønsmô
 
D©a


4504 
AT91C_PIO_PA7
 
	`EQU
 (1 << 7Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA7


4505 
AT91C_PA7_SCK1
 
	`EQU
 (
AT91C_PIO_PA7
Ë;- 
USART
 1 
Sîül
 
Clock


4506 
AT91C_PA7_NPCS01
 
	`EQU
 (
AT91C_PIO_PA7
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4507 
AT91C_PIO_PA8
 
	`EQU
 (1 << 8Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA8


4508 
AT91C_PA8_RTS1
 
	`EQU
 (
AT91C_PIO_PA8
Ë;- 
USART
 1 
Ródy
 
To
 
Síd


4509 
AT91C_PA8_NPCS02
 
	`EQU
 (
AT91C_PIO_PA8
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4510 
AT91C_PIO_PA9
 
	`EQU
 (1 << 9Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA9


4511 
AT91C_PA9_CTS1
 
	`EQU
 (
AT91C_PIO_PA9
Ë;- 
USART
 1 
CÀ¨
 
To
 
Síd


4512 
AT91C_PA9_NPCS03
 
	`EQU
 (
AT91C_PIO_PA9
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4513 
AT91C_PIO_PB0
 
	`EQU
 (1 << 0Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB0


4514 
AT91C_PB0_ETXCK_EREFCK
 
	`EQU
 (
AT91C_PIO_PB0
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
Clock
/
Re„ªn˚
 Clock

4515 
AT91C_PB0_PCK0
 
	`EQU
 (
AT91C_PIO_PB0
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 0

4516 
AT91C_PIO_PB1
 
	`EQU
 (1 << 1Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB1


4517 
AT91C_PB1_ETXEN
 
	`EQU
 (
AT91C_PIO_PB1
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
E«bÀ


4518 
AT91C_PIO_PB10
 
	`EQU
 (1 << 10Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB10


4519 
AT91C_PB10_ETX2
 
	`EQU
 (
AT91C_PIO_PB10
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
D©a
 2

4520 
AT91C_PB10_NPCS11
 
	`EQU
 (
AT91C_PIO_PB10
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4521 
AT91C_PIO_PB11
 
	`EQU
 (1 << 11Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB11


4522 
AT91C_PB11_ETX3
 
	`EQU
 (
AT91C_PIO_PB11
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
D©a
 3

4523 
AT91C_PB11_NPCS12
 
	`EQU
 (
AT91C_PIO_PB11
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4524 
AT91C_PIO_PB12
 
	`EQU
 (1 << 12Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB12


4525 
AT91C_PB12_ETXER
 
	`EQU
 (
AT91C_PIO_PB12
Ë;- 
Ethî√t
 
MAC
 
Tønsmikt
 
Codög
 
Eº‹


4526 
AT91C_PB12_TCLK0
 
	`EQU
 (
AT91C_PIO_PB12
Ë;- 
Timî
 
Cou¡î
 0 
exã∫Æ
 
˛ock
 
öput


4527 
AT91C_PIO_PB13
 
	`EQU
 (1 << 13Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB13


4528 
AT91C_PB13_ERX2
 
	`EQU
 (
AT91C_PIO_PB13
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
D©a
 2

4529 
AT91C_PB13_NPCS01
 
	`EQU
 (
AT91C_PIO_PB13
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4530 
AT91C_PIO_PB14
 
	`EQU
 (1 << 14Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB14


4531 
AT91C_PB14_ERX3
 
	`EQU
 (
AT91C_PIO_PB14
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
D©a
 3

4532 
AT91C_PB14_NPCS02
 
	`EQU
 (
AT91C_PIO_PB14
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4533 
AT91C_PIO_PB15
 
	`EQU
 (1 << 15Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB15


4534 
AT91C_PB15_ERXDV
 
	`EQU
 (
AT91C_PIO_PB15
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
D©a
 
VÆid


4535 
AT91C_PIO_PB16
 
	`EQU
 (1 << 16Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB16


4536 
AT91C_PB16_ECOL
 
	`EQU
 (
AT91C_PIO_PB16
Ë;- 
Ethî√t
 
MAC
 
Cﬁlisi⁄
 
Dëe˘ed


4537 
AT91C_PB16_NPCS13
 
	`EQU
 (
AT91C_PIO_PB16
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4538 
AT91C_PIO_PB17
 
	`EQU
 (1 << 17Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB17


4539 
AT91C_PB17_ERXCK
 
	`EQU
 (
AT91C_PIO_PB17
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
Clock


4540 
AT91C_PB17_NPCS03
 
	`EQU
 (
AT91C_PIO_PB17
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4541 
AT91C_PIO_PB18
 
	`EQU
 (1 << 18Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB18


4542 
AT91C_PB18_EF100
 
	`EQU
 (
AT91C_PIO_PB18
Ë;- 
Ethî√t
 
MAC
 
F‹˚
 100 
Mbôs
/
£c


4543 
AT91C_PB18_ADTRG
 
	`EQU
 (
AT91C_PIO_PB18
Ë;- 
ADC
 
Exã∫Æ
 
Triggî


4544 
AT91C_PIO_PB19
 
	`EQU
 (1 << 19Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB19


4545 
AT91C_PB19_PWM0
 
	`EQU
 (
AT91C_PIO_PB19
Ë;- 
PWM
 
Ch™√l
 0

4546 
AT91C_PB19_TCLK1
 
	`EQU
 (
AT91C_PIO_PB19
Ë;- 
Timî
 
Cou¡î
 1 
exã∫Æ
 
˛ock
 
öput


4547 
AT91C_PIO_PB2
 
	`EQU
 (1 << 2Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB2


4548 
AT91C_PB2_ETX0
 
	`EQU
 (
AT91C_PIO_PB2
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
D©a
 0

4549 
AT91C_PIO_PB20
 
	`EQU
 (1 << 20Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB20


4550 
AT91C_PB20_PWM1
 
	`EQU
 (
AT91C_PIO_PB20
Ë;- 
PWM
 
Ch™√l
 1

4551 
AT91C_PB20_PCK0
 
	`EQU
 (
AT91C_PIO_PB20
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 0

4552 
AT91C_PIO_PB21
 
	`EQU
 (1 << 21Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB21


4553 
AT91C_PB21_PWM2
 
	`EQU
 (
AT91C_PIO_PB21
Ë;- 
PWM
 
Ch™√l
 2

4554 
AT91C_PB21_PCK1
 
	`EQU
 (
AT91C_PIO_PB21
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 1

4555 
AT91C_PIO_PB22
 
	`EQU
 (1 << 22Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB22


4556 
AT91C_PB22_PWM3
 
	`EQU
 (
AT91C_PIO_PB22
Ë;- 
PWM
 
Ch™√l
 3

4557 
AT91C_PB22_PCK2
 
	`EQU
 (
AT91C_PIO_PB22
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 2

4558 
AT91C_PIO_PB23
 
	`EQU
 (1 << 23Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB23


4559 
AT91C_PB23_TIOA0
 
	`EQU
 (
AT91C_PIO_PB23
Ë;- 
Timî
 
Cou¡î
 0 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
A


4560 
AT91C_PB23_DCD1
 
	`EQU
 (
AT91C_PIO_PB23
Ë;- 
USART
 1 
D©a
 
C¨rõr
 
Dëe˘


4561 
AT91C_PIO_PB24
 
	`EQU
 (1 << 24Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB24


4562 
AT91C_PB24_TIOB0
 
	`EQU
 (
AT91C_PIO_PB24
Ë;- 
Timî
 
Cou¡î
 0 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
B


4563 
AT91C_PB24_DSR1
 
	`EQU
 (
AT91C_PIO_PB24
Ë;- 
USART
 1 
D©a
 
Së
 
ªady


4564 
AT91C_PIO_PB25
 
	`EQU
 (1 << 25Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB25


4565 
AT91C_PB25_TIOA1
 
	`EQU
 (
AT91C_PIO_PB25
Ë;- 
Timî
 
Cou¡î
 1 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
A


4566 
AT91C_PB25_DTR1
 
	`EQU
 (
AT91C_PIO_PB25
Ë;- 
USART
 1 
D©a
 
TîmöÆ
 
ªady


4567 
AT91C_PIO_PB26
 
	`EQU
 (1 << 26Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB26


4568 
AT91C_PB26_TIOB1
 
	`EQU
 (
AT91C_PIO_PB26
Ë;- 
Timî
 
Cou¡î
 1 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
B


4569 
AT91C_PB26_RI1
 
	`EQU
 (
AT91C_PIO_PB26
Ë;- 
USART
 1 
Rög
 
Indiˇt‹


4570 
AT91C_PIO_PB27
 
	`EQU
 (1 << 27Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB27


4571 
AT91C_PB27_TIOA2
 
	`EQU
 (
AT91C_PIO_PB27
Ë;- 
Timî
 
Cou¡î
 2 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
A


4572 
AT91C_PB27_PWM0
 
	`EQU
 (
AT91C_PIO_PB27
Ë;- 
PWM
 
Ch™√l
 0

4573 
AT91C_PIO_PB28
 
	`EQU
 (1 << 28Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB28


4574 
AT91C_PB28_TIOB2
 
	`EQU
 (
AT91C_PIO_PB28
Ë;- 
Timî
 
Cou¡î
 2 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
B


4575 
AT91C_PB28_PWM1
 
	`EQU
 (
AT91C_PIO_PB28
Ë;- 
PWM
 
Ch™√l
 1

4576 
AT91C_PIO_PB29
 
	`EQU
 (1 << 29Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB29


4577 
AT91C_PB29_PCK1
 
	`EQU
 (
AT91C_PIO_PB29
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 1

4578 
AT91C_PB29_PWM2
 
	`EQU
 (
AT91C_PIO_PB29
Ë;- 
PWM
 
Ch™√l
 2

4579 
AT91C_PIO_PB3
 
	`EQU
 (1 << 3Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB3


4580 
AT91C_PB3_ETX1
 
	`EQU
 (
AT91C_PIO_PB3
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
D©a
 1

4581 
AT91C_PIO_PB30
 
	`EQU
 (1 << 30Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB30


4582 
AT91C_PB30_PCK2
 
	`EQU
 (
AT91C_PIO_PB30
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 2

4583 
AT91C_PB30_PWM3
 
	`EQU
 (
AT91C_PIO_PB30
Ë;- 
PWM
 
Ch™√l
 3

4584 
AT91C_PIO_PB4
 
	`EQU
 (1 << 4Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB4


4585 
AT91C_PB4_ECRS_ECRSDV
 
	`EQU
 (
AT91C_PIO_PB4
Ë;- 
Ethî√t
 
MAC
 
C¨rõr
 
Sí£
/C¨rõ∏Sí£ 
™d
 
D©a
 
VÆid


4586 
AT91C_PIO_PB5
 
	`EQU
 (1 << 5Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB5


4587 
AT91C_PB5_ERX0
 
	`EQU
 (
AT91C_PIO_PB5
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
D©a
 0

4588 
AT91C_PIO_PB6
 
	`EQU
 (1 << 6Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB6


4589 
AT91C_PB6_ERX1
 
	`EQU
 (
AT91C_PIO_PB6
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
D©a
 1

4590 
AT91C_PIO_PB7
 
	`EQU
 (1 << 7Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB7


4591 
AT91C_PB7_ERXER
 
	`EQU
 (
AT91C_PIO_PB7
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
Eº‹


4592 
AT91C_PIO_PB8
 
	`EQU
 (1 << 8Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB8


4593 
AT91C_PB8_EMDC
 
	`EQU
 (
AT91C_PIO_PB8
Ë;- 
Ethî√t
 
MAC
 
M™agemít
 
D©a
 
Clock


4594 
AT91C_PIO_PB9
 
	`EQU
 (1 << 9Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB9


4595 
AT91C_PB9_EMDIO
 
	`EQU
 (
AT91C_PIO_PB9
Ë;- 
Ethî√t
 
MAC
 
M™agemít
 
D©a
 
I≈ut
/
Ouçut


4600 
AT91C_ID_FIQ
 
	`EQU
 ( 0Ë;- 
Adv™˚d
 
I¡îru±
 
	$C⁄åﬁÀr
 (
FIQ
)

4601 
AT91C_ID_SYS
 
	`EQU
 ( 1Ë;- 
Sy°em
 
PîùhîÆ


4602 
AT91C_ID_PIOA
 
	`EQU
 ( 2Ë;- 
P¨ÆÀl
 
IO
 
C⁄åﬁÀr
 
A


4603 
AT91C_ID_PIOB
 
	`EQU
 ( 3Ë;- 
P¨ÆÀl
 
IO
 
C⁄åﬁÀr
 
B


4604 
AT91C_ID_SPI0
 
	`EQU
 ( 4Ë;- 
Sîül
 
PîùhîÆ
 
I¡îÁ˚
 0

4605 
AT91C_ID_SPI1
 
	`EQU
 ( 5Ë;- 
Sîül
 
PîùhîÆ
 
I¡îÁ˚
 1

4606 
AT91C_ID_US0
 
	`EQU
 ( 6Ë;- 
USART
 0

4607 
AT91C_ID_US1
 
	`EQU
 ( 7Ë;- 
USART
 1

4608 
AT91C_ID_SSC
 
	`EQU
 ( 8Ë;- 
Sîül
 
Synchr⁄ous
 
C⁄åﬁÀr


4609 
AT91C_ID_TWI
 
	`EQU
 ( 9Ë;- 
Two
-
Wúe
 
I¡îÁ˚


4610 
AT91C_ID_PWMC
 
	`EQU
 (10Ë;- 
PWM
 
C⁄åﬁÀr


4611 
AT91C_ID_UDP
 
	`EQU
 (11Ë;- 
USB
 
Devi˚
 
P‹t


4612 
AT91C_ID_TC0
 
	`EQU
 (12Ë;- 
Timî
 
Cou¡î
 0

4613 
AT91C_ID_TC1
 
	`EQU
 (13Ë;- 
Timî
 
Cou¡î
 1

4614 
AT91C_ID_TC2
 
	`EQU
 (14Ë;- 
Timî
 
Cou¡î
 2

4615 
AT91C_ID_CAN
 
	`EQU
 (15Ë;- 
C⁄åﬁ
 
Aªa
 
Nëw‹k
 
C⁄åﬁÀr


4616 
AT91C_ID_EMAC
 
	`EQU
 (16Ë;- 
Ethî√t
 
MAC


4617 
AT91C_ID_ADC
 
	`EQU
 (17Ë;- 
A«log
-
to
-
DigôÆ
 
C⁄vîãr


4618 
AT91C_ID_AES
 
	`EQU
 (18Ë;- 
Adv™˚d
 
En¸y±i⁄
 
Sènd¨d
 128-
bô


4619 
AT91C_ID_TDES
 
	`EQU
 (19Ë;- 
TrùÀ
 
D©a
 
En¸y±i⁄
 
Sènd¨d


4620 
AT91C_ID_20_Re£rved
 
	`EQU
 (20Ë;- 
Re£rved


4621 
AT91C_ID_21_Re£rved
 
	`EQU
 (21Ë;- 
Re£rved


4622 
AT91C_ID_22_Re£rved
 
	`EQU
 (22Ë;- 
Re£rved


4623 
AT91C_ID_23_Re£rved
 
	`EQU
 (23Ë;- 
Re£rved


4624 
AT91C_ID_24_Re£rved
 
	`EQU
 (24Ë;- 
Re£rved


4625 
AT91C_ID_25_Re£rved
 
	`EQU
 (25Ë;- 
Re£rved


4626 
AT91C_ID_26_Re£rved
 
	`EQU
 (26Ë;- 
Re£rved


4627 
AT91C_ID_27_Re£rved
 
	`EQU
 (27Ë;- 
Re£rved


4628 
AT91C_ID_28_Re£rved
 
	`EQU
 (28Ë;- 
Re£rved


4629 
AT91C_ID_29_Re£rved
 
	`EQU
 (29Ë;- 
Re£rved


4630 
AT91C_ID_IRQ0
 
	`EQU
 (30Ë;- 
Adv™˚d
 
I¡îru±
 
	$C⁄åﬁÀr
 (
IRQ0
)

4631 
AT91C_ID_IRQ1
 
	`EQU
 (31Ë;- 
Adv™˚d
 
I¡îru±
 
	$C⁄åﬁÀr
 (
IRQ1
)

4636 
AT91C_BASE_SYS
 
	`EQU
 (0xFFFFF000Ë;- (
SYS
Ë
Ba£
 
Addªss


4637 
AT91C_BASE_AIC
 
	`EQU
 (0xFFFFF000Ë;- (
AIC
Ë
Ba£
 
Addªss


4638 
AT91C_BASE_PDC_DBGU
 
	`EQU
 (0xFFFFF300Ë;- (
PDC_DBGU
Ë
Ba£
 
Addªss


4639 
AT91C_BASE_DBGU
 
	`EQU
 (0xFFFFF200Ë;- (
DBGU
Ë
Ba£
 
Addªss


4640 
AT91C_BASE_PIOA
 
	`EQU
 (0xFFFFF400Ë;- (
PIOA
Ë
Ba£
 
Addªss


4641 
AT91C_BASE_PIOB
 
	`EQU
 (0xFFFFF600Ë;- (
PIOB
Ë
Ba£
 
Addªss


4642 
AT91C_BASE_CKGR
 
	`EQU
 (0xFFFFFC20Ë;- (
CKGR
Ë
Ba£
 
Addªss


4643 
AT91C_BASE_PMC
 
	`EQU
 (0xFFFFFC00Ë;- (
PMC
Ë
Ba£
 
Addªss


4644 
AT91C_BASE_RSTC
 
	`EQU
 (0xFFFFFD00Ë;- (
RSTC
Ë
Ba£
 
Addªss


4645 
AT91C_BASE_RTTC
 
	`EQU
 (0xFFFFFD20Ë;- (
RTTC
Ë
Ba£
 
Addªss


4646 
AT91C_BASE_PITC
 
	`EQU
 (0xFFFFFD30Ë;- (
PITC
Ë
Ba£
 
Addªss


4647 
AT91C_BASE_WDTC
 
	`EQU
 (0xFFFFFD40Ë;- (
WDTC
Ë
Ba£
 
Addªss


4648 
AT91C_BASE_VREG
 
	`EQU
 (0xFFFFFD60Ë;- (
VREG
Ë
Ba£
 
Addªss


4649 
AT91C_BASE_MC
 
	`EQU
 (0xFFFFFF00Ë;- (
MC
Ë
Ba£
 
Addªss


4650 
AT91C_BASE_PDC_SPI1
 
	`EQU
 (0xFFFE4100Ë;- (
PDC_SPI1
Ë
Ba£
 
Addªss


4651 
AT91C_BASE_SPI1
 
	`EQU
 (0xFFFE4000Ë;- (
SPI1
Ë
Ba£
 
Addªss


4652 
AT91C_BASE_PDC_SPI0
 
	`EQU
 (0xFFFE0100Ë;- (
PDC_SPI0
Ë
Ba£
 
Addªss


4653 
AT91C_BASE_SPI0
 
	`EQU
 (0xFFFE0000Ë;- (
SPI0
Ë
Ba£
 
Addªss


4654 
AT91C_BASE_PDC_US1
 
	`EQU
 (0xFFFC4100Ë;- (
PDC_US1
Ë
Ba£
 
Addªss


4655 
AT91C_BASE_US1
 
	`EQU
 (0xFFFC4000Ë;- (
US1
Ë
Ba£
 
Addªss


4656 
AT91C_BASE_PDC_US0
 
	`EQU
 (0xFFFC0100Ë;- (
PDC_US0
Ë
Ba£
 
Addªss


4657 
AT91C_BASE_US0
 
	`EQU
 (0xFFFC0000Ë;- (
US0
Ë
Ba£
 
Addªss


4658 
AT91C_BASE_PDC_SSC
 
	`EQU
 (0xFFFD4100Ë;- (
PDC_SSC
Ë
Ba£
 
Addªss


4659 
AT91C_BASE_SSC
 
	`EQU
 (0xFFFD4000Ë;- (
SSC
Ë
Ba£
 
Addªss


4660 
AT91C_BASE_TWI
 
	`EQU
 (0xFFFB8000Ë;- (
TWI
Ë
Ba£
 
Addªss


4661 
AT91C_BASE_PWMC_CH3
 
	`EQU
 (0xFFFCC260Ë;- (
PWMC_CH3
Ë
Ba£
 
Addªss


4662 
AT91C_BASE_PWMC_CH2
 
	`EQU
 (0xFFFCC240Ë;- (
PWMC_CH2
Ë
Ba£
 
Addªss


4663 
AT91C_BASE_PWMC_CH1
 
	`EQU
 (0xFFFCC220Ë;- (
PWMC_CH1
Ë
Ba£
 
Addªss


4664 
AT91C_BASE_PWMC_CH0
 
	`EQU
 (0xFFFCC200Ë;- (
PWMC_CH0
Ë
Ba£
 
Addªss


4665 
AT91C_BASE_PWMC
 
	`EQU
 (0xFFFCC000Ë;- (
PWMC
Ë
Ba£
 
Addªss


4666 
AT91C_BASE_UDP
 
	`EQU
 (0xFFFB0000Ë;- (
UDP
Ë
Ba£
 
Addªss


4667 
AT91C_BASE_TC0
 
	`EQU
 (0xFFFA0000Ë;- (
TC0
Ë
Ba£
 
Addªss


4668 
AT91C_BASE_TC1
 
	`EQU
 (0xFFFA0040Ë;- (
TC1
Ë
Ba£
 
Addªss


4669 
AT91C_BASE_TC2
 
	`EQU
 (0xFFFA0080Ë;- (
TC2
Ë
Ba£
 
Addªss


4670 
AT91C_BASE_TCB
 
	`EQU
 (0xFFFA0000Ë;- (
TCB
Ë
Ba£
 
Addªss


4671 
AT91C_BASE_CAN_MB0
 
	`EQU
 (0xFFFD0200Ë;- (
CAN_MB0
Ë
Ba£
 
Addªss


4672 
AT91C_BASE_CAN_MB1
 
	`EQU
 (0xFFFD0220Ë;- (
CAN_MB1
Ë
Ba£
 
Addªss


4673 
AT91C_BASE_CAN_MB2
 
	`EQU
 (0xFFFD0240Ë;- (
CAN_MB2
Ë
Ba£
 
Addªss


4674 
AT91C_BASE_CAN_MB3
 
	`EQU
 (0xFFFD0260Ë;- (
CAN_MB3
Ë
Ba£
 
Addªss


4675 
AT91C_BASE_CAN_MB4
 
	`EQU
 (0xFFFD0280Ë;- (
CAN_MB4
Ë
Ba£
 
Addªss


4676 
AT91C_BASE_CAN_MB5
 
	`EQU
 (0xFFFD02A0Ë;- (
CAN_MB5
Ë
Ba£
 
Addªss


4677 
AT91C_BASE_CAN_MB6
 
	`EQU
 (0xFFFD02C0Ë;- (
CAN_MB6
Ë
Ba£
 
Addªss


4678 
AT91C_BASE_CAN_MB7
 
	`EQU
 (0xFFFD02E0Ë;- (
CAN_MB7
Ë
Ba£
 
Addªss


4679 
AT91C_BASE_CAN
 
	`EQU
 (0xFFFD0000Ë;- (
CAN
Ë
Ba£
 
Addªss


4680 
AT91C_BASE_EMAC
 
	`EQU
 (0xFFFDC000Ë;- (
EMAC
Ë
Ba£
 
Addªss


4681 
AT91C_BASE_PDC_ADC
 
	`EQU
 (0xFFFD8100Ë;- (
PDC_ADC
Ë
Ba£
 
Addªss


4682 
AT91C_BASE_ADC
 
	`EQU
 (0xFFFD8000Ë;- (
ADC
Ë
Ba£
 
Addªss


4683 
AT91C_BASE_PDC_AES
 
	`EQU
 (0xFFFA4100Ë;- (
PDC_AES
Ë
Ba£
 
Addªss


4684 
AT91C_BASE_AES
 
	`EQU
 (0xFFFA4000Ë;- (
AES
Ë
Ba£
 
Addªss


4685 
AT91C_BASE_PDC_TDES
 
	`EQU
 (0xFFFA8100Ë;- (
PDC_TDES
Ë
Ba£
 
Addªss


4686 
AT91C_BASE_TDES
 
	`EQU
 (0xFFFA8000Ë;- (
TDES
Ë
Ba£
 
Addªss


4691 
AT91C_ISRAM
 
	`EQU
 (0x00200000Ë;- 
I¡î«l
 
SRAM
 
ba£
 
addªss


4692 
AT91C_ISRAM_SIZE
 
	`EQU
 (0x00010000Ë;- 
I¡î«l
 
SRAM
 
size
 
ö
 
	$byã
 (64 
Kbyã
)

4693 
AT91C_IFLASH
 
	`EQU
 (0x00100000Ë;- 
I¡î«l
 
ROM
 
ba£
 
addªss


4694 
AT91C_IFLASH_SIZE
 
	`EQU
 (0x00040000Ë;- 
I¡î«l
 
ROM
 
size
 
ö
 
	$byã
 (256 
Kbyã
)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/lib_AT91SAM7X256.c

44 
	~"AT91SAM7X256.h
"

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/lib_AT91SAM7X256.h

43 #i‚de‡
lib_AT91SAM7X256_H


44 
	#lib_AT91SAM7X256_H


	)

49 
	#AT91C_AIC_BRANCH_OPCODE
 (((*) ()) 0xE51FFF20)

50 

	)

55 
__ölöe
 
AT91F_AIC_C⁄figuªIt
 (

56 
AT91PS_AIC
 
pAic
,

57 
úq_id
,

58 
¥i‹ôy
,

59 
§c_ty≥
,

60 (*
√wH™dÀr
) () )

62 
ﬁdH™dÀr
;

63 
mask
 ;

65 
ﬁdH™dÀr
 = 
pAic
->
AIC_SVR
[
úq_id
];

67 
mask
 = 0x1 << 
úq_id
 ;

69 
pAic
->
AIC_IDCR
 = 
mask
 ;

71 
pAic
->
AIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ;

73 
pAic
->
AIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ;

75 
pAic
->
AIC_ICCR
 = 
mask
 ;

77  
ﬁdH™dÀr
;

78 
	}
}

84 
__ölöe
 
	$AT91F_AIC_E«bÀIt
 (

85 
AT91PS_AIC
 
pAic
,

86 
úq_id
 )

89 
pAic
->
AIC_IECR
 = 0x1 << 
úq_id
 ;

90 
	}
}

96 
__ölöe
 
	$AT91F_AIC_DißbÀIt
 (

97 
AT91PS_AIC
 
pAic
,

98 
úq_id
 )

100 
mask
 = 0x1 << 
úq_id
;

102 
pAic
->
AIC_IDCR
 = 
mask
 ;

104 
pAic
->
AIC_ICCR
 = 
mask
 ;

105 
	}
}

111 
__ölöe
 
	$AT91F_AIC_CÀ¨It
 (

112 
AT91PS_AIC
 
pAic
,

113 
úq_id
)

116 
pAic
->
AIC_ICCR
 = (0x1 << 
úq_id
);

117 
	}
}

123 
__ölöe
 
	$AT91F_AIC_AcknowÀdgeIt
 (

124 
AT91PS_AIC
 
pAic
)

126 
pAic
->
AIC_EOICR
 =ÖAic->AIC_EOICR;

127 
	}
}

133 
__ölöe
 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
 (

134 *
pVe˘‹
,

135 (*
H™dÀr
) () )

137 
ﬁdVe˘‹
 = *
pVe˘‹
;

139 i‡((Ë
H™dÀr
 =(Ë
AT91C_AIC_BRANCH_OPCODE
)

140 *
pVe˘‹
 = (Ë
AT91C_AIC_BRANCH_OPCODE
;

142 *
pVe˘‹
 = (((((Ë
H™dÀr
) - (()ÖVector) - 0x8) >> 2) & 0x00FFFFFF) | 0xEA000000;

144  
ﬁdVe˘‹
;

145 
	}
}

151 
__ölöe
 
	$AT91F_AIC_Trig
 (

152 
AT91PS_AIC
 
pAic
,

153 
úq_id
)

155 
pAic
->
AIC_ISCR
 = (0x1 << 
úq_id
) ;

156 
	}
}

162 
__ölöe
 
	$AT91F_AIC_IsA˘ive
 (

163 
AT91PS_AIC
 
pAic
,

164 
úq_id
)

166  (
pAic
->
AIC_ISR
 & (0x1 << 
úq_id
));

167 
	}
}

173 
__ölöe
 
	$AT91F_AIC_IsPídög
 (

174 
AT91PS_AIC
 
pAic
,

175 
úq_id
)

177  (
pAic
->
AIC_IPR
 & (0x1 << 
úq_id
));

178 
	}
}

184 
__ölöe
 
AT91F_AIC_O≥n
(

185 
AT91PS_AIC
 
pAic
,

186 (*
IrqH™dÀr
) (),

187 (*
FiqH™dÀr
) (),

188 (*
DeÁu…H™dÀr
) (),

189 (*
SpuriousH™dÀr
) (),

190 
¥Ÿe˘Mode
)

192 
	gi
;

195 
	gi
 = 0; i < 32; ++i) {

196 
AT91F_AIC_DißbÀIt
(
pAic
, 
i
);

197 
AT91F_AIC_C⁄figuªIt
(
pAic
, 
i
, 
AT91C_AIC_PRIOR_LOWEST
, 
AT91C_AIC_SRCTYPE_HIGH_LEVEL
, 
DeÁu…H™dÀr
);

201 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x18, 
IrqH™dÀr
);

203 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x1C, 
FiqH™dÀr
);

205 
	gpAic
->
	gAIC_SPU
 = (Ë
SpuriousH™dÀr
;

206 
	gpAic
->
	gAIC_DCR
 = 
¥Ÿe˘Mode
;

215 
__ölöe
 
	$AT91F_PDC_SëNextRx
 (

216 
AT91PS_PDC
 
pPDC
,

217 *
addªss
,

218 
byãs
)

220 
pPDC
->
PDC_RNPR
 = (Ë
addªss
;

221 
pPDC
->
PDC_RNCR
 = 
byãs
;

222 
	}
}

228 
__ölöe
 
	$AT91F_PDC_SëNextTx
 (

229 
AT91PS_PDC
 
pPDC
,

230 *
addªss
,

231 
byãs
)

233 
pPDC
->
PDC_TNPR
 = (Ë
addªss
;

234 
pPDC
->
PDC_TNCR
 = 
byãs
;

235 
	}
}

241 
__ölöe
 
	$AT91F_PDC_SëRx
 (

242 
AT91PS_PDC
 
pPDC
,

243 *
addªss
,

244 
byãs
)

246 
pPDC
->
PDC_RPR
 = (Ë
addªss
;

247 
pPDC
->
PDC_RCR
 = 
byãs
;

248 
	}
}

254 
__ölöe
 
	$AT91F_PDC_SëTx
 (

255 
AT91PS_PDC
 
pPDC
,

256 *
addªss
,

257 
byãs
)

259 
pPDC
->
PDC_TPR
 = (Ë
addªss
;

260 
pPDC
->
PDC_TCR
 = 
byãs
;

261 
	}
}

267 
__ölöe
 
	$AT91F_PDC_E«bÀTx
 (

268 
AT91PS_PDC
 
pPDC
 )

270 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTEN
;

271 
	}
}

277 
__ölöe
 
	$AT91F_PDC_E«bÀRx
 (

278 
AT91PS_PDC
 
pPDC
 )

280 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTEN
;

281 
	}
}

287 
__ölöe
 
	$AT91F_PDC_DißbÀTx
 (

288 
AT91PS_PDC
 
pPDC
 )

290 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTDIS
;

291 
	}
}

297 
__ölöe
 
	$AT91F_PDC_DißbÀRx
 (

298 
AT91PS_PDC
 
pPDC
 )

300 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTDIS
;

301 
	}
}

307 
__ölöe
 
	$AT91F_PDC_IsTxEm±y
 (

308 
AT91PS_PDC
 
pPDC
 )

310  !(
pPDC
->
PDC_TCR
);

311 
	}
}

317 
__ölöe
 
	$AT91F_PDC_IsNextTxEm±y
 (

318 
AT91PS_PDC
 
pPDC
 )

320  !(
pPDC
->
PDC_TNCR
);

321 
	}
}

327 
__ölöe
 
	$AT91F_PDC_IsRxEm±y
 (

328 
AT91PS_PDC
 
pPDC
 )

330  !(
pPDC
->
PDC_RCR
);

331 
	}
}

337 
__ölöe
 
	$AT91F_PDC_IsNextRxEm±y
 (

338 
AT91PS_PDC
 
pPDC
 )

340  !(
pPDC
->
PDC_RNCR
);

341 
	}
}

347 
__ölöe
 
	$AT91F_PDC_O≥n
 (

348 
AT91PS_PDC
 
pPDC
)

351 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

352 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

355 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

356 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

357 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

358 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

361 
	`AT91F_PDC_E«bÀRx
(
pPDC
);

362 
	`AT91F_PDC_E«bÀTx
(
pPDC
);

363 
	}
}

369 
__ölöe
 
	$AT91F_PDC_Clo£
 (

370 
AT91PS_PDC
 
pPDC
)

373 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

374 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

377 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

378 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

379 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

380 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

382 
	}
}

388 
__ölöe
 
	$AT91F_PDC_SídFøme
(

389 
AT91PS_PDC
 
pPDC
,

390 *
pBuf„r
,

391 
szBuf„r
,

392 *
pNextBuf„r
,

393 
szNextBuf„r
 )

395 i‡(
	`AT91F_PDC_IsTxEm±y
(
pPDC
)) {

397 
	`AT91F_PDC_SëTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

398 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

401 i‡(
	`AT91F_PDC_IsNextTxEm±y
(
pPDC
)) {

403 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

410 
	}
}

416 
__ölöe
 
	$AT91F_PDC_Re˚iveFøme
 (

417 
AT91PS_PDC
 
pPDC
,

418 *
pBuf„r
,

419 
szBuf„r
,

420 *
pNextBuf„r
,

421 
szNextBuf„r
 )

423 i‡(
	`AT91F_PDC_IsRxEm±y
(
pPDC
)) {

425 
	`AT91F_PDC_SëRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

426 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

429 i‡(
	`AT91F_PDC_IsNextRxEm±y
(
pPDC
)) {

431 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

438 
	}
}

446 
__ölöe
 
	$AT91F_DBGU_I¡îru±E«bÀ
(

447 
AT91PS_DBGU
 
pDbgu
,

448 
Êag
)

450 
pDbgu
->
DBGU_IER
 = 
Êag
;

451 
	}
}

457 
__ölöe
 
	$AT91F_DBGU_I¡îru±DißbÀ
(

458 
AT91PS_DBGU
 
pDbgu
,

459 
Êag
)

461 
pDbgu
->
DBGU_IDR
 = 
Êag
;

462 
	}
}

468 
__ölöe
 
	$AT91F_DBGU_GëI¡îru±MaskSètus
(

469 
AT91PS_DBGU
 
pDbgu
)

471  
pDbgu
->
DBGU_IMR
;

472 
	}
}

478 
__ölöe
 
	$AT91F_DBGU_IsI¡îru±Masked
(

479 
AT91PS_DBGU
 
pDbgu
,

480 
Êag
)

482  (
	`AT91F_DBGU_GëI¡îru±MaskSètus
(
pDbgu
Ë& 
Êag
);

483 
	}
}

492 
__ölöe
 
	$AT91F_PIO_CfgPîùh
(

493 
AT91PS_PIO
 
pPio
,

494 
≥rùhAE«bÀ
,

495 
≥rùhBE«bÀ
)

498 
pPio
->
PIO_ASR
 = 
≥rùhAE«bÀ
;

499 
pPio
->
PIO_BSR
 = 
≥rùhBE«bÀ
;

500 
pPio
->
PIO_PDR
 = (
≥rùhAE«bÀ
 | 
≥rùhBE«bÀ
);

501 
	}
}

507 
__ölöe
 
	$AT91F_PIO_CfgOuçut
(

508 
AT91PS_PIO
 
pPio
,

509 
pioE«bÀ
)

511 
pPio
->
PIO_PER
 = 
pioE«bÀ
;

512 
pPio
->
PIO_OER
 = 
pioE«bÀ
;

513 
	}
}

519 
__ölöe
 
	$AT91F_PIO_CfgI≈ut
(

520 
AT91PS_PIO
 
pPio
,

521 
öputE«bÀ
)

524 
pPio
->
PIO_ODR
 = 
öputE«bÀ
;

525 
pPio
->
PIO_PER
 = 
öputE«bÀ
;

526 
	}
}

532 
__ölöe
 
	$AT91F_PIO_CfgO≥ndøö
(

533 
AT91PS_PIO
 
pPio
,

534 
mu…iDrvE«bÀ
)

537 
pPio
->
PIO_MDDR
 = ~
mu…iDrvE«bÀ
;

538 
pPio
->
PIO_MDER
 = 
mu…iDrvE«bÀ
;

539 
	}
}

545 
__ölöe
 
	$AT91F_PIO_CfgPuŒup
(

546 
AT91PS_PIO
 
pPio
,

547 
puŒupE«bÀ
)

550 
pPio
->
PIO_PPUDR
 = ~
puŒupE«bÀ
;

551 
pPio
->
PIO_PPUER
 = 
puŒupE«bÀ
;

552 
	}
}

558 
__ölöe
 
	$AT91F_PIO_CfgDúe˘Drive
(

559 
AT91PS_PIO
 
pPio
,

560 
dúe˘Drive
)

564 
pPio
->
PIO_OWDR
 = ~
dúe˘Drive
;

565 
pPio
->
PIO_OWER
 = 
dúe˘Drive
;

566 
	}
}

572 
__ölöe
 
	$AT91F_PIO_CfgI≈utFûãr
(

573 
AT91PS_PIO
 
pPio
,

574 
öputFûãr
)

578 
pPio
->
PIO_IFDR
 = ~
öputFûãr
;

579 
pPio
->
PIO_IFER
 = 
öputFûãr
;

580 
	}
}

586 
__ölöe
 
	$AT91F_PIO_GëI≈ut
(

587 
AT91PS_PIO
 
pPio
)

589  
pPio
->
PIO_PDSR
;

590 
	}
}

596 
__ölöe
 
	$AT91F_PIO_IsI≈utSë
(

597 
AT91PS_PIO
 
pPio
,

598 
Êag
)

600  (
	`AT91F_PIO_GëI≈ut
(
pPio
Ë& 
Êag
);

601 
	}
}

608 
__ölöe
 
	$AT91F_PIO_SëOuçut
(

609 
AT91PS_PIO
 
pPio
,

610 
Êag
)

612 
pPio
->
PIO_SODR
 = 
Êag
;

613 
	}
}

619 
__ölöe
 
	$AT91F_PIO_CÀ¨Ouçut
(

620 
AT91PS_PIO
 
pPio
,

621 
Êag
)

623 
pPio
->
PIO_CODR
 = 
Êag
;

624 
	}
}

630 
__ölöe
 
	$AT91F_PIO_F‹˚Ouçut
(

631 
AT91PS_PIO
 
pPio
,

632 
Êag
)

634 
pPio
->
PIO_ODSR
 = 
Êag
;

635 
	}
}

641 
__ölöe
 
	$AT91F_PIO_E«bÀ
(

642 
AT91PS_PIO
 
pPio
,

643 
Êag
)

645 
pPio
->
PIO_PER
 = 
Êag
;

646 
	}
}

652 
__ölöe
 
	$AT91F_PIO_DißbÀ
(

653 
AT91PS_PIO
 
pPio
,

654 
Êag
)

656 
pPio
->
PIO_PDR
 = 
Êag
;

657 
	}
}

663 
__ölöe
 
	$AT91F_PIO_GëSètus
(

664 
AT91PS_PIO
 
pPio
)

666  
pPio
->
PIO_PSR
;

667 
	}
}

673 
__ölöe
 
	$AT91F_PIO_IsSë
(

674 
AT91PS_PIO
 
pPio
,

675 
Êag
)

677  (
	`AT91F_PIO_GëSètus
(
pPio
Ë& 
Êag
);

678 
	}
}

684 
__ölöe
 
	$AT91F_PIO_OuçutE«bÀ
(

685 
AT91PS_PIO
 
pPio
,

686 
Êag
)

688 
pPio
->
PIO_OER
 = 
Êag
;

689 
	}
}

695 
__ölöe
 
	$AT91F_PIO_OuçutDißbÀ
(

696 
AT91PS_PIO
 
pPio
,

697 
Êag
)

699 
pPio
->
PIO_ODR
 = 
Êag
;

700 
	}
}

706 
__ölöe
 
	$AT91F_PIO_GëOuçutSètus
(

707 
AT91PS_PIO
 
pPio
)

709  
pPio
->
PIO_OSR
;

710 
	}
}

716 
__ölöe
 
	$AT91F_PIO_IsOuçutSë
(

717 
AT91PS_PIO
 
pPio
,

718 
Êag
)

720  (
	`AT91F_PIO_GëOuçutSètus
(
pPio
Ë& 
Êag
);

721 
	}
}

727 
__ölöe
 
	$AT91F_PIO_I≈utFûãrE«bÀ
(

728 
AT91PS_PIO
 
pPio
,

729 
Êag
)

731 
pPio
->
PIO_IFER
 = 
Êag
;

732 
	}
}

738 
__ölöe
 
	$AT91F_PIO_I≈utFûãrDißbÀ
(

739 
AT91PS_PIO
 
pPio
,

740 
Êag
)

742 
pPio
->
PIO_IFDR
 = 
Êag
;

743 
	}
}

749 
__ölöe
 
	$AT91F_PIO_GëI≈utFûãrSètus
(

750 
AT91PS_PIO
 
pPio
)

752  
pPio
->
PIO_IFSR
;

753 
	}
}

759 
__ölöe
 
	$AT91F_PIO_IsI≈utFûãrSë
(

760 
AT91PS_PIO
 
pPio
,

761 
Êag
)

763  (
	`AT91F_PIO_GëI≈utFûãrSètus
(
pPio
Ë& 
Êag
);

764 
	}
}

770 
__ölöe
 
	$AT91F_PIO_GëOuçutD©aSètus
(

771 
AT91PS_PIO
 
pPio
)

773  
pPio
->
PIO_ODSR
;

774 
	}
}

780 
__ölöe
 
	$AT91F_PIO_I¡îru±E«bÀ
(

781 
AT91PS_PIO
 
pPio
,

782 
Êag
)

784 
pPio
->
PIO_IER
 = 
Êag
;

785 
	}
}

791 
__ölöe
 
	$AT91F_PIO_I¡îru±DißbÀ
(

792 
AT91PS_PIO
 
pPio
,

793 
Êag
)

795 
pPio
->
PIO_IDR
 = 
Êag
;

796 
	}
}

802 
__ölöe
 
	$AT91F_PIO_GëI¡îru±MaskSètus
(

803 
AT91PS_PIO
 
pPio
)

805  
pPio
->
PIO_IMR
;

806 
	}
}

812 
__ölöe
 
	$AT91F_PIO_GëI¡îru±Sètus
(

813 
AT91PS_PIO
 
pPio
)

815  
pPio
->
PIO_ISR
;

816 
	}
}

822 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Masked
(

823 
AT91PS_PIO
 
pPio
,

824 
Êag
)

826  (
	`AT91F_PIO_GëI¡îru±MaskSètus
(
pPio
Ë& 
Êag
);

827 
	}
}

833 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Së
(

834 
AT91PS_PIO
 
pPio
,

835 
Êag
)

837  (
	`AT91F_PIO_GëI¡îru±Sètus
(
pPio
Ë& 
Êag
);

838 
	}
}

844 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîE«bÀ
(

845 
AT91PS_PIO
 
pPio
,

846 
Êag
)

848 
pPio
->
PIO_MDER
 = 
Êag
;

849 
	}
}

855 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîDißbÀ
(

856 
AT91PS_PIO
 
pPio
,

857 
Êag
)

859 
pPio
->
PIO_MDDR
 = 
Êag
;

860 
	}
}

866 
__ölöe
 
	$AT91F_PIO_GëMu…iDrivîSètus
(

867 
AT91PS_PIO
 
pPio
)

869  
pPio
->
PIO_MDSR
;

870 
	}
}

876 
__ölöe
 
	$AT91F_PIO_IsMu…iDrivîSë
(

877 
AT91PS_PIO
 
pPio
,

878 
Êag
)

880  (
	`AT91F_PIO_GëMu…iDrivîSètus
(
pPio
Ë& 
Êag
);

881 
	}
}

887 
__ölöe
 
	$AT91F_PIO_A_Regi°îSñe˘i⁄
(

888 
AT91PS_PIO
 
pPio
,

889 
Êag
)

891 
pPio
->
PIO_ASR
 = 
Êag
;

892 
	}
}

898 
__ölöe
 
	$AT91F_PIO_B_Regi°îSñe˘i⁄
(

899 
AT91PS_PIO
 
pPio
,

900 
Êag
)

902 
pPio
->
PIO_BSR
 = 
Êag
;

903 
	}
}

909 
__ölöe
 
	$AT91F_PIO_Gë_AB_Regi°îSètus
(

910 
AT91PS_PIO
 
pPio
)

912  
pPio
->
PIO_ABSR
;

913 
	}
}

919 
__ölöe
 
	$AT91F_PIO_IsAB_Regi°îSë
(

920 
AT91PS_PIO
 
pPio
,

921 
Êag
)

923  (
	`AT91F_PIO_Gë_AB_Regi°îSètus
(
pPio
Ë& 
Êag
);

924 
	}
}

930 
__ölöe
 
	$AT91F_PIO_OuçutWrôeE«bÀ
(

931 
AT91PS_PIO
 
pPio
,

932 
Êag
)

934 
pPio
->
PIO_OWER
 = 
Êag
;

935 
	}
}

941 
__ölöe
 
	$AT91F_PIO_OuçutWrôeDißbÀ
(

942 
AT91PS_PIO
 
pPio
,

943 
Êag
)

945 
pPio
->
PIO_OWDR
 = 
Êag
;

946 
	}
}

952 
__ölöe
 
	$AT91F_PIO_GëOuçutWrôeSètus
(

953 
AT91PS_PIO
 
pPio
)

955  
pPio
->
PIO_OWSR
;

956 
	}
}

962 
__ölöe
 
	$AT91F_PIO_IsOuçutWrôeSë
(

963 
AT91PS_PIO
 
pPio
,

964 
Êag
)

966  (
	`AT91F_PIO_GëOuçutWrôeSètus
(
pPio
Ë& 
Êag
);

967 
	}
}

973 
__ölöe
 
	$AT91F_PIO_GëCfgPuŒup
(

974 
AT91PS_PIO
 
pPio
)

976  
pPio
->
PIO_PPUSR
;

977 
	}
}

983 
__ölöe
 
	$AT91F_PIO_IsOuçutD©aSètusSë
(

984 
AT91PS_PIO
 
pPio
,

985 
Êag
)

987  (
	`AT91F_PIO_GëOuçutD©aSètus
(
pPio
Ë& 
Êag
);

988 
	}
}

994 
__ölöe
 
	$AT91F_PIO_IsCfgPuŒupSètusSë
(

995 
AT91PS_PIO
 
pPio
,

996 
Êag
)

998  (~
	`AT91F_PIO_GëCfgPuŒup
(
pPio
Ë& 
Êag
);

999 
	}
}

1008 
__ölöe
 
	$AT91F_PMC_CfgSysClkE«bÀReg
 (

1009 
AT91PS_PMC
 
pPMC
,

1010 
mode
)

1013 
pPMC
->
PMC_SCER
 = 
mode
;

1014 
	}
}

1020 
__ölöe
 
	$AT91F_PMC_CfgSysClkDißbÀReg
 (

1021 
AT91PS_PMC
 
pPMC
,

1022 
mode
)

1025 
pPMC
->
PMC_SCDR
 = 
mode
;

1026 
	}
}

1032 
__ölöe
 
	$AT91F_PMC_GëSysClkSètusReg
 (

1033 
AT91PS_PMC
 
pPMC


1036  
pPMC
->
PMC_SCSR
;

1037 
	}
}

1043 
__ölöe
 
	$AT91F_PMC_E«bÀPîùhClock
 (

1044 
AT91PS_PMC
 
pPMC
,

1045 
≥rùhIds
)

1047 
pPMC
->
PMC_PCER
 = 
≥rùhIds
;

1048 
	}
}

1054 
__ölöe
 
	$AT91F_PMC_DißbÀPîùhClock
 (

1055 
AT91PS_PMC
 
pPMC
,

1056 
≥rùhIds
)

1058 
pPMC
->
PMC_PCDR
 = 
≥rùhIds
;

1059 
	}
}

1065 
__ölöe
 
	$AT91F_PMC_GëPîùhClock
 (

1066 
AT91PS_PMC
 
pPMC
)

1068  
pPMC
->
PMC_PCSR
;

1069 
	}
}

1075 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscûœt‹Reg
 (

1076 
AT91PS_CKGR
 
pCKGR
,

1077 
mode
)

1079 
pCKGR
->
CKGR_MOR
 = 
mode
;

1080 
	}
}

1086 
__ölöe
 
	$AT91F_CKGR_GëMaöOscûœt‹Reg
 (

1087 
AT91PS_CKGR
 
pCKGR
)

1089  
pCKGR
->
CKGR_MOR
;

1090 
	}
}

1096 
__ölöe
 
	$AT91F_CKGR_E«bÀMaöOscûœt‹
(

1097 
AT91PS_CKGR
 
pCKGR
)

1099 
pCKGR
->
CKGR_MOR
 |
AT91C_CKGR_MOSCEN
;

1100 
	}
}

1106 
__ölöe
 
	$AT91F_CKGR_DißbÀMaöOscûœt‹
 (

1107 
AT91PS_CKGR
 
pCKGR
)

1109 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_MOSCEN
;

1110 
	}
}

1116 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscSèπUpTime
 (

1117 
AT91PS_CKGR
 
pCKGR
,

1118 
°¨tup_time
,

1119 
¶owClock
)

1121 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_OSCOUNT
;

1122 
pCKGR
->
CKGR_MOR
 |((
¶owClock
 * 
°¨tup_time
)/(8*1000000)) << 8;

1123 
	}
}

1129 
__ölöe
 
	$AT91F_CKGR_GëMaöClockFªqReg
 (

1130 
AT91PS_CKGR
 
pCKGR
)

1132  
pCKGR
->
CKGR_MCFR
;

1133 
	}
}

1139 
__ölöe
 
	$AT91F_CKGR_GëMaöClock
 (

1140 
AT91PS_CKGR
 
pCKGR
,

1141 
¶owClock
)

1143  ((
pCKGR
->
CKGR_MCFR
 & 
AT91C_CKGR_MAINF
Ë* 
¶owClock
) >> 4;

1144 
	}
}

1150 
__ölöe
 
	$AT91F_PMC_CfgMCKReg
 (

1151 
AT91PS_PMC
 
pPMC
,

1152 
mode
)

1154 
pPMC
->
PMC_MCKR
 = 
mode
;

1155 
	}
}

1161 
__ölöe
 
	$AT91F_PMC_GëMCKReg
(

1162 
AT91PS_PMC
 
pPMC
)

1164  
pPMC
->
PMC_MCKR
;

1165 
	}
}

1171 
__ölöe
 
	$AT91F_PMC_GëMa°îClock
 (

1172 
AT91PS_PMC
 
pPMC
,

1173 
AT91PS_CKGR
 
pCKGR
,

1174 
¶owClock
)

1176 
ªg
 = 
pPMC
->
PMC_MCKR
;

1177 
¥esˇÀr
 = (1 << ((
ªg
 & 
AT91C_PMC_PRES
) >> 2));

1178 
∂lDividî
, 
∂lMu…ùlõr
;

1180 
ªg
 & 
AT91C_PMC_CSS
) {

1181 
AT91C_PMC_CSS_SLOW_CLK
:

1182  
¶owClock
 / 
¥esˇÀr
;

1183 
AT91C_PMC_CSS_MAIN_CLK
:

1184  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
¥esˇÀr
;

1185 
AT91C_PMC_CSS_PLL_CLK
:

1186 
ªg
 = 
pCKGR
->
CKGR_PLLR
;

1187 
∂lDividî
 = (
ªg
 & 
AT91C_CKGR_DIV
);

1188 
∂lMu…ùlõr
 = ((
ªg
 & 
AT91C_CKGR_MUL
) >> 16) + 1;

1189  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

1192 
	}
}

1198 
__ölöe
 
	$AT91F_PMC_E«bÀPCK
 (

1199 
AT91PS_PMC
 
pPMC
,

1200 
pck
,

1201 
mode
)

1203 
pPMC
->
PMC_PCKR
[
pck
] = 
mode
;

1204 
pPMC
->
PMC_SCER
 = (1 << 
pck
) << 8;

1205 
	}
}

1211 
__ölöe
 
	$AT91F_PMC_DißbÀPCK
 (

1212 
AT91PS_PMC
 
pPMC
,

1213 
pck
)

1215 
pPMC
->
PMC_SCDR
 = (1 << 
pck
) << 8;

1216 
	}
}

1222 
__ölöe
 
	$AT91F_PMC_E«bÀIt
 (

1223 
AT91PS_PMC
 
pPMC
,

1224 
Êag
)

1227 
pPMC
->
PMC_IER
 = 
Êag
;

1228 
	}
}

1234 
__ölöe
 
	$AT91F_PMC_DißbÀIt
 (

1235 
AT91PS_PMC
 
pPMC
,

1236 
Êag
)

1239 
pPMC
->
PMC_IDR
 = 
Êag
;

1240 
	}
}

1246 
__ölöe
 
	$AT91F_PMC_GëSètus
(

1247 
AT91PS_PMC
 
pPMC
)

1249  
pPMC
->
PMC_SR
;

1250 
	}
}

1256 
__ölöe
 
	$AT91F_PMC_GëI¡îru±MaskSètus
(

1257 
AT91PS_PMC
 
pPMC
)

1259  
pPMC
->
PMC_IMR
;

1260 
	}
}

1266 
__ölöe
 
	$AT91F_PMC_IsI¡îru±Masked
(

1267 
AT91PS_PMC
 
pPMC
,

1268 
Êag
)

1270  (
	`AT91F_PMC_GëI¡îru±MaskSètus
(
pPMC
Ë& 
Êag
);

1271 
	}
}

1277 
__ölöe
 
	$AT91F_PMC_IsSètusSë
(

1278 
AT91PS_PMC
 
pPMC
,

1279 
Êag
)

1281  (
	`AT91F_PMC_GëSètus
(
pPMC
Ë& 
Êag
);

1282 
	}
}

1289 
__ölöe
 
	$AT91F_RSTSo·Re£t
(

1290 
AT91PS_RSTC
 
pRSTC
,

1291 
ª£t
)

1293 
pRSTC
->
RSTC_RCR
 = (0xA5000000 | 
ª£t
);

1294 
	}
}

1300 
__ölöe
 
	$AT91F_RSTSëMode
(

1301 
AT91PS_RSTC
 
pRSTC
,

1302 
mode
)

1304 
pRSTC
->
RSTC_RMR
 = (0xA5000000 | 
mode
);

1305 
	}
}

1311 
__ölöe
 
	$AT91F_RSTGëMode
(

1312 
AT91PS_RSTC
 
pRSTC
)

1314  (
pRSTC
->
RSTC_RMR
);

1315 
	}
}

1321 
__ölöe
 
	$AT91F_RSTGëSètus
(

1322 
AT91PS_RSTC
 
pRSTC
)

1324  (
pRSTC
->
RSTC_RSR
);

1325 
	}
}

1331 
__ölöe
 
	$AT91F_RSTIsSo·R°A˘ive
(

1332 
AT91PS_RSTC
 
pRSTC
)

1334  ((
pRSTC
->
RSTC_RSR
Ë& 
AT91C_RSTC_SRCMP
);

1335 
	}
}

1343 
__ölöe
 
	$AT91F_RTTSëTimeBa£
(

1344 
AT91PS_RTTC
 
pRTTC
,

1345 
ms
)

1347 i‡(
ms
 > 2000)

1349 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1350 
pRTTC
->
RTTC_RTMR
 |(((
ms
 << 15) /1000) & 0xFFFF);

1352 
	}
}

1358 
__ölöe
 
	$AT91F_RTTSëPªsˇÀr
(

1359 
AT91PS_RTTC
 
pRTTC
,

1360 
π¥es
)

1362 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1363 
pRTTC
->
RTTC_RTMR
 |(
π¥es
 & 0xFFFF);

1364  (
pRTTC
->
RTTC_RTMR
);

1365 
	}
}

1371 
__ölöe
 
	$AT91F_RTTRe°¨t
(

1372 
AT91PS_RTTC
 
pRTTC
)

1374 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTRST
;

1375 
	}
}

1382 
__ölöe
 
	$AT91F_RTTSëAœrmINT
(

1383 
AT91PS_RTTC
 
pRTTC
)

1385 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_ALMIEN
;

1386 
	}
}

1392 
__ölöe
 
	$AT91F_RTTCÀ¨AœrmINT
(

1393 
AT91PS_RTTC
 
pRTTC
)

1395 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_ALMIEN
;

1396 
	}
}

1402 
__ölöe
 
	$AT91F_RTTSëRâIncINT
(

1403 
AT91PS_RTTC
 
pRTTC
)

1405 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTINCIEN
;

1406 
	}
}

1412 
__ölöe
 
	$AT91F_RTTCÀ¨RâIncINT
(

1413 
AT91PS_RTTC
 
pRTTC
)

1415 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_RTTINCIEN
;

1416 
	}
}

1422 
__ölöe
 
	$AT91F_RTTSëAœrmVÆue
(

1423 
AT91PS_RTTC
 
pRTTC
, 
Æ¨m
)

1425 
pRTTC
->
RTTC_RTAR
 = 
Æ¨m
;

1426 
	}
}

1432 
__ölöe
 
	$AT91F_RTTGëAœrmVÆue
(

1433 
AT91PS_RTTC
 
pRTTC
)

1435 (
pRTTC
->
RTTC_RTAR
);

1436 
	}
}

1442 
__ölöe
 
	$AT91F_RTTGëSètus
(

1443 
AT91PS_RTTC
 
pRTTC
)

1445 (
pRTTC
->
RTTC_RTSR
);

1446 
	}
}

1452 
__ölöe
 
	$AT91F_RTTRódVÆue
(

1453 
AT91PS_RTTC
 
pRTTC
)

1455 vﬁ©ûê
vÆ1
,
vÆ2
;

1458 
vÆ1
 = 
pRTTC
->
RTTC_RTVR
;

1459 
vÆ2
 = 
pRTTC
->
RTTC_RTVR
;

1461 
vÆ1
 !
vÆ2
);

1462 (
vÆ1
);

1463 
	}
}

1471 
__ölöe
 
	$AT91F_PITInô
(

1472 
AT91PS_PITC
 
pPITC
,

1473 
≥riod
,

1474 
pô_‰equícy
)

1476 
pPITC
->
PITC_PIMR
 = 
≥riod
? (≥riod * 
pô_‰equícy
 + 8) >> 4 : 0;

1477 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITEN
;

1478 
	}
}

1484 
__ölöe
 
	$AT91F_PITSëPIV
(

1485 
AT91PS_PITC
 
pPITC
,

1486 
piv
)

1488 
pPITC
->
PITC_PIMR
 = 
piv
 | (pPITC->PITC_PIMR & (
AT91C_PITC_PITEN
 | 
AT91C_PITC_PITIEN
));

1489 
	}
}

1495 
__ölöe
 
	$AT91F_PITE«bÀI¡
(

1496 
AT91PS_PITC
 
pPITC
)

1498 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITIEN
;

1499 
	}
}

1505 
__ölöe
 
	$AT91F_PITDißbÀI¡
(

1506 
AT91PS_PITC
 
pPITC
)

1508 
pPITC
->
PITC_PIMR
 &~
AT91C_PITC_PITIEN
;

1509 
	}
}

1515 
__ölöe
 
	$AT91F_PITGëMode
(

1516 
AT91PS_PITC
 
pPITC
)

1518 (
pPITC
->
PITC_PIMR
);

1519 
	}
}

1525 
__ölöe
 
	$AT91F_PITGëSètus
(

1526 
AT91PS_PITC
 
pPITC
)

1528 (
pPITC
->
PITC_PISR
);

1529 
	}
}

1535 
__ölöe
 
	$AT91F_PITGëPIIR
(

1536 
AT91PS_PITC
 
pPITC
)

1538 (
pPITC
->
PITC_PIIR
);

1539 
	}
}

1545 
__ölöe
 
	$AT91F_PITGëPIVR
(

1546 
AT91PS_PITC
 
pPITC
)

1548 (
pPITC
->
PITC_PIVR
);

1549 
	}
}

1557 
__ölöe
 
	$AT91F_WDTSëMode
(

1558 
AT91PS_WDTC
 
pWDTC
,

1559 
Mode
)

1561 
pWDTC
->
WDTC_WDMR
 = 
Mode
;

1562 
	}
}

1568 
__ölöe
 
	$AT91F_WDTRe°¨t
(

1569 
AT91PS_WDTC
 
pWDTC
)

1571 
pWDTC
->
WDTC_WDCR
 = 0xA5000001;

1572 
	}
}

1578 
__ölöe
 
	$AT91F_WDTSGëètus
(

1579 
AT91PS_WDTC
 
pWDTC
)

1581 (
pWDTC
->
WDTC_WDSR
 & 0x3);

1582 
	}
}

1588 
__ölöe
 
	$AT91F_WDTGëPîiod
(
ms
)

1590 i‡((
ms
 < 4) || (ms > 16000))

1592 ((
ms
 << 8) / 1000);

1593 
	}
}

1601 
__ölöe
 
	$AT91F_VREG_E«bÀ_LowPowîMode
(

1602 
AT91PS_VREG
 
pVREG
)

1604 
pVREG
->
VREG_MR
 |
AT91C_VREG_PSTDBY
;

1605 
	}
}

1611 
__ölöe
 
	$AT91F_VREG_DißbÀ_LowPowîMode
(

1612 
AT91PS_VREG
 
pVREG
)

1614 
pVREG
->
VREG_MR
 &~
AT91C_VREG_PSTDBY
;

1615 
	}
}

1619 
	#AT91C_MC_CORRECT_KEY
 (() 0x5A << 24)

1620 

	)

1625 
__ölöe
 
	$AT91F_MC_Rem≠
 ()

1627 
AT91PS_MC
 
pMC
 = (AT91PS_MCË
AT91C_BASE_MC
;

1629 
pMC
->
MC_RCR
 = 
AT91C_MC_RCB
;

1630 
	}
}

1636 
__ölöe
 
	$AT91F_MC_EFC_CfgModeReg
 (

1637 
AT91PS_MC
 
pMC
,

1638 
mode
)

1641 
pMC
->
MC_FMR
 = 
mode
;

1642 
	}
}

1648 
__ölöe
 
	$AT91F_MC_EFC_GëModeReg
(

1649 
AT91PS_MC
 
pMC
)

1651  
pMC
->
MC_FMR
;

1652 
	}
}

1658 
__ölöe
 
	$AT91F_MC_EFC_CompuãFMCN
(

1659 
ma°î_˛ock
)

1661  (
ma°î_˛ock
/1000000 +2);

1662 
	}
}

1668 
__ölöe
 
	$AT91F_MC_EFC_Pîf‹mCmd
 (

1669 
AT91PS_MC
 
pMC
,

1670 
å™s„r_cmd
)

1672 
pMC
->
MC_FCR
 = 
å™s„r_cmd
;

1673 
	}
}

1679 
__ölöe
 
	$AT91F_MC_EFC_GëSètus
(

1680 
AT91PS_MC
 
pMC
)

1682  
pMC
->
MC_FSR
;

1683 
	}
}

1689 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Masked
(

1690 
AT91PS_MC
 
pMC
,

1691 
Êag
)

1693  (
	`AT91F_MC_EFC_GëModeReg
(
pMC
Ë& 
Êag
);

1694 
	}
}

1700 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Së
(

1701 
AT91PS_MC
 
pMC
,

1702 
Êag
)

1704  (
	`AT91F_MC_EFC_GëSètus
(
pMC
Ë& 
Êag
);

1705 
	}
}

1714 
__ölöe
 
	$AT91F_SPI_O≥n
 (

1715 c⁄° 
nuŒ
)

1719 
	}
}

1725 
__ölöe
 
	$AT91F_SPI_CfgCs
 (

1726 
AT91PS_SPI
 
pSPI
,

1727 
cs
,

1728 
vÆ
)

1731 *(
pSPI
->
SPI_CSR
 + 
cs
Ë
vÆ
;

1732 
	}
}

1738 
__ölöe
 
	$AT91F_SPI_E«bÀIt
 (

1739 
AT91PS_SPI
 
pSPI
,

1740 
Êag
)

1743 
pSPI
->
SPI_IER
 = 
Êag
;

1744 
	}
}

1750 
__ölöe
 
	$AT91F_SPI_DißbÀIt
 (

1751 
AT91PS_SPI
 
pSPI
,

1752 
Êag
)

1755 
pSPI
->
SPI_IDR
 = 
Êag
;

1756 
	}
}

1762 
__ölöe
 
	$AT91F_SPI_Re£t
 (

1763 
AT91PS_SPI
 
pSPI


1767 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SWRST
;

1768 
	}
}

1774 
__ölöe
 
	$AT91F_SPI_E«bÀ
 (

1775 
AT91PS_SPI
 
pSPI


1779 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIEN
;

1780 
	}
}

1786 
__ölöe
 
	$AT91F_SPI_DißbÀ
 (

1787 
AT91PS_SPI
 
pSPI


1791 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1792 
	}
}

1798 
__ölöe
 
	$AT91F_SPI_CfgMode
 (

1799 
AT91PS_SPI
 
pSPI
,

1800 
mode
)

1803 
pSPI
->
SPI_MR
 = 
mode
;

1804 
	}
}

1810 
__ölöe
 
	$AT91F_SPI_CfgPCS
 (

1811 
AT91PS_SPI
 
pSPI
,

1812 
PCS_Devi˚
)

1815 
pSPI
->
SPI_MR
 &= 0xFFF0FFFF;

1816 
pSPI
->
SPI_MR
 |–(
PCS_Devi˚
<<16Ë& 
AT91C_SPI_PCS
 );

1817 
	}
}

1823 
__ölöe
 
	$AT91F_SPI_Re˚iveFøme
 (

1824 
AT91PS_SPI
 
pSPI
,

1825 *
pBuf„r
,

1826 
szBuf„r
,

1827 *
pNextBuf„r
,

1828 
szNextBuf„r
 )

1830  
	`AT91F_PDC_Re˚iveFøme
(

1831 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1832 
pBuf„r
,

1833 
szBuf„r
,

1834 
pNextBuf„r
,

1835 
szNextBuf„r
);

1836 
	}
}

1842 
__ölöe
 
	$AT91F_SPI_SídFøme
(

1843 
AT91PS_SPI
 
pSPI
,

1844 *
pBuf„r
,

1845 
szBuf„r
,

1846 *
pNextBuf„r
,

1847 
szNextBuf„r
 )

1849  
	`AT91F_PDC_SídFøme
(

1850 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1851 
pBuf„r
,

1852 
szBuf„r
,

1853 
pNextBuf„r
,

1854 
szNextBuf„r
);

1855 
	}
}

1861 
__ölöe
 
	$AT91F_SPI_Clo£
 (

1862 
AT91PS_SPI
 
pSPI
)

1865 
pSPI
->
SPI_CSR
[0] = 0 ;

1866 
pSPI
->
SPI_CSR
[1] = 0 ;

1867 
pSPI
->
SPI_CSR
[2] = 0 ;

1868 
pSPI
->
SPI_CSR
[3] = 0 ;

1871 
pSPI
->
SPI_MR
 = 0 ;

1874 
pSPI
->
SPI_IDR
 = 0xFFFFFFFF ;

1877 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
));

1880 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1881 
	}
}

1887 
__ölöe
 
	$AT91F_SPI_PutCh¨
 (

1888 
AT91PS_SPI
 
pSPI
,

1889 
ch¨a˘î
,

1890 
cs_numbî
 )

1892 
vÆue_f‹_cs
;

1893 
vÆue_f‹_cs
 = (~(1 << 
cs_numbî
)) & 0xF;

1894 
pSPI
->
SPI_TDR
 = (
ch¨a˘î
 & 0xFFFFË| (
vÆue_f‹_cs
 << 16);

1895 
	}
}

1901 
__ölöe
 
	$AT91F_SPI_GëCh¨
 (

1902 c⁄° 
AT91PS_SPI
 
pSPI
)

1904 ((
pSPI
->
SPI_RDR
) & 0xFFFF);

1905 
	}
}

1911 
__ölöe
 
	$AT91F_SPI_GëI¡îru±MaskSètus
(

1912 
AT91PS_SPI
 
pSpi
)

1914  
pSpi
->
SPI_IMR
;

1915 
	}
}

1921 
__ölöe
 
	$AT91F_SPI_IsI¡îru±Masked
(

1922 
AT91PS_SPI
 
pSpi
,

1923 
Êag
)

1925  (
	`AT91F_SPI_GëI¡îru±MaskSètus
(
pSpi
Ë& 
Êag
);

1926 
	}
}

1935 
	#AT91C_US_ASYNC_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

1936 
AT91C_US_NBSTOP_1_BIT
 + \

1937 
AT91C_US_PAR_NONE
 + \

1938 
AT91C_US_CHRL_8_BITS
 + \

1939 
AT91C_US_CLKS_CLOCK
 )

	)

1942 
	#AT91C_US_ASYNC_SCK_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

1943 
AT91C_US_NBSTOP_1_BIT
 + \

1944 
AT91C_US_PAR_NONE
 + \

1945 
AT91C_US_CHRL_8_BITS
 + \

1946 
AT91C_US_CLKS_EXT
 )

	)

1949 
	#AT91C_US_SYNC_MODE
 ( 
AT91C_US_SYNC
 + \

1950 
AT91C_US_USMODE_NORMAL
 + \

1951 
AT91C_US_NBSTOP_1_BIT
 + \

1952 
AT91C_US_PAR_NONE
 + \

1953 
AT91C_US_CHRL_8_BITS
 + \

1954 
AT91C_US_CLKS_CLOCK
 )

	)

1957 
	#AT91C_US_SCK_USED
 (
AT91C_US_CKLO
 | 
AT91C_US_CLKS_EXT
)

	)

1960 
	#AT91C_US_ISO_READER_MODE
 ( 
AT91C_US_USMODE_ISO7816_0
 + \

1961 
AT91C_US_CLKS_CLOCK
 +\

1962 
AT91C_US_NBSTOP_1_BIT
 + \

1963 
AT91C_US_PAR_EVEN
 + \

1964 
AT91C_US_CHRL_8_BITS
 + \

1965 
AT91C_US_CKLO
 +\

1966 
AT91C_US_OVER
)

	)

1969 
	#AT91C_US_ASYNC_IRDA_MODE
 ( 
AT91C_US_USMODE_IRDA
 + \

1970 
AT91C_US_NBSTOP_1_BIT
 + \

1971 
AT91C_US_PAR_NONE
 + \

1972 
AT91C_US_CHRL_8_BITS
 + \

1973 
AT91C_US_CLKS_CLOCK
 )

	)

1979 
__ölöe
 
	$AT91F_US_Baudøã
 (

1980 c⁄° 
maö_˛ock
,

1981 c⁄° 
baud_øã
)

1983 
baud_vÆue
 = ((
maö_˛ock
*10)/(
baud_øã
 * 16));

1984 i‡((
baud_vÆue
 % 10) >= 5)

1985 
baud_vÆue
 = (baud_value / 10) + 1;

1987 
baud_vÆue
 /= 10;

1988  
baud_vÆue
;

1989 
	}
}

1995 
__ölöe
 
	$AT91F_US_SëBaudøã
 (

1996 
AT91PS_USART
 
pUSART
,

1997 
maöClock
,

1998 
•ìd
)

2001 
pUSART
->
US_BRGR
 = 
	`AT91F_US_Baudøã
(
maöClock
, 
•ìd
);

2002 
	}
}

2008 
__ölöe
 
	$AT91F_US_SëTimegu¨d
 (

2009 
AT91PS_USART
 
pUSART
,

2010 
timegu¨d
)

2013 
pUSART
->
US_TTGR
 = 
timegu¨d
 ;

2014 
	}
}

2020 
__ölöe
 
	$AT91F_US_E«bÀIt
 (

2021 
AT91PS_USART
 
pUSART
,

2022 
Êag
)

2025 
pUSART
->
US_IER
 = 
Êag
;

2026 
	}
}

2032 
__ölöe
 
	$AT91F_US_DißbÀIt
 (

2033 
AT91PS_USART
 
pUSART
,

2034 
Êag
)

2037 
pUSART
->
US_IDR
 = 
Êag
;

2038 
	}
}

2044 
__ölöe
 
	$AT91F_US_C⁄figuª
 (

2045 
AT91PS_USART
 
pUSART
,

2046 
maöClock
,

2047 
mode
 ,

2048 
baudR©e
 ,

2049 
timegu¨d
 )

2052 
pUSART
->
US_IDR
 = () -1;

2055 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RXDIS
 | 
AT91C_US_TXDIS
 ;

2058 
	`AT91F_US_SëBaudøã
(
pUSART
, 
maöClock
, 
baudR©e
);

2061 
	`AT91F_US_SëTimegu¨d
(
pUSART
, 
timegu¨d
);

2064 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2067 
pUSART
->
US_MR
 = 
mode
 ;

2069 
	}
}

2075 
__ölöe
 
	$AT91F_US_E«bÀRx
 (

2076 
AT91PS_USART
 
pUSART
)

2079 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2080 
	}
}

2086 
__ölöe
 
	$AT91F_US_E«bÀTx
 (

2087 
AT91PS_USART
 
pUSART
)

2090 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2091 
	}
}

2097 
__ölöe
 
	$AT91F_US_Re£tRx
 (

2098 
AT91PS_USART
 
pUSART
)

2101 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
;

2103 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2104 
	}
}

2110 
__ölöe
 
	$AT91F_US_Re£tTx
 (

2111 
AT91PS_USART
 
pUSART
)

2114 
pUSART
->
US_CR
 = 
AT91C_US_RSTTX
;

2116 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2117 
	}
}

2123 
__ölöe
 
	$AT91F_US_DißbÀRx
 (

2124 
AT91PS_USART
 
pUSART
)

2127 
pUSART
->
US_CR
 = 
AT91C_US_RXDIS
;

2128 
	}
}

2134 
__ölöe
 
	$AT91F_US_DißbÀTx
 (

2135 
AT91PS_USART
 
pUSART
)

2138 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
;

2139 
	}
}

2145 
__ölöe
 
	$AT91F_US_Clo£
 (

2146 
AT91PS_USART
 
pUSART
)

2149 
pUSART
->
US_BRGR
 = 0 ;

2152 
pUSART
->
US_MR
 = 0 ;

2155 
pUSART
->
US_TTGR
 = 0;

2158 
pUSART
->
US_IDR
 = 0xFFFFFFFF ;

2161 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2164 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
 | 
AT91C_US_RXDIS
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RSTRX
 ;

2165 
	}
}

2171 
__ölöe
 
	$AT91F_US_TxRódy
 (

2172 
AT91PS_USART
 
pUSART
 )

2174  (
pUSART
->
US_CSR
 & 
AT91C_US_TXRDY
);

2175 
	}
}

2181 
__ölöe
 
	$AT91F_US_RxRódy
 (

2182 
AT91PS_USART
 
pUSART
 )

2184  (
pUSART
->
US_CSR
 & 
AT91C_US_RXRDY
);

2185 
	}
}

2191 
__ölöe
 
	$AT91F_US_Eº‹
 (

2192 
AT91PS_USART
 
pUSART
 )

2194  (
pUSART
->
US_CSR
 &

2195 (
AT91C_US_OVRE
 |

2196 
AT91C_US_FRAME
 |

2197 
AT91C_US_PARE
));

2198 
	}
}

2204 
__ölöe
 
	$AT91F_US_PutCh¨
 (

2205 
AT91PS_USART
 
pUSART
,

2206 
ch¨a˘î
 )

2208 
pUSART
->
US_THR
 = (
ch¨a˘î
 & 0x1FF);

2209 
	}
}

2215 
__ölöe
 
	$AT91F_US_GëCh¨
 (

2216 c⁄° 
AT91PS_USART
 
pUSART
)

2218 ((
pUSART
->
US_RHR
) & 0x1FF);

2219 
	}
}

2225 
__ölöe
 
	$AT91F_US_SídFøme
(

2226 
AT91PS_USART
 
pUSART
,

2227 *
pBuf„r
,

2228 
szBuf„r
,

2229 *
pNextBuf„r
,

2230 
szNextBuf„r
 )

2232  
	`AT91F_PDC_SídFøme
(

2233 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2234 
pBuf„r
,

2235 
szBuf„r
,

2236 
pNextBuf„r
,

2237 
szNextBuf„r
);

2238 
	}
}

2244 
__ölöe
 
	$AT91F_US_Re˚iveFøme
 (

2245 
AT91PS_USART
 
pUSART
,

2246 *
pBuf„r
,

2247 
szBuf„r
,

2248 *
pNextBuf„r
,

2249 
szNextBuf„r
 )

2251  
	`AT91F_PDC_Re˚iveFøme
(

2252 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2253 
pBuf„r
,

2254 
szBuf„r
,

2255 
pNextBuf„r
,

2256 
szNextBuf„r
);

2257 
	}
}

2263 
__ölöe
 
	$AT91F_US_SëIrdaFûãr
 (

2264 
AT91PS_USART
 
pUSART
,

2265 
vÆue


2268 
pUSART
->
US_IF
 = 
vÆue
;

2269 
	}
}

2279 
	#AT91C_I2S_ASY_MASTER_TX_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)( +\

2280 
AT91C_SSC_CKS_DIV
 +\

2281 
AT91C_SSC_CKO_CONTINOUS
 +\

2282 
AT91C_SSC_CKG_NONE
 +\

2283 
AT91C_SSC_START_FALL_RF
 +\

2284 
AT91C_SSC_STTOUT
 +\

2285 ((1<<16Ë& 
AT91C_SSC_STTDLY
) +\

2286 ((((
nb_bô_by_¶Ÿ
*
nb_¶Ÿ_by_‰ame
)/2)-1Ë<<24))

	)

2292 
	#AT91C_I2S_ASY_TX_FRAME_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)( +\

2293 (
nb_bô_by_¶Ÿ
-1) +\

2294 
AT91C_SSC_MSBF
 +\

2295 (((
nb_¶Ÿ_by_‰ame
-1)<<8Ë& 
AT91C_SSC_DATNB
) +\

2296 (((
nb_bô_by_¶Ÿ
-1)<<16Ë& 
AT91C_SSC_FSLEN
) +\

2297 
AT91C_SSC_FSOS_NEGATIVE
)

	)

2304 
__ölöe
 
	$AT91F_SSC_SëBaudøã
 (

2305 
AT91PS_SSC
 
pSSC
,

2306 
maöClock
,

2307 
•ìd
)

2309 
baud_vÆue
;

2311 i‡(
•ìd
 == 0)

2312 
baud_vÆue
 = 0;

2315 
baud_vÆue
 = (Ë(
maöClock
 * 10)/(2*
•ìd
);

2316 i‡((
baud_vÆue
 % 10) >= 5)

2317 
baud_vÆue
 = (baud_value / 10) + 1;

2319 
baud_vÆue
 /= 10;

2322 
pSSC
->
SSC_CMR
 = 
baud_vÆue
;

2323 
	}
}

2329 
__ölöe
 
	$AT91F_SSC_C⁄figuª
 (

2330 
AT91PS_SSC
 
pSSC
,

2331 
sy°_˛ock
,

2332 
baud_øã
,

2333 
˛ock_rx
,

2334 
mode_rx
,

2335 
˛ock_tx
,

2336 
mode_tx
)

2339 
pSSC
->
SSC_IDR
 = () -1;

2342 
pSSC
->
SSC_CR
 = 
AT91C_SSC_SWRST
 | 
AT91C_SSC_RXDIS
 | 
AT91C_SSC_TXDIS
 ;

2345 
	`AT91F_SSC_SëBaudøã
(
pSSC
, 
sy°_˛ock
, 
baud_øã
);

2348 
pSSC
->
SSC_RCMR
 = 
˛ock_rx
;

2351 
pSSC
->
SSC_TCMR
 = 
˛ock_tx
;

2354 
pSSC
->
SSC_RFMR
 = 
mode_rx
;

2357 
pSSC
->
SSC_TFMR
 = 
mode_tx
;

2360 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
));

2363 
	}
}

2369 
__ölöe
 
	$AT91F_SSC_E«bÀRx
 (

2370 
AT91PS_SSC
 
pSSC
)

2373 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXEN
;

2374 
	}
}

2380 
__ölöe
 
	$AT91F_SSC_DißbÀRx
 (

2381 
AT91PS_SSC
 
pSSC
)

2384 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXDIS
;

2385 
	}
}

2391 
__ölöe
 
	$AT91F_SSC_E«bÀTx
 (

2392 
AT91PS_SSC
 
pSSC
)

2395 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXEN
;

2396 
	}
}

2402 
__ölöe
 
	$AT91F_SSC_DißbÀTx
 (

2403 
AT91PS_SSC
 
pSSC
)

2406 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXDIS
;

2407 
	}
}

2413 
__ölöe
 
	$AT91F_SSC_E«bÀIt
 (

2414 
AT91PS_SSC
 
pSSC
,

2415 
Êag
)

2418 
pSSC
->
SSC_IER
 = 
Êag
;

2419 
	}
}

2425 
__ölöe
 
	$AT91F_SSC_DißbÀIt
 (

2426 
AT91PS_SSC
 
pSSC
,

2427 
Êag
)

2430 
pSSC
->
SSC_IDR
 = 
Êag
;

2431 
	}
}

2437 
__ölöe
 
	$AT91F_SSC_Re˚iveFøme
 (

2438 
AT91PS_SSC
 
pSSC
,

2439 *
pBuf„r
,

2440 
szBuf„r
,

2441 *
pNextBuf„r
,

2442 
szNextBuf„r
 )

2444  
	`AT91F_PDC_Re˚iveFøme
(

2445 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2446 
pBuf„r
,

2447 
szBuf„r
,

2448 
pNextBuf„r
,

2449 
szNextBuf„r
);

2450 
	}
}

2456 
__ölöe
 
	$AT91F_SSC_SídFøme
(

2457 
AT91PS_SSC
 
pSSC
,

2458 *
pBuf„r
,

2459 
szBuf„r
,

2460 *
pNextBuf„r
,

2461 
szNextBuf„r
 )

2463  
	`AT91F_PDC_SídFøme
(

2464 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2465 
pBuf„r
,

2466 
szBuf„r
,

2467 
pNextBuf„r
,

2468 
szNextBuf„r
);

2469 
	}
}

2475 
__ölöe
 
	$AT91F_SSC_GëI¡îru±MaskSètus
(

2476 
AT91PS_SSC
 
pSsc
)

2478  
pSsc
->
SSC_IMR
;

2479 
	}
}

2485 
__ölöe
 
	$AT91F_SSC_IsI¡îru±Masked
(

2486 
AT91PS_SSC
 
pSsc
,

2487 
Êag
)

2489  (
	`AT91F_SSC_GëI¡îru±MaskSètus
(
pSsc
Ë& 
Êag
);

2490 
	}
}

2499 
__ölöe
 
	$AT91F_TWI_E«bÀIt
 (

2500 
AT91PS_TWI
 
pTWI
,

2501 
Êag
)

2504 
pTWI
->
TWI_IER
 = 
Êag
;

2505 
	}
}

2511 
__ölöe
 
	$AT91F_TWI_DißbÀIt
 (

2512 
AT91PS_TWI
 
pTWI
,

2513 
Êag
)

2516 
pTWI
->
TWI_IDR
 = 
Êag
;

2517 
	}
}

2523 
__ölöe
 
	$AT91F_TWI_C⁄figuª
 ( 
AT91PS_TWI
 
pTWI
 )

2526 
pTWI
->
TWI_IDR
 = () -1;

2529 
pTWI
->
TWI_CR
 = 
AT91C_TWI_SWRST
;

2532 
pTWI
->
TWI_CR
 = 
AT91C_TWI_MSEN
;

2534 
	}
}

2540 
__ölöe
 
	$AT91F_TWI_GëI¡îru±MaskSètus
(

2541 
AT91PS_TWI
 
pTwi
)

2543  
pTwi
->
TWI_IMR
;

2544 
	}
}

2550 
__ölöe
 
	$AT91F_TWI_IsI¡îru±Masked
(

2551 
AT91PS_TWI
 
pTwi
,

2552 
Êag
)

2554  (
	`AT91F_TWI_GëI¡îru±MaskSètus
(
pTwi
Ë& 
Êag
);

2555 
	}
}

2564 
__ölöe
 
	$AT91F_PWMC_GëSètus
(

2565 
AT91PS_PWMC
 
pPWM
)

2567  
pPWM
->
PWMC_SR
;

2568 
	}
}

2574 
__ölöe
 
	$AT91F_PWMC_I¡îru±E«bÀ
(

2575 
AT91PS_PWMC
 
pPwm
,

2576 
Êag
)

2578 
pPwm
->
PWMC_IER
 = 
Êag
;

2579 
	}
}

2585 
__ölöe
 
	$AT91F_PWMC_I¡îru±DißbÀ
(

2586 
AT91PS_PWMC
 
pPwm
,

2587 
Êag
)

2589 
pPwm
->
PWMC_IDR
 = 
Êag
;

2590 
	}
}

2596 
__ölöe
 
	$AT91F_PWMC_GëI¡îru±MaskSètus
(

2597 
AT91PS_PWMC
 
pPwm
)

2599  
pPwm
->
PWMC_IMR
;

2600 
	}
}

2606 
__ölöe
 
	$AT91F_PWMC_IsI¡îru±Masked
(

2607 
AT91PS_PWMC
 
pPWM
,

2608 
Êag
)

2610  (
	`AT91F_PWMC_GëI¡îru±MaskSètus
(
pPWM
Ë& 
Êag
);

2611 
	}
}

2617 
__ölöe
 
	$AT91F_PWMC_IsSètusSë
(

2618 
AT91PS_PWMC
 
pPWM
,

2619 
Êag
)

2621  (
	`AT91F_PWMC_GëSètus
(
pPWM
Ë& 
Êag
);

2622 
	}
}

2628 
__ölöe
 
	$AT91F_PWMC_CfgCh™√l
(

2629 
AT91PS_PWMC
 
pPWM
,

2630 
ch™√lId
,

2631 
mode
,

2632 
≥riod
,

2633 
duty
)

2635 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CMR
 = 
mode
;

2636 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CDTYR
 = 
duty
;

2637 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CPRDR
 = 
≥riod
;

2638 
	}
}

2644 
__ölöe
 
	$AT91F_PWMC_SèπCh™√l
(

2645 
AT91PS_PWMC
 
pPWM
,

2646 
Êag
)

2648 
pPWM
->
PWMC_ENA
 = 
Êag
;

2649 
	}
}

2655 
__ölöe
 
	$AT91F_PWMC_St›Ch™√l
(

2656 
AT91PS_PWMC
 
pPWM
,

2657 
Êag
)

2659 
pPWM
->
PWMC_DIS
 = 
Êag
;

2660 
	}
}

2666 
__ölöe
 
	$AT91F_PWMC_Upd©eCh™√l
(

2667 
AT91PS_PWMC
 
pPWM
,

2668 
ch™√lId
,

2669 
upd©e
)

2671 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CUPDR
 = 
upd©e
;

2672 
	}
}

2681 
__ölöe
 
	$AT91F_UDP_E«bÀIt
 (

2682 
AT91PS_UDP
 
pUDP
,

2683 
Êag
)

2686 
pUDP
->
UDP_IER
 = 
Êag
;

2687 
	}
}

2693 
__ölöe
 
	$AT91F_UDP_DißbÀIt
 (

2694 
AT91PS_UDP
 
pUDP
,

2695 
Êag
)

2698 
pUDP
->
UDP_IDR
 = 
Êag
;

2699 
	}
}

2705 
__ölöe
 
	$AT91F_UDP_SëAddªss
 (

2706 
AT91PS_UDP
 
pUDP
,

2707 
addªss
)

2709 
pUDP
->
UDP_FADDR
 = (
AT91C_UDP_FEN
 | 
addªss
);

2710 
	}
}

2716 
__ölöe
 
	$AT91F_UDP_E«bÀEp
 (

2717 
AT91PS_UDP
 
pUDP
,

2718 
ídpoöt
)

2720 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_EPEDS
;

2721 
	}
}

2727 
__ölöe
 
	$AT91F_UDP_DißbÀEp
 (

2728 
AT91PS_UDP
 
pUDP
,

2729 
ídpoöt
)

2731 
pUDP
->
UDP_CSR
[
ídpoöt
] &~
AT91C_UDP_EPEDS
;

2732 
	}
}

2738 
__ölöe
 
	$AT91F_UDP_SëSèã
 (

2739 
AT91PS_UDP
 
pUDP
,

2740 
Êag
)

2742 
pUDP
->
UDP_GLBSTATE
 &~(
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
);

2743 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2744 
	}
}

2750 
__ölöe
 
	$AT91F_UDP_GëSèã
 (

2751 
AT91PS_UDP
 
pUDP
)

2753  (
pUDP
->
UDP_GLBSTATE
 & (
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
));

2754 
	}
}

2760 
__ölöe
 
	$AT91F_UDP_Re£tEp
 (

2761 
AT91PS_UDP
 
pUDP
,

2762 
Êag
)

2764 
pUDP
->
UDP_RSTEP
 = 
Êag
;

2765 
pUDP
->
UDP_RSTEP
 = 0;

2766 
	}
}

2772 
__ölöe
 
	$AT91F_UDP_EpSèŒ
(

2773 
AT91PS_UDP
 
pUDP
,

2774 
ídpoöt
)

2776 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_FORCESTALL
;

2777 
	}
}

2783 
__ölöe
 
	$AT91F_UDP_EpWrôe
(

2784 
AT91PS_UDP
 
pUDP
,

2785 
ídpoöt
,

2786 
vÆue
)

2788 
pUDP
->
UDP_FDR
[
ídpoöt
] = 
vÆue
;

2789 
	}
}

2795 
__ölöe
 
	$AT91F_UDP_EpRód
(

2796 
AT91PS_UDP
 
pUDP
,

2797 
ídpoöt
)

2799  
pUDP
->
UDP_FDR
[
ídpoöt
];

2800 
	}
}

2806 
__ölöe
 
	$AT91F_UDP_EpEndOfWr
(

2807 
AT91PS_UDP
 
pUDP
,

2808 
ídpoöt
)

2810 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_TXPKTRDY
;

2811 
	}
}

2817 
__ölöe
 
	$AT91F_UDP_EpCÀ¨
(

2818 
AT91PS_UDP
 
pUDP
,

2819 
ídpoöt
,

2820 
Êag
)

2822 
pUDP
->
UDP_CSR
[
ídpoöt
] &~(
Êag
);

2823 
	}
}

2829 
__ölöe
 
	$AT91F_UDP_EpSë
(

2830 
AT91PS_UDP
 
pUDP
,

2831 
ídpoöt
,

2832 
Êag
)

2834 
pUDP
->
UDP_CSR
[
ídpoöt
] |
Êag
;

2835 
	}
}

2841 
__ölöe
 
	$AT91F_UDP_EpSètus
(

2842 
AT91PS_UDP
 
pUDP
,

2843 
ídpoöt
)

2845  
pUDP
->
UDP_CSR
[
ídpoöt
];

2846 
	}
}

2852 
__ölöe
 
	$AT91F_UDP_GëI¡îru±MaskSètus
(

2853 
AT91PS_UDP
 
pUdp
)

2855  
pUdp
->
UDP_IMR
;

2856 
	}
}

2862 
__ölöe
 
	$AT91F_UDP_IsI¡îru±Masked
(

2863 
AT91PS_UDP
 
pUdp
,

2864 
Êag
)

2866  (
	`AT91F_UDP_GëI¡îru±MaskSètus
(
pUdp
Ë& 
Êag
);

2867 
	}
}

2876 
__ölöe
 
	$AT91F_TC_I¡îru±E«bÀ
(

2877 
AT91PS_TC
 
pTc
,

2878 
Êag
)

2880 
pTc
->
TC_IER
 = 
Êag
;

2881 
	}
}

2887 
__ölöe
 
	$AT91F_TC_I¡îru±DißbÀ
(

2888 
AT91PS_TC
 
pTc
,

2889 
Êag
)

2891 
pTc
->
TC_IDR
 = 
Êag
;

2892 
	}
}

2898 
__ölöe
 
	$AT91F_TC_GëI¡îru±MaskSètus
(

2899 
AT91PS_TC
 
pTc
)

2901  
pTc
->
TC_IMR
;

2902 
	}
}

2908 
__ölöe
 
	$AT91F_TC_IsI¡îru±Masked
(

2909 
AT91PS_TC
 
pTc
,

2910 
Êag
)

2912  (
	`AT91F_TC_GëI¡îru±MaskSètus
(
pTc
Ë& 
Êag
);

2913 
	}
}

2918 
	#STANDARD_FORMAT
 0

	)

2919 
	#EXTENDED_FORMAT
 1

	)

2925 
__ölöe
 
	$AT91F_InôMaûboxRegi°îs
(
AT91PS_CAN_MB
 
CAN_Maûbox
,

2926 
mode_ªg
,

2927 
ac˚±™˚_mask_ªg
,

2928 
id_ªg
,

2929 
d©a_low_ªg
,

2930 
d©a_high_ªg
,

2931 
c⁄åﬁ_ªg
)

2933 
CAN_Maûbox
->
CAN_MB_MCR
 = 0x0;

2934 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode_ªg
;

2935 
CAN_Maûbox
->
CAN_MB_MAM
 = 
ac˚±™˚_mask_ªg
;

2936 
CAN_Maûbox
->
CAN_MB_MID
 = 
id_ªg
;

2937 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a_low_ªg
;

2938 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a_high_ªg
;

2939 
CAN_Maûbox
->
CAN_MB_MCR
 = 
c⁄åﬁ_ªg
;

2940 
	}
}

2946 
__ölöe
 
	$AT91F_E«bÀCAN
(

2947 
AT91PS_CAN
 
pCAN
)

2949 
pCAN
->
CAN_MR
 |
AT91C_CAN_CANEN
;

2952  (
pCAN
->
CAN_SR
 & 
AT91C_CAN_WAKEUP
) != AT91C_CAN_WAKEUP );

2953 
	}
}

2959 
__ölöe
 
	$AT91F_DißbÀCAN
(

2960 
AT91PS_CAN
 
pCAN
)

2962 
pCAN
->
CAN_MR
 &~
AT91C_CAN_CANEN
;

2963 
	}
}

2969 
__ölöe
 
	$AT91F_CAN_E«bÀIt
 (

2970 
AT91PS_CAN
 
pCAN
,

2971 
Êag
)

2974 
pCAN
->
CAN_IER
 = 
Êag
;

2975 
	}
}

2981 
__ölöe
 
	$AT91F_CAN_DißbÀIt
 (

2982 
AT91PS_CAN
 
pCAN
,

2983 
Êag
)

2986 
pCAN
->
CAN_IDR
 = 
Êag
;

2987 
	}
}

2993 
__ölöe
 
	$AT91F_CAN_GëSètus
(

2994 
AT91PS_CAN
 
pCAN
)

2996  
pCAN
->
CAN_SR
;

2997 
	}
}

3003 
__ölöe
 
	$AT91F_CAN_GëI¡îru±MaskSètus
(

3004 
AT91PS_CAN
 
pCAN
)

3006  
pCAN
->
CAN_IMR
;

3007 
	}
}

3013 
__ölöe
 
	$AT91F_CAN_IsI¡îru±Masked
(

3014 
AT91PS_CAN
 
pCAN
,

3015 
Êag
)

3017  (
	`AT91F_CAN_GëI¡îru±MaskSètus
(
pCAN
Ë& 
Êag
);

3018 
	}
}

3024 
__ölöe
 
	$AT91F_CAN_IsSètusSë
(

3025 
AT91PS_CAN
 
pCAN
,

3026 
Êag
)

3028  (
	`AT91F_CAN_GëSètus
(
pCAN
Ë& 
Êag
);

3029 
	}
}

3035 
__ölöe
 
	$AT91F_CAN_CfgModeReg
 (

3036 
AT91PS_CAN
 
pCAN
,

3037 
mode
)

3040 
pCAN
->
CAN_MR
 = 
mode
;

3041 
	}
}

3047 
__ölöe
 
	$AT91F_CAN_GëModeReg
 (

3048 
AT91PS_CAN
 
pCAN


3051  
pCAN
->
CAN_MR
;

3052 
	}
}

3058 
__ölöe
 
	$AT91F_CAN_CfgBaudøãReg
 (

3059 
AT91PS_CAN
 
pCAN
,

3060 
baudøã_cfg
)

3063 
pCAN
->
CAN_BR
 = 
baudøã_cfg
;

3064 
	}
}

3070 
__ölöe
 
	$AT91F_CAN_GëBaudøã
 (

3071 
AT91PS_CAN
 
pCAN


3074  
pCAN
->
CAN_BR
;

3075 
	}
}

3081 
__ölöe
 
	$AT91F_CAN_GëI¡î«lCou¡î
 (

3082 
AT91PS_CAN
 
pCAN


3085  
pCAN
->
CAN_TIM
;

3086 
	}
}

3092 
__ölöe
 
	$AT91F_CAN_GëTime°amp
 (

3093 
AT91PS_CAN
 
pCAN


3096  
pCAN
->
CAN_TIMESTP
;

3097 
	}
}

3103 
__ölöe
 
	$AT91F_CAN_GëEº‹Cou¡î
 (

3104 
AT91PS_CAN
 
pCAN


3107  
pCAN
->
CAN_ECR
;

3108 
	}
}

3114 
__ölöe
 
	$AT91F_CAN_InôTøns„rReque°
 (

3115 
AT91PS_CAN
 
pCAN
,

3116 
å™s„r_cmd
)

3118 
pCAN
->
CAN_TCR
 = 
å™s„r_cmd
;

3119 
	}
}

3125 
__ölöe
 
	$AT91F_CAN_InôAb‹tReque°
 (

3126 
AT91PS_CAN
 
pCAN
,

3127 
ab‹t_cmd
)

3129 
pCAN
->
CAN_ACR
 = 
ab‹t_cmd
;

3130 
	}
}

3136 
__ölöe
 
	$AT91F_CAN_CfgMesßgeModeReg
 (

3137 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3138 
mode
)

3140 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode
;

3141 
	}
}

3147 
__ölöe
 
	$AT91F_CAN_GëMesßgeModeReg
 (

3148 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3150  
CAN_Maûbox
->
CAN_MB_MMR
;

3151 
	}
}

3158 
__ölöe
 
	$AT91F_CAN_CfgMesßgeIDReg
 (

3159 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3160 
id
,

3161 
vîsi⁄
)

3163 if(
vîsi⁄
==0)

3164 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
<<18;

3166 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
 | (1<<29);

3167 
	}
}

3173 
__ölöe
 
	$AT91F_CAN_GëMesßgeIDReg
 (

3174 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3176  
CAN_Maûbox
->
CAN_MB_MID
;

3177 
	}
}

3183 
__ölöe
 
	$AT91F_CAN_CfgMesßgeAc˚±™˚MaskReg
 (

3184 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3185 
mask
)

3187 
CAN_Maûbox
->
CAN_MB_MAM
 = 
mask
;

3188 
	}
}

3194 
__ölöe
 
	$AT91F_CAN_GëMesßgeAc˚±™˚MaskReg
 (

3195 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3197  
CAN_Maûbox
->
CAN_MB_MAM
;

3198 
	}
}

3204 
__ölöe
 
	$AT91F_CAN_GëFamûyID
 (

3205 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3207  
CAN_Maûbox
->
CAN_MB_MFID
;

3208 
	}
}

3214 
__ölöe
 
	$AT91F_CAN_CfgMesßgeCålReg
 (

3215 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3216 
mesßge_˘æ_cmd
)

3218 
CAN_Maûbox
->
CAN_MB_MCR
 = 
mesßge_˘æ_cmd
;

3219 
	}
}

3225 
__ölöe
 
	$AT91F_CAN_GëMesßgeSètus
 (

3226 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3228  
CAN_Maûbox
->
CAN_MB_MSR
;

3229 
	}
}

3235 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aLow
 (

3236 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3237 
d©a
)

3239 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a
;

3240 
	}
}

3246 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aLow
 (

3247 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3249  
CAN_Maûbox
->
CAN_MB_MDL
;

3250 
	}
}

3256 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aHigh
 (

3257 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3258 
d©a
)

3260 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a
;

3261 
	}
}

3267 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aHigh
 (

3268 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3270  
CAN_Maûbox
->
CAN_MB_MDH
;

3271 
	}
}

3277 
__ölöe
 
	$AT91F_CAN_O≥n
 (

3278 c⁄° 
nuŒ
)

3282 
	}
}

3290 
__ölöe
 
	$AT91F_ADC_E«bÀIt
 (

3291 
AT91PS_ADC
 
pADC
,

3292 
Êag
)

3295 
pADC
->
ADC_IER
 = 
Êag
;

3296 
	}
}

3302 
__ölöe
 
	$AT91F_ADC_DißbÀIt
 (

3303 
AT91PS_ADC
 
pADC
,

3304 
Êag
)

3307 
pADC
->
ADC_IDR
 = 
Êag
;

3308 
	}
}

3314 
__ölöe
 
	$AT91F_ADC_GëSètus
(

3315 
AT91PS_ADC
 
pADC
)

3317  
pADC
->
ADC_SR
;

3318 
	}
}

3324 
__ölöe
 
	$AT91F_ADC_GëI¡îru±MaskSètus
(

3325 
AT91PS_ADC
 
pADC
)

3327  
pADC
->
ADC_IMR
;

3328 
	}
}

3334 
__ölöe
 
	$AT91F_ADC_IsI¡îru±Masked
(

3335 
AT91PS_ADC
 
pADC
,

3336 
Êag
)

3338  (
	`AT91F_ADC_GëI¡îru±MaskSètus
(
pADC
Ë& 
Êag
);

3339 
	}
}

3345 
__ölöe
 
	$AT91F_ADC_IsSètusSë
(

3346 
AT91PS_ADC
 
pADC
,

3347 
Êag
)

3349  (
	`AT91F_ADC_GëSètus
(
pADC
Ë& 
Êag
);

3350 
	}
}

3356 
__ölöe
 
	$AT91F_ADC_CfgModeReg
 (

3357 
AT91PS_ADC
 
pADC
,

3358 
mode
)

3361 
pADC
->
ADC_MR
 = 
mode
;

3362 
	}
}

3368 
__ölöe
 
	$AT91F_ADC_GëModeReg
 (

3369 
AT91PS_ADC
 
pADC


3372  
pADC
->
ADC_MR
;

3373 
	}
}

3379 
__ölöe
 
	$AT91F_ADC_CfgTimögs
 (

3380 
AT91PS_ADC
 
pADC
,

3381 
mck_˛ock
,

3382 
adc_˛ock
,

3383 
°¨tup_time
,

3384 
ßm∂e_™d_hﬁd_time
)

3386 
¥esˇl
,
°¨tup
,
shtim
;

3388 
¥esˇl
 = 
mck_˛ock
/(2*
adc_˛ock
) - 1;

3389 
°¨tup
 = 
adc_˛ock
*
°¨tup_time
/8 - 1;

3390 
shtim
 = 
adc_˛ock
*
ßm∂e_™d_hﬁd_time
/1000 - 1;

3393 
pADC
->
ADC_MR
 = ( (
¥esˇl
<<8Ë& 
AT91C_ADC_PRESCAL
Ë| ( (
°¨tup
<<16Ë& 
AT91C_ADC_STARTUP
Ë| ( (
shtim
<<24Ë& 
AT91C_ADC_SHTIM
);

3394 
	}
}

3400 
__ölöe
 
	$AT91F_ADC_E«bÀCh™√l
 (

3401 
AT91PS_ADC
 
pADC
,

3402 
ch™√l
)

3405 
pADC
->
ADC_CHER
 = 
ch™√l
;

3406 
	}
}

3412 
__ölöe
 
	$AT91F_ADC_DißbÀCh™√l
 (

3413 
AT91PS_ADC
 
pADC
,

3414 
ch™√l
)

3417 
pADC
->
ADC_CHDR
 = 
ch™√l
;

3418 
	}
}

3424 
__ölöe
 
	$AT91F_ADC_GëCh™√lSètus
 (

3425 
AT91PS_ADC
 
pADC


3428  
pADC
->
ADC_CHSR
;

3429 
	}
}

3435 
__ölöe
 
	$AT91F_ADC_SèπC⁄vîsi⁄
 (

3436 
AT91PS_ADC
 
pADC


3439 
pADC
->
ADC_CR
 = 
AT91C_ADC_START
;

3440 
	}
}

3446 
__ölöe
 
	$AT91F_ADC_So·Re£t
 (

3447 
AT91PS_ADC
 
pADC


3450 
pADC
->
ADC_CR
 = 
AT91C_ADC_SWRST
;

3451 
	}
}

3457 
__ölöe
 
	$AT91F_ADC_GëLa°C⁄vîãdD©a
 (

3458 
AT91PS_ADC
 
pADC


3461  
pADC
->
ADC_LCDR
;

3462 
	}
}

3468 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH0
 (

3469 
AT91PS_ADC
 
pADC


3472  
pADC
->
ADC_CDR0
;

3473 
	}
}

3479 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH1
 (

3480 
AT91PS_ADC
 
pADC


3483  
pADC
->
ADC_CDR1
;

3484 
	}
}

3490 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH2
 (

3491 
AT91PS_ADC
 
pADC


3494  
pADC
->
ADC_CDR2
;

3495 
	}
}

3501 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH3
 (

3502 
AT91PS_ADC
 
pADC


3505  
pADC
->
ADC_CDR3
;

3506 
	}
}

3512 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH4
 (

3513 
AT91PS_ADC
 
pADC


3516  
pADC
->
ADC_CDR4
;

3517 
	}
}

3523 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH5
 (

3524 
AT91PS_ADC
 
pADC


3527  
pADC
->
ADC_CDR5
;

3528 
	}
}

3534 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH6
 (

3535 
AT91PS_ADC
 
pADC


3538  
pADC
->
ADC_CDR6
;

3539 
	}
}

3545 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH7
 (

3546 
AT91PS_ADC
 
pADC


3549  
pADC
->
ADC_CDR7
;

3550 
	}
}

3559 
__ölöe
 
	$AT91F_AES_E«bÀIt
 (

3560 
AT91PS_AES
 
pAES
,

3561 
Êag
)

3564 
pAES
->
AES_IER
 = 
Êag
;

3565 
	}
}

3571 
__ölöe
 
	$AT91F_AES_DißbÀIt
 (

3572 
AT91PS_AES
 
pAES
,

3573 
Êag
)

3576 
pAES
->
AES_IDR
 = 
Êag
;

3577 
	}
}

3583 
__ölöe
 
	$AT91F_AES_GëSètus
(

3584 
AT91PS_AES
 
pAES
)

3586  
pAES
->
AES_ISR
;

3587 
	}
}

3593 
__ölöe
 
	$AT91F_AES_GëI¡îru±MaskSètus
(

3594 
AT91PS_AES
 
pAES
)

3596  
pAES
->
AES_IMR
;

3597 
	}
}

3603 
__ölöe
 
	$AT91F_AES_IsI¡îru±Masked
(

3604 
AT91PS_AES
 
pAES
,

3605 
Êag
)

3607  (
	`AT91F_AES_GëI¡îru±MaskSètus
(
pAES
Ë& 
Êag
);

3608 
	}
}

3614 
__ölöe
 
	$AT91F_AES_IsSètusSë
(

3615 
AT91PS_AES
 
pAES
,

3616 
Êag
)

3618  (
	`AT91F_AES_GëSètus
(
pAES
Ë& 
Êag
);

3619 
	}
}

3625 
__ölöe
 
	$AT91F_AES_CfgModeReg
 (

3626 
AT91PS_AES
 
pAES
,

3627 
mode
)

3630 
pAES
->
AES_MR
 = 
mode
;

3631 
	}
}

3637 
__ölöe
 
	$AT91F_AES_GëModeReg
 (

3638 
AT91PS_AES
 
pAES


3641  
pAES
->
AES_MR
;

3642 
	}
}

3648 
__ölöe
 
	$AT91F_AES_SèπPro˚ssög
 (

3649 
AT91PS_AES
 
pAES


3652 
pAES
->
AES_CR
 = 
AT91C_AES_START
;

3653 
	}
}

3659 
__ölöe
 
	$AT91F_AES_So·Re£t
 (

3660 
AT91PS_AES
 
pAES


3663 
pAES
->
AES_CR
 = 
AT91C_AES_SWRST
;

3664 
	}
}

3670 
__ölöe
 
	$AT91F_AES_LﬂdNewSìd
 (

3671 
AT91PS_AES
 
pAES


3674 
pAES
->
AES_CR
 = 
AT91C_AES_LOADSEED
;

3675 
	}
}

3681 
__ölöe
 
	$AT91F_AES_SëCry±oKey
 (

3682 
AT91PS_AES
 
pAES
,

3683 
ödex
,

3684 
keyw‹d


3687 
pAES
->
AES_KEYWxR
[
ödex
] = 
keyw‹d
;

3688 
	}
}

3694 
__ölöe
 
	$AT91F_AES_I≈utD©a
 (

3695 
AT91PS_AES
 
pAES
,

3696 
ödex
,

3697 
öd©a


3700 
pAES
->
AES_IDATAxR
[
ödex
] = 
öd©a
;

3701 
	}
}

3707 
__ölöe
 
	$AT91F_AES_GëOuçutD©a
 (

3708 
AT91PS_AES
 
pAES
,

3709 
ödex


3712  
pAES
->
AES_ODATAxR
[
ödex
];

3713 
	}
}

3719 
__ölöe
 
	$AT91F_AES_SëInôüliz©i⁄Ve˘‹
 (

3720 
AT91PS_AES
 
pAES
,

3721 
ödex
,

3722 
öôve˘‹


3725 
pAES
->
AES_IVxR
[
ödex
] = 
öôve˘‹
;

3726 
	}
}

3735 
__ölöe
 
	$AT91F_TDES_E«bÀIt
 (

3736 
AT91PS_TDES
 
pTDES
,

3737 
Êag
)

3740 
pTDES
->
TDES_IER
 = 
Êag
;

3741 
	}
}

3747 
__ölöe
 
	$AT91F_TDES_DißbÀIt
 (

3748 
AT91PS_TDES
 
pTDES
,

3749 
Êag
)

3752 
pTDES
->
TDES_IDR
 = 
Êag
;

3753 
	}
}

3759 
__ölöe
 
	$AT91F_TDES_GëSètus
(

3760 
AT91PS_TDES
 
pTDES
)

3762  
pTDES
->
TDES_ISR
;

3763 
	}
}

3769 
__ölöe
 
	$AT91F_TDES_GëI¡îru±MaskSètus
(

3770 
AT91PS_TDES
 
pTDES
)

3772  
pTDES
->
TDES_IMR
;

3773 
	}
}

3779 
__ölöe
 
	$AT91F_TDES_IsI¡îru±Masked
(

3780 
AT91PS_TDES
 
pTDES
,

3781 
Êag
)

3783  (
	`AT91F_TDES_GëI¡îru±MaskSètus
(
pTDES
Ë& 
Êag
);

3784 
	}
}

3790 
__ölöe
 
	$AT91F_TDES_IsSètusSë
(

3791 
AT91PS_TDES
 
pTDES
,

3792 
Êag
)

3794  (
	`AT91F_TDES_GëSètus
(
pTDES
Ë& 
Êag
);

3795 
	}
}

3801 
__ölöe
 
	$AT91F_TDES_CfgModeReg
 (

3802 
AT91PS_TDES
 
pTDES
,

3803 
mode
)

3806 
pTDES
->
TDES_MR
 = 
mode
;

3807 
	}
}

3813 
__ölöe
 
	$AT91F_TDES_GëModeReg
 (

3814 
AT91PS_TDES
 
pTDES


3817  
pTDES
->
TDES_MR
;

3818 
	}
}

3824 
__ölöe
 
	$AT91F_TDES_SèπPro˚ssög
 (

3825 
AT91PS_TDES
 
pTDES


3828 
pTDES
->
TDES_CR
 = 
AT91C_TDES_START
;

3829 
	}
}

3835 
__ölöe
 
	$AT91F_TDES_So·Re£t
 (

3836 
AT91PS_TDES
 
pTDES


3839 
pTDES
->
TDES_CR
 = 
AT91C_TDES_SWRST
;

3840 
	}
}

3846 
__ölöe
 
	$AT91F_TDES_SëCry±oKey1
 (

3847 
AT91PS_TDES
 
pTDES
,

3848 
ödex
,

3849 
keyw‹d


3852 
pTDES
->
TDES_KEY1WxR
[
ödex
] = 
keyw‹d
;

3853 
	}
}

3859 
__ölöe
 
	$AT91F_TDES_SëCry±oKey2
 (

3860 
AT91PS_TDES
 
pTDES
,

3861 
ödex
,

3862 
keyw‹d


3865 
pTDES
->
TDES_KEY2WxR
[
ödex
] = 
keyw‹d
;

3866 
	}
}

3872 
__ölöe
 
	$AT91F_TDES_SëCry±oKey3
 (

3873 
AT91PS_TDES
 
pTDES
,

3874 
ödex
,

3875 
keyw‹d


3878 
pTDES
->
TDES_KEY3WxR
[
ödex
] = 
keyw‹d
;

3879 
	}
}

3885 
__ölöe
 
	$AT91F_TDES_I≈utD©a
 (

3886 
AT91PS_TDES
 
pTDES
,

3887 
ödex
,

3888 
öd©a


3891 
pTDES
->
TDES_IDATAxR
[
ödex
] = 
öd©a
;

3892 
	}
}

3898 
__ölöe
 
	$AT91F_TDES_GëOuçutD©a
 (

3899 
AT91PS_TDES
 
pTDES
,

3900 
ödex


3903  
pTDES
->
TDES_ODATAxR
[
ödex
];

3904 
	}
}

3910 
__ölöe
 
	$AT91F_TDES_SëInôüliz©i⁄Ve˘‹
 (

3911 
AT91PS_TDES
 
pTDES
,

3912 
ödex
,

3913 
öôve˘‹


3916 
pTDES
->
TDES_IVxR
[
ödex
] = 
öôve˘‹
;

3917 
	}
}

3923 
__ölöe
 
	$AT91F_DBGU_CfgPMC
 ()

3925 
	`AT91F_PMC_E«bÀPîùhClock
(

3926 
AT91C_BASE_PMC
,

3927 ((Ë1 << 
AT91C_ID_SYS
));

3928 
	}
}

3934 
__ölöe
 
	$AT91F_DBGU_CfgPIO
 ()

3937 
	`AT91F_PIO_CfgPîùh
(

3938 
AT91C_BASE_PIOA
,

3939 ((Ë
AT91C_PA27_DRXD
 ) |

3940 ((Ë
AT91C_PA28_DTXD
 ),

3942 
	}
}

3948 
__ölöe
 
	$AT91F_PMC_CfgPMC
 ()

3950 
	`AT91F_PMC_E«bÀPîùhClock
(

3951 
AT91C_BASE_PMC
,

3952 ((Ë1 << 
AT91C_ID_SYS
));

3953 
	}
}

3959 
__ölöe
 
	$AT91F_PMC_CfgPIO
 ()

3962 
	`AT91F_PIO_CfgPîùh
(

3963 
AT91C_BASE_PIOB
,

3964 ((Ë
AT91C_PB30_PCK2
 ) |

3965 ((Ë
AT91C_PB29_PCK1
 ),

3966 ((Ë
AT91C_PB20_PCK0
 ) |

3967 ((Ë
AT91C_PB0_PCK0
 ) |

3968 ((Ë
AT91C_PB22_PCK2
 ) |

3969 ((Ë
AT91C_PB21_PCK1
 ));

3971 
	`AT91F_PIO_CfgPîùh
(

3972 
AT91C_BASE_PIOA
,

3974 ((Ë
AT91C_PA30_PCK2
 ) |

3975 ((Ë
AT91C_PA13_PCK1
 ) |

3976 ((Ë
AT91C_PA27_PCK3
 ));

3977 
	}
}

3983 
__ölöe
 
	$AT91F_VREG_CfgPMC
 ()

3985 
	`AT91F_PMC_E«bÀPîùhClock
(

3986 
AT91C_BASE_PMC
,

3987 ((Ë1 << 
AT91C_ID_SYS
));

3988 
	}
}

3994 
__ölöe
 
	$AT91F_RSTC_CfgPMC
 ()

3996 
	`AT91F_PMC_E«bÀPîùhClock
(

3997 
AT91C_BASE_PMC
,

3998 ((Ë1 << 
AT91C_ID_SYS
));

3999 
	}
}

4005 
__ölöe
 
	$AT91F_SSC_CfgPMC
 ()

4007 
	`AT91F_PMC_E«bÀPîùhClock
(

4008 
AT91C_BASE_PMC
,

4009 ((Ë1 << 
AT91C_ID_SSC
));

4010 
	}
}

4016 
__ölöe
 
	$AT91F_SSC_CfgPIO
 ()

4019 
	`AT91F_PIO_CfgPîùh
(

4020 
AT91C_BASE_PIOA
,

4021 ((Ë
AT91C_PA25_RK
 ) |

4022 ((Ë
AT91C_PA22_TK
 ) |

4023 ((Ë
AT91C_PA21_TF
 ) |

4024 ((Ë
AT91C_PA24_RD
 ) |

4025 ((Ë
AT91C_PA26_RF
 ) |

4026 ((Ë
AT91C_PA23_TD
 ),

4028 
	}
}

4034 
__ölöe
 
	$AT91F_WDTC_CfgPMC
 ()

4036 
	`AT91F_PMC_E«bÀPîùhClock
(

4037 
AT91C_BASE_PMC
,

4038 ((Ë1 << 
AT91C_ID_SYS
));

4039 
	}
}

4045 
__ölöe
 
	$AT91F_US1_CfgPMC
 ()

4047 
	`AT91F_PMC_E«bÀPîùhClock
(

4048 
AT91C_BASE_PMC
,

4049 ((Ë1 << 
AT91C_ID_US1
));

4050 
	}
}

4056 
__ölöe
 
	$AT91F_US1_CfgPIO
 ()

4059 
	`AT91F_PIO_CfgPîùh
(

4060 
AT91C_BASE_PIOB
,

4062 ((Ë
AT91C_PB26_RI1
 ) |

4063 ((Ë
AT91C_PB24_DSR1
 ) |

4064 ((Ë
AT91C_PB23_DCD1
 ) |

4065 ((Ë
AT91C_PB25_DTR1
 ));

4067 
	`AT91F_PIO_CfgPîùh
(

4068 
AT91C_BASE_PIOA
,

4069 ((Ë
AT91C_PA7_SCK1
 ) |

4070 ((Ë
AT91C_PA8_RTS1
 ) |

4071 ((Ë
AT91C_PA6_TXD1
 ) |

4072 ((Ë
AT91C_PA5_RXD1
 ) |

4073 ((Ë
AT91C_PA9_CTS1
 ),

4075 
	}
}

4081 
__ölöe
 
	$AT91F_US0_CfgPMC
 ()

4083 
	`AT91F_PMC_E«bÀPîùhClock
(

4084 
AT91C_BASE_PMC
,

4085 ((Ë1 << 
AT91C_ID_US0
));

4086 
	}
}

4092 
__ölöe
 
	$AT91F_US0_CfgPIO
 ()

4095 
	`AT91F_PIO_CfgPîùh
(

4096 
AT91C_BASE_PIOA
,

4097 ((Ë
AT91C_PA0_RXD0
 ) |

4098 ((Ë
AT91C_PA4_CTS0
 ) |

4099 ((Ë
AT91C_PA3_RTS0
 ) |

4100 ((Ë
AT91C_PA2_SCK0
 ) |

4101 ((Ë
AT91C_PA1_TXD0
 ),

4103 
	}
}

4109 
__ölöe
 
	$AT91F_SPI1_CfgPMC
 ()

4111 
	`AT91F_PMC_E«bÀPîùhClock
(

4112 
AT91C_BASE_PMC
,

4113 ((Ë1 << 
AT91C_ID_SPI1
));

4114 
	}
}

4120 
__ölöe
 
	$AT91F_SPI1_CfgPIO
 ()

4123 
	`AT91F_PIO_CfgPîùh
(

4124 
AT91C_BASE_PIOB
,

4126 ((Ë
AT91C_PB16_NPCS13
 ) |

4127 ((Ë
AT91C_PB10_NPCS11
 ) |

4128 ((Ë
AT91C_PB11_NPCS12
 ));

4130 
	`AT91F_PIO_CfgPîùh
(

4131 
AT91C_BASE_PIOA
,

4133 ((Ë
AT91C_PA4_NPCS13
 ) |

4134 ((Ë
AT91C_PA29_NPCS13
 ) |

4135 ((Ë
AT91C_PA21_NPCS10
 ) |

4136 ((Ë
AT91C_PA22_SPCK1
 ) |

4137 ((Ë
AT91C_PA25_NPCS11
 ) |

4138 ((Ë
AT91C_PA2_NPCS11
 ) |

4139 ((Ë
AT91C_PA24_MISO1
 ) |

4140 ((Ë
AT91C_PA3_NPCS12
 ) |

4141 ((Ë
AT91C_PA26_NPCS12
 ) |

4142 ((Ë
AT91C_PA23_MOSI1
 ));

4143 
	}
}

4149 
__ölöe
 
	$AT91F_SPI0_CfgPMC
 ()

4151 
	`AT91F_PMC_E«bÀPîùhClock
(

4152 
AT91C_BASE_PMC
,

4153 ((Ë1 << 
AT91C_ID_SPI0
));

4154 
	}
}

4160 
__ölöe
 
	$AT91F_SPI0_CfgPIO
 ()

4163 
	`AT91F_PIO_CfgPîùh
(

4164 
AT91C_BASE_PIOB
,

4166 ((Ë
AT91C_PB13_NPCS01
 ) |

4167 ((Ë
AT91C_PB17_NPCS03
 ) |

4168 ((Ë
AT91C_PB14_NPCS02
 ));

4170 
	`AT91F_PIO_CfgPîùh
(

4171 
AT91C_BASE_PIOA
,

4172 ((Ë
AT91C_PA16_MISO0
 ) |

4173 ((Ë
AT91C_PA13_NPCS01
 ) |

4174 ((Ë
AT91C_PA15_NPCS03
 ) |

4175 ((Ë
AT91C_PA17_MOSI0
 ) |

4176 ((Ë
AT91C_PA18_SPCK0
 ) |

4177 ((Ë
AT91C_PA14_NPCS02
 ) |

4178 ((Ë
AT91C_PA12_NPCS00
 ),

4179 ((Ë
AT91C_PA7_NPCS01
 ) |

4180 ((Ë
AT91C_PA9_NPCS03
 ) |

4181 ((Ë
AT91C_PA8_NPCS02
 ));

4182 
	}
}

4188 
__ölöe
 
	$AT91F_PITC_CfgPMC
 ()

4190 
	`AT91F_PMC_E«bÀPîùhClock
(

4191 
AT91C_BASE_PMC
,

4192 ((Ë1 << 
AT91C_ID_SYS
));

4193 
	}
}

4199 
__ölöe
 
	$AT91F_AIC_CfgPMC
 ()

4201 
	`AT91F_PMC_E«bÀPîùhClock
(

4202 
AT91C_BASE_PMC
,

4203 ((Ë1 << 
AT91C_ID_FIQ
) |

4204 ((Ë1 << 
AT91C_ID_IRQ0
) |

4205 ((Ë1 << 
AT91C_ID_IRQ1
));

4206 
	}
}

4212 
__ölöe
 
	$AT91F_AIC_CfgPIO
 ()

4215 
	`AT91F_PIO_CfgPîùh
(

4216 
AT91C_BASE_PIOA
,

4217 ((Ë
AT91C_PA30_IRQ0
 ) |

4218 ((Ë
AT91C_PA29_FIQ
 ),

4219 ((Ë
AT91C_PA14_IRQ1
 ));

4220 
	}
}

4226 
__ölöe
 
	$AT91F_AES_CfgPMC
 ()

4228 
	`AT91F_PMC_E«bÀPîùhClock
(

4229 
AT91C_BASE_PMC
,

4230 ((Ë1 << 
AT91C_ID_AES
));

4231 
	}
}

4237 
__ölöe
 
	$AT91F_TWI_CfgPMC
 ()

4239 
	`AT91F_PMC_E«bÀPîùhClock
(

4240 
AT91C_BASE_PMC
,

4241 ((Ë1 << 
AT91C_ID_TWI
));

4242 
	}
}

4248 
__ölöe
 
	$AT91F_TWI_CfgPIO
 ()

4251 
	`AT91F_PIO_CfgPîùh
(

4252 
AT91C_BASE_PIOA
,

4253 ((Ë
AT91C_PA11_TWCK
 ) |

4254 ((Ë
AT91C_PA10_TWD
 ),

4256 
	}
}

4262 
__ölöe
 
	$AT91F_ADC_CfgPMC
 ()

4264 
	`AT91F_PMC_E«bÀPîùhClock
(

4265 
AT91C_BASE_PMC
,

4266 ((Ë1 << 
AT91C_ID_ADC
));

4267 
	}
}

4273 
__ölöe
 
	$AT91F_ADC_CfgPIO
 ()

4276 
	`AT91F_PIO_CfgPîùh
(

4277 
AT91C_BASE_PIOB
,

4279 ((Ë
AT91C_PB18_ADTRG
 ));

4280 
	}
}

4286 
__ölöe
 
	$AT91F_PWMC_CH3_CfgPIO
 ()

4289 
	`AT91F_PIO_CfgPîùh
(

4290 
AT91C_BASE_PIOB
,

4291 ((Ë
AT91C_PB22_PWM3
 ),

4292 ((Ë
AT91C_PB30_PWM3
 ));

4293 
	}
}

4299 
__ölöe
 
	$AT91F_PWMC_CH2_CfgPIO
 ()

4302 
	`AT91F_PIO_CfgPîùh
(

4303 
AT91C_BASE_PIOB
,

4304 ((Ë
AT91C_PB21_PWM2
 ),

4305 ((Ë
AT91C_PB29_PWM2
 ));

4306 
	}
}

4312 
__ölöe
 
	$AT91F_PWMC_CH1_CfgPIO
 ()

4315 
	`AT91F_PIO_CfgPîùh
(

4316 
AT91C_BASE_PIOB
,

4317 ((Ë
AT91C_PB20_PWM1
 ),

4318 ((Ë
AT91C_PB28_PWM1
 ));

4319 
	}
}

4325 
__ölöe
 
	$AT91F_PWMC_CH0_CfgPIO
 ()

4328 
	`AT91F_PIO_CfgPîùh
(

4329 
AT91C_BASE_PIOB
,

4330 ((Ë
AT91C_PB19_PWM0
 ),

4331 ((Ë
AT91C_PB27_PWM0
 ));

4332 
	}
}

4338 
__ölöe
 
	$AT91F_RTTC_CfgPMC
 ()

4340 
	`AT91F_PMC_E«bÀPîùhClock
(

4341 
AT91C_BASE_PMC
,

4342 ((Ë1 << 
AT91C_ID_SYS
));

4343 
	}
}

4349 
__ölöe
 
	$AT91F_UDP_CfgPMC
 ()

4351 
	`AT91F_PMC_E«bÀPîùhClock
(

4352 
AT91C_BASE_PMC
,

4353 ((Ë1 << 
AT91C_ID_UDP
));

4354 
	}
}

4360 
__ölöe
 
	$AT91F_TDES_CfgPMC
 ()

4362 
	`AT91F_PMC_E«bÀPîùhClock
(

4363 
AT91C_BASE_PMC
,

4364 ((Ë1 << 
AT91C_ID_TDES
));

4365 
	}
}

4371 
__ölöe
 
	$AT91F_EMAC_CfgPMC
 ()

4373 
	`AT91F_PMC_E«bÀPîùhClock
(

4374 
AT91C_BASE_PMC
,

4375 ((Ë1 << 
AT91C_ID_EMAC
));

4376 
	}
}

4382 
__ölöe
 
	$AT91F_EMAC_CfgPIO
 ()

4385 
	`AT91F_PIO_CfgPîùh
(

4386 
AT91C_BASE_PIOB
,

4387 ((Ë
AT91C_PB2_ETX0
 ) |

4388 ((Ë
AT91C_PB12_ETXER
 ) |

4389 ((Ë
AT91C_PB16_ECOL
 ) |

4390 ((Ë
AT91C_PB11_ETX3
 ) |

4391 ((Ë
AT91C_PB6_ERX1
 ) |

4392 ((Ë
AT91C_PB15_ERXDV
 ) |

4393 ((Ë
AT91C_PB13_ERX2
 ) |

4394 ((Ë
AT91C_PB3_ETX1
 ) |

4395 ((Ë
AT91C_PB8_EMDC
 ) |

4396 ((Ë
AT91C_PB5_ERX0
 ) |

4398 ((Ë
AT91C_PB14_ERX3
 ) |

4399 ((Ë
AT91C_PB4_ECRS_ECRSDV
) |

4400 ((Ë
AT91C_PB1_ETXEN
 ) |

4401 ((Ë
AT91C_PB10_ETX2
 ) |

4402 ((Ë
AT91C_PB0_ETXCK_EREFCK
) |

4403 ((Ë
AT91C_PB9_EMDIO
 ) |

4404 ((Ë
AT91C_PB7_ERXER
 ) |

4405 ((Ë
AT91C_PB17_ERXCK
 ),

4407 
	}
}

4413 
__ölöe
 
	$AT91F_TC0_CfgPMC
 ()

4415 
	`AT91F_PMC_E«bÀPîùhClock
(

4416 
AT91C_BASE_PMC
,

4417 ((Ë1 << 
AT91C_ID_TC0
));

4418 
	}
}

4424 
__ölöe
 
	$AT91F_TC0_CfgPIO
 ()

4427 
	`AT91F_PIO_CfgPîùh
(

4428 
AT91C_BASE_PIOB
,

4429 ((Ë
AT91C_PB23_TIOA0
 ) |

4430 ((Ë
AT91C_PB24_TIOB0
 ),

4431 ((Ë
AT91C_PB12_TCLK0
 ));

4432 
	}
}

4438 
__ölöe
 
	$AT91F_TC1_CfgPMC
 ()

4440 
	`AT91F_PMC_E«bÀPîùhClock
(

4441 
AT91C_BASE_PMC
,

4442 ((Ë1 << 
AT91C_ID_TC1
));

4443 
	}
}

4449 
__ölöe
 
	$AT91F_TC1_CfgPIO
 ()

4452 
	`AT91F_PIO_CfgPîùh
(

4453 
AT91C_BASE_PIOB
,

4454 ((Ë
AT91C_PB25_TIOA1
 ) |

4455 ((Ë
AT91C_PB26_TIOB1
 ),

4456 ((Ë
AT91C_PB19_TCLK1
 ));

4457 
	}
}

4463 
__ölöe
 
	$AT91F_TC2_CfgPMC
 ()

4465 
	`AT91F_PMC_E«bÀPîùhClock
(

4466 
AT91C_BASE_PMC
,

4467 ((Ë1 << 
AT91C_ID_TC2
));

4468 
	}
}

4474 
__ölöe
 
	$AT91F_TC2_CfgPIO
 ()

4477 
	`AT91F_PIO_CfgPîùh
(

4478 
AT91C_BASE_PIOB
,

4479 ((Ë
AT91C_PB28_TIOB2
 ) |

4480 ((Ë
AT91C_PB27_TIOA2
 ),

4483 
	`AT91F_PIO_CfgPîùh
(

4484 
AT91C_BASE_PIOA
,

4486 ((Ë
AT91C_PA15_TCLK2
 ));

4487 
	}
}

4493 
__ölöe
 
	$AT91F_MC_CfgPMC
 ()

4495 
	`AT91F_PMC_E«bÀPîùhClock
(

4496 
AT91C_BASE_PMC
,

4497 ((Ë1 << 
AT91C_ID_SYS
));

4498 
	}
}

4504 
__ölöe
 
	$AT91F_PIOA_CfgPMC
 ()

4506 
	`AT91F_PMC_E«bÀPîùhClock
(

4507 
AT91C_BASE_PMC
,

4508 ((Ë1 << 
AT91C_ID_PIOA
));

4509 
	}
}

4515 
__ölöe
 
	$AT91F_PIOB_CfgPMC
 ()

4517 
	`AT91F_PMC_E«bÀPîùhClock
(

4518 
AT91C_BASE_PMC
,

4519 ((Ë1 << 
AT91C_ID_PIOB
));

4520 
	}
}

4526 
__ölöe
 
	$AT91F_CAN_CfgPMC
 ()

4528 
	`AT91F_PMC_E«bÀPîùhClock
(

4529 
AT91C_BASE_PMC
,

4530 ((Ë1 << 
AT91C_ID_CAN
));

4531 
	}
}

4537 
__ölöe
 
	$AT91F_CAN_CfgPIO
 ()

4540 
	`AT91F_PIO_CfgPîùh
(

4541 
AT91C_BASE_PIOA
,

4542 ((Ë
AT91C_PA20_CANTX
 ) |

4543 ((Ë
AT91C_PA19_CANRX
 ),

4545 
	}
}

4551 
__ölöe
 
	$AT91F_PWMC_CfgPMC
 ()

4553 
	`AT91F_PMC_E«bÀPîùhClock
(

4554 
AT91C_BASE_PMC
,

4555 ((Ë1 << 
AT91C_ID_PWMC
));

4556 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/port.c

77 
	~<°dlib.h
>

80 
	~"FªeRTOS.h
"

81 
	~"èsk.h
"

84 
	~"AT91SAM7X256.h
"

87 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

88 
	#p‹tTHUMB_MODE_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x20 )

	)

89 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

90 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSTACK_TYPE
 ) 0 )

	)

93 
	#p‹tENABLE_TIMER
 ( ( Ë0x01 )

	)

94 
	#p‹tPRESCALE_VALUE
 0x00

	)

95 
	#p‹tINTERRUPT_ON_MATCH
 ( ( Ë0x01 )

	)

96 
	#p‹tRESET_COUNT_ON_MATCH
 ( ( Ë0x02 )

	)

99 
	#p‹tPIT_CLOCK_DIVISOR
 ( ( Ë16 )

	)

100 
	#p‹tPIT_COUNTER_VALUE
 ( ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tPIT_CLOCK_DIVISOR
 ) / 1000UL ) * 
p‹tTICK_RATE_MS
 )

	)

102 
	#p‹tINT_LEVEL_SENSITIVE
 0

	)

103 
	#p‹tPIT_ENABLE
 ( ( Ë0x1 << 24 )

	)

104 
	#p‹tPIT_INT_ENABLE
 ( ( Ë0x1 << 25 )

	)

108 
¥vSëupTimîI¡îru±
( );

114 
vP‹tISRSèπFú°Task
( );

124 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

126 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

128 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

132 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

141 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00000000;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

170 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

175 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

181 #ifde‡
THUMB_INTERWORK


184 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

188 
pxT›OfSèck
--;

194 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_SECTION_NESTING
;

196  
pxT›OfSèck
;

197 
	}
}

200 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

204 
	`¥vSëupTimîI¡îru±
();

207 
	`vP‹tISRSèπFú°Task
();

211 
	}
}

214 
	$vP‹tEndScheduÀr
( )

218 
	}
}

224 
	$¥vSëupTimîI¡îru±
( )

226 
AT91PS_PITC
 
pxPIT
 = 
AT91C_BASE_PITC
;

230 #i‡
c⁄figUSE_PREEMPTION
 == 0

232 –
vN⁄Pªem±iveTick
 ) ( );

233 
	`AT91F_AIC_C⁄figuªIt
–
AT91C_ID_SYS
, 
AT91C_AIC_PRIOR_HIGHEST
, 
p‹tINT_LEVEL_SENSITIVE
, ( (*)(ËË
vN⁄Pªem±iveTick
 );

237 –
vPªem±iveTick
 )( );

238 
	`AT91F_AIC_C⁄figuªIt
–
AT91C_ID_SYS
, 
AT91C_AIC_PRIOR_HIGHEST
, 
p‹tINT_LEVEL_SENSITIVE
, ( (*)(ËË
vPªem±iveTick
 );

243 
pxPIT
->
PITC_PIMR
 = 
p‹tPIT_ENABLE
 | 
p‹tPIT_INT_ENABLE
 | 
p‹tPIT_COUNTER_VALUE
;

247 
AT91C_BASE_AIC
->
AIC_IECR
 = 0x1 << 
AT91C_ID_SYS
;

248 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/portISR.c

82 
	~"FªeRTOS.h
"

83 
	~"èsk.h
"

85 
	~"AT91SAM7X256.h
"

88 
	#p‹tTIMER_MATCH_ISR_BIT
 ( ( Ë0x01 )

	)

89 
	#p‹tCLEAR_VIC_INTERRUPT
 ( ( Ë0 )

	)

92 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

93 vﬁ©ûê
	gulCrôiˇlNe°ög
 = 9999UL;

98 
	$vP‹tYõldPro˚ss‹
–Ë
	`__©åibuã__
((
	`öãºu±
("SWI"), 
«ked
));

104 
	`vP‹tISRSèπFú°Task
( );

107 
	$vP‹tISRSèπFú°Task
( )

111 
	`p‹tRESTORE_CONTEXT
();

112 
	}
}

123 
	$vP‹tYõldPro˚ss‹
( )

128 
asm
 volatile ( "ADD LR, LR, #4" );

131 
	`p‹tSAVE_CONTEXT
();

134 
	`vTaskSwôchC⁄ãxt
();

137 
	`p‹tRESTORE_CONTEXT
();

138 
	}
}

146 #i‡
c⁄figUSE_PREEMPTION
 == 0

150 
	$vN⁄Pªem±iveTick
–Ë
	`__©åibuã__
 ((
	`öãºu±
 ("IRQ")));

151 
	$vN⁄Pªem±iveTick
( )

153 
ulDummy
;

158 
	`vTaskIn¸emítTick
();

161 
ulDummy
 = 
AT91C_BASE_PITC
->
PITC_PIVR
;

164 
AT91C_BASE_AIC
->
AIC_EOICR
 = 
ulDummy
;

165 
	}
}

171 
	$vPªem±iveTick
–Ë
	`__©åibuã__
((
«ked
));

172 
	$vPªem±iveTick
( )

175 
	`p‹tSAVE_CONTEXT
();

178 
	`vTaskIn¸emítTick
();

181 
	`vTaskSwôchC⁄ãxt
();

184 
AT91C_BASE_AIC
->
AIC_EOICR
 = 
AT91C_BASE_PITC
->
PITC_PIVR
;;

186 
	`p‹tRESTORE_CONTEXT
();

187 
	}
}

198 
	$vP‹tDißbÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

199 
	$vP‹tE«bÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

201 
	$vP‹tDißbÀI¡îru±sFromThumb
( )

203 
asm
 volatile (

210 
	}
}

212 
	$vP‹tE«bÀI¡îru±sFromThumb
( )

214 
asm
 volatile (

221 
	}
}

228 
	$vP‹tE¡îCrôiˇl
( )

231 
asm
 volatile (

241 
ulCrôiˇlNe°ög
++;

242 
	}
}

244 
	$vP‹tExôCrôiˇl
( )

246 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

249 
ulCrôiˇlNe°ög
--;

253 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

256 
asm
 volatile (

264 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/portmacro.h

90 #i‚de‡
PORTMACRO_H


91 
	#PORTMACRO_H


	)

93 #ifde‡
__˝lu•lus


108 
	#p‹tCHAR
 

	)

109 
	#p‹tFLOAT
 

	)

110 
	#p‹tDOUBLE
 

	)

111 
	#p‹tLONG
 

	)

112 
	#p‹tSHORT
 

	)

113 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

114 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

116 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

117 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

118 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

120 
	tp‹tLONG
 
	tp‹tTickTy≥
;

121 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

126 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

127 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

128 
	#p‹tBYTE_ALIGNMENT
 8

	)

129 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" );

	)

142 
	#p‹tRESTORE_CONTEXT
() \

144 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

145 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

148 
asm
 volatile ( \

174 –Ë
ulCrôiˇlNe°ög
; \

175 –Ë
pxCuºítTCB
; \

176 }

	)

179 
	#p‹tSAVE_CONTEXT
() \

181 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

182 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

185 
asm
 volatile ( \

221 –Ë
ulCrôiˇlNe°ög
; \

222 –Ë
pxCuºítTCB
; \

223 }

	)

226 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

227 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"SWI 0" )

	)

240 #ifde‡
THUMB_INTERWORK


242 
vP‹tDißbÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

243 
vP‹tE«bÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

245 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tDißbÀI¡îru±sFromThumb
()

	)

246 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tE«bÀI¡îru±sFromThumb
()

	)

250 
	#p‹tDISABLE_INTERRUPTS
() \

251 
asm
 volatile ( \

256 "LDMIA SP!, {R0} " )

	)

258 
	#p‹tENABLE_INTERRUPTS
() \

259 
asm
 volatile ( \

264 "LDMIA SP!, {R0} " )

	)

268 
vP‹tE¡îCrôiˇl
( );

269 
vP‹tExôCrôiˇl
( );

271 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

272 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

276 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

277 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

279 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC2000/port.c

78 
	~<°dlib.h
>

81 
	~"FªeRTOS.h
"

82 
	~"èsk.h
"

85 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

86 
	#p‹tTHUMB_MODE_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x20 )

	)

87 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

88 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSTACK_TYPE
 ) 0 )

	)

91 
	#p‹tENABLE_TIMER
 ( ( Ë0x01 )

	)

92 
	#p‹tPRESCALE_VALUE
 0x00

	)

93 
	#p‹tINTERRUPT_ON_MATCH
 ( ( Ë0x01 )

	)

94 
	#p‹tRESET_COUNT_ON_MATCH
 ( ( Ë0x02 )

	)

97 
	#p‹tTIMER_VIC_CHANNEL
 ( ( Ë0x0004 )

	)

98 
	#p‹tTIMER_VIC_CHANNEL_BIT
 ( ( Ë0x0010 )

	)

99 
	#p‹tTIMER_VIC_ENABLE
 ( ( Ë0x0020 )

	)

104 
¥vSëupTimîI¡îru±
( );

110 
vP‹tISRSèπFú°Task
( );

120 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

122 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

124 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

128 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

137 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaaaaaa;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

166 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

171 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

177 if–––Ë
pxCode
 & 0x01UL ) != 0x00 )

180 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

183 
pxT›OfSèck
--;

189 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_SECTION_NESTING
;

191  
pxT›OfSèck
;

192 
	}
}

195 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

199 
	`¥vSëupTimîI¡îru±
();

202 
	`vP‹tISRSèπFú°Task
();

206 
	}
}

209 
	$vP‹tEndScheduÀr
( )

213 
	}
}

219 
	$¥vSëupTimîI¡îru±
( )

221 
ulCom∑ªM©ch
;

222 –
vTickISR
 )( );

226 
T0_PR
 = 
p‹tPRESCALE_VALUE
;

229 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

233 #i‡
p‹tPRESCALE_VALUE
 != 0

235 
ulCom∑ªM©ch
 /–
p‹tPRESCALE_VALUE
 + 1 );

238 
T0_MR0
 = 
ulCom∑ªM©ch
;

241 
T0_MCR
 = 
p‹tRESET_COUNT_ON_MATCH
 | 
p‹tINTERRUPT_ON_MATCH
;

244 
VICI¡Sñe˘
 &~–
p‹tTIMER_VIC_CHANNEL_BIT
 );

245 
VICI¡E«bÀ
 |
p‹tTIMER_VIC_CHANNEL_BIT
;

250 
VICVe˘Addr0
 = ( Ë
vTickISR
;

251 
VICVe˘C¡l0
 = 
p‹tTIMER_VIC_CHANNEL
 | 
p‹tTIMER_VIC_ENABLE
;

255 
T0_TCR
 = 
p‹tENABLE_TIMER
;

256 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC2000/portISR.c

94 
	~"FªeRTOS.h
"

97 
	#p‹tTIMER_MATCH_ISR_BIT
 ( ( Ë0x01 )

	)

98 
	#p‹tCLEAR_VIC_INTERRUPT
 ( ( Ë0 )

	)

101 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

102 vﬁ©ûê
	gulCrôiˇlNe°ög
 = 9999UL;

107 
	$vP‹tYõldPro˚ss‹
–Ë
	`__©åibuã__
((
	`öãºu±
("SWI"), 
«ked
));

113 
	`vP‹tISRSèπFú°Task
( );

116 
	$vP‹tISRSèπFú°Task
( )

120 
	`p‹tRESTORE_CONTEXT
();

121 
	}
}

132 
	$vP‹tYõldPro˚ss‹
( )

137 
__asm
 volatile ( "ADD LR, LR, #4" );

140 
	`p‹tSAVE_CONTEXT
();

143 
__asm
 volatile ( "bl vTaskSwitchContext" );

146 
	`p‹tRESTORE_CONTEXT
();

147 
	}
}

153 
	$vTickISR
–Ë
	`__©åibuã__
((
«ked
));

154 
	$vTickISR
( )

157 
	`p‹tSAVE_CONTEXT
();

161 
__asm
 volatile( "bl vTaskIncrementTick" );

163 #i‡
c⁄figUSE_PREEMPTION
 == 1

164 
__asm
 volatile( "bl vTaskSwitchContext" );

168 
T0_IR
 = 
p‹tTIMER_MATCH_ISR_BIT
;

169 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

172 
	`p‹tRESTORE_CONTEXT
();

173 
	}
}

182 #ifde‡
THUMB_INTERWORK


184 
	$vP‹tDißbÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

185 
	$vP‹tE«bÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

187 
	$vP‹tDißbÀI¡îru±sFromThumb
( )

189 
__asm
 volatile (

196 
	}
}

198 
	$vP‹tE«bÀI¡îru±sFromThumb
( )

200 
__asm
 volatile (

207 
	}
}

215 
	$vP‹tE¡îCrôiˇl
( )

218 
__asm
 volatile (

228 
ulCrôiˇlNe°ög
++;

229 
	}
}

231 
	$vP‹tExôCrôiˇl
( )

233 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

236 
ulCrôiˇlNe°ög
--;

240 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

243 
__asm
 volatile (

251 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC2000/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

91 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

95 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

97 
	tp‹tLONG
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

103 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

104 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

105 
	#p‹tBYTE_ALIGNMENT
 8

	)

106 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûê–"NOP" );

	)

119 
	#p‹tRESTORE_CONTEXT
() \

121 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

122 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

125 
__asm
 volatile ( \

151 –Ë
ulCrôiˇlNe°ög
; \

152 –Ë
pxCuºítTCB
; \

153 }

	)

156 
	#p‹tSAVE_CONTEXT
() \

158 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

159 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

162 
__asm
 volatile ( \

198 –Ë
ulCrôiˇlNe°ög
; \

199 –Ë
pxCuºítTCB
; \

200 }

	)

202 
vTaskSwôchC⁄ãxt
( );

203 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

204 
	#p‹tYIELD
(Ë
__asm
 vﬁ©ûê–"SWI 0" )

	)

217 #ifde‡
THUMB_INTERWORK


219 
vP‹tDißbÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

220 
vP‹tE«bÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

222 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tDißbÀI¡îru±sFromThumb
()

	)

223 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tE«bÀI¡îru±sFromThumb
()

	)

227 
	#p‹tDISABLE_INTERRUPTS
() \

228 
__asm
 volatile ( \

233 "LDMIA SP!, {R0} " )

	)

235 
	#p‹tENABLE_INTERRUPTS
() \

236 
__asm
 volatile ( \

241 "LDMIA SP!, {R0} " )

	)

245 
vP‹tE¡îCrôiˇl
( );

246 
vP‹tExôCrôiˇl
( );

248 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

249 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

253 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

254 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

256 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC23xx/port.c

78 
	~<°dlib.h
>

81 
	~"FªeRTOS.h
"

82 
	~"èsk.h
"

85 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

86 
	#p‹tTHUMB_MODE_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x20 )

	)

87 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

88 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSTACK_TYPE
 ) 0 )

	)

91 
	#p‹tENABLE_TIMER
 ( ( 
p‹tCHAR
 ) 0x01 )

	)

92 
	#p‹tPRESCALE_VALUE
 0x00

	)

93 
	#p‹tINTERRUPT_ON_MATCH
 ( ( 
p‹tLONG
 ) 0x01 )

	)

94 
	#p‹tRESET_COUNT_ON_MATCH
 ( ( 
p‹tLONG
 ) 0x02 )

	)

97 
	#p‹tTIMER_VIC_CHANNEL
 ( ( 
p‹tLONG
 ) 0x0004 )

	)

98 
	#p‹tTIMER_VIC_CHANNEL_BIT
 ( ( 
p‹tLONG
 ) 0x0010 )

	)

99 
	#p‹tTIMER_VIC_ENABLE
 ( ( 
p‹tLONG
 ) 0x0020 )

	)

104 
¥vSëupTimîI¡îru±
( );

110 
vP‹tISRSèπFú°Task
( );

120 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

122 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

124 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

128 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

137 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00000000;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

166 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

171 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

177 if–––Ë
pxCode
 & 0x01UL ) != 0x00 )

180 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

183 
pxT›OfSèck
--;

189 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_SECTION_NESTING
;

191  
pxT›OfSèck
;

192 
	}
}

195 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

199 
	`¥vSëupTimîI¡îru±
();

202 
	`vP‹tISRSèπFú°Task
();

206 
	}
}

209 
	$vP‹tEndScheduÀr
( )

213 
	}
}

219 
	$¥vSëupTimîI¡îru±
( )

221 
p‹tLONG
 
ulCom∑ªM©ch
;

223 
PCLKSEL0
 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);

224 
T0TCR
 = 2;

225 
T0CTCR
 = 0;

229 
T0PR
 = 
p‹tPRESCALE_VALUE
;

232 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

236 #i‡
p‹tPRESCALE_VALUE
 != 0

238 
ulCom∑ªM©ch
 /–
p‹tPRESCALE_VALUE
 + 1 );

241 
T0MR1
 = 
ulCom∑ªM©ch
;

244 
T0MCR
 = (3 << 3);

247 
VICI¡E«bÀ
 = 0x00000010;

251 #i‡
c⁄figUSE_PREEMPTION
 == 1

253 –
vPªem±iveTick
 )( );

254 
VICVe˘Addr4
 = ( 
p‹tLONG
 ) 
vPªem±iveTick
;

258 –
vN⁄Pªem±iveTick
 )( );

259 
VICVe˘Addr4
 = ( 
p‹tLONG
 ) 
vN⁄Pªem±iveTick
;

263 
VICVe˘C¡l4
 = 1;

267 
T0TCR
 = 
p‹tENABLE_TIMER
;

268 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC23xx/portISR.c

75 
	~"FªeRTOS.h
"

76 
	~"èsk.h
"

79 
	#p‹tTIMER_MATCH_ISR_BIT
 ( ( 
p‹tCHAR
 ) 0x01 )

	)

80 
	#p‹tCLEAR_VIC_INTERRUPT
 ( ( 
p‹tLONG
 ) 0 )

	)

83 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
p‹tLONG
 ) 0 )

	)

84 vﬁ©ûê
p‹tLONG
 
	gulCrôiˇlNe°ög
 = 9999UL;

89 
	$vP‹tYõldPro˚ss‹
–Ë
	`__©åibuã__
((
	`öãºu±
("SWI"), 
«ked
));

95 
	`vP‹tISRSèπFú°Task
( );

98 
	$vP‹tISRSèπFú°Task
( )

102 
	`p‹tRESTORE_CONTEXT
();

103 
	}
}

114 
	$vP‹tYõldPro˚ss‹
( )

119 
__asm
 volatile ( "ADD LR, LR, #4" );

122 
	`p‹tSAVE_CONTEXT
();

125 
__asm
 volatile( "bl vTaskSwitchContext" );

128 
	`p‹tRESTORE_CONTEXT
();

129 
	}
}

138 #i‡
c⁄figUSE_PREEMPTION
 == 0

142 
	$vN⁄Pªem±iveTick
–Ë
	`__©åibuã__
 ((
	`öãºu±
 ("IRQ")));

143 
	$vN⁄Pªem±iveTick
( )

145 
	`vTaskIn¸emítTick
();

146 
T0IR
 = 2;

147 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

148 
	}
}

154 
	$vPªem±iveTick
–Ë
	`__©åibuã__
((
«ked
));

155 
	$vPªem±iveTick
( )

158 
	`p‹tSAVE_CONTEXT
();

162 
__asm
 volatile( "bl vTaskIncrementTick" );

163 
__asm
 volatile( "bl vTaskSwitchContext" );

166 
T0IR
 = 2;

167 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

170 
	`p‹tRESTORE_CONTEXT
();

171 
	}
}

182 #ifde‡
THUMB_INTERWORK


184 
	$vP‹tDißbÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

185 
	$vP‹tE«bÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

187 
	$vP‹tDißbÀI¡îru±sFromThumb
( )

189 
__asm
 volatile (

196 
	}
}

198 
	$vP‹tE«bÀI¡îru±sFromThumb
( )

200 
__asm
 volatile (

207 
	}
}

215 
	$vP‹tE¡îCrôiˇl
( )

218 
__asm
 volatile (

228 
ulCrôiˇlNe°ög
++;

229 
	}
}

231 
	$vP‹tExôCrôiˇl
( )

233 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

236 
ulCrôiˇlNe°ög
--;

240 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

243 
__asm
 volatile (

251 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC23xx/portmacro.h

90 #i‚de‡
PORTMACRO_H


91 
	#PORTMACRO_H


	)

93 #ifde‡
__˝lu•lus


108 
	#p‹tCHAR
 

	)

109 
	#p‹tFLOAT
 

	)

110 
	#p‹tDOUBLE
 

	)

111 
	#p‹tLONG
 

	)

112 
	#p‹tSHORT
 

	)

113 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

114 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

116 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

117 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

118 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

120 
	tp‹tLONG
 
	tp‹tTickTy≥
;

121 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

126 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

127 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

128 
	#p‹tBYTE_ALIGNMENT
 8

	)

129 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûê–"NOP" );

	)

142 
	#p‹tRESTORE_CONTEXT
() \

144 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

145 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

148 
__asm
 volatile ( \

174 –Ë
ulCrôiˇlNe°ög
; \

175 –Ë
pxCuºítTCB
; \

176 }

	)

179 
	#p‹tSAVE_CONTEXT
() \

181 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

182 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

185 
__asm
 volatile ( \

221 –Ë
ulCrôiˇlNe°ög
; \

222 –Ë
pxCuºítTCB
; \

223 }

	)

226 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

227 
	#p‹tYIELD
(Ë
__asm
 vﬁ©ûê–"SWI 0" )

	)

240 #ifde‡
THUMB_INTERWORK


242 
vP‹tDißbÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

243 
vP‹tE«bÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

245 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tDißbÀI¡îru±sFromThumb
()

	)

246 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tE«bÀI¡îru±sFromThumb
()

	)

250 
	#p‹tDISABLE_INTERRUPTS
() \

251 
__asm
 volatile ( \

256 "LDMIA SP!, {R0} " )

	)

258 
	#p‹tENABLE_INTERRUPTS
() \

259 
__asm
 volatile ( \

264 "LDMIA SP!, {R0} " )

	)

268 
vP‹tE¡îCrôiˇl
( );

269 
vP‹tExôCrôiˇl
( );

271 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

272 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

276 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

277 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

279 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM0/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê*Ë0xe000e010 )

	)

77 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê*Ë0xe000e014 )

	)

78 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê*Ë0xe000ed04 )

	)

79 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê*Ë0xe000ed20 )

	)

80 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

81 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

82 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

83 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

84 
	#p‹tMIN_INTERRUPT_PRIORITY
 ( 255UL )

	)

85 
	#p‹tNVIC_PENDSV_PRI
 ( 
p‹tMIN_INTERRUPT_PRIORITY
 << 16UL )

	)

86 
	#p‹tNVIC_SYSTICK_PRI
 ( 
p‹tMIN_INTERRUPT_PRIORITY
 << 24UL )

	)

89 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

93 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

98 
¥vSëupTimîI¡îru±
( );

103 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

104 
	`xP‹tSysTickH™dÀr
( );

105 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

110 
	$vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

117 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

121 
pxT›OfSèck
--;

122 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

123 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

125 
pxT›OfSèck
 -= 6;

126 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

127 
pxT›OfSèck
 -= 8;

129  
pxT›OfSèck
;

130 
	}
}

133 
	$vP‹tSVCH™dÀr
( )

135 
__asm
 volatile (

158 
	}
}

161 
	$vP‹tSèπFú°Task
( )

163 
__asm
 volatile(

171 
	}
}

177 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

180 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

181 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

185 
	`¥vSëupTimîI¡îru±
();

188 
uxCrôiˇlNe°ög
 = 0;

191 
	`vP‹tSèπFú°Task
();

195 
	}
}

198 
	$vP‹tEndScheduÀr
( )

202 
	}
}

205 
	$vP‹tYõldFromISR
( )

208 *–
p‹tNVIC_INT_CTRL
 ) = 
p‹tNVIC_PENDSVSET
;

209 
	}
}

212 
	$vP‹tE¡îCrôiˇl
( )

214 
	`p‹tDISABLE_INTERRUPTS
();

215 
uxCrôiˇlNe°ög
++;

216 
	}
}

219 
	$vP‹tExôCrôiˇl
( )

221 
uxCrôiˇlNe°ög
--;

222 if–
uxCrôiˇlNe°ög
 == 0 )

224 
	`p‹tENABLE_INTERRUPTS
();

226 
	}
}

229 
	$xP‹tPídSVH™dÀr
( )

233 
__asm
 volatile

274 
	}
}

277 
	$xP‹tSysTickH™dÀr
( )

279 
ulDummy
;

282 #i‡
c⁄figUSE_PREEMPTION
 == 1

283 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

286 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

288 
	`vTaskIn¸emítTick
();

290 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

291 
	}
}

298 
	$¥vSëupTimîI¡îru±
( )

301 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

302 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

303 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM0/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
vP‹tYõldFromISR
( );

112 
	#p‹tYIELD
(Ë
	`vP‹tYõldFromISR
()

	)

113 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vP‹tYõldFromISR
()

	)

118 
vP‹tE¡îCrôiˇl
( );

119 
vP‹tExôCrôiˇl
( );

120 
	#p‹tSET_INTERRUPT_MASK
(Ë
__asm
 vﬁ©ûê–" cpsid i " )

	)

121 
	#p‹tCLEAR_INTERRUPT_MASK
(Ë
__asm
 vﬁ©ûê–" cpsõ i " )

	)

122 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`p‹tSET_INTERRUPT_MASK
()

	)

123 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`p‹tCLEAR_INTERRUPT_MASK
();()
	)
x

124 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`p‹tSET_INTERRUPT_MASK
()

	)

125 
	#p‹tENABLE_INTERRUPTS
(Ë
	`p‹tCLEAR_INTERRUPT_MASK
()

	)

126 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

127 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

132 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

133 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

135 
	#p‹tNOP
()

	)

137 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM3/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

78 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


79 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

83 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê*Ë0xe000e010 )

	)

84 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê*Ë0xe000e014 )

	)

85 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê*Ë0xe000ed04 )

	)

86 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê*Ë0xe000ed20 )

	)

87 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

88 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

89 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

90 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

91 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16 )

	)

92 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24 )

	)

95 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

99 c⁄° 
	gulKî√lPri‹ôy
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

103 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

108 
¥vSëupTimîI¡îru±
( );

113 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

114 
	`xP‹tSysTickH™dÀr
( );

115 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

120 
	$¥vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

127 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

131 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = 0;

137 
pxT›OfSèck
 -= 5;

138 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

139 
pxT›OfSèck
 -= 8;

141  
pxT›OfSèck
;

142 
	}
}

145 
	$vP‹tSVCH™dÀr
( )

147 
__asm
 volatile (

161 
	}
}

164 
	$¥vP‹tSèπFú°Task
( )

166 
__asm
 volatile(

175 
	}
}

181 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

184 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

185 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

189 
	`¥vSëupTimîI¡îru±
();

192 
uxCrôiˇlNe°ög
 = 0;

195 
	`¥vP‹tSèπFú°Task
();

199 
	}
}

202 
	$vP‹tEndScheduÀr
( )

206 
	}
}

209 
	$vP‹tYõldFromISR
( )

212 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

213 
	}
}

216 
	$vP‹tE¡îCrôiˇl
( )

218 
	`p‹tDISABLE_INTERRUPTS
();

219 
uxCrôiˇlNe°ög
++;

220 
	}
}

223 
	$vP‹tExôCrôiˇl
( )

225 
uxCrôiˇlNe°ög
--;

226 if–
uxCrôiˇlNe°ög
 == 0 )

228 
	`p‹tENABLE_INTERRUPTS
();

230 
	}
}

233 
	$xP‹tPídSVH™dÀr
( )

237 
__asm
 volatile

263 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

265 
	}
}

268 
	$xP‹tSysTickH™dÀr
( )

270 
ulDummy
;

273 #i‡
c⁄figUSE_PREEMPTION
 == 1

274 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

277 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

279 
	`vTaskIn¸emítTick
();

281 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

282 
	}
}

289 
	$¥vSëupTimîI¡îru±
( )

292 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

293 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

294 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
vP‹tYõldFromISR
( );

113 
	#p‹tYIELD
(Ë
	`vP‹tYõldFromISR
()

	)

115 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vP‹tYõldFromISR
()

	)

125 
	#p‹tSET_INTERRUPT_MASK
() \

126 
__asm
 volatile \

130 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
):"r0" \

131 )

	)

137 
	#p‹tCLEAR_INTERRUPT_MASK
() \

138 
__asm
 volatile \

143 )

	)

145 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`p‹tSET_INTERRUPT_MASK
()

	)

146 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`p‹tCLEAR_INTERRUPT_MASK
();()
	)
x

149 
vP‹tE¡îCrôiˇl
( );

150 
vP‹tExôCrôiˇl
( );

152 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`p‹tSET_INTERRUPT_MASK
()

	)

153 
	#p‹tENABLE_INTERRUPTS
(Ë
	`p‹tCLEAR_INTERRUPT_MASK
()

	)

154 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

155 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

159 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

160 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

162 
	#p‹tNOP
()

	)

164 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM3_MPU/port.c

74 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

79 
	~"queue.h
"

81 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


84 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê* ) 0xe000e010 )

	)

85 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê* ) 0xe000e014 )

	)

86 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê* ) 0xe000ed20 )

	)

87 
	#p‹tNVIC_SYSPRI1
 ( ( vﬁ©ûê* ) 0xe000ed1¯)

	)

88 
	#p‹tNVIC_SYS_CTRL_STATE
 ( ( vﬁ©ûê* ) 0xe000ed24 )

	)

89 
	#p‹tNVIC_MEM_FAULT_ENABLE
 ( 1UL << 16UL )

	)

92 
	#p‹tMPU_TYPE
 ( ( vﬁ©ûê* ) 0xe000ed90 )

	)

93 
	#p‹tMPU_REGION_BASE_ADDRESS
 ( ( vﬁ©ûê* ) 0xe000ed9C )

	)

94 
	#p‹tMPU_REGION_ATTRIBUTE
 ( ( vﬁ©ûê* ) 0xe000edA0 )

	)

95 
	#p‹tMPU_CTRL
 ( ( vﬁ©ûê* ) 0xe000ed94 )

	)

96 
	#p‹tEXPECTED_MPU_TYPE_VALUE
 ( 8UL << 8UL )

	)

97 
	#p‹tMPU_ENABLE
 ( 0x01UL )

	)

98 
	#p‹tMPU_BACKGROUND_ENABLE
 ( 1UL << 2UL )

	)

99 
	#p‹tPRIVILEGED_EXECUTION_START_ADDRESS
 ( 0UL )

	)

100 
	#p‹tMPU_REGION_VALID
 ( 0x10UL )

	)

101 
	#p‹tMPU_REGION_ENABLE
 ( 0x01UL )

	)

102 
	#p‹tPERIPHERALS_START_ADDRESS
 0x40000000UL

	)

103 
	#p‹tPERIPHERALS_END_ADDRESS
 0x5FFFFFFFUL

	)

106 
	#p‹tNVIC_SYSTICK_CLK
 ( 0x00000004UL )

	)

107 
	#p‹tNVIC_SYSTICK_INT
 ( 0x00000002UL )

	)

108 
	#p‹tNVIC_SYSTICK_ENABLE
 ( 0x00000001UL )

	)

109 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

110 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

111 
	#p‹tNVIC_SVC_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

114 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

115 
	#p‹tINITIAL_CONTROL_IF_UNPRIVILEGED
 ( 0x03 )

	)

116 
	#p‹tINITIAL_CONTROL_IF_PRIVILEGED
 ( 0x02 )

	)

119 
	#p‹tOFFSET_TO_PC
 ( 6 )

	)

122 
	#p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 ) if–xRu¬ögPrivûeged !
pdTRUE
 ) 
__asm
 vﬁ©ûê–" mr†r0, c⁄åﬁ \¿‹∏r0, #1 \¿m§ c⁄åﬁ,Ñ0" :::"r0" )

	)

127 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

132 
	$¥vSëupTimîI¡îru±
–Ë
PRIVILEGED_FUNCTION
;

137 
	$¥vSëupMPU
–Ë
PRIVILEGED_FUNCTION
;

144 
	$¥vGëMPURegi⁄SizeSëtög
–
ulA˘uÆSizeInByãs
 ) 
PRIVILEGED_FUNCTION
;

151 
p‹tBASE_TYPE
 
	$¥vRai£Privûege
–Ë
	`__©åibuã__
(–
«ked
 ));

156 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 )Ë
PRIVILEGED_FUNCTION
;

157 
	$xP‹tSysTickH™dÀr
–Ë
	`__©åibuã__
 ((
	`›timize
("3"))Ë
PRIVILEGED_FUNCTION
;

158 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 )Ë
PRIVILEGED_FUNCTION
;

163 
	$¥vRe°‹eC⁄ãxtOfFú°Task
–Ë
	`__©åibuã__
(–
«ked
 )Ë
PRIVILEGED_FUNCTION
;

169 
	$¥vSVCH™dÀr
–*
pulRegi°îs
 ) 
	`__©åibuã__
(–
noölöe
 )Ë
PRIVILEGED_FUNCTION
;

174 sig√d 
p‹tBASE_TYPE
 
	`MPU_xTaskGíîicCª©e
–
pdTASK_CODE
 
pvTaskCode
, c⁄° sig√d * c⁄° 
pcName
, 
usSèckDïth
, *
pvP¨amëîs
, p‹tBASE_TYPE 
uxPri‹ôy
, 
xTaskH™dÀ
 *
pxCª©edTask
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 );

175 
	`MPU_vTaskAŒoˇãMPURegi⁄s
–
xTaskH™dÀ
 
xTask
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 );

176 
	`MPU_vTaskDñëe
–
xTaskH™dÀ
 
pxTaskToDñëe
 );

177 
	`MPU_vTaskDñayU¡û
–
p‹tTickTy≥
 * c⁄° 
pxPªviousWakeTime
,Ö‹tTickTy≥ 
xTimeIn¸emít
 );

178 
	`MPU_vTaskDñay
–
p‹tTickTy≥
 
xTicksToDñay
 );

179 
p‹tBASE_TYPE
 
	`MPU_uxTaskPri‹ôyGë
–
xTaskH™dÀ
 
pxTask
 );

180 
	`MPU_vTaskPri‹ôySë
–
xTaskH™dÀ
 
pxTask
, 
p‹tBASE_TYPE
 
uxNewPri‹ôy
 );

181 
	`MPU_vTaskSu•íd
–
xTaskH™dÀ
 
pxTaskToSu•íd
 );

182 sig√d 
p‹tBASE_TYPE
 
	`MPU_xTaskIsTaskSu•íded
–
xTaskH™dÀ
 
xTask
 );

183 
	`MPU_vTaskResume
–
xTaskH™dÀ
 
pxTaskToResume
 );

184 
	`MPU_vTaskSu•ídAŒ
( );

185 sig√d 
p‹tBASE_TYPE
 
	`MPU_xTaskResumeAŒ
( );

186 
p‹tTickTy≥
 
	`MPU_xTaskGëTickCou¡
( );

187 
p‹tBASE_TYPE
 
	`MPU_uxTaskGëNumbîOfTasks
( );

188 
	`MPU_vTaskLi°
–sig√d *
pcWrôeBuf„r
 );

189 
	`MPU_vTaskGëRunTimeSèts
–sig√d *
pcWrôeBuf„r
 );

190 
	`MPU_vTaskSèπTø˚
–sig√d * 
pcBuf„r
, 
ulBuf„rSize
 );

191 
	`MPU_ulTaskEndTø˚
( );

192 
	`MPU_vTaskSëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
, 
pdTASK_HOOK_CODE
 
pxTagVÆue
 );

193 
pdTASK_HOOK_CODE
 
	`MPU_xTaskGëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
 );

194 
p‹tBASE_TYPE
 
	`MPU_xTaskCÆlAµliˇti⁄TaskHook
–
xTaskH™dÀ
 
xTask
, *
pvP¨amëî
 );

195 
p‹tBASE_TYPE
 
	`MPU_uxTaskGëSèckHighW©îM¨k
–
xTaskH™dÀ
 
xTask
 );

196 
xTaskH™dÀ
 
	`MPU_xTaskGëCuºítTaskH™dÀ
( );

197 
p‹tBASE_TYPE
 
	`MPU_xTaskGëScheduÀrSèã
( );

198 
xQueueH™dÀ
 
	`MPU_xQueueGíîicCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
, 
ucQueueTy≥
 );

199 sig√d 
p‹tBASE_TYPE
 
	`MPU_xQueueGíîicSíd
–
xQueueH™dÀ
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

200 
p‹tBASE_TYPE
 
	`MPU_uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
pxQueue
 );

201 sig√d 
p‹tBASE_TYPE
 
	`MPU_xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xJu°Pìkög
 );

202 
xQueueH™dÀ
 
	`MPU_xQueueCª©eMuãx
( );

203 
xQueueH™dÀ
 
	`MPU_xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 );

204 
p‹tBASE_TYPE
 
	`MPU_xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
xMuãx
, 
p‹tTickTy≥
 
xBlockTime
 );

205 
p‹tBASE_TYPE
 
	`MPU_xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
xMuãx
 );

206 sig√d 
p‹tBASE_TYPE
 
	`MPU_xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

207 sig√d 
p‹tBASE_TYPE
 
	`MPU_xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xJu°Pìkög
 );

208 
	`MPU_vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcName
 );

209 *
	`MPU_pvP‹tMÆloc
–
size_t
 
xSize
 );

210 
	`MPU_vP‹tFªe
–*
pv
 );

211 
	`MPU_vP‹tInôüli£Blocks
( );

212 
size_t
 
	`MPU_xP‹tGëFªeHópSize
( );

219 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
, 
p‹tBASE_TYPE
 
xRunPrivûeged
 )

223 
pxT›OfSèck
--;

224 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

225 
pxT›OfSèck
--;

226 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

227 
pxT›OfSèck
--;

228 *
pxT›OfSèck
 = 0;

229 
pxT›OfSèck
 -= 5;

230 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

231 
pxT›OfSèck
 -= 9;

233 if–
xRunPrivûeged
 =
pdTRUE
 )

235 *
pxT›OfSèck
 = 
p‹tINITIAL_CONTROL_IF_PRIVILEGED
;

239 *
pxT›OfSèck
 = 
p‹tINITIAL_CONTROL_IF_UNPRIVILEGED
;

242  
pxT›OfSèck
;

243 
	}
}

246 
	$vP‹tSVCH™dÀr
( )

249 
__asm
 volatile

251 #i‚de‡
USE_PROCESS_STACK


265 
	`¥vSVCH™dÀr
–
NULL
 );

266 
	}
}

269 
	$¥vSVCH™dÀr
–*
pulP¨am
 )

271 
ucSVCNumbî
;

275 
ucSVCNumbî
 = ( ( * ) 
pulP¨am
[ 
p‹tOFFSET_TO_PC
 ] )[ -2 ];

276  
ucSVCNumbî
 )

278 
p‹tSVC_START_SCHEDULER
 : *(
p‹tNVIC_SYSPRI1
Ë|
p‹tNVIC_SVC_PRI
;

279 
	`¥vRe°‹eC⁄ãxtOfFú°Task
();

282 
p‹tSVC_YIELD
 : *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

285 
p‹tSVC_RAISE_PRIVILEGE
 : 
__asm
 volatile

297 
	}
}

300 
	$¥vRe°‹eC⁄ãxtOfFú°Task
( )

302 
__asm
 volatile

326 
	}
}

332 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

335 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

336 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

339 
	`¥vSëupMPU
();

343 
	`¥vSëupTimîI¡îru±
();

346 
uxCrôiˇlNe°ög
 = 0;

349 
__asm
 volatile( " svc %0 \n"

350 :: "i" (
p‹tSVC_START_SCHEDULER
) );

354 
	}
}

357 
	$vP‹tEndScheduÀr
( )

361 
	}
}

364 
	$vP‹tE¡îCrôiˇl
( )

366 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

368 
	`p‹tDISABLE_INTERRUPTS
();

369 
uxCrôiˇlNe°ög
++;

371 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

372 
	}
}

375 
	$vP‹tExôCrôiˇl
( )

377 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

379 
uxCrôiˇlNe°ög
--;

380 if–
uxCrôiˇlNe°ög
 == 0 )

382 
	`p‹tENABLE_INTERRUPTS
();

384 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

385 
	}
}

388 
	$xP‹tPídSVH™dÀr
( )

392 
__asm
 volatile

425 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

427 
	}
}

430 
	$xP‹tSysTickH™dÀr
( )

432 
ulDummy
;

435 #i‡
c⁄figUSE_PREEMPTION
 == 1

436 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

439 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

441 
	`vTaskIn¸emítTick
();

443 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

444 
	}
}

451 
	$¥vSëupTimîI¡îru±
( )

454 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

455 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

456 
	}
}

459 
	$¥vSëupMPU
( )

461 
__¥ivûeged_fun˘i⁄s_íd__
[];

462 
__FLASH_£gmít_°¨t__
[];

463 
__FLASH_£gmít_íd__
[];

464 
__¥ivûeged_d©a_°¨t__
[];

465 
__¥ivûeged_d©a_íd__
[];

468 if–*
p‹tMPU_TYPE
 =
p‹tEXPECTED_MPU_TYPE_VALUE
 )

471 *
p‹tMPU_REGION_BASE_ADDRESS
 = ( ( Ë
__FLASH_£gmít_°¨t__
 ) |

472 –
p‹tMPU_REGION_VALID
 ) |

473 –
p‹tUNPRIVILEGED_FLASH_REGION
 );

475 *
p‹tMPU_REGION_ATTRIBUTE
 = ( 
p‹tMPU_REGION_READ_ONLY
 ) |

476 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

477 –
	`¥vGëMPURegi⁄SizeSëtög
––Ë
__FLASH_£gmít_íd__
 - ( Ë
__FLASH_£gmít_°¨t__
 ) ) |

478 –
p‹tMPU_REGION_ENABLE
 );

483 *
p‹tMPU_REGION_BASE_ADDRESS
 = ( ( Ë
__FLASH_£gmít_°¨t__
 ) |

484 –
p‹tMPU_REGION_VALID
 ) |

485 –
p‹tPRIVILEGED_FLASH_REGION
 );

487 *
p‹tMPU_REGION_ATTRIBUTE
 = ( 
p‹tMPU_REGION_PRIVILEGED_READ_ONLY
 ) |

488 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

489 –
	`¥vGëMPURegi⁄SizeSëtög
––Ë
__¥ivûeged_fun˘i⁄s_íd__
 - ( Ë
__FLASH_£gmít_°¨t__
 ) ) |

490 –
p‹tMPU_REGION_ENABLE
 );

494 *
p‹tMPU_REGION_BASE_ADDRESS
 = ( ( Ë
__¥ivûeged_d©a_°¨t__
 ) |

495 –
p‹tMPU_REGION_VALID
 ) |

496 –
p‹tPRIVILEGED_RAM_REGION
 );

498 *
p‹tMPU_REGION_ATTRIBUTE
 = ( 
p‹tMPU_REGION_PRIVILEGED_READ_WRITE
 ) |

499 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

500 
	`¥vGëMPURegi⁄SizeSëtög
––Ë
__¥ivûeged_d©a_íd__
 - ( Ë
__¥ivûeged_d©a_°¨t__
 ) |

501 –
p‹tMPU_REGION_ENABLE
 );

505 *
p‹tMPU_REGION_BASE_ADDRESS
 = ( 
p‹tPERIPHERALS_START_ADDRESS
 ) |

506 –
p‹tMPU_REGION_VALID
 ) |

507 –
p‹tGENERAL_PERIPHERALS_REGION
 );

509 *
p‹tMPU_REGION_ATTRIBUTE
 = ( 
p‹tMPU_REGION_READ_WRITE
 | 
p‹tMPU_REGION_EXECUTE_NEVER
 ) |

510 –
	`¥vGëMPURegi⁄SizeSëtög
–
p‹tPERIPHERALS_END_ADDRESS
 - 
p‹tPERIPHERALS_START_ADDRESS
 ) ) |

511 –
p‹tMPU_REGION_ENABLE
 );

514 *
p‹tNVIC_SYS_CTRL_STATE
 |
p‹tNVIC_MEM_FAULT_ENABLE
;

517 *
p‹tMPU_CTRL
 |–
p‹tMPU_ENABLE
 | 
p‹tMPU_BACKGROUND_ENABLE
 );

519 
	}
}

522 
	$¥vGëMPURegi⁄SizeSëtög
–
ulA˘uÆSizeInByãs
 )

524 
ulRegi⁄Size
, 
ulRëu∫VÆue
 = 4;

528  
ulRegi⁄Size
 = 32UL; 
ulRëu∫VÆue
 < 31UL; ( ulRegionSize <<= 1UL ) )

530 if–
ulA˘uÆSizeInByãs
 <
ulRegi⁄Size
 )

536 
ulRëu∫VÆue
++;

542  ( 
ulRëu∫VÆue
 << 1UL );

543 
	}
}

546 
p‹tBASE_TYPE
 
	$¥vRai£Privûege
( )

548 
__asm
 volatile

557 :: "i" (
p‹tSVC_RAISE_PRIVILEGE
) : "r0"

561 
	}
}

564 
	$vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
, 
p‹tSTACK_TYPE
 *
pxBŸtomOfSèck
, 
usSèckDïth
 )

566 
__SRAM_£gmít_°¨t__
[];

567 
__SRAM_£gmít_íd__
[];

568 
__¥ivûeged_d©a_°¨t__
[];

569 
__¥ivûeged_d©a_íd__
[];

570 
lIndex
;

571 
ul
;

573 if–
xRegi⁄s
 =
NULL
 )

576 
xMPUSëtögs
->
xRegi⁄
[ 0 ].
ulRegi⁄Ba£Addªss
 =

577 ––Ë
__SRAM_£gmít_°¨t__
 ) |

578 –
p‹tMPU_REGION_VALID
 ) |

579 –
p‹tSTACK_REGION
 );

581 
xMPUSëtögs
->
xRegi⁄
[ 0 ].
ulRegi⁄Aâribuã
 =

582 –
p‹tMPU_REGION_READ_WRITE
 ) |

583 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

584 –
	`¥vGëMPURegi⁄SizeSëtög
––Ë
__SRAM_£gmít_íd__
 - ( Ë
__SRAM_£gmít_°¨t__
 ) ) |

585 –
p‹tMPU_REGION_ENABLE
 );

589 
xMPUSëtögs
->
xRegi⁄
[ 1 ].
ulRegi⁄Ba£Addªss
 =

590 ––Ë
__¥ivûeged_d©a_°¨t__
 ) |

591 –
p‹tMPU_REGION_VALID
 ) |

592 –
p‹tSTACK_REGION
 + 1 );

594 
xMPUSëtögs
->
xRegi⁄
[ 1 ].
ulRegi⁄Aâribuã
 =

595 –
p‹tMPU_REGION_PRIVILEGED_READ_WRITE
 ) |

596 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

597 
	`¥vGëMPURegi⁄SizeSëtög
––Ë
__¥ivûeged_d©a_íd__
 - ( Ë
__¥ivûeged_d©a_°¨t__
 ) |

598 –
p‹tMPU_REGION_ENABLE
 );

601  
ul
 = 2; u»<
p‹tNUM_CONFIGURABLE_REGIONS
; ul++ )

603 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Ba£Addªss
 = ( 
p‹tSTACK_REGION
 + u»Ë| 
p‹tMPU_REGION_VALID
;

604 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Aâribuã
 = 0UL;

613 if–
usSèckDïth
 > 0 )

616 
xMPUSëtögs
->
xRegi⁄
[ 0 ].
ulRegi⁄Ba£Addªss
 =

617 ––Ë
pxBŸtomOfSèck
 ) |

618 –
p‹tMPU_REGION_VALID
 ) |

619 –
p‹tSTACK_REGION
 );

621 
xMPUSëtögs
->
xRegi⁄
[ 0 ].
ulRegi⁄Aâribuã
 =

622 –
p‹tMPU_REGION_READ_WRITE
 ) |

623 –
	`¥vGëMPURegi⁄SizeSëtög
––Ë
usSèckDïth
 * ( Ë–
p‹tSTACK_TYPE
 ) ) ) |

624 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

625 –
p‹tMPU_REGION_ENABLE
 );

628 
lIndex
 = 0;

630  
ul
 = 1; u»<
p‹tNUM_CONFIGURABLE_REGIONS
; ul++ )

632 if––
xRegi⁄s
[ 
lIndex
 ] ).
ulLígthInByãs
 > 0UL )

637 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Ba£Addªss
 =

638 ––Ë
xRegi⁄s
[ 
lIndex
 ].
pvBa£Addªss
 ) |

639 –
p‹tMPU_REGION_VALID
 ) |

640 –
p‹tSTACK_REGION
 + 
ul
 );

642 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Aâribuã
 =

643 –
	`¥vGëMPURegi⁄SizeSëtög
–
xRegi⁄s
[ 
lIndex
 ].
ulLígthInByãs
 ) ) |

644 –
xRegi⁄s
[ 
lIndex
 ].
ulP¨amëîs
 ) |

645 –
p‹tMPU_REGION_ENABLE
 );

650 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Ba£Addªss
 = ( 
p‹tSTACK_REGION
 + u»Ë| 
p‹tMPU_REGION_VALID
;

651 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Aâribuã
 = 0UL;

654 
lIndex
++;

657 
	}
}

660 sig√d 
p‹tBASE_TYPE
 
	$MPU_xTaskGíîicCª©e
–
pdTASK_CODE
 
pvTaskCode
, c⁄° sig√d * c⁄° 
pcName
, 
usSèckDïth
, *
pvP¨amëîs
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, 
xTaskH™dÀ
 *
pxCª©edTask
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 )

662 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

663 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

665 
xRëu∫
 = 
	`xTaskGíîicCª©e
–
pvTaskCode
, 
pcName
, 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
, 
puxSèckBuf„r
, 
xRegi⁄s
 );

666 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

667  
xRëu∫
;

668 
	}
}

671 
	$MPU_vTaskAŒoˇãMPURegi⁄s
–
xTaskH™dÀ
 
xTask
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 )

673 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

675 
	`vTaskAŒoˇãMPURegi⁄s
–
xTask
, 
xRegi⁄s
 );

676 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

677 
	}
}

680 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

681 
	$MPU_vTaskDñëe
–
xTaskH™dÀ
 
pxTaskToDñëe
 )

683 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

685 
	`vTaskDñëe
–
pxTaskToDñëe
 );

686 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

687 
	}
}

691 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

692 
	$MPU_vTaskDñayU¡û
–
p‹tTickTy≥
 * c⁄° 
pxPªviousWakeTime
,Ö‹tTickTy≥ 
xTimeIn¸emít
 )

694 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

696 
	`vTaskDñayU¡û
–
pxPªviousWakeTime
, 
xTimeIn¸emít
 );

697 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

698 
	}
}

702 #i‡–
INCLUDE_vTaskDñay
 == 1 )

703 
	$MPU_vTaskDñay
–
p‹tTickTy≥
 
xTicksToDñay
 )

705 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

707 
	`vTaskDñay
–
xTicksToDñay
 );

708 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

709 
	}
}

713 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

714 
p‹tBASE_TYPE
 
	$MPU_uxTaskPri‹ôyGë
–
xTaskH™dÀ
 
pxTask
 )

716 
p‹tBASE_TYPE
 
uxRëu∫
;

717 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

719 
uxRëu∫
 = 
	`uxTaskPri‹ôyGë
–
pxTask
 );

720 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

721  
uxRëu∫
;

722 
	}
}

726 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

727 
	$MPU_vTaskPri‹ôySë
–
xTaskH™dÀ
 
pxTask
, 
p‹tBASE_TYPE
 
uxNewPri‹ôy
 )

729 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

731 
	`vTaskPri‹ôySë
–
pxTask
, 
uxNewPri‹ôy
 );

732 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

733 
	}
}

737 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

738 
	$MPU_vTaskSu•íd
–
xTaskH™dÀ
 
pxTaskToSu•íd
 )

740 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

742 
	`vTaskSu•íd
–
pxTaskToSu•íd
 );

743 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

744 
	}
}

748 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

749 sig√d 
p‹tBASE_TYPE
 
	$MPU_xTaskIsTaskSu•íded
–
xTaskH™dÀ
 
xTask
 )

751 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

752 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

754 
xRëu∫
 = 
	`xTaskIsTaskSu•íded
–
xTask
 );

755 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

756  
xRëu∫
;

757 
	}
}

761 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

762 
	$MPU_vTaskResume
–
xTaskH™dÀ
 
pxTaskToResume
 )

764 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

766 
	`vTaskResume
–
pxTaskToResume
 );

767 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

768 
	}
}

772 
	$MPU_vTaskSu•ídAŒ
( )

774 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

776 
	`vTaskSu•ídAŒ
();

777 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

778 
	}
}

781 sig√d 
p‹tBASE_TYPE
 
	$MPU_xTaskResumeAŒ
( )

783 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

784 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

786 
xRëu∫
 = 
	`xTaskResumeAŒ
();

787 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

788  
xRëu∫
;

789 
	}
}

792 
p‹tTickTy≥
 
	$MPU_xTaskGëTickCou¡
( )

794 
p‹tTickTy≥
 
xRëu∫
;

795 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

797 
xRëu∫
 = 
	`xTaskGëTickCou¡
();

798 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

799  
xRëu∫
;

800 
	}
}

803 
p‹tBASE_TYPE
 
	$MPU_uxTaskGëNumbîOfTasks
( )

805 
p‹tBASE_TYPE
 
uxRëu∫
;

806 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

808 
uxRëu∫
 = 
	`uxTaskGëNumbîOfTasks
();

809 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

810  
uxRëu∫
;

811 
	}
}

814 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

815 
	$MPU_vTaskLi°
–sig√d *
pcWrôeBuf„r
 )

817 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

819 
	`vTaskLi°
–
pcWrôeBuf„r
 );

820 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

821 
	}
}

825 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

826 
	$MPU_vTaskGëRunTimeSèts
–sig√d *
pcWrôeBuf„r
 )

828 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

830 
	`vTaskGëRunTimeSèts
–
pcWrôeBuf„r
 );

831 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

832 
	}
}

836 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

837 
	$MPU_vTaskSèπTø˚
–sig√d * 
pcBuf„r
, 
ulBuf„rSize
 )

839 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

841 
	`vTaskSèπTø˚
–
pcBuf„r
, 
ulBuf„rSize
 );

842 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

843 
	}
}

847 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

848 
	$MPU_ulTaskEndTø˚
( )

850 
ulRëu∫
;

851 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

853 
ulRëu∫
 = 
	`ulTaskEndTø˚
();

854 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

855  
ulRëu∫
;

856 
	}
}

860 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

861 
	$MPU_vTaskSëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
, 
pdTASK_HOOK_CODE
 
pxTagVÆue
 )

863 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

865 
	`vTaskSëAµliˇti⁄TaskTag
–
xTask
, 
pxTagVÆue
 );

866 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

867 
	}
}

871 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

872 
pdTASK_HOOK_CODE
 
	$MPU_xTaskGëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
 )

874 
pdTASK_HOOK_CODE
 
xRëu∫
;

875 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

877 
xRëu∫
 = 
	`xTaskGëAµliˇti⁄TaskTag
–
xTask
 );

878 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

879  
xRëu∫
;

880 
	}
}

884 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

885 
p‹tBASE_TYPE
 
	$MPU_xTaskCÆlAµliˇti⁄TaskHook
–
xTaskH™dÀ
 
xTask
, *
pvP¨amëî
 )

887 
p‹tBASE_TYPE
 
xRëu∫
;

888 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

890 
xRëu∫
 = 
	`xTaskCÆlAµliˇti⁄TaskHook
–
xTask
, 
pvP¨amëî
 );

891 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

892  
xRëu∫
;

893 
	}
}

897 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

898 
p‹tBASE_TYPE
 
	$MPU_uxTaskGëSèckHighW©îM¨k
–
xTaskH™dÀ
 
xTask
 )

900 
p‹tBASE_TYPE
 
uxRëu∫
;

901 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

903 
uxRëu∫
 = 
	`uxTaskGëSèckHighW©îM¨k
–
xTask
 );

904 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

905  
uxRëu∫
;

906 
	}
}

910 #i‡–
INCLUDE_xTaskGëCuºítTaskH™dÀ
 == 1 )

911 
xTaskH™dÀ
 
	$MPU_xTaskGëCuºítTaskH™dÀ
( )

913 
xTaskH™dÀ
 
xRëu∫
;

914 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

916 
xRëu∫
 = 
	`xTaskGëCuºítTaskH™dÀ
();

917 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

918  
xRëu∫
;

919 
	}
}

923 #i‡–
INCLUDE_xTaskGëScheduÀrSèã
 == 1 )

924 
p‹tBASE_TYPE
 
	$MPU_xTaskGëScheduÀrSèã
( )

926 
p‹tBASE_TYPE
 
xRëu∫
;

927 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

929 
xRëu∫
 = 
	`xTaskGëScheduÀrSèã
();

930 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

931  
xRëu∫
;

932 
	}
}

936 
xQueueH™dÀ
 
	$MPU_xQueueGíîicCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
, 
ucQueueTy≥
 )

938 
xQueueH™dÀ
 
xRëu∫
;

939 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

941 
xRëu∫
 = 
	`xQueueGíîicCª©e
–
uxQueueLígth
, 
uxIãmSize
, 
ucQueueTy≥
 );

942 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

943  
xRëu∫
;

944 
	}
}

947 sig√d 
p‹tBASE_TYPE
 
	$MPU_xQueueGíîicSíd
–
xQueueH™dÀ
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 )

949 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

950 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

952 
xRëu∫
 = 
	`xQueueGíîicSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
xC›yPosôi⁄
 );

953 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

954  
xRëu∫
;

955 
	}
}

958 
p‹tBASE_TYPE
 
	$MPU_uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

960 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

961 
p‹tBASE_TYPE
 
uxRëu∫
;

963 
uxRëu∫
 = 
	`uxQueueMesßgesWaôög
–
pxQueue
 );

964 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

965  
uxRëu∫
;

966 
	}
}

969 sig√d 
p‹tBASE_TYPE
 
	$MPU_xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 )

971 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

972 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

974 
xRëu∫
 = 
	`xQueueGíîicRe˚ive
–
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
xJu°Pìkög
 );

975 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

976  
xRëu∫
;

977 
	}
}

980 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

981 
xQueueH™dÀ
 
	$MPU_xQueueCª©eMuãx
( )

983 
xQueueH™dÀ
 
xRëu∫
;

984 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

986 
xRëu∫
 = 
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 );

987 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

988  
xRëu∫
;

989 
	}
}

993 #i‡
c⁄figUSE_COUNTING_SEMAPHORES
 == 1

994 
xQueueH™dÀ
 
	$MPU_xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 )

996 
xQueueH™dÀ
 
xRëu∫
;

997 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

999 
xRëu∫
 = 
	`xQueueCª©eCou¡ögSem≠h‹e
–
uxCou¡VÆue
, 
uxInôülCou¡
 );

1000 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1001  
xRëu∫
;

1002 
	}
}

1006 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1007 
p‹tBASE_TYPE
 
	$MPU_xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
xMuãx
, 
p‹tTickTy≥
 
xBlockTime
 )

1009 
p‹tBASE_TYPE
 
xRëu∫
;

1010 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1012 
xRëu∫
 = 
	`xQueueTakeMuãxRecursive
–
xMuãx
, 
xBlockTime
 );

1013 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1014  
xRëu∫
;

1015 
	}
}

1019 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1020 
p‹tBASE_TYPE
 
	$MPU_xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
xMuãx
 )

1022 
p‹tBASE_TYPE
 
xRëu∫
;

1023 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1025 
xRëu∫
 = 
	`xQueueGiveMuãxRecursive
–
xMuãx
 );

1026 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1027  
xRëu∫
;

1028 
	}
}

1032 #i‡
c⁄figUSE_ALTERNATIVE_API
 == 1

1033 sig√d 
p‹tBASE_TYPE
 
	$MPU_xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 )

1035 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1036 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1038 
xRëu∫
 = sig√d 
p‹tBASE_TYPE
 
	`xQueueA…GíîicSíd
–
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
xC›yPosôi⁄
 );

1039 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1040  
xRëu∫
;

1041 
	}
}

1045 #i‡
c⁄figUSE_ALTERNATIVE_API
 == 1

1046 sig√d 
p‹tBASE_TYPE
 
	$MPU_xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 )

1048 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1049 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1051 
xRëu∫
 = 
	`xQueueA…GíîicRe˚ive
–
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
xJu°Pìkög
 );

1052 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1053  
xRëu∫
;

1054 
	}
}

1058 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

1059 
	$MPU_vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcName
 )

1061 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1063 
	`vQueueAddToRegi°ry
–
xQueue
, 
pcName
 );

1065 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1066 
	}
}

1070 *
	$MPU_pvP‹tMÆloc
–
size_t
 
xSize
 )

1072 *
pvRëu∫
;

1073 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1075 
pvRëu∫
 = 
	`pvP‹tMÆloc
–
xSize
 );

1077 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1079  
pvRëu∫
;

1080 
	}
}

1083 
	$MPU_vP‹tFªe
–*
pv
 )

1085 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1087 
	`vP‹tFªe
–
pv
 );

1089 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1090 
	}
}

1093 
	$MPU_vP‹tInôüli£Blocks
( )

1095 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1097 
	`vP‹tInôüli£Blocks
();

1099 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1100 
	}
}

1103 
size_t
 
	$MPU_xP‹tGëFªeHópSize
( )

1105 
size_t
 
xRëu∫
;

1106 
p‹tBASE_TYPE
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1108 
xRëu∫
 = 
	`xP‹tGëFªeHópSize
();

1110 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1112  
xRëu∫
;

1113 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM3_MPU/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tUSING_MPU_WRAPPERS
 1

	)

105 
	#p‹tPRIVILEGE_BIT
 ( 0x80000000UL )

	)

107 
	#p‹tMPU_REGION_READ_WRITE
 ( 0x03UL << 24UL )

	)

108 
	#p‹tMPU_REGION_PRIVILEGED_READ_ONLY
 ( 0x05UL << 24UL )

	)

109 
	#p‹tMPU_REGION_READ_ONLY
 ( 0x06UL << 24UL )

	)

110 
	#p‹tMPU_REGION_PRIVILEGED_READ_WRITE
 ( 0x01UL << 24UL )

	)

111 
	#p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ( 0x07UL << 16UL )

	)

112 
	#p‹tMPU_REGION_EXECUTE_NEVER
 ( 0x01UL << 28UL )

	)

114 
	#p‹tUNPRIVILEGED_FLASH_REGION
 ( 0UL )

	)

115 
	#p‹tPRIVILEGED_FLASH_REGION
 ( 1UL )

	)

116 
	#p‹tPRIVILEGED_RAM_REGION
 ( 2UL )

	)

117 
	#p‹tGENERAL_PERIPHERALS_REGION
 ( 3UL )

	)

118 
	#p‹tSTACK_REGION
 ( 4UL )

	)

119 
	#p‹tFIRST_CONFIGURABLE_REGION
 ( 5UL )

	)

120 
	#p‹tLAST_CONFIGURABLE_REGION
 ( 7UL )

	)

121 
	#p‹tNUM_CONFIGURABLE_REGIONS
 ( ( 
p‹tLAST_CONFIGURABLE_REGION
 - 
p‹tFIRST_CONFIGURABLE_REGION
 ) + 1 )

	)

122 
	#p‹tTOTAL_NUM_REGIONS
 ( 
p‹tNUM_CONFIGURABLE_REGIONS
 + 1 )

	)

124 
	#p‹tSWITCH_TO_USER_MODE
(Ë
__asm
 vﬁ©ûê–" mr†r0, c⁄åﬁ \¿‹∏r0, #1 \¿m§ c⁄åﬁ,Ñ0 " :::"r0" )

	)

126 
	sMPU_REGION_REGISTERS


128 
p‹tLONG
 
	gulRegi⁄Ba£Addªss
;

129 
p‹tLONG
 
	gulRegi⁄Aâribuã
;

130 } 
	txMPU_REGION_REGISTERS
;

133 
	sMPU_SETTINGS


135 
xMPU_REGION_REGISTERS
 
	gxRegi⁄
[ 
p‹tTOTAL_NUM_REGIONS
 ];

136 } 
	txMPU_SETTINGS
;

139 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

140 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

141 
	#p‹tBYTE_ALIGNMENT
 8

	)

145 
	#p‹tSVC_START_SCHEDULER
 0

	)

146 
	#p‹tSVC_YIELD
 1

	)

147 
	#p‹tSVC_RAISE_PRIVILEGE
 2

	)

151 
	#p‹tYIELD
(Ë
__asm
 vﬁ©ûê–" SVC %0 \n" :: "i" (
p‹tSVC_YIELD
Ë)

	)

152 
	#p‹tYIELD_WITHIN_API
(Ë*(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET


	)

154 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê
p‹tLONG
 *Ë0xe000ed04 )

	)

155 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

156 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET


	)

166 
	#p‹tSET_INTERRUPT_MASK
() \

167 
__asm
 volatile \

171 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
):"r0" \

172 )

	)

178 
	#p‹tCLEAR_INTERRUPT_MASK
() \

179 
__asm
 volatile \

184 )

	)

186 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`p‹tSET_INTERRUPT_MASK
()

	)

187 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`p‹tCLEAR_INTERRUPT_MASK
();()
	)
x

190 
vP‹tE¡îCrôiˇl
( );

191 
vP‹tExôCrôiˇl
( );

193 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`p‹tSET_INTERRUPT_MASK
()

	)

194 
	#p‹tENABLE_INTERRUPTS
(Ë
	`p‹tCLEAR_INTERRUPT_MASK
()

	)

195 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

196 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

200 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

201 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

203 
	#p‹tNOP
()

	)

207 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM4F/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

75 #i‚de‡
__VFP_FP__


76 #îr‹ 
This
 
p‹t
 
ˇn
 
⁄ly
 
be
 
u£d
 
whí
 
the
 
¥oje˘
 
›ti⁄s
 
¨e
 
c⁄figuªd
 
to
 
íabÀ
 
h¨dw¨e
 
Êﬂtög
 
poöt
 
suµ‹t
.

80 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê* ) 0xe000e010 )

	)

81 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê* ) 0xe000e014 )

	)

82 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê* ) 0xe000ed04 )

	)

83 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê* ) 0xe000ed20 )

	)

84 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

85 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

86 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

87 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

88 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16 )

	)

89 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24 )

	)

92 
	#p‹tFPCCR
 ( ( vﬁ©ûê* ) 0xe000ef34 )

	)

93 
	#p‹tASPEN_AND_LSPEN_BITS
 ( 0x3UL << 30UL )

	)

96 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

97 
	#p‹tINITIAL_EXEC_RETURN
 ( 0xfffffffd )

	)

101 c⁄° 
	gulKî√lPri‹ôy
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

105 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

110 
¥vSëupTimîI¡îru±
( );

115 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

116 
	`xP‹tSysTickH™dÀr
( );

117 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

122 
	$vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

127 
	$vP‹tE«bÀVFP
–Ë
	`__©åibuã__
 (–
«ked
 ));

135 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

142 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = 0;

151 
pxT›OfSèck
 -= 5;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = 
p‹tINITIAL_EXEC_RETURN
;

159 
pxT›OfSèck
 -= 8;

161  
pxT›OfSèck
;

162 
	}
}

165 
	$vP‹tSVCH™dÀr
( )

167 
__asm
 volatile (

180 
	}
}

183 
	$vP‹tSèπFú°Task
( )

185 
__asm
 volatile(

194 
	}
}

200 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

203 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

204 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

208 
	`¥vSëupTimîI¡îru±
();

211 
uxCrôiˇlNe°ög
 = 0;

214 
	`vP‹tE«bÀVFP
();

217 *–
p‹tFPCCR
 ) |
p‹tASPEN_AND_LSPEN_BITS
;

220 
	`vP‹tSèπFú°Task
();

224 
	}
}

227 
	$vP‹tEndScheduÀr
( )

231 
	}
}

234 
	$vP‹tYõldFromISR
( )

237 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

238 
	}
}

241 
	$vP‹tE¡îCrôiˇl
( )

243 
	`p‹tDISABLE_INTERRUPTS
();

244 
uxCrôiˇlNe°ög
++;

245 
	}
}

248 
	$vP‹tExôCrôiˇl
( )

250 
uxCrôiˇlNe°ög
--;

251 if–
uxCrôiˇlNe°ög
 == 0 )

253 
	`p‹tENABLE_INTERRUPTS
();

255 
	}
}

258 
	$xP‹tPídSVH™dÀr
( )

262 
__asm
 volatile

299 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

301 
	}
}

304 
	$xP‹tSysTickH™dÀr
( )

306 
ulDummy
;

309 #i‡
c⁄figUSE_PREEMPTION
 == 1

310 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

313 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

315 
	`vTaskIn¸emítTick
();

317 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

318 
	}
}

325 
	$¥vSëupTimîI¡îru±
( )

328 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

329 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

330 
	}
}

334 
	$vP‹tE«bÀVFP
( )

336 
__asm
 volatile

345 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
vP‹tYõldFromISR
( );

113 
	#p‹tYIELD
(Ë
	`vP‹tYõldFromISR
()

	)

115 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vP‹tYõldFromISR
()

	)

125 
	#p‹tSET_INTERRUPT_MASK
() \

126 
__asm
 volatile \

130 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
):"r0" \

131 )

	)

137 
	#p‹tCLEAR_INTERRUPT_MASK
() \

138 
__asm
 volatile \

143 )

	)

145 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`p‹tSET_INTERRUPT_MASK
()

	)

146 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`p‹tCLEAR_INTERRUPT_MASK
();()
	)
x

149 
vP‹tE¡îCrôiˇl
( );

150 
vP‹tExôCrôiˇl
( );

152 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`p‹tSET_INTERRUPT_MASK
()

	)

153 
	#p‹tENABLE_INTERRUPTS
(Ë
	`p‹tCLEAR_INTERRUPT_MASK
()

	)

154 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

155 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

159 
	#p‹tALIGNMENT_ASSERT_pxCuºítTCB
 ( )

	)

164 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

165 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

167 
	#p‹tNOP
()

	)

169 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ATMega323/port.c

76 
	~<°dlib.h
>

77 
	~<avr/öãºu±.h
>

79 
	~"FªeRTOS.h
"

80 
	~"èsk.h
"

87 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
p‹tSTACK_TYPE
 ) 0x80 )

	)

90 
	#p‹tCLEAR_COUNTER_ON_MATCH
 ( ( Ë0x08 )

	)

91 
	#p‹tPRESCALE_64
 ( ( Ë0x03 )

	)

92 
	#p‹tCLOCK_PRESCALER
 ( ( Ë64 )

	)

93 
	#p‹tCOMPARE_MATCH_A_INTERRUPT_ENABLE
 ( ( Ë0x10 )

	)

99 
	ttskTCB
;

100 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

120 
	#p‹tSAVE_CONTEXT
() \

121 
asm
 volatile ( "pushÑ0 \n\t" \

163 );

	)

170 
	#p‹tRESTORE_CONTEXT
() \

171 
asm
 volatile ( "ldsÑ26,ÖxCurrentTCB \n\t" \

211 );

	)

218 
¥vSëupTimîI¡îru±
( );

224 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

226 
usAddªss
;

231 *
pxT›OfSèck
 = 0x11;

232 
pxT›OfSèck
--;

233 *
pxT›OfSèck
 = 0x22;

234 
pxT›OfSèck
--;

235 *
pxT›OfSèck
 = 0x33;

236 
pxT›OfSèck
--;

245 
usAddªss
 = ( Ë
pxCode
;

246 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
usAddªss
 & ( ) 0x00ff );

247 
pxT›OfSèck
--;

249 
usAddªss
 >>= 8;

250 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
usAddªss
 & ( ) 0x00ff );

251 
pxT›OfSèck
--;

257 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

258 
pxT›OfSèck
--;

259 *
pxT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

260 
pxT›OfSèck
--;

264 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

265 
pxT›OfSèck
--;

266 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02;

267 
pxT›OfSèck
--;

268 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03;

269 
pxT›OfSèck
--;

270 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04;

271 
pxT›OfSèck
--;

272 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05;

273 
pxT›OfSèck
--;

274 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06;

275 
pxT›OfSèck
--;

276 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07;

277 
pxT›OfSèck
--;

278 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08;

279 
pxT›OfSèck
--;

280 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09;

281 
pxT›OfSèck
--;

282 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10;

283 
pxT›OfSèck
--;

284 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11;

285 
pxT›OfSèck
--;

286 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12;

287 
pxT›OfSèck
--;

288 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x13;

289 
pxT›OfSèck
--;

290 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x14;

291 
pxT›OfSèck
--;

292 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x15;

293 
pxT›OfSèck
--;

294 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x16;

295 
pxT›OfSèck
--;

296 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x17;

297 
pxT›OfSèck
--;

298 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x18;

299 
pxT›OfSèck
--;

300 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x19;

301 
pxT›OfSèck
--;

302 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x20;

303 
pxT›OfSèck
--;

304 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x21;

305 
pxT›OfSèck
--;

306 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x22;

307 
pxT›OfSèck
--;

308 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x23;

309 
pxT›OfSèck
--;

312 
usAddªss
 = ( Ë
pvP¨amëîs
;

313 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
usAddªss
 & ( ) 0x00ff );

314 
pxT›OfSèck
--;

316 
usAddªss
 >>= 8;

317 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
usAddªss
 & ( ) 0x00ff );

318 
pxT›OfSèck
--;

320 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x26;

321 
pxT›OfSèck
--;

322 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x27;

323 
pxT›OfSèck
--;

324 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x28;

325 
pxT›OfSèck
--;

326 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x29;

327 
pxT›OfSèck
--;

328 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x30;

329 
pxT›OfSèck
--;

330 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x031;

331 
pxT›OfSèck
--;

335  
pxT›OfSèck
;

336 
	}
}

339 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

342 
	`¥vSëupTimîI¡îru±
();

345 
	`p‹tRESTORE_CONTEXT
();

349 
asm
 volatile ( "ret" );

352  
pdTRUE
;

353 
	}
}

356 
	$vP‹tEndScheduÀr
( )

360 
	}
}

367 
	$vP‹tYõld
–Ë
	`__©åibuã__
 ( ( 
«ked
 ) );

368 
	$vP‹tYõld
( )

370 
	`p‹tSAVE_CONTEXT
();

371 
	`vTaskSwôchC⁄ãxt
();

372 
	`p‹tRESTORE_CONTEXT
();

374 
asm
 volatile ( "ret" );

375 
	}
}

384 
	$vP‹tYõldFromTick
–Ë
	`__©åibuã__
 ( ( 
«ked
 ) );

385 
	$vP‹tYõldFromTick
( )

387 
	`p‹tSAVE_CONTEXT
();

388 
	`vTaskIn¸emítTick
();

389 
	`vTaskSwôchC⁄ãxt
();

390 
	`p‹tRESTORE_CONTEXT
();

392 
asm
 volatile ( "ret" );

393 
	}
}

399 
	$¥vSëupTimîI¡îru±
( )

401 
ulCom∑ªM©ch
;

402 
ucHighByã
, 
ucLowByã
;

407 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

410 
ulCom∑ªM©ch
 /
p‹tCLOCK_PRESCALER
;

413 
ulCom∑ªM©ch
 -= ( ) 1;

417 
ucLowByã
 = ( Ë–
ulCom∑ªM©ch
 & ( ) 0xff );

418 
ulCom∑ªM©ch
 >>= 8;

419 
ucHighByã
 = ( Ë–
ulCom∑ªM©ch
 & ( ) 0xff );

420 
OCR1AH
 = 
ucHighByã
;

421 
OCR1AL
 = 
ucLowByã
;

424 
ucLowByã
 = 
p‹tCLEAR_COUNTER_ON_MATCH
 | 
p‹tPRESCALE_64
;

425 
TCCR1B
 = 
ucLowByã
;

429 
ucLowByã
 = 
TIMSK
;

430 
ucLowByã
 |
p‹tCOMPARE_MATCH_A_INTERRUPT_ENABLE
;

431 
TIMSK
 = 
ucLowByã
;

432 
	}
}

435 #i‡
c⁄figUSE_PREEMPTION
 == 1

442 
	$SIG_OUTPUT_COMPARE1A
–Ë
	`__©åibuã__
 ( ( 
sig«l
, 
«ked
 ) );

443 
	$SIG_OUTPUT_COMPARE1A
( )

445 
	`vP‹tYõldFromTick
();

446 
asm
 volatile ( "reti" );

447 
	}
}

455 
	$SIG_OUTPUT_COMPARE1A
–Ë
	`__©åibuã__
 ( ( 
sig«l
 ) );

456 
	$SIG_OUTPUT_COMPARE1A
( )

458 
	`vTaskIn¸emítTick
();

459 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ATMega323/portmacro.h

74 #i‚de‡
PORTMACRO_H


75 
	#PORTMACRO_H


	)

77 #ifde‡
__˝lu•lus


92 
	#p‹tCHAR
 

	)

93 
	#p‹tFLOAT
 

	)

94 
	#p‹tDOUBLE
 

	)

95 
	#p‹tLONG
 

	)

96 
	#p‹tSHORT
 

	)

97 
	#p‹tSTACK_TYPE
 
p‹tCHAR


	)

98 
	#p‹tBASE_TYPE
 

	)

100 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

101 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

102 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

104 
	tp‹tLONG
 
	tp‹tTickTy≥
;

105 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

110 
	#p‹tENTER_CRITICAL
(Ë
asm
 volatile ( "in __tmp_reg__, __SREG__" :: ); \

111 
asm
 volatile ( "cli" :: ); \

112 
asm
 vﬁ©ûê–"push __tmp_ªg__" :: )

	)

114 
	#p‹tEXIT_CRITICAL
(Ë
asm
 volatile ( "pop __tmp_reg__" :: ); \

115 
asm
 vﬁ©ûê–"out __SREG__, __tmp_ªg__" :: )

	)

117 
	#p‹tDISABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûê–"˛i" :: );

	)

118 
	#p‹tENABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûê–"£i" :: );

	)

122 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

123 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

124 
	#p‹tBYTE_ALIGNMENT
 1

	)

125 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"n›" );

	)

129 
vP‹tYõld
–Ë
__©åibuã__
 ( ( 
«ked
 ) );

130 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

134 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

135 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

137 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/AVR32_UC3/port.c

83 
	~<sys/˝u.h
>

84 
	~<sys/ußπ.h
>

85 
	~<mÆloc.h
>

88 
	~"FªeRTOS.h
"

89 
	~"èsk.h
"

92 
	~<avr32/io.h
>

93 
	~"gpio.h
"

94 #if–
c⁄figTICK_USE_TC
==1 )

95 
	~"tc.h
"

100 
	#p‹tINITIAL_SR
 ( ( 
p‹tSTACK_TYPE
 ) 0x00400000 )

	)

101 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 0 )

	)

104 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

105 vﬁ©ûê
	gulCrôiˇlNe°ög
 = 9999UL;

107 #if–
c⁄figTICK_USE_TC
==0 )

108 
¥vScheduÀNextTick
( );

110 
¥vCÀ¨TcI¡
( );

114 
¥vSëupTimîI¡îru±
( );

126 
	$_öô_°¨tup
()

129 
_evba
;

131 #i‡
c⁄figHEAP_INIT


132 
__hóp_°¨t__
;

133 
__hóp_íd__
;

134 
p‹tBASE_TYPE
 *
pxMem
;

138 
	`Së_sy°em_ªgi°î
–
AVR32_EVBA
, ( Ë&
_evba
 );

141 
	`ENABLE_ALL_EXCEPTIONS
();

144 
	`INTC_öô_öãºu±s
();

146 #i‡
c⁄figHEAP_INIT


149  
pxMem
 = &
__hóp_°¨t__
;ÖxMem < ( 
p‹tBASE_TYPE
 * )&
__hóp_íd__
; )

151 *
pxMem
++ = 0xA5A5A5A5;

157 
	`£t_˝u_hz
–
c⁄figCPU_CLOCK_HZ
 );

160 #i‡
c⁄figDBG


162 c⁄° 
gpio_m≠_t
 
DBG_USART_GPIO_MAP
 =

164 { 
c⁄figDBG_USART_RX_PIN
, 
c⁄figDBG_USART_RX_FUNCTION
 },

165 { 
c⁄figDBG_USART_TX_PIN
, 
c⁄figDBG_USART_TX_FUNCTION
 }

169 
	`£t_ußπ_ba£
––* ) 
c⁄figDBG_USART
 );

170 
	`gpio_íabÀ_moduÀ
–
DBG_USART_GPIO_MAP
,

171 –
DBG_USART_GPIO_MAP
 ) / ( DBG_USART_GPIO_MAP[0] ) );

172 
	`ußπ_öô
–
c⁄figDBG_USART_BAUDRATE
 );

175 
	}
}

197 
	$__mÆloc_lock
(
_ªít
 *
±r
)

199 
	`vTaskSu•ídAŒ
();

200 
	}
}

207 
	$__mÆloc_u∆ock
(
_ªít
 *
±r
)

209 
	`xTaskResumeAŒ
();

210 
	}
}

214 *
	$pvP‹tRóŒoc
–*
pv
, 
size_t
 
xW™ãdSize
 )

216 *
pvRëu∫
;

218 
	`vTaskSu•ídAŒ
();

220 
pvRëu∫
 = 
	`ªÆloc
–
pv
, 
xW™ãdSize
 );

222 
	`xTaskResumeAŒ
();

224  
pvRëu∫
;

225 
	}
}

232 
__©åibuã__
((
__«ked__
)Ë
	$vTick
( )

235 
	`p‹tSAVE_CONTEXT_OS_INT
();

237 #if–
c⁄figTICK_USE_TC
==1 )

239 
	`¥vCÀ¨TcI¡
();

243 
	`¥vScheduÀNextTick
();

248 
	`p‹tENTER_CRITICAL
();

249 
	`vTaskIn¸emítTick
();

250 
	`p‹tEXIT_CRITICAL
();

253 
	`p‹tRESTORE_CONTEXT_OS_INT
();

254 
	}
}

257 
__©åibuã__
((
__«ked__
)Ë
	$SCALLYõld
( )

260 
	`p‹tSAVE_CONTEXT_SCALL
();

261 
	`vTaskSwôchC⁄ãxt
();

262 
	`p‹tRESTORE_CONTEXT_SCALL
();

263 
	}
}

270 
__©åibuã__
((
__noölöe__
)Ë
	$vP‹tE¡îCrôiˇl
( )

273 
	`p‹tDISABLE_INTERRUPTS
();

278 
ulCrôiˇlNe°ög
++;

279 
	}
}

282 
__©åibuã__
((
__noölöe__
)Ë
	$vP‹tExôCrôiˇl
( )

284 if(
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
)

286 
ulCrôiˇlNe°ög
--;

287 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

290 
	`p‹tENABLE_INTERRUPTS
();

293 
	}
}

302 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

308 
pxT›OfSèck
--;

309 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

310 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

311 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x0A0A0A0A;

312 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x0B0B0B0B;

313 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

314 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0xDEADBEEF;

315 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

316 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SR
;

317 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0xFF0000FF;

318 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

319 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

320 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

321 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

322 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

323 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

324 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

325 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_NESTING
;

327  
pxT›OfSèck
;

328 
	}
}

331 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

335 
	`¥vSëupTimîI¡îru±
();

338 
	`p‹tRESTORE_CONTEXT
();

342 
	}
}

345 
	$vP‹tEndScheduÀr
( )

349 
	}
}

354 #if–
c⁄figTICK_USE_TC
==0 )

355 
	$¥vScheduÀFú°Tick
()

357 
lCy˛es
;

359 
lCy˛es
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COUNT
);

360 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

363 if(0 =
lCy˛es
)

365 
lCy˛es
++;

367 
	`Së_sy°em_ªgi°î
(
AVR32_COMPARE
, 
lCy˛es
);

368 
	}
}

370 
__©åibuã__
((
__noölöe__
)Ë
	$¥vScheduÀNextTick
()

372 
lCy˛es
, 
lCou¡
;

374 
lCy˛es
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COMPARE
);

375 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

378 if(0 =
lCy˛es
)

380 
lCy˛es
++;

382 
lCou¡
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COUNT
);

383 if–
lCy˛es
 < 
lCou¡
 )

385 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

387 
	`Së_sy°em_ªgi°î
(
AVR32_COMPARE
, 
lCy˛es
);

388 
	}
}

390 
__©åibuã__
((
__noölöe__
)Ë
	$¥vCÀ¨TcI¡
()

392 
AVR32_TC
.
ch™√l
[
c⁄figTICK_TC_CHANNEL
].
§
;

393 
	}
}

398 
	$¥vSëupTimîI¡îru±
()

400 #if–
c⁄figTICK_USE_TC
==1 )

402 vﬁ©ûê
avr32_tc_t
 *
tc
 = &
AVR32_TC
;

405 
tc_wavef‹m_›t_t
 
wavef‹m_›t
 =

407 .
ch™√l
 = 
c⁄figTICK_TC_CHANNEL
,

409 .
bswåg
 = 
TC_EVT_EFFECT_NOOP
,

410 .
bìvt
 = 
TC_EVT_EFFECT_NOOP
,

411 .
b˝c
 = 
TC_EVT_EFFECT_NOOP
,

412 .
b˝b
 = 
TC_EVT_EFFECT_NOOP
,

414 .
aswåg
 = 
TC_EVT_EFFECT_NOOP
,

415 .
´evt
 = 
TC_EVT_EFFECT_NOOP
,

416 .
a˝c
 = 
TC_EVT_EFFECT_NOOP
,

417 .
a˝a
 = 
TC_EVT_EFFECT_NOOP
,

419 .
wav£l
 = 
TC_WAVEFORM_SEL_UP_MODE_RC_TRIGGER
,

420 .
íërg
 = 
FALSE
,

421 .
ìvt
 = 0,

422 .
ìvãdg
 = 
TC_SEL_NO_EDGE
,

423 .
˝cdis
 = 
FALSE
,

424 .
˝c°›
 = 
FALSE
,

426 .
bur°
 = 
FALSE
,

427 .
˛ki
 = 
FALSE
,

428 .
tc˛ks
 = 
TC_CLOCK_SOURCE_TC2


431 
tc_öãºu±_t
 
tc_öãºu±
 =

433 .
ërgs
=0,

434 .
ldrbs
=0,

435 .
ldøs
=0,

436 .
˝cs
 =1,

437 .
˝bs
 =0,

438 .
˝as
 =0,

439 .
lovrs
=0,

440 .
covfs
=0,

446 
	`p‹tDISABLE_INTERRUPTS
();

451 #if–
c⁄figTICK_USE_TC
==1 )

453 
	`INTC_ªgi°î_öãºu±
(&
vTick
, 
c⁄figTICK_TC_IRQ
, 
INT0
);

456 
	`tc_öô_wavef‹m
(
tc
, &
wavef‹m_›t
);

461 
	`tc_wrôe_rc
–
tc
, 
c⁄figTICK_TC_CHANNEL
, ( 
c⁄figPBA_CLOCK_HZ
 / 4Ë/ 
c⁄figTICK_RATE_HZ
 );

463 
	`tc_c⁄figuª_öãºu±s
–
tc
, 
c⁄figTICK_TC_CHANNEL
, &
tc_öãºu±
 );

466 
	`tc_°¨t
(
tc
, 
c⁄figTICK_TC_CHANNEL
);

470 
	`INTC_ªgi°î_öãºu±
(&
vTick
, 
AVR32_CORE_COMPARE_IRQ
, 
INT0
);

471 
	`¥vScheduÀFú°Tick
();

474 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/AVR32_UC3/portmacro.h

82 #i‚de‡
PORTMACRO_H


83 
	#PORTMACRO_H


	)

94 
	~<avr32/io.h
>

95 
	~"ötc.h
"

96 
	~"compûî.h
"

98 #ifde‡
__˝lu•lus


104 
	#p‹tCHAR
 

	)

105 
	#p‹tFLOAT
 

	)

106 
	#p‹tDOUBLE
 

	)

107 
	#p‹tLONG
 

	)

108 
	#p‹tSHORT
 

	)

109 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

110 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

112 
	#TASK_DELAY_MS
(
x
Ë–(xË/
p‹tTICK_RATE_MS
 )

	)

113 
	#TASK_DELAY_S
(
x
Ë–(x)*1000 /
p‹tTICK_RATE_MS
 )

	)

114 
	#TASK_DELAY_MIN
(
x
Ë–(x)*60*1000/
p‹tTICK_RATE_MS
 )

	)

116 
	#c⁄figTICK_TC_IRQ
 
	`ATPASTE2
(
AVR32_TC_IRQ
, 
c⁄figTICK_TC_CHANNEL
)

	)

118 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

119 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

120 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

122 
	tp‹tLONG
 
	tp‹tTickTy≥
;

123 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

128 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

129 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

130 
	#p‹tBYTE_ALIGNMENT
 4

	)

131 
	#p‹tNOP
(Ë{
__asm__
 
	`__vﬁ©ûe__
 ("n›");}

	)

138 
	#DISABLE_ALL_EXCEPTIONS
(Ë
	`DißbÀ_globÆ_ex˚±i⁄
()

	)

139 
	#ENABLE_ALL_EXCEPTIONS
(Ë
	`E«bÀ_globÆ_ex˚±i⁄
()

	)

141 
	#DISABLE_ALL_INTERRUPTS
(Ë
	`DißbÀ_globÆ_öãºu±
()

	)

142 
	#ENABLE_ALL_INTERRUPTS
(Ë
	`E«bÀ_globÆ_öãºu±
()

	)

144 
	#DISABLE_INT_LEVEL
(
öt_Àv
Ë
	`DißbÀ_öãºu±_Àvñ
(öt_Àv)

	)

145 
	#ENABLE_INT_LEVEL
(
öt_Àv
Ë
	`E«bÀ_öãºu±_Àvñ
(öt_Àv)

	)

161 #i‡
c⁄figDBG


162 
	#p‹tDBG_TRACE
(...) \

164 
	`Âuts
(
__FILE__
 ":" 
	`ASTRINGZ
(
__LINE__
Ë": ", 
°dout
);\

165 
	`¥ötf
(
__VA_ARGS__
);\

166 
	`Âuts
("\r\n", 
°dout
);\

167 }

	)

169 
	#p‹tDBG_TRACE
(...)

	)

174 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`DISABLE_ALL_INTERRUPTS
()

	)

175 
	#p‹tENABLE_INTERRUPTS
(Ë
	`ENABLE_ALL_INTERRUPTS
()

	)

178 
vP‹tE¡îCrôiˇl
( );

179 
vP‹tExôCrôiˇl
( );

181 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

182 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

186 *
pvP‹tRóŒoc
–*
pv
, 
size_t
 
xSize
 );

195 
	#p‹tRESTORE_CONTEXT
() \

197 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

198 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

200 
__asm__
 
	`__vﬁ©ûe__
 ( \

228 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting), \

229 [
pxCuºítTCB
] "i" (&pxCurrentTCB), \

230 [
SR
] "i" (
AVR32_SR
) \

232 }

	)

267 #i‡
c⁄figUSE_PREEMPTION
 == 0

272 
	#p‹tSAVE_CONTEXT_OS_INT
() \

275 
__asm__
 
	`__vﬁ©ûe__
 ("stm --sp,Ñ0-r7"); \

279 }

	)

284 
	#p‹tRESTORE_CONTEXT_OS_INT
() \

286 
__asm__
 
	`__vﬁ©ûe__
 ( \

294 }

	)

301 
	#p‹tSAVE_CONTEXT_OS_INT
() \

303 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

304 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

309 
__asm__
 
	`__vﬁ©ûe__
 ( \

344 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting), \

345 [
pxCuºítTCB
] "i" (&pxCurrentTCB), \

346 [
LINE
] "i" (
__LINE__
) \

348 }

	)

353 
	#p‹tRESTORE_CONTEXT_OS_INT
() \

355 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

356 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

365 
__asm__
 
	`__vﬁ©ûe__
 ( \

371 : [
LINE
] "i" (
__LINE__
) \

377 
	`p‹tENTER_CRITICAL
(); \

378 
	`vTaskSwôchC⁄ãxt
(); \

379 
	`p‹tEXIT_CRITICAL
(); \

383 
__asm__
 
	`__vﬁ©ûe__
 ( \

404 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting), \

405 [
pxCuºítTCB
] "i" (&pxCurrentTCB), \

406 [
LINE
] "i" (
__LINE__
) \

408 }

	)

419 
	#p‹tSAVE_CONTEXT_SCALL
() \

421 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

422 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

434 
__asm__
 
	`__vﬁ©ûe__
 ( \

463 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting) \

470 
	`p‹tENTER_CRITICAL
(); \

473 
__asm__
 
	`__vﬁ©ûe__
 ( \

479 : [
pxCuºítTCB
] "i" (&pxCurrentTCB) \

481 }

	)

486 
	#p‹tRESTORE_CONTEXT_SCALL
() \

488 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

489 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

494 
__asm__
 
	`__vﬁ©ûe__
 ( \

500 : [
pxCuºítTCB
] "i" (&pxCurrentTCB) \

504 
	`p‹tEXIT_CRITICAL
(); \

506 
__asm__
 
	`__vﬁ©ûe__
 ( \

533 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting) \

535 }

	)

542 #i‡
c⁄figUSE_PREEMPTION
 == 0

548 
	#p‹tENTER_SWITCHING_ISR
() \

551 
__asm__
 
	`__vﬁ©ûe__
 ("stm --sp,Ñ0-r7"); \

555 }

	)

560 
	#p‹tEXIT_SWITCHING_ISR
() \

562 
__asm__
 
	`__vﬁ©ûe__
 ( \

570 }

	)

578 
	#p‹tENTER_SWITCHING_ISR
() \

580 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

581 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

586 
__asm__
 
	`__vﬁ©ûe__
 ( \

617 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting), \

618 [
pxCuºítTCB
] "i" (&pxCurrentTCB), \

619 [
LINE
] "i" (
__LINE__
) \

621 }

	)

626 
	#p‹tEXIT_SWITCHING_ISR
() \

628 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

629 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

631 
__asm__
 
	`__vﬁ©ûe__
 ( \

648 : [
LINE
] "i" (
__LINE__
) \

652 
	`p‹tENTER_CRITICAL
(); \

653 
	`vTaskSwôchC⁄ãxt
(); \

654 
	`p‹tEXIT_CRITICAL
(); \

656 
__asm__
 
	`__vﬁ©ûe__
 ( \

683 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting), \

684 [
pxCuºítTCB
] "i" (&pxCurrentTCB), \

685 [
LINE
] "i" (
__LINE__
) \

687 }

	)

692 
	#p‹tYIELD
(Ë{
__asm__
 
	`__vﬁ©ûe__
 ("sˇŒ");}

	)

695 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

696 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

698 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/CORTUS_APS3/port.c

68 
	~<°dlib.h
>

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	~<machöe/cou¡î.h
>

76 
	~<machöe/ic.h
>

80 
	#p‹tINITIAL_PSR
 ( 0x00020000 )

	)

87 
¥vSëupTimîI¡îru±
( );

90 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 * 
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

94 
pxT›OfSèck
 -= 20;

97 
pxT›OfSèck
[ 16 ] = 
p‹tKERNEL_INTERRUPT_PRIORITY_LEVEL
;

98 
pxT›OfSèck
[ 15 ] = 
p‹tINITIAL_PSR
;

99 
pxT›OfSèck
[ 14 ] = ( Ë
pxCode
;

100 
pxT›OfSèck
[ 13 ] = 0x00000000UL;

101 
pxT›OfSèck
[ 12 ] = 0x00000000UL;

102 
pxT›OfSèck
[ 11 ] = 0x0d0d0d0dUL;

103 
pxT›OfSèck
[ 10 ] = 0x0c0c0c0cUL;

104 
pxT›OfSèck
[ 9 ] = 0x0b0b0b0bUL;

105 
pxT›OfSèck
[ 8 ] = 0x0a0a0a0aUL;

106 
pxT›OfSèck
[ 7 ] = 0x09090909UL;

107 
pxT›OfSèck
[ 6 ] = 0x08080808UL;

108 
pxT›OfSèck
[ 5 ] = 0x07070707UL;

109 
pxT›OfSèck
[ 4 ] = 0x06060606UL;

110 
pxT›OfSèck
[ 3 ] = 0x05050505UL;

111 
pxT›OfSèck
[ 2 ] = 0x04040404UL;

112 
pxT›OfSèck
[ 1 ] = 0x03030303UL;

113 
pxT›OfSèck
[ 0 ] = ( Ë
pvP¨amëîs
;

115  
pxT›OfSèck
;

116 
	}
}

119 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

122 
	`¥vSëupTimîI¡îru±
();

125 
úq
[ 
p‹tIRQ_TRAP_YIELD
 ].
õn
 = 1;

126 
úq
[ 
p‹tIRQ_TRAP_YIELD
 ].
ùl
 = 
p‹tKERNEL_INTERRUPT_PRIORITY_LEVEL
;

129 
ic
->
õn
 = 1;

132 
	`p‹tRESTORE_CONTEXT
();

136 
	}
}

139 
	$¥vSëupTimîI¡îru±
( )

142 
cou¡î1
->
ªlﬂd
 = ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1;

143 
cou¡î1
->
vÆue
 = cou¡î1->
ªlﬂd
;

144 
cou¡î1
->
mask
 = 1;

147 
úq
[ 
IRQ_COUNTER1
 ].
õn
 = 1;

148 
úq
[ 
IRQ_COUNTER1
 ].
ùl
 = 
p‹tKERNEL_INTERRUPT_PRIORITY_LEVEL
;

149 
	}
}

153 
	$öãºu±31_h™dÀr
–Ë
	`__©åibuã__
((
«ked
));

154 
	$öãºu±31_h™dÀr
( )

156 
	`p‹tSAVE_CONTEXT
();

157 
__asm
 volatile ( "call vTaskSwitchContext" );

158 
	`p‹tRESTORE_CONTEXT
();

159 
	}
}

162 
	$¥vPro˚ssTick
–Ë
	`__©åibuã__
((
noölöe
));

163 
	$¥vPro˚ssTick
( )

165 
	`vTaskIn¸emítTick
();

167 #i‡
c⁄figUSE_PREEMPTION
 == 1

168 
	`vTaskSwôchC⁄ãxt
();

172 
cou¡î1
->
expúed
 = 0;

173 
	}
}

177 
	$öãºu±7_h™dÀr
–Ë
	`__©åibuã__
((
«ked
));

178 
	$öãºu±7_h™dÀr
( )

180 
	`p‹tSAVE_CONTEXT
();

181 
	`¥vPro˚ssTick
();

182 
	`p‹tRESTORE_CONTEXT
();

183 
	}
}

186 
	$vP‹tEndScheduÀr
( )

189 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/CORTUS_APS3/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


74 
	~<machöe/ic.h
>

87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

93 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

95 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

96 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

97 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

99 
	tp‹tLONG
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

105 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

106 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

107 
	#p‹tBYTE_ALIGNMENT
 4

	)

108 
	#p‹tNOP
(Ë
__asm__
 vﬁ©ûê–"movÑ0,Ñ0" )

	)

109 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

110 
	#p‹tIRQ_TRAP_YIELD
 31

	)

111 
	#p‹tKERNEL_INTERRUPT_PRIORITY_LEVEL
 0

	)

112 
	#p‹tSYSTEM_INTERRUPT_PRIORITY_LEVEL
 0

	)

117 
vP‹tYõld
( );

121 
	#p‹tYIELD
(Ë
asm
 
	`__vﬁ©ûe__
–"Åø∞#%0 "::"i"(
p‹tIRQ_TRAP_YIELD
):"mem‹y")

	)

124 
vTaskE¡îCrôiˇl
( );

125 
vTaskExôCrôiˇl
( );

126 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

127 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

131 
	#p‹tDISABLE_INTERRUPTS
(Ë
ic
->
˝l
 = ( 
p‹tSYSTEM_INTERRUPT_PRIORITY_LEVEL
 + 1 )

	)

132 
	#p‹tENABLE_INTERRUPTS
(Ë
ic
->
˝l
 = 
p‹tKERNEL_INTERRUPT_PRIORITY_LEVEL


	)

136 
	#p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 ) if–xHighîPri‹ôyTaskWokí !
pdFALSE
 ) 
	`vTaskSwôchC⁄ãxt
()

	)

140 
	#p‹tSAVE_CONTEXT
() \

141 
asm
 
__vﬁ©ûe__
 \

157 );

	)

160 
	#p‹tRESTORE_CONTEXT
() \

161 
asm
 
	`__vﬁ©ûe__
( \

176 );

	)

181 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

182 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

185 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ColdFire_V2/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

71 
	#p‹tINITIAL_FORMAT_VECTOR
 ( ( 
p‹tSTACK_TYPE
 ) 0x4000 )

	)

74 
	#p‹tINITIAL_STATUS_REGISTER
 ( ( 
p‹tSTACK_TYPE
 ) 0x2000)

	)

78 
	gulCrôiˇlNe°ög
 = 0x9999UL;

82 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 * 
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

84 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

85 
pxT›OfSèck
--;

87 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
) 0xDEADBEEF;

88 
pxT›OfSèck
--;

91 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

92 
pxT›OfSèck
--;

94 *
pxT›OfSèck
 = ( 
p‹tINITIAL_FORMAT_VECTOR
 << 16UL ) | ( 
p‹tINITIAL_STATUS_REGISTER
 );

95 
pxT›OfSèck
--;

97 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0;

98 
pxT›OfSèck
 -= 14;

100  
pxT›OfSèck
;

101 
	}
}

104 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

106 
	`vP‹tSèπFú°Task
( );

108 
ulCrôiˇlNe°ög
 = 0UL;

111 
	`vAµliˇti⁄SëupI¡îru±s
();

114 
	`vP‹tSèπFú°Task
();

116  
pdFALSE
;

117 
	}
}

120 
	$vP‹tEndScheduÀr
( )

123 
	}
}

126 
	$vP‹tE¡îCrôiˇl
( )

128 if–
ulCrôiˇlNe°ög
 == 0UL )

134 
	`p‹tDISABLE_INTERRUPTS
();

135 if–
MCF_INTC0_INTFRCL
 == 0UL )

140 
	`p‹tENABLE_INTERRUPTS
();

144 
ulCrôiˇlNe°ög
++;

145 
	}
}

148 
	$vP‹tExôCrôiˇl
( )

150 
ulCrôiˇlNe°ög
--;

151 if–
ulCrôiˇlNe°ög
 == 0 )

153 
	`p‹tENABLE_INTERRUPTS
();

155 
	}
}

158 
	$vP‹tYõldH™dÀr
( )

160 
ulSavedI¡îru±Mask
;

162 
ulSavedI¡îru±Mask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

164 
MCF_INTC0_INTFRCL
 = 0;

165 
	`vTaskSwôchC⁄ãxt
();

166 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulSavedI¡îru±Mask
 );

167 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ColdFire_V2/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 

	)

91 
	#p‹tBASE_TYPE
 

	)

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

95 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

97 
	tp‹tLONG
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

103 
	#p‹tBYTE_ALIGNMENT
 4

	)

104 
	#p‹tSTACK_GROWTH
 -1

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

107 
p‹tLONG
 
ulP‹tSëIPL
( portLONG );

108 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

109 
	#p‹tENABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–0 )

	)

112 
vP‹tE¡îCrôiˇl
( );

113 
vP‹tExôCrôiˇl
( );

114 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

115 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

117 
p‹tBASE_TYPE
 
uxP‹tSëI¡îru±MaskFromISR
( );

118 
vP‹tCÀ¨I¡îru±MaskFromISR
–
p‹tBASE_TYPE
 );

119 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

120 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusRegi°î
 ) 
	`ulP‹tSëIPL
–uxSavedSètusRegi°î )

	)

126 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"n›" )

	)

129 
	#p‹tYIELD
(Ë
MCF_INTC0_INTFRCL
 = ( 1UL << 
c⁄figYIELD_INTERRUPT_VECTOR
 ); 
	`p‹tNOP
();Ö‹tNOP()

	)

134 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
	`__©åibuã__
((
n‹ëu∫
))

	)

135 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

138 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed !
pdFALSE
 ) \

140 
	`p‹tYIELD
(); \

141 }

	)

144 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/H8S2329/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

80 
	#p‹tINITIAL_CCR
 ( ( 
p‹tSTACK_TYPE
 ) 0x00 )

	)

83 
	#p‹tCLEAR_ON_TGRA_COMPARE_MATCH
 ( ( Ë0x20 )

	)

84 
	#p‹tCLOCK_DIV_64
 ( ( Ë0x03 )

	)

85 
	#p‹tCLOCK_DIV
 ( ( Ë64 )

	)

86 
	#p‹tTGRA_INTERRUPT_ENABLE
 ( ( Ë0x01 )

	)

87 
	#p‹tTIMER_CHANNEL
 ( ( Ë0x02 )

	)

88 
	#p‹tMSTP13
 ( ( Ë0x2000 )

	)

93 
¥vSëupTimîI¡îru±
( );

98 
	$vP‹tYõld
–Ë
	`__©åibuã__
 ( ( 
ßvóŒ
, 
öãºu±_h™dÀr
 ) );

105 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

107 
ulVÆue
;

110 
ulVÆue
 = ( Ë
pxT›OfSèck
;

111 if–
ulVÆue
 & 1UL )

113 
pxT›OfSèck
 =ÖxTopOfStack - 1;

118 
pxT›OfSèck
--;

119 *
pxT›OfSèck
 = 0xaa;

120 
pxT›OfSèck
--;

121 *
pxT›OfSèck
 = 0xbb;

122 
pxT›OfSèck
--;

123 *
pxT›OfSèck
 = 0xcc;

124 
pxT›OfSèck
--;

125 *
pxT›OfSèck
 = 0xdd;

129 
ulVÆue
 = ( Ë
pxCode
;

131 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulVÆue
 & 0xff );

133 
pxT›OfSèck
--;

134 
ulVÆue
 >>= 8UL;

135 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulVÆue
 & 0xff );

136 
pxT›OfSèck
--;

137 
ulVÆue
 >>= 8UL;

138 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulVÆue
 & 0xff );

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = 
p‹tINITIAL_CCR
;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = 0x66;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = 0x66;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = 0x66;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = 0x66;

159 
ulVÆue
 = ( Ë
pvP¨amëîs
;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulVÆue
 & 0xff );

163 
pxT›OfSèck
--;

164 
ulVÆue
 >>= 8UL;

165 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulVÆue
 & 0xff );

166 
pxT›OfSèck
--;

167 
ulVÆue
 >>= 8UL;

168 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulVÆue
 & 0xff );

169 
pxT›OfSèck
--;

170 
ulVÆue
 >>= 8UL;

171 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulVÆue
 & 0xff );

174 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = 0x11;

176 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = 0x11;

178 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = 0x11;

180 
pxT›OfSèck
--;

181 *
pxT›OfSèck
 = 0x11;

184 
pxT›OfSèck
--;

185 *
pxT›OfSèck
 = 0x22;

186 
pxT›OfSèck
--;

187 *
pxT›OfSèck
 = 0x22;

188 
pxT›OfSèck
--;

189 *
pxT›OfSèck
 = 0x22;

190 
pxT›OfSèck
--;

191 *
pxT›OfSèck
 = 0x22;

194 
pxT›OfSèck
--;

195 *
pxT›OfSèck
 = 0x33;

196 
pxT›OfSèck
--;

197 *
pxT›OfSèck
 = 0x33;

198 
pxT›OfSèck
--;

199 *
pxT›OfSèck
 = 0x33;

200 
pxT›OfSèck
--;

201 *
pxT›OfSèck
 = 0x33;

204 
pxT›OfSèck
--;

205 *
pxT›OfSèck
 = 0x44;

206 
pxT›OfSèck
--;

207 *
pxT›OfSèck
 = 0x44;

208 
pxT›OfSèck
--;

209 *
pxT›OfSèck
 = 0x44;

210 
pxT›OfSèck
--;

211 *
pxT›OfSèck
 = 0x44;

214 
pxT›OfSèck
--;

215 *
pxT›OfSèck
 = 0x55;

216 
pxT›OfSèck
--;

217 *
pxT›OfSèck
 = 0x55;

218 
pxT›OfSèck
--;

219 *
pxT›OfSèck
 = 0x55;

220 
pxT›OfSèck
--;

221 *
pxT›OfSèck
 = 0x55;

223  
pxT›OfSèck
;

224 
	}
}

227 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

229 * 
pxCuºítTCB
;

232 
	`¥vSëupTimîI¡îru±
();

237 
asm
 volatile (

246 –Ë
pxCuºítTCB
;

249  
pdTRUE
;

250 
	}
}

253 
	$vP‹tEndScheduÀr
( )

256 
	}
}

264 
	$vP‹tYõld
( )

266 
	`p‹tSAVE_STACK_POINTER
();

267 
	`vTaskSwôchC⁄ãxt
();

268 
	`p‹tRESTORE_STACK_POINTER
();

269 
	}
}

276 #if–
c⁄figUSE_PREEMPTION
 == 1 )

283 
	$vTickISR
–Ë
	`__©åibuã__
 ( ( 
ßvóŒ
, 
öãºu±_h™dÀr
 ) );

284 
	$vTickISR
( )

286 
	`p‹tSAVE_STACK_POINTER
();

288 
	`vTaskIn¸emítTick
();

289 
	`vTaskSwôchC⁄ãxt
();

292 
TSR1
 &= ~0x01;

294 
	`p‹tRESTORE_STACK_POINTER
();

295 
	}
}

304 
	$vTickISR
–Ë
	`__©åibuã__
 ( ( 
öãºu±_h™dÀr
 ) );

305 
	$vTickISR
( )

307 
	`vTaskIn¸emítTick
();

310 
TSR1
 &= ~0x01;

311 
	}
}

319 
	$¥vSëupTimîI¡îru±
( )

321 c⁄° 
ulCom∑ªM©ch
 = ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) / 
p‹tCLOCK_DIV
;

324 
MSTPCR
 &~
p‹tMSTP13
;

327 
TCR1
 = 
p‹tCLEAR_ON_TGRA_COMPARE_MATCH
 | 
p‹tCLOCK_DIV_64
;

330 
TGR1A
 = 
ulCom∑ªM©ch
;

334 
TIER1
 |
p‹tTGRA_INTERRUPT_ENABLE
;

335 
TSTR
 |
p‹tTIMER_CHANNEL
;

336 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/H8S2329/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tCHAR


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tBYTE_ALIGNMENT
 2

	)

105 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

106 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

107 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûe–"TRAPA #0" )

	)

108 
	#p‹tNOP
(Ë
asm
 vﬁ©ûe–"NOP" )

	)

112 
	#p‹tENABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûe–"ANDC #0x7F, CCR" );

	)

113 
	#p‹tDISABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûe–"ORC #0x80, CCR" );

	)

116 
	#p‹tENTER_CRITICAL
(Ë
asm
 volatile( "STC CCR, @-ER7" ); \

117 
	`p‹tDISABLE_INTERRUPTS
();

	)

120 
	#p‹tEXIT_CRITICAL
(Ë
asm
 vﬁ©ûe–"LDC @ER7+, CCR" );

	)

130 
	#p‹tSAVE_STACK_POINTER
() \

131 * 
pxCuºítTCB
; \

133 
asm
 volatile( \

137 –Ë
pxCuºítTCB
;

	)

140 
	#p‹tRESTORE_STACK_POINTER
() \

141 * 
pxCuºítTCB
; \

143 
asm
 volatile( \

147 –Ë
pxCuºítTCB
;

	)

153 
	#p‹tENTER_SWITCHING_ISR
(Ë
	`p‹tSAVE_STACK_POINTER
(); {

	)

155 
	#p‹tEXIT_SWITCHING_ISR
–
x
 ) \

156 if–
x
 ) \

158 
	`vTaskSwôchC⁄ãxt
( ); \

159 
	`vTaskSwôchC⁄ãxt
(); \

161 } 
	`p‹tRESTORE_STACK_POINTER
();

	)

165 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

166 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

168 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/HCS12/port.c

70 
	~"FªeRTOS.h
"

71 
	~"èsk.h
"

74 
	~<sys/p‹ts_def.h
>

85 
¥vSëupTimîI¡îru±
( );

89 
	#ATTR_NEAR
 
	`__©åibuã__
((
√¨
))

	)

93 
ATTR_NEAR
 
vP‹tYõld
( );

97 
ATTR_NEAR
 
vP‹tTickI¡îru±
( );

100 
p‹tBASE_TYPE
 
ATTR_NEAR
 
xSèπScheduÀrNór
( );

108 vﬁ©ûê
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0x80;

115 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

125 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) *–(’‹tSTACK_TYPE *Ë(&
pxCode
) ) + 1 );

126 *--
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) *–(’‹tSTACK_TYPE *Ë(&
pxCode
) ) + 0 );

131 *--
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xff;

132 *--
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xee;

135 *--
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xdd;

136 *--
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xcc;

139 *--
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) *–(’‹tSTACK_TYPE *Ë(&
pvP¨amëîs
) ) + 0 );

142 *--
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) *–(’‹tSTACK_TYPE *Ë(&
pvP¨amëîs
) ) + 1 );

146 *--
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x80;

149 
	`__asm
("\n\
 _.‰ame, 2,-%0 \n\
 _.tmp, 2,-%0 \n\
 _.z, 2,-%0 \n\
 _.xy, 2,-%0 \n\
;movw _.d2, 2,-%0 \n\
;movw _.d1, 2,-%0 \n\
": "=A"(
pxT›OfSèck
) : "0"(pxTopOfStack) );

158 #ifde‡
BANKED_MODEL


160 *--
pxT›OfSèck
 = 0x30;

165 *--
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

168  
pxT›OfSèck
;

169 
	}
}

172 
	$vP‹tEndScheduÀr
( )

175 
	}
}

178 
	$¥vSëupTimîI¡îru±
( )

182 
RTICTL
 = 0x50;

183 
CRGINT
 |= 0x80;

184 
	}
}

187 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

195 
d
;

196 
	`__asm
 ("jm∞ xSèπScheduÀrNór ; wû»√vîÑëu∫": "=d"(
d
));

197  
d
;

198 
	}
}

201 
p‹tBASE_TYPE
 
	$xSèπScheduÀrNór
( )

205 
	`¥vSëupTimîI¡îru±
();

208 
	`p‹tRESTORE_CONTEXT
();

210 
	`p‹tISR_TAIL
();

213  
pdFALSE
;

214 
	}
}

225 
	$vP‹tYõld
( )

227 
	`p‹tISR_HEAD
();

232 
	`p‹tSAVE_CONTEXT
();

233 
	`vTaskSwôchC⁄ãxt
();

234 
	`p‹tRESTORE_CONTEXT
();

236 
	`p‹tISR_TAIL
();

237 
	}
}

245 
	$vP‹tTickI¡îru±
( )

247 
	`p‹tISR_HEAD
();

250 
CRGFLG
 = 0x80;

252 #i‡
c⁄figUSE_PREEMPTION
 == 1

255 
	`p‹tSAVE_CONTEXT
();

258 
	`vTaskIn¸emítTick
();

262 
	`vTaskSwôchC⁄ãxt
();

266 
	`p‹tRESTORE_CONTEXT
();

270 
	`vTaskIn¸emítTick
();

274 
	`p‹tISR_TAIL
();

275 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/HCS12/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tCHAR


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tBYTE_ALIGNMENT
 1

	)

105 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

106 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

107 
	#p‹tYIELD
(Ë
	`__asm
–"swi" );

	)

111 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
–"˛i" )

	)

112 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
–"£i" )

	)

120 
	#p‹tENTER_CRITICAL
() \

122 vﬁ©ûê
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

124 
	`p‹tDISABLE_INTERRUPTS
(); \

125 
uxCrôiˇlNe°ög
++; \

126 }

	)

133 
	#p‹tEXIT_CRITICAL
() \

135 vﬁ©ûê
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

137 
uxCrôiˇlNe°ög
--; \

138 if–
uxCrôiˇlNe°ög
 == 0 ) \

140 
	`p‹tENABLE_INTERRUPTS
(); \

142 }

	)

157 #ifde‡
BANKED_MODEL


163 
	#p‹tRESTORE_CONTEXT
() \

165 
	`__asm
( " \n\
.globlÖxCurrentTCB ; void * \n\
.globl uxCriticalNesting ; char \n\
\n\
ÖxCurrentTCB \n\
 0,x ; Stack \n\
\n\
 1,sp+,uxCriticalNesting \n\
 1,sp+,0x30 ; PPAGE \n\
" ); \

175 }

	)

182 
	#p‹tSAVE_CONTEXT
() \

184 
	`__asm
( " \n\
.globlÖxCurrentTCB ; void * \n\
.globl uxCriticalNesting ; char \n\
\n\
 0x30, 1,-sp ; PPAGE \n\
 uxCriticalNesting, 1,-sp \n\
\n\
ÖxCurrentTCB \n\
 0,x ; Stack \n\
" ); \

194 }

	)

202 
	#p‹tRESTORE_CONTEXT
() \

204 
	`__asm
( " \n\
.globlÖxCurrentTCB ; void * \n\
.globl uxCriticalNesting ; char \n\
\n\
ÖxCurrentTCB \n\
 0,x ; Stack \n\
\n\
 1,sp+,uxCriticalNesting \n\
" ); \

213 }

	)

215 
	#p‹tSAVE_CONTEXT
() \

217 
	`__asm
( " \n\
.globlÖxCurrentTCB ; void * \n\
.globl uxCriticalNesting ; char \n\
\n\
 uxCriticalNesting, 1,-sp \n\
\n\
ÖxCurrentTCB \n\
 0,x ; Stack \n\
" ); \

226 }

	)

233 
	#p‹tISR_HEAD
() \

235 
	`__asm
(" \n\
 _.frame, 2,-sp \n\
 _.tmp, 2,-sp \n\
 _.z, 2,-sp \n\
 _.xy, 2,-sp \n\
;movw _.d2, 2,-sp \n\
;movw _.d1, 2,-sp \n\
"); \

243 }

	)

245 
	#p‹tISR_TAIL
() \

247 
	`__asm
(" \n\
 2,sp+, _.xy \n\
 2,sp+, _.z \n\
 2,sp+, _.tmp \n\
 2,sp+, _.frame \n\
;movw 2,sp+, _.d1 \n\
;movw 2,sp+, _.d2 \n\
 \n\
"); \

256 }

	)

265 
	#p‹tTASK_SWITCH_FROM_ISR
() \

266 
	`p‹tSAVE_CONTEXT
(); \

267 
	`vTaskSwôchC⁄ãxt
(); \

268 
	`p‹tRESTORE_CONTEXT
();

	)

272 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

273 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

275 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MCF5235/port.c

54 
	~<°dlib.h
>

56 
	~"FªeRTOS.h
"

57 
	~"FªeRTOSC⁄fig.h
"

58 
	~"èsk.h
"

61 vﬁ©ûê
	tvuöt32
;

62 vﬁ©ûê
	tvuöt16
;

63 vﬁ©ûê
	tvuöt8
;

66 
	#p‹tVECTOR_TABLE
 
__RAMVEC


	)

67 
	#p‹tVECTOR_SYSCALL
 ( 32 + 
p‹tTRAP_YIELD
 )

	)

68 
	#p‹tVECTOR_TIMER
 ( 64 + 36 )

	)

70 
	#MCF_PIT_PRESCALER
 512UL

	)

71 
	#MCF_PIT_TIMER_TICKS
 ( 
FSYS_2
 / 
MCF_PIT_PRESCALER
 )

	)

72 
	#MCF_PIT_MODULUS_REGISTER
(
‰eq
Ë–
MCF_PIT_TIMER_TICKS
 / ( fªq ) - 1UL)

	)

74 
	#MCF_PIT_PMR0
 ( *–
vuöt16
 * )–* )–&
__IPSBAR
[ 0x150002 ] ) )

	)

75 
	#MCF_PIT_PCSR0
 ( *–
vuöt16
 * )–* )–&
__IPSBAR
[ 0x150000 ] ) )

	)

76 
	#MCF_PIT_PCSR_PRE
(
x
Ë–––x ) & 0x000F ) << 8 )

	)

77 
	#MCF_PIT_PCSR_EN
 ( 0x0001 )

	)

78 
	#MCF_PIT_PCSR_RLD
 ( 0x0002 )

	)

79 
	#MCF_PIT_PCSR_PIF
 ( 0x0004 )

	)

80 
	#MCF_PIT_PCSR_PIE
 ( 0x0008 )

	)

81 
	#MCF_PIT_PCSR_OVW
 ( 0x0010 )

	)

82 
	#MCF_INTC0_ICR36
 ( *–
vuöt8
 * )–* )–&
__IPSBAR
[ 0x000C64 ] ) )

	)

83 
	#MCF_INTC0_IMRH
 ( *–
vuöt32
 * )–* )–&
__IPSBAR
[ 0x000C08 ] ) )

	)

84 
	#MCF_INTC0_IMRH_INT_MASK36
 ( 0x00000010 )

	)

85 
	#MCF_INTC0_IMRH_MASKALL
 ( 0x00000001 )

	)

86 
	#MCF_INTC0_ICRn_IP
(
x
Ë–––x ) & 0x07 ) << 0 )

	)

87 
	#MCF_INTC0_ICRn_IL
(
x
Ë–––x ) & 0x07 ) << 3 )

	)

89 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

90 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( Ë10 )

	)

93 vﬁ©ûê
	gulCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

96 #i‡
c⁄figUSE_PREEMPTION
 == 0

97 
	$¥vP‹tPªem±iveTick
 ( Ë
	`__©åibuã__
 ((
öãºu±_h™dÀr
));

99 
	`¥vP‹tPªem±iveTick
 ( );

104 
p‹tSTACK_TYPE
 *

105 
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 * 
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
,

106 *
pvP¨amëîs
 )

109 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

110 
pxT›OfSèck
--;

114 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0;

115 
pxT›OfSèck
--;

119 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

120 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = 0x40002000UL | ( 
p‹tVECTOR_SYSCALL
 + 32 ) << 18;

125 
pxT›OfSèck
--;

129 *
pxT›OfSèck
 = 0;

130 *
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xA6;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xA5;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xA4;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xA3;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xA2;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xA1;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xA0;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xD7;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xD6;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xD5;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xD4;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xD3;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xD2;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xD1;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xD0;

162  
pxT›OfSèck
;

163 
	}
}

169 
	$¥vP‹tYõld
( )

171 
asm
 volatile ( "move.w #0x2700, %sr\n\t" );

172 #i‡
_GCC_USES_FP
 == 1

173 
asm
 volatile ( "unlk %fp\n\t" );

176 
	`p‹tSAVE_CONTEXT
( );

179 
	`vTaskSwôchC⁄ãxt
( );

182 
	`p‹tRESTORE_CONTEXT
( );

183 
	}
}

185 #i‡
c⁄figUSE_PREEMPTION
 == 0

191 
	$¥vP‹tPªem±iveTick
 ( )

197 
	`vTaskIn¸emítTick
( );

198 
MCF_PIT_PCSR0
 |
MCF_PIT_PCSR_PIF
;

199 
	}
}

204 
	$¥vP‹tPªem±iveTick
( )

206 
asm
 volatile ( "move.w #0x2700, %sr\n\t" );

207 #i‡
_GCC_USES_FP
 == 1

208 
asm
 volatile ( "unlk %fp\n\t" );

210 
	`p‹tSAVE_CONTEXT
( );

211 
MCF_PIT_PCSR0
 |
MCF_PIT_PCSR_PIF
;

212 
	`vTaskIn¸emítTick
( );

213 
	`vTaskSwôchC⁄ãxt
( );

214 
	`p‹tRESTORE_CONTEXT
( );

215 
	}
}

219 
	$vP‹tE¡îCrôiˇl
()

224 –)
	`p‹tSET_IPL
–
p‹tIPL_MAX
 );

229 
ulCrôiˇlNe°ög
++;

230 
	}
}

233 
	$vP‹tExôCrôiˇl
()

235 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

238 
ulCrôiˇlNe°ög
--;

242 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

244 –)
	`p‹tSET_IPL
( 0 );

247 
	}
}

249 
p‹tBASE_TYPE


250 
	$xP‹tSèπScheduÀr
( )

252 –*
p‹tVECTOR_TABLE
[ ] ) ( );

255 
p‹tVECTOR_TABLE
[ 
p‹tVECTOR_SYSCALL
 ] = 
¥vP‹tYõld
;

257 
p‹tVECTOR_TABLE
[ 
p‹tVECTOR_TIMER
 ] = 
¥vP‹tPªem±iveTick
;

260 i‡–
c⁄figTICK_RATE_HZ
 > 0)

263 
MCF_PIT_PCSR0
 = 
	`MCF_PIT_PCSR_PRE
–0x9 ) | 
MCF_PIT_PCSR_RLD
 | 
MCF_PIT_PCSR_OVW
;

265 
MCF_PIT_PMR0
 = 
	`MCF_PIT_MODULUS_REGISTER
–
c⁄figTICK_RATE_HZ
 );

267 
MCF_INTC0_ICR36
 = 
	`MCF_INTC0_ICRn_IL
–0x1 ) | 
	`MCF_INTC0_ICRn_IP
( 0x1 );

268 
MCF_INTC0_IMRH
 &~–
MCF_INTC0_IMRH_INT_MASK36
 | 
MCF_INTC0_IMRH_MASKALL
 );

270 
MCF_PIT_PCSR0
 |
MCF_PIT_PCSR_PIE
 | 
MCF_PIT_PCSR_EN
 | 
MCF_PIT_PCSR_PIF
;

274 
	`p‹tRESTORE_CONTEXT
( );

277  
pdTRUE
;

278 
	}
}

281 
	$vP‹tEndScheduÀr
( )

283 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MCF5235/portmacro.h

54 #i‚de‡
PORTMACRO_H


55 
	#PORTMACRO_H


	)

57 #ifde‡
__˝lu•lus


62 
	#p‹tCHAR
 

	)

63 
	#p‹tFLOAT
 

	)

64 
	#p‹tDOUBLE
 

	)

65 
	#p‹tLONG
 

	)

66 
	#p‹tSHORT
 

	)

67 
	#p‹tSTACK_TYPE
 

	)

68 
	#p‹tBASE_TYPE
 

	)

70 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

71 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

72 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

74 
	tp‹tLONG
 
	tp‹tTickTy≥
;

75 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

79 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

80 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

81 
	#p‹tBYTE_ALIGNMENT
 4

	)

83 
	#p‹tTRAP_YIELD
 0

	)

84 
	#p‹tIPL_MAX
 7

	)

96 
	#p‹tSAVE_CONTEXT
() \

97 
asm
 volatile ( \

106 "move.» %•, (%a0)");

	)

114 
	#p‹tRESTORE_CONTEXT
() \

115 
asm
 volatile ( "move.lÖxCurrentTCB, %sp\n\t" \

123 "πe\n\t" );

	)

125 
	#p‹tENTER_CRITICAL
() \

126 
	`vP‹tE¡îCrôiˇl
();

	)

128 
	#p‹tEXIT_CRITICAL
() \

129 
	`vP‹tExôCrôiˇl
();

	)

131 
	#p‹tSET_IPL
–
xIPL
 ) \

132 
	`asm_£t_ùl
–
xIPL
 )

	)

134 
	#p‹tDISABLE_INTERRUPTS
() \

135 dÿ{ ( )
	`p‹tSET_IPL
–
p‹tIPL_MAX
 ); }  0 )

	)

136 
	#p‹tENABLE_INTERRUPTS
() \

137 dÿ{ ( )
	`p‹tSET_IPL
–0 ); }  0 )

	)

139 
	#p‹tYIELD
() \

140 
asm
 vﬁ©ûê–"Åø∞ %0\n\t" : : "i"(
p‹tTRAP_YIELD
Ë)

	)

142 
	#p‹tNOP
() \

143 
asm
 vﬁ©ûê–"n›\n\t" )

	)

145 
	#p‹tENTER_SWITCHING_ISR
() \

146 
asm
 volatile ( "move.w #0x2700, %sr" ); \

148 
	`p‹tSAVE_CONTEXT
( ); \

149 {

	)

151 
	#p‹tEXIT_SWITCHING_ISR
–
SwôchRequúed
 ) \

153 if–
SwôchRequúed
 ) \

155 
	`vTaskSwôchC⁄ãxt
( ); \

158 
	`p‹tRESTORE_CONTEXT
–);

	)

161 
vP‹tE¡îCrôiˇl
( );

162 
vP‹tExôCrôiˇl
( );

163 
asm_£t_ùl
–
uiNewIPL
 );

166 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) \

167 
	`vFun˘i⁄
–*
pvP¨amëîs
 )

	)

169 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) \

170 
	`vFun˘i⁄
–*
pvP¨amëîs
 )

	)

172 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MSP430F449/port.c

74 
	~<°dlib.h
>

75 
	~<sig«l.h
>

78 
	~"FªeRTOS.h
"

79 
	~"èsk.h
"

87 
	#p‹tACLK_FREQUENCY_HZ
 ( ( 
p‹tTickTy≥
 ) 32768 )

	)

88 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( Ë10 )

	)

89 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
p‹tSTACK_TYPE
 ) 0x08 )

	)

93 
	ttskTCB
;

94 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

108 vﬁ©ûê
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

118 
	#p‹tSAVE_CONTEXT
() \

119 
asm
 volatile ( "pushÑ4 \n\t" \

135 );

	)

147 
	#p‹tRESTORE_CONTEXT
() \

148 
asm
 volatile ( "mov.wÖxCurrentTCB,Ñ12 \n\t" \

166 );

	)

173 
¥vSëupTimîI¡îru±
( );

182 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

200 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

201 
pxT›OfSèck
--;

202 *
pxT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

203 
pxT›OfSèck
--;

206 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x4444;

207 
pxT›OfSèck
--;

208 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x5555;

209 
pxT›OfSèck
--;

210 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x6666;

211 
pxT›OfSèck
--;

212 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x7777;

213 
pxT›OfSèck
--;

214 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x8888;

215 
pxT›OfSèck
--;

216 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x9999;

217 
pxT›OfSèck
--;

218 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaa;

219 
pxT›OfSèck
--;

220 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xbbbb;

221 
pxT›OfSèck
--;

222 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xcccc;

223 
pxT›OfSèck
--;

224 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xdddd;

225 
pxT›OfSèck
--;

226 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xeeee;

227 
pxT›OfSèck
--;

231 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

232 
pxT›OfSèck
--;

239 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

243  
pxT›OfSèck
;

244 
	}
}

247 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

251 
	`¥vSëupTimîI¡îru±
();

254 
	`p‹tRESTORE_CONTEXT
();

257  
pdTRUE
;

258 
	}
}

261 
	$vP‹tEndScheduÀr
( )

265 
	}
}

273 
	$vP‹tYõld
–Ë
	`__©åibuã__
 ( ( 
«ked
 ) );

274 
	$vP‹tYõld
( )

280 
asm
 volatile ( "pushÑ2" );

281 
	`_DINT
();

284 
	`p‹tSAVE_CONTEXT
();

287 
	`vTaskSwôchC⁄ãxt
();

290 
	`p‹tRESTORE_CONTEXT
();

291 
	}
}

298 
	$¥vSëupTimîI¡îru±
( )

301 
TACTL
 = 0;

304 
TACTL
 = 
TASSEL_1
;

307 
TACTL
 |
TACLR
;

310 
TACCR0
 = 
p‹tACLK_FREQUENCY_HZ
 / 
c⁄figTICK_RATE_HZ
;

313 
TACCTL0
 = 
CCIE
;

316 
TACTL
 |
TACLR
;

319 
TACTL
 |
MC_1
;

320 
	}
}

328 #i‡
c⁄figUSE_PREEMPTION
 == 1

335 
	$öãºu±
 (
TIMERA0_VECTOR
Ë
	$¥vTickISR
–Ë
	`__©åibuã__
 ( ( 
«ked
 ) );

336 
	$öãºu±
 (
TIMERA0_VECTOR
Ë
	$¥vTickISR
( )

339 
	`p‹tSAVE_CONTEXT
();

343 
	`vTaskIn¸emítTick
();

344 
	`vTaskSwôchC⁄ãxt
();

347 
	`p‹tRESTORE_CONTEXT
();

348 
	}
}

357 
	$öãºu±
 (
TIMERA0_VECTOR
Ë
	`¥vTickISR
( );

358 
	$öãºu±
 (
TIMERA0_VECTOR
Ë
	$¥vTickISR
( )

360 
	`vTaskIn¸emítTick
();

361 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MSP430F449/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
p‹tSHORT


	)

91 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

95 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

97 
	tp‹tLONG
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

103 
	#p‹tDISABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûê–"DINT" );ásm vﬁ©ûê–"NOP" )

	)

104 
	#p‹tENABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûê–"EINT" )

	)

108 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSHORT
 ) 0 )

	)

110 
	#p‹tENTER_CRITICAL
() \

112 vﬁ©ûê
p‹tSHORT
 
usCrôiˇlNe°ög
; \

114 
	`p‹tDISABLE_INTERRUPTS
(); \

119 
usCrôiˇlNe°ög
++; \

120 }

	)

122 
	#p‹tEXIT_CRITICAL
() \

124 vﬁ©ûê
p‹tSHORT
 
usCrôiˇlNe°ög
; \

126 if–
usCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

129 
usCrôiˇlNe°ög
--; \

133 if–
usCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

135 
	`p‹tENABLE_INTERRUPTS
(); \

138 }

	)

142 
vP‹tYõld
–Ë
__©åibuã__
 ( ( 
«ked
 ) );

143 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

144 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

148 
	#p‹tBYTE_ALIGNMENT
 2

	)

149 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

150 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

154 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

155 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

157 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MicroBlaze/port.c

73 
	~"FªeRTOS.h
"

74 
	~"èsk.h
"

77 
	~<°rög.h
>

80 
	~<xötc.h
>

81 
	~<xötc_i.h
>

82 
	~<xtmr˘r.h
>

85 
	#p‹tINITIAL_MSR_STATE
 ( ( 
p‹tSTACK_TYPE
 ) 0x02 )

	)

90 
	#p‹tINITIAL_NESTING_VALUE
 ( 0xf‡)

	)

93 
	#p‹tCOUNTER_0
 0

	)

97 
	#p‹tISR_STACK_FILL_VALUE
 0x55555555

	)

102 vﬁ©ûê
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 
p‹tINITIAL_NESTING_VALUE
;

106 *
	gpulISRSèck
;

114 
¥vSëupTimîI¡îru±
( );

123 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

125 *
_SDA2_BASE_
, *
_SDA_BASE_
;

126 c⁄° 
ulR2
 = ( Ë&
_SDA2_BASE_
;

127 c⁄° 
ulR13
 = ( Ë&
_SDA_BASE_
;

133 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

134 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x22222222;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x33333333;

138 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
ulR2
;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0a;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0b;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0c;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
ulR13
;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0f;

173 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10;

175 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11;

177 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12;

179 
pxT›OfSèck
--;

180 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x13;

181 
pxT›OfSèck
--;

182 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x14;

183 
pxT›OfSèck
--;

184 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x15;

185 
pxT›OfSèck
--;

186 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x16;

187 
pxT›OfSèck
--;

188 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x17;

189 
pxT›OfSèck
--;

190 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x18;

191 
pxT›OfSèck
--;

192 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x19;

193 
pxT›OfSèck
--;

194 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1a;

195 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1b;

197 
pxT›OfSèck
--;

198 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1c;

199 
pxT›OfSèck
--;

200 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1d;

201 
pxT›OfSèck
--;

202 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1e;

203 
pxT›OfSèck
--;

206 *
pxT›OfSèck
 = 
p‹tINITIAL_MSR_STATE
;

207 
pxT›OfSèck
--;

209 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1f;

210 
pxT›OfSèck
--;

214  
pxT›OfSèck
;

215 
	}
}

218 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

220 –
__FªeRTOS_öãºu±_H™dÀr
 )( );

221 –
vSèπFú°Task
 )( );

225 
asm
 volatile ( "laÑ6,Ñ0, __FreeRTOS_interrupt_handler \n\t" \

233 
	`¥vSëupTimîI¡îru±
();

236 
pulISRSèck
 = ( * ) 
	`pvP‹tMÆloc
–
c⁄figMINIMAL_STACK_SIZE
 * –
p‹tSTACK_TYPE
 ) );

239 if–
pulISRSèck
 !
NULL
 )

242 
	`mem£t
–
pulISRSèck
, 
p‹tISR_STACK_FILL_VALUE
, 
c⁄figMINIMAL_STACK_SIZE
 * –
p‹tSTACK_TYPE
 ) );

243 
pulISRSèck
 +–
c⁄figMINIMAL_STACK_SIZE
 - 1 );

246 
	`vSèπFú°Task
();

250  
pdFALSE
;

251 
	}
}

254 
	$vP‹tEndScheduÀr
( )

257 
	}
}

263 
	$vP‹tYõld
( )

265 
	`VP‹tYõldASM
( );

270 
	`p‹tENTER_CRITICAL
();

273 
asm
 volatile ( "bralidÑ14, VPortYieldASM \n\t" \

275 
	`p‹tEXIT_CRITICAL
();

276 
	}
}

282 
	$¥vSëupTimîI¡îru±
( )

284 
XTmrCå
 
xTimî
;

285 c⁄° 
ulCou¡îVÆue
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

286 
p‹tBASE_TYPE
 
uxMask
;

290 
	`XTmrCå_mDißbÀ
–
XPAR_OPB_TIMER_1_BASEADDR
, 
XPAR_OPB_TIMER_1_DEVICE_ID
 );

291 
	`XTmrCå_Inôülize
–&
xTimî
, 
XPAR_OPB_TIMER_1_DEVICE_ID
 );

292 
	`XTmrCå_mSëLﬂdReg
–
XPAR_OPB_TIMER_1_BASEADDR
, 
p‹tCOUNTER_0
, 
ulCou¡îVÆue
 );

293 
	`XTmrCå_mSëC⁄åﬁSètusReg
–
XPAR_OPB_TIMER_1_BASEADDR
, 
p‹tCOUNTER_0
, 
XTC_CSR_LOAD_MASK
 | 
XTC_CSR_INT_OCCURED_MASK
 );

297 
uxMask
 = 
	`XI¡c_In32
––
XPAR_OPB_INTC_0_BASEADDR
 + 
XIN_IER_OFFSET
 ) );

298 
uxMask
 |
XPAR_OPB_TIMER_1_INTERRUPT_MASK
;

299 
	`XI¡c_Out32
––
XPAR_OPB_INTC_0_BASEADDR
 + 
XIN_IER_OFFSET
 ), ( 
uxMask
 ) );

301 
	`XTmrCå_Sèπ
–&
xTimî
, 
XPAR_OPB_TIMER_1_DEVICE_ID
 );

302 
	`XTmrCå_mSëC⁄åﬁSètusReg
(
XPAR_OPB_TIMER_1_BASEADDR
, 
p‹tCOUNTER_0
, 
XTC_CSR_ENABLE_TMR_MASK
 | 
XTC_CSR_ENABLE_INT_MASK
 | 
XTC_CSR_AUTO_RELOAD_MASK
 | 
XTC_CSR_DOWN_COUNT_MASK
 | 
XTC_CSR_INT_OCCURED_MASK
 );

303 
	`XI¡c_mAckI¡r
–
XPAR_INTC_SINGLE_BASEADDR
, 1 );

304 
	}
}

313 
	$vTaskISRH™dÀr
( )

315 
ulPídög
;

318 
ulPídög
 = 
	`XI¡c_In32
––
XPAR_INTC_SINGLE_BASEADDR
 + 
XIN_IVR_OFFSET
 ) );

320 if–
ulPídög
 < 
XPAR_INTC_MAX_NUM_INTR_INPUTS
 )

322 
XI¡c_Ve˘‹TabÀE¡ry
 *
pxTabÀPå
;

323 
XI¡c_C⁄fig
 *
pxC⁄fig
;

324 
ulI¡îru±Mask
;

326 
ulI¡îru±Mask
 = ( Ë1 << 
ulPídög
;

329 
pxC⁄fig
 = &
XI¡c_C⁄figTabÀ
[ ( Ë
XPAR_INTC_SINGLE_DEVICE_ID
 ];

331 
pxTabÀPå
 = &–
pxC⁄fig
->
H™dÀrTabÀ
[ 
ulPídög
 ] );

332 if–
pxC⁄fig
->
AckBef‹eSîvi˚
 & ( 
ulI¡îru±Mask
 ) )

334 
	`XI¡c_mAckI¡r
–
pxC⁄fig
->
Ba£Addªss
, 
ulI¡îru±Mask
 );

335 
pxTabÀPå
->
	`H™dÀr
–pxTabÀPå->
CÆlBackRef
 );

339 
pxTabÀPå
->
	`H™dÀr
–pxTabÀPå->
CÆlBackRef
 );

340 
	`XI¡c_mAckI¡r
–
pxC⁄fig
->
Ba£Addªss
, 
ulI¡îru±Mask
 );

343 
	}
}

349 
	$vTickISR
–*
pvBa£Addªss
 )

351 
ulCSR
;

354 
	`vTaskIn¸emítTick
();

357 
ulCSR
 = 
	`XTmrCå_mGëC⁄åﬁSètusReg
(
XPAR_OPB_TIMER_1_BASEADDR
, 0);

358 
	`XTmrCå_mSëC⁄åﬁSètusReg
–
XPAR_OPB_TIMER_1_BASEADDR
, 
p‹tCOUNTER_0
, 
ulCSR
 );

362 #i‡
c⁄figUSE_PREEMPTION
 == 1

363 
	`vTaskSwôchC⁄ãxt
();

365 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MicroBlaze/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

91 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

95 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

97 
	tp‹tLONG
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

103 
mi¸obœze_dißbÀ_öãºu±s
( );

104 
mi¸obœze_íabÀ_öãºu±s
( );

105 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`mi¸obœze_dißbÀ_öãºu±s
()

	)

106 
	#p‹tENABLE_INTERRUPTS
(Ë
	`mi¸obœze_íabÀ_öãºu±s
()

	)

110 
vP‹tE¡îCrôiˇl
( );

111 
vP‹tExôCrôiˇl
( );

112 
	#p‹tENTER_CRITICAL
() { \

113 
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

114 
	`mi¸obœze_dißbÀ_öãºu±s
(); \

115 
uxCrôiˇlNe°ög
++; \

116 }

	)

118 
	#p‹tEXIT_CRITICAL
() { \

119 
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

122 
uxCrôiˇlNe°ög
--; \

123 if–
uxCrôiˇlNe°ög
 == 0 ) \

127 
	`p‹tENABLE_INTERRUPTS
(); \

129 }

	)

134 
vP‹tYõld
( );

135 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

137 
vTaskSwôchC⁄ãxt
();

138 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

142 
	#p‹tBYTE_ALIGNMENT
 4

	)

143 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

144 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

145 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

149 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

150 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

152 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MicroBlazeV8/port.c

73 
	~"FªeRTOS.h
"

74 
	~"èsk.h
"

77 
	~<°rög.h
>

80 
	~<xötc_i.h
>

81 
	~<xû_ex˚±i⁄.h
>

82 
	~<mi¸obœze_ex˚±i⁄s_g.h
>

87 
	#p‹tINITIAL_NESTING_VALUE
 ( 0xf‡)

	)

90 
	#p‹tMSR_IE
 ( 0x02U )

	)

96 
	#p‹tINITIAL_FSR
 ( 0U )

	)

102 
¥vInôüli£I¡îru±C⁄åﬁÀr
( );

107 
¥vEnsuªI¡îru±C⁄åﬁÀrIsInôüli£d
( );

114 vﬁ©ûê
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 
p‹tINITIAL_NESTING_VALUE
;

119 *
	gpulISRSèck
;

129 vﬁ©ûê
	gulTaskSwôchReque°ed
 = 0UL;

133 
XI¡c
 
	gxI¡îru±C⁄åﬁÀrIn°™˚
;

143 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

145 *
_SDA2_BASE_
, *
_SDA_BASE_
;

146 c⁄° 
ulR2
 = ( Ë&
_SDA2_BASE_
;

147 c⁄° 
ulR13
 = ( Ë&
_SDA_BASE_
;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00000000;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00000000;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00000000;

157 
pxT›OfSèck
--;

159 #i‡
XPAR_MICROBLAZE_0_USE_FPU
 == 1

161 *
pxT›OfSèck
 = 
p‹tINITIAL_FSR
;

162 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = 
	`mfm§
(Ë& ~
p‹tMSR_IE
;

169 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

179 
pxT›OfSèck
--;

180 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
ulR2
;

181 
pxT›OfSèck
--;

182 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03;

183 
pxT›OfSèck
--;

184 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04;

185 
pxT›OfSèck
--;

186 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

188 #ifde‡
p‹tPRE_LOAD_STACK_FOR_DEBUGGING


189 
pxT›OfSèck
--;

190 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06;

191 
pxT›OfSèck
--;

192 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07;

193 
pxT›OfSèck
--;

194 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08;

195 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09;

197 
pxT›OfSèck
--;

198 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0a;

199 
pxT›OfSèck
--;

200 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0b;

201 
pxT›OfSèck
--;

202 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0c;

203 
pxT›OfSèck
--;

205 
pxT›OfSèck
-= 8;

208 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
ulR13
;

209 
pxT›OfSèck
--;

210 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

211 
pxT›OfSèck
--;

212 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
NULL
;

214 #ifde‡
p‹tPRE_LOAD_STACK_FOR_DEBUGGING


215 
pxT›OfSèck
--;

216 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10;

217 
pxT›OfSèck
--;

218 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11;

219 
pxT›OfSèck
--;

220 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12;

221 
pxT›OfSèck
--;

223 
pxT›OfSèck
 -= 4;

226 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

228 #ifde‡
p‹tPRE_LOAD_STACK_FOR_DEBUGGING


229 
pxT›OfSèck
--;

230 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x14;

231 
pxT›OfSèck
--;

232 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x15;

233 
pxT›OfSèck
--;

234 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x16;

235 
pxT›OfSèck
--;

236 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x17;

237 
pxT›OfSèck
--;

238 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x18;

239 
pxT›OfSèck
--;

240 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x19;

241 
pxT›OfSèck
--;

242 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1a;

243 
pxT›OfSèck
--;

244 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1b;

245 
pxT›OfSèck
--;

246 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1c;

247 
pxT›OfSèck
--;

248 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1d;

249 
pxT›OfSèck
--;

250 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1e;

251 
pxT›OfSèck
--;

252 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1f;

253 
pxT›OfSèck
--;

255 
pxT›OfSèck
 -= 13;

260  
pxT›OfSèck
;

261 
	}
}

264 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

266 –
vP‹tSèπFú°Task
 )( );

267 
_°ack
[];

278 
	`vAµliˇti⁄SëupTimîI¡îru±
();

281 
pulISRSèck
 = ( * ) 
_°ack
;

285 
pulISRSèck
 -= 2;

289 
	`vP‹tSèπFú°Task
();

292  
pdFALSE
;

293 
	}
}

296 
	$vP‹tEndScheduÀr
( )

299 
	}
}

305 
	$vP‹tYõld
( )

307 
	`VP‹tYõldASM
( );

312 
	`p‹tENTER_CRITICAL
();

316 
asm
 volatile ( "bralidÑ14, VPortYieldASM \n\t" \

319 
	`p‹tEXIT_CRITICAL
();

320 
	}
}

323 
	$vP‹tE«bÀI¡îru±
–
ucI¡îru±ID
 )

325 
lRëu∫
;

330 
lRëu∫
 = 
	`¥vEnsuªI¡îru±C⁄åﬁÀrIsInôüli£d
();

331 if–
lRëu∫
 =
pdPASS
 )

333 
	`XI¡c_E«bÀ
–&
xI¡îru±C⁄åﬁÀrIn°™˚
, 
ucI¡îru±ID
 );

336 
	`c⁄figASSERT
–
lRëu∫
 );

337 
	}
}

340 
	$vP‹tDißbÀI¡îru±
–
ucI¡îru±ID
 )

342 
lRëu∫
;

347 
lRëu∫
 = 
	`¥vEnsuªI¡îru±C⁄åﬁÀrIsInôüli£d
();

349 if–
lRëu∫
 =
pdPASS
 )

351 
	`XI¡c_DißbÀ
–&
xI¡îru±C⁄åﬁÀrIn°™˚
, 
ucI¡îru±ID
 );

354 
	`c⁄figASSERT
–
lRëu∫
 );

355 
	}
}

358 
p‹tBASE_TYPE
 
	$xP‹tIn°ÆlI¡îru±H™dÀr
–
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 )

360 
lRëu∫
;

365 
lRëu∫
 = 
	`¥vEnsuªI¡îru±C⁄åﬁÀrIsInôüli£d
();

367 if–
lRëu∫
 =
pdPASS
 )

369 
lRëu∫
 = 
	`XI¡c_C⁄√˘
–&
xI¡îru±C⁄åﬁÀrIn°™˚
, 
ucI¡îru±ID
, 
pxH™dÀr
, 
pvCÆlBackRef
 );

372 if–
lRëu∫
 =
XST_SUCCESS
 )

374 
lRëu∫
 = 
pdPASS
;

377 
	`c⁄figASSERT
–
lRëu∫
 =
pdPASS
 );

379  
lRëu∫
;

380 
	}
}

383 
	$¥vEnsuªI¡îru±C⁄åﬁÀrIsInôüli£d
( )

385 
lI¡îru±C⁄åﬁÀrInôüli£d
 = 
pdFALSE
;

386 
lRëu∫
;

390 if–
lI¡îru±C⁄åﬁÀrInôüli£d
 !
pdTRUE
 )

392 
lRëu∫
 = 
	`¥vInôüli£I¡îru±C⁄åﬁÀr
();

394 if–
lRëu∫
 =
pdPASS
 )

396 
lI¡îru±C⁄åﬁÀrInôüli£d
 = 
pdTRUE
;

401 
lRëu∫
 = 
pdPASS
;

404  
lRëu∫
;

405 
	}
}

412 
	$vP‹tTickISR
–*
pvUnu£d
 )

414 
	`vAµliˇti⁄CÀ¨TimîI¡îru±
( );

417 –Ë
pvUnu£d
;

425 
	`vAµliˇti⁄CÀ¨TimîI¡îru±
();

428 
	`vTaskIn¸emítTick
();

433 #i‡
c⁄figUSE_PREEMPTION
 == 1

435 
ulTaskSwôchReque°ed
 = 1;

437 
	}
}

440 
	$¥vInôüli£I¡îru±C⁄åﬁÀr
( )

442 
lSètus
;

444 
lSètus
 = 
	`XI¡c_Inôülize
–&
xI¡îru±C⁄åﬁÀrIn°™˚
, 
c⁄figINTERRUPT_CONTROLLER_TO_USE
 );

446 if–
lSètus
 =
XST_SUCCESS
 )

449 
	`Xû_Ex˚±i⁄Inô
();

452 
	`XI¡c_SëI¡rSvcO±i⁄
–
xI¡îru±C⁄åﬁÀrIn°™˚
.
Ba£Addªss
, 
XIN_SVC_ALL_ISRS_OPTION
 );

457 #i‡–
MICROBLAZE_EXCEPTIONS_ENABLED
 =1 ) && ( 
c⁄figINSTALL_EXCEPTION_HANDLERS
 == 1 )

459 
	`vP‹tEx˚±i⁄sIn°ÆlH™dÀrs
();

465 
lSètus
 = 
	`XI¡c_Sèπ
–&
xI¡îru±C⁄åﬁÀrIn°™˚
, 
XIN_REAL_MODE
 );

467 if–
lSètus
 =
XST_SUCCESS
 )

469 
lSètus
 = 
pdPASS
;

473 
lSètus
 = 
pdFAIL
;

477 
	`c⁄figASSERT
–
lSètus
 =
pdPASS
 );

479  
lSètus
;

480 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MicroBlazeV8/port_exceptions.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

72 
	~<mi¸obœze_ex˚±i⁄s_i.h
>

73 
	~<mi¸obœze_ex˚±i⁄s_g.h
>

78 
	#p‹ãxR3_STACK_OFFSET
 4

	)

79 
	#p‹ãxR4_STACK_OFFSET
 5

	)

80 
	#p‹ãxR5_STACK_OFFSET
 6

	)

81 
	#p‹ãxR6_STACK_OFFSET
 7

	)

82 
	#p‹ãxR7_STACK_OFFSET
 8

	)

83 
	#p‹ãxR8_STACK_OFFSET
 9

	)

84 
	#p‹ãxR9_STACK_OFFSET
 10

	)

85 
	#p‹ãxR10_STACK_OFFSET
 11

	)

86 
	#p‹ãxR11_STACK_OFFSET
 12

	)

87 
	#p‹ãxR12_STACK_OFFSET
 13

	)

88 
	#p‹ãxR15_STACK_OFFSET
 16

	)

89 
	#p‹ãxR18_STACK_OFFSET
 19

	)

90 
	#p‹ãxMSR_STACK_OFFSET
 20

	)

91 
	#p‹ãxR19_STACK_OFFSET
 -1

	)

96 
	#p‹ãxASM_HANDLER_STACK_FRAME_SIZE
 84UL

	)

99 
	#p‹ãxINSTRUCTION_SIZE
 4

	)

104 #i‡–
MICROBLAZE_EXCEPTIONS_ENABLED
 =1 ) && ( 
c⁄figINSTALL_EXCEPTION_HANDLERS
 == 1 )

108 *
	gpulSèckPoöãrOnFun˘i⁄E¡ry
 = 
NULL
;

114 
xP‹tRegi°îDump
 
	gxRegi°îDump
;

119 
vP‹tEx˚±i⁄H™dÀr
–*
pvEx˚±i⁄ID
 );

120 
vP‹tEx˚±i⁄H™dÀrE¡ry
–*
pvEx˚±i⁄ID
 );

129 
	$vAµliˇti⁄Ex˚±i⁄Regi°îDump
–
xP‹tRegi°îDump
 *
xRegi°îDump
 ) 
	`__©åibuã__
((
wók
));

130 
	$vAµliˇti⁄Ex˚±i⁄Regi°îDump
–
xP‹tRegi°îDump
 *
xRegi°îDump
 )

132 –Ë
xRegi°îDump
;

136 
	`p‹tNOP
();

138 
	}
}

141 
	$vP‹tEx˚±i⁄H™dÀr
–*
pvEx˚±i⁄ID
 )

143 *
pxCuºítTCB
;

150 
xRegi°îDump
.
xCuºítTaskH™dÀ
 = 
pxCuºítTCB
;

151 
xRegi°îDump
.
pcCuºítTaskName
 = 
	`pcTaskGëTaskName
–
NULL
 );

153 
	`c⁄figASSERT
–
pulSèckPoöãrOnFun˘i⁄E¡ry
 );

157 
xRegi°îDump
.
ulR3
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR3_STACK_OFFSET
 ];

158 
xRegi°îDump
.
ulR4
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR4_STACK_OFFSET
 ];

159 
xRegi°îDump
.
ulR5
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR5_STACK_OFFSET
 ];

160 
xRegi°îDump
.
ulR6
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR6_STACK_OFFSET
 ];

161 
xRegi°îDump
.
ulR7
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR7_STACK_OFFSET
 ];

162 
xRegi°îDump
.
ulR8
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR8_STACK_OFFSET
 ];

163 
xRegi°îDump
.
ulR9
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR9_STACK_OFFSET
 ];

164 
xRegi°îDump
.
ulR10
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR10_STACK_OFFSET
 ];

165 
xRegi°îDump
.
ulR11
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR11_STACK_OFFSET
 ];

166 
xRegi°îDump
.
ulR12
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR12_STACK_OFFSET
 ];

167 
xRegi°îDump
.
ulR15_ªtu∫_addªss_‰om_subroutöe
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR15_STACK_OFFSET
 ];

168 
xRegi°îDump
.
ulR18
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR18_STACK_OFFSET
 ];

169 
xRegi°îDump
.
ulR19
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR19_STACK_OFFSET
 ];

170 
xRegi°îDump
.
ulMSR
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxMSR_STACK_OFFSET
 ];

173 
xRegi°îDump
.
ulR2_smÆl_d©a_¨ó
 = 
	`mfg¥
–
R2
 );

174 
xRegi°îDump
.
ulR13_ªad_wrôe_smÆl_d©a_¨ó
 = 
	`mfg¥
–
R13
 );

175 
xRegi°îDump
.
ulR14_ªtu∫_addªss_‰om_öãºu±
 = 
	`mfg¥
–
R14
 );

176 
xRegi°îDump
.
ulR16_ªtu∫_addªss_‰om_å≠
 = 
	`mfg¥
–
R16
 );

177 
xRegi°îDump
.
ulR17_ªtu∫_addªss_‰om_ex˚±i⁄s
 = 
	`mfg¥
–
R17
 );

178 
xRegi°îDump
.
ulR20
 = 
	`mfg¥
–
R20
 );

179 
xRegi°îDump
.
ulR21
 = 
	`mfg¥
–
R21
 );

180 
xRegi°îDump
.
ulR22
 = 
	`mfg¥
–
R22
 );

181 
xRegi°îDump
.
ulR23
 = 
	`mfg¥
–
R23
 );

182 
xRegi°îDump
.
ulR24
 = 
	`mfg¥
–
R24
 );

183 
xRegi°îDump
.
ulR25
 = 
	`mfg¥
–
R25
 );

184 
xRegi°îDump
.
ulR26
 = 
	`mfg¥
–
R26
 );

185 
xRegi°îDump
.
ulR27
 = 
	`mfg¥
–
R27
 );

186 
xRegi°îDump
.
ulR28
 = 
	`mfg¥
–
R28
 );

187 
xRegi°îDump
.
ulR29
 = 
	`mfg¥
–
R29
 );

188 
xRegi°îDump
.
ulR30
 = 
	`mfg¥
–
R30
 );

189 
xRegi°îDump
.
ulR31
 = 
	`mfg¥
–
R31
 );

190 
xRegi°îDump
.
ulR1_SP
 = ( ( Ë
pulSèckPoöãrOnFun˘i⁄E¡ry
 ) + 
p‹ãxASM_HANDLER_STACK_FRAME_SIZE
;

191 
xRegi°îDump
.
ulEAR
 = 
	`m„¨
();

192 
xRegi°îDump
.
ulESR
 = 
	`m„§
();

193 
xRegi°îDump
.
ulEDR
 = 
	`m„dr
();

198 
xRegi°îDump
.
ulPC
 = xRegi°îDump.
ulR17_ªtu∫_addªss_‰om_ex˚±i⁄s
 - 
p‹ãxINSTRUCTION_SIZE
;

200 #i‡
XPAR_MICROBLAZE_0_USE_FPU
 == 1

202 
xRegi°îDump
.
ulFSR
 = 
	`mff§
();

206 
xRegi°îDump
.
ulFSR
 = 0UL;

213  ( Ë
pvEx˚±i⁄ID
 )

215 
XEXC_ID_FSL
 :

216 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( signed * const ) "XEXC_ID_FSL";

219 
XEXC_ID_UNALIGNED_ACCESS
 :

220 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( signed * const ) "XEXC_ID_UNALIGNED_ACCESS";

223 
XEXC_ID_ILLEGAL_OPCODE
 :

224 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( signed * const ) "XEXC_ID_ILLEGAL_OPCODE";

227 
XEXC_ID_M_AXI_I_EXCEPTION
 :

228 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( signed * const ) "XEXC_ID_M_AXI_I_EXCEPTION or XEXC_ID_IPLB_EXCEPTION";

231 
XEXC_ID_M_AXI_D_EXCEPTION
 :

232 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( signed * const ) "XEXC_ID_M_AXI_D_EXCEPTION or XEXC_ID_DPLB_EXCEPTION";

235 
XEXC_ID_DIV_BY_ZERO
 :

236 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( signed * const ) "XEXC_ID_DIV_BY_ZERO";

239 
XEXC_ID_STACK_VIOLATION
 :

240 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( signed * const ) "XEXC_ID_STACK_VIOLATION or XEXC_ID_MMU";

243 #i‡
XPAR_MICROBLAZE_0_USE_FPU
 == 1

245 
XEXC_ID_FPU
 :

246 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( signed * const ) "XEXC_ID_FPU see ulFSR value";

257 
	`vAµliˇti⁄Ex˚±i⁄Regi°îDump
–&
xRegi°îDump
 );

262 
	`p‹tNOP
();

264 
	}
}

267 
	$vP‹tEx˚±i⁄sIn°ÆlH™dÀrs
( )

269 
ulH™dÀrsAÃódyIn°ÆÀd
 = 
pdFALSE
;

271 if–
ulH™dÀrsAÃódyIn°ÆÀd
 =
pdFALSE
 )

273 
ulH™dÀrsAÃódyIn°ÆÀd
 = 
pdTRUE
;

275 #i‡
XPAR_MICROBLAZE_0_UNALIGNED_EXCEPTIONS
 == 1

276 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_UNALIGNED_ACCESS
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_UNALIGNED_ACCESS );

279 #i‡
XPAR_MICROBLAZE_0_ILL_OPCODE_EXCEPTION
 == 1

280 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_ILLEGAL_OPCODE
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_ILLEGAL_OPCODE );

283 #i‡
XPAR_MICROBLAZE_0_M_AXI_I_BUS_EXCEPTION
 == 1

284 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_M_AXI_I_EXCEPTION
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_M_AXI_I_EXCEPTION );

287 #i‡
XPAR_MICROBLAZE_0_M_AXI_D_BUS_EXCEPTION
 == 1

288 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_M_AXI_D_EXCEPTION
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_M_AXI_D_EXCEPTION );

291 #i‡
XPAR_MICROBLAZE_0_IPLB_BUS_EXCEPTION
 == 1

292 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_IPLB_EXCEPTION
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_IPLB_EXCEPTION );

295 #i‡
XPAR_MICROBLAZE_0_DPLB_BUS_EXCEPTION
 == 1

296 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_DPLB_EXCEPTION
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_DPLB_EXCEPTION );

299 #i‡
XPAR_MICROBLAZE_0_DIV_ZERO_EXCEPTION
 == 1

300 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_DIV_BY_ZERO
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_DIV_BY_ZERO );

303 #i‡
XPAR_MICROBLAZE_0_FPU_EXCEPTION
 == 1

304 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_FPU
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_FPU );

307 #i‡
XPAR_MICROBLAZE_0_FSL_EXCEPTION
 == 1

308 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_FSL
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_FSL );

311 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MicroBlazeV8/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


75 
	~<mb_öãrÁ˚.h
>

76 
	~<x∑ømëîs.h
>

89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 

	)

95 
	#p‹tBASE_TYPE
 

	)

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

101 
	tp‹tLONG
 
	tp‹tTickTy≥
;

102 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

107 
mi¸obœze_dißbÀ_öãºu±s
( );

108 
mi¸obœze_íabÀ_öãºu±s
( );

109 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`mi¸obœze_dißbÀ_öãºu±s
()

	)

110 
	#p‹tENABLE_INTERRUPTS
(Ë
	`mi¸obœze_íabÀ_öãºu±s
()

	)

115 
vP‹tE¡îCrôiˇl
( );

116 
vP‹tExôCrôiˇl
( );

117 
	#p‹tENTER_CRITICAL
() { \

118 vﬁ©ûê
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

119 
	`mi¸obœze_dißbÀ_öãºu±s
(); \

120 
uxCrôiˇlNe°ög
++; \

121 }

	)

123 
	#p‹tEXIT_CRITICAL
() { \

124 vﬁ©ûê
p‹tBASE_TYPE
 
uxCrôiˇlNe°ög
; \

127 
uxCrôiˇlNe°ög
--; \

128 if–
uxCrôiˇlNe°ög
 == 0 ) \

132 
	`p‹tENABLE_INTERRUPTS
(); \

134 }

	)

139 
vP‹tYõld
( );

140 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

148 vﬁ©ûê
ulTaskSwôchReque°ed
;

149 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) 
ulTaskSwôchReque°ed
 = 1

	)

153 
	#p‹tBYTE_ALIGNMENT
 4

	)

154 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

155 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

156 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

160 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

161 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

167 
	sPORT_REGISTER_DUMP


171 
	gulR1_SP
;

172 
	gulR2_smÆl_d©a_¨ó
;

173 
	gulR3
;

174 
	gulR4
;

175 
	gulR5
;

176 
	gulR6
;

177 
	gulR7
;

178 
	gulR8
;

179 
	gulR9
;

180 
	gulR10
;

181 
	gulR11
;

182 
	gulR12
;

183 
	gulR13_ªad_wrôe_smÆl_d©a_¨ó
;

184 
	gulR14_ªtu∫_addªss_‰om_öãºu±
;

185 
	gulR15_ªtu∫_addªss_‰om_subroutöe
;

186 
	gulR16_ªtu∫_addªss_‰om_å≠
;

187 
	gulR17_ªtu∫_addªss_‰om_ex˚±i⁄s
;

188 
	gulR18
;

189 
	gulR19
;

190 
	gulR20
;

191 
	gulR21
;

192 
	gulR22
;

193 
	gulR23
;

194 
	gulR24
;

195 
	gulR25
;

196 
	gulR26
;

197 
	gulR27
;

198 
	gulR28
;

199 
	gulR29
;

200 
	gulR30
;

201 
	gulR31
;

202 
	gulPC
;

203 
	gulESR
;

204 
	gulMSR
;

205 
	gulEAR
;

206 
	gulFSR
;

207 
	gulEDR
;

212 sig√d *
	gpcEx˚±i⁄Cau£
;

217 sig√d *
	gpcCuºítTaskName
;

221 * 
	gxCuºítTaskH™dÀ
;

223 } 
	txP‹tRegi°îDump
;

261 
p‹tBASE_TYPE
 
xP‹tIn°ÆlI¡îru±H™dÀr
–
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 );

282 
vP‹tE«bÀI¡îru±
–
ucI¡îru±ID
 );

302 
vP‹tDißbÀI¡îru±
–
ucI¡îru±ID
 );

314 
vAµliˇti⁄SëupTimîI¡îru±
( );

327 
vAµliˇti⁄CÀ¨TimîI¡îru±
( );

350 
vP‹tEx˚±i⁄sIn°ÆlH™dÀrs
( );

366 
vAµliˇti⁄Ex˚±i⁄Regi°îDump
–
xP‹tRegi°îDump
 *
xRegi°îDump
 );

369 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/NiosII/port.c

72 
	~<°rög.h
>

73 
	~<î∫o.h
>

76 
	~"sys/Æt_úq.h
"

77 
	~"Æãø_avÆ⁄_timî_ªgs.h
"

78 
	~"¥iv/Æt_úq_èbÀ.h
"

81 
	~"FªeRTOS.h
"

82 
	~"èsk.h
"

85 
	#p‹tINITIAL_ESTATUS
 ( 
p‹tSTACK_TYPE
 ) 0x01

	)

92 
¥vSëupTimîI¡îru±
( );

97 
vP‹tSysTickH™dÀr
–* 
c⁄ãxt
, 
Æt_u32
 
id
 );

101 
	$¥vRódGp
–*
ulVÆue
 )

103 
	`asm
( "stw gp, (r4) " );

104 
	}
};

110 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

112 
p‹tSTACK_TYPE
 *
pxFømePoöãr
 = 
pxT›OfSèck
 - 1;

113 
p‹tSTACK_TYPE
 
xGlobÆPoöãr
;

115 
	`¥vRódGp
–&
xGlobÆPoöãr
 );

118 *
pxT›OfSèck
 = 0xdeadbeef;

119 
pxT›OfSèck
--;

121 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxFømePoöãr
;

122 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = 
xGlobÆPoöãr
;

127 
pxT›OfSèck
 -= 9;

129 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

130 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = 
p‹tINITIAL_ESTATUS
;

135 
pxT›OfSèck
 -= 12;

137 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

140 
pxT›OfSèck
 -= 5;

142  
pxT›OfSèck
;

143 
	}
}

149 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

153 
	`¥vSëupTimîI¡îru±
();

156 
asm
 volatile ( " moviaÑ2,Ñestore_sp_from_pxCurrentTCB \n"

161 
	}
}

164 
	$vP‹tEndScheduÀr
( )

168 
	}
}

175 
	$¥vSëupTimîI¡îru±
( )

178 i‡–-
EINVAL
 =
	`Æt_úq_ªgi°î
–
SYS_CLK_IRQ
, 0x0, 
vP‹tSysTickH™dÀr
 ) )

181 
	`asm
( "break" );

186 
	`IOWR_ALTERA_AVALON_TIMER_CONTROL
–
SYS_CLK_BASE
, 
ALTERA_AVALON_TIMER_CONTROL_STOP_MSK
 );

187 
	`IOWR_ALTERA_AVALON_TIMER_PERIODL
–
SYS_CLK_BASE
, ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) & 0xFFFF );

188 
	`IOWR_ALTERA_AVALON_TIMER_PERIODH
–
SYS_CLK_BASE
, ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) >> 16 );

189 
	`IOWR_ALTERA_AVALON_TIMER_CONTROL
–
SYS_CLK_BASE
, 
ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
 | 
ALTERA_AVALON_TIMER_CONTROL_START_MSK
 | 
ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
 );

193 
	`IOWR_ALTERA_AVALON_TIMER_STATUS
–
SYS_CLK_BASE
, ~
ALTERA_AVALON_TIMER_STATUS_TO_MSK
 );

194 
	}
}

197 
	$vP‹tSysTickH™dÀr
–* 
c⁄ãxt
, 
Æt_u32
 
id
 )

200 
	`vTaskIn¸emítTick
();

203 #i‡
c⁄figUSE_PREEMPTION
 == 1

204 
	`vTaskSwôchC⁄ãxt
();

208 
	`IOWR_ALTERA_AVALON_TIMER_STATUS
–
SYS_CLK_BASE
, ~
ALTERA_AVALON_TIMER_STATUS_TO_MSK
 );

209 
	}
}

218 
Æt_úq_ªgi°î
–
Æt_u32
 
id
, * 
c⁄ãxt
, (*
h™dÀr
)(*,ált_u32) )

220 
rc
 = -
EINVAL
;

221 
Æt_úq_c⁄ãxt
 
°©us
;

223 i‡(
id
 < 
ALT_NIRQ
)

231 
°©us
 = 
	`Æt_úq_dißbÀ_Æl
 ();

233 
Æt_úq
[
id
].
h™dÀr
 = handler;

234 
Æt_úq
[
id
].
c⁄ãxt
 = context;

236 
rc
 = (
h™dÀr
Ë? 
	`Æt_úq_íabÀ
 (
id
): 
	`Æt_úq_dißbÀ
 (id);

241  
rc
;

242 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/NiosII/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


74 
	~"sys/Æt_úq.h
"

87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

93 
	#p‹tBASE_TYPE
 

	)

95 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

96 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

97 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

99 
	tp‹tLONG
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

105 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

106 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

107 
	#p‹tBYTE_ALIGNMENT
 4

	)

108 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

109 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

112 
vTaskSwôchC⁄ãxt
( );

113 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"å≠" );

	)

114 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vTaskSwôchC⁄ãxt
()

	)

118 
__asm__
( "\n\t.globl save_context" );

122 
vTaskE¡îCrôiˇl
( );

123 
vTaskExôCrôiˇl
( );

125 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`Æt_úq_dißbÀ_Æl
()

	)

126 
	#p‹tENABLE_INTERRUPTS
(Ë
	`Æt_úq_íabÀ_Æl
–0x01 );

	)

127 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

128 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

132 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

133 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

135 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC405_Xilinx/FPU_Macros.h

69 
	#åa˚TASK_SWITCHED_OUT
() \

70 if–
pxCuºítTCB
->
pxTaskTag
 !
NULL
 ) \

72 
	`vP‹tSaveFPURegi°îs
( * ); \

73 
	`vP‹tSaveFPURegi°îs
––* ) ( 
pxCuºítTCB
->
pxTaskTag
 ) ); \

74 }

	)

78 
	#åa˚TASK_SWITCHED_IN
() \

79 if–
pxCuºítTCB
->
pxTaskTag
 !
NULL
 ) \

81 
	`vP‹tRe°‹eFPURegi°îs
( * ); \

82 
	`vP‹tRe°‹eFPURegi°îs
––* ) ( 
pxCuºítTCB
->
pxTaskTag
 ) ); \

83 }

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC405_Xilinx/port.c

73 
	~"FªeRTOS.h
"

74 
	~"èsk.h
"

77 
	~"xtime_l.h
"

78 
	~"xötc.h
"

79 
	~"xötc_i.h
"

84 
	#p‹tCRITICAL_INTERRUPT_ENABLE
 ( 1UL << 17UL )

	)

85 
	#p‹tEXTERNAL_INTERRUPT_ENABLE
 ( 1UL << 15UL )

	)

86 
	#p‹tMACHINE_CHECK_ENABLE
 ( 1UL << 12UL )

	)

88 #i‡
c⁄figUSE_FPU
 == 1

89 
	#p‹tAPU_PRESENT
 ( 1UL << 25UL )

	)

90 
	#p‹tFCM_FPU_PRESENT
 ( 1UL << 13UL )

	)

92 
	#p‹tAPU_PRESENT
 ( 0UL )

	)

93 
	#p‹tFCM_FPU_PRESENT
 ( 0UL )

	)

96 
	#p‹tINITIAL_MSR
 ( 
p‹tCRITICAL_INTERRUPT_ENABLE
 | 
p‹tEXTERNAL_INTERRUPT_ENABLE
 | 
p‹tMACHINE_CHECK_ENABLE
 | 
p‹tAPU_PRESENT
 | 
p‹tFCM_FPU_PRESENT
 )

	)

99 c⁄° 
_SDA_BASE_
;

100 c⁄° 
_SDA2_BASE_
;

107 
¥vSëupTimîI¡îru±
( );

112 
vP‹tTickISR
( );

117 
vP‹tYõld
( );

123 
vP‹tSèπFú°Task
( );

128 
XI¡c
 
	gxI¡îru±C⁄åﬁÀr
;

138 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

141 *
pxT›OfSèck
 = 0xDEADBEEF;

142 
pxT›OfSèck
--;

145 
pxT›OfSèck
 -= 20;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) &
_SDA_BASE_
;

149 
pxT›OfSèck
 -= 10;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

153 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) &
_SDA2_BASE_
;

157 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = 0x10000001UL;;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = 0x00000000UL;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = 0x00000000UL;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = 0x00000000UL;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = 0x00000000UL;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
vP‹tEndScheduÀr
;

172 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

174 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = 
p‹tINITIAL_MSR
;

176 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
vP‹tEndScheduÀr
;

178 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = 0x00000000UL;

181  
pxT›OfSèck
;

182 
	}
}

185 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

187 
	`¥vSëupTimîI¡îru±
();

188 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_SYSTEM_CALL
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tYõld
, ( * ) 0 );

189 
	`vP‹tSèπFú°Task
();

192  
pdFALSE
;

193 
	}
}

196 
	$vP‹tEndScheduÀr
( )

200 
	}
}

206 
	$¥vSëupTimîI¡îru±
( )

208 c⁄° 
ulI¡îvÆ
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL );

210 
	`XTime_PITCÀ¨I¡îru±
();

211 
	`XTime_FITCÀ¨I¡îru±
();

212 
	`XTime_WDTCÀ¨I¡îru±
();

213 
	`XTime_WDTDißbÀI¡îru±
();

214 
	`XTime_FITDißbÀI¡îru±
();

216 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_PIT_INT
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tTickISR
, ( * ) 0 );

218 
	`XTime_PITE«bÀAutoRñﬂd
();

219 
	`XTime_PITSëI¡îvÆ
–
ulI¡îvÆ
 );

220 
	`XTime_PITE«bÀI¡îru±
();

221 
	}
}

224 
	$vP‹tISRH™dÀr
–*
pvNuŒDoNŸU£
 )

226 
ulI¡îru±Sètus
, 
ulI¡îru±Mask
 = 1UL;

227 
p‹tBASE_TYPE
 
xI¡îru±Numbî
;

228 
XI¡c_C⁄fig
 *
pxI¡îru±C⁄åﬁÀr
;

229 
XI¡c_Ve˘‹TabÀE¡ry
 *
pxTabÀ
;

232 –Ë
pvNuŒDoNŸU£
;

236 
pxI¡îru±C⁄åﬁÀr
 = &
XI¡c_C⁄figTabÀ
[ 
XPAR_XPS_INTC_0_DEVICE_ID
 ];

239 
ulI¡îru±Sètus
 = 
	`XI¡c_mGëI¡rSètus
–
pxI¡îru±C⁄åﬁÀr
->
Ba£Addªss
 );

241  
xI¡îru±Numbî
 = 0; xI¡îru±Numbî < 
XPAR_INTC_MAX_NUM_INTR_INPUTS
; xInterruptNumber++ )

243 if–
ulI¡îru±Sètus
 & 0x01UL )

246 
	`XI¡c_mAckI¡r
–
pxI¡îru±C⁄åﬁÀr
->
Ba£Addªss
, 
ulI¡îru±Mask
 );

249 
pxTabÀ
 = &–
pxI¡îru±C⁄åﬁÀr
->
H™dÀrTabÀ
[ 
xI¡îru±Numbî
 ] );

250 
pxTabÀ
->
	`H™dÀr
–pxTabÀ->
CÆlBackRef
 );

254 
ulI¡îru±Mask
 <<= 0x01UL;

255 
ulI¡îru±Sètus
 >>= 0x01UL;

258 if–
ulI¡îru±Sètus
 == 0UL )

263 
	}
}

266 
	$vP‹tSëupI¡îru±C⁄åﬁÀr
( )

268 
	`vP‹tISRWøµî
( );

273 
	`XExc_mDißbÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

274 
	`XExc_Inô
();

279 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_NON_CRITICAL_INT
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tISRWøµî
, 
NULL
 );

280 
	`XI¡c_Inôülize
–&
xI¡îru±C⁄åﬁÀr
, 
XPAR_XPS_INTC_0_DEVICE_ID
 );

281 
	`XI¡c_Sèπ
–&
xI¡îru±C⁄åﬁÀr
, 
XIN_REAL_MODE
 );

282 
	}
}

285 
p‹tBASE_TYPE
 
	$xP‹tIn°ÆlI¡îru±H™dÀr
–
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 )

287 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFAIL
;

292 if–
XST_SUCCESS
 =
	`XI¡c_C⁄√˘
–&
xI¡îru±C⁄åﬁÀr
, 
ucI¡îru±ID
, 
pxH™dÀr
, 
pvCÆlBackRef
 ) )

294 
	`XI¡c_E«bÀ
–&
xI¡îru±C⁄åﬁÀr
, 
ucI¡îru±ID
 );

295 
xRëu∫
 = 
pdPASS
;

298  
xRëu∫
;

299 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC405_Xilinx/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 
	~"xex˚±i⁄_l.h
"

72 #ifde‡
__˝lu•lus


87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

93 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

95 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

96 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

97 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

99 
	tp‹tLONG
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

106 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

109 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`XExc_mDißbÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

	)

110 
	#p‹tENABLE_INTERRUPTS
(Ë
	`XExc_mE«bÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

	)

115 
vTaskE¡îCrôiˇl
( );

116 
vTaskExôCrôiˇl
( );

117 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

118 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

123 
vP‹tYõld
( );

124 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"SC \n\àNOP" )

	)

125 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

130 
	#p‹tBYTE_ALIGNMENT
 8

	)

131 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

132 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

133 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

136 
	#p‹tNO_FLOP_REGISTERS_TO_SAVE
 ( 32 + 1 )

	)

141 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

142 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

145 
vP‹tSëupI¡îru±C⁄åﬁÀr
( );

146 
p‹tBASE_TYPE
 
xP‹tIn°ÆlI¡îru±H™dÀr
–
p‹tCHAR
 
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 );

148 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC440_Xilinx/FPU_Macros.h

69 
	#åa˚TASK_SWITCHED_OUT
() \

70 if–
pxCuºítTCB
->
pxTaskTag
 !
NULL
 ) \

72 
	`vP‹tSaveFPURegi°îs
( * ); \

73 
	`vP‹tSaveFPURegi°îs
––* ) ( 
pxCuºítTCB
->
pxTaskTag
 ) ); \

74 }

	)

78 
	#åa˚TASK_SWITCHED_IN
() \

79 if–
pxCuºítTCB
->
pxTaskTag
 !
NULL
 ) \

81 
	`vP‹tRe°‹eFPURegi°îs
( * ); \

82 
	`vP‹tRe°‹eFPURegi°îs
––* ) ( 
pxCuºítTCB
->
pxTaskTag
 ) ); \

83 }

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC440_Xilinx/port.c

73 
	~"FªeRTOS.h
"

74 
	~"èsk.h
"

77 
	~"xtime_l.h
"

78 
	~"xötc.h
"

79 
	~"xötc_i.h
"

84 
	#p‹tCRITICAL_INTERRUPT_ENABLE
 ( 1UL << 17UL )

	)

85 
	#p‹tEXTERNAL_INTERRUPT_ENABLE
 ( 1UL << 15UL )

	)

86 
	#p‹tMACHINE_CHECK_ENABLE
 ( 1UL << 12UL )

	)

88 #i‡
c⁄figUSE_FPU
 == 1

89 
	#p‹tAPU_PRESENT
 ( 1UL << 25UL )

	)

90 
	#p‹tFCM_FPU_PRESENT
 ( 1UL << 13UL )

	)

92 
	#p‹tAPU_PRESENT
 ( 0UL )

	)

93 
	#p‹tFCM_FPU_PRESENT
 ( 0UL )

	)

96 
	#p‹tINITIAL_MSR
 ( 
p‹tCRITICAL_INTERRUPT_ENABLE
 | 
p‹tEXTERNAL_INTERRUPT_ENABLE
 | 
p‹tMACHINE_CHECK_ENABLE
 | 
p‹tAPU_PRESENT
 | 
p‹tFCM_FPU_PRESENT
 )

	)

99 c⁄° 
_SDA_BASE_
;

100 c⁄° 
_SDA2_BASE_
;

107 
¥vSëupTimîI¡îru±
( );

112 
vP‹tTickISR
( );

117 
vP‹tYõld
( );

123 
vP‹tSèπFú°Task
( );

128 
XI¡c
 
	gxI¡îru±C⁄åﬁÀr
;

138 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

141 *
pxT›OfSèck
 = 0xDEADBEEF;

142 
pxT›OfSèck
--;

145 
pxT›OfSèck
 -= 20;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) &
_SDA_BASE_
;

149 
pxT›OfSèck
 -= 10;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

153 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) &
_SDA2_BASE_
;

157 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = 0x10000001UL;;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = 0x00000000UL;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = 0x00000000UL;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = 0x00000000UL;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = 0x00000000UL;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
vP‹tEndScheduÀr
;

172 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

174 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = 
p‹tINITIAL_MSR
;

176 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
vP‹tEndScheduÀr
;

178 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = 0x00000000UL;

181  
pxT›OfSèck
;

182 
	}
}

185 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

187 
	`¥vSëupTimîI¡îru±
();

188 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_SYSTEM_CALL
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tYõld
, ( * ) 0 );

189 
	`vP‹tSèπFú°Task
();

192  
pdFALSE
;

193 
	}
}

196 
	$vP‹tEndScheduÀr
( )

200 
	}
}

206 
	$¥vSëupTimîI¡îru±
( )

208 c⁄° 
ulI¡îvÆ
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL );

210 
	`XTime_DECCÀ¨I¡îru±
();

211 
	`XTime_FITCÀ¨I¡îru±
();

212 
	`XTime_WDTCÀ¨I¡îru±
();

213 
	`XTime_WDTDißbÀI¡îru±
();

214 
	`XTime_FITDißbÀI¡îru±
();

216 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_DEC_INT
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tTickISR
, ( * ) 0 );

218 
	`XTime_DECE«bÀAutoRñﬂd
();

219 
	`XTime_DECSëI¡îvÆ
–
ulI¡îvÆ
 );

220 
	`XTime_DECE«bÀI¡îru±
();

221 
	}
}

224 
	$vP‹tISRH™dÀr
–*
pvNuŒDoNŸU£
 )

226 
ulI¡îru±Sètus
, 
ulI¡îru±Mask
 = 1UL;

227 
p‹tBASE_TYPE
 
xI¡îru±Numbî
;

228 
XI¡c_C⁄fig
 *
pxI¡îru±C⁄åﬁÀr
;

229 
XI¡c_Ve˘‹TabÀE¡ry
 *
pxTabÀ
;

232 –Ë
pvNuŒDoNŸU£
;

236 
pxI¡îru±C⁄åﬁÀr
 = &
XI¡c_C⁄figTabÀ
[ 
XPAR_XPS_INTC_0_DEVICE_ID
 ];

239 
ulI¡îru±Sètus
 = 
	`XI¡c_mGëI¡rSètus
–
pxI¡îru±C⁄åﬁÀr
->
Ba£Addªss
 );

241  
xI¡îru±Numbî
 = 0; xI¡îru±Numbî < 
XPAR_INTC_MAX_NUM_INTR_INPUTS
; xInterruptNumber++ )

243 if–
ulI¡îru±Sètus
 & 0x01UL )

246 
	`XI¡c_mAckI¡r
–
pxI¡îru±C⁄åﬁÀr
->
Ba£Addªss
, 
ulI¡îru±Mask
 );

249 
pxTabÀ
 = &–
pxI¡îru±C⁄åﬁÀr
->
H™dÀrTabÀ
[ 
xI¡îru±Numbî
 ] );

250 
pxTabÀ
->
	`H™dÀr
–pxTabÀ->
CÆlBackRef
 );

254 
ulI¡îru±Mask
 <<= 0x01UL;

255 
ulI¡îru±Sètus
 >>= 0x01UL;

258 if–
ulI¡îru±Sètus
 == 0UL )

263 
	}
}

266 
	$vP‹tSëupI¡îru±C⁄åﬁÀr
( )

268 
	`vP‹tISRWøµî
( );

273 
	`XExc_mDißbÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

274 
	`XExc_Inô
();

279 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_NON_CRITICAL_INT
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tISRWøµî
, 
NULL
 );

280 
	`XI¡c_Inôülize
–&
xI¡îru±C⁄åﬁÀr
, 
XPAR_XPS_INTC_0_DEVICE_ID
 );

281 
	`XI¡c_Sèπ
–&
xI¡îru±C⁄åﬁÀr
, 
XIN_REAL_MODE
 );

282 
	}
}

285 
p‹tBASE_TYPE
 
	$xP‹tIn°ÆlI¡îru±H™dÀr
–
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 )

287 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFAIL
;

292 if–
XST_SUCCESS
 =
	`XI¡c_C⁄√˘
–&
xI¡îru±C⁄åﬁÀr
, 
ucI¡îru±ID
, 
pxH™dÀr
, 
pvCÆlBackRef
 ) )

294 
	`XI¡c_E«bÀ
–&
xI¡îru±C⁄åﬁÀr
, 
ucI¡îru±ID
 );

295 
xRëu∫
 = 
pdPASS
;

298  
xRëu∫
;

299 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC440_Xilinx/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 
	~"xex˚±i⁄_l.h
"

72 #ifde‡
__˝lu•lus


87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

93 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

95 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

96 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

97 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

99 
	tp‹tLONG
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

106 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

109 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`XExc_mDißbÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

	)

110 
	#p‹tENABLE_INTERRUPTS
(Ë
	`XExc_mE«bÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

	)

115 
vTaskE¡îCrôiˇl
( );

116 
vTaskExôCrôiˇl
( );

117 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

118 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

123 
vP‹tYõld
( );

124 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"SC \n\àNOP" )

	)

125 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

130 
	#p‹tBYTE_ALIGNMENT
 8

	)

131 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

132 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

133 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

136 
	#p‹tNO_FLOP_REGISTERS_TO_SAVE
 ( 32 + 1 )

	)

141 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

142 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

145 
vP‹tSëupI¡îru±C⁄åﬁÀr
( );

146 
p‹tBASE_TYPE
 
xP‹tIn°ÆlI¡îru±H™dÀr
–
p‹tCHAR
 
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 );

148 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/RX600/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	~"°rög.h
"

79 
	~"iodeföe.h
"

85 
	#p‹tINITIAL_PSW
 ( ( 
p‹tSTACK_TYPE
 ) 0x00030000 )

	)

86 
	#p‹tINITIAL_FPSW
 ( ( 
p‹tSTACK_TYPE
 ) 0x00000100 )

	)

93 
	#p‹tDISABLE_INTERRUPTS_FROM_KERNEL_ISR
(Ë
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
Ë)

	)

94 
	#p‹tENABLE_INTERRUPTS_FROM_KERNEL_ISR
(Ë
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(
c⁄figKERNEL_INTERRUPT_PRIORITY
Ë)

	)

102 
	$¥vSèπFú°Task
–Ë
	`__©åibuã__
((
«ked
));

109 
	$vSo·w¨eI¡îru±ISR
–Ë
	`__©åibuã__
((
«ked
));

114 
	$vTickISR
–Ë
	`__©åibuã__
((
öãºu±
));

118 *
pxCuºítTCB
;

125 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

129 *
pxT›OfSèck
 = 0x00;

130 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

132 
pxT›OfSèck
--;

133 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

138 #ifde‡
USE_FULL_REGISTER_INITIALISATION


140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = 0xffffffff;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = 0xeeeeeeee;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = 0xdddddddd;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = 0xcccccccc;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = 0xbbbbbbbb;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = 0xaaaaaaaa;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = 0x99999999;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = 0x88888888;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = 0x77777777;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = 0x66666666;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = 0x55555555;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = 0x44444444;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = 0x33333333;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = 0x22222222;

168 
pxT›OfSèck
--;

172 
pxT›OfSèck
 -= 15;

176 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

177 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = 
p‹tINITIAL_FPSW
;

179 
pxT›OfSèck
--;

180 *
pxT›OfSèck
 = 0x12345678;

181 
pxT›OfSèck
--;

182 *
pxT›OfSèck
 = 0x87654321;

184  
pxT›OfSèck
;

185 
	}
}

188 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

190 
	`vAµliˇti⁄SëupTimîI¡îru±
( );

193 if–
pxCuºítTCB
 !
NULL
 )

198 
	`vAµliˇti⁄SëupTimîI¡îru±
();

201 
	`_IEN
–
_ICU_SWINT
 ) = 1;

204 
	`_IR
–
_ICU_SWINT
 ) = 0;

207 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

210 
	`¥vSèπFú°Task
();

214  
pdFAIL
;

215 
	}
}

218 
	$vP‹tEndScheduÀr
( )

221 
	}
}

224 
	$¥vSèπFú°Task
( )

226 
__asm
 volatile

262 
	}
}

265 
	$vSo·w¨eI¡îru±ISR
( )

267 
__asm
 volatile

345 :: "i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
), "i"(
c⁄figKERNEL_INTERRUPT_PRIORITY
)

347 
	}
}

350 
	$vTickISR
( )

353 
__asm
 volatile( "SETPSW I" );

357 
	`p‹tDISABLE_INTERRUPTS_FROM_KERNEL_ISR
();

359 
	`vTaskIn¸emítTick
();

361 
	`p‹tENABLE_INTERRUPTS_FROM_KERNEL_ISR
();

364 #if–
c⁄figUSE_PREEMPTION
 == 1 )

365 
	`èskYIELD
();

367 
	}
}

370 
	$ulP‹tGëIPL
( )

372 
__asm
 volatile

381 
	}
}

384 
	$vP‹tSëIPL
–
ulNewIPL
 )

386 
__asm
 volatile

397 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/RX600/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

93 
	#p‹tBASE_TYPE
 

	)

95 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

96 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

97 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

99 
	tp‹tLONG
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

105 
	#p‹tBYTE_ALIGNMENT
 8

	)

106 
	#p‹tSTACK_GROWTH
 -1

	)

107 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

108 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûe–"NOP" )

	)

112 
	#p‹tITU_SWINTR
 ( ( * ) 0x000872E0 )

	)

113 
	#p‹tYIELD
(Ë*
p‹tITU_SWINTR
 = 0x01; 
	`p‹tNOP
();Ö‹tNOP();Ö‹tNOP();Ö‹tNOP();Ö‹tNOP()

	)

114 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

120 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûê–"MVTIPL #0" );

	)

121 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
Ë)

	)

124 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

127 
vTaskE¡îCrôiˇl
( );

128 
vTaskExôCrôiˇl
( );

129 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
();

	)

130 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
();

	)

133 
ulP‹tGëIPL
–Ë
__©åibuã__
((
«ked
));

134 
vP‹tSëIPL
–
ulNewIPL
 ) 
__©åibuã__
((
«ked
));

135 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tGëIPL
(); 
	`p‹tDISABLE_INTERRUPTS
()

	)

136 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`vP‹tSëIPL
–uxSavedI¡îru±Sètu†)

	)

141 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

142 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

144 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/STR75x/port.c

73 
	~"75x_tb.h
"

74 
	~"75x_eic.h
"

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

81 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

82 
	#p‹tTHUMB_MODE_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x20 )

	)

83 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

86 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

89 
	#p‹tPRESCALE
 20

	)

95 
¥vSëupTimîI¡îru±
( );

105 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

107 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

109 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

113 
pxT›OfSèck
--;

121 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

122 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaaaaaa;

125 
pxT›OfSèck
--;

126 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

127 
pxT›OfSèck
--;

128 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

129 
pxT›OfSèck
--;

130 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

131 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

151 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

156 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

161 #ifde‡
THUMB_INTERWORK


164 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

168 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

175  
pxT›OfSèck
;

176 
	}
}

179 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

181 
	`vP‹tISRSèπFú°Task
( );

185 
	`¥vSëupTimîI¡îru±
();

188 
	`vP‹tISRSèπFú°Task
();

192 
	}
}

195 
	$vP‹tEndScheduÀr
( )

199 
	}
}

202 
	$¥vSëupTimîI¡îru±
( )

204 
EIC_IRQInôTy≥Def
 
EIC_IRQInôSåu˘uª
;

205 
TB_InôTy≥Def
 
TB_InôSåu˘uª
;

208 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√lCmd
 = 
ENABLE
;

209 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√l
 = 
TB_IRQCh™√l
;

210 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√lPri‹ôy
 = 1;

211 
	`EIC_IRQInô
(&
EIC_IRQInôSåu˘uª
);

214 
TB_InôSåu˘uª
.
TB_Mode
 = 
TB_Mode_Timög
;

215 
TB_InôSåu˘uª
.
TB_Cou¡îMode
 = 
TB_Cou¡îMode_Down
;

216 
TB_InôSåu˘uª
.
TB_PªsˇÀr
 = 
p‹tPRESCALE
 - 1;

217 
TB_InôSåu˘uª
.
TB_AutoRñﬂd
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tPRESCALE
 ) / 
c⁄figTICK_RATE_HZ
 );

218 
	`TB_Inô
(&
TB_InôSåu˘uª
);

221 
	`TB_ITC⁄fig
(
TB_IT_Upd©e
, 
ENABLE
);

224 
	`TB_CÀ¨ITPídögBô
(
TB_IT_Upd©e
);

227 
	`TB_Cmd
(
ENABLE
);

228 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/STR75x/portISR.c

78 
	~"FªeRTOS.h
"

79 
	~"èsk.h
"

82 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

84 vﬁ©ûê
	gulCrôiˇlNe°ög
 = 9999UL;

92 
vP‹tISRSèπFú°Task
( );

95 
	$vP‹tISRSèπFú°Task
( )

99 
asm
 volatile ( \

125 
	}
}

128 
	$vP‹tTickISR
( )

132 
	`vTaskIn¸emítTick
();

134 #i‡
c⁄figUSE_PREEMPTION
 == 1

135 
	`vTaskSwôchC⁄ãxt
();

139 
	`TB_CÀ¨ITPídögBô
–
TB_IT_Upd©e
 );

140 
	}
}

150 #ifde‡
THUMB_INTERWORK


152 
	$vP‹tDißbÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

153 
	$vP‹tE«bÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

155 
	$vP‹tDißbÀI¡îru±sFromThumb
( )

157 
asm
 volatile (

164 
	}
}

166 
	$vP‹tE«bÀI¡îru±sFromThumb
( )

168 
asm
 volatile (

175 
	}
}

180 
	$vP‹tE¡îCrôiˇl
( )

183 
asm
 volatile (

193 
ulCrôiˇlNe°ög
++;

194 
	}
}

197 
	$vP‹tExôCrôiˇl
( )

199 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

202 
ulCrôiˇlNe°ög
--;

206 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

209 
asm
 volatile (

217 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/STR75x/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

107 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"SWI 0" )

	)

108 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

119 #ifde‡
THUMB_INTERWORK


121 
vP‹tDißbÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

122 
vP‹tE«bÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

124 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tDißbÀI¡îru±sFromThumb
()

	)

125 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tE«bÀI¡îru±sFromThumb
()

	)

129 
	#p‹tDISABLE_INTERRUPTS
() \

130 
asm
 volatile ( \

135 "LDMIA SP!, {R0} " )

	)

137 
	#p‹tENABLE_INTERRUPTS
() \

138 
asm
 volatile ( \

143 "LDMIA SP!, {R0} " )

	)

147 
vP‹tE¡îCrôiˇl
( );

148 
vP‹tExôCrôiˇl
( );

150 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

151 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

155 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

157 
	`vTaskSwôchC⁄ãxt
( ); \

159 if–
xSwôchRequúed
 ) \

161 
	`vTaskSwôchC⁄ãxt
(); \

163 }

	)

167 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

168 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

170 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/TriCore_1782/port.c

68 
	~<°dlib.h
>

69 
	~<°rög.h
>

72 
	~<tc1782.h
>

73 
	~<machöe/öåösics.h
>

74 
	~<machöe/cöt.h
>

75 
	~<machöe/wdtc⁄.h
>

78 
	~"FªeRTOS.h
"

79 
	~"èsk.h
"

80 
	~"li°.h
"

82 #i‡
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0

91 
	#p‹tSYSTEM_PROGRAM_STATUS_WORD
 ( 0x000008FFUL )

	)

92 
	#p‹tINITIAL_PRIVILEGED_PROGRAM_STATUS_WORD
 ( 0x000014FFUL )

	)

93 
	#p‹tINITIAL_UNPRIVILEGED_PROGRAM_STATUS_WORD
 ( 0x000010FFUL )

	)

94 
	#p‹tINITIAL_PCXI_UPPER_CONTEXT_WORD
 ( 0x00C00000UL )

	)

95 
	#p‹tINITIAL_SYSCON
 ( 0x00000000UL )

	)

98 
	#p‹tCSA_FCX_MASK
 ( 0x000FFFFFUL )

	)

101 
	#p‹tRESTORE_PSW_MASK
 ( ~–0x000000FFUL ) )

	)

102 
	#p‹tSYSCALL_TRAP
 ( 6 )

	)

105 
	#p‹tNUM_WORDS_IN_CSA
 ( 16 )

	)

108 
	#p‹tENABLE_CPU_INTERRUPT
 ( 1U << 12U )

	)

114 
	$¥vSy°emTickH™dÀr
–Ë
	`__©åibuã__
((
l⁄gˇŒ
));

115 
	`¥vSëupTimîI¡îru±
( );

120 
	`¥vTøpYõld
–
iTøpIdítifiˇti⁄
 );

125 
	`¥vI¡îru±Yõld
–
iTøpIdítifiˇti⁄
 );

130 vﬁ©ûê*
pxCuºítTCB
;

133 c⁄° 
ulCom∑ªM©chVÆue
 = ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

137 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 * 
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

139 *
pulUµîCSA
 = 
NULL
;

140 *
pulLowîCSA
 = 
NULL
;

161 
	`p‹tENTER_CRITICAL
();

164 
	`_dsync
();

167 
pulLowîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
	`_mf¸
–
$FCX
 ) );

168 if–
NULL
 !
pulLowîCSA
 )

171 
pulUµîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
pulLowîCSA
[ 0 ] );

175 if––
NULL
 !
pulLowîCSA
 ) && ( NULL !
pulUµîCSA
 ) )

178 
	`_dißbÀ
();

179 
	`_dsync
();

180 
	`_mt¸
–
$FCX
, 
pulUµîCSA
[ 0 ] );

181 
	`_isync
();

182 
	`_íabÀ
();

187 
	`_svlcx
();

190 
	`p‹tEXIT_CRITICAL
();

193 
	`mem£t
–
pulUµîCSA
, 0, 
p‹tNUM_WORDS_IN_CSA
 * ( ) );

196 
pulUµîCSA
[ 2 ] = ( )
pxT›OfSèck
;

197 
pulUµîCSA
[ 1 ] = 
p‹tSYSTEM_PROGRAM_STATUS_WORD
;

200 
	`mem£t
–
pulLowîCSA
, 0, 
p‹tNUM_WORDS_IN_CSA
 * ( ) );

203 
pulLowîCSA
[ 8 ] = ( Ë
pvP¨amëîs
;

204 
pulLowîCSA
[ 1 ] = ( Ë
pxCode
;

207 
pulLowîCSA
[ 0 ] = ( 
p‹tINITIAL_PCXI_UPPER_CONTEXT_WORD
 | ( Ë
	`p‹tADDRESS_TO_CSA
–
pulUµîCSA
 ) );

210 
pxT›OfSèck
 = (* ) 
	`p‹tADDRESS_TO_CSA
–
pulLowîCSA
 );

213 
	`_dsync
();

215  
pxT›OfSèck
;

216 
	}
}

219 
	$xP‹tSèπScheduÀr
( )

221 
	`vTøpIn°ÆlH™dÀrs
( );

222 
ulMFCR
 = 0UL;

223 *
pulUµîCSA
 = 
NULL
;

224 *
pulLowîCSA
 = 
NULL
;

230 
	`¥vSëupTimîI¡îru±
();

233 
	`vTøpIn°ÆlH™dÀrs
();

236 if–0 =
	`_ö°Æl_å≠_h™dÀr
–
p‹tSYSCALL_TRAP
, 
¥vTøpYõld
 ) )

239 
	`c⁄figASSERT
–––vﬁ©ûê* ) 
NULL
 ) );

244 
CPU_SRC0
.
ªg
 = ( 
p‹tENABLE_CPU_INTERRUPT
 ) | ( 
c⁄figKERNEL_YIELD_PRIORITY
 );

245 if–0 =
	`_ö°Æl_öt_h™dÀr
–
c⁄figKERNEL_YIELD_PRIORITY
, 
¥vI¡îru±Yõld
, 0 ) )

248 
	`c⁄figASSERT
–––vﬁ©ûê* ) 
NULL
 ) );

251 
	`_dißbÀ
();

254 
	`_mt¸
–
$SYSCON
, 
p‹tINITIAL_SYSCON
 );

255 
	`_isync
();

261 
ulMFCR
 = 
	`_mf¸
–
$PSW
 );

262 
ulMFCR
 &
p‹tRESTORE_PSW_MASK
;

263 
	`_dsync
();

264 
	`_mt¸
–
$PSW
, 
ulMFCR
 );

265 
	`_isync
();

268 
pulLowîCSA
 = 
	`p‹tCSA_TO_ADDRESS
––*
pxCuºítTCB
 ) );

269 
pulUµîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
pulLowîCSA
[0] );

270 
	`_dsync
();

271 
	`_mt¸
–
$PCXI
, *
pxCuºítTCB
 );

272 
	`_isync
();

273 
	`_n›
();

274 
	`_r¶cx
();

275 
	`_n›
();

278 
__asm
 volatile( "rfe" );

282 
	}
}

285 
	$¥vSëupTimîI¡îru±
( )

288 
	`u∆ock_wdtc⁄
();

291  0 !–
WDT_CON0
.
ªg
 & 0x1UL ) );

294 
STM_CLC
.
ªg
 = ( 1UL << 8 );

296 
	`lock_wdtc⁄
();

299 
STM_CMCON
.
ªg
 &= ~( 0x1fUL );

300 
STM_CMCON
.
ªg
 |–0x1fUL - 
	`__CLZ
–
c⁄figPERIPHERAL_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) );

303 
STM_CMP0
.
ªg
 = 
ulCom∑ªM©chVÆue
 + 
STM_TIM0
.reg;

305 if–0 !
	`_ö°Æl_öt_h™dÀr
–
c⁄figKERNEL_INTERRUPT_PRIORITY
, 
¥vSy°emTickH™dÀr
, 0 ) )

308 
STM_SRC0
.
ªg
 = ( 
c⁄figKERNEL_INTERRUPT_PRIORITY
 | 0x00005000UL );

311 
STM_ISRR
.
ªg
 &= ~( 0x03UL );

312 
STM_ISRR
.
ªg
 |= 0x1UL;

313 
STM_ISRR
.
ªg
 &= ~( 0x07UL );

314 
STM_ICR
.
ªg
 |= 0x1UL;

319 
	`c⁄figASSERT
–––vﬁ©ûê* ) 
NULL
 ) );

321 
	}
}

324 
	$¥vSy°emTickH™dÀr
–
iArg
 )

326 
ulSavedI¡îru±Mask
;

327 *
pxUµîCSA
 = 
NULL
;

328 
xUµîCSA
 = 0UL;

329 vﬁ©ûê*
pxCuºítTCB
;

332 –Ë
iArg
;

335 
STM_ISRR
.
ªg
 = 1UL;

354 
STM_CMP0
.
ªg
 +
ulCom∑ªM©chVÆue
;

357 
ulSavedI¡îru±Mask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

360 
	`vTaskIn¸emítTick
();

362 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulSavedI¡îru±Mask
 );

364 #i‡
c⁄figUSE_PREEMPTION
 == 1

385 
	`_dißbÀ
();

386 
	`_dsync
();

387 
xUµîCSA
 = 
	`_mf¸
–
$PCXI
 );

388 
pxUµîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
xUµîCSA
 );

389 *
pxCuºítTCB
 = 
pxUµîCSA
[ 0 ];

390 
	`vTaskSwôchC⁄ãxt
();

391 
pxUµîCSA
[ 0 ] = *
pxCuºítTCB
;

392 
CPU_SRC0
.
bôs
.
SETR
 = 0;

393 
	`_isync
();

396 
	}
}

417 
	$vP‹tRe˛aimCSA
–*
pxTCB
 )

419 
pxHódCSA
, 
pxTaûCSA
, 
pxFªeCSA
;

420 *
pulNextCSA
;

425 
pxHódCSA
 = ( *
pxTCB
 ) & 
p‹tCSA_FCX_MASK
;

430 
pxTaûCSA
 = 
pxHódCSA
;

434 
pulNextCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
pxTaûCSA
 );

441  0UL !–
pulNextCSA
[ 0 ] & 
p‹tCSA_FCX_MASK
 ) )

445 
pulNextCSA
[ 0 ] =ÖulNextCSA[ 0 ] & 
p‹tCSA_FCX_MASK
;

448 
pxTaûCSA
 = 
pulNextCSA
[ 0 ];

451 
pulNextCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
pxTaûCSA
 );

454 
	`_dißbÀ
();

457 
	`_dsync
();

458 
pxFªeCSA
 = 
	`_mf¸
–
$FCX
 );

461 
	`p‹tCSA_TO_ADDRESS
–
pxTaûCSA
 )[ 0 ] = 
pxFªeCSA
;

464 
	`_dsync
();

465 
	`_mt¸
–
$FCX
, 
pxHódCSA
 );

466 
	`_isync
();

468 
	`_íabÀ
();

469 
	}
}

472 
	$vP‹tEndScheduÀr
( )

475 
	}
}

478 
	$¥vTøpYõld
–
iTøpIdítifiˇti⁄
 )

480 *
pxUµîCSA
 = 
NULL
;

481 
xUµîCSA
 = 0UL;

482 vﬁ©ûê*
pxCuºítTCB
;

484  
iTøpIdítifiˇti⁄
 )

486 
p‹tSYSCALL_TASK_YIELD
:

506 
	`_dißbÀ
();

507 
	`_dsync
();

508 
xUµîCSA
 = 
	`_mf¸
–
$PCXI
 );

509 
pxUµîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
xUµîCSA
 );

510 *
pxCuºítTCB
 = 
pxUµîCSA
[ 0 ];

511 
	`vTaskSwôchC⁄ãxt
();

512 
pxUµîCSA
[ 0 ] = *
pxCuºítTCB
;

513 
CPU_SRC0
.
bôs
.
SETR
 = 0;

514 
	`_isync
();

519 
	`c⁄figASSERT
–––vﬁ©ûê* ) 
NULL
 ) );

522 
	}
}

525 
	$¥vI¡îru±Yõld
–
iId
 )

527 *
pxUµîCSA
 = 
NULL
;

528 
xUµîCSA
 = 0UL;

529 vﬁ©ûê*
pxCuºítTCB
;

532 –Ë
iId
;

553 
	`_dißbÀ
();

554 
	`_dsync
();

555 
xUµîCSA
 = 
	`_mf¸
–
$PCXI
 );

556 
pxUµîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
xUµîCSA
 );

557 *
pxCuºítTCB
 = 
pxUµîCSA
[ 0 ];

558 
	`vTaskSwôchC⁄ãxt
();

559 
pxUµîCSA
[ 0 ] = *
pxCuºítTCB
;

560 
CPU_SRC0
.
bôs
.
SETR
 = 0;

561 
	`_isync
();

562 
	}
}

565 
	$uxP‹tSëI¡îru±MaskFromISR
( )

567 
uxRëu∫
 = 0UL;

569 
	`_dißbÀ
();

570 
uxRëu∫
 = 
	`_mf¸
–
$ICR
 );

571 
	`_mt¸
–
$ICR
, ( ( 
uxRëu∫
 & ~
p‹tCCPN_MASK
 ) | 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) );

572 
	`_isync
();

573 
	`_íabÀ
();

576  ( 
uxRëu∫
 & 
p‹tCCPN_MASK
 );

577 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/TriCore_1782/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


75 
	~<tc1782.h
>

76 
	~<machöe/öåösics.h
>

89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 

	)

95 
	#p‹tBASE_TYPE
 

	)

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

101 
	tp‹tLONG
 
	tp‹tTickTy≥
;

102 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 4

	)

110 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûe–"Ç› " )

	)

111 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

112 
	#p‹tRESTORE_FIRST_TASK_PRIORITY_LEVEL
 1

	)

117 
	sMPU_SETTINGS
 { 
	gulNŸU£d
; } 
	txMPU_SETTINGS
;

120 
	#p‹tPRIVILEGE_BIT
 0x0UL

	)

122 
	#p‹tCCPN_MASK
 ( 0x000000FFUL )

	)

124 
vTaskE¡îCrôiˇl
( );

125 
vTaskExôCrôiˇl
( );

126 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

127 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

131 
	#p‹tCSA_TO_ADDRESS
–
pCSA
 ) ( ( * )––––pCSA ) & 0x000F0000 ) << 12 ) | ( ( (ÖCSA ) & 0x0000FFFF ) << 6 ) ) )

	)

132 
	#p‹tADDRESS_TO_CSA
–
pAddªss
 ) ( ( )––––()–pAddªs†ËË& 0xF0000000 ) >> 12 ) | ( ( ( )–pAddªs†Ë& 0x003FFFC0 ) >> 6 ) ) )

	)

135 
	#p‹tYIELD
(Ë
	`_sysˇŒ
–0 )

	)

137 
	#p‹tSYSCALL_TASK_YIELD
 0

	)

138 
	#p‹tSYSCALL_RAISE_PRIORITY
 1

	)

144 
	#p‹tDISABLE_INTERRUPTS
() { \

145 
ulICR
; \

146 
	`_dißbÀ
(); \

147 
ulICR
 = 
	`_mf¸
–
$ICR
 ); \

148 
ulICR
 &~
p‹tCCPN_MASK
; \

149 
ulICR
 |
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
; \

150 
	`_mt¸
–
$ICR
, 
ulICR
 ); \

151 
	`_isync
(); \

152 
	`_íabÀ
(); \

153 }

	)

156 
	#p‹tENABLE_INTERRUPTS
() { \

157 
ulICR
; \

158 
	`_dißbÀ
(); \

159 
ulICR
 = 
	`_mf¸
–
$ICR
 ); \

160 
ulICR
 &~
p‹tCCPN_MASK
; \

161 
	`_mt¸
–
$ICR
, 
ulICR
 ); \

162 
	`_isync
(); \

163 
	`_íabÀ
(); \

164 }

	)

167 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedMaskVÆue
 ) { \

168 
ulICR
; \

169 
	`_dißbÀ
(); \

170 
ulICR
 = 
	`_mf¸
–
$ICR
 ); \

171 
ulICR
 &~
p‹tCCPN_MASK
; \

172 
ulICR
 |
uxSavedMaskVÆue
; \

173 
	`_mt¸
–
$ICR
, 
ulICR
 ); \

174 
	`_isync
(); \

175 
	`_íabÀ
(); \

176 }

	)

180 
uxP‹tSëI¡îru±MaskFromISR
( );

181 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`uxP‹tSëI¡îru±MaskFromISR
()

	)

185 
	#p‹tALIGNMENT_ASSERT_pxCuºítTCB
 ( )

	)

188 
	#p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 ) if–xHighîPri‹ôyTaskWokí !
pdFALSE
 ) { 
CPU_SRC0
.
bôs
.
SETR
 = 1; 
	`_isync
(); }

	)

193 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

194 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

201 
vP‹tRe˛aimCSA
–*
pxTCB
 );

202 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) 
	`vP‹tRe˛aimCSA
––* ) (ÖxTCB ) )

	)

204 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/TriCore_1782/porttrap.c

68 
	~"FªeRTOS.h
"

71 
	~<tc1782.h
>

72 
	~<machöe/öåösics.h
>

73 
	~<machöe/cöt.h
>

79 vﬁ©ûê*
pxCuºítTCB
;

92 
	#p‹tMMU_TRAP
 0

	)

93 
	#p‹tIPT_TRAP
 1

	)

94 
	#p‹tIE_TRAP
 2

	)

95 
	#p‹tCM_TRAP
 3

	)

96 
	#p‹tSBP_TRAP
 4

	)

97 
	#p‹tASSERT_TRAP
 5

	)

98 
	#p‹tNMI_TRAP
 7

	)

101 
	#p‹tTIN_MMU_VIRTUAL_ADDRESS_FILL
 0

	)

102 
	#p‹tTIN_MMU_VIRTUAL_ADDRESS_PROTECTION
 1

	)

105 
	#p‹tTIN_IPT_PRIVILIGED_INSTRUCTION
 1

	)

106 
	#p‹tTIN_IPT_MEMORY_PROTECTION_READ
 2

	)

107 
	#p‹tTIN_IPT_MEMORY_PROTECTION_WRITE
 3

	)

108 
	#p‹tTIN_IPT_MEMORY_PROTECTION_EXECUTION
 4

	)

109 
	#p‹tTIN_IPT_MEMORY_PROTECTION_PERIPHERAL_ACCESS
 5

	)

110 
	#p‹tTIN_IPT_MEMORY_PROTECTION_NULL_ADDRESS
 6

	)

111 
	#p‹tTIN_IPT_MEMORY_PROTECTION_GLOBAL_REGISTER_WRITE_PROTECTION
 7

	)

114 
	#p‹tTIN_IE_ILLEGAL_OPCODE
 1

	)

115 
	#p‹tTIN_IE_UNIMPLEMENTED_OPCODE
 2

	)

116 
	#p‹tTIN_IE_INVALID_OPERAND
 3

	)

117 
	#p‹tTIN_IE_DATA_ADDRESS_ALIGNMENT
 4

	)

118 
	#p‹tTIN_IE_INVALID_LOCAL_MEMORY_ADDRESS
 5

	)

121 
	#p‹tTIN_CM_FREE_CONTEXT_LIST_DEPLETION
 1

	)

122 
	#p‹tTIN_CM_CALL_DEPTH_OVERFLOW
 2

	)

123 
	#p‹tTIN_CM_CALL_DEPTH_UNDEFLOW
 3

	)

124 
	#p‹tTIN_CM_FREE_CONTEXT_LIST_UNDERFLOW
 4

	)

125 
	#p‹tTIN_CM_CALL_STACK_UNDERFLOW
 5

	)

126 
	#p‹tTIN_CM_CONTEXT_TYPE
 6

	)

127 
	#p‹tTIN_CM_NESTING_ERROR
 7

	)

130 
	#p‹tTIN_SBP_PROGRAM_FETCH_SYNCHRONOUS_ERROR
 1

	)

131 
	#p‹tTIN_SBP_DATA_ACCESS_SYNCHRONOUS_ERROR
 2

	)

132 
	#p‹tTIN_SBP_DATA_ACCESS_ASYNCHRONOUS_ERROR
 3

	)

133 
	#p‹tTIN_SBP_COPROCESSOR_TRAP_ASYNCHRONOUS_ERROR
 4

	)

134 
	#p‹tTIN_SBP_PROGRAM_MEMORY_INTEGRITY_ERROR
 5

	)

135 
	#p‹tTIN_SBP_DATA_MEMORY_INTEGRITY_ERROR
 6

	)

138 
	#p‹tTIN_ASSERT_ARITHMETIC_OVERFLOW
 1

	)

139 
	#p‹tTIN_ASSERT_STICKY_ARITHMETIC_OVERFLOW
 2

	)

142 
	#p‹tTIN_NMI_NON_MASKABLE_INTERRUPT
 0

	)

145 
	$vMMUTøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

146 
	$vI¡î«lPrŸe˘i⁄Tøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

147 
	$vIn°ru˘i⁄Eº‹Tøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

148 
	$vC⁄ãxtM™agemítTøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

149 
	$vSy°emBusAndPîùhîÆsTøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

150 
	$vAs£πi⁄Tøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

151 
	$vN⁄MaskabÀI¡îru±Tøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

154 
	$vTøpIn°ÆlH™dÀrs
( )

156 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tMMU_TRAP
, 
vMMUTøp
 ) )

158 
	`_debug
();

161 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tIPT_TRAP
, 
vI¡î«lPrŸe˘i⁄Tøp
 ) )

163 
	`_debug
();

166 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tIE_TRAP
, 
vIn°ru˘i⁄Eº‹Tøp
 ) )

168 
	`_debug
();

171 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tCM_TRAP
, 
vC⁄ãxtM™agemítTøp
 ) )

173 
	`_debug
();

176 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tSBP_TRAP
, 
vSy°emBusAndPîùhîÆsTøp
 ) )

178 
	`_debug
();

181 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tASSERT_TRAP
, 
vAs£πi⁄Tøp
 ) )

183 
	`_debug
();

186 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tNMI_TRAP
, 
vN⁄MaskabÀI¡îru±Tøp
 ) )

188 
	`_debug
();

190 
	}
}

193 
	$vMMUTøp
–
iTøpIdítifiˇti⁄
 )

195  
iTøpIdítifiˇti⁄
 )

197 
p‹tTIN_MMU_VIRTUAL_ADDRESS_FILL
:

198 
p‹tTIN_MMU_VIRTUAL_ADDRESS_PROTECTION
:

200 
	`_debug
();

203 
	}
}

206 
	$vI¡î«lPrŸe˘i⁄Tøp
–
iTøpIdítifiˇti⁄
 )

209  
iTøpIdítifiˇti⁄
 )

211 
p‹tTIN_IPT_PRIVILIGED_INSTRUCTION
:

214 
p‹tTIN_IPT_MEMORY_PROTECTION_READ
:

217 
p‹tTIN_IPT_MEMORY_PROTECTION_WRITE
:

220 
p‹tTIN_IPT_MEMORY_PROTECTION_EXECUTION
:

223 
p‹tTIN_IPT_MEMORY_PROTECTION_PERIPHERAL_ACCESS
:

226 
p‹tTIN_IPT_MEMORY_PROTECTION_NULL_ADDRESS
:

229 
p‹tTIN_IPT_MEMORY_PROTECTION_GLOBAL_REGISTER_WRITE_PROTECTION
:

234 
pxCuºítTCB
[ 0 ] = 
	`_mf¸
–
$PCXI
 );

235 
	`_debug
();

238 
	}
}

241 
	$vIn°ru˘i⁄Eº‹Tøp
–
iTøpIdítifiˇti⁄
 )

244  
iTøpIdítifiˇti⁄
 )

246 
p‹tTIN_IE_ILLEGAL_OPCODE
:

247 
p‹tTIN_IE_UNIMPLEMENTED_OPCODE
:

248 
p‹tTIN_IE_INVALID_OPERAND
:

249 
p‹tTIN_IE_DATA_ADDRESS_ALIGNMENT
:

250 
p‹tTIN_IE_INVALID_LOCAL_MEMORY_ADDRESS
:

252 
	`_debug
();

255 
	}
}

258 
	$vC⁄ãxtM™agemítTøp
–
iTøpIdítifiˇti⁄
 )

261  
iTøpIdítifiˇti⁄
 )

263 
p‹tTIN_CM_FREE_CONTEXT_LIST_DEPLETION
:

264 
p‹tTIN_CM_CALL_DEPTH_OVERFLOW
:

265 
p‹tTIN_CM_CALL_DEPTH_UNDEFLOW
:

266 
p‹tTIN_CM_FREE_CONTEXT_LIST_UNDERFLOW
:

267 
p‹tTIN_CM_CALL_STACK_UNDERFLOW
:

268 
p‹tTIN_CM_CONTEXT_TYPE
:

269 
p‹tTIN_CM_NESTING_ERROR
:

271 
	`_debug
();

274 
	}
}

277 
	$vSy°emBusAndPîùhîÆsTøp
–
iTøpIdítifiˇti⁄
 )

280  
iTøpIdítifiˇti⁄
 )

282 
p‹tTIN_SBP_PROGRAM_FETCH_SYNCHRONOUS_ERROR
:

283 
p‹tTIN_SBP_DATA_ACCESS_SYNCHRONOUS_ERROR
:

284 
p‹tTIN_SBP_DATA_ACCESS_ASYNCHRONOUS_ERROR
:

285 
p‹tTIN_SBP_COPROCESSOR_TRAP_ASYNCHRONOUS_ERROR
:

286 
p‹tTIN_SBP_PROGRAM_MEMORY_INTEGRITY_ERROR
:

287 
p‹tTIN_SBP_DATA_MEMORY_INTEGRITY_ERROR
:

289 
	`_debug
();

292 
	}
}

295 
	$vAs£πi⁄Tøp
–
iTøpIdítifiˇti⁄
 )

298  
iTøpIdítifiˇti⁄
 )

300 
p‹tTIN_ASSERT_ARITHMETIC_OVERFLOW
:

301 
p‹tTIN_ASSERT_STICKY_ARITHMETIC_OVERFLOW
:

303 
	`_debug
();

306 
	}
}

309 
	$vN⁄MaskabÀI¡îru±Tøp
–
iTøpIdítifiˇti⁄
 )

312  
iTøpIdítifiˇti⁄
 )

314 
p‹tTIN_NMI_NON_MASKABLE_INTERRUPT
:

316 
	`_debug
();

319 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/78K0R/ISR_Support.h

54 
	~"FªeRTOSC⁄fig.h
"

56 ; 
V¨übÀs
 
u£d
 
by
 
	gscheduÀr


58 
EXTERN
 
pxCuºítTCB


59 
EXTERN
 
	gusCrôiˇlNe°ög


62 ; 
p‹tSAVE_CONTEXT
 
	gMACRO


63 ; 
Saves
 
the
 
c⁄ãxt
 
of
Åhê
gíîÆ
 
puΩo£
 
	gªgi°îs
, 
CS
 
™d
 
ES
 (
⁄ly
 
ö
 
Ár


64 ; 
mem‹y
 
mode
Ë
ªgi°îs
 
the
 
usCrôiˇlNe°ög
 
VÆue
 
™d
Åhê
Sèck
 
	gPoöãr


65 ; 
of
 
the
 
a˘ive
 
Task
 
⁄to
Åhê
èsk
 
	g°ack


67 
p‹tSAVE_CONTEXT
 
MACRO


69 
PUSH
 
	gAX
 ; 
Save
 
AX
 
Regi°î
 
to
 
	g°ack
.

70 
PUSH
 
	gHL


71 #i‡
c⁄figMEMORY_MODE
 == 1

72 
MOV
 
	gA
, 
	gCS
 ; 
Save
 
CS
 .

73 
XCH
 
	gA
, 
X


74 
MOV
 
	gA
, 
	gES
 ; 
Save
 
ES
 .

75 
PUSH
 
	gAX


77 
MOV
 
	gA
, 
	gCS
 ; 
Save
 
CS
 .

78 
PUSH
 
	gAX


80 
PUSH
 
	gDE
 ; 
Save
 
the
 
ªmaöög
 
gíîÆ
 
puΩo£
 
	gªgi°îs
.

81 
PUSH
 
BC


82 
MOVW
 
	gAX
, 
	gusCrôiˇlNe°ög
 ; 
Save
 
the
 
usCrôiˇlNe°ög
 
	gvÆue
.

83 
PUSH
 
AX


84 
MOVW
 
	gAX
, 
	gpxCuºítTCB
 ; 
Save
 
the
 
Sèck
 
	gpoöãr
.

85 
MOVW
 
	gHL
, 
AX


86 
MOVW
 
	gAX
, 
SP


87 
	gMOVW
 [
HL
], 
AX


88 
	gENDM


92 ; 
p‹tRESTORE_CONTEXT
 
	gMACRO


93 ; 
Re°‹es
 
the
 
èsk
 
Sèck
 
Poöãr
 
thí
 
u£
 
this
 
to
 
ª°‹e
 
	gusCrôiˇlNe°ög
,

94 ; 
gíîÆ
 
puΩo£
 
ªgi°îs
 
™d
 
the
 
CS
ánd 
ES
 (
⁄ly
 
ö
 
Ár
 
mem‹y
 
mode
)

95 ; 
of
 
the
 
£À˘ed
 
èsk
 
‰om
Åhêèsk 
	g°ack


97 
p‹tRESTORE_CONTEXT
 
MACRO


98 
MOVW
 
	gAX
, 
	gpxCuºítTCB
 ; 
Re°‹e
 
the
 
Sèck
 
	gpoöãr
.

99 
MOVW
 
	gHL
, 
AX


100 
MOVW
 
	gAX
, [
HL
]

101 
MOVW
 
	gSP
, 
AX


102 
POP
 
	gAX
 ; 
Re°‹e
 
usCrôiˇlNe°ög
 
	gvÆue
.

103 
MOVW
 
	gusCrôiˇlNe°ög
, 
AX


104 
POP
 
	gBC
 ; 
Re°‹e
 
the
 
√˚sßry
 
gíîÆ
 
puΩo£
 
	gªgi°îs
.

105 
POP
 
	gDE


106 #i‡
c⁄figMEMORY_MODE
 == 1

107 
POP
 
	gAX
 ; 
Re°‹e
 
the
 
ES
 .

108 
MOV
 
	gES
, 
A


109 
XCH
 
	gA
, 
	gX
 ; 
Re°‹e
 
the
 
CS
 .

110 
MOV
 
	gCS
, 
	gA


112 
POP
 
AX


113 
MOV
 
	gCS
, 
	gA
 ; 
Re°‹e
 
CS
 .

115 
POP
 
	gHL
 ; 
Re°‹e
 
gíîÆ
 
puΩo£
 HL.

116 
POP
 
	gAX
 ; 
Re°‹e
 AX.

117 
	gENDM


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/78K0R/port.c

68 
	~<°dlib.h
>

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

76 
	#p‹tINITIAL_CRITICAL_NESTING
 (–Ë10)

	)

89 
	#p‹tPSW
 (0xc6UL)

	)

93 
	ttskTCB
;

94 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

108 vﬁ©ûê
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

114 
¥vSëupTimîI¡îru±
( );

123 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

125 *
pulLoˇl
;

127 #i‡
c⁄figMEMORY_MODE
 == 1

131 
pxT›OfSèck
--;

134 
pulLoˇl
 = ( * ) 
pxT›OfSèck
;

135 *
pulLoˇl
 = ( Ë
pvP¨amëîs
;

136 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xcdcd;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xcdcd;

143 
pxT›OfSèck
--;

147 
pxT›OfSèck
--;

150 
pulLoˇl
 = ( * ) 
pxT›OfSèck
;

151 *
pulLoˇl
 = ( ( ( Ë
pxCode
 ) | ( 
p‹tPSW
 << 24UL ) );

152 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1111;

156 
pxT›OfSèck
--;

163 
pxT›OfSèck
--;

166 
pulLoˇl
 = ( * ) 
pxT›OfSèck
;

167 *
pulLoˇl
 = ( ( ( Ë
pxCode
 ) | ( 
p‹tPSW
 << 24UL ) );

168 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

172 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x2222;

178 
pxT›OfSèck
--;

181 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0F00;

182 
pxT›OfSèck
--;

185 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xDEDE;

186 
pxT›OfSèck
--;

187 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xBCBC;

188 
pxT›OfSèck
--;

192 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

196  
pxT›OfSèck
;

197 
	}
}

200 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

204 
	`¥vSëupTimîI¡îru±
();

207 
	`vP‹tSèπ
();

210  
pdTRUE
;

211 
	}
}

214 
	$vP‹tEndScheduÀr
( )

218 
	}
}

221 
	$¥vSëupTimîI¡îru±
( )

226 
TAU0EN
 = 1;

229 
TT0
 = 0xff;

233 
TMMK05
 = 1;

236 
TMIF05
 = 0;

239 
TMPR005
 = 0;

240 
TMPR105
 = 0;

243 
TMR05
 = 0x0000;

246 
TDR05
 = ( 
p‹tTickTy≥
 ) ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

249 
TOM0
 &= ~0x0020;

252 
TOL0
 &= ~0x0020;

255 
TOE0
 &= ~0x0020;

258 
TMMK05
 = 0;

261 
TS0
 |= 0x0020;

262 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/78K0R/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 

	)

92 
	#p‹tBASE_TYPE
 

	)

94 #i‡(
c⁄figUSE_16_BIT_TICKS
==1)

95 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
 ( "DI" )

	)

105 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
 ( "EI" )

	)

109 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSHORT
 ) 0 )

	)

111 
	#p‹tENTER_CRITICAL
() \

113 vﬁ©ûê
p‹tSHORT
 
usCrôiˇlNe°ög
; \

115 
	`p‹tDISABLE_INTERRUPTS
(); \

120 
usCrôiˇlNe°ög
++; \

121 }

	)

123 
	#p‹tEXIT_CRITICAL
() \

125 vﬁ©ûê
p‹tSHORT
 
usCrôiˇlNe°ög
; \

127 if–
usCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

130 
usCrôiˇlNe°ög
--; \

134 if–
usCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

136 
	`p‹tENABLE_INTERRUPTS
(); \

139 }

	)

143 
vP‹tSèπ
( );

144 
	#p‹tYIELD
(Ë
	`__asm
–"BRK" )

	)

145 
	#p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 ) if–xHighîPri‹ôyTaskWokí ) 
	`vTaskSwôchC⁄ãxt
()

	)

146 
	#p‹tNOP
(Ë
	`__asm
–"NOP" )

	)

150 
	#p‹tBYTE_ALIGNMENT
 2

	)

151 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

152 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

156 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

157 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

160 
__öãºu±
 
P0_i§
 ();

165 
	#OPT_BYTES_SIZE
 4

	)

166 
	#SECU_ID_SIZE
 10

	)

167 
	#WATCHDOG_DISABLED
 0x00

	)

168 
	#LVI_ENABLED
 0xFE

	)

169 
	#LVI_DISABLED
 0xFF

	)

170 
	#RESERVED_FF
 0xFF

	)

171 
	#OCD_DISABLED
 0x04

	)

172 
	#OCD_ENABLED
 0x81

	)

173 
	#OCD_ENABLED_ERASE
 0x80

	)

175 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM0/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê*Ë0xe000e010 )

	)

77 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê*Ë0xe000e014 )

	)

78 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê*Ë0xe000ed04 )

	)

79 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê*Ë0xe000ed20 )

	)

80 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

81 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

82 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

83 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

84 
	#p‹tMIN_INTERRUPT_PRIORITY
 ( 255UL )

	)

85 
	#p‹tNVIC_PENDSV_PRI
 ( 
p‹tMIN_INTERRUPT_PRIORITY
 << 16UL )

	)

86 
	#p‹tNVIC_SYSTICK_PRI
 ( 
p‹tMIN_INTERRUPT_PRIORITY
 << 24UL )

	)

89 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

94 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


95 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 0

	)

100 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

105 
¥vSëupTimîI¡îru±
( );

110 
xP‹tSysTickH™dÀr
( );

115 
vP‹tSèπFú°Task
( );

122 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

126 
pxT›OfSèck
--;

127 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

128 
pxT›OfSèck
--;

129 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

130 
pxT›OfSèck
 -= 6;

131 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

132 
pxT›OfSèck
 -= 8;

134  
pxT›OfSèck
;

135 
	}
}

141 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

144 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

145 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

149 
	`¥vSëupTimîI¡îru±
();

152 
uxCrôiˇlNe°ög
 = 0;

155 
	`vP‹tSèπFú°Task
();

159 
	}
}

162 
	$vP‹tEndScheduÀr
( )

166 
	}
}

169 
	$vP‹tYõldFromISR
( )

172 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

173 
	}
}

176 
	$vP‹tE¡îCrôiˇl
( )

178 
	`p‹tDISABLE_INTERRUPTS
();

179 
uxCrôiˇlNe°ög
++;

180 
	}
}

183 
	$vP‹tExôCrôiˇl
( )

185 
uxCrôiˇlNe°ög
--;

186 if–
uxCrôiˇlNe°ög
 == 0 )

188 
	`p‹tENABLE_INTERRUPTS
();

190 
	}
}

193 
	$xP‹tSysTickH™dÀr
( )

195 
ulDummy
;

198 #i‡
c⁄figUSE_PREEMPTION
 == 1

199 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

202 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

204 
	`vTaskIn¸emítTick
();

206 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

207 
	}
}

214 
	$¥vSëupTimîI¡îru±
( )

217 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

218 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

219 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM0/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
vP‹tYõldFromISR
( );

113 
	#p‹tYIELD
(Ë
	`vP‹tYõldFromISR
()

	)

115 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vP‹tYõldFromISR
()

	)

121 
vP‹tE¡îCrôiˇl
( );

122 
vP‹tExôCrôiˇl
( );

124 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûe–"˝sid i" )

	)

125 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûe–"˝sõ i" )

	)

126 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

127 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

128 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`p‹tDISABLE_INTERRUPTS
()

	)

129 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`p‹tENABLE_INTERRUPTS
();()
	)
x

134 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

135 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

137 
	#p‹tNOP
()

	)

139 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM3/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê*Ë0xe000e010 )

	)

77 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê*Ë0xe000e014 )

	)

78 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê*Ë0xe000ed04 )

	)

79 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê*Ë0xe000ed20 )

	)

80 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

81 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

82 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

83 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

84 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16 )

	)

85 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24 )

	)

88 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

93 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


94 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 0

	)

99 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

104 
¥vSëupTimîI¡îru±
( );

109 
xP‹tSysTickH™dÀr
( );

114 
vP‹tSèπFú°Task
( );

121 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

125 
pxT›OfSèck
--;

126 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

127 
pxT›OfSèck
--;

128 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

129 
pxT›OfSèck
--;

130 *
pxT›OfSèck
 = 0;

131 
pxT›OfSèck
 -= 5;

132 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

133 
pxT›OfSèck
 -= 8;

135  
pxT›OfSèck
;

136 
	}
}

142 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

145 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

146 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

150 
	`¥vSëupTimîI¡îru±
();

153 
uxCrôiˇlNe°ög
 = 0;

156 
	`vP‹tSèπFú°Task
();

160 
	}
}

163 
	$vP‹tEndScheduÀr
( )

167 
	}
}

170 
	$vP‹tYõldFromISR
( )

173 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

174 
	}
}

177 
	$vP‹tE¡îCrôiˇl
( )

179 
	`p‹tDISABLE_INTERRUPTS
();

180 
uxCrôiˇlNe°ög
++;

181 
	}
}

184 
	$vP‹tExôCrôiˇl
( )

186 
uxCrôiˇlNe°ög
--;

187 if–
uxCrôiˇlNe°ög
 == 0 )

189 
	`p‹tENABLE_INTERRUPTS
();

191 
	}
}

194 
	$xP‹tSysTickH™dÀr
( )

196 
ulDummy
;

199 #i‡
c⁄figUSE_PREEMPTION
 == 1

200 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

203 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

205 
	`vTaskIn¸emítTick
();

207 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

208 
	}
}

215 
	$¥vSëupTimîI¡îru±
( )

218 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

219 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

220 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM3/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
vP‹tYõldFromISR
( );

113 
	#p‹tYIELD
(Ë
	`vP‹tYõldFromISR
()

	)

115 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vP‹tYõldFromISR
()

	)

121 
vP‹tE¡îCrôiˇl
( );

122 
vP‹tExôCrôiˇl
( );

123 
vP‹tSëI¡îru±Mask
( );

124 
vP‹tCÀ¨I¡îru±Mask
( );

126 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tSëI¡îru±Mask
()

	)

127 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
()

	)

128 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

129 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

130 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`vP‹tSëI¡îru±Mask
()

	)

131 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
();()
	)
x

136 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

137 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

139 
	#p‹tNOP
()

	)

141 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM4F/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

75 #i‚de‡
__ARMVFP__


76 #îr‹ 
This
 
p‹t
 
ˇn
 
⁄ly
 
be
 
u£d
 
whí
 
the
 
¥oje˘
 
›ti⁄s
 
¨e
 
c⁄figuªd
 
to
 
íabÀ
 
h¨dw¨e
 
Êﬂtög
 
poöt
 
suµ‹t
.

80 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê* ) 0xe000e010 )

	)

81 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê* ) 0xe000e014 )

	)

82 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê* ) 0xe000ed04 )

	)

83 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê* ) 0xe000ed20 )

	)

84 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

85 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

86 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

87 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

88 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16 )

	)

89 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24 )

	)

92 
	#p‹tFPCCR
 ( ( vﬁ©ûê* ) 0xe000ef34 )

	)

93 
	#p‹tASPEN_AND_LSPEN_BITS
 ( 0x3UL << 30UL )

	)

96 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

97 
	#p‹tINITIAL_EXEC_RETURN
 ( 0xfffffffd )

	)

101 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

106 
¥vSëupTimîI¡îru±
( );

111 
xP‹tSysTickH™dÀr
( );

116 
vP‹tSèπFú°Task
( );

121 
vP‹tE«bÀVFP
( );

128 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

135 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = 0;

144 
pxT›OfSèck
 -= 5;

145 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = 
p‹tINITIAL_EXEC_RETURN
;

152 
pxT›OfSèck
 -= 8;

154  
pxT›OfSèck
;

155 
	}
}

161 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

164 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

165 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

169 
	`¥vSëupTimîI¡îru±
();

172 
uxCrôiˇlNe°ög
 = 0;

175 
	`vP‹tE«bÀVFP
();

178 *–
p‹tFPCCR
 ) |
p‹tASPEN_AND_LSPEN_BITS
;

181 
	`vP‹tSèπFú°Task
();

185 
	}
}

188 
	$vP‹tEndScheduÀr
( )

192 
	}
}

195 
	$vP‹tYõldFromISR
( )

198 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

199 
	}
}

202 
	$vP‹tE¡îCrôiˇl
( )

204 
	`p‹tDISABLE_INTERRUPTS
();

205 
uxCrôiˇlNe°ög
++;

206 
	}
}

209 
	$vP‹tExôCrôiˇl
( )

211 
uxCrôiˇlNe°ög
--;

212 if–
uxCrôiˇlNe°ög
 == 0 )

214 
	`p‹tENABLE_INTERRUPTS
();

216 
	}
}

219 
	$xP‹tSysTickH™dÀr
( )

221 
ulDummy
;

224 #i‡
c⁄figUSE_PREEMPTION
 == 1

225 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

228 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

230 
	`vTaskIn¸emítTick
();

232 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

233 
	}
}

240 
	$¥vSëupTimîI¡îru±
( )

243 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

244 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

245 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM4F/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
vP‹tYõldFromISR
( );

113 
	#p‹tYIELD
(Ë
	`vP‹tYõldFromISR
()

	)

115 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vP‹tYõldFromISR
()

	)

121 
vP‹tE¡îCrôiˇl
( );

122 
vP‹tExôCrôiˇl
( );

123 
vP‹tSëI¡îru±Mask
( );

124 
vP‹tCÀ¨I¡îru±Mask
( );

126 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tSëI¡îru±Mask
()

	)

127 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
()

	)

128 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

129 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

130 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`vP‹tSëI¡îru±Mask
()

	)

131 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
();()
	)
x

135 
	#p‹tALIGNMENT_ASSERT_pxCuºítTCB
 ( )

	)

140 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

141 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

143 
	#p‹tNOP
()

	)

145 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ATMega323/port.c

67 
	~<°dlib.h
>

69 
	~"FªeRTOS.h
"

70 
	~"èsk.h
"

77 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
p‹tSTACK_TYPE
 ) 0x80 )

	)

80 
	#p‹tCLEAR_COUNTER_ON_MATCH
 ( ( Ë0x08 )

	)

81 
	#p‹tPRESCALE_64
 ( ( Ë0x03 )

	)

82 
	#p‹tCLOCK_PRESCALER
 ( ( Ë64 )

	)

83 
	#p‹tCOMPARE_MATCH_A_INTERRUPT_ENABLE
 ( ( Ë0x10 )

	)

86 
	#p‹tBYTES_USED_BY_RETURN_ADDRESS
 ( 2 )

	)

91 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
p‹tBASE_TYPE
 ) 0 )

	)

92 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0x50;

98 
¥vSëupTimîI¡îru±
( );

104 
vP‹tYõldFromTick
( );

105 
vP‹tSèπ
( );

112 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

114 
usAddªss
;

115 
p‹tSTACK_TYPE
 *
pxT›OfH¨dw¨eSèck
;

120 *
pxT›OfSèck
 = 0x11;

121 
pxT›OfSèck
--;

122 *
pxT›OfSèck
 = 0x22;

123 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = 0x33;

125 
pxT›OfSèck
--;

129 
pxT›OfH¨dw¨eSèck
 = 
pxT›OfSèck
;

153 
usAddªss
 = ( Ë
pxCode
;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
usAddªss
 & ( ) 0x00ff );

155 
pxT›OfSèck
--;

157 
usAddªss
 >>= 8;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
usAddªss
 & ( ) 0x00ff );

159 
pxT›OfSèck
--;

165 
pxT›OfSèck
 -–
c⁄figCALL_STACK_SIZE
 - 2 );

173 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

174 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

176 
pxT›OfSèck
--;

180 
pxT›OfH¨dw¨eSèck
 -
p‹tBYTES_USED_BY_RETURN_ADDRESS
;

181 
usAddªss
 = ( Ë
pxT›OfH¨dw¨eSèck
;

184 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
usAddªss
 & ( ) 0x00ff );

185 
pxT›OfSèck
--;

188 
usAddªss
 >>= 8;

189 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
usAddªss
 & ( ) 0x00ff );

190 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01;

197 
pxT›OfSèck
--;

198 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02;

199 
pxT›OfSèck
--;

200 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03;

201 
pxT›OfSèck
--;

202 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04;

203 
pxT›OfSèck
--;

204 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05;

205 
pxT›OfSèck
--;

206 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06;

207 
pxT›OfSèck
--;

208 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07;

209 
pxT›OfSèck
--;

210 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08;

211 
pxT›OfSèck
--;

212 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09;

213 
pxT›OfSèck
--;

214 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10;

215 
pxT›OfSèck
--;

216 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11;

217 
pxT›OfSèck
--;

218 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12;

219 
pxT›OfSèck
--;

220 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x13;

221 
pxT›OfSèck
--;

222 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x14;

223 
pxT›OfSèck
--;

224 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x15;

225 
pxT›OfSèck
--;

228 
usAddªss
 = ( Ë
pvP¨amëîs
;

229 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
usAddªss
 & ( ) 0x00ff );

230 
pxT›OfSèck
--;

232 
usAddªss
 >>= 8;

233 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
usAddªss
 & ( ) 0x00ff );

234 
pxT›OfSèck
--;

236 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x18;

237 
pxT›OfSèck
--;

238 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x19;

239 
pxT›OfSèck
--;

240 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x20;

241 
pxT›OfSèck
--;

242 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x21;

243 
pxT›OfSèck
--;

244 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x22;

245 
pxT›OfSèck
--;

246 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x23;

247 
pxT›OfSèck
--;

248 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x24;

249 
pxT›OfSèck
--;

250 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x25;

251 
pxT›OfSèck
--;

252 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x26;

253 
pxT›OfSèck
--;

254 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x27;

255 
pxT›OfSèck
--;

260 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x30;

261 
pxT›OfSèck
--;

262 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x031;

264 
pxT›OfSèck
--;

265 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

269  
pxT›OfSèck
;

270 
	}
}

273 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

276 
	`¥vSëupTimîI¡îru±
();

281 
	`vP‹tSèπ
();

285  
pdTRUE
;

286 
	}
}

289 
	$vP‹tEndScheduÀr
( )

293 
	}
}

299 
	$¥vSëupTimîI¡îru±
( )

301 
ulCom∑ªM©ch
;

302 
ucHighByã
, 
ucLowByã
;

307 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

310 
ulCom∑ªM©ch
 /
p‹tCLOCK_PRESCALER
;

313 
ulCom∑ªM©ch
 -= ( ) 1;

317 
ucLowByã
 = ( Ë–
ulCom∑ªM©ch
 & ( ) 0xff );

318 
ulCom∑ªM©ch
 >>= 8;

319 
ucHighByã
 = ( Ë–
ulCom∑ªM©ch
 & ( ) 0xff );

320 
OCR1AH
 = 
ucHighByã
;

321 
OCR1AL
 = 
ucLowByã
;

324 
ucLowByã
 = 
p‹tCLEAR_COUNTER_ON_MATCH
 | 
p‹tPRESCALE_64
;

325 
TCCR1B
 = 
ucLowByã
;

329 
TIMSK
 |
p‹tCOMPARE_MATCH_A_INTERRUPT_ENABLE
;

330 
	}
}

333 #i‡
c⁄figUSE_PREEMPTION
 == 1

340 
__èsk
 
	$SIG_OUTPUT_COMPARE1A
( )

342 
	`vP‹tYõldFromTick
();

343 
	`asm
( "reti" );

344 
	}
}

356 
__öãºu±
 
	$SIG_OUTPUT_COMPARE1A
( )

358 
	`vTaskIn¸emítTick
();

359 
	}
}

363 
	$vP‹tE¡îCrôiˇl
( )

365 
	`p‹tDISABLE_INTERRUPTS
();

366 
uxCrôiˇlNe°ög
++;

367 
	}
}

370 
	$vP‹tExôCrôiˇl
( )

372 
uxCrôiˇlNe°ög
--;

373 if–
uxCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

375 
	`p‹tENABLE_INTERRUPTS
();

377 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ATMega323/portmacro.h

74 #i‚de‡
PORTMACRO_H


75 
	#PORTMACRO_H


	)

77 #ifde‡
__˝lu•lus


92 
	#p‹tCHAR
 

	)

93 
	#p‹tFLOAT
 

	)

94 
	#p‹tDOUBLE
 

	)

95 
	#p‹tLONG
 

	)

96 
	#p‹tSHORT
 

	)

97 
	#p‹tSTACK_TYPE
 
p‹tCHAR


	)

98 
	#p‹tBASE_TYPE
 
p‹tCHAR


	)

100 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

101 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

102 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

104 
	tp‹tLONG
 
	tp‹tTickTy≥
;

105 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

111 
vP‹tE¡îCrôiˇl
( );

112 
vP‹tExôCrôiˇl
( );

113 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

114 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

116 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`asm
–"˛i" )

	)

117 
	#p‹tENABLE_INTERRUPTS
(Ë
	`asm
–"£i" )

	)

121 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

122 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

123 
	#p‹tBYTE_ALIGNMENT
 1

	)

124 
	#p‹tNOP
(Ë
	`asm
–"n›" )

	)

128 
vP‹tYõld
( );

129 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

131 #ifde‡
IAR_MEGA_AVR


132 
	#outb
–
PORT
, 
VALUE
 ) PORT = 
	)
VALUE

137 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

138 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

140 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AVR32_UC3/port.c

83 
	~"FªeRTOS.h
"

84 
	~"èsk.h
"

87 
	~<avr32/io.h
>

88 
	~<öåösics.h
>

89 
	~"gpio.h
"

91 #i‡
c⁄figDBG


92 
	~"ußπ.h
"

95 #if–
c⁄figTICK_USE_TC
==1 )

96 
	~"tc.h
"

101 
	#p‹tINITIAL_SR
 ( ( 
p‹tSTACK_TYPE
 ) 0x00400000 )

	)

102 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 0 )

	)

105 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

106 vﬁ©ûê
	gulCrôiˇlNe°ög
 = 9999UL;

108 #if–
c⁄figTICK_USE_TC
==0 )

109 
¥vScheduÀNextTick
( );

111 
¥vCÀ¨TcI¡
( );

115 
¥vSëupTimîI¡îru±
( );

123 
	$__low_Àvñ_öô
()

125 #i‡
c⁄figHEAP_INIT


126 #¥agm®
£gmít
 = "HEAP"

127 
p‹tBASE_TYPE
 *
pxMem
;

131 
	`ENABLE_ALL_EXCEPTIONS
();

134 
	`INTC_öô_öãºu±s
();

136 #i‡
c⁄figHEAP_INIT


139  
pxMem
 = 
	`__£gmít_begö
–"HEAP" );ÖxMem < ( 
p‹tBASE_TYPE
 * ) 
	`__£gmít_íd
( "HEAP" ); )

141 *
pxMem
++ = 0xA5A5A5A5;

147 #i‡
c⁄figDBG


149 c⁄° 
gpio_m≠_t
 
DBG_USART_GPIO_MAP
 =

151 { 
c⁄figDBG_USART_RX_PIN
, 
c⁄figDBG_USART_RX_FUNCTION
 },

152 { 
c⁄figDBG_USART_TX_PIN
, 
c⁄figDBG_USART_TX_FUNCTION
 }

155 c⁄° 
ußπ_›ti⁄s_t
 
DBG_USART_OPTIONS
 =

157 .
baudøã
 = 
c⁄figDBG_USART_BAUDRATE
,

158 .
ch¨Àngth
 = 8,

159 .
∑rôyty≥
 = 
USART_NO_PARITY
,

160 .
°›bôs
 = 
USART_1_STOPBIT
,

161 .
ch™√lmode
 = 
USART_NORMAL_CHMODE


165 vﬁ©ûê
avr32_ußπ_t
 *vﬁ©ûê
°dio_ußπ_ba£
;

166 
°dio_ußπ_ba£
 = 
c⁄figDBG_USART
;

167 
	`gpio_íabÀ_moduÀ
–
DBG_USART_GPIO_MAP
,

168 –
DBG_USART_GPIO_MAP
 ) / ( DBG_USART_GPIO_MAP[0] ) );

169 
	`ußπ_öô_rs232
(
c⁄figDBG_USART
, &
DBG_USART_OPTIONS
, 
c⁄figCPU_CLOCK_HZ
);

175 
	}
}

179 *
	$pvP‹tRóŒoc
–*
pv
, 
size_t
 
xW™ãdSize
 )

181 *
pvRëu∫
;

183 
	`vTaskSu•ídAŒ
();

185 
pvRëu∫
 = 
	`ªÆloc
–
pv
, 
xW™ãdSize
 );

187 
	`xTaskResumeAŒ
();

189  
pvRëu∫
;

190 
	}
}

197 #¥agm®
shadow_ªgi°îs
 = 
fuŒ


198 
	$vTick
( )

201 
	`p‹tSAVE_CONTEXT_OS_INT
();

203 #if–
c⁄figTICK_USE_TC
==1 )

205 
	`¥vCÀ¨TcI¡
();

209 
	`¥vScheduÀNextTick
();

214 
	`p‹tENTER_CRITICAL
();

215 
	`vTaskIn¸emítTick
();

216 
	`p‹tEXIT_CRITICAL
();

219 
	`p‹tRESTORE_CONTEXT_OS_INT
();

220 
	}
}

223 #¥agm®
shadow_ªgi°îs
 = 
fuŒ


224 
	$SCALLYõld
( )

227 
	`p‹tSAVE_CONTEXT_SCALL
();

228 
	`vTaskSwôchC⁄ãxt
();

229 
	`p‹tRESTORE_CONTEXT_SCALL
();

230 
	}
}

237 #¥agm®
›timize
 = 
no_ölöe


238 
	$vP‹tE¡îCrôiˇl
( )

241 
	`p‹tDISABLE_INTERRUPTS
();

246 
ulCrôiˇlNe°ög
++;

247 
	}
}

250 #¥agm®
›timize
 = 
no_ölöe


251 
	$vP‹tExôCrôiˇl
( )

253 if(
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
)

255 
ulCrôiˇlNe°ög
--;

256 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

259 
	`p‹tENABLE_INTERRUPTS
();

262 
	}
}

271 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

277 
pxT›OfSèck
--;

278 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

279 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

280 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x0A0A0A0A;

281 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x0B0B0B0B;

282 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

283 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0xDEADBEEF;

284 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

285 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SR
;

286 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0xFF0000FF;

287 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

288 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

289 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

290 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

291 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

292 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

293 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

294 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_NESTING
;

296  
pxT›OfSèck
;

297 
	}
}

300 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

304 
	`¥vSëupTimîI¡îru±
();

307 
	`p‹tRESTORE_CONTEXT
();

311 
	}
}

314 
	$vP‹tEndScheduÀr
( )

318 
	}
}

323 #if–
c⁄figTICK_USE_TC
==0 )

324 
	$¥vScheduÀFú°Tick
()

326 
lCy˛es
;

328 
lCy˛es
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COUNT
);

329 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

332 if(0 =
lCy˛es
)

334 
lCy˛es
++;

336 
	`Së_sy°em_ªgi°î
(
AVR32_COMPARE
, 
lCy˛es
);

337 
	}
}

339 #¥agm®
›timize
 = 
no_ölöe


340 
	$¥vScheduÀNextTick
()

342 
lCy˛es
, 
lCou¡
;

344 
lCy˛es
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COMPARE
);

345 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

348 if(0 =
lCy˛es
)

350 
lCy˛es
++;

352 
lCou¡
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COUNT
);

353 if–
lCy˛es
 < 
lCou¡
 )

355 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

357 
	`Së_sy°em_ªgi°î
(
AVR32_COMPARE
, 
lCy˛es
);

358 
	}
}

360 #¥agm®
›timize
 = 
no_ölöe


361 
	$¥vCÀ¨TcI¡
()

363 
AVR32_TC
.
ch™√l
[
c⁄figTICK_TC_CHANNEL
].
§
;

364 
	}
}

369 
	$¥vSëupTimîI¡îru±
()

371 #if–
c⁄figTICK_USE_TC
==1 )

373 vﬁ©ûê
avr32_tc_t
 *
tc
 = &
AVR32_TC
;

376 
tc_wavef‹m_›t_t
 
wavef‹m_›t
 =

378 .
ch™√l
 = 
c⁄figTICK_TC_CHANNEL
,

380 .
bswåg
 = 
TC_EVT_EFFECT_NOOP
,

381 .
bìvt
 = 
TC_EVT_EFFECT_NOOP
,

382 .
b˝c
 = 
TC_EVT_EFFECT_NOOP
,

383 .
b˝b
 = 
TC_EVT_EFFECT_NOOP
,

385 .
aswåg
 = 
TC_EVT_EFFECT_NOOP
,

386 .
´evt
 = 
TC_EVT_EFFECT_NOOP
,

387 .
a˝c
 = 
TC_EVT_EFFECT_NOOP
,

388 .
a˝a
 = 
TC_EVT_EFFECT_NOOP
,

390 .
wav£l
 = 
TC_WAVEFORM_SEL_UP_MODE_RC_TRIGGER
,

391 .
íërg
 = 
FALSE
,

392 .
ìvt
 = 0,

393 .
ìvãdg
 = 
TC_SEL_NO_EDGE
,

394 .
˝cdis
 = 
FALSE
,

395 .
˝c°›
 = 
FALSE
,

397 .
bur°
 = 
FALSE
,

398 .
˛ki
 = 
FALSE
,

399 .
tc˛ks
 = 
TC_CLOCK_SOURCE_TC2


402 
tc_öãºu±_t
 
tc_öãºu±
 =

404 .
ërgs
=0,

405 .
ldrbs
=0,

406 .
ldøs
=0,

407 .
˝cs
 =1,

408 .
˝bs
 =0,

409 .
˝as
 =0,

410 .
lovrs
=0,

411 .
covfs
=0,

417 
	`p‹tDISABLE_INTERRUPTS
();

422 #if–
c⁄figTICK_USE_TC
==1 )

424 
	`INTC_ªgi°î_öãºu±
((
__öt_h™dÀr
)&
vTick
, 
c⁄figTICK_TC_IRQ
, 
INT0
);

427 
	`tc_öô_wavef‹m
(
tc
, &
wavef‹m_›t
);

432 
	`tc_wrôe_rc
–
tc
, 
c⁄figTICK_TC_CHANNEL
, ( 
c⁄figPBA_CLOCK_HZ
 / 4Ë/ 
c⁄figTICK_RATE_HZ
 );

434 
	`tc_c⁄figuª_öãºu±s
–
tc
, 
c⁄figTICK_TC_CHANNEL
, &
tc_öãºu±
 );

437 
	`tc_°¨t
(
tc
, 
c⁄figTICK_TC_CHANNEL
);

441 
	`INTC_ªgi°î_öãºu±
((
__öt_h™dÀr
)&
vTick
, 
AVR32_CORE_COMPARE_IRQ
, 
INT0
);

442 
	`¥vScheduÀFú°Tick
();

445 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AVR32_UC3/portmacro.h

83 #i‚de‡
PORTMACRO_H


84 
	#PORTMACRO_H


	)

95 
	~<avr32/io.h
>

96 
	~"ötc.h
"

97 
	~"compûî.h
"

99 #ifde‡
__˝lu•lus


105 
	#p‹tCHAR
 

	)

106 
	#p‹tFLOAT
 

	)

107 
	#p‹tDOUBLE
 

	)

108 
	#p‹tLONG
 

	)

109 
	#p‹tSHORT
 

	)

110 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

111 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

113 
	#TASK_DELAY_MS
(
x
Ë–(xË/
p‹tTICK_RATE_MS
 )

	)

114 
	#TASK_DELAY_S
(
x
Ë–(x)*1000 /
p‹tTICK_RATE_MS
 )

	)

115 
	#TASK_DELAY_MIN
(
x
Ë–(x)*60*1000/
p‹tTICK_RATE_MS
 )

	)

117 
	#c⁄figTICK_TC_IRQ
 
	`ATPASTE2
(
AVR32_TC_IRQ
, 
c⁄figTICK_TC_CHANNEL
)

	)

119 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

120 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

121 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

123 
	tp‹tLONG
 
	tp‹tTickTy≥
;

124 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

129 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

130 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

131 
	#p‹tBYTE_ALIGNMENT
 4

	)

132 
	#p‹tNOP
(Ë{
__asm__
 
	`__vﬁ©ûe__
 ("n›");}

	)

139 
	#DISABLE_ALL_EXCEPTIONS
(Ë
	`DißbÀ_globÆ_ex˚±i⁄
()

	)

140 
	#ENABLE_ALL_EXCEPTIONS
(Ë
	`E«bÀ_globÆ_ex˚±i⁄
()

	)

142 
	#DISABLE_ALL_INTERRUPTS
(Ë
	`DißbÀ_globÆ_öãºu±
()

	)

143 
	#ENABLE_ALL_INTERRUPTS
(Ë
	`E«bÀ_globÆ_öãºu±
()

	)

145 
	#DISABLE_INT_LEVEL
(
öt_Àv
Ë
	`DißbÀ_öãºu±_Àvñ
(öt_Àv)

	)

146 
	#ENABLE_INT_LEVEL
(
öt_Àv
Ë
	`E«bÀ_öãºu±_Àvñ
(öt_Àv)

	)

162 #i‡
c⁄figDBG


163 
	#p‹tDBG_TRACE
(...) \

165 
	`Âuts
(
__FILE__
 ":" 
	`ASTRINGZ
(
__LINE__
Ë": ", 
°dout
); \

166 
	`¥ötf
(
__VA_ARGS__
); \

167 
	`Âuts
("\r\n", 
°dout
); \

168 }

	)

170 
	#p‹tDBG_TRACE
(...)

	)

175 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`DISABLE_ALL_INTERRUPTS
()

	)

176 
	#p‹tENABLE_INTERRUPTS
(Ë
	`ENABLE_ALL_INTERRUPTS
()

	)

179 
vP‹tE¡îCrôiˇl
( );

180 
vP‹tExôCrôiˇl
( );

182 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

183 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

187 *
pvP‹tRóŒoc
–*
pv
, 
size_t
 
xSize
 );

196 
	#p‹tRESTORE_CONTEXT
() \

198 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

199 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

201 
__asm__
 
	`__vﬁ©ûe__
 ( \

203 "movÑ8, LWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

204 "‹hÑ8, HWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

210 "movÑ8, LWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

211 "‹hÑ8, HWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

223 "mt§ "
	`ASTRINGZ
(
AVR32_SR
)",Ñ0 \n\t"\

231 
ulCrôiˇlNe°ög
; \

232 
pxCuºítTCB
; \

233 }

	)

268 #i‡
c⁄figUSE_PREEMPTION
 == 0

273 
	#p‹tSAVE_CONTEXT_OS_INT
() \

276 
__asm__
 
	`__vﬁ©ûe__
 ("stm --sp,Ñ0-r7"); \

280 }

	)

285 
	#p‹tRESTORE_CONTEXT_OS_INT
() \

287 
__asm__
 
	`__vﬁ©ûe__
 ( \

295 }

	)

302 
	#p‹tSAVE_CONTEXT_OS_INT
() \

304 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

305 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

310 
__asm__
 
	`__vﬁ©ûe__
 ( \

315 "movÑ8, LWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

316 "‹hÑ8, HWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

331 "brhò LABEL_INT_SKIP_SAVE_CONTEXT_"
	`ASTRINGZ
(
__LINE__
)" \n\t"\

338 "movÑ8, LWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

339 "‹hÑ8, HWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

343 "LABEL_INT_SKIP_SAVE_CONTEXT_"
	`ASTRINGZ
(
__LINE__
)":" \

345 }

	)

350 
	#p‹tRESTORE_CONTEXT_OS_INT
() \

352 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

353 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

362 
__asm__
 
	`__vﬁ©ûe__
 ( \

366 "brhò LABEL_INT_SKIP_RESTORE_CONTEXT_"
	`ASTRINGZ
(
__LINE__
) \

372 
	`p‹tENTER_CRITICAL
(); \

373 
	`vTaskSwôchC⁄ãxt
(); \

374 
	`p‹tEXIT_CRITICAL
(); \

378 
__asm__
 
	`__vﬁ©ûe__
 ( \

380 "movÑ8, LWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

381 "‹hÑ8, HWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

385 "LABEL_INT_SKIP_RESTORE_CONTEXT_"
	`ASTRINGZ
(
__LINE__
)": \n\t"\

389 "movÑ8, LWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

390 "‹hÑ8, HWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

401 
ulCrôiˇlNe°ög
; \

402 
pxCuºítTCB
; \

403 }

	)

414 
	#p‹tSAVE_CONTEXT_SCALL
() \

416 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

417 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

429 
__asm__
 
	`__vﬁ©ûe__
 ( \

453 "movÑ8, LWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

454 "‹hÑ8, HWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

463 
	`p‹tENTER_CRITICAL
(); \

466 
__asm__
 
	`__vﬁ©ûe__
 ( \

467 "movÑ8, LWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

468 "‹hÑ8, HWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

472 }

	)

477 
	#p‹tRESTORE_CONTEXT_SCALL
() \

479 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

480 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

485 
__asm__
 
	`__vﬁ©ûe__
 ( \

486 "movÑ8, LWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

487 "‹hÑ8, HWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

493 
	`p‹tEXIT_CRITICAL
(); \

495 
__asm__
 
	`__vﬁ©ûe__
 ( \

498 "movÑ8, LWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

499 "‹hÑ8, HWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

524 
ulCrôiˇlNe°ög
; \

525 
pxCuºítTCB
; \

526 }

	)

533 #i‡
c⁄figUSE_PREEMPTION
 == 0

539 
	#p‹tENTER_SWITCHING_ISR
() \

542 
__asm__
 
	`__vﬁ©ûe__
 ("stm --sp,Ñ0-r7"); \

546 }

	)

551 
	#p‹tEXIT_SWITCHING_ISR
() \

553 
__asm__
 
	`__vﬁ©ûe__
 ( \

561 }

	)

569 
	#p‹tENTER_SWITCHING_ISR
() \

571 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

572 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

577 
__asm__
 
	`__vﬁ©ûe__
 ( \

582 "movÑ8, LWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

583 "‹hÑ8, HWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

598 "brhò LABEL_ISR_SKIP_SAVE_CONTEXT_"
	`ASTRINGZ
(
__LINE__
)" \n\t"\

601 "movÑ8, LWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

602 "‹hÑ8, HWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

606 "LABEL_ISR_SKIP_SAVE_CONTEXT_"
	`ASTRINGZ
(
__LINE__
)":" \

608 }

	)

614 
	#p‹tEXIT_SWITCHING_ISR
() \

616 vﬁ©ûê
p‹tLONG
 
ulCrôiˇlNe°ög
; \

617 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

619 
__asm__
 
	`__vﬁ©ûe__
 ( \

628 "brhò LABEL_ISR_SKIP_RESTORE_CONTEXT_"
	`ASTRINGZ
(
__LINE__
)" \n\t"\

634 "b∫ê LABEL_ISR_RESTORE_CONTEXT_"
	`ASTRINGZ
(
__LINE__
)":C" \

638 
	`p‹tENTER_CRITICAL
(); \

639 
	`vTaskSwôchC⁄ãxt
(); \

640 
	`p‹tEXIT_CRITICAL
(); \

642 
__asm__
 
	`__vﬁ©ûe__
 ( \

643 "LABEL_ISR_RESTORE_CONTEXT_"
	`ASTRINGZ
(
__LINE__
)": \n\t"\

650 "movÑ8, LWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

651 "‹hÑ8, HWRD("
	`ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

655 "LABEL_ISR_SKIP_RESTORE_CONTEXT_"
	`ASTRINGZ
(
__LINE__
)": \n\t"\

659 "movÑ8, LWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

660 "‹hÑ8, HWRD("
	`ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

671 
ulCrôiˇlNe°ög
; \

672 
pxCuºítTCB
; \

673 }

	)

678 
	#p‹tYIELD
(Ë{
__asm__
 
	`__vﬁ©ûe__
 ("sˇŒ");}

	)

681 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

682 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

684 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AVR32_UC3/read.c

44 
	~<yfuns.h
>

45 
	~<avr32/io.h
>

46 
	~"ußπ.h
"

49 
	g_STD_BEGIN


52 #¥agm®
moduÀ_«me
 = "?__read"

55 vﬁ©ûê
avr32_ußπ_t
 *vﬁ©ûê
°dio_ußπ_ba£
;

68 
size_t
 
	$__ªad
(
h™dÀ
, *
buf„r
, 
size_t
 
size
)

70 
nCh¨s
 = 0;

74 i‡(
h™dÀ
 !
_LLIO_STDIN
)

76  
_LLIO_ERROR
;

79 ; 
size
 > 0; --size)

81 
c
 = 
	`ußπ_gëch¨
(
°dio_ußπ_ba£
);

82 i‡(
c
 < 0)

85 *
buf„r
++ = 
c
;

86 ++
nCh¨s
;

89  
nCh¨s
;

90 
	}
}

93 
	g_STD_END


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AVR32_UC3/write.c

44 
	~<yfuns.h
>

45 
	~<avr32/io.h
>

46 
	~"ußπ.h
"

49 
	g_STD_BEGIN


52 #¥agm®
moduÀ_«me
 = "?__write"

56 
__no_öô
 vﬁ©ûê
avr32_ußπ_t
 *vﬁ©ûê
	g°dio_ußπ_ba£
;

72 
size_t
 
	$__wrôe
(
h™dÀ
, c⁄° *
buf„r
, 
size_t
 
size
)

74 
size_t
 
nCh¨s
 = 0;

76 i‡(
buf„r
 == 0)

84 i‡(
h™dÀ
 !
_LLIO_STDOUT
 && h™dÀ !
_LLIO_STDERR
)

86  
_LLIO_ERROR
;

89 ; 
size
 != 0; --size)

91 i‡(
	`ußπ_putch¨
(
°dio_ußπ_ba£
, *
buf„r
++) < 0)

93  
_LLIO_ERROR
;

96 ++
nCh¨s
;

99  
nCh¨s
;

100 
	}
}

103 
	g_STD_END


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7S64.h

32 #i‚de‡
AT91SAM7S64_H


33 
	#AT91SAM7S64_H


	)

35 vﬁ©ûê
	tAT91_REG
;

40 
	s_AT91S_SYSC
 {

41 
AT91_REG
 
	mSYSC_AIC_SMR
[32];

42 
AT91_REG
 
	mSYSC_AIC_SVR
[32];

43 
AT91_REG
 
	mSYSC_AIC_IVR
;

44 
AT91_REG
 
	mSYSC_AIC_FVR
;

45 
AT91_REG
 
	mSYSC_AIC_ISR
;

46 
AT91_REG
 
	mSYSC_AIC_IPR
;

47 
AT91_REG
 
	mSYSC_AIC_IMR
;

48 
AT91_REG
 
	mSYSC_AIC_CISR
;

49 
AT91_REG
 
	mRe£rved0
[2];

50 
AT91_REG
 
	mSYSC_AIC_IECR
;

51 
AT91_REG
 
	mSYSC_AIC_IDCR
;

52 
AT91_REG
 
	mSYSC_AIC_ICCR
;

53 
AT91_REG
 
	mSYSC_AIC_ISCR
;

54 
AT91_REG
 
	mSYSC_AIC_EOICR
;

55 
AT91_REG
 
	mSYSC_AIC_SPU
;

56 
AT91_REG
 
	mSYSC_AIC_DCR
;

57 
AT91_REG
 
	mRe£rved1
[1];

58 
AT91_REG
 
	mSYSC_AIC_FFER
;

59 
AT91_REG
 
	mSYSC_AIC_FFDR
;

60 
AT91_REG
 
	mSYSC_AIC_FFSR
;

61 
AT91_REG
 
	mRe£rved2
[45];

62 
AT91_REG
 
	mSYSC_DBGU_CR
;

63 
AT91_REG
 
	mSYSC_DBGU_MR
;

64 
AT91_REG
 
	mSYSC_DBGU_IER
;

65 
AT91_REG
 
	mSYSC_DBGU_IDR
;

66 
AT91_REG
 
	mSYSC_DBGU_IMR
;

67 
AT91_REG
 
	mSYSC_DBGU_CSR
;

68 
AT91_REG
 
	mSYSC_DBGU_RHR
;

69 
AT91_REG
 
	mSYSC_DBGU_THR
;

70 
AT91_REG
 
	mSYSC_DBGU_BRGR
;

71 
AT91_REG
 
	mRe£rved3
[7];

72 
AT91_REG
 
	mSYSC_DBGU_C1R
;

73 
AT91_REG
 
	mSYSC_DBGU_C2R
;

74 
AT91_REG
 
	mSYSC_DBGU_FNTR
;

75 
AT91_REG
 
	mRe£rved4
[45];

76 
AT91_REG
 
	mSYSC_DBGU_RPR
;

77 
AT91_REG
 
	mSYSC_DBGU_RCR
;

78 
AT91_REG
 
	mSYSC_DBGU_TPR
;

79 
AT91_REG
 
	mSYSC_DBGU_TCR
;

80 
AT91_REG
 
	mSYSC_DBGU_RNPR
;

81 
AT91_REG
 
	mSYSC_DBGU_RNCR
;

82 
AT91_REG
 
	mSYSC_DBGU_TNPR
;

83 
AT91_REG
 
	mSYSC_DBGU_TNCR
;

84 
AT91_REG
 
	mSYSC_DBGU_PTCR
;

85 
AT91_REG
 
	mSYSC_DBGU_PTSR
;

86 
AT91_REG
 
	mRe£rved5
[54];

87 
AT91_REG
 
	mSYSC_PIOA_PER
;

88 
AT91_REG
 
	mSYSC_PIOA_PDR
;

89 
AT91_REG
 
	mSYSC_PIOA_PSR
;

90 
AT91_REG
 
	mRe£rved6
[1];

91 
AT91_REG
 
	mSYSC_PIOA_OER
;

92 
AT91_REG
 
	mSYSC_PIOA_ODR
;

93 
AT91_REG
 
	mSYSC_PIOA_OSR
;

94 
AT91_REG
 
	mRe£rved7
[1];

95 
AT91_REG
 
	mSYSC_PIOA_IFER
;

96 
AT91_REG
 
	mSYSC_PIOA_IFDR
;

97 
AT91_REG
 
	mSYSC_PIOA_IFSR
;

98 
AT91_REG
 
	mRe£rved8
[1];

99 
AT91_REG
 
	mSYSC_PIOA_SODR
;

100 
AT91_REG
 
	mSYSC_PIOA_CODR
;

101 
AT91_REG
 
	mSYSC_PIOA_ODSR
;

102 
AT91_REG
 
	mSYSC_PIOA_PDSR
;

103 
AT91_REG
 
	mSYSC_PIOA_IER
;

104 
AT91_REG
 
	mSYSC_PIOA_IDR
;

105 
AT91_REG
 
	mSYSC_PIOA_IMR
;

106 
AT91_REG
 
	mSYSC_PIOA_ISR
;

107 
AT91_REG
 
	mSYSC_PIOA_MDER
;

108 
AT91_REG
 
	mSYSC_PIOA_MDDR
;

109 
AT91_REG
 
	mSYSC_PIOA_MDSR
;

110 
AT91_REG
 
	mRe£rved9
[1];

111 
AT91_REG
 
	mSYSC_PIOA_PPUDR
;

112 
AT91_REG
 
	mSYSC_PIOA_PPUER
;

113 
AT91_REG
 
	mSYSC_PIOA_PPUSR
;

114 
AT91_REG
 
	mRe£rved10
[1];

115 
AT91_REG
 
	mSYSC_PIOA_ASR
;

116 
AT91_REG
 
	mSYSC_PIOA_BSR
;

117 
AT91_REG
 
	mSYSC_PIOA_ABSR
;

118 
AT91_REG
 
	mRe£rved11
[9];

119 
AT91_REG
 
	mSYSC_PIOA_OWER
;

120 
AT91_REG
 
	mSYSC_PIOA_OWDR
;

121 
AT91_REG
 
	mSYSC_PIOA_OWSR
;

122 
AT91_REG
 
	mRe£rved12
[469];

123 
AT91_REG
 
	mSYSC_PMC_SCER
;

124 
AT91_REG
 
	mSYSC_PMC_SCDR
;

125 
AT91_REG
 
	mSYSC_PMC_SCSR
;

126 
AT91_REG
 
	mRe£rved13
[1];

127 
AT91_REG
 
	mSYSC_PMC_PCER
;

128 
AT91_REG
 
	mSYSC_PMC_PCDR
;

129 
AT91_REG
 
	mSYSC_PMC_PCSR
;

130 
AT91_REG
 
	mRe£rved14
[1];

131 
AT91_REG
 
	mSYSC_PMC_MOR
;

132 
AT91_REG
 
	mSYSC_PMC_MCFR
;

133 
AT91_REG
 
	mRe£rved15
[1];

134 
AT91_REG
 
	mSYSC_PMC_PLLR
;

135 
AT91_REG
 
	mSYSC_PMC_MCKR
;

136 
AT91_REG
 
	mRe£rved16
[3];

137 
AT91_REG
 
	mSYSC_PMC_PCKR
[8];

138 
AT91_REG
 
	mSYSC_PMC_IER
;

139 
AT91_REG
 
	mSYSC_PMC_IDR
;

140 
AT91_REG
 
	mSYSC_PMC_SR
;

141 
AT91_REG
 
	mSYSC_PMC_IMR
;

142 
AT91_REG
 
	mRe£rved17
[36];

143 
AT91_REG
 
	mSYSC_RSTC_RCR
;

144 
AT91_REG
 
	mSYSC_RSTC_RSR
;

145 
AT91_REG
 
	mSYSC_RSTC_RMR
;

146 
AT91_REG
 
	mRe£rved18
[5];

147 
AT91_REG
 
	mSYSC_RTTC_RTMR
;

148 
AT91_REG
 
	mSYSC_RTTC_RTAR
;

149 
AT91_REG
 
	mSYSC_RTTC_RTVR
;

150 
AT91_REG
 
	mSYSC_RTTC_RTSR
;

151 
AT91_REG
 
	mSYSC_PITC_PIMR
;

152 
AT91_REG
 
	mSYSC_PITC_PISR
;

153 
AT91_REG
 
	mSYSC_PITC_PIVR
;

154 
AT91_REG
 
	mSYSC_PITC_PIIR
;

155 
AT91_REG
 
	mSYSC_WDTC_WDCR
;

156 
AT91_REG
 
	mSYSC_WDTC_WDMR
;

157 
AT91_REG
 
	mSYSC_WDTC_WDSR
;

158 
AT91_REG
 
	mRe£rved19
[5];

159 
AT91_REG
 
	mSYSC_SYSC_VRPM
;

160 } 
	tAT91S_SYSC
, *
	tAT91PS_SYSC
;

163 
	#AT91C_SYSC_PSTDBY
 (() 0x1 << 0)

164 

	)

168 
	s_AT91S_AIC
 {

169 
AT91_REG
 
	mAIC_SMR
[32];

170 
AT91_REG
 
	mAIC_SVR
[32];

171 
AT91_REG
 
	mAIC_IVR
;

172 
AT91_REG
 
	mAIC_FVR
;

173 
AT91_REG
 
	mAIC_ISR
;

174 
AT91_REG
 
	mAIC_IPR
;

175 
AT91_REG
 
	mAIC_IMR
;

176 
AT91_REG
 
	mAIC_CISR
;

177 
AT91_REG
 
	mRe£rved0
[2];

178 
AT91_REG
 
	mAIC_IECR
;

179 
AT91_REG
 
	mAIC_IDCR
;

180 
AT91_REG
 
	mAIC_ICCR
;

181 
AT91_REG
 
	mAIC_ISCR
;

182 
AT91_REG
 
	mAIC_EOICR
;

183 
AT91_REG
 
	mAIC_SPU
;

184 
AT91_REG
 
	mAIC_DCR
;

185 
AT91_REG
 
	mRe£rved1
[1];

186 
AT91_REG
 
	mAIC_FFER
;

187 
AT91_REG
 
	mAIC_FFDR
;

188 
AT91_REG
 
	mAIC_FFSR
;

189 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

192 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

193 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

194 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

195 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

196 
	#AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
 (() 0x0 << 5)

197 
	#AT91C_AIC_SRCTYPE_INT_EDGE_TRIGGERED
 (() 0x1 << 5)

198 
	#AT91C_AIC_SRCTYPE_EXT_HIGH_LEVEL
 (() 0x2 << 5)

199 
	#AT91C_AIC_SRCTYPE_EXT_POSITIVE_EDGE
 (() 0x3 << 5)

201 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

202 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

204 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

205 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

206 

	)

210 
	s_AT91S_DBGU
 {

211 
AT91_REG
 
	mDBGU_CR
;

212 
AT91_REG
 
	mDBGU_MR
;

213 
AT91_REG
 
	mDBGU_IER
;

214 
AT91_REG
 
	mDBGU_IDR
;

215 
AT91_REG
 
	mDBGU_IMR
;

216 
AT91_REG
 
	mDBGU_CSR
;

217 
AT91_REG
 
	mDBGU_RHR
;

218 
AT91_REG
 
	mDBGU_THR
;

219 
AT91_REG
 
	mDBGU_BRGR
;

220 
AT91_REG
 
	mRe£rved0
[7];

221 
AT91_REG
 
	mDBGU_C1R
;

222 
AT91_REG
 
	mDBGU_C2R
;

223 
AT91_REG
 
	mDBGU_FNTR
;

224 
AT91_REG
 
	mRe£rved1
[45];

225 
AT91_REG
 
	mDBGU_RPR
;

226 
AT91_REG
 
	mDBGU_RCR
;

227 
AT91_REG
 
	mDBGU_TPR
;

228 
AT91_REG
 
	mDBGU_TCR
;

229 
AT91_REG
 
	mDBGU_RNPR
;

230 
AT91_REG
 
	mDBGU_RNCR
;

231 
AT91_REG
 
	mDBGU_TNPR
;

232 
AT91_REG
 
	mDBGU_TNCR
;

233 
AT91_REG
 
	mDBGU_PTCR
;

234 
AT91_REG
 
	mDBGU_PTSR
;

235 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

238 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

239 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

240 
	#AT91C_US_RXEN
 (() 0x1 << 4)

241 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

242 
	#AT91C_US_TXEN
 (() 0x1 << 6)

243 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

245 
	#AT91C_US_PAR
 (() 0x7 << 9)

246 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

247 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

248 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

249 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

250 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

251 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

252 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

253 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

254 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

255 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

256 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

258 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

259 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

260 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

261 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

262 
	#AT91C_US_OVRE
 (() 0x1 << 5)

263 
	#AT91C_US_FRAME
 (() 0x1 << 6)

264 
	#AT91C_US_PARE
 (() 0x1 << 7)

265 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

266 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

267 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

268 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

269 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

274 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

275 

	)

279 
	s_AT91S_PDC
 {

280 
AT91_REG
 
	mPDC_RPR
;

281 
AT91_REG
 
	mPDC_RCR
;

282 
AT91_REG
 
	mPDC_TPR
;

283 
AT91_REG
 
	mPDC_TCR
;

284 
AT91_REG
 
	mPDC_RNPR
;

285 
AT91_REG
 
	mPDC_RNCR
;

286 
AT91_REG
 
	mPDC_TNPR
;

287 
AT91_REG
 
	mPDC_TNCR
;

288 
AT91_REG
 
	mPDC_PTCR
;

289 
AT91_REG
 
	mPDC_PTSR
;

290 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

293 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

294 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

295 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

296 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

298 

	)

302 
	s_AT91S_PIO
 {

303 
AT91_REG
 
	mPIO_PER
;

304 
AT91_REG
 
	mPIO_PDR
;

305 
AT91_REG
 
	mPIO_PSR
;

306 
AT91_REG
 
	mRe£rved0
[1];

307 
AT91_REG
 
	mPIO_OER
;

308 
AT91_REG
 
	mPIO_ODR
;

309 
AT91_REG
 
	mPIO_OSR
;

310 
AT91_REG
 
	mRe£rved1
[1];

311 
AT91_REG
 
	mPIO_IFER
;

312 
AT91_REG
 
	mPIO_IFDR
;

313 
AT91_REG
 
	mPIO_IFSR
;

314 
AT91_REG
 
	mRe£rved2
[1];

315 
AT91_REG
 
	mPIO_SODR
;

316 
AT91_REG
 
	mPIO_CODR
;

317 
AT91_REG
 
	mPIO_ODSR
;

318 
AT91_REG
 
	mPIO_PDSR
;

319 
AT91_REG
 
	mPIO_IER
;

320 
AT91_REG
 
	mPIO_IDR
;

321 
AT91_REG
 
	mPIO_IMR
;

322 
AT91_REG
 
	mPIO_ISR
;

323 
AT91_REG
 
	mPIO_MDER
;

324 
AT91_REG
 
	mPIO_MDDR
;

325 
AT91_REG
 
	mPIO_MDSR
;

326 
AT91_REG
 
	mRe£rved3
[1];

327 
AT91_REG
 
	mPIO_PPUDR
;

328 
AT91_REG
 
	mPIO_PPUER
;

329 
AT91_REG
 
	mPIO_PPUSR
;

330 
AT91_REG
 
	mRe£rved4
[1];

331 
AT91_REG
 
	mPIO_ASR
;

332 
AT91_REG
 
	mPIO_BSR
;

333 
AT91_REG
 
	mPIO_ABSR
;

334 
AT91_REG
 
	mRe£rved5
[9];

335 
AT91_REG
 
	mPIO_OWER
;

336 
AT91_REG
 
	mPIO_OWDR
;

337 
AT91_REG
 
	mPIO_OWSR
;

338 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

344 
	s_AT91S_CKGR
 {

345 
AT91_REG
 
	mCKGR_MOR
;

346 
AT91_REG
 
	mCKGR_MCFR
;

347 
AT91_REG
 
	mRe£rved0
[1];

348 
AT91_REG
 
	mCKGR_PLLR
;

349 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

352 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

353 
	#AT91C_CKGR_OSCBYPASS
 (() 0x1 << 1)

354 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

356 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

357 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

359 
	#AT91C_CKGR_DIV
 (() 0xFF << 0)

360 
	#AT91C_CKGR_DIV_0
 (() 0x0)

361 
	#AT91C_CKGR_DIV_BYPASS
 (() 0x1)

362 
	#AT91C_CKGR_PLLCOUNT
 (() 0x3F << 8)

363 
	#AT91C_CKGR_OUT
 (() 0x3 << 14)

364 
	#AT91C_CKGR_OUT_0
 (() 0x0 << 14)

365 
	#AT91C_CKGR_OUT_1
 (() 0x1 << 14)

366 
	#AT91C_CKGR_OUT_2
 (() 0x2 << 14)

367 
	#AT91C_CKGR_OUT_3
 (() 0x3 << 14)

368 
	#AT91C_CKGR_MUL
 (() 0x7FF << 16)

369 
	#AT91C_CKGR_USBDIV
 (() 0x3 << 28)

370 
	#AT91C_CKGR_USBDIV_0
 (() 0x0 << 28)

371 
	#AT91C_CKGR_USBDIV_1
 (() 0x1 << 28)

372 
	#AT91C_CKGR_USBDIV_2
 (() 0x2 << 28)

373 

	)

377 
	s_AT91S_PMC
 {

378 
AT91_REG
 
	mPMC_SCER
;

379 
AT91_REG
 
	mPMC_SCDR
;

380 
AT91_REG
 
	mPMC_SCSR
;

381 
AT91_REG
 
	mRe£rved0
[1];

382 
AT91_REG
 
	mPMC_PCER
;

383 
AT91_REG
 
	mPMC_PCDR
;

384 
AT91_REG
 
	mPMC_PCSR
;

385 
AT91_REG
 
	mRe£rved1
[1];

386 
AT91_REG
 
	mPMC_MOR
;

387 
AT91_REG
 
	mPMC_MCFR
;

388 
AT91_REG
 
	mRe£rved2
[1];

389 
AT91_REG
 
	mPMC_PLLR
;

390 
AT91_REG
 
	mPMC_MCKR
;

391 
AT91_REG
 
	mRe£rved3
[3];

392 
AT91_REG
 
	mPMC_PCKR
[8];

393 
AT91_REG
 
	mPMC_IER
;

394 
AT91_REG
 
	mPMC_IDR
;

395 
AT91_REG
 
	mPMC_SR
;

396 
AT91_REG
 
	mPMC_IMR
;

397 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

400 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

401 
	#AT91C_PMC_UDP
 (() 0x1 << 7)

402 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

403 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

404 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

405 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

412 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

413 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

414 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

415 
	#AT91C_PMC_CSS_PLL_CLK
 (() 0x3)

416 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

417 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

418 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

419 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

420 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

421 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

422 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

423 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

426 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

427 
	#AT91C_PMC_LOCK
 (() 0x1 << 2)

428 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

429 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

430 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

431 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

432 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

436 

	)

440 
	s_AT91S_RSTC
 {

441 
AT91_REG
 
	mRSTC_RCR
;

442 
AT91_REG
 
	mRSTC_RSR
;

443 
AT91_REG
 
	mRSTC_RMR
;

444 } 
	tAT91S_RSTC
, *
	tAT91PS_RSTC
;

447 
	#AT91C_SYSC_PROCRST
 (() 0x1 << 0)

448 
	#AT91C_SYSC_ICERST
 (() 0x1 << 1)

449 
	#AT91C_SYSC_PERRST
 (() 0x1 << 2)

450 
	#AT91C_SYSC_EXTRST
 (() 0x1 << 3)

451 
	#AT91C_SYSC_KEY
 (() 0xFF << 24)

453 
	#AT91C_SYSC_URSTS
 (() 0x1 << 0)

454 
	#AT91C_SYSC_BODSTS
 (() 0x1 << 1)

455 
	#AT91C_SYSC_RSTTYP
 (() 0x7 << 8)

456 
	#AT91C_SYSC_RSTTYP_POWERUP
 (() 0x0 << 8)

457 
	#AT91C_SYSC_RSTTYP_WATCHDOG
 (() 0x2 << 8)

458 
	#AT91C_SYSC_RSTTYP_SOFTWARE
 (() 0x3 << 8)

459 
	#AT91C_SYSC_RSTTYP_USER
 (() 0x4 << 8)

460 
	#AT91C_SYSC_RSTTYP_BROWNOUT
 (() 0x5 << 8)

461 
	#AT91C_SYSC_NRSTL
 (() 0x1 << 16)

462 
	#AT91C_SYSC_SRCMP
 (() 0x1 << 17)

464 
	#AT91C_SYSC_URSTEN
 (() 0x1 << 0)

465 
	#AT91C_SYSC_URSTIEN
 (() 0x1 << 4)

466 
	#AT91C_SYSC_ERSTL
 (() 0xF << 8)

467 
	#AT91C_SYSC_BODIEN
 (() 0x1 << 16)

468 

	)

472 
	s_AT91S_RTTC
 {

473 
AT91_REG
 
	mRTTC_RTMR
;

474 
AT91_REG
 
	mRTTC_RTAR
;

475 
AT91_REG
 
	mRTTC_RTVR
;

476 
AT91_REG
 
	mRTTC_RTSR
;

477 } 
	tAT91S_RTTC
, *
	tAT91PS_RTTC
;

480 
	#AT91C_SYSC_RTPRES
 (() 0xFFFF << 0)

481 
	#AT91C_SYSC_ALMIEN
 (() 0x1 << 16)

482 
	#AT91C_SYSC_RTTINCIEN
 (() 0x1 << 17)

483 
	#AT91C_SYSC_RTTRST
 (() 0x1 << 18)

485 
	#AT91C_SYSC_ALMV
 (() 0x0 << 0)

487 
	#AT91C_SYSC_CRTV
 (() 0x0 << 0)

489 
	#AT91C_SYSC_ALMS
 (() 0x1 << 0)

490 
	#AT91C_SYSC_RTTINC
 (() 0x1 << 1)

491 

	)

495 
	s_AT91S_PITC
 {

496 
AT91_REG
 
	mPITC_PIMR
;

497 
AT91_REG
 
	mPITC_PISR
;

498 
AT91_REG
 
	mPITC_PIVR
;

499 
AT91_REG
 
	mPITC_PIIR
;

500 } 
	tAT91S_PITC
, *
	tAT91PS_PITC
;

503 
	#AT91C_SYSC_PIV
 (() 0xFFFFF << 0)

504 
	#AT91C_SYSC_PITEN
 (() 0x1 << 24)

505 
	#AT91C_SYSC_PITIEN
 (() 0x1 << 25)

507 
	#AT91C_SYSC_PITS
 (() 0x1 << 0)

509 
	#AT91C_SYSC_CPIV
 (() 0xFFFFF << 0)

510 
	#AT91C_SYSC_PICNT
 (() 0xFFF << 20)

512 

	)

516 
	s_AT91S_WDTC
 {

517 
AT91_REG
 
	mWDTC_WDCR
;

518 
AT91_REG
 
	mWDTC_WDMR
;

519 
AT91_REG
 
	mWDTC_WDSR
;

520 } 
	tAT91S_WDTC
, *
	tAT91PS_WDTC
;

523 
	#AT91C_SYSC_WDRSTT
 (() 0x1 << 0)

525 
	#AT91C_SYSC_WDV
 (() 0xFFF << 0)

526 
	#AT91C_SYSC_WDFIEN
 (() 0x1 << 12)

527 
	#AT91C_SYSC_WDRSTEN
 (() 0x1 << 13)

528 
	#AT91C_SYSC_WDRPROC
 (() 0x1 << 14)

529 
	#AT91C_SYSC_WDDIS
 (() 0x1 << 15)

530 
	#AT91C_SYSC_WDD
 (() 0xFFF << 16)

531 
	#AT91C_SYSC_WDDBGHLT
 (() 0x1 << 28)

532 
	#AT91C_SYSC_WDIDLEHLT
 (() 0x1 << 29)

534 
	#AT91C_SYSC_WDUNF
 (() 0x1 << 0)

535 
	#AT91C_SYSC_WDERR
 (() 0x1 << 1)

536 

	)

540 
	s_AT91S_MC
 {

541 
AT91_REG
 
	mMC_RCR
;

542 
AT91_REG
 
	mMC_ASR
;

543 
AT91_REG
 
	mMC_AASR
;

544 
AT91_REG
 
	mRe£rved0
[21];

545 
AT91_REG
 
	mMC_FMR
;

546 
AT91_REG
 
	mMC_FCR
;

547 
AT91_REG
 
	mMC_FSR
;

548 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

551 
	#AT91C_MC_RCB
 (() 0x1 << 0)

553 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

554 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

555 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

556 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

557 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

558 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

559 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

560 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

561 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

562 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

563 
	#AT91C_MC_MST0
 (() 0x1 << 16)

564 
	#AT91C_MC_MST1
 (() 0x1 << 17)

565 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

566 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

568 
	#AT91C_MC_FRDY
 (() 0x1 << 0)

569 
	#AT91C_MC_LOCKE
 (() 0x1 << 2)

570 
	#AT91C_MC_PROGE
 (() 0x1 << 3)

571 
	#AT91C_MC_NEBP
 (() 0x1 << 7)

572 
	#AT91C_MC_FWS
 (() 0x3 << 8)

573 
	#AT91C_MC_FWS_0FWS
 (() 0x0 << 8)

574 
	#AT91C_MC_FWS_1FWS
 (() 0x1 << 8)

575 
	#AT91C_MC_FWS_2FWS
 (() 0x2 << 8)

576 
	#AT91C_MC_FWS_3FWS
 (() 0x3 << 8)

577 
	#AT91C_MC_FMCN
 (() 0xFF << 16)

579 
	#AT91C_MC_FCMD
 (() 0xF << 0)

580 
	#AT91C_MC_FCMD_START_PROG
 (() 0x1)

581 
	#AT91C_MC_FCMD_LOCK
 (() 0x2)

582 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (() 0x3)

583 
	#AT91C_MC_FCMD_UNLOCK
 (() 0x4)

584 
	#AT91C_MC_FCMD_ERASE_ALL
 (() 0x8)

585 
	#AT91C_MC_FCMD_SET_GP_NVM
 (() 0xB)

586 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (() 0xD)

587 
	#AT91C_MC_FCMD_SET_SECURITY
 (() 0xF)

588 
	#AT91C_MC_PAGEN
 (() 0x3FF << 8)

589 
	#AT91C_MC_KEY
 (() 0xFF << 24)

591 
	#AT91C_MC_SECURITY
 (() 0x1 << 4)

592 
	#AT91C_MC_GPNVM0
 (() 0x1 << 8)

593 
	#AT91C_MC_GPNVM1
 (() 0x1 << 9)

594 
	#AT91C_MC_GPNVM2
 (() 0x1 << 10)

595 
	#AT91C_MC_GPNVM3
 (() 0x1 << 11)

596 
	#AT91C_MC_GPNVM4
 (() 0x1 << 12)

597 
	#AT91C_MC_GPNVM5
 (() 0x1 << 13)

598 
	#AT91C_MC_GPNVM6
 (() 0x1 << 14)

599 
	#AT91C_MC_GPNVM7
 (() 0x1 << 15)

600 
	#AT91C_MC_LOCKS0
 (() 0x1 << 16)

601 
	#AT91C_MC_LOCKS1
 (() 0x1 << 17)

602 
	#AT91C_MC_LOCKS2
 (() 0x1 << 18)

603 
	#AT91C_MC_LOCKS3
 (() 0x1 << 19)

604 
	#AT91C_MC_LOCKS4
 (() 0x1 << 20)

605 
	#AT91C_MC_LOCKS5
 (() 0x1 << 21)

606 
	#AT91C_MC_LOCKS6
 (() 0x1 << 22)

607 
	#AT91C_MC_LOCKS7
 (() 0x1 << 23)

608 
	#AT91C_MC_LOCKS8
 (() 0x1 << 24)

609 
	#AT91C_MC_LOCKS9
 (() 0x1 << 25)

610 
	#AT91C_MC_LOCKS10
 (() 0x1 << 26)

611 
	#AT91C_MC_LOCKS11
 (() 0x1 << 27)

612 
	#AT91C_MC_LOCKS12
 (() 0x1 << 28)

613 
	#AT91C_MC_LOCKS13
 (() 0x1 << 29)

614 
	#AT91C_MC_LOCKS14
 (() 0x1 << 30)

615 
	#AT91C_MC_LOCKS15
 (() 0x1 << 31)

616 

	)

620 
	s_AT91S_SPI
 {

621 
AT91_REG
 
	mSPI_CR
;

622 
AT91_REG
 
	mSPI_MR
;

623 
AT91_REG
 
	mSPI_RDR
;

624 
AT91_REG
 
	mSPI_TDR
;

625 
AT91_REG
 
	mSPI_SR
;

626 
AT91_REG
 
	mSPI_IER
;

627 
AT91_REG
 
	mSPI_IDR
;

628 
AT91_REG
 
	mSPI_IMR
;

629 
AT91_REG
 
	mRe£rved0
[4];

630 
AT91_REG
 
	mSPI_CSR
[4];

631 
AT91_REG
 
	mRe£rved1
[48];

632 
AT91_REG
 
	mSPI_RPR
;

633 
AT91_REG
 
	mSPI_RCR
;

634 
AT91_REG
 
	mSPI_TPR
;

635 
AT91_REG
 
	mSPI_TCR
;

636 
AT91_REG
 
	mSPI_RNPR
;

637 
AT91_REG
 
	mSPI_RNCR
;

638 
AT91_REG
 
	mSPI_TNPR
;

639 
AT91_REG
 
	mSPI_TNCR
;

640 
AT91_REG
 
	mSPI_PTCR
;

641 
AT91_REG
 
	mSPI_PTSR
;

642 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

645 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

646 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

647 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

648 
	#AT91C_SPI_LASTXFER
 (() 0x1 << 24)

650 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

651 
	#AT91C_SPI_PS
 (() 0x1 << 1)

652 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

653 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

654 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

655 
	#AT91C_SPI_FDIV
 (() 0x1 << 3)

656 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

657 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

658 
	#AT91C_SPI_PCS
 (() 0xF << 16)

659 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

661 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

662 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

664 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

665 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

667 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

668 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

669 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

670 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

671 
	#AT91C_SPI_ENDRX
 (() 0x1 << 4)

672 
	#AT91C_SPI_ENDTX
 (() 0x1 << 5)

673 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

674 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

675 
	#AT91C_SPI_NSSR
 (() 0x1 << 8)

676 
	#AT91C_SPI_TXEMPTY
 (() 0x1 << 9)

677 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

682 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

683 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

684 
	#AT91C_SPI_CSAAT
 (() 0x1 << 2)

685 
	#AT91C_SPI_BITS
 (() 0xF << 4)

686 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

687 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

688 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

689 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

690 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

691 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

692 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

693 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

694 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

695 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

696 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

697 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

698 

	)

702 
	s_AT91S_ADC
 {

703 
AT91_REG
 
	mADC_CR
;

704 
AT91_REG
 
	mADC_MR
;

705 
AT91_REG
 
	mRe£rved0
[2];

706 
AT91_REG
 
	mADC_CHER
;

707 
AT91_REG
 
	mADC_CHDR
;

708 
AT91_REG
 
	mADC_CHSR
;

709 
AT91_REG
 
	mADC_SR
;

710 
AT91_REG
 
	mADC_LCDR
;

711 
AT91_REG
 
	mADC_IER
;

712 
AT91_REG
 
	mADC_IDR
;

713 
AT91_REG
 
	mADC_IMR
;

714 
AT91_REG
 
	mADC_CDR0
;

715 
AT91_REG
 
	mADC_CDR1
;

716 
AT91_REG
 
	mADC_CDR2
;

717 
AT91_REG
 
	mADC_CDR3
;

718 
AT91_REG
 
	mADC_CDR4
;

719 
AT91_REG
 
	mADC_CDR5
;

720 
AT91_REG
 
	mADC_CDR6
;

721 
AT91_REG
 
	mADC_CDR7
;

722 
AT91_REG
 
	mRe£rved1
[44];

723 
AT91_REG
 
	mADC_RPR
;

724 
AT91_REG
 
	mADC_RCR
;

725 
AT91_REG
 
	mADC_TPR
;

726 
AT91_REG
 
	mADC_TCR
;

727 
AT91_REG
 
	mADC_RNPR
;

728 
AT91_REG
 
	mADC_RNCR
;

729 
AT91_REG
 
	mADC_TNPR
;

730 
AT91_REG
 
	mADC_TNCR
;

731 
AT91_REG
 
	mADC_PTCR
;

732 
AT91_REG
 
	mADC_PTSR
;

733 } 
	tAT91S_ADC
, *
	tAT91PS_ADC
;

736 
	#AT91C_ADC_SWRST
 (() 0x1 << 0)

737 
	#AT91C_ADC_START
 (() 0x1 << 1)

739 
	#AT91C_ADC_TRGEN
 (() 0x1 << 0)

740 
	#AT91C_ADC_TRGEN_DIS
 (() 0x0)

741 
	#AT91C_ADC_TRGEN_EN
 (() 0x1)

742 
	#AT91C_ADC_TRGSEL
 (() 0x7 << 1)

743 
	#AT91C_ADC_TRGSEL_TIOA0
 (() 0x0 << 1)

744 
	#AT91C_ADC_TRGSEL_TIOA1
 (() 0x1 << 1)

745 
	#AT91C_ADC_TRGSEL_TIOA2
 (() 0x2 << 1)

746 
	#AT91C_ADC_TRGSEL_TIOA3
 (() 0x3 << 1)

747 
	#AT91C_ADC_TRGSEL_TIOA4
 (() 0x4 << 1)

748 
	#AT91C_ADC_TRGSEL_TIOA5
 (() 0x5 << 1)

749 
	#AT91C_ADC_TRGSEL_EXT
 (() 0x6 << 1)

750 
	#AT91C_ADC_LOWRES
 (() 0x1 << 4)

751 
	#AT91C_ADC_LOWRES_10_BIT
 (() 0x0 << 4)

752 
	#AT91C_ADC_LOWRES_8_BIT
 (() 0x1 << 4)

753 
	#AT91C_ADC_SLEEP
 (() 0x1 << 5)

754 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (() 0x0 << 5)

755 
	#AT91C_ADC_SLEEP_MODE
 (() 0x1 << 5)

756 
	#AT91C_ADC_PRESCAL
 (() 0x3F << 8)

757 
	#AT91C_ADC_STARTUP
 (() 0x1F << 16)

758 
	#AT91C_ADC_SHTIM
 (() 0xF << 24)

760 
	#AT91C_ADC_CH0
 (() 0x1 << 0)

761 
	#AT91C_ADC_CH1
 (() 0x1 << 1)

762 
	#AT91C_ADC_CH2
 (() 0x1 << 2)

763 
	#AT91C_ADC_CH3
 (() 0x1 << 3)

764 
	#AT91C_ADC_CH4
 (() 0x1 << 4)

765 
	#AT91C_ADC_CH5
 (() 0x1 << 5)

766 
	#AT91C_ADC_CH6
 (() 0x1 << 6)

767 
	#AT91C_ADC_CH7
 (() 0x1 << 7)

771 
	#AT91C_ADC_EOC0
 (() 0x1 << 0)

772 
	#AT91C_ADC_EOC1
 (() 0x1 << 1)

773 
	#AT91C_ADC_EOC2
 (() 0x1 << 2)

774 
	#AT91C_ADC_EOC3
 (() 0x1 << 3)

775 
	#AT91C_ADC_EOC4
 (() 0x1 << 4)

776 
	#AT91C_ADC_EOC5
 (() 0x1 << 5)

777 
	#AT91C_ADC_EOC6
 (() 0x1 << 6)

778 
	#AT91C_ADC_EOC7
 (() 0x1 << 7)

779 
	#AT91C_ADC_OVRE0
 (() 0x1 << 8)

780 
	#AT91C_ADC_OVRE1
 (() 0x1 << 9)

781 
	#AT91C_ADC_OVRE2
 (() 0x1 << 10)

782 
	#AT91C_ADC_OVRE3
 (() 0x1 << 11)

783 
	#AT91C_ADC_OVRE4
 (() 0x1 << 12)

784 
	#AT91C_ADC_OVRE5
 (() 0x1 << 13)

785 
	#AT91C_ADC_OVRE6
 (() 0x1 << 14)

786 
	#AT91C_ADC_OVRE7
 (() 0x1 << 15)

787 
	#AT91C_ADC_DRDY
 (() 0x1 << 16)

788 
	#AT91C_ADC_GOVRE
 (() 0x1 << 17)

789 
	#AT91C_ADC_ENDRX
 (() 0x1 << 18)

790 
	#AT91C_ADC_RXBUFF
 (() 0x1 << 19)

792 
	#AT91C_ADC_LDATA
 (() 0x3FF << 0)

797 
	#AT91C_ADC_DATA
 (() 0x3FF << 0)

805 

	)

809 
	s_AT91S_SSC
 {

810 
AT91_REG
 
	mSSC_CR
;

811 
AT91_REG
 
	mSSC_CMR
;

812 
AT91_REG
 
	mRe£rved0
[2];

813 
AT91_REG
 
	mSSC_RCMR
;

814 
AT91_REG
 
	mSSC_RFMR
;

815 
AT91_REG
 
	mSSC_TCMR
;

816 
AT91_REG
 
	mSSC_TFMR
;

817 
AT91_REG
 
	mSSC_RHR
;

818 
AT91_REG
 
	mSSC_THR
;

819 
AT91_REG
 
	mRe£rved1
[2];

820 
AT91_REG
 
	mSSC_RSHR
;

821 
AT91_REG
 
	mSSC_TSHR
;

822 
AT91_REG
 
	mSSC_RC0R
;

823 
AT91_REG
 
	mSSC_RC1R
;

824 
AT91_REG
 
	mSSC_SR
;

825 
AT91_REG
 
	mSSC_IER
;

826 
AT91_REG
 
	mSSC_IDR
;

827 
AT91_REG
 
	mSSC_IMR
;

828 
AT91_REG
 
	mRe£rved2
[44];

829 
AT91_REG
 
	mSSC_RPR
;

830 
AT91_REG
 
	mSSC_RCR
;

831 
AT91_REG
 
	mSSC_TPR
;

832 
AT91_REG
 
	mSSC_TCR
;

833 
AT91_REG
 
	mSSC_RNPR
;

834 
AT91_REG
 
	mSSC_RNCR
;

835 
AT91_REG
 
	mSSC_TNPR
;

836 
AT91_REG
 
	mSSC_TNCR
;

837 
AT91_REG
 
	mSSC_PTCR
;

838 
AT91_REG
 
	mSSC_PTSR
;

839 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

842 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

843 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

844 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

845 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

846 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

848 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

849 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

850 
	#AT91C_SSC_CKS_TK
 (() 0x1)

851 
	#AT91C_SSC_CKS_RK
 (() 0x2)

852 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

853 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

854 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

855 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

856 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

857 
	#AT91C_SSC_CKG
 (() 0x3 << 6)

858 
	#AT91C_SSC_CKG_NONE
 (() 0x0 << 6)

859 
	#AT91C_SSC_CKG_LOW
 (() 0x1 << 6)

860 
	#AT91C_SSC_CKG_HIGH
 (() 0x2 << 6)

861 
	#AT91C_SSC_START
 (() 0xF << 8)

862 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

863 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

864 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

865 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

866 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

867 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

868 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

869 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

870 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

871 
	#AT91C_SSC_STOP
 (() 0x1 << 12)

872 
	#AT91C_SSC_STTOUT
 (() 0x1 << 15)

873 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

874 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

876 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

877 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

878 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

879 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

880 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

881 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

882 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

883 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

884 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

885 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

886 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

887 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

888 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

891 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

892 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

894 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

895 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

896 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

897 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

898 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

899 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

900 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

901 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

902 
	#AT91C_SSC_CP0
 (() 0x1 << 8)

903 
	#AT91C_SSC_CP1
 (() 0x1 << 9)

904 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

905 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

906 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

907 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

911 

	)

915 
	s_AT91S_USART
 {

916 
AT91_REG
 
	mUS_CR
;

917 
AT91_REG
 
	mUS_MR
;

918 
AT91_REG
 
	mUS_IER
;

919 
AT91_REG
 
	mUS_IDR
;

920 
AT91_REG
 
	mUS_IMR
;

921 
AT91_REG
 
	mUS_CSR
;

922 
AT91_REG
 
	mUS_RHR
;

923 
AT91_REG
 
	mUS_THR
;

924 
AT91_REG
 
	mUS_BRGR
;

925 
AT91_REG
 
	mUS_RTOR
;

926 
AT91_REG
 
	mUS_TTGR
;

927 
AT91_REG
 
	mRe£rved0
[5];

928 
AT91_REG
 
	mUS_FIDI
;

929 
AT91_REG
 
	mUS_NER
;

930 
AT91_REG
 
	mUS_XXR
;

931 
AT91_REG
 
	mUS_IF
;

932 
AT91_REG
 
	mRe£rved1
[44];

933 
AT91_REG
 
	mUS_RPR
;

934 
AT91_REG
 
	mUS_RCR
;

935 
AT91_REG
 
	mUS_TPR
;

936 
AT91_REG
 
	mUS_TCR
;

937 
AT91_REG
 
	mUS_RNPR
;

938 
AT91_REG
 
	mUS_RNCR
;

939 
AT91_REG
 
	mUS_TNPR
;

940 
AT91_REG
 
	mUS_TNCR
;

941 
AT91_REG
 
	mUS_PTCR
;

942 
AT91_REG
 
	mUS_PTSR
;

943 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

946 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

947 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

948 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

949 
	#AT91C_US_STTTO
 (() 0x1 << 11)

950 
	#AT91C_US_SENDA
 (() 0x1 << 12)

951 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

952 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

953 
	#AT91C_US_RETTO
 (() 0x1 << 15)

954 
	#AT91C_US_DTREN
 (() 0x1 << 16)

955 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

956 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

957 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

959 
	#AT91C_US_USMODE
 (() 0xF << 0)

960 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

961 
	#AT91C_US_USMODE_RS485
 (() 0x1)

962 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

963 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

964 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

965 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

966 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

967 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

968 
	#AT91C_US_CLKS
 (() 0x3 << 4)

969 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

970 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

971 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

972 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

973 
	#AT91C_US_CHRL
 (() 0x3 << 6)

974 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

975 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

976 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

977 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

978 
	#AT91C_US_SYNC
 (() 0x1 << 8)

979 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

980 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

981 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

982 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

983 
	#AT91C_US_MSBF
 (() 0x1 << 16)

984 
	#AT91C_US_MODE9
 (() 0x1 << 17)

985 
	#AT91C_US_CKLO
 (() 0x1 << 18)

986 
	#AT91C_US_OVER
 (() 0x1 << 19)

987 
	#AT91C_US_INACK
 (() 0x1 << 20)

988 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

989 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

990 
	#AT91C_US_FILTER
 (() 0x1 << 28)

992 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

993 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

994 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

995 
	#AT91C_US_NACK
 (() 0x1 << 13)

996 
	#AT91C_US_RIIC
 (() 0x1 << 16)

997 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

998 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

999 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

1003 
	#AT91C_US_RI
 (() 0x1 << 20)

1004 
	#AT91C_US_DSR
 (() 0x1 << 21)

1005 
	#AT91C_US_DCD
 (() 0x1 << 22)

1006 
	#AT91C_US_CTS
 (() 0x1 << 23)

1007 

	)

1011 
	s_AT91S_TWI
 {

1012 
AT91_REG
 
	mTWI_CR
;

1013 
AT91_REG
 
	mTWI_MMR
;

1014 
AT91_REG
 
	mTWI_SMR
;

1015 
AT91_REG
 
	mTWI_IADR
;

1016 
AT91_REG
 
	mTWI_CWGR
;

1017 
AT91_REG
 
	mRe£rved0
[3];

1018 
AT91_REG
 
	mTWI_SR
;

1019 
AT91_REG
 
	mTWI_IER
;

1020 
AT91_REG
 
	mTWI_IDR
;

1021 
AT91_REG
 
	mTWI_IMR
;

1022 
AT91_REG
 
	mTWI_RHR
;

1023 
AT91_REG
 
	mTWI_THR
;

1024 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

1027 
	#AT91C_TWI_START
 (() 0x1 << 0)

1028 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

1029 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

1030 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

1031 
	#AT91C_TWI_SVEN
 (() 0x1 << 4)

1032 
	#AT91C_TWI_SVDIS
 (() 0x1 << 5)

1033 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

1035 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

1036 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

1037 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

1038 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

1039 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

1040 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

1041 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

1043 
	#AT91C_TWI_SADR
 (() 0x7F << 16)

1045 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

1046 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

1047 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

1049 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

1050 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

1051 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

1052 
	#AT91C_TWI_SVREAD
 (() 0x1 << 3)

1053 
	#AT91C_TWI_SVACC
 (() 0x1 << 4)

1054 
	#AT91C_TWI_GCACC
 (() 0x1 << 5)

1055 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

1056 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

1057 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1058 
	#AT91C_TWI_ARBLST
 (() 0x1 << 9)

1062 

	)

1066 
	s_AT91S_TC
 {

1067 
AT91_REG
 
	mTC_CCR
;

1068 
AT91_REG
 
	mTC_CMR
;

1069 
AT91_REG
 
	mRe£rved0
[2];

1070 
AT91_REG
 
	mTC_CV
;

1071 
AT91_REG
 
	mTC_RA
;

1072 
AT91_REG
 
	mTC_RB
;

1073 
AT91_REG
 
	mTC_RC
;

1074 
AT91_REG
 
	mTC_SR
;

1075 
AT91_REG
 
	mTC_IER
;

1076 
AT91_REG
 
	mTC_IDR
;

1077 
AT91_REG
 
	mTC_IMR
;

1078 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1081 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1082 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1083 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1085 
	#AT91C_TC_CLKS
 (() 0x7 << 0)

1086 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (() 0x0)

1087 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (() 0x1)

1088 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (() 0x2)

1089 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (() 0x3)

1090 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (() 0x4)

1091 
	#AT91C_TC_CLKS_XC0
 (() 0x5)

1092 
	#AT91C_TC_CLKS_XC1
 (() 0x6)

1093 
	#AT91C_TC_CLKS_XC2
 (() 0x7)

1094 
	#AT91C_TC_CLKI
 (() 0x1 << 3)

1095 
	#AT91C_TC_BURST
 (() 0x3 << 4)

1096 
	#AT91C_TC_BURST_NONE
 (() 0x0 << 4)

1097 
	#AT91C_TC_BURST_XC0
 (() 0x1 << 4)

1098 
	#AT91C_TC_BURST_XC1
 (() 0x2 << 4)

1099 
	#AT91C_TC_BURST_XC2
 (() 0x3 << 4)

1100 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1101 
	#AT91C_TC_LDBSTOP
 (() 0x1 << 6)

1102 
	#AT91C_TC_LDBDIS
 (() 0x1 << 7)

1103 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1104 
	#AT91C_TC_ETRGEDG
 (() 0x3 << 8)

1105 
	#AT91C_TC_ETRGEDG_NONE
 (() 0x0 << 8)

1106 
	#AT91C_TC_ETRGEDG_RISING
 (() 0x1 << 8)

1107 
	#AT91C_TC_ETRGEDG_FALLING
 (() 0x2 << 8)

1108 
	#AT91C_TC_ETRGEDG_BOTH
 (() 0x3 << 8)

1109 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1110 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1111 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1112 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1113 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1114 
	#AT91C_TC_ABETRG
 (() 0x1 << 10)

1115 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1116 
	#AT91C_TC_EEVT_NONE
 (() 0x0 << 10)

1117 
	#AT91C_TC_EEVT_RISING
 (() 0x1 << 10)

1118 
	#AT91C_TC_EEVT_FALLING
 (() 0x2 << 10)

1119 
	#AT91C_TC_EEVT_BOTH
 (() 0x3 << 10)

1120 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1121 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1122 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1123 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1124 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1125 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1126 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1127 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1128 
	#AT91C_TC_LDRA
 (() 0x3 << 16)

1129 
	#AT91C_TC_LDRA_NONE
 (() 0x0 << 16)

1130 
	#AT91C_TC_LDRA_RISING
 (() 0x1 << 16)

1131 
	#AT91C_TC_LDRA_FALLING
 (() 0x2 << 16)

1132 
	#AT91C_TC_LDRA_BOTH
 (() 0x3 << 16)

1133 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1134 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1135 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1136 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1137 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1138 
	#AT91C_TC_LDRB
 (() 0x3 << 18)

1139 
	#AT91C_TC_LDRB_NONE
 (() 0x0 << 18)

1140 
	#AT91C_TC_LDRB_RISING
 (() 0x1 << 18)

1141 
	#AT91C_TC_LDRB_FALLING
 (() 0x2 << 18)

1142 
	#AT91C_TC_LDRB_BOTH
 (() 0x3 << 18)

1143 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1144 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1145 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1146 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1147 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1148 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1149 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1150 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1151 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1152 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1153 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1154 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1155 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1156 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1157 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1158 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1159 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1160 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1161 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1162 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1163 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1164 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1165 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1166 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1167 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1168 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1169 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1170 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1171 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1172 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1173 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1174 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1175 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1176 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1177 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1179 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1180 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1181 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1182 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1183 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1184 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1185 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1186 
	#AT91C_TC_ETRCS
 (() 0x1 << 7)

1187 
	#AT91C_TC_ETRGS
 (() 0x1 << 16)

1188 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1189 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1193 

	)

1197 
	s_AT91S_TCB
 {

1198 
AT91S_TC
 
	mTCB_TC0
;

1199 
AT91_REG
 
	mRe£rved0
[4];

1200 
AT91S_TC
 
	mTCB_TC1
;

1201 
AT91_REG
 
	mRe£rved1
[4];

1202 
AT91S_TC
 
	mTCB_TC2
;

1203 
AT91_REG
 
	mRe£rved2
[4];

1204 
AT91_REG
 
	mTCB_BCR
;

1205 
AT91_REG
 
	mTCB_BMR
;

1206 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1209 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1211 
	#AT91C_TCB_TC0XC0S
 (() 0x1 << 0)

1212 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1213 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1214 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1215 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1216 
	#AT91C_TCB_TC1XC1S
 (() 0x1 << 2)

1217 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1218 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1219 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1220 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1221 
	#AT91C_TCB_TC2XC2S
 (() 0x1 << 4)

1222 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1223 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1224 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1225 
	#AT91C_TCB_TC2XC2S_TIOA2
 (() 0x3 << 4)

1226 

	)

1230 
	s_AT91S_PWMC_CH
 {

1231 
AT91_REG
 
	mPWMC_CMR
;

1232 
AT91_REG
 
	mPWMC_CDTYR
;

1233 
AT91_REG
 
	mPWMC_CPRDR
;

1234 
AT91_REG
 
	mPWMC_CCNTR
;

1235 
AT91_REG
 
	mPWMC_CUPDR
;

1236 
AT91_REG
 
	mPWMC_Re£rved
[3];

1237 } 
	tAT91S_PWMC_CH
, *
	tAT91PS_PWMC_CH
;

1240 
	#AT91C_PWMC_CPRE
 (() 0xF << 0)

1241 
	#AT91C_PWMC_CPRE_MCK
 (() 0x0)

1242 
	#AT91C_PWMC_CPRE_MCKA
 (() 0xB)

1243 
	#AT91C_PWMC_CPRE_MCKB
 (() 0xC)

1244 
	#AT91C_PWMC_CALG
 (() 0x1 << 8)

1245 
	#AT91C_PWMC_CPOL
 (() 0x1 << 9)

1246 
	#AT91C_PWMC_CPD
 (() 0x1 << 10)

1248 
	#AT91C_PWMC_CDTY
 (() 0x0 << 0)

1250 
	#AT91C_PWMC_CPRD
 (() 0x0 << 0)

1252 
	#AT91C_PWMC_CCNT
 (() 0x0 << 0)

1254 
	#AT91C_PWMC_CUPD
 (() 0x0 << 0)

1255 

	)

1259 
	s_AT91S_PWMC
 {

1260 
AT91_REG
 
	mPWMC_MR
;

1261 
AT91_REG
 
	mPWMC_ENA
;

1262 
AT91_REG
 
	mPWMC_DIS
;

1263 
AT91_REG
 
	mPWMC_SR
;

1264 
AT91_REG
 
	mPWMC_IER
;

1265 
AT91_REG
 
	mPWMC_IDR
;

1266 
AT91_REG
 
	mPWMC_IMR
;

1267 
AT91_REG
 
	mPWMC_ISR
;

1268 
AT91_REG
 
	mRe£rved0
[55];

1269 
AT91_REG
 
	mPWMC_VR
;

1270 
AT91_REG
 
	mRe£rved1
[64];

1271 
AT91S_PWMC_CH
 
	mPWMC_CH
[32];

1272 } 
	tAT91S_PWMC
, *
	tAT91PS_PWMC
;

1275 
	#AT91C_PWMC_DIVA
 (() 0xFF << 0)

1276 
	#AT91C_PWMC_PREA
 (() 0xF << 8)

1277 
	#AT91C_PWMC_PREA_MCK
 (() 0x0 << 8)

1278 
	#AT91C_PWMC_DIVB
 (() 0xFF << 16)

1279 
	#AT91C_PWMC_PREB
 (() 0xF << 24)

1280 
	#AT91C_PWMC_PREB_MCK
 (() 0x0 << 24)

1282 
	#AT91C_PWMC_CHID0
 (() 0x1 << 0)

1283 
	#AT91C_PWMC_CHID1
 (() 0x1 << 1)

1284 
	#AT91C_PWMC_CHID2
 (() 0x1 << 2)

1285 
	#AT91C_PWMC_CHID3
 (() 0x1 << 3)

1286 
	#AT91C_PWMC_CHID4
 (() 0x1 << 4)

1287 
	#AT91C_PWMC_CHID5
 (() 0x1 << 5)

1288 
	#AT91C_PWMC_CHID6
 (() 0x1 << 6)

1289 
	#AT91C_PWMC_CHID7
 (() 0x1 << 7)

1296 

	)

1300 
	s_AT91S_UDP
 {

1301 
AT91_REG
 
	mUDP_NUM
;

1302 
AT91_REG
 
	mUDP_GLBSTATE
;

1303 
AT91_REG
 
	mUDP_FADDR
;

1304 
AT91_REG
 
	mRe£rved0
[1];

1305 
AT91_REG
 
	mUDP_IER
;

1306 
AT91_REG
 
	mUDP_IDR
;

1307 
AT91_REG
 
	mUDP_IMR
;

1308 
AT91_REG
 
	mUDP_ISR
;

1309 
AT91_REG
 
	mUDP_ICR
;

1310 
AT91_REG
 
	mRe£rved1
[1];

1311 
AT91_REG
 
	mUDP_RSTEP
;

1312 
AT91_REG
 
	mRe£rved2
[1];

1313 
AT91_REG
 
	mUDP_CSR
[8];

1314 
AT91_REG
 
	mUDP_FDR
[8];

1315 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1318 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1319 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1320 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1322 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1323 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1324 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 2)

1325 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1327 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1328 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1330 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1331 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1332 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1333 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1334 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1335 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1336 
	#AT91C_UDP_EPINT6
 (() 0x1 << 6)

1337 
	#AT91C_UDP_EPINT7
 (() 0x1 << 7)

1338 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1339 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1340 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1341 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1342 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1346 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1349 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1350 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1351 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1352 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1353 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1354 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1355 
	#AT91C_UDP_EP6
 (() 0x1 << 6)

1356 
	#AT91C_UDP_EP7
 (() 0x1 << 7)

1358 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1359 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1360 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1361 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1362 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1363 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1364 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1365 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1366 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1367 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1368 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1369 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1370 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1371 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1372 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1373 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1374 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1375 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1376 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1377 

	)

1382 
	#AT91C_SYSC_SYSC_VRPM
 ((
AT91_REG
 *) 0xFFFFFD60)

1384 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1385 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1386 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1387 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1388 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1389 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1390 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1391 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1392 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1393 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1394 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1395 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1396 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1397 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1398 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1399 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1400 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1401 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1403 
	#AT91C_DBGU_C2R
 ((
AT91_REG
 *) 0xFFFFF244)

1404 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1405 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1406 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1407 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1408 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1409 
	#AT91C_DBGU_C1R
 ((
AT91_REG
 *) 0xFFFFF240)

1410 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1411 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1412 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1413 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1414 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1416 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1417 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1418 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1419 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1420 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1421 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1422 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1423 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1424 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1425 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1427 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1428 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1429 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1430 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1431 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1432 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1433 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1434 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1435 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1436 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1437 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1438 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1439 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1440 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1441 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1442 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1443 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1444 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1445 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1446 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1447 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1448 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1449 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1450 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1451 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1452 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1453 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1454 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1455 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1457 
	#AT91C_CKGR_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1458 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1459 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1461 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1462 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1463 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1464 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1465 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1466 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1467 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1468 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1469 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1470 
	#AT91C_PMC_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1471 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1472 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1473 
	#AT91C_PMC_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1474 
	#AT91C_PMC_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1475 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1477 
	#AT91C_RSTC_RSR
 ((
AT91_REG
 *) 0xFFFFFD04)

1478 
	#AT91C_RSTC_RMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1479 
	#AT91C_RSTC_RCR
 ((
AT91_REG
 *) 0xFFFFFD00)

1481 
	#AT91C_RTTC_RTSR
 ((
AT91_REG
 *) 0xFFFFFD2C)

1482 
	#AT91C_RTTC_RTAR
 ((
AT91_REG
 *) 0xFFFFFD24)

1483 
	#AT91C_RTTC_RTVR
 ((
AT91_REG
 *) 0xFFFFFD28)

1484 
	#AT91C_RTTC_RTMR
 ((
AT91_REG
 *) 0xFFFFFD20)

1486 
	#AT91C_PITC_PIIR
 ((
AT91_REG
 *) 0xFFFFFD3C)

1487 
	#AT91C_PITC_PISR
 ((
AT91_REG
 *) 0xFFFFFD34)

1488 
	#AT91C_PITC_PIVR
 ((
AT91_REG
 *) 0xFFFFFD38)

1489 
	#AT91C_PITC_PIMR
 ((
AT91_REG
 *) 0xFFFFFD30)

1491 
	#AT91C_WDTC_WDMR
 ((
AT91_REG
 *) 0xFFFFFD44)

1492 
	#AT91C_WDTC_WDSR
 ((
AT91_REG
 *) 0xFFFFFD48)

1493 
	#AT91C_WDTC_WDCR
 ((
AT91_REG
 *) 0xFFFFFD40)

1495 
	#AT91C_MC_FCR
 ((
AT91_REG
 *) 0xFFFFFF64)

1496 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

1497 
	#AT91C_MC_FSR
 ((
AT91_REG
 *) 0xFFFFFF68)

1498 
	#AT91C_MC_FMR
 ((
AT91_REG
 *) 0xFFFFFF60)

1499 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

1500 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

1502 
	#AT91C_SPI_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

1503 
	#AT91C_SPI_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

1504 
	#AT91C_SPI_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

1505 
	#AT91C_SPI_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

1506 
	#AT91C_SPI_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

1507 
	#AT91C_SPI_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

1508 
	#AT91C_SPI_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

1509 
	#AT91C_SPI_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

1510 
	#AT91C_SPI_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

1511 
	#AT91C_SPI_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

1513 
	#AT91C_SPI_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

1514 
	#AT91C_SPI_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

1515 
	#AT91C_SPI_SR
 ((
AT91_REG
 *) 0xFFFE0010)

1516 
	#AT91C_SPI_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

1517 
	#AT91C_SPI_CR
 ((
AT91_REG
 *) 0xFFFE0000)

1518 
	#AT91C_SPI_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

1519 
	#AT91C_SPI_IER
 ((
AT91_REG
 *) 0xFFFE0014)

1520 
	#AT91C_SPI_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

1521 
	#AT91C_SPI_MR
 ((
AT91_REG
 *) 0xFFFE0004)

1523 
	#AT91C_ADC_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

1524 
	#AT91C_ADC_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

1525 
	#AT91C_ADC_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

1526 
	#AT91C_ADC_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

1527 
	#AT91C_ADC_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

1528 
	#AT91C_ADC_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

1529 
	#AT91C_ADC_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

1530 
	#AT91C_ADC_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

1531 
	#AT91C_ADC_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

1532 
	#AT91C_ADC_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

1534 
	#AT91C_ADC_IMR
 ((
AT91_REG
 *) 0xFFFD802C)

1535 
	#AT91C_ADC_CDR4
 ((
AT91_REG
 *) 0xFFFD8040)

1536 
	#AT91C_ADC_CDR2
 ((
AT91_REG
 *) 0xFFFD8038)

1537 
	#AT91C_ADC_CDR0
 ((
AT91_REG
 *) 0xFFFD8030)

1538 
	#AT91C_ADC_CDR7
 ((
AT91_REG
 *) 0xFFFD804C)

1539 
	#AT91C_ADC_CDR1
 ((
AT91_REG
 *) 0xFFFD8034)

1540 
	#AT91C_ADC_CDR3
 ((
AT91_REG
 *) 0xFFFD803C)

1541 
	#AT91C_ADC_CDR5
 ((
AT91_REG
 *) 0xFFFD8044)

1542 
	#AT91C_ADC_MR
 ((
AT91_REG
 *) 0xFFFD8004)

1543 
	#AT91C_ADC_CDR6
 ((
AT91_REG
 *) 0xFFFD8048)

1544 
	#AT91C_ADC_CR
 ((
AT91_REG
 *) 0xFFFD8000)

1545 
	#AT91C_ADC_CHER
 ((
AT91_REG
 *) 0xFFFD8010)

1546 
	#AT91C_ADC_CHSR
 ((
AT91_REG
 *) 0xFFFD8018)

1547 
	#AT91C_ADC_IER
 ((
AT91_REG
 *) 0xFFFD8024)

1548 
	#AT91C_ADC_SR
 ((
AT91_REG
 *) 0xFFFD801C)

1549 
	#AT91C_ADC_CHDR
 ((
AT91_REG
 *) 0xFFFD8014)

1550 
	#AT91C_ADC_IDR
 ((
AT91_REG
 *) 0xFFFD8028)

1551 
	#AT91C_ADC_LCDR
 ((
AT91_REG
 *) 0xFFFD8020)

1553 
	#AT91C_SSC_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

1554 
	#AT91C_SSC_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

1555 
	#AT91C_SSC_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

1556 
	#AT91C_SSC_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

1557 
	#AT91C_SSC_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

1558 
	#AT91C_SSC_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

1559 
	#AT91C_SSC_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

1560 
	#AT91C_SSC_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

1561 
	#AT91C_SSC_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

1562 
	#AT91C_SSC_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

1564 
	#AT91C_SSC_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

1565 
	#AT91C_SSC_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

1566 
	#AT91C_SSC_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

1567 
	#AT91C_SSC_SR
 ((
AT91_REG
 *) 0xFFFD4040)

1568 
	#AT91C_SSC_RC0R
 ((
AT91_REG
 *) 0xFFFD4038)

1569 
	#AT91C_SSC_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

1570 
	#AT91C_SSC_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

1571 
	#AT91C_SSC_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

1572 
	#AT91C_SSC_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

1573 
	#AT91C_SSC_CR
 ((
AT91_REG
 *) 0xFFFD4000)

1574 
	#AT91C_SSC_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

1575 
	#AT91C_SSC_IER
 ((
AT91_REG
 *) 0xFFFD4044)

1576 
	#AT91C_SSC_RC1R
 ((
AT91_REG
 *) 0xFFFD403C)

1577 
	#AT91C_SSC_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

1578 
	#AT91C_SSC_THR
 ((
AT91_REG
 *) 0xFFFD4024)

1579 
	#AT91C_SSC_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

1581 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

1582 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

1583 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

1584 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

1585 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

1586 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

1587 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

1588 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

1589 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

1590 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

1592 
	#AT91C_US1_XXR
 ((
AT91_REG
 *) 0xFFFC4048)

1593 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

1594 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

1595 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

1596 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

1597 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

1598 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

1599 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

1600 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

1601 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

1602 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

1603 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

1604 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

1605 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

1606 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

1608 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

1609 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

1610 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

1611 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

1612 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

1613 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

1614 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

1615 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

1616 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

1617 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

1619 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

1620 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

1621 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

1622 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

1623 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

1624 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

1625 
	#AT91C_US0_XXR
 ((
AT91_REG
 *) 0xFFFC0048)

1626 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

1627 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

1628 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

1629 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

1630 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

1631 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

1632 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

1633 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

1635 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

1636 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

1637 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

1638 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

1639 
	#AT91C_TWI_SMR
 ((
AT91_REG
 *) 0xFFFB8008)

1640 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

1641 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

1642 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

1643 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

1644 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

1645 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

1647 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

1648 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

1649 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

1650 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

1651 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

1652 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

1653 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

1654 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

1655 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

1656 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

1658 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

1659 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

1660 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

1661 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

1662 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

1663 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

1664 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

1665 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

1666 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

1667 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

1669 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

1670 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

1671 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

1672 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

1673 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

1674 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

1675 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

1676 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

1677 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

1678 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

1680 
	#AT91C_TCB_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

1681 
	#AT91C_TCB_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

1683 
	#AT91C_CH3_CUPDR
 ((
AT91_REG
 *) 0xFFFCC270)

1684 
	#AT91C_CH3_CPRDR
 ((
AT91_REG
 *) 0xFFFCC268)

1685 
	#AT91C_CH3_CMR
 ((
AT91_REG
 *) 0xFFFCC260)

1686 
	#AT91C_CH3_Re£rved
 ((
AT91_REG
 *) 0xFFFCC274)

1687 
	#AT91C_CH3_CCNTR
 ((
AT91_REG
 *) 0xFFFCC26C)

1688 
	#AT91C_CH3_CDTYR
 ((
AT91_REG
 *) 0xFFFCC264)

1690 
	#AT91C_CH2_CUPDR
 ((
AT91_REG
 *) 0xFFFCC250)

1691 
	#AT91C_CH2_CPRDR
 ((
AT91_REG
 *) 0xFFFCC248)

1692 
	#AT91C_CH2_CMR
 ((
AT91_REG
 *) 0xFFFCC240)

1693 
	#AT91C_CH2_Re£rved
 ((
AT91_REG
 *) 0xFFFCC254)

1694 
	#AT91C_CH2_CCNTR
 ((
AT91_REG
 *) 0xFFFCC24C)

1695 
	#AT91C_CH2_CDTYR
 ((
AT91_REG
 *) 0xFFFCC244)

1697 
	#AT91C_CH1_CUPDR
 ((
AT91_REG
 *) 0xFFFCC230)

1698 
	#AT91C_CH1_CPRDR
 ((
AT91_REG
 *) 0xFFFCC228)

1699 
	#AT91C_CH1_CMR
 ((
AT91_REG
 *) 0xFFFCC220)

1700 
	#AT91C_CH1_Re£rved
 ((
AT91_REG
 *) 0xFFFCC234)

1701 
	#AT91C_CH1_CCNTR
 ((
AT91_REG
 *) 0xFFFCC22C)

1702 
	#AT91C_CH1_CDTYR
 ((
AT91_REG
 *) 0xFFFCC224)

1704 
	#AT91C_CH0_CUPDR
 ((
AT91_REG
 *) 0xFFFCC210)

1705 
	#AT91C_CH0_CPRDR
 ((
AT91_REG
 *) 0xFFFCC208)

1706 
	#AT91C_CH0_CMR
 ((
AT91_REG
 *) 0xFFFCC200)

1707 
	#AT91C_CH0_Re£rved
 ((
AT91_REG
 *) 0xFFFCC214)

1708 
	#AT91C_CH0_CCNTR
 ((
AT91_REG
 *) 0xFFFCC20C)

1709 
	#AT91C_CH0_CDTYR
 ((
AT91_REG
 *) 0xFFFCC204)

1711 
	#AT91C_PWMC_VR
 ((
AT91_REG
 *) 0xFFFCC0FC)

1712 
	#AT91C_PWMC_ISR
 ((
AT91_REG
 *) 0xFFFCC01C)

1713 
	#AT91C_PWMC_IDR
 ((
AT91_REG
 *) 0xFFFCC014)

1714 
	#AT91C_PWMC_SR
 ((
AT91_REG
 *) 0xFFFCC00C)

1715 
	#AT91C_PWMC_ENA
 ((
AT91_REG
 *) 0xFFFCC004)

1716 
	#AT91C_PWMC_IMR
 ((
AT91_REG
 *) 0xFFFCC018)

1717 
	#AT91C_PWMC_MR
 ((
AT91_REG
 *) 0xFFFCC000)

1718 
	#AT91C_PWMC_DIS
 ((
AT91_REG
 *) 0xFFFCC008)

1719 
	#AT91C_PWMC_IER
 ((
AT91_REG
 *) 0xFFFCC010)

1721 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

1722 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

1723 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

1724 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

1725 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

1726 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

1727 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

1728 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

1729 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

1730 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

1731 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

1732 

	)

1736 
	#AT91C_PIO_PA0
 (() 1 << 0)

1737 
	#AT91C_PA0_PWM0
 ((Ë
AT91C_PIO_PA0
)

1738 
	#AT91C_PA0_TIOA0
 ((Ë
AT91C_PIO_PA0
)

1739 
	#AT91C_PIO_PA1
 (() 1 << 1)

1740 
	#AT91C_PA1_PWM1
 ((Ë
AT91C_PIO_PA1
)

1741 
	#AT91C_PA1_TIOB0
 ((Ë
AT91C_PIO_PA1
)

1742 
	#AT91C_PIO_PA10
 (() 1 << 10)

1743 
	#AT91C_PA10_DTXD
 ((Ë
AT91C_PIO_PA10
)

1744 
	#AT91C_PA10_NPCS2
 ((Ë
AT91C_PIO_PA10
)

1745 
	#AT91C_PIO_PA11
 (() 1 << 11)

1746 
	#AT91C_PA11_NPCS0
 ((Ë
AT91C_PIO_PA11
)

1747 
	#AT91C_PA11_PWM0
 ((Ë
AT91C_PIO_PA11
)

1748 
	#AT91C_PIO_PA12
 (() 1 << 12)

1749 
	#AT91C_PA12_MISO
 ((Ë
AT91C_PIO_PA12
)

1750 
	#AT91C_PA12_PWM1
 ((Ë
AT91C_PIO_PA12
)

1751 
	#AT91C_PIO_PA13
 (() 1 << 13)

1752 
	#AT91C_PA13_MOSI
 ((Ë
AT91C_PIO_PA13
)

1753 
	#AT91C_PA13_PWM2
 ((Ë
AT91C_PIO_PA13
)

1754 
	#AT91C_PIO_PA14
 (() 1 << 14)

1755 
	#AT91C_PA14_SPCK
 ((Ë
AT91C_PIO_PA14
)

1756 
	#AT91C_PA14_PWM3
 ((Ë
AT91C_PIO_PA14
)

1757 
	#AT91C_PIO_PA15
 (() 1 << 15)

1758 
	#AT91C_PA15_TF
 ((Ë
AT91C_PIO_PA15
)

1759 
	#AT91C_PA15_TIOA1
 ((Ë
AT91C_PIO_PA15
)

1760 
	#AT91C_PIO_PA16
 (() 1 << 16)

1761 
	#AT91C_PA16_TK
 ((Ë
AT91C_PIO_PA16
)

1762 
	#AT91C_PA16_TIOB1
 ((Ë
AT91C_PIO_PA16
)

1763 
	#AT91C_PIO_PA17
 (() 1 << 17)

1764 
	#AT91C_PA17_TD
 ((Ë
AT91C_PIO_PA17
)

1765 
	#AT91C_PA17_PCK1
 ((Ë
AT91C_PIO_PA17
)

1766 
	#AT91C_PIO_PA18
 (() 1 << 18)

1767 
	#AT91C_PA18_RD
 ((Ë
AT91C_PIO_PA18
)

1768 
	#AT91C_PA18_PCK2
 ((Ë
AT91C_PIO_PA18
)

1769 
	#AT91C_PIO_PA19
 (() 1 << 19)

1770 
	#AT91C_PA19_RK
 ((Ë
AT91C_PIO_PA19
)

1771 
	#AT91C_PA19_FIQ
 ((Ë
AT91C_PIO_PA19
)

1772 
	#AT91C_PIO_PA2
 (() 1 << 2)

1773 
	#AT91C_PA2_PWM2
 ((Ë
AT91C_PIO_PA2
)

1774 
	#AT91C_PA2_SCK0
 ((Ë
AT91C_PIO_PA2
)

1775 
	#AT91C_PIO_PA20
 (() 1 << 20)

1776 
	#AT91C_PA20_RF
 ((Ë
AT91C_PIO_PA20
)

1777 
	#AT91C_PA20_IRQ0
 ((Ë
AT91C_PIO_PA20
)

1778 
	#AT91C_PIO_PA21
 (() 1 << 21)

1779 
	#AT91C_PA21_RXD1
 ((Ë
AT91C_PIO_PA21
)

1780 
	#AT91C_PA21_PCK1
 ((Ë
AT91C_PIO_PA21
)

1781 
	#AT91C_PIO_PA22
 (() 1 << 22)

1782 
	#AT91C_PA22_TXD1
 ((Ë
AT91C_PIO_PA22
)

1783 
	#AT91C_PA22_NPCS3
 ((Ë
AT91C_PIO_PA22
)

1784 
	#AT91C_PIO_PA23
 (() 1 << 23)

1785 
	#AT91C_PA23_SCK1
 ((Ë
AT91C_PIO_PA23
)

1786 
	#AT91C_PA23_PWM0
 ((Ë
AT91C_PIO_PA23
)

1787 
	#AT91C_PIO_PA24
 (() 1 << 24)

1788 
	#AT91C_PA24_RTS1
 ((Ë
AT91C_PIO_PA24
)

1789 
	#AT91C_PA24_PWM1
 ((Ë
AT91C_PIO_PA24
)

1790 
	#AT91C_PIO_PA25
 (() 1 << 25)

1791 
	#AT91C_PA25_CTS1
 ((Ë
AT91C_PIO_PA25
)

1792 
	#AT91C_PA25_PWM2
 ((Ë
AT91C_PIO_PA25
)

1793 
	#AT91C_PIO_PA26
 (() 1 << 26)

1794 
	#AT91C_PA26_DCD1
 ((Ë
AT91C_PIO_PA26
)

1795 
	#AT91C_PA26_TIOA2
 ((Ë
AT91C_PIO_PA26
)

1796 
	#AT91C_PIO_PA27
 (() 1 << 27)

1797 
	#AT91C_PA27_DTR1
 ((Ë
AT91C_PIO_PA27
)

1798 
	#AT91C_PA27_TIOB2
 ((Ë
AT91C_PIO_PA27
)

1799 
	#AT91C_PIO_PA28
 (() 1 << 28)

1800 
	#AT91C_PA28_DSR1
 ((Ë
AT91C_PIO_PA28
)

1801 
	#AT91C_PA28_TCLK1
 ((Ë
AT91C_PIO_PA28
)

1802 
	#AT91C_PIO_PA29
 (() 1 << 29)

1803 
	#AT91C_PA29_RI1
 ((Ë
AT91C_PIO_PA29
)

1804 
	#AT91C_PA29_TCLK2
 ((Ë
AT91C_PIO_PA29
)

1805 
	#AT91C_PIO_PA3
 (() 1 << 3)

1806 
	#AT91C_PA3_TWD
 ((Ë
AT91C_PIO_PA3
)

1807 
	#AT91C_PA3_NPCS3
 ((Ë
AT91C_PIO_PA3
)

1808 
	#AT91C_PIO_PA30
 (() 1 << 30)

1809 
	#AT91C_PA30_IRQ1
 ((Ë
AT91C_PIO_PA30
)

1810 
	#AT91C_PA30_NPCS2
 ((Ë
AT91C_PIO_PA30
)

1811 
	#AT91C_PIO_PA31
 (() 1 << 31)

1812 
	#AT91C_PA31_NPCS1
 ((Ë
AT91C_PIO_PA31
)

1813 
	#AT91C_PA31_PCK2
 ((Ë
AT91C_PIO_PA31
)

1814 
	#AT91C_PIO_PA4
 (() 1 << 4)

1815 
	#AT91C_PA4_TWCK
 ((Ë
AT91C_PIO_PA4
)

1816 
	#AT91C_PA4_TCLK0
 ((Ë
AT91C_PIO_PA4
)

1817 
	#AT91C_PIO_PA5
 (() 1 << 5)

1818 
	#AT91C_PA5_RXD0
 ((Ë
AT91C_PIO_PA5
)

1819 
	#AT91C_PA5_NPCS3
 ((Ë
AT91C_PIO_PA5
)

1820 
	#AT91C_PIO_PA6
 (() 1 << 6)

1821 
	#AT91C_PA6_TXD0
 ((Ë
AT91C_PIO_PA6
)

1822 
	#AT91C_PA6_PCK0
 ((Ë
AT91C_PIO_PA6
)

1823 
	#AT91C_PIO_PA7
 (() 1 << 7)

1824 
	#AT91C_PA7_RTS0
 ((Ë
AT91C_PIO_PA7
)

1825 
	#AT91C_PA7_PWM3
 ((Ë
AT91C_PIO_PA7
)

1826 
	#AT91C_PIO_PA8
 (() 1 << 8)

1827 
	#AT91C_PA8_CTS0
 ((Ë
AT91C_PIO_PA8
)

1828 
	#AT91C_PA8_ADTRG
 ((Ë
AT91C_PIO_PA8
)

1829 
	#AT91C_PIO_PA9
 (() 1 << 9)

1830 
	#AT91C_PA9_DRXD
 ((Ë
AT91C_PIO_PA9
)

1831 
	#AT91C_PA9_NPCS1
 ((Ë
AT91C_PIO_PA9
)

1832 

	)

1836 
	#AT91C_ID_FIQ
 (() 0)

1837 
	#AT91C_ID_SYS
 (() 1)

1838 
	#AT91C_ID_PIOA
 (() 2)

1839 
	#AT91C_ID_3_Re£rved
 (() 3)

1840 
	#AT91C_ID_ADC
 (() 4)

1841 
	#AT91C_ID_SPI
 (() 5)

1842 
	#AT91C_ID_US0
 (() 6)

1843 
	#AT91C_ID_US1
 (() 7)

1844 
	#AT91C_ID_SSC
 (() 8)

1845 
	#AT91C_ID_TWI
 (() 9)

1846 
	#AT91C_ID_PWMC
 (() 10)

1847 
	#AT91C_ID_UDP
 (() 11)

1848 
	#AT91C_ID_TC0
 (() 12)

1849 
	#AT91C_ID_TC1
 (() 13)

1850 
	#AT91C_ID_TC2
 (() 14)

1851 
	#AT91C_ID_15_Re£rved
 (() 15)

1852 
	#AT91C_ID_16_Re£rved
 (() 16)

1853 
	#AT91C_ID_17_Re£rved
 (() 17)

1854 
	#AT91C_ID_18_Re£rved
 (() 18)

1855 
	#AT91C_ID_19_Re£rved
 (() 19)

1856 
	#AT91C_ID_20_Re£rved
 (() 20)

1857 
	#AT91C_ID_21_Re£rved
 (() 21)

1858 
	#AT91C_ID_22_Re£rved
 (() 22)

1859 
	#AT91C_ID_23_Re£rved
 (() 23)

1860 
	#AT91C_ID_24_Re£rved
 (() 24)

1861 
	#AT91C_ID_25_Re£rved
 (() 25)

1862 
	#AT91C_ID_26_Re£rved
 (() 26)

1863 
	#AT91C_ID_27_Re£rved
 (() 27)

1864 
	#AT91C_ID_28_Re£rved
 (() 28)

1865 
	#AT91C_ID_29_Re£rved
 (() 29)

1866 
	#AT91C_ID_IRQ0
 (() 30)

1867 
	#AT91C_ID_IRQ1
 (() 31)

1868 

	)

1872 
	#AT91C_BASE_SYSC
 ((
AT91PS_SYSC
) 0xFFFFF000)

1873 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

1874 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

1875 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

1876 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

1877 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

1878 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

1879 
	#AT91C_BASE_RSTC
 ((
AT91PS_RSTC
) 0xFFFFFD00)

1880 
	#AT91C_BASE_RTTC
 ((
AT91PS_RTTC
) 0xFFFFFD20)

1881 
	#AT91C_BASE_PITC
 ((
AT91PS_PITC
) 0xFFFFFD30)

1882 
	#AT91C_BASE_WDTC
 ((
AT91PS_WDTC
) 0xFFFFFD40)

1883 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

1884 
	#AT91C_BASE_PDC_SPI
 ((
AT91PS_PDC
) 0xFFFE0100)

1885 
	#AT91C_BASE_SPI
 ((
AT91PS_SPI
) 0xFFFE0000)

1886 
	#AT91C_BASE_PDC_ADC
 ((
AT91PS_PDC
) 0xFFFD8100)

1887 
	#AT91C_BASE_ADC
 ((
AT91PS_ADC
) 0xFFFD8000)

1888 
	#AT91C_BASE_PDC_SSC
 ((
AT91PS_PDC
) 0xFFFD4100)

1889 
	#AT91C_BASE_SSC
 ((
AT91PS_SSC
) 0xFFFD4000)

1890 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

1891 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

1892 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

1893 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

1894 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

1895 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

1896 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

1897 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

1898 
	#AT91C_BASE_TCB
 ((
AT91PS_TCB
) 0xFFFA0000)

1899 
	#AT91C_BASE_PWMC_CH3
 ((
AT91PS_PWMC_CH
) 0xFFFCC260)

1900 
	#AT91C_BASE_PWMC_CH2
 ((
AT91PS_PWMC_CH
) 0xFFFCC240)

1901 
	#AT91C_BASE_PWMC_CH1
 ((
AT91PS_PWMC_CH
) 0xFFFCC220)

1902 
	#AT91C_BASE_PWMC_CH0
 ((
AT91PS_PWMC_CH
) 0xFFFCC200)

1903 
	#AT91C_BASE_PWMC
 ((
AT91PS_PWMC
) 0xFFFCC000)

1904 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

1905 

	)

1909 
	#AT91C_ISRAM
 ((*) 0x00200000)

1910 
	#AT91C_ISRAM_SIZE
 (() 0x00004000)

1911 
	#AT91C_IFLASH
 ((*) 0x00100000)

1912 
	#AT91C_IFLASH_SIZE
 (() 0x00010000)

1913 

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7S64_inc.h

38 
	#SYSC_AIC_SMR
 ( 0)

39 
	#SYSC_AIC_SVR
 (128)

40 
	#SYSC_AIC_IVR
 (256)

41 
	#SYSC_AIC_FVR
 (260)

42 
	#SYSC_AIC_ISR
 (264)

43 
	#SYSC_AIC_IPR
 (268)

44 
	#SYSC_AIC_IMR
 (272)

45 
	#SYSC_AIC_CISR
 (276)

46 
	#SYSC_AIC_IECR
 (288)

47 
	#SYSC_AIC_IDCR
 (292)

48 
	#SYSC_AIC_ICCR
 (296)

49 
	#SYSC_AIC_ISCR
 (300)

50 
	#SYSC_AIC_EOICR
 (304)

51 
	#SYSC_AIC_SPU
 (308)

52 
	#SYSC_AIC_DCR
 (312)

53 
	#SYSC_AIC_FFER
 (320)

54 
	#SYSC_AIC_FFDR
 (324)

55 
	#SYSC_AIC_FFSR
 (328)

56 
	#SYSC_DBGU_CR
 (512)

57 
	#SYSC_DBGU_MR
 (516)

58 
	#SYSC_DBGU_IER
 (520)

59 
	#SYSC_DBGU_IDR
 (524)

60 
	#SYSC_DBGU_IMR
 (528)

61 
	#SYSC_DBGU_CSR
 (532)

62 
	#SYSC_DBGU_RHR
 (536)

63 
	#SYSC_DBGU_THR
 (540)

64 
	#SYSC_DBGU_BRGR
 (544)

65 
	#SYSC_DBGU_C1R
 (576)

66 
	#SYSC_DBGU_C2R
 (580)

67 
	#SYSC_DBGU_FNTR
 (584)

68 
	#SYSC_DBGU_RPR
 (768)

69 
	#SYSC_DBGU_RCR
 (772)

70 
	#SYSC_DBGU_TPR
 (776)

71 
	#SYSC_DBGU_TCR
 (780)

72 
	#SYSC_DBGU_RNPR
 (784)

73 
	#SYSC_DBGU_RNCR
 (788)

74 
	#SYSC_DBGU_TNPR
 (792)

75 
	#SYSC_DBGU_TNCR
 (796)

76 
	#SYSC_DBGU_PTCR
 (800)

77 
	#SYSC_DBGU_PTSR
 (804)

78 
	#SYSC_PIOA_PER
 (1024)

79 
	#SYSC_PIOA_PDR
 (1028)

80 
	#SYSC_PIOA_PSR
 (1032)

81 
	#SYSC_PIOA_OER
 (1040)

82 
	#SYSC_PIOA_ODR
 (1044)

83 
	#SYSC_PIOA_OSR
 (1048)

84 
	#SYSC_PIOA_IFER
 (1056)

85 
	#SYSC_PIOA_IFDR
 (1060)

86 
	#SYSC_PIOA_IFSR
 (1064)

87 
	#SYSC_PIOA_SODR
 (1072)

88 
	#SYSC_PIOA_CODR
 (1076)

89 
	#SYSC_PIOA_ODSR
 (1080)

90 
	#SYSC_PIOA_PDSR
 (1084)

91 
	#SYSC_PIOA_IER
 (1088)

92 
	#SYSC_PIOA_IDR
 (1092)

93 
	#SYSC_PIOA_IMR
 (1096)

94 
	#SYSC_PIOA_ISR
 (1100)

95 
	#SYSC_PIOA_MDER
 (1104)

96 
	#SYSC_PIOA_MDDR
 (1108)

97 
	#SYSC_PIOA_MDSR
 (1112)

98 
	#SYSC_PIOA_PPUDR
 (1120)

99 
	#SYSC_PIOA_PPUER
 (1124)

100 
	#SYSC_PIOA_PPUSR
 (1128)

101 
	#SYSC_PIOA_ASR
 (1136)

102 
	#SYSC_PIOA_BSR
 (1140)

103 
	#SYSC_PIOA_ABSR
 (1144)

104 
	#SYSC_PIOA_OWER
 (1184)

105 
	#SYSC_PIOA_OWDR
 (1188)

106 
	#SYSC_PIOA_OWSR
 (1192)

107 
	#SYSC_PMC_SCER
 (3072)

108 
	#SYSC_PMC_SCDR
 (3076)

109 
	#SYSC_PMC_SCSR
 (3080)

110 
	#SYSC_PMC_PCER
 (3088)

111 
	#SYSC_PMC_PCDR
 (3092)

112 
	#SYSC_PMC_PCSR
 (3096)

113 
	#SYSC_PMC_MOR
 (3104)

114 
	#SYSC_PMC_MCFR
 (3108)

115 
	#SYSC_PMC_PLLR
 (3116)

116 
	#SYSC_PMC_MCKR
 (3120)

117 
	#SYSC_PMC_PCKR
 (3136)

118 
	#SYSC_PMC_IER
 (3168)

119 
	#SYSC_PMC_IDR
 (3172)

120 
	#SYSC_PMC_SR
 (3176)

121 
	#SYSC_PMC_IMR
 (3180)

122 
	#SYSC_RSTC_RCR
 (3328)

123 
	#SYSC_RSTC_RSR
 (3332)

124 
	#SYSC_RSTC_RMR
 (3336)

125 
	#SYSC_RTTC_RTMR
 (3360)

126 
	#SYSC_RTTC_RTAR
 (3364)

127 
	#SYSC_RTTC_RTVR
 (3368)

128 
	#SYSC_RTTC_RTSR
 (3372)

129 
	#SYSC_PITC_PIMR
 (3376)

130 
	#SYSC_PITC_PISR
 (3380)

131 
	#SYSC_PITC_PIVR
 (3384)

132 
	#SYSC_PITC_PIIR
 (3388)

133 
	#SYSC_WDTC_WDCR
 (3392)

134 
	#SYSC_WDTC_WDMR
 (3396)

135 
	#SYSC_WDTC_WDSR
 (3400)

136 
	#SYSC_SYSC_VRPM
 (3424)

138 
	#AT91C_SYSC_PSTDBY
 (0x1 << 0)

139 

	)

144 
	#AIC_SMR
 ( 0)

145 
	#AIC_SVR
 (128)

146 
	#AIC_IVR
 (256)

147 
	#AIC_FVR
 (260)

148 
	#AIC_ISR
 (264)

149 
	#AIC_IPR
 (268)

150 
	#AIC_IMR
 (272)

151 
	#AIC_CISR
 (276)

152 
	#AIC_IECR
 (288)

153 
	#AIC_IDCR
 (292)

154 
	#AIC_ICCR
 (296)

155 
	#AIC_ISCR
 (300)

156 
	#AIC_EOICR
 (304)

157 
	#AIC_SPU
 (308)

158 
	#AIC_DCR
 (312)

159 
	#AIC_FFER
 (320)

160 
	#AIC_FFDR
 (324)

161 
	#AIC_FFSR
 (328)

163 
	#AT91C_AIC_PRIOR
 (0x7 << 0)

164 
	#AT91C_AIC_PRIOR_LOWEST
 (0x0)

165 
	#AT91C_AIC_PRIOR_HIGHEST
 (0x7)

166 
	#AT91C_AIC_SRCTYPE
 (0x3 << 5)

167 
	#AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
 (0x0 << 5)

168 
	#AT91C_AIC_SRCTYPE_INT_EDGE_TRIGGERED
 (0x1 << 5)

169 
	#AT91C_AIC_SRCTYPE_EXT_HIGH_LEVEL
 (0x2 << 5)

170 
	#AT91C_AIC_SRCTYPE_EXT_POSITIVE_EDGE
 (0x3 << 5)

172 
	#AT91C_AIC_NFIQ
 (0x1 << 0)

173 
	#AT91C_AIC_NIRQ
 (0x1 << 1)

175 
	#AT91C_AIC_DCR_PROT
 (0x1 << 0)

176 
	#AT91C_AIC_DCR_GMSK
 (0x1 << 1)

177 

	)

182 
	#DBGU_CR
 ( 0)

183 
	#DBGU_MR
 ( 4)

184 
	#DBGU_IER
 ( 8)

185 
	#DBGU_IDR
 (12)

186 
	#DBGU_IMR
 (16)

187 
	#DBGU_CSR
 (20)

188 
	#DBGU_RHR
 (24)

189 
	#DBGU_THR
 (28)

190 
	#DBGU_BRGR
 (32)

191 
	#DBGU_C1R
 (64)

192 
	#DBGU_C2R
 (68)

193 
	#DBGU_FNTR
 (72)

194 
	#DBGU_RPR
 (256)

195 
	#DBGU_RCR
 (260)

196 
	#DBGU_TPR
 (264)

197 
	#DBGU_TCR
 (268)

198 
	#DBGU_RNPR
 (272)

199 
	#DBGU_RNCR
 (276)

200 
	#DBGU_TNPR
 (280)

201 
	#DBGU_TNCR
 (284)

202 
	#DBGU_PTCR
 (288)

203 
	#DBGU_PTSR
 (292)

205 
	#AT91C_US_RSTRX
 (0x1 << 2)

206 
	#AT91C_US_RSTTX
 (0x1 << 3)

207 
	#AT91C_US_RXEN
 (0x1 << 4)

208 
	#AT91C_US_RXDIS
 (0x1 << 5)

209 
	#AT91C_US_TXEN
 (0x1 << 6)

210 
	#AT91C_US_TXDIS
 (0x1 << 7)

212 
	#AT91C_US_PAR
 (0x7 << 9)

213 
	#AT91C_US_PAR_EVEN
 (0x0 << 9)

214 
	#AT91C_US_PAR_ODD
 (0x1 << 9)

215 
	#AT91C_US_PAR_SPACE
 (0x2 << 9)

216 
	#AT91C_US_PAR_MARK
 (0x3 << 9)

217 
	#AT91C_US_PAR_NONE
 (0x4 << 9)

218 
	#AT91C_US_PAR_MULTI_DROP
 (0x6 << 9)

219 
	#AT91C_US_CHMODE
 (0x3 << 14)

220 
	#AT91C_US_CHMODE_NORMAL
 (0x0 << 14)

221 
	#AT91C_US_CHMODE_AUTO
 (0x1 << 14)

222 
	#AT91C_US_CHMODE_LOCAL
 (0x2 << 14)

223 
	#AT91C_US_CHMODE_REMOTE
 (0x3 << 14)

225 
	#AT91C_US_RXRDY
 (0x1 << 0)

226 
	#AT91C_US_TXRDY
 (0x1 << 1)

227 
	#AT91C_US_ENDRX
 (0x1 << 3)

228 
	#AT91C_US_ENDTX
 (0x1 << 4)

229 
	#AT91C_US_OVRE
 (0x1 << 5)

230 
	#AT91C_US_FRAME
 (0x1 << 6)

231 
	#AT91C_US_PARE
 (0x1 << 7)

232 
	#AT91C_US_TXEMPTY
 (0x1 << 9)

233 
	#AT91C_US_TXBUFE
 (0x1 << 11)

234 
	#AT91C_US_RXBUFF
 (0x1 << 12)

235 
	#AT91C_US_COMM_TX
 (0x1 << 30)

236 
	#AT91C_US_COMM_RX
 (0x1 << 31)

241 
	#AT91C_US_FORCE_NTRST
 (0x1 << 0)

242 

	)

247 
	#PDC_RPR
 ( 0)

248 
	#PDC_RCR
 ( 4)

249 
	#PDC_TPR
 ( 8)

250 
	#PDC_TCR
 (12)

251 
	#PDC_RNPR
 (16)

252 
	#PDC_RNCR
 (20)

253 
	#PDC_TNPR
 (24)

254 
	#PDC_TNCR
 (28)

255 
	#PDC_PTCR
 (32)

256 
	#PDC_PTSR
 (36)

258 
	#AT91C_PDC_RXTEN
 (0x1 << 0)

259 
	#AT91C_PDC_RXTDIS
 (0x1 << 1)

260 
	#AT91C_PDC_TXTEN
 (0x1 << 8)

261 
	#AT91C_PDC_TXTDIS
 (0x1 << 9)

263 

	)

268 
	#PIO_PER
 ( 0)

269 
	#PIO_PDR
 ( 4)

270 
	#PIO_PSR
 ( 8)

271 
	#PIO_OER
 (16)

272 
	#PIO_ODR
 (20)

273 
	#PIO_OSR
 (24)

274 
	#PIO_IFER
 (32)

275 
	#PIO_IFDR
 (36)

276 
	#PIO_IFSR
 (40)

277 
	#PIO_SODR
 (48)

278 
	#PIO_CODR
 (52)

279 
	#PIO_ODSR
 (56)

280 
	#PIO_PDSR
 (60)

281 
	#PIO_IER
 (64)

282 
	#PIO_IDR
 (68)

283 
	#PIO_IMR
 (72)

284 
	#PIO_ISR
 (76)

285 
	#PIO_MDER
 (80)

286 
	#PIO_MDDR
 (84)

287 
	#PIO_MDSR
 (88)

288 
	#PIO_PPUDR
 (96)

289 
	#PIO_PPUER
 (100)

290 
	#PIO_PPUSR
 (104)

291 
	#PIO_ASR
 (112)

292 
	#PIO_BSR
 (116)

293 
	#PIO_ABSR
 (120)

294 
	#PIO_OWER
 (160)

295 
	#PIO_OWDR
 (164)

296 
	#PIO_OWSR
 (168)

297 

	)

302 
	#CKGR_MOR
 ( 0)

303 
	#CKGR_MCFR
 ( 4)

304 
	#CKGR_PLLR
 (12)

306 
	#AT91C_CKGR_MOSCEN
 (0x1 << 0)

307 
	#AT91C_CKGR_OSCBYPASS
 (0x1 << 1)

308 
	#AT91C_CKGR_OSCOUNT
 (0xFF << 8)

310 
	#AT91C_CKGR_MAINF
 (0xFFFF << 0)

311 
	#AT91C_CKGR_MAINRDY
 (0x1 << 16)

313 
	#AT91C_CKGR_DIV
 (0xFF << 0)

314 
	#AT91C_CKGR_DIV_0
 (0x0)

315 
	#AT91C_CKGR_DIV_BYPASS
 (0x1)

316 
	#AT91C_CKGR_PLLCOUNT
 (0x3F << 8)

317 
	#AT91C_CKGR_OUT
 (0x3 << 14)

318 
	#AT91C_CKGR_OUT_0
 (0x0 << 14)

319 
	#AT91C_CKGR_OUT_1
 (0x1 << 14)

320 
	#AT91C_CKGR_OUT_2
 (0x2 << 14)

321 
	#AT91C_CKGR_OUT_3
 (0x3 << 14)

322 
	#AT91C_CKGR_MUL
 (0x7FF << 16)

323 
	#AT91C_CKGR_USBDIV
 (0x3 << 28)

324 
	#AT91C_CKGR_USBDIV_0
 (0x0 << 28)

325 
	#AT91C_CKGR_USBDIV_1
 (0x1 << 28)

326 
	#AT91C_CKGR_USBDIV_2
 (0x2 << 28)

327 

	)

332 
	#PMC_SCER
 ( 0)

333 
	#PMC_SCDR
 ( 4)

334 
	#PMC_SCSR
 ( 8)

335 
	#PMC_PCER
 (16)

336 
	#PMC_PCDR
 (20)

337 
	#PMC_PCSR
 (24)

338 
	#PMC_MOR
 (32)

339 
	#PMC_MCFR
 (36)

340 
	#PMC_PLLR
 (44)

341 
	#PMC_MCKR
 (48)

342 
	#PMC_PCKR
 (64)

343 
	#PMC_IER
 (96)

344 
	#PMC_IDR
 (100)

345 
	#PMC_SR
 (104)

346 
	#PMC_IMR
 (108)

348 
	#AT91C_PMC_PCK
 (0x1 << 0)

349 
	#AT91C_PMC_UDP
 (0x1 << 7)

350 
	#AT91C_PMC_PCK0
 (0x1 << 8)

351 
	#AT91C_PMC_PCK1
 (0x1 << 9)

352 
	#AT91C_PMC_PCK2
 (0x1 << 10)

353 
	#AT91C_PMC_PCK3
 (0x1 << 11)

360 
	#AT91C_PMC_CSS
 (0x3 << 0)

361 
	#AT91C_PMC_CSS_SLOW_CLK
 (0x0)

362 
	#AT91C_PMC_CSS_MAIN_CLK
 (0x1)

363 
	#AT91C_PMC_CSS_PLL_CLK
 (0x3)

364 
	#AT91C_PMC_PRES
 (0x7 << 2)

365 
	#AT91C_PMC_PRES_CLK
 (0x0 << 2)

366 
	#AT91C_PMC_PRES_CLK_2
 (0x1 << 2)

367 
	#AT91C_PMC_PRES_CLK_4
 (0x2 << 2)

368 
	#AT91C_PMC_PRES_CLK_8
 (0x3 << 2)

369 
	#AT91C_PMC_PRES_CLK_16
 (0x4 << 2)

370 
	#AT91C_PMC_PRES_CLK_32
 (0x5 << 2)

371 
	#AT91C_PMC_PRES_CLK_64
 (0x6 << 2)

374 
	#AT91C_PMC_MOSCS
 (0x1 << 0)

375 
	#AT91C_PMC_LOCK
 (0x1 << 2)

376 
	#AT91C_PMC_MCKRDY
 (0x1 << 3)

377 
	#AT91C_PMC_PCK0RDY
 (0x1 << 8)

378 
	#AT91C_PMC_PCK1RDY
 (0x1 << 9)

379 
	#AT91C_PMC_PCK2RDY
 (0x1 << 10)

380 
	#AT91C_PMC_PCK3RDY
 (0x1 << 11)

384 

	)

389 
	#RSTC_RCR
 ( 0)

390 
	#RSTC_RSR
 ( 4)

391 
	#RSTC_RMR
 ( 8)

393 
	#AT91C_SYSC_PROCRST
 (0x1 << 0)

394 
	#AT91C_SYSC_ICERST
 (0x1 << 1)

395 
	#AT91C_SYSC_PERRST
 (0x1 << 2)

396 
	#AT91C_SYSC_EXTRST
 (0x1 << 3)

397 
	#AT91C_SYSC_KEY
 (0xFF << 24)

399 
	#AT91C_SYSC_URSTS
 (0x1 << 0)

400 
	#AT91C_SYSC_BODSTS
 (0x1 << 1)

401 
	#AT91C_SYSC_RSTTYP
 (0x7 << 8)

402 
	#AT91C_SYSC_RSTTYP_POWERUP
 (0x0 << 8)

403 
	#AT91C_SYSC_RSTTYP_WATCHDOG
 (0x2 << 8)

404 
	#AT91C_SYSC_RSTTYP_SOFTWARE
 (0x3 << 8)

405 
	#AT91C_SYSC_RSTTYP_USER
 (0x4 << 8)

406 
	#AT91C_SYSC_RSTTYP_BROWNOUT
 (0x5 << 8)

407 
	#AT91C_SYSC_NRSTL
 (0x1 << 16)

408 
	#AT91C_SYSC_SRCMP
 (0x1 << 17)

410 
	#AT91C_SYSC_URSTEN
 (0x1 << 0)

411 
	#AT91C_SYSC_URSTIEN
 (0x1 << 4)

412 
	#AT91C_SYSC_ERSTL
 (0xF << 8)

413 
	#AT91C_SYSC_BODIEN
 (0x1 << 16)

414 

	)

419 
	#RTTC_RTMR
 ( 0)

420 
	#RTTC_RTAR
 ( 4)

421 
	#RTTC_RTVR
 ( 8)

422 
	#RTTC_RTSR
 (12)

424 
	#AT91C_SYSC_RTPRES
 (0xFFFF << 0)

425 
	#AT91C_SYSC_ALMIEN
 (0x1 << 16)

426 
	#AT91C_SYSC_RTTINCIEN
 (0x1 << 17)

427 
	#AT91C_SYSC_RTTRST
 (0x1 << 18)

429 
	#AT91C_SYSC_ALMV
 (0x0 << 0)

431 
	#AT91C_SYSC_CRTV
 (0x0 << 0)

433 
	#AT91C_SYSC_ALMS
 (0x1 << 0)

434 
	#AT91C_SYSC_RTTINC
 (0x1 << 1)

435 

	)

440 
	#PITC_PIMR
 ( 0)

441 
	#PITC_PISR
 ( 4)

442 
	#PITC_PIVR
 ( 8)

443 
	#PITC_PIIR
 (12)

445 
	#AT91C_SYSC_PIV
 (0xFFFFF << 0)

446 
	#AT91C_SYSC_PITEN
 (0x1 << 24)

447 
	#AT91C_SYSC_PITIEN
 (0x1 << 25)

449 
	#AT91C_SYSC_PITS
 (0x1 << 0)

451 
	#AT91C_SYSC_CPIV
 (0xFFFFF << 0)

452 
	#AT91C_SYSC_PICNT
 (0xFFF << 20)

454 

	)

459 
	#WDTC_WDCR
 ( 0)

460 
	#WDTC_WDMR
 ( 4)

461 
	#WDTC_WDSR
 ( 8)

463 
	#AT91C_SYSC_WDRSTT
 (0x1 << 0)

465 
	#AT91C_SYSC_WDV
 (0xFFF << 0)

466 
	#AT91C_SYSC_WDFIEN
 (0x1 << 12)

467 
	#AT91C_SYSC_WDRSTEN
 (0x1 << 13)

468 
	#AT91C_SYSC_WDRPROC
 (0x1 << 14)

469 
	#AT91C_SYSC_WDDIS
 (0x1 << 15)

470 
	#AT91C_SYSC_WDD
 (0xFFF << 16)

471 
	#AT91C_SYSC_WDDBGHLT
 (0x1 << 28)

472 
	#AT91C_SYSC_WDIDLEHLT
 (0x1 << 29)

474 
	#AT91C_SYSC_WDUNF
 (0x1 << 0)

475 
	#AT91C_SYSC_WDERR
 (0x1 << 1)

476 

	)

481 
	#MC_RCR
 ( 0)

482 
	#MC_ASR
 ( 4)

483 
	#MC_AASR
 ( 8)

484 
	#MC_FMR
 (96)

485 
	#MC_FCR
 (100)

486 
	#MC_FSR
 (104)

488 
	#AT91C_MC_RCB
 (0x1 << 0)

490 
	#AT91C_MC_UNDADD
 (0x1 << 0)

491 
	#AT91C_MC_MISADD
 (0x1 << 1)

492 
	#AT91C_MC_ABTSZ
 (0x3 << 8)

493 
	#AT91C_MC_ABTSZ_BYTE
 (0x0 << 8)

494 
	#AT91C_MC_ABTSZ_HWORD
 (0x1 << 8)

495 
	#AT91C_MC_ABTSZ_WORD
 (0x2 << 8)

496 
	#AT91C_MC_ABTTYP
 (0x3 << 10)

497 
	#AT91C_MC_ABTTYP_DATAR
 (0x0 << 10)

498 
	#AT91C_MC_ABTTYP_DATAW
 (0x1 << 10)

499 
	#AT91C_MC_ABTTYP_FETCH
 (0x2 << 10)

500 
	#AT91C_MC_MST0
 (0x1 << 16)

501 
	#AT91C_MC_MST1
 (0x1 << 17)

502 
	#AT91C_MC_SVMST0
 (0x1 << 24)

503 
	#AT91C_MC_SVMST1
 (0x1 << 25)

505 
	#AT91C_MC_FRDY
 (0x1 << 0)

506 
	#AT91C_MC_LOCKE
 (0x1 << 2)

507 
	#AT91C_MC_PROGE
 (0x1 << 3)

508 
	#AT91C_MC_NEBP
 (0x1 << 7)

509 
	#AT91C_MC_FWS
 (0x3 << 8)

510 
	#AT91C_MC_FWS_0FWS
 (0x0 << 8)

511 
	#AT91C_MC_FWS_1FWS
 (0x1 << 8)

512 
	#AT91C_MC_FWS_2FWS
 (0x2 << 8)

513 
	#AT91C_MC_FWS_3FWS
 (0x3 << 8)

514 
	#AT91C_MC_FMCN
 (0xFF << 16)

516 
	#AT91C_MC_FCMD
 (0xF << 0)

517 
	#AT91C_MC_FCMD_START_PROG
 (0x1)

518 
	#AT91C_MC_FCMD_LOCK
 (0x2)

519 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (0x3)

520 
	#AT91C_MC_FCMD_UNLOCK
 (0x4)

521 
	#AT91C_MC_FCMD_ERASE_ALL
 (0x8)

522 
	#AT91C_MC_FCMD_SET_GP_NVM
 (0xB)

523 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (0xD)

524 
	#AT91C_MC_FCMD_SET_SECURITY
 (0xF)

525 
	#AT91C_MC_PAGEN
 (0x3FF << 8)

526 
	#AT91C_MC_KEY
 (0xFF << 24)

528 
	#AT91C_MC_SECURITY
 (0x1 << 4)

529 
	#AT91C_MC_GPNVM0
 (0x1 << 8)

530 
	#AT91C_MC_GPNVM1
 (0x1 << 9)

531 
	#AT91C_MC_GPNVM2
 (0x1 << 10)

532 
	#AT91C_MC_GPNVM3
 (0x1 << 11)

533 
	#AT91C_MC_GPNVM4
 (0x1 << 12)

534 
	#AT91C_MC_GPNVM5
 (0x1 << 13)

535 
	#AT91C_MC_GPNVM6
 (0x1 << 14)

536 
	#AT91C_MC_GPNVM7
 (0x1 << 15)

537 
	#AT91C_MC_LOCKS0
 (0x1 << 16)

538 
	#AT91C_MC_LOCKS1
 (0x1 << 17)

539 
	#AT91C_MC_LOCKS2
 (0x1 << 18)

540 
	#AT91C_MC_LOCKS3
 (0x1 << 19)

541 
	#AT91C_MC_LOCKS4
 (0x1 << 20)

542 
	#AT91C_MC_LOCKS5
 (0x1 << 21)

543 
	#AT91C_MC_LOCKS6
 (0x1 << 22)

544 
	#AT91C_MC_LOCKS7
 (0x1 << 23)

545 
	#AT91C_MC_LOCKS8
 (0x1 << 24)

546 
	#AT91C_MC_LOCKS9
 (0x1 << 25)

547 
	#AT91C_MC_LOCKS10
 (0x1 << 26)

548 
	#AT91C_MC_LOCKS11
 (0x1 << 27)

549 
	#AT91C_MC_LOCKS12
 (0x1 << 28)

550 
	#AT91C_MC_LOCKS13
 (0x1 << 29)

551 
	#AT91C_MC_LOCKS14
 (0x1 << 30)

552 
	#AT91C_MC_LOCKS15
 (0x1 << 31)

553 

	)

558 
	#SPI_CR
 ( 0)

559 
	#SPI_MR
 ( 4)

560 
	#SPI_RDR
 ( 8)

561 
	#SPI_TDR
 (12)

562 
	#SPI_SR
 (16)

563 
	#SPI_IER
 (20)

564 
	#SPI_IDR
 (24)

565 
	#SPI_IMR
 (28)

566 
	#SPI_CSR
 (48)

567 
	#SPI_RPR
 (256)

568 
	#SPI_RCR
 (260)

569 
	#SPI_TPR
 (264)

570 
	#SPI_TCR
 (268)

571 
	#SPI_RNPR
 (272)

572 
	#SPI_RNCR
 (276)

573 
	#SPI_TNPR
 (280)

574 
	#SPI_TNCR
 (284)

575 
	#SPI_PTCR
 (288)

576 
	#SPI_PTSR
 (292)

578 
	#AT91C_SPI_SPIEN
 (0x1 << 0)

579 
	#AT91C_SPI_SPIDIS
 (0x1 << 1)

580 
	#AT91C_SPI_SWRST
 (0x1 << 7)

581 
	#AT91C_SPI_LASTXFER
 (0x1 << 24)

583 
	#AT91C_SPI_MSTR
 (0x1 << 0)

584 
	#AT91C_SPI_PS
 (0x1 << 1)

585 
	#AT91C_SPI_PS_FIXED
 (0x0 << 1)

586 
	#AT91C_SPI_PS_VARIABLE
 (0x1 << 1)

587 
	#AT91C_SPI_PCSDEC
 (0x1 << 2)

588 
	#AT91C_SPI_FDIV
 (0x1 << 3)

589 
	#AT91C_SPI_MODFDIS
 (0x1 << 4)

590 
	#AT91C_SPI_LLB
 (0x1 << 7)

591 
	#AT91C_SPI_PCS
 (0xF << 16)

592 
	#AT91C_SPI_DLYBCS
 (0xFF << 24)

594 
	#AT91C_SPI_RD
 (0xFFFF << 0)

595 
	#AT91C_SPI_RPCS
 (0xF << 16)

597 
	#AT91C_SPI_TD
 (0xFFFF << 0)

598 
	#AT91C_SPI_TPCS
 (0xF << 16)

600 
	#AT91C_SPI_RDRF
 (0x1 << 0)

601 
	#AT91C_SPI_TDRE
 (0x1 << 1)

602 
	#AT91C_SPI_MODF
 (0x1 << 2)

603 
	#AT91C_SPI_OVRES
 (0x1 << 3)

604 
	#AT91C_SPI_ENDRX
 (0x1 << 4)

605 
	#AT91C_SPI_ENDTX
 (0x1 << 5)

606 
	#AT91C_SPI_RXBUFF
 (0x1 << 6)

607 
	#AT91C_SPI_TXBUFE
 (0x1 << 7)

608 
	#AT91C_SPI_NSSR
 (0x1 << 8)

609 
	#AT91C_SPI_TXEMPTY
 (0x1 << 9)

610 
	#AT91C_SPI_SPIENS
 (0x1 << 16)

615 
	#AT91C_SPI_CPOL
 (0x1 << 0)

616 
	#AT91C_SPI_NCPHA
 (0x1 << 1)

617 
	#AT91C_SPI_CSAAT
 (0x1 << 2)

618 
	#AT91C_SPI_BITS
 (0xF << 4)

619 
	#AT91C_SPI_BITS_8
 (0x0 << 4)

620 
	#AT91C_SPI_BITS_9
 (0x1 << 4)

621 
	#AT91C_SPI_BITS_10
 (0x2 << 4)

622 
	#AT91C_SPI_BITS_11
 (0x3 << 4)

623 
	#AT91C_SPI_BITS_12
 (0x4 << 4)

624 
	#AT91C_SPI_BITS_13
 (0x5 << 4)

625 
	#AT91C_SPI_BITS_14
 (0x6 << 4)

626 
	#AT91C_SPI_BITS_15
 (0x7 << 4)

627 
	#AT91C_SPI_BITS_16
 (0x8 << 4)

628 
	#AT91C_SPI_SCBR
 (0xFF << 8)

629 
	#AT91C_SPI_DLYBS
 (0xFF << 16)

630 
	#AT91C_SPI_DLYBCT
 (0xFF << 24)

631 

	)

636 
	#ADC_CR
 ( 0)

637 
	#ADC_MR
 ( 4)

638 
	#ADC_CHER
 (16)

639 
	#ADC_CHDR
 (20)

640 
	#ADC_CHSR
 (24)

641 
	#ADC_SR
 (28)

642 
	#ADC_LCDR
 (32)

643 
	#ADC_IER
 (36)

644 
	#ADC_IDR
 (40)

645 
	#ADC_IMR
 (44)

646 
	#ADC_CDR0
 (48)

647 
	#ADC_CDR1
 (52)

648 
	#ADC_CDR2
 (56)

649 
	#ADC_CDR3
 (60)

650 
	#ADC_CDR4
 (64)

651 
	#ADC_CDR5
 (68)

652 
	#ADC_CDR6
 (72)

653 
	#ADC_CDR7
 (76)

654 
	#ADC_RPR
 (256)

655 
	#ADC_RCR
 (260)

656 
	#ADC_TPR
 (264)

657 
	#ADC_TCR
 (268)

658 
	#ADC_RNPR
 (272)

659 
	#ADC_RNCR
 (276)

660 
	#ADC_TNPR
 (280)

661 
	#ADC_TNCR
 (284)

662 
	#ADC_PTCR
 (288)

663 
	#ADC_PTSR
 (292)

665 
	#AT91C_ADC_SWRST
 (0x1 << 0)

666 
	#AT91C_ADC_START
 (0x1 << 1)

668 
	#AT91C_ADC_TRGEN
 (0x1 << 0)

669 
	#AT91C_ADC_TRGEN_DIS
 (0x0)

670 
	#AT91C_ADC_TRGEN_EN
 (0x1)

671 
	#AT91C_ADC_TRGSEL
 (0x7 << 1)

672 
	#AT91C_ADC_TRGSEL_TIOA0
 (0x0 << 1)

673 
	#AT91C_ADC_TRGSEL_TIOA1
 (0x1 << 1)

674 
	#AT91C_ADC_TRGSEL_TIOA2
 (0x2 << 1)

675 
	#AT91C_ADC_TRGSEL_TIOA3
 (0x3 << 1)

676 
	#AT91C_ADC_TRGSEL_TIOA4
 (0x4 << 1)

677 
	#AT91C_ADC_TRGSEL_TIOA5
 (0x5 << 1)

678 
	#AT91C_ADC_TRGSEL_EXT
 (0x6 << 1)

679 
	#AT91C_ADC_LOWRES
 (0x1 << 4)

680 
	#AT91C_ADC_LOWRES_10_BIT
 (0x0 << 4)

681 
	#AT91C_ADC_LOWRES_8_BIT
 (0x1 << 4)

682 
	#AT91C_ADC_SLEEP
 (0x1 << 5)

683 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (0x0 << 5)

684 
	#AT91C_ADC_SLEEP_MODE
 (0x1 << 5)

685 
	#AT91C_ADC_PRESCAL
 (0x3F << 8)

686 
	#AT91C_ADC_STARTUP
 (0x1F << 16)

687 
	#AT91C_ADC_SHTIM
 (0xF << 24)

689 
	#AT91C_ADC_CH0
 (0x1 << 0)

690 
	#AT91C_ADC_CH1
 (0x1 << 1)

691 
	#AT91C_ADC_CH2
 (0x1 << 2)

692 
	#AT91C_ADC_CH3
 (0x1 << 3)

693 
	#AT91C_ADC_CH4
 (0x1 << 4)

694 
	#AT91C_ADC_CH5
 (0x1 << 5)

695 
	#AT91C_ADC_CH6
 (0x1 << 6)

696 
	#AT91C_ADC_CH7
 (0x1 << 7)

700 
	#AT91C_ADC_EOC0
 (0x1 << 0)

701 
	#AT91C_ADC_EOC1
 (0x1 << 1)

702 
	#AT91C_ADC_EOC2
 (0x1 << 2)

703 
	#AT91C_ADC_EOC3
 (0x1 << 3)

704 
	#AT91C_ADC_EOC4
 (0x1 << 4)

705 
	#AT91C_ADC_EOC5
 (0x1 << 5)

706 
	#AT91C_ADC_EOC6
 (0x1 << 6)

707 
	#AT91C_ADC_EOC7
 (0x1 << 7)

708 
	#AT91C_ADC_OVRE0
 (0x1 << 8)

709 
	#AT91C_ADC_OVRE1
 (0x1 << 9)

710 
	#AT91C_ADC_OVRE2
 (0x1 << 10)

711 
	#AT91C_ADC_OVRE3
 (0x1 << 11)

712 
	#AT91C_ADC_OVRE4
 (0x1 << 12)

713 
	#AT91C_ADC_OVRE5
 (0x1 << 13)

714 
	#AT91C_ADC_OVRE6
 (0x1 << 14)

715 
	#AT91C_ADC_OVRE7
 (0x1 << 15)

716 
	#AT91C_ADC_DRDY
 (0x1 << 16)

717 
	#AT91C_ADC_GOVRE
 (0x1 << 17)

718 
	#AT91C_ADC_ENDRX
 (0x1 << 18)

719 
	#AT91C_ADC_RXBUFF
 (0x1 << 19)

721 
	#AT91C_ADC_LDATA
 (0x3FF << 0)

726 
	#AT91C_ADC_DATA
 (0x3FF << 0)

734 

	)

739 
	#SSC_CR
 ( 0)

740 
	#SSC_CMR
 ( 4)

741 
	#SSC_RCMR
 (16)

742 
	#SSC_RFMR
 (20)

743 
	#SSC_TCMR
 (24)

744 
	#SSC_TFMR
 (28)

745 
	#SSC_RHR
 (32)

746 
	#SSC_THR
 (36)

747 
	#SSC_RSHR
 (48)

748 
	#SSC_TSHR
 (52)

749 
	#SSC_RC0R
 (56)

750 
	#SSC_RC1R
 (60)

751 
	#SSC_SR
 (64)

752 
	#SSC_IER
 (68)

753 
	#SSC_IDR
 (72)

754 
	#SSC_IMR
 (76)

755 
	#SSC_RPR
 (256)

756 
	#SSC_RCR
 (260)

757 
	#SSC_TPR
 (264)

758 
	#SSC_TCR
 (268)

759 
	#SSC_RNPR
 (272)

760 
	#SSC_RNCR
 (276)

761 
	#SSC_TNPR
 (280)

762 
	#SSC_TNCR
 (284)

763 
	#SSC_PTCR
 (288)

764 
	#SSC_PTSR
 (292)

766 
	#AT91C_SSC_RXEN
 (0x1 << 0)

767 
	#AT91C_SSC_RXDIS
 (0x1 << 1)

768 
	#AT91C_SSC_TXEN
 (0x1 << 8)

769 
	#AT91C_SSC_TXDIS
 (0x1 << 9)

770 
	#AT91C_SSC_SWRST
 (0x1 << 15)

772 
	#AT91C_SSC_CKS
 (0x3 << 0)

773 
	#AT91C_SSC_CKS_DIV
 (0x0)

774 
	#AT91C_SSC_CKS_TK
 (0x1)

775 
	#AT91C_SSC_CKS_RK
 (0x2)

776 
	#AT91C_SSC_CKO
 (0x7 << 2)

777 
	#AT91C_SSC_CKO_NONE
 (0x0 << 2)

778 
	#AT91C_SSC_CKO_CONTINOUS
 (0x1 << 2)

779 
	#AT91C_SSC_CKO_DATA_TX
 (0x2 << 2)

780 
	#AT91C_SSC_CKI
 (0x1 << 5)

781 
	#AT91C_SSC_CKG
 (0x3 << 6)

782 
	#AT91C_SSC_CKG_NONE
 (0x0 << 6)

783 
	#AT91C_SSC_CKG_LOW
 (0x1 << 6)

784 
	#AT91C_SSC_CKG_HIGH
 (0x2 << 6)

785 
	#AT91C_SSC_START
 (0xF << 8)

786 
	#AT91C_SSC_START_CONTINOUS
 (0x0 << 8)

787 
	#AT91C_SSC_START_TX
 (0x1 << 8)

788 
	#AT91C_SSC_START_LOW_RF
 (0x2 << 8)

789 
	#AT91C_SSC_START_HIGH_RF
 (0x3 << 8)

790 
	#AT91C_SSC_START_FALL_RF
 (0x4 << 8)

791 
	#AT91C_SSC_START_RISE_RF
 (0x5 << 8)

792 
	#AT91C_SSC_START_LEVEL_RF
 (0x6 << 8)

793 
	#AT91C_SSC_START_EDGE_RF
 (0x7 << 8)

794 
	#AT91C_SSC_START_0
 (0x8 << 8)

795 
	#AT91C_SSC_STOP
 (0x1 << 12)

796 
	#AT91C_SSC_STTOUT
 (0x1 << 15)

797 
	#AT91C_SSC_STTDLY
 (0xFF << 16)

798 
	#AT91C_SSC_PERIOD
 (0xFF << 24)

800 
	#AT91C_SSC_DATLEN
 (0x1F << 0)

801 
	#AT91C_SSC_LOOP
 (0x1 << 5)

802 
	#AT91C_SSC_MSBF
 (0x1 << 7)

803 
	#AT91C_SSC_DATNB
 (0xF << 8)

804 
	#AT91C_SSC_FSLEN
 (0xF << 16)

805 
	#AT91C_SSC_FSOS
 (0x7 << 20)

806 
	#AT91C_SSC_FSOS_NONE
 (0x0 << 20)

807 
	#AT91C_SSC_FSOS_NEGATIVE
 (0x1 << 20)

808 
	#AT91C_SSC_FSOS_POSITIVE
 (0x2 << 20)

809 
	#AT91C_SSC_FSOS_LOW
 (0x3 << 20)

810 
	#AT91C_SSC_FSOS_HIGH
 (0x4 << 20)

811 
	#AT91C_SSC_FSOS_TOGGLE
 (0x5 << 20)

812 
	#AT91C_SSC_FSEDGE
 (0x1 << 24)

815 
	#AT91C_SSC_DATDEF
 (0x1 << 5)

816 
	#AT91C_SSC_FSDEN
 (0x1 << 23)

818 
	#AT91C_SSC_TXRDY
 (0x1 << 0)

819 
	#AT91C_SSC_TXEMPTY
 (0x1 << 1)

820 
	#AT91C_SSC_ENDTX
 (0x1 << 2)

821 
	#AT91C_SSC_TXBUFE
 (0x1 << 3)

822 
	#AT91C_SSC_RXRDY
 (0x1 << 4)

823 
	#AT91C_SSC_OVRUN
 (0x1 << 5)

824 
	#AT91C_SSC_ENDRX
 (0x1 << 6)

825 
	#AT91C_SSC_RXBUFF
 (0x1 << 7)

826 
	#AT91C_SSC_CP0
 (0x1 << 8)

827 
	#AT91C_SSC_CP1
 (0x1 << 9)

828 
	#AT91C_SSC_TXSYN
 (0x1 << 10)

829 
	#AT91C_SSC_RXSYN
 (0x1 << 11)

830 
	#AT91C_SSC_TXENA
 (0x1 << 16)

831 
	#AT91C_SSC_RXENA
 (0x1 << 17)

835 

	)

840 
	#US_CR
 ( 0)

841 
	#US_MR
 ( 4)

842 
	#US_IER
 ( 8)

843 
	#US_IDR
 (12)

844 
	#US_IMR
 (16)

845 
	#US_CSR
 (20)

846 
	#US_RHR
 (24)

847 
	#US_THR
 (28)

848 
	#US_BRGR
 (32)

849 
	#US_RTOR
 (36)

850 
	#US_TTGR
 (40)

851 
	#US_FIDI
 (64)

852 
	#US_NER
 (68)

853 
	#US_XXR
 (72)

854 
	#US_IF
 (76)

855 
	#US_RPR
 (256)

856 
	#US_RCR
 (260)

857 
	#US_TPR
 (264)

858 
	#US_TCR
 (268)

859 
	#US_RNPR
 (272)

860 
	#US_RNCR
 (276)

861 
	#US_TNPR
 (280)

862 
	#US_TNCR
 (284)

863 
	#US_PTCR
 (288)

864 
	#US_PTSR
 (292)

866 
	#AT91C_US_RSTSTA
 (0x1 << 8)

867 
	#AT91C_US_STTBRK
 (0x1 << 9)

868 
	#AT91C_US_STPBRK
 (0x1 << 10)

869 
	#AT91C_US_STTTO
 (0x1 << 11)

870 
	#AT91C_US_SENDA
 (0x1 << 12)

871 
	#AT91C_US_RSTIT
 (0x1 << 13)

872 
	#AT91C_US_RSTNACK
 (0x1 << 14)

873 
	#AT91C_US_RETTO
 (0x1 << 15)

874 
	#AT91C_US_DTREN
 (0x1 << 16)

875 
	#AT91C_US_DTRDIS
 (0x1 << 17)

876 
	#AT91C_US_RTSEN
 (0x1 << 18)

877 
	#AT91C_US_RTSDIS
 (0x1 << 19)

879 
	#AT91C_US_USMODE
 (0xF << 0)

880 
	#AT91C_US_USMODE_NORMAL
 (0x0)

881 
	#AT91C_US_USMODE_RS485
 (0x1)

882 
	#AT91C_US_USMODE_HWHSH
 (0x2)

883 
	#AT91C_US_USMODE_MODEM
 (0x3)

884 
	#AT91C_US_USMODE_ISO7816_0
 (0x4)

885 
	#AT91C_US_USMODE_ISO7816_1
 (0x6)

886 
	#AT91C_US_USMODE_IRDA
 (0x8)

887 
	#AT91C_US_USMODE_SWHSH
 (0xC)

888 
	#AT91C_US_CLKS
 (0x3 << 4)

889 
	#AT91C_US_CLKS_CLOCK
 (0x0 << 4)

890 
	#AT91C_US_CLKS_FDIV1
 (0x1 << 4)

891 
	#AT91C_US_CLKS_SLOW
 (0x2 << 4)

892 
	#AT91C_US_CLKS_EXT
 (0x3 << 4)

893 
	#AT91C_US_CHRL
 (0x3 << 6)

894 
	#AT91C_US_CHRL_5_BITS
 (0x0 << 6)

895 
	#AT91C_US_CHRL_6_BITS
 (0x1 << 6)

896 
	#AT91C_US_CHRL_7_BITS
 (0x2 << 6)

897 
	#AT91C_US_CHRL_8_BITS
 (0x3 << 6)

898 
	#AT91C_US_SYNC
 (0x1 << 8)

899 
	#AT91C_US_NBSTOP
 (0x3 << 12)

900 
	#AT91C_US_NBSTOP_1_BIT
 (0x0 << 12)

901 
	#AT91C_US_NBSTOP_15_BIT
 (0x1 << 12)

902 
	#AT91C_US_NBSTOP_2_BIT
 (0x2 << 12)

903 
	#AT91C_US_MSBF
 (0x1 << 16)

904 
	#AT91C_US_MODE9
 (0x1 << 17)

905 
	#AT91C_US_CKLO
 (0x1 << 18)

906 
	#AT91C_US_OVER
 (0x1 << 19)

907 
	#AT91C_US_INACK
 (0x1 << 20)

908 
	#AT91C_US_DSNACK
 (0x1 << 21)

909 
	#AT91C_US_MAX_ITER
 (0x1 << 24)

910 
	#AT91C_US_FILTER
 (0x1 << 28)

912 
	#AT91C_US_RXBRK
 (0x1 << 2)

913 
	#AT91C_US_TIMEOUT
 (0x1 << 8)

914 
	#AT91C_US_ITERATION
 (0x1 << 10)

915 
	#AT91C_US_NACK
 (0x1 << 13)

916 
	#AT91C_US_RIIC
 (0x1 << 16)

917 
	#AT91C_US_DSRIC
 (0x1 << 17)

918 
	#AT91C_US_DCDIC
 (0x1 << 18)

919 
	#AT91C_US_CTSIC
 (0x1 << 19)

923 
	#AT91C_US_RI
 (0x1 << 20)

924 
	#AT91C_US_DSR
 (0x1 << 21)

925 
	#AT91C_US_DCD
 (0x1 << 22)

926 
	#AT91C_US_CTS
 (0x1 << 23)

927 

	)

932 
	#TWI_CR
 ( 0)

933 
	#TWI_MMR
 ( 4)

934 
	#TWI_SMR
 ( 8)

935 
	#TWI_IADR
 (12)

936 
	#TWI_CWGR
 (16)

937 
	#TWI_SR
 (32)

938 
	#TWI_IER
 (36)

939 
	#TWI_IDR
 (40)

940 
	#TWI_IMR
 (44)

941 
	#TWI_RHR
 (48)

942 
	#TWI_THR
 (52)

944 
	#AT91C_TWI_START
 (0x1 << 0)

945 
	#AT91C_TWI_STOP
 (0x1 << 1)

946 
	#AT91C_TWI_MSEN
 (0x1 << 2)

947 
	#AT91C_TWI_MSDIS
 (0x1 << 3)

948 
	#AT91C_TWI_SVEN
 (0x1 << 4)

949 
	#AT91C_TWI_SVDIS
 (0x1 << 5)

950 
	#AT91C_TWI_SWRST
 (0x1 << 7)

952 
	#AT91C_TWI_IADRSZ
 (0x3 << 8)

953 
	#AT91C_TWI_IADRSZ_NO
 (0x0 << 8)

954 
	#AT91C_TWI_IADRSZ_1_BYTE
 (0x1 << 8)

955 
	#AT91C_TWI_IADRSZ_2_BYTE
 (0x2 << 8)

956 
	#AT91C_TWI_IADRSZ_3_BYTE
 (0x3 << 8)

957 
	#AT91C_TWI_MREAD
 (0x1 << 12)

958 
	#AT91C_TWI_DADR
 (0x7F << 16)

960 
	#AT91C_TWI_SADR
 (0x7F << 16)

962 
	#AT91C_TWI_CLDIV
 (0xFF << 0)

963 
	#AT91C_TWI_CHDIV
 (0xFF << 8)

964 
	#AT91C_TWI_CKDIV
 (0x7 << 16)

966 
	#AT91C_TWI_TXCOMP
 (0x1 << 0)

967 
	#AT91C_TWI_RXRDY
 (0x1 << 1)

968 
	#AT91C_TWI_TXRDY
 (0x1 << 2)

969 
	#AT91C_TWI_SVREAD
 (0x1 << 3)

970 
	#AT91C_TWI_SVACC
 (0x1 << 4)

971 
	#AT91C_TWI_GCACC
 (0x1 << 5)

972 
	#AT91C_TWI_OVRE
 (0x1 << 6)

973 
	#AT91C_TWI_UNRE
 (0x1 << 7)

974 
	#AT91C_TWI_NACK
 (0x1 << 8)

975 
	#AT91C_TWI_ARBLST
 (0x1 << 9)

979 

	)

984 
	#TC_CCR
 ( 0)

985 
	#TC_CMR
 ( 4)

986 
	#TC_CV
 (16)

987 
	#TC_RA
 (20)

988 
	#TC_RB
 (24)

989 
	#TC_RC
 (28)

990 
	#TC_SR
 (32)

991 
	#TC_IER
 (36)

992 
	#TC_IDR
 (40)

993 
	#TC_IMR
 (44)

995 
	#AT91C_TC_CLKEN
 (0x1 << 0)

996 
	#AT91C_TC_CLKDIS
 (0x1 << 1)

997 
	#AT91C_TC_SWTRG
 (0x1 << 2)

999 
	#AT91C_TC_CLKS
 (0x7 << 0)

1000 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (0x0)

1001 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (0x1)

1002 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (0x2)

1003 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (0x3)

1004 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (0x4)

1005 
	#AT91C_TC_CLKS_XC0
 (0x5)

1006 
	#AT91C_TC_CLKS_XC1
 (0x6)

1007 
	#AT91C_TC_CLKS_XC2
 (0x7)

1008 
	#AT91C_TC_CLKI
 (0x1 << 3)

1009 
	#AT91C_TC_BURST
 (0x3 << 4)

1010 
	#AT91C_TC_BURST_NONE
 (0x0 << 4)

1011 
	#AT91C_TC_BURST_XC0
 (0x1 << 4)

1012 
	#AT91C_TC_BURST_XC1
 (0x2 << 4)

1013 
	#AT91C_TC_BURST_XC2
 (0x3 << 4)

1014 
	#AT91C_TC_CPCSTOP
 (0x1 << 6)

1015 
	#AT91C_TC_LDBSTOP
 (0x1 << 6)

1016 
	#AT91C_TC_LDBDIS
 (0x1 << 7)

1017 
	#AT91C_TC_CPCDIS
 (0x1 << 7)

1018 
	#AT91C_TC_ETRGEDG
 (0x3 << 8)

1019 
	#AT91C_TC_ETRGEDG_NONE
 (0x0 << 8)

1020 
	#AT91C_TC_ETRGEDG_RISING
 (0x1 << 8)

1021 
	#AT91C_TC_ETRGEDG_FALLING
 (0x2 << 8)

1022 
	#AT91C_TC_ETRGEDG_BOTH
 (0x3 << 8)

1023 
	#AT91C_TC_EEVTEDG
 (0x3 << 8)

1024 
	#AT91C_TC_EEVTEDG_NONE
 (0x0 << 8)

1025 
	#AT91C_TC_EEVTEDG_RISING
 (0x1 << 8)

1026 
	#AT91C_TC_EEVTEDG_FALLING
 (0x2 << 8)

1027 
	#AT91C_TC_EEVTEDG_BOTH
 (0x3 << 8)

1028 
	#AT91C_TC_ABETRG
 (0x1 << 10)

1029 
	#AT91C_TC_EEVT
 (0x3 << 10)

1030 
	#AT91C_TC_EEVT_NONE
 (0x0 << 10)

1031 
	#AT91C_TC_EEVT_RISING
 (0x1 << 10)

1032 
	#AT91C_TC_EEVT_FALLING
 (0x2 << 10)

1033 
	#AT91C_TC_EEVT_BOTH
 (0x3 << 10)

1034 
	#AT91C_TC_ENETRG
 (0x1 << 12)

1035 
	#AT91C_TC_WAVESEL
 (0x3 << 13)

1036 
	#AT91C_TC_WAVESEL_UP
 (0x0 << 13)

1037 
	#AT91C_TC_WAVESEL_UPDOWN
 (0x1 << 13)

1038 
	#AT91C_TC_WAVESEL_UP_AUTO
 (0x2 << 13)

1039 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (0x3 << 13)

1040 
	#AT91C_TC_CPCTRG
 (0x1 << 14)

1041 
	#AT91C_TC_WAVE
 (0x1 << 15)

1042 
	#AT91C_TC_LDRA
 (0x3 << 16)

1043 
	#AT91C_TC_LDRA_NONE
 (0x0 << 16)

1044 
	#AT91C_TC_LDRA_RISING
 (0x1 << 16)

1045 
	#AT91C_TC_LDRA_FALLING
 (0x2 << 16)

1046 
	#AT91C_TC_LDRA_BOTH
 (0x3 << 16)

1047 
	#AT91C_TC_ACPA
 (0x3 << 16)

1048 
	#AT91C_TC_ACPA_NONE
 (0x0 << 16)

1049 
	#AT91C_TC_ACPA_SET
 (0x1 << 16)

1050 
	#AT91C_TC_ACPA_CLEAR
 (0x2 << 16)

1051 
	#AT91C_TC_ACPA_TOGGLE
 (0x3 << 16)

1052 
	#AT91C_TC_LDRB
 (0x3 << 18)

1053 
	#AT91C_TC_LDRB_NONE
 (0x0 << 18)

1054 
	#AT91C_TC_LDRB_RISING
 (0x1 << 18)

1055 
	#AT91C_TC_LDRB_FALLING
 (0x2 << 18)

1056 
	#AT91C_TC_LDRB_BOTH
 (0x3 << 18)

1057 
	#AT91C_TC_ACPC
 (0x3 << 18)

1058 
	#AT91C_TC_ACPC_NONE
 (0x0 << 18)

1059 
	#AT91C_TC_ACPC_SET
 (0x1 << 18)

1060 
	#AT91C_TC_ACPC_CLEAR
 (0x2 << 18)

1061 
	#AT91C_TC_ACPC_TOGGLE
 (0x3 << 18)

1062 
	#AT91C_TC_AEEVT
 (0x3 << 20)

1063 
	#AT91C_TC_AEEVT_NONE
 (0x0 << 20)

1064 
	#AT91C_TC_AEEVT_SET
 (0x1 << 20)

1065 
	#AT91C_TC_AEEVT_CLEAR
 (0x2 << 20)

1066 
	#AT91C_TC_AEEVT_TOGGLE
 (0x3 << 20)

1067 
	#AT91C_TC_ASWTRG
 (0x3 << 22)

1068 
	#AT91C_TC_ASWTRG_NONE
 (0x0 << 22)

1069 
	#AT91C_TC_ASWTRG_SET
 (0x1 << 22)

1070 
	#AT91C_TC_ASWTRG_CLEAR
 (0x2 << 22)

1071 
	#AT91C_TC_ASWTRG_TOGGLE
 (0x3 << 22)

1072 
	#AT91C_TC_BCPB
 (0x3 << 24)

1073 
	#AT91C_TC_BCPB_NONE
 (0x0 << 24)

1074 
	#AT91C_TC_BCPB_SET
 (0x1 << 24)

1075 
	#AT91C_TC_BCPB_CLEAR
 (0x2 << 24)

1076 
	#AT91C_TC_BCPB_TOGGLE
 (0x3 << 24)

1077 
	#AT91C_TC_BCPC
 (0x3 << 26)

1078 
	#AT91C_TC_BCPC_NONE
 (0x0 << 26)

1079 
	#AT91C_TC_BCPC_SET
 (0x1 << 26)

1080 
	#AT91C_TC_BCPC_CLEAR
 (0x2 << 26)

1081 
	#AT91C_TC_BCPC_TOGGLE
 (0x3 << 26)

1082 
	#AT91C_TC_BEEVT
 (0x3 << 28)

1083 
	#AT91C_TC_BEEVT_NONE
 (0x0 << 28)

1084 
	#AT91C_TC_BEEVT_SET
 (0x1 << 28)

1085 
	#AT91C_TC_BEEVT_CLEAR
 (0x2 << 28)

1086 
	#AT91C_TC_BEEVT_TOGGLE
 (0x3 << 28)

1087 
	#AT91C_TC_BSWTRG
 (0x3 << 30)

1088 
	#AT91C_TC_BSWTRG_NONE
 (0x0 << 30)

1089 
	#AT91C_TC_BSWTRG_SET
 (0x1 << 30)

1090 
	#AT91C_TC_BSWTRG_CLEAR
 (0x2 << 30)

1091 
	#AT91C_TC_BSWTRG_TOGGLE
 (0x3 << 30)

1093 
	#AT91C_TC_COVFS
 (0x1 << 0)

1094 
	#AT91C_TC_LOVRS
 (0x1 << 1)

1095 
	#AT91C_TC_CPAS
 (0x1 << 2)

1096 
	#AT91C_TC_CPBS
 (0x1 << 3)

1097 
	#AT91C_TC_CPCS
 (0x1 << 4)

1098 
	#AT91C_TC_LDRAS
 (0x1 << 5)

1099 
	#AT91C_TC_LDRBS
 (0x1 << 6)

1100 
	#AT91C_TC_ETRCS
 (0x1 << 7)

1101 
	#AT91C_TC_ETRGS
 (0x1 << 16)

1102 
	#AT91C_TC_MTIOA
 (0x1 << 17)

1103 
	#AT91C_TC_MTIOB
 (0x1 << 18)

1107 

	)

1112 
	#TCB_TC0
 ( 0)

1113 
	#TCB_TC1
 (64)

1114 
	#TCB_TC2
 (128)

1115 
	#TCB_BCR
 (192)

1116 
	#TCB_BMR
 (196)

1118 
	#AT91C_TCB_SYNC
 (0x1 << 0)

1120 
	#AT91C_TCB_TC0XC0S
 (0x1 << 0)

1121 
	#AT91C_TCB_TC0XC0S_TCLK0
 (0x0)

1122 
	#AT91C_TCB_TC0XC0S_NONE
 (0x1)

1123 
	#AT91C_TCB_TC0XC0S_TIOA1
 (0x2)

1124 
	#AT91C_TCB_TC0XC0S_TIOA2
 (0x3)

1125 
	#AT91C_TCB_TC1XC1S
 (0x1 << 2)

1126 
	#AT91C_TCB_TC1XC1S_TCLK1
 (0x0 << 2)

1127 
	#AT91C_TCB_TC1XC1S_NONE
 (0x1 << 2)

1128 
	#AT91C_TCB_TC1XC1S_TIOA0
 (0x2 << 2)

1129 
	#AT91C_TCB_TC1XC1S_TIOA2
 (0x3 << 2)

1130 
	#AT91C_TCB_TC2XC2S
 (0x1 << 4)

1131 
	#AT91C_TCB_TC2XC2S_TCLK2
 (0x0 << 4)

1132 
	#AT91C_TCB_TC2XC2S_NONE
 (0x1 << 4)

1133 
	#AT91C_TCB_TC2XC2S_TIOA0
 (0x2 << 4)

1134 
	#AT91C_TCB_TC2XC2S_TIOA2
 (0x3 << 4)

1135 

	)

1140 
	#PWMC_CMR
 ( 0)

1141 
	#PWMC_CDTYR
 ( 4)

1142 
	#PWMC_CPRDR
 ( 8)

1143 
	#PWMC_CCNTR
 (12)

1144 
	#PWMC_CUPDR
 (16)

1145 
	#PWMC_Re£rved
 (20)

1147 
	#AT91C_PWMC_CPRE
 (0xF << 0)

1148 
	#AT91C_PWMC_CPRE_MCK
 (0x0)

1149 
	#AT91C_PWMC_CPRE_MCKA
 (0xB)

1150 
	#AT91C_PWMC_CPRE_MCKB
 (0xC)

1151 
	#AT91C_PWMC_CALG
 (0x1 << 8)

1152 
	#AT91C_PWMC_CPOL
 (0x1 << 9)

1153 
	#AT91C_PWMC_CPD
 (0x1 << 10)

1155 
	#AT91C_PWMC_CDTY
 (0x0 << 0)

1157 
	#AT91C_PWMC_CPRD
 (0x0 << 0)

1159 
	#AT91C_PWMC_CCNT
 (0x0 << 0)

1161 
	#AT91C_PWMC_CUPD
 (0x0 << 0)

1162 

	)

1167 
	#PWMC_MR
 ( 0)

1168 
	#PWMC_ENA
 ( 4)

1169 
	#PWMC_DIS
 ( 8)

1170 
	#PWMC_SR
 (12)

1171 
	#PWMC_IER
 (16)

1172 
	#PWMC_IDR
 (20)

1173 
	#PWMC_IMR
 (24)

1174 
	#PWMC_ISR
 (28)

1175 
	#PWMC_VR
 (252)

1176 
	#PWMC_CH
 (512)

1178 
	#AT91C_PWMC_DIVA
 (0xFF << 0)

1179 
	#AT91C_PWMC_PREA
 (0xF << 8)

1180 
	#AT91C_PWMC_PREA_MCK
 (0x0 << 8)

1181 
	#AT91C_PWMC_DIVB
 (0xFF << 16)

1182 
	#AT91C_PWMC_PREB
 (0xF << 24)

1183 
	#AT91C_PWMC_PREB_MCK
 (0x0 << 24)

1185 
	#AT91C_PWMC_CHID0
 (0x1 << 0)

1186 
	#AT91C_PWMC_CHID1
 (0x1 << 1)

1187 
	#AT91C_PWMC_CHID2
 (0x1 << 2)

1188 
	#AT91C_PWMC_CHID3
 (0x1 << 3)

1189 
	#AT91C_PWMC_CHID4
 (0x1 << 4)

1190 
	#AT91C_PWMC_CHID5
 (0x1 << 5)

1191 
	#AT91C_PWMC_CHID6
 (0x1 << 6)

1192 
	#AT91C_PWMC_CHID7
 (0x1 << 7)

1199 

	)

1204 
	#UDP_NUM
 ( 0)

1205 
	#UDP_GLBSTATE
 ( 4)

1206 
	#UDP_FADDR
 ( 8)

1207 
	#UDP_IER
 (16)

1208 
	#UDP_IDR
 (20)

1209 
	#UDP_IMR
 (24)

1210 
	#UDP_ISR
 (28)

1211 
	#UDP_ICR
 (32)

1212 
	#UDP_RSTEP
 (40)

1213 
	#UDP_CSR
 (48)

1214 
	#UDP_FDR
 (80)

1216 
	#AT91C_UDP_FRM_NUM
 (0x7FF << 0)

1217 
	#AT91C_UDP_FRM_ERR
 (0x1 << 16)

1218 
	#AT91C_UDP_FRM_OK
 (0x1 << 17)

1220 
	#AT91C_UDP_FADDEN
 (0x1 << 0)

1221 
	#AT91C_UDP_CONFG
 (0x1 << 1)

1222 
	#AT91C_UDP_RMWUPE
 (0x1 << 2)

1223 
	#AT91C_UDP_RSMINPR
 (0x1 << 3)

1225 
	#AT91C_UDP_FADD
 (0xFF << 0)

1226 
	#AT91C_UDP_FEN
 (0x1 << 8)

1228 
	#AT91C_UDP_EPINT0
 (0x1 << 0)

1229 
	#AT91C_UDP_EPINT1
 (0x1 << 1)

1230 
	#AT91C_UDP_EPINT2
 (0x1 << 2)

1231 
	#AT91C_UDP_EPINT3
 (0x1 << 3)

1232 
	#AT91C_UDP_EPINT4
 (0x1 << 4)

1233 
	#AT91C_UDP_EPINT5
 (0x1 << 5)

1234 
	#AT91C_UDP_EPINT6
 (0x1 << 6)

1235 
	#AT91C_UDP_EPINT7
 (0x1 << 7)

1236 
	#AT91C_UDP_RXSUSP
 (0x1 << 8)

1237 
	#AT91C_UDP_RXRSM
 (0x1 << 9)

1238 
	#AT91C_UDP_EXTRSM
 (0x1 << 10)

1239 
	#AT91C_UDP_SOFINT
 (0x1 << 11)

1240 
	#AT91C_UDP_WAKEUP
 (0x1 << 13)

1244 
	#AT91C_UDP_ENDBUSRES
 (0x1 << 12)

1247 
	#AT91C_UDP_EP0
 (0x1 << 0)

1248 
	#AT91C_UDP_EP1
 (0x1 << 1)

1249 
	#AT91C_UDP_EP2
 (0x1 << 2)

1250 
	#AT91C_UDP_EP3
 (0x1 << 3)

1251 
	#AT91C_UDP_EP4
 (0x1 << 4)

1252 
	#AT91C_UDP_EP5
 (0x1 << 5)

1253 
	#AT91C_UDP_EP6
 (0x1 << 6)

1254 
	#AT91C_UDP_EP7
 (0x1 << 7)

1256 
	#AT91C_UDP_TXCOMP
 (0x1 << 0)

1257 
	#AT91C_UDP_RX_DATA_BK0
 (0x1 << 1)

1258 
	#AT91C_UDP_RXSETUP
 (0x1 << 2)

1259 
	#AT91C_UDP_ISOERROR
 (0x1 << 3)

1260 
	#AT91C_UDP_TXPKTRDY
 (0x1 << 4)

1261 
	#AT91C_UDP_FORCESTALL
 (0x1 << 5)

1262 
	#AT91C_UDP_RX_DATA_BK1
 (0x1 << 6)

1263 
	#AT91C_UDP_DIR
 (0x1 << 7)

1264 
	#AT91C_UDP_EPTYPE
 (0x7 << 8)

1265 
	#AT91C_UDP_EPTYPE_CTRL
 (0x0 << 8)

1266 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (0x1 << 8)

1267 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (0x2 << 8)

1268 
	#AT91C_UDP_EPTYPE_INT_OUT
 (0x3 << 8)

1269 
	#AT91C_UDP_EPTYPE_ISO_IN
 (0x5 << 8)

1270 
	#AT91C_UDP_EPTYPE_BULK_IN
 (0x6 << 8)

1271 
	#AT91C_UDP_EPTYPE_INT_IN
 (0x7 << 8)

1272 
	#AT91C_UDP_DTGLE
 (0x1 << 11)

1273 
	#AT91C_UDP_EPEDS
 (0x1 << 15)

1274 
	#AT91C_UDP_RXBYTECNT
 (0x7FF << 16)

1275 

	)

1280 
	#AT91C_SYSC_SYSC_VRPM
 (0xFFFFFD60)

1282 
	#AT91C_AIC_ICCR
 (0xFFFFF128)

1283 
	#AT91C_AIC_IECR
 (0xFFFFF120)

1284 
	#AT91C_AIC_SMR
 (0xFFFFF000)

1285 
	#AT91C_AIC_ISCR
 (0xFFFFF12C)

1286 
	#AT91C_AIC_EOICR
 (0xFFFFF130)

1287 
	#AT91C_AIC_DCR
 (0xFFFFF138)

1288 
	#AT91C_AIC_FFER
 (0xFFFFF140)

1289 
	#AT91C_AIC_SVR
 (0xFFFFF080)

1290 
	#AT91C_AIC_SPU
 (0xFFFFF134)

1291 
	#AT91C_AIC_FFDR
 (0xFFFFF144)

1292 
	#AT91C_AIC_FVR
 (0xFFFFF104)

1293 
	#AT91C_AIC_FFSR
 (0xFFFFF148)

1294 
	#AT91C_AIC_IMR
 (0xFFFFF110)

1295 
	#AT91C_AIC_ISR
 (0xFFFFF108)

1296 
	#AT91C_AIC_IVR
 (0xFFFFF100)

1297 
	#AT91C_AIC_IDCR
 (0xFFFFF124)

1298 
	#AT91C_AIC_CISR
 (0xFFFFF114)

1299 
	#AT91C_AIC_IPR
 (0xFFFFF10C)

1301 
	#AT91C_DBGU_C2R
 (0xFFFFF244)

1302 
	#AT91C_DBGU_THR
 (0xFFFFF21C)

1303 
	#AT91C_DBGU_CSR
 (0xFFFFF214)

1304 
	#AT91C_DBGU_IDR
 (0xFFFFF20C)

1305 
	#AT91C_DBGU_MR
 (0xFFFFF204)

1306 
	#AT91C_DBGU_FNTR
 (0xFFFFF248)

1307 
	#AT91C_DBGU_C1R
 (0xFFFFF240)

1308 
	#AT91C_DBGU_BRGR
 (0xFFFFF220)

1309 
	#AT91C_DBGU_RHR
 (0xFFFFF218)

1310 
	#AT91C_DBGU_IMR
 (0xFFFFF210)

1311 
	#AT91C_DBGU_IER
 (0xFFFFF208)

1312 
	#AT91C_DBGU_CR
 (0xFFFFF200)

1314 
	#AT91C_DBGU_TNCR
 (0xFFFFF31C)

1315 
	#AT91C_DBGU_RNCR
 (0xFFFFF314)

1316 
	#AT91C_DBGU_PTCR
 (0xFFFFF320)

1317 
	#AT91C_DBGU_PTSR
 (0xFFFFF324)

1318 
	#AT91C_DBGU_RCR
 (0xFFFFF304)

1319 
	#AT91C_DBGU_TCR
 (0xFFFFF30C)

1320 
	#AT91C_DBGU_RPR
 (0xFFFFF300)

1321 
	#AT91C_DBGU_TPR
 (0xFFFFF308)

1322 
	#AT91C_DBGU_RNPR
 (0xFFFFF310)

1323 
	#AT91C_DBGU_TNPR
 (0xFFFFF318)

1325 
	#AT91C_PIOA_IMR
 (0xFFFFF448)

1326 
	#AT91C_PIOA_IER
 (0xFFFFF440)

1327 
	#AT91C_PIOA_OWDR
 (0xFFFFF4A4)

1328 
	#AT91C_PIOA_ISR
 (0xFFFFF44C)

1329 
	#AT91C_PIOA_PPUDR
 (0xFFFFF460)

1330 
	#AT91C_PIOA_MDSR
 (0xFFFFF458)

1331 
	#AT91C_PIOA_MDER
 (0xFFFFF450)

1332 
	#AT91C_PIOA_PER
 (0xFFFFF400)

1333 
	#AT91C_PIOA_PSR
 (0xFFFFF408)

1334 
	#AT91C_PIOA_OER
 (0xFFFFF410)

1335 
	#AT91C_PIOA_BSR
 (0xFFFFF474)

1336 
	#AT91C_PIOA_PPUER
 (0xFFFFF464)

1337 
	#AT91C_PIOA_MDDR
 (0xFFFFF454)

1338 
	#AT91C_PIOA_PDR
 (0xFFFFF404)

1339 
	#AT91C_PIOA_ODR
 (0xFFFFF414)

1340 
	#AT91C_PIOA_IFDR
 (0xFFFFF424)

1341 
	#AT91C_PIOA_ABSR
 (0xFFFFF478)

1342 
	#AT91C_PIOA_ASR
 (0xFFFFF470)

1343 
	#AT91C_PIOA_PPUSR
 (0xFFFFF468)

1344 
	#AT91C_PIOA_ODSR
 (0xFFFFF438)

1345 
	#AT91C_PIOA_SODR
 (0xFFFFF430)

1346 
	#AT91C_PIOA_IFSR
 (0xFFFFF428)

1347 
	#AT91C_PIOA_IFER
 (0xFFFFF420)

1348 
	#AT91C_PIOA_OSR
 (0xFFFFF418)

1349 
	#AT91C_PIOA_IDR
 (0xFFFFF444)

1350 
	#AT91C_PIOA_PDSR
 (0xFFFFF43C)

1351 
	#AT91C_PIOA_CODR
 (0xFFFFF434)

1352 
	#AT91C_PIOA_OWSR
 (0xFFFFF4A8)

1353 
	#AT91C_PIOA_OWER
 (0xFFFFF4A0)

1355 
	#AT91C_CKGR_PLLR
 (0xFFFFFC2C)

1356 
	#AT91C_CKGR_MCFR
 (0xFFFFFC24)

1357 
	#AT91C_CKGR_MOR
 (0xFFFFFC20)

1359 
	#AT91C_PMC_SCSR
 (0xFFFFFC08)

1360 
	#AT91C_PMC_SCER
 (0xFFFFFC00)

1361 
	#AT91C_PMC_IMR
 (0xFFFFFC6C)

1362 
	#AT91C_PMC_IDR
 (0xFFFFFC64)

1363 
	#AT91C_PMC_PCDR
 (0xFFFFFC14)

1364 
	#AT91C_PMC_SCDR
 (0xFFFFFC04)

1365 
	#AT91C_PMC_SR
 (0xFFFFFC68)

1366 
	#AT91C_PMC_IER
 (0xFFFFFC60)

1367 
	#AT91C_PMC_MCKR
 (0xFFFFFC30)

1368 
	#AT91C_PMC_MOR
 (0xFFFFFC20)

1369 
	#AT91C_PMC_PCER
 (0xFFFFFC10)

1370 
	#AT91C_PMC_PCSR
 (0xFFFFFC18)

1371 
	#AT91C_PMC_PLLR
 (0xFFFFFC2C)

1372 
	#AT91C_PMC_MCFR
 (0xFFFFFC24)

1373 
	#AT91C_PMC_PCKR
 (0xFFFFFC40)

1375 
	#AT91C_RSTC_RSR
 (0xFFFFFD04)

1376 
	#AT91C_RSTC_RMR
 (0xFFFFFD08)

1377 
	#AT91C_RSTC_RCR
 (0xFFFFFD00)

1379 
	#AT91C_RTTC_RTSR
 (0xFFFFFD2C)

1380 
	#AT91C_RTTC_RTAR
 (0xFFFFFD24)

1381 
	#AT91C_RTTC_RTVR
 (0xFFFFFD28)

1382 
	#AT91C_RTTC_RTMR
 (0xFFFFFD20)

1384 
	#AT91C_PITC_PIIR
 (0xFFFFFD3C)

1385 
	#AT91C_PITC_PISR
 (0xFFFFFD34)

1386 
	#AT91C_PITC_PIVR
 (0xFFFFFD38)

1387 
	#AT91C_PITC_PIMR
 (0xFFFFFD30)

1389 
	#AT91C_WDTC_WDMR
 (0xFFFFFD44)

1390 
	#AT91C_WDTC_WDSR
 (0xFFFFFD48)

1391 
	#AT91C_WDTC_WDCR
 (0xFFFFFD40)

1393 
	#AT91C_MC_FCR
 (0xFFFFFF64)

1394 
	#AT91C_MC_ASR
 (0xFFFFFF04)

1395 
	#AT91C_MC_FSR
 (0xFFFFFF68)

1396 
	#AT91C_MC_FMR
 (0xFFFFFF60)

1397 
	#AT91C_MC_AASR
 (0xFFFFFF08)

1398 
	#AT91C_MC_RCR
 (0xFFFFFF00)

1400 
	#AT91C_SPI_PTCR
 (0xFFFE0120)

1401 
	#AT91C_SPI_TNPR
 (0xFFFE0118)

1402 
	#AT91C_SPI_RNPR
 (0xFFFE0110)

1403 
	#AT91C_SPI_TPR
 (0xFFFE0108)

1404 
	#AT91C_SPI_RPR
 (0xFFFE0100)

1405 
	#AT91C_SPI_PTSR
 (0xFFFE0124)

1406 
	#AT91C_SPI_TNCR
 (0xFFFE011C)

1407 
	#AT91C_SPI_RNCR
 (0xFFFE0114)

1408 
	#AT91C_SPI_TCR
 (0xFFFE010C)

1409 
	#AT91C_SPI_RCR
 (0xFFFE0104)

1411 
	#AT91C_SPI_CSR
 (0xFFFE0030)

1412 
	#AT91C_SPI_IDR
 (0xFFFE0018)

1413 
	#AT91C_SPI_SR
 (0xFFFE0010)

1414 
	#AT91C_SPI_RDR
 (0xFFFE0008)

1415 
	#AT91C_SPI_CR
 (0xFFFE0000)

1416 
	#AT91C_SPI_IMR
 (0xFFFE001C)

1417 
	#AT91C_SPI_IER
 (0xFFFE0014)

1418 
	#AT91C_SPI_TDR
 (0xFFFE000C)

1419 
	#AT91C_SPI_MR
 (0xFFFE0004)

1421 
	#AT91C_ADC_PTCR
 (0xFFFD8120)

1422 
	#AT91C_ADC_TNPR
 (0xFFFD8118)

1423 
	#AT91C_ADC_RNPR
 (0xFFFD8110)

1424 
	#AT91C_ADC_TPR
 (0xFFFD8108)

1425 
	#AT91C_ADC_RPR
 (0xFFFD8100)

1426 
	#AT91C_ADC_PTSR
 (0xFFFD8124)

1427 
	#AT91C_ADC_TNCR
 (0xFFFD811C)

1428 
	#AT91C_ADC_RNCR
 (0xFFFD8114)

1429 
	#AT91C_ADC_TCR
 (0xFFFD810C)

1430 
	#AT91C_ADC_RCR
 (0xFFFD8104)

1432 
	#AT91C_ADC_IMR
 (0xFFFD802C)

1433 
	#AT91C_ADC_CDR4
 (0xFFFD8040)

1434 
	#AT91C_ADC_CDR2
 (0xFFFD8038)

1435 
	#AT91C_ADC_CDR0
 (0xFFFD8030)

1436 
	#AT91C_ADC_CDR7
 (0xFFFD804C)

1437 
	#AT91C_ADC_CDR1
 (0xFFFD8034)

1438 
	#AT91C_ADC_CDR3
 (0xFFFD803C)

1439 
	#AT91C_ADC_CDR5
 (0xFFFD8044)

1440 
	#AT91C_ADC_MR
 (0xFFFD8004)

1441 
	#AT91C_ADC_CDR6
 (0xFFFD8048)

1442 
	#AT91C_ADC_CR
 (0xFFFD8000)

1443 
	#AT91C_ADC_CHER
 (0xFFFD8010)

1444 
	#AT91C_ADC_CHSR
 (0xFFFD8018)

1445 
	#AT91C_ADC_IER
 (0xFFFD8024)

1446 
	#AT91C_ADC_SR
 (0xFFFD801C)

1447 
	#AT91C_ADC_CHDR
 (0xFFFD8014)

1448 
	#AT91C_ADC_IDR
 (0xFFFD8028)

1449 
	#AT91C_ADC_LCDR
 (0xFFFD8020)

1451 
	#AT91C_SSC_PTCR
 (0xFFFD4120)

1452 
	#AT91C_SSC_TNPR
 (0xFFFD4118)

1453 
	#AT91C_SSC_RNPR
 (0xFFFD4110)

1454 
	#AT91C_SSC_TPR
 (0xFFFD4108)

1455 
	#AT91C_SSC_RPR
 (0xFFFD4100)

1456 
	#AT91C_SSC_PTSR
 (0xFFFD4124)

1457 
	#AT91C_SSC_TNCR
 (0xFFFD411C)

1458 
	#AT91C_SSC_RNCR
 (0xFFFD4114)

1459 
	#AT91C_SSC_TCR
 (0xFFFD410C)

1460 
	#AT91C_SSC_RCR
 (0xFFFD4104)

1462 
	#AT91C_SSC_RFMR
 (0xFFFD4014)

1463 
	#AT91C_SSC_CMR
 (0xFFFD4004)

1464 
	#AT91C_SSC_IDR
 (0xFFFD4048)

1465 
	#AT91C_SSC_SR
 (0xFFFD4040)

1466 
	#AT91C_SSC_RC0R
 (0xFFFD4038)

1467 
	#AT91C_SSC_RSHR
 (0xFFFD4030)

1468 
	#AT91C_SSC_RHR
 (0xFFFD4020)

1469 
	#AT91C_SSC_TCMR
 (0xFFFD4018)

1470 
	#AT91C_SSC_RCMR
 (0xFFFD4010)

1471 
	#AT91C_SSC_CR
 (0xFFFD4000)

1472 
	#AT91C_SSC_IMR
 (0xFFFD404C)

1473 
	#AT91C_SSC_IER
 (0xFFFD4044)

1474 
	#AT91C_SSC_RC1R
 (0xFFFD403C)

1475 
	#AT91C_SSC_TSHR
 (0xFFFD4034)

1476 
	#AT91C_SSC_THR
 (0xFFFD4024)

1477 
	#AT91C_SSC_TFMR
 (0xFFFD401C)

1479 
	#AT91C_US1_PTSR
 (0xFFFC4124)

1480 
	#AT91C_US1_TNCR
 (0xFFFC411C)

1481 
	#AT91C_US1_RNCR
 (0xFFFC4114)

1482 
	#AT91C_US1_TCR
 (0xFFFC410C)

1483 
	#AT91C_US1_RCR
 (0xFFFC4104)

1484 
	#AT91C_US1_PTCR
 (0xFFFC4120)

1485 
	#AT91C_US1_TNPR
 (0xFFFC4118)

1486 
	#AT91C_US1_RNPR
 (0xFFFC4110)

1487 
	#AT91C_US1_TPR
 (0xFFFC4108)

1488 
	#AT91C_US1_RPR
 (0xFFFC4100)

1490 
	#AT91C_US1_XXR
 (0xFFFC4048)

1491 
	#AT91C_US1_RHR
 (0xFFFC4018)

1492 
	#AT91C_US1_IMR
 (0xFFFC4010)

1493 
	#AT91C_US1_IER
 (0xFFFC4008)

1494 
	#AT91C_US1_CR
 (0xFFFC4000)

1495 
	#AT91C_US1_RTOR
 (0xFFFC4024)

1496 
	#AT91C_US1_THR
 (0xFFFC401C)

1497 
	#AT91C_US1_CSR
 (0xFFFC4014)

1498 
	#AT91C_US1_IDR
 (0xFFFC400C)

1499 
	#AT91C_US1_FIDI
 (0xFFFC4040)

1500 
	#AT91C_US1_BRGR
 (0xFFFC4020)

1501 
	#AT91C_US1_TTGR
 (0xFFFC4028)

1502 
	#AT91C_US1_IF
 (0xFFFC404C)

1503 
	#AT91C_US1_NER
 (0xFFFC4044)

1504 
	#AT91C_US1_MR
 (0xFFFC4004)

1506 
	#AT91C_US0_PTCR
 (0xFFFC0120)

1507 
	#AT91C_US0_TNPR
 (0xFFFC0118)

1508 
	#AT91C_US0_RNPR
 (0xFFFC0110)

1509 
	#AT91C_US0_TPR
 (0xFFFC0108)

1510 
	#AT91C_US0_RPR
 (0xFFFC0100)

1511 
	#AT91C_US0_PTSR
 (0xFFFC0124)

1512 
	#AT91C_US0_TNCR
 (0xFFFC011C)

1513 
	#AT91C_US0_RNCR
 (0xFFFC0114)

1514 
	#AT91C_US0_TCR
 (0xFFFC010C)

1515 
	#AT91C_US0_RCR
 (0xFFFC0104)

1517 
	#AT91C_US0_TTGR
 (0xFFFC0028)

1518 
	#AT91C_US0_BRGR
 (0xFFFC0020)

1519 
	#AT91C_US0_RHR
 (0xFFFC0018)

1520 
	#AT91C_US0_IMR
 (0xFFFC0010)

1521 
	#AT91C_US0_NER
 (0xFFFC0044)

1522 
	#AT91C_US0_RTOR
 (0xFFFC0024)

1523 
	#AT91C_US0_XXR
 (0xFFFC0048)

1524 
	#AT91C_US0_FIDI
 (0xFFFC0040)

1525 
	#AT91C_US0_CR
 (0xFFFC0000)

1526 
	#AT91C_US0_IER
 (0xFFFC0008)

1527 
	#AT91C_US0_IF
 (0xFFFC004C)

1528 
	#AT91C_US0_MR
 (0xFFFC0004)

1529 
	#AT91C_US0_IDR
 (0xFFFC000C)

1530 
	#AT91C_US0_CSR
 (0xFFFC0014)

1531 
	#AT91C_US0_THR
 (0xFFFC001C)

1533 
	#AT91C_TWI_RHR
 (0xFFFB8030)

1534 
	#AT91C_TWI_IDR
 (0xFFFB8028)

1535 
	#AT91C_TWI_SR
 (0xFFFB8020)

1536 
	#AT91C_TWI_CWGR
 (0xFFFB8010)

1537 
	#AT91C_TWI_SMR
 (0xFFFB8008)

1538 
	#AT91C_TWI_CR
 (0xFFFB8000)

1539 
	#AT91C_TWI_THR
 (0xFFFB8034)

1540 
	#AT91C_TWI_IMR
 (0xFFFB802C)

1541 
	#AT91C_TWI_IER
 (0xFFFB8024)

1542 
	#AT91C_TWI_IADR
 (0xFFFB800C)

1543 
	#AT91C_TWI_MMR
 (0xFFFB8004)

1545 
	#AT91C_TC2_IMR
 (0xFFFA00AC)

1546 
	#AT91C_TC2_IER
 (0xFFFA00A4)

1547 
	#AT91C_TC2_RC
 (0xFFFA009C)

1548 
	#AT91C_TC2_RA
 (0xFFFA0094)

1549 
	#AT91C_TC2_CMR
 (0xFFFA0084)

1550 
	#AT91C_TC2_IDR
 (0xFFFA00A8)

1551 
	#AT91C_TC2_SR
 (0xFFFA00A0)

1552 
	#AT91C_TC2_RB
 (0xFFFA0098)

1553 
	#AT91C_TC2_CV
 (0xFFFA0090)

1554 
	#AT91C_TC2_CCR
 (0xFFFA0080)

1556 
	#AT91C_TC1_IMR
 (0xFFFA006C)

1557 
	#AT91C_TC1_IER
 (0xFFFA0064)

1558 
	#AT91C_TC1_RC
 (0xFFFA005C)

1559 
	#AT91C_TC1_RA
 (0xFFFA0054)

1560 
	#AT91C_TC1_CMR
 (0xFFFA0044)

1561 
	#AT91C_TC1_IDR
 (0xFFFA0068)

1562 
	#AT91C_TC1_SR
 (0xFFFA0060)

1563 
	#AT91C_TC1_RB
 (0xFFFA0058)

1564 
	#AT91C_TC1_CV
 (0xFFFA0050)

1565 
	#AT91C_TC1_CCR
 (0xFFFA0040)

1567 
	#AT91C_TC0_IMR
 (0xFFFA002C)

1568 
	#AT91C_TC0_IER
 (0xFFFA0024)

1569 
	#AT91C_TC0_RC
 (0xFFFA001C)

1570 
	#AT91C_TC0_RA
 (0xFFFA0014)

1571 
	#AT91C_TC0_CMR
 (0xFFFA0004)

1572 
	#AT91C_TC0_IDR
 (0xFFFA0028)

1573 
	#AT91C_TC0_SR
 (0xFFFA0020)

1574 
	#AT91C_TC0_RB
 (0xFFFA0018)

1575 
	#AT91C_TC0_CV
 (0xFFFA0010)

1576 
	#AT91C_TC0_CCR
 (0xFFFA0000)

1578 
	#AT91C_TCB_BMR
 (0xFFFA00C4)

1579 
	#AT91C_TCB_BCR
 (0xFFFA00C0)

1581 
	#AT91C_CH3_CUPDR
 (0xFFFCC270)

1582 
	#AT91C_CH3_CPRDR
 (0xFFFCC268)

1583 
	#AT91C_CH3_CMR
 (0xFFFCC260)

1584 
	#AT91C_CH3_Re£rved
 (0xFFFCC274)

1585 
	#AT91C_CH3_CCNTR
 (0xFFFCC26C)

1586 
	#AT91C_CH3_CDTYR
 (0xFFFCC264)

1588 
	#AT91C_CH2_CUPDR
 (0xFFFCC250)

1589 
	#AT91C_CH2_CPRDR
 (0xFFFCC248)

1590 
	#AT91C_CH2_CMR
 (0xFFFCC240)

1591 
	#AT91C_CH2_Re£rved
 (0xFFFCC254)

1592 
	#AT91C_CH2_CCNTR
 (0xFFFCC24C)

1593 
	#AT91C_CH2_CDTYR
 (0xFFFCC244)

1595 
	#AT91C_CH1_CUPDR
 (0xFFFCC230)

1596 
	#AT91C_CH1_CPRDR
 (0xFFFCC228)

1597 
	#AT91C_CH1_CMR
 (0xFFFCC220)

1598 
	#AT91C_CH1_Re£rved
 (0xFFFCC234)

1599 
	#AT91C_CH1_CCNTR
 (0xFFFCC22C)

1600 
	#AT91C_CH1_CDTYR
 (0xFFFCC224)

1602 
	#AT91C_CH0_CUPDR
 (0xFFFCC210)

1603 
	#AT91C_CH0_CPRDR
 (0xFFFCC208)

1604 
	#AT91C_CH0_CMR
 (0xFFFCC200)

1605 
	#AT91C_CH0_Re£rved
 (0xFFFCC214)

1606 
	#AT91C_CH0_CCNTR
 (0xFFFCC20C)

1607 
	#AT91C_CH0_CDTYR
 (0xFFFCC204)

1609 
	#AT91C_PWMC_VR
 (0xFFFCC0FC)

1610 
	#AT91C_PWMC_ISR
 (0xFFFCC01C)

1611 
	#AT91C_PWMC_IDR
 (0xFFFCC014)

1612 
	#AT91C_PWMC_SR
 (0xFFFCC00C)

1613 
	#AT91C_PWMC_ENA
 (0xFFFCC004)

1614 
	#AT91C_PWMC_IMR
 (0xFFFCC018)

1615 
	#AT91C_PWMC_MR
 (0xFFFCC000)

1616 
	#AT91C_PWMC_DIS
 (0xFFFCC008)

1617 
	#AT91C_PWMC_IER
 (0xFFFCC010)

1619 
	#AT91C_UDP_ISR
 (0xFFFB001C)

1620 
	#AT91C_UDP_IDR
 (0xFFFB0014)

1621 
	#AT91C_UDP_GLBSTATE
 (0xFFFB0004)

1622 
	#AT91C_UDP_FDR
 (0xFFFB0050)

1623 
	#AT91C_UDP_CSR
 (0xFFFB0030)

1624 
	#AT91C_UDP_RSTEP
 (0xFFFB0028)

1625 
	#AT91C_UDP_ICR
 (0xFFFB0020)

1626 
	#AT91C_UDP_IMR
 (0xFFFB0018)

1627 
	#AT91C_UDP_IER
 (0xFFFB0010)

1628 
	#AT91C_UDP_FADDR
 (0xFFFB0008)

1629 
	#AT91C_UDP_NUM
 (0xFFFB0000)

1630 

	)

1634 
	#AT91C_PIO_PA0
 (1 << 0)

1635 
	#AT91C_PA0_PWM0
 (
AT91C_PIO_PA0
)

1636 
	#AT91C_PA0_TIOA0
 (
AT91C_PIO_PA0
)

1637 
	#AT91C_PIO_PA1
 (1 << 1)

1638 
	#AT91C_PA1_PWM1
 (
AT91C_PIO_PA1
)

1639 
	#AT91C_PA1_TIOB0
 (
AT91C_PIO_PA1
)

1640 
	#AT91C_PIO_PA10
 (1 << 10)

1641 
	#AT91C_PA10_DTXD
 (
AT91C_PIO_PA10
)

1642 
	#AT91C_PA10_NPCS2
 (
AT91C_PIO_PA10
)

1643 
	#AT91C_PIO_PA11
 (1 << 11)

1644 
	#AT91C_PA11_NPCS0
 (
AT91C_PIO_PA11
)

1645 
	#AT91C_PA11_PWM0
 (
AT91C_PIO_PA11
)

1646 
	#AT91C_PIO_PA12
 (1 << 12)

1647 
	#AT91C_PA12_MISO
 (
AT91C_PIO_PA12
)

1648 
	#AT91C_PA12_PWM1
 (
AT91C_PIO_PA12
)

1649 
	#AT91C_PIO_PA13
 (1 << 13)

1650 
	#AT91C_PA13_MOSI
 (
AT91C_PIO_PA13
)

1651 
	#AT91C_PA13_PWM2
 (
AT91C_PIO_PA13
)

1652 
	#AT91C_PIO_PA14
 (1 << 14)

1653 
	#AT91C_PA14_SPCK
 (
AT91C_PIO_PA14
)

1654 
	#AT91C_PA14_PWM3
 (
AT91C_PIO_PA14
)

1655 
	#AT91C_PIO_PA15
 (1 << 15)

1656 
	#AT91C_PA15_TF
 (
AT91C_PIO_PA15
)

1657 
	#AT91C_PA15_TIOA1
 (
AT91C_PIO_PA15
)

1658 
	#AT91C_PIO_PA16
 (1 << 16)

1659 
	#AT91C_PA16_TK
 (
AT91C_PIO_PA16
)

1660 
	#AT91C_PA16_TIOB1
 (
AT91C_PIO_PA16
)

1661 
	#AT91C_PIO_PA17
 (1 << 17)

1662 
	#AT91C_PA17_TD
 (
AT91C_PIO_PA17
)

1663 
	#AT91C_PA17_PCK1
 (
AT91C_PIO_PA17
)

1664 
	#AT91C_PIO_PA18
 (1 << 18)

1665 
	#AT91C_PA18_RD
 (
AT91C_PIO_PA18
)

1666 
	#AT91C_PA18_PCK2
 (
AT91C_PIO_PA18
)

1667 
	#AT91C_PIO_PA19
 (1 << 19)

1668 
	#AT91C_PA19_RK
 (
AT91C_PIO_PA19
)

1669 
	#AT91C_PA19_FIQ
 (
AT91C_PIO_PA19
)

1670 
	#AT91C_PIO_PA2
 (1 << 2)

1671 
	#AT91C_PA2_PWM2
 (
AT91C_PIO_PA2
)

1672 
	#AT91C_PA2_SCK0
 (
AT91C_PIO_PA2
)

1673 
	#AT91C_PIO_PA20
 (1 << 20)

1674 
	#AT91C_PA20_RF
 (
AT91C_PIO_PA20
)

1675 
	#AT91C_PA20_IRQ0
 (
AT91C_PIO_PA20
)

1676 
	#AT91C_PIO_PA21
 (1 << 21)

1677 
	#AT91C_PA21_RXD1
 (
AT91C_PIO_PA21
)

1678 
	#AT91C_PA21_PCK1
 (
AT91C_PIO_PA21
)

1679 
	#AT91C_PIO_PA22
 (1 << 22)

1680 
	#AT91C_PA22_TXD1
 (
AT91C_PIO_PA22
)

1681 
	#AT91C_PA22_NPCS3
 (
AT91C_PIO_PA22
)

1682 
	#AT91C_PIO_PA23
 (1 << 23)

1683 
	#AT91C_PA23_SCK1
 (
AT91C_PIO_PA23
)

1684 
	#AT91C_PA23_PWM0
 (
AT91C_PIO_PA23
)

1685 
	#AT91C_PIO_PA24
 (1 << 24)

1686 
	#AT91C_PA24_RTS1
 (
AT91C_PIO_PA24
)

1687 
	#AT91C_PA24_PWM1
 (
AT91C_PIO_PA24
)

1688 
	#AT91C_PIO_PA25
 (1 << 25)

1689 
	#AT91C_PA25_CTS1
 (
AT91C_PIO_PA25
)

1690 
	#AT91C_PA25_PWM2
 (
AT91C_PIO_PA25
)

1691 
	#AT91C_PIO_PA26
 (1 << 26)

1692 
	#AT91C_PA26_DCD1
 (
AT91C_PIO_PA26
)

1693 
	#AT91C_PA26_TIOA2
 (
AT91C_PIO_PA26
)

1694 
	#AT91C_PIO_PA27
 (1 << 27)

1695 
	#AT91C_PA27_DTR1
 (
AT91C_PIO_PA27
)

1696 
	#AT91C_PA27_TIOB2
 (
AT91C_PIO_PA27
)

1697 
	#AT91C_PIO_PA28
 (1 << 28)

1698 
	#AT91C_PA28_DSR1
 (
AT91C_PIO_PA28
)

1699 
	#AT91C_PA28_TCLK1
 (
AT91C_PIO_PA28
)

1700 
	#AT91C_PIO_PA29
 (1 << 29)

1701 
	#AT91C_PA29_RI1
 (
AT91C_PIO_PA29
)

1702 
	#AT91C_PA29_TCLK2
 (
AT91C_PIO_PA29
)

1703 
	#AT91C_PIO_PA3
 (1 << 3)

1704 
	#AT91C_PA3_TWD
 (
AT91C_PIO_PA3
)

1705 
	#AT91C_PA3_NPCS3
 (
AT91C_PIO_PA3
)

1706 
	#AT91C_PIO_PA30
 (1 << 30)

1707 
	#AT91C_PA30_IRQ1
 (
AT91C_PIO_PA30
)

1708 
	#AT91C_PA30_NPCS2
 (
AT91C_PIO_PA30
)

1709 
	#AT91C_PIO_PA31
 (1 << 31)

1710 
	#AT91C_PA31_NPCS1
 (
AT91C_PIO_PA31
)

1711 
	#AT91C_PA31_PCK2
 (
AT91C_PIO_PA31
)

1712 
	#AT91C_PIO_PA4
 (1 << 4)

1713 
	#AT91C_PA4_TWCK
 (
AT91C_PIO_PA4
)

1714 
	#AT91C_PA4_TCLK0
 (
AT91C_PIO_PA4
)

1715 
	#AT91C_PIO_PA5
 (1 << 5)

1716 
	#AT91C_PA5_RXD0
 (
AT91C_PIO_PA5
)

1717 
	#AT91C_PA5_NPCS3
 (
AT91C_PIO_PA5
)

1718 
	#AT91C_PIO_PA6
 (1 << 6)

1719 
	#AT91C_PA6_TXD0
 (
AT91C_PIO_PA6
)

1720 
	#AT91C_PA6_PCK0
 (
AT91C_PIO_PA6
)

1721 
	#AT91C_PIO_PA7
 (1 << 7)

1722 
	#AT91C_PA7_RTS0
 (
AT91C_PIO_PA7
)

1723 
	#AT91C_PA7_PWM3
 (
AT91C_PIO_PA7
)

1724 
	#AT91C_PIO_PA8
 (1 << 8)

1725 
	#AT91C_PA8_CTS0
 (
AT91C_PIO_PA8
)

1726 
	#AT91C_PA8_ADTRG
 (
AT91C_PIO_PA8
)

1727 
	#AT91C_PIO_PA9
 (1 << 9)

1728 
	#AT91C_PA9_DRXD
 (
AT91C_PIO_PA9
)

1729 
	#AT91C_PA9_NPCS1
 (
AT91C_PIO_PA9
)

1730 

	)

1734 
	#AT91C_ID_FIQ
 ( 0)

1735 
	#AT91C_ID_SYS
 ( 1)

1736 
	#AT91C_ID_PIOA
 ( 2)

1737 
	#AT91C_ID_3_Re£rved
 ( 3)

1738 
	#AT91C_ID_ADC
 ( 4)

1739 
	#AT91C_ID_SPI
 ( 5)

1740 
	#AT91C_ID_US0
 ( 6)

1741 
	#AT91C_ID_US1
 ( 7)

1742 
	#AT91C_ID_SSC
 ( 8)

1743 
	#AT91C_ID_TWI
 ( 9)

1744 
	#AT91C_ID_PWMC
 (10)

1745 
	#AT91C_ID_UDP
 (11)

1746 
	#AT91C_ID_TC0
 (12)

1747 
	#AT91C_ID_TC1
 (13)

1748 
	#AT91C_ID_TC2
 (14)

1749 
	#AT91C_ID_15_Re£rved
 (15)

1750 
	#AT91C_ID_16_Re£rved
 (16)

1751 
	#AT91C_ID_17_Re£rved
 (17)

1752 
	#AT91C_ID_18_Re£rved
 (18)

1753 
	#AT91C_ID_19_Re£rved
 (19)

1754 
	#AT91C_ID_20_Re£rved
 (20)

1755 
	#AT91C_ID_21_Re£rved
 (21)

1756 
	#AT91C_ID_22_Re£rved
 (22)

1757 
	#AT91C_ID_23_Re£rved
 (23)

1758 
	#AT91C_ID_24_Re£rved
 (24)

1759 
	#AT91C_ID_25_Re£rved
 (25)

1760 
	#AT91C_ID_26_Re£rved
 (26)

1761 
	#AT91C_ID_27_Re£rved
 (27)

1762 
	#AT91C_ID_28_Re£rved
 (28)

1763 
	#AT91C_ID_29_Re£rved
 (29)

1764 
	#AT91C_ID_IRQ0
 (30)

1765 
	#AT91C_ID_IRQ1
 (31)

1766 

	)

1770 
	#AT91C_BASE_SYSC
 (0xFFFFF000)

1771 
	#AT91C_BASE_AIC
 (0xFFFFF000)

1772 
	#AT91C_BASE_DBGU
 (0xFFFFF200)

1773 
	#AT91C_BASE_PDC_DBGU
 (0xFFFFF300)

1774 
	#AT91C_BASE_PIOA
 (0xFFFFF400)

1775 
	#AT91C_BASE_CKGR
 (0xFFFFFC20)

1776 
	#AT91C_BASE_PMC
 (0xFFFFFC00)

1777 
	#AT91C_BASE_RSTC
 (0xFFFFFD00)

1778 
	#AT91C_BASE_RTTC
 (0xFFFFFD20)

1779 
	#AT91C_BASE_PITC
 (0xFFFFFD30)

1780 
	#AT91C_BASE_WDTC
 (0xFFFFFD40)

1781 
	#AT91C_BASE_MC
 (0xFFFFFF00)

1782 
	#AT91C_BASE_PDC_SPI
 (0xFFFE0100)

1783 
	#AT91C_BASE_SPI
 (0xFFFE0000)

1784 
	#AT91C_BASE_PDC_ADC
 (0xFFFD8100)

1785 
	#AT91C_BASE_ADC
 (0xFFFD8000)

1786 
	#AT91C_BASE_PDC_SSC
 (0xFFFD4100)

1787 
	#AT91C_BASE_SSC
 (0xFFFD4000)

1788 
	#AT91C_BASE_PDC_US1
 (0xFFFC4100)

1789 
	#AT91C_BASE_US1
 (0xFFFC4000)

1790 
	#AT91C_BASE_PDC_US0
 (0xFFFC0100)

1791 
	#AT91C_BASE_US0
 (0xFFFC0000)

1792 
	#AT91C_BASE_TWI
 (0xFFFB8000)

1793 
	#AT91C_BASE_TC2
 (0xFFFA0080)

1794 
	#AT91C_BASE_TC1
 (0xFFFA0040)

1795 
	#AT91C_BASE_TC0
 (0xFFFA0000)

1796 
	#AT91C_BASE_TCB
 (0xFFFA0000)

1797 
	#AT91C_BASE_PWMC_CH3
 (0xFFFCC260)

1798 
	#AT91C_BASE_PWMC_CH2
 (0xFFFCC240)

1799 
	#AT91C_BASE_PWMC_CH1
 (0xFFFCC220)

1800 
	#AT91C_BASE_PWMC_CH0
 (0xFFFCC200)

1801 
	#AT91C_BASE_PWMC
 (0xFFFCC000)

1802 
	#AT91C_BASE_UDP
 (0xFFFB0000)

1803 

	)

1807 
	#AT91C_ISRAM
 (0x00200000)

1808 
	#AT91C_ISRAM_SIZE
 (0x00004000)

1809 
	#AT91C_IFLASH
 (0x00100000)

1810 
	#AT91C_IFLASH_SIZE
 (0x00010000)

1811 

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7X128.h

46 #i‚de‡
AT91SAM7X128_H


47 
	#AT91SAM7X128_H


	)

49 vﬁ©ûê
	tAT91_REG
;

54 
	s_AT91S_SYS
 {

55 
AT91_REG
 
	mAIC_SMR
[32];

56 
AT91_REG
 
	mAIC_SVR
[32];

57 
AT91_REG
 
	mAIC_IVR
;

58 
AT91_REG
 
	mAIC_FVR
;

59 
AT91_REG
 
	mAIC_ISR
;

60 
AT91_REG
 
	mAIC_IPR
;

61 
AT91_REG
 
	mAIC_IMR
;

62 
AT91_REG
 
	mAIC_CISR
;

63 
AT91_REG
 
	mRe£rved0
[2];

64 
AT91_REG
 
	mAIC_IECR
;

65 
AT91_REG
 
	mAIC_IDCR
;

66 
AT91_REG
 
	mAIC_ICCR
;

67 
AT91_REG
 
	mAIC_ISCR
;

68 
AT91_REG
 
	mAIC_EOICR
;

69 
AT91_REG
 
	mAIC_SPU
;

70 
AT91_REG
 
	mAIC_DCR
;

71 
AT91_REG
 
	mRe£rved1
[1];

72 
AT91_REG
 
	mAIC_FFER
;

73 
AT91_REG
 
	mAIC_FFDR
;

74 
AT91_REG
 
	mAIC_FFSR
;

75 
AT91_REG
 
	mRe£rved2
[45];

76 
AT91_REG
 
	mDBGU_CR
;

77 
AT91_REG
 
	mDBGU_MR
;

78 
AT91_REG
 
	mDBGU_IER
;

79 
AT91_REG
 
	mDBGU_IDR
;

80 
AT91_REG
 
	mDBGU_IMR
;

81 
AT91_REG
 
	mDBGU_CSR
;

82 
AT91_REG
 
	mDBGU_RHR
;

83 
AT91_REG
 
	mDBGU_THR
;

84 
AT91_REG
 
	mDBGU_BRGR
;

85 
AT91_REG
 
	mRe£rved3
[7];

86 
AT91_REG
 
	mDBGU_CIDR
;

87 
AT91_REG
 
	mDBGU_EXID
;

88 
AT91_REG
 
	mDBGU_FNTR
;

89 
AT91_REG
 
	mRe£rved4
[45];

90 
AT91_REG
 
	mDBGU_RPR
;

91 
AT91_REG
 
	mDBGU_RCR
;

92 
AT91_REG
 
	mDBGU_TPR
;

93 
AT91_REG
 
	mDBGU_TCR
;

94 
AT91_REG
 
	mDBGU_RNPR
;

95 
AT91_REG
 
	mDBGU_RNCR
;

96 
AT91_REG
 
	mDBGU_TNPR
;

97 
AT91_REG
 
	mDBGU_TNCR
;

98 
AT91_REG
 
	mDBGU_PTCR
;

99 
AT91_REG
 
	mDBGU_PTSR
;

100 
AT91_REG
 
	mRe£rved5
[54];

101 
AT91_REG
 
	mPIOA_PER
;

102 
AT91_REG
 
	mPIOA_PDR
;

103 
AT91_REG
 
	mPIOA_PSR
;

104 
AT91_REG
 
	mRe£rved6
[1];

105 
AT91_REG
 
	mPIOA_OER
;

106 
AT91_REG
 
	mPIOA_ODR
;

107 
AT91_REG
 
	mPIOA_OSR
;

108 
AT91_REG
 
	mRe£rved7
[1];

109 
AT91_REG
 
	mPIOA_IFER
;

110 
AT91_REG
 
	mPIOA_IFDR
;

111 
AT91_REG
 
	mPIOA_IFSR
;

112 
AT91_REG
 
	mRe£rved8
[1];

113 
AT91_REG
 
	mPIOA_SODR
;

114 
AT91_REG
 
	mPIOA_CODR
;

115 
AT91_REG
 
	mPIOA_ODSR
;

116 
AT91_REG
 
	mPIOA_PDSR
;

117 
AT91_REG
 
	mPIOA_IER
;

118 
AT91_REG
 
	mPIOA_IDR
;

119 
AT91_REG
 
	mPIOA_IMR
;

120 
AT91_REG
 
	mPIOA_ISR
;

121 
AT91_REG
 
	mPIOA_MDER
;

122 
AT91_REG
 
	mPIOA_MDDR
;

123 
AT91_REG
 
	mPIOA_MDSR
;

124 
AT91_REG
 
	mRe£rved9
[1];

125 
AT91_REG
 
	mPIOA_PPUDR
;

126 
AT91_REG
 
	mPIOA_PPUER
;

127 
AT91_REG
 
	mPIOA_PPUSR
;

128 
AT91_REG
 
	mRe£rved10
[1];

129 
AT91_REG
 
	mPIOA_ASR
;

130 
AT91_REG
 
	mPIOA_BSR
;

131 
AT91_REG
 
	mPIOA_ABSR
;

132 
AT91_REG
 
	mRe£rved11
[9];

133 
AT91_REG
 
	mPIOA_OWER
;

134 
AT91_REG
 
	mPIOA_OWDR
;

135 
AT91_REG
 
	mPIOA_OWSR
;

136 
AT91_REG
 
	mRe£rved12
[85];

137 
AT91_REG
 
	mPIOB_PER
;

138 
AT91_REG
 
	mPIOB_PDR
;

139 
AT91_REG
 
	mPIOB_PSR
;

140 
AT91_REG
 
	mRe£rved13
[1];

141 
AT91_REG
 
	mPIOB_OER
;

142 
AT91_REG
 
	mPIOB_ODR
;

143 
AT91_REG
 
	mPIOB_OSR
;

144 
AT91_REG
 
	mRe£rved14
[1];

145 
AT91_REG
 
	mPIOB_IFER
;

146 
AT91_REG
 
	mPIOB_IFDR
;

147 
AT91_REG
 
	mPIOB_IFSR
;

148 
AT91_REG
 
	mRe£rved15
[1];

149 
AT91_REG
 
	mPIOB_SODR
;

150 
AT91_REG
 
	mPIOB_CODR
;

151 
AT91_REG
 
	mPIOB_ODSR
;

152 
AT91_REG
 
	mPIOB_PDSR
;

153 
AT91_REG
 
	mPIOB_IER
;

154 
AT91_REG
 
	mPIOB_IDR
;

155 
AT91_REG
 
	mPIOB_IMR
;

156 
AT91_REG
 
	mPIOB_ISR
;

157 
AT91_REG
 
	mPIOB_MDER
;

158 
AT91_REG
 
	mPIOB_MDDR
;

159 
AT91_REG
 
	mPIOB_MDSR
;

160 
AT91_REG
 
	mRe£rved16
[1];

161 
AT91_REG
 
	mPIOB_PPUDR
;

162 
AT91_REG
 
	mPIOB_PPUER
;

163 
AT91_REG
 
	mPIOB_PPUSR
;

164 
AT91_REG
 
	mRe£rved17
[1];

165 
AT91_REG
 
	mPIOB_ASR
;

166 
AT91_REG
 
	mPIOB_BSR
;

167 
AT91_REG
 
	mPIOB_ABSR
;

168 
AT91_REG
 
	mRe£rved18
[9];

169 
AT91_REG
 
	mPIOB_OWER
;

170 
AT91_REG
 
	mPIOB_OWDR
;

171 
AT91_REG
 
	mPIOB_OWSR
;

172 
AT91_REG
 
	mRe£rved19
[341];

173 
AT91_REG
 
	mPMC_SCER
;

174 
AT91_REG
 
	mPMC_SCDR
;

175 
AT91_REG
 
	mPMC_SCSR
;

176 
AT91_REG
 
	mRe£rved20
[1];

177 
AT91_REG
 
	mPMC_PCER
;

178 
AT91_REG
 
	mPMC_PCDR
;

179 
AT91_REG
 
	mPMC_PCSR
;

180 
AT91_REG
 
	mRe£rved21
[1];

181 
AT91_REG
 
	mPMC_MOR
;

182 
AT91_REG
 
	mPMC_MCFR
;

183 
AT91_REG
 
	mRe£rved22
[1];

184 
AT91_REG
 
	mPMC_PLLR
;

185 
AT91_REG
 
	mPMC_MCKR
;

186 
AT91_REG
 
	mRe£rved23
[3];

187 
AT91_REG
 
	mPMC_PCKR
[4];

188 
AT91_REG
 
	mRe£rved24
[4];

189 
AT91_REG
 
	mPMC_IER
;

190 
AT91_REG
 
	mPMC_IDR
;

191 
AT91_REG
 
	mPMC_SR
;

192 
AT91_REG
 
	mPMC_IMR
;

193 
AT91_REG
 
	mRe£rved25
[36];

194 
AT91_REG
 
	mRSTC_RCR
;

195 
AT91_REG
 
	mRSTC_RSR
;

196 
AT91_REG
 
	mRSTC_RMR
;

197 
AT91_REG
 
	mRe£rved26
[5];

198 
AT91_REG
 
	mRTTC_RTMR
;

199 
AT91_REG
 
	mRTTC_RTAR
;

200 
AT91_REG
 
	mRTTC_RTVR
;

201 
AT91_REG
 
	mRTTC_RTSR
;

202 
AT91_REG
 
	mPITC_PIMR
;

203 
AT91_REG
 
	mPITC_PISR
;

204 
AT91_REG
 
	mPITC_PIVR
;

205 
AT91_REG
 
	mPITC_PIIR
;

206 
AT91_REG
 
	mWDTC_WDCR
;

207 
AT91_REG
 
	mWDTC_WDMR
;

208 
AT91_REG
 
	mWDTC_WDSR
;

209 
AT91_REG
 
	mRe£rved27
[5];

210 
AT91_REG
 
	mVREG_MR
;

211 } 
	tAT91S_SYS
, *
	tAT91PS_SYS
;

217 
	s_AT91S_AIC
 {

218 
AT91_REG
 
	mAIC_SMR
[32];

219 
AT91_REG
 
	mAIC_SVR
[32];

220 
AT91_REG
 
	mAIC_IVR
;

221 
AT91_REG
 
	mAIC_FVR
;

222 
AT91_REG
 
	mAIC_ISR
;

223 
AT91_REG
 
	mAIC_IPR
;

224 
AT91_REG
 
	mAIC_IMR
;

225 
AT91_REG
 
	mAIC_CISR
;

226 
AT91_REG
 
	mRe£rved0
[2];

227 
AT91_REG
 
	mAIC_IECR
;

228 
AT91_REG
 
	mAIC_IDCR
;

229 
AT91_REG
 
	mAIC_ICCR
;

230 
AT91_REG
 
	mAIC_ISCR
;

231 
AT91_REG
 
	mAIC_EOICR
;

232 
AT91_REG
 
	mAIC_SPU
;

233 
AT91_REG
 
	mAIC_DCR
;

234 
AT91_REG
 
	mRe£rved1
[1];

235 
AT91_REG
 
	mAIC_FFER
;

236 
AT91_REG
 
	mAIC_FFDR
;

237 
AT91_REG
 
	mAIC_FFSR
;

238 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

241 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

242 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

243 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

244 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

245 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (() 0x0 << 5)

246 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (() 0x0 << 5)

247 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (() 0x1 << 5)

248 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (() 0x1 << 5)

249 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (() 0x2 << 5)

250 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (() 0x3 << 5)

252 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

253 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

255 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

256 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

257 

	)

261 
	s_AT91S_PDC
 {

262 
AT91_REG
 
	mPDC_RPR
;

263 
AT91_REG
 
	mPDC_RCR
;

264 
AT91_REG
 
	mPDC_TPR
;

265 
AT91_REG
 
	mPDC_TCR
;

266 
AT91_REG
 
	mPDC_RNPR
;

267 
AT91_REG
 
	mPDC_RNCR
;

268 
AT91_REG
 
	mPDC_TNPR
;

269 
AT91_REG
 
	mPDC_TNCR
;

270 
AT91_REG
 
	mPDC_PTCR
;

271 
AT91_REG
 
	mPDC_PTSR
;

272 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

275 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

276 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

277 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

278 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

280 

	)

284 
	s_AT91S_DBGU
 {

285 
AT91_REG
 
	mDBGU_CR
;

286 
AT91_REG
 
	mDBGU_MR
;

287 
AT91_REG
 
	mDBGU_IER
;

288 
AT91_REG
 
	mDBGU_IDR
;

289 
AT91_REG
 
	mDBGU_IMR
;

290 
AT91_REG
 
	mDBGU_CSR
;

291 
AT91_REG
 
	mDBGU_RHR
;

292 
AT91_REG
 
	mDBGU_THR
;

293 
AT91_REG
 
	mDBGU_BRGR
;

294 
AT91_REG
 
	mRe£rved0
[7];

295 
AT91_REG
 
	mDBGU_CIDR
;

296 
AT91_REG
 
	mDBGU_EXID
;

297 
AT91_REG
 
	mDBGU_FNTR
;

298 
AT91_REG
 
	mRe£rved1
[45];

299 
AT91_REG
 
	mDBGU_RPR
;

300 
AT91_REG
 
	mDBGU_RCR
;

301 
AT91_REG
 
	mDBGU_TPR
;

302 
AT91_REG
 
	mDBGU_TCR
;

303 
AT91_REG
 
	mDBGU_RNPR
;

304 
AT91_REG
 
	mDBGU_RNCR
;

305 
AT91_REG
 
	mDBGU_TNPR
;

306 
AT91_REG
 
	mDBGU_TNCR
;

307 
AT91_REG
 
	mDBGU_PTCR
;

308 
AT91_REG
 
	mDBGU_PTSR
;

309 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

312 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

313 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

314 
	#AT91C_US_RXEN
 (() 0x1 << 4)

315 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

316 
	#AT91C_US_TXEN
 (() 0x1 << 6)

317 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

318 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

320 
	#AT91C_US_PAR
 (() 0x7 << 9)

321 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

322 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

323 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

324 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

325 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

326 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

327 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

328 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

329 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

330 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

331 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

333 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

334 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

335 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

336 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

337 
	#AT91C_US_OVRE
 (() 0x1 << 5)

338 
	#AT91C_US_FRAME
 (() 0x1 << 6)

339 
	#AT91C_US_PARE
 (() 0x1 << 7)

340 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

341 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

342 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

343 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

344 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

349 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

350 

	)

354 
	s_AT91S_PIO
 {

355 
AT91_REG
 
	mPIO_PER
;

356 
AT91_REG
 
	mPIO_PDR
;

357 
AT91_REG
 
	mPIO_PSR
;

358 
AT91_REG
 
	mRe£rved0
[1];

359 
AT91_REG
 
	mPIO_OER
;

360 
AT91_REG
 
	mPIO_ODR
;

361 
AT91_REG
 
	mPIO_OSR
;

362 
AT91_REG
 
	mRe£rved1
[1];

363 
AT91_REG
 
	mPIO_IFER
;

364 
AT91_REG
 
	mPIO_IFDR
;

365 
AT91_REG
 
	mPIO_IFSR
;

366 
AT91_REG
 
	mRe£rved2
[1];

367 
AT91_REG
 
	mPIO_SODR
;

368 
AT91_REG
 
	mPIO_CODR
;

369 
AT91_REG
 
	mPIO_ODSR
;

370 
AT91_REG
 
	mPIO_PDSR
;

371 
AT91_REG
 
	mPIO_IER
;

372 
AT91_REG
 
	mPIO_IDR
;

373 
AT91_REG
 
	mPIO_IMR
;

374 
AT91_REG
 
	mPIO_ISR
;

375 
AT91_REG
 
	mPIO_MDER
;

376 
AT91_REG
 
	mPIO_MDDR
;

377 
AT91_REG
 
	mPIO_MDSR
;

378 
AT91_REG
 
	mRe£rved3
[1];

379 
AT91_REG
 
	mPIO_PPUDR
;

380 
AT91_REG
 
	mPIO_PPUER
;

381 
AT91_REG
 
	mPIO_PPUSR
;

382 
AT91_REG
 
	mRe£rved4
[1];

383 
AT91_REG
 
	mPIO_ASR
;

384 
AT91_REG
 
	mPIO_BSR
;

385 
AT91_REG
 
	mPIO_ABSR
;

386 
AT91_REG
 
	mRe£rved5
[9];

387 
AT91_REG
 
	mPIO_OWER
;

388 
AT91_REG
 
	mPIO_OWDR
;

389 
AT91_REG
 
	mPIO_OWSR
;

390 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

396 
	s_AT91S_CKGR
 {

397 
AT91_REG
 
	mCKGR_MOR
;

398 
AT91_REG
 
	mCKGR_MCFR
;

399 
AT91_REG
 
	mRe£rved0
[1];

400 
AT91_REG
 
	mCKGR_PLLR
;

401 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

404 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

405 
	#AT91C_CKGR_OSCBYPASS
 (() 0x1 << 1)

406 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

408 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

409 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

411 
	#AT91C_CKGR_DIV
 (() 0xFF << 0)

412 
	#AT91C_CKGR_DIV_0
 (() 0x0)

413 
	#AT91C_CKGR_DIV_BYPASS
 (() 0x1)

414 
	#AT91C_CKGR_PLLCOUNT
 (() 0x3F << 8)

415 
	#AT91C_CKGR_OUT
 (() 0x3 << 14)

416 
	#AT91C_CKGR_OUT_0
 (() 0x0 << 14)

417 
	#AT91C_CKGR_OUT_1
 (() 0x1 << 14)

418 
	#AT91C_CKGR_OUT_2
 (() 0x2 << 14)

419 
	#AT91C_CKGR_OUT_3
 (() 0x3 << 14)

420 
	#AT91C_CKGR_MUL
 (() 0x7FF << 16)

421 
	#AT91C_CKGR_USBDIV
 (() 0x3 << 28)

422 
	#AT91C_CKGR_USBDIV_0
 (() 0x0 << 28)

423 
	#AT91C_CKGR_USBDIV_1
 (() 0x1 << 28)

424 
	#AT91C_CKGR_USBDIV_2
 (() 0x2 << 28)

425 

	)

429 
	s_AT91S_PMC
 {

430 
AT91_REG
 
	mPMC_SCER
;

431 
AT91_REG
 
	mPMC_SCDR
;

432 
AT91_REG
 
	mPMC_SCSR
;

433 
AT91_REG
 
	mRe£rved0
[1];

434 
AT91_REG
 
	mPMC_PCER
;

435 
AT91_REG
 
	mPMC_PCDR
;

436 
AT91_REG
 
	mPMC_PCSR
;

437 
AT91_REG
 
	mRe£rved1
[1];

438 
AT91_REG
 
	mPMC_MOR
;

439 
AT91_REG
 
	mPMC_MCFR
;

440 
AT91_REG
 
	mRe£rved2
[1];

441 
AT91_REG
 
	mPMC_PLLR
;

442 
AT91_REG
 
	mPMC_MCKR
;

443 
AT91_REG
 
	mRe£rved3
[3];

444 
AT91_REG
 
	mPMC_PCKR
[4];

445 
AT91_REG
 
	mRe£rved4
[4];

446 
AT91_REG
 
	mPMC_IER
;

447 
AT91_REG
 
	mPMC_IDR
;

448 
AT91_REG
 
	mPMC_SR
;

449 
AT91_REG
 
	mPMC_IMR
;

450 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

453 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

454 
	#AT91C_PMC_UDP
 (() 0x1 << 7)

455 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

456 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

457 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

458 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

465 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

466 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

467 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

468 
	#AT91C_PMC_CSS_PLL_CLK
 (() 0x3)

469 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

470 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

471 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

472 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

473 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

474 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

475 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

476 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

479 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

480 
	#AT91C_PMC_LOCK
 (() 0x1 << 2)

481 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

482 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

483 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

484 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

485 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

489 

	)

493 
	s_AT91S_RSTC
 {

494 
AT91_REG
 
	mRSTC_RCR
;

495 
AT91_REG
 
	mRSTC_RSR
;

496 
AT91_REG
 
	mRSTC_RMR
;

497 } 
	tAT91S_RSTC
, *
	tAT91PS_RSTC
;

500 
	#AT91C_RSTC_PROCRST
 (() 0x1 << 0)

501 
	#AT91C_RSTC_PERRST
 (() 0x1 << 2)

502 
	#AT91C_RSTC_EXTRST
 (() 0x1 << 3)

503 
	#AT91C_RSTC_KEY
 (() 0xFF << 24)

505 
	#AT91C_RSTC_URSTS
 (() 0x1 << 0)

506 
	#AT91C_RSTC_BODSTS
 (() 0x1 << 1)

507 
	#AT91C_RSTC_RSTTYP
 (() 0x7 << 8)

508 
	#AT91C_RSTC_RSTTYP_POWERUP
 (() 0x0 << 8)

509 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (() 0x1 << 8)

510 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (() 0x2 << 8)

511 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (() 0x3 << 8)

512 
	#AT91C_RSTC_RSTTYP_USER
 (() 0x4 << 8)

513 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (() 0x5 << 8)

514 
	#AT91C_RSTC_NRSTL
 (() 0x1 << 16)

515 
	#AT91C_RSTC_SRCMP
 (() 0x1 << 17)

517 
	#AT91C_RSTC_URSTEN
 (() 0x1 << 0)

518 
	#AT91C_RSTC_URSTIEN
 (() 0x1 << 4)

519 
	#AT91C_RSTC_ERSTL
 (() 0xF << 8)

520 
	#AT91C_RSTC_BODIEN
 (() 0x1 << 16)

521 

	)

525 
	s_AT91S_RTTC
 {

526 
AT91_REG
 
	mRTTC_RTMR
;

527 
AT91_REG
 
	mRTTC_RTAR
;

528 
AT91_REG
 
	mRTTC_RTVR
;

529 
AT91_REG
 
	mRTTC_RTSR
;

530 } 
	tAT91S_RTTC
, *
	tAT91PS_RTTC
;

533 
	#AT91C_RTTC_RTPRES
 (() 0xFFFF << 0)

534 
	#AT91C_RTTC_ALMIEN
 (() 0x1 << 16)

535 
	#AT91C_RTTC_RTTINCIEN
 (() 0x1 << 17)

536 
	#AT91C_RTTC_RTTRST
 (() 0x1 << 18)

538 
	#AT91C_RTTC_ALMV
 (() 0x0 << 0)

540 
	#AT91C_RTTC_CRTV
 (() 0x0 << 0)

542 
	#AT91C_RTTC_ALMS
 (() 0x1 << 0)

543 
	#AT91C_RTTC_RTTINC
 (() 0x1 << 1)

544 

	)

548 
	s_AT91S_PITC
 {

549 
AT91_REG
 
	mPITC_PIMR
;

550 
AT91_REG
 
	mPITC_PISR
;

551 
AT91_REG
 
	mPITC_PIVR
;

552 
AT91_REG
 
	mPITC_PIIR
;

553 } 
	tAT91S_PITC
, *
	tAT91PS_PITC
;

556 
	#AT91C_PITC_PIV
 (() 0xFFFFF << 0)

557 
	#AT91C_PITC_PITEN
 (() 0x1 << 24)

558 
	#AT91C_PITC_PITIEN
 (() 0x1 << 25)

560 
	#AT91C_PITC_PITS
 (() 0x1 << 0)

562 
	#AT91C_PITC_CPIV
 (() 0xFFFFF << 0)

563 
	#AT91C_PITC_PICNT
 (() 0xFFF << 20)

565 

	)

569 
	s_AT91S_WDTC
 {

570 
AT91_REG
 
	mWDTC_WDCR
;

571 
AT91_REG
 
	mWDTC_WDMR
;

572 
AT91_REG
 
	mWDTC_WDSR
;

573 } 
	tAT91S_WDTC
, *
	tAT91PS_WDTC
;

576 
	#AT91C_WDTC_WDRSTT
 (() 0x1 << 0)

577 
	#AT91C_WDTC_KEY
 (() 0xFF << 24)

579 
	#AT91C_WDTC_WDV
 (() 0xFFF << 0)

580 
	#AT91C_WDTC_WDFIEN
 (() 0x1 << 12)

581 
	#AT91C_WDTC_WDRSTEN
 (() 0x1 << 13)

582 
	#AT91C_WDTC_WDRPROC
 (() 0x1 << 14)

583 
	#AT91C_WDTC_WDDIS
 (() 0x1 << 15)

584 
	#AT91C_WDTC_WDD
 (() 0xFFF << 16)

585 
	#AT91C_WDTC_WDDBGHLT
 (() 0x1 << 28)

586 
	#AT91C_WDTC_WDIDLEHLT
 (() 0x1 << 29)

588 
	#AT91C_WDTC_WDUNF
 (() 0x1 << 0)

589 
	#AT91C_WDTC_WDERR
 (() 0x1 << 1)

590 

	)

594 
	s_AT91S_VREG
 {

595 
AT91_REG
 
	mVREG_MR
;

596 } 
	tAT91S_VREG
, *
	tAT91PS_VREG
;

599 
	#AT91C_VREG_PSTDBY
 (() 0x1 << 0)

600 

	)

604 
	s_AT91S_MC
 {

605 
AT91_REG
 
	mMC_RCR
;

606 
AT91_REG
 
	mMC_ASR
;

607 
AT91_REG
 
	mMC_AASR
;

608 
AT91_REG
 
	mRe£rved0
[21];

609 
AT91_REG
 
	mMC_FMR
;

610 
AT91_REG
 
	mMC_FCR
;

611 
AT91_REG
 
	mMC_FSR
;

612 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

615 
	#AT91C_MC_RCB
 (() 0x1 << 0)

617 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

618 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

619 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

620 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

621 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

622 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

623 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

624 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

625 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

626 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

627 
	#AT91C_MC_MST0
 (() 0x1 << 16)

628 
	#AT91C_MC_MST1
 (() 0x1 << 17)

629 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

630 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

632 
	#AT91C_MC_FRDY
 (() 0x1 << 0)

633 
	#AT91C_MC_LOCKE
 (() 0x1 << 2)

634 
	#AT91C_MC_PROGE
 (() 0x1 << 3)

635 
	#AT91C_MC_NEBP
 (() 0x1 << 7)

636 
	#AT91C_MC_FWS
 (() 0x3 << 8)

637 
	#AT91C_MC_FWS_0FWS
 (() 0x0 << 8)

638 
	#AT91C_MC_FWS_1FWS
 (() 0x1 << 8)

639 
	#AT91C_MC_FWS_2FWS
 (() 0x2 << 8)

640 
	#AT91C_MC_FWS_3FWS
 (() 0x3 << 8)

641 
	#AT91C_MC_FMCN
 (() 0xFF << 16)

643 
	#AT91C_MC_FCMD
 (() 0xF << 0)

644 
	#AT91C_MC_FCMD_START_PROG
 (() 0x1)

645 
	#AT91C_MC_FCMD_LOCK
 (() 0x2)

646 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (() 0x3)

647 
	#AT91C_MC_FCMD_UNLOCK
 (() 0x4)

648 
	#AT91C_MC_FCMD_ERASE_ALL
 (() 0x8)

649 
	#AT91C_MC_FCMD_SET_GP_NVM
 (() 0xB)

650 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (() 0xD)

651 
	#AT91C_MC_FCMD_SET_SECURITY
 (() 0xF)

652 
	#AT91C_MC_PAGEN
 (() 0x3FF << 8)

653 
	#AT91C_MC_KEY
 (() 0xFF << 24)

655 
	#AT91C_MC_SECURITY
 (() 0x1 << 4)

656 
	#AT91C_MC_GPNVM0
 (() 0x1 << 8)

657 
	#AT91C_MC_GPNVM1
 (() 0x1 << 9)

658 
	#AT91C_MC_GPNVM2
 (() 0x1 << 10)

659 
	#AT91C_MC_GPNVM3
 (() 0x1 << 11)

660 
	#AT91C_MC_GPNVM4
 (() 0x1 << 12)

661 
	#AT91C_MC_GPNVM5
 (() 0x1 << 13)

662 
	#AT91C_MC_GPNVM6
 (() 0x1 << 14)

663 
	#AT91C_MC_GPNVM7
 (() 0x1 << 15)

664 
	#AT91C_MC_LOCKS0
 (() 0x1 << 16)

665 
	#AT91C_MC_LOCKS1
 (() 0x1 << 17)

666 
	#AT91C_MC_LOCKS2
 (() 0x1 << 18)

667 
	#AT91C_MC_LOCKS3
 (() 0x1 << 19)

668 
	#AT91C_MC_LOCKS4
 (() 0x1 << 20)

669 
	#AT91C_MC_LOCKS5
 (() 0x1 << 21)

670 
	#AT91C_MC_LOCKS6
 (() 0x1 << 22)

671 
	#AT91C_MC_LOCKS7
 (() 0x1 << 23)

672 
	#AT91C_MC_LOCKS8
 (() 0x1 << 24)

673 
	#AT91C_MC_LOCKS9
 (() 0x1 << 25)

674 
	#AT91C_MC_LOCKS10
 (() 0x1 << 26)

675 
	#AT91C_MC_LOCKS11
 (() 0x1 << 27)

676 
	#AT91C_MC_LOCKS12
 (() 0x1 << 28)

677 
	#AT91C_MC_LOCKS13
 (() 0x1 << 29)

678 
	#AT91C_MC_LOCKS14
 (() 0x1 << 30)

679 
	#AT91C_MC_LOCKS15
 (() 0x1 << 31)

680 

	)

684 
	s_AT91S_SPI
 {

685 
AT91_REG
 
	mSPI_CR
;

686 
AT91_REG
 
	mSPI_MR
;

687 
AT91_REG
 
	mSPI_RDR
;

688 
AT91_REG
 
	mSPI_TDR
;

689 
AT91_REG
 
	mSPI_SR
;

690 
AT91_REG
 
	mSPI_IER
;

691 
AT91_REG
 
	mSPI_IDR
;

692 
AT91_REG
 
	mSPI_IMR
;

693 
AT91_REG
 
	mRe£rved0
[4];

694 
AT91_REG
 
	mSPI_CSR
[4];

695 
AT91_REG
 
	mRe£rved1
[48];

696 
AT91_REG
 
	mSPI_RPR
;

697 
AT91_REG
 
	mSPI_RCR
;

698 
AT91_REG
 
	mSPI_TPR
;

699 
AT91_REG
 
	mSPI_TCR
;

700 
AT91_REG
 
	mSPI_RNPR
;

701 
AT91_REG
 
	mSPI_RNCR
;

702 
AT91_REG
 
	mSPI_TNPR
;

703 
AT91_REG
 
	mSPI_TNCR
;

704 
AT91_REG
 
	mSPI_PTCR
;

705 
AT91_REG
 
	mSPI_PTSR
;

706 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

709 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

710 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

711 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

712 
	#AT91C_SPI_LASTXFER
 (() 0x1 << 24)

714 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

715 
	#AT91C_SPI_PS
 (() 0x1 << 1)

716 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

717 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

718 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

719 
	#AT91C_SPI_FDIV
 (() 0x1 << 3)

720 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

721 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

722 
	#AT91C_SPI_PCS
 (() 0xF << 16)

723 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

725 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

726 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

728 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

729 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

731 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

732 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

733 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

734 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

735 
	#AT91C_SPI_ENDRX
 (() 0x1 << 4)

736 
	#AT91C_SPI_ENDTX
 (() 0x1 << 5)

737 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

738 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

739 
	#AT91C_SPI_NSSR
 (() 0x1 << 8)

740 
	#AT91C_SPI_TXEMPTY
 (() 0x1 << 9)

741 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

746 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

747 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

748 
	#AT91C_SPI_CSAAT
 (() 0x1 << 3)

749 
	#AT91C_SPI_BITS
 (() 0xF << 4)

750 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

751 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

752 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

753 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

754 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

755 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

756 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

757 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

758 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

759 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

760 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

761 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

762 

	)

766 
	s_AT91S_USART
 {

767 
AT91_REG
 
	mUS_CR
;

768 
AT91_REG
 
	mUS_MR
;

769 
AT91_REG
 
	mUS_IER
;

770 
AT91_REG
 
	mUS_IDR
;

771 
AT91_REG
 
	mUS_IMR
;

772 
AT91_REG
 
	mUS_CSR
;

773 
AT91_REG
 
	mUS_RHR
;

774 
AT91_REG
 
	mUS_THR
;

775 
AT91_REG
 
	mUS_BRGR
;

776 
AT91_REG
 
	mUS_RTOR
;

777 
AT91_REG
 
	mUS_TTGR
;

778 
AT91_REG
 
	mRe£rved0
[5];

779 
AT91_REG
 
	mUS_FIDI
;

780 
AT91_REG
 
	mUS_NER
;

781 
AT91_REG
 
	mRe£rved1
[1];

782 
AT91_REG
 
	mUS_IF
;

783 
AT91_REG
 
	mRe£rved2
[44];

784 
AT91_REG
 
	mUS_RPR
;

785 
AT91_REG
 
	mUS_RCR
;

786 
AT91_REG
 
	mUS_TPR
;

787 
AT91_REG
 
	mUS_TCR
;

788 
AT91_REG
 
	mUS_RNPR
;

789 
AT91_REG
 
	mUS_RNCR
;

790 
AT91_REG
 
	mUS_TNPR
;

791 
AT91_REG
 
	mUS_TNCR
;

792 
AT91_REG
 
	mUS_PTCR
;

793 
AT91_REG
 
	mUS_PTSR
;

794 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

797 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

798 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

799 
	#AT91C_US_STTTO
 (() 0x1 << 11)

800 
	#AT91C_US_SENDA
 (() 0x1 << 12)

801 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

802 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

803 
	#AT91C_US_RETTO
 (() 0x1 << 15)

804 
	#AT91C_US_DTREN
 (() 0x1 << 16)

805 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

806 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

807 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

809 
	#AT91C_US_USMODE
 (() 0xF << 0)

810 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

811 
	#AT91C_US_USMODE_RS485
 (() 0x1)

812 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

813 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

814 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

815 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

816 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

817 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

818 
	#AT91C_US_CLKS
 (() 0x3 << 4)

819 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

820 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

821 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

822 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

823 
	#AT91C_US_CHRL
 (() 0x3 << 6)

824 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

825 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

826 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

827 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

828 
	#AT91C_US_SYNC
 (() 0x1 << 8)

829 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

830 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

831 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

832 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

833 
	#AT91C_US_MSBF
 (() 0x1 << 16)

834 
	#AT91C_US_MODE9
 (() 0x1 << 17)

835 
	#AT91C_US_CKLO
 (() 0x1 << 18)

836 
	#AT91C_US_OVER
 (() 0x1 << 19)

837 
	#AT91C_US_INACK
 (() 0x1 << 20)

838 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

839 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

840 
	#AT91C_US_FILTER
 (() 0x1 << 28)

842 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

843 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

844 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

845 
	#AT91C_US_NACK
 (() 0x1 << 13)

846 
	#AT91C_US_RIIC
 (() 0x1 << 16)

847 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

848 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

849 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

853 
	#AT91C_US_RI
 (() 0x1 << 20)

854 
	#AT91C_US_DSR
 (() 0x1 << 21)

855 
	#AT91C_US_DCD
 (() 0x1 << 22)

856 
	#AT91C_US_CTS
 (() 0x1 << 23)

857 

	)

861 
	s_AT91S_SSC
 {

862 
AT91_REG
 
	mSSC_CR
;

863 
AT91_REG
 
	mSSC_CMR
;

864 
AT91_REG
 
	mRe£rved0
[2];

865 
AT91_REG
 
	mSSC_RCMR
;

866 
AT91_REG
 
	mSSC_RFMR
;

867 
AT91_REG
 
	mSSC_TCMR
;

868 
AT91_REG
 
	mSSC_TFMR
;

869 
AT91_REG
 
	mSSC_RHR
;

870 
AT91_REG
 
	mSSC_THR
;

871 
AT91_REG
 
	mRe£rved1
[2];

872 
AT91_REG
 
	mSSC_RSHR
;

873 
AT91_REG
 
	mSSC_TSHR
;

874 
AT91_REG
 
	mRe£rved2
[2];

875 
AT91_REG
 
	mSSC_SR
;

876 
AT91_REG
 
	mSSC_IER
;

877 
AT91_REG
 
	mSSC_IDR
;

878 
AT91_REG
 
	mSSC_IMR
;

879 
AT91_REG
 
	mRe£rved3
[44];

880 
AT91_REG
 
	mSSC_RPR
;

881 
AT91_REG
 
	mSSC_RCR
;

882 
AT91_REG
 
	mSSC_TPR
;

883 
AT91_REG
 
	mSSC_TCR
;

884 
AT91_REG
 
	mSSC_RNPR
;

885 
AT91_REG
 
	mSSC_RNCR
;

886 
AT91_REG
 
	mSSC_TNPR
;

887 
AT91_REG
 
	mSSC_TNCR
;

888 
AT91_REG
 
	mSSC_PTCR
;

889 
AT91_REG
 
	mSSC_PTSR
;

890 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

893 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

894 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

895 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

896 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

897 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

899 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

900 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

901 
	#AT91C_SSC_CKS_TK
 (() 0x1)

902 
	#AT91C_SSC_CKS_RK
 (() 0x2)

903 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

904 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

905 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

906 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

907 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

908 
	#AT91C_SSC_START
 (() 0xF << 8)

909 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

910 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

911 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

912 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

913 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

914 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

915 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

916 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

917 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

918 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

919 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

921 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

922 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

923 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

924 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

925 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

926 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

927 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

928 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

929 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

930 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

931 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

932 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

933 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

936 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

937 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

939 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

940 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

941 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

942 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

943 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

944 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

945 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

946 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

947 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

948 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

949 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

950 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

954 

	)

958 
	s_AT91S_TWI
 {

959 
AT91_REG
 
	mTWI_CR
;

960 
AT91_REG
 
	mTWI_MMR
;

961 
AT91_REG
 
	mRe£rved0
[1];

962 
AT91_REG
 
	mTWI_IADR
;

963 
AT91_REG
 
	mTWI_CWGR
;

964 
AT91_REG
 
	mRe£rved1
[3];

965 
AT91_REG
 
	mTWI_SR
;

966 
AT91_REG
 
	mTWI_IER
;

967 
AT91_REG
 
	mTWI_IDR
;

968 
AT91_REG
 
	mTWI_IMR
;

969 
AT91_REG
 
	mTWI_RHR
;

970 
AT91_REG
 
	mTWI_THR
;

971 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

974 
	#AT91C_TWI_START
 (() 0x1 << 0)

975 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

976 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

977 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

978 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

980 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

981 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

982 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

983 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

984 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

985 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

986 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

988 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

989 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

990 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

992 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

993 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

994 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

995 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

996 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

997 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1001 

	)

1005 
	s_AT91S_PWMC_CH
 {

1006 
AT91_REG
 
	mPWMC_CMR
;

1007 
AT91_REG
 
	mPWMC_CDTYR
;

1008 
AT91_REG
 
	mPWMC_CPRDR
;

1009 
AT91_REG
 
	mPWMC_CCNTR
;

1010 
AT91_REG
 
	mPWMC_CUPDR
;

1011 
AT91_REG
 
	mPWMC_Re£rved
[3];

1012 } 
	tAT91S_PWMC_CH
, *
	tAT91PS_PWMC_CH
;

1015 
	#AT91C_PWMC_CPRE
 (() 0xF << 0)

1016 
	#AT91C_PWMC_CPRE_MCK
 (() 0x0)

1017 
	#AT91C_PWMC_CPRE_MCKA
 (() 0xB)

1018 
	#AT91C_PWMC_CPRE_MCKB
 (() 0xC)

1019 
	#AT91C_PWMC_CALG
 (() 0x1 << 8)

1020 
	#AT91C_PWMC_CPOL
 (() 0x1 << 9)

1021 
	#AT91C_PWMC_CPD
 (() 0x1 << 10)

1023 
	#AT91C_PWMC_CDTY
 (() 0x0 << 0)

1025 
	#AT91C_PWMC_CPRD
 (() 0x0 << 0)

1027 
	#AT91C_PWMC_CCNT
 (() 0x0 << 0)

1029 
	#AT91C_PWMC_CUPD
 (() 0x0 << 0)

1030 

	)

1034 
	s_AT91S_PWMC
 {

1035 
AT91_REG
 
	mPWMC_MR
;

1036 
AT91_REG
 
	mPWMC_ENA
;

1037 
AT91_REG
 
	mPWMC_DIS
;

1038 
AT91_REG
 
	mPWMC_SR
;

1039 
AT91_REG
 
	mPWMC_IER
;

1040 
AT91_REG
 
	mPWMC_IDR
;

1041 
AT91_REG
 
	mPWMC_IMR
;

1042 
AT91_REG
 
	mPWMC_ISR
;

1043 
AT91_REG
 
	mRe£rved0
[55];

1044 
AT91_REG
 
	mPWMC_VR
;

1045 
AT91_REG
 
	mRe£rved1
[64];

1046 
AT91S_PWMC_CH
 
	mPWMC_CH
[4];

1047 } 
	tAT91S_PWMC
, *
	tAT91PS_PWMC
;

1050 
	#AT91C_PWMC_DIVA
 (() 0xFF << 0)

1051 
	#AT91C_PWMC_PREA
 (() 0xF << 8)

1052 
	#AT91C_PWMC_PREA_MCK
 (() 0x0 << 8)

1053 
	#AT91C_PWMC_DIVB
 (() 0xFF << 16)

1054 
	#AT91C_PWMC_PREB
 (() 0xF << 24)

1055 
	#AT91C_PWMC_PREB_MCK
 (() 0x0 << 24)

1057 
	#AT91C_PWMC_CHID0
 (() 0x1 << 0)

1058 
	#AT91C_PWMC_CHID1
 (() 0x1 << 1)

1059 
	#AT91C_PWMC_CHID2
 (() 0x1 << 2)

1060 
	#AT91C_PWMC_CHID3
 (() 0x1 << 3)

1067 

	)

1071 
	s_AT91S_UDP
 {

1072 
AT91_REG
 
	mUDP_NUM
;

1073 
AT91_REG
 
	mUDP_GLBSTATE
;

1074 
AT91_REG
 
	mUDP_FADDR
;

1075 
AT91_REG
 
	mRe£rved0
[1];

1076 
AT91_REG
 
	mUDP_IER
;

1077 
AT91_REG
 
	mUDP_IDR
;

1078 
AT91_REG
 
	mUDP_IMR
;

1079 
AT91_REG
 
	mUDP_ISR
;

1080 
AT91_REG
 
	mUDP_ICR
;

1081 
AT91_REG
 
	mRe£rved1
[1];

1082 
AT91_REG
 
	mUDP_RSTEP
;

1083 
AT91_REG
 
	mRe£rved2
[1];

1084 
AT91_REG
 
	mUDP_CSR
[6];

1085 
AT91_REG
 
	mRe£rved3
[2];

1086 
AT91_REG
 
	mUDP_FDR
[6];

1087 
AT91_REG
 
	mRe£rved4
[3];

1088 
AT91_REG
 
	mUDP_TXVC
;

1089 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1092 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1093 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1094 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1096 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1097 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1098 
	#AT91C_UDP_ESR
 (() 0x1 << 2)

1099 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1100 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 4)

1102 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1103 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1105 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1106 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1107 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1108 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1109 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1110 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1111 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1112 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1113 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1114 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1115 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1119 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1122 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1123 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1124 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1125 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1126 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1127 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1129 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1130 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1131 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1132 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1133 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1134 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1135 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1136 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1137 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1138 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1139 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1140 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1141 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1142 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1143 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1144 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1145 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1146 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1147 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1149 
	#AT91C_UDP_TXVDIS
 (() 0x1 << 8)

1150 
	#AT91C_UDP_PUON
 (() 0x1 << 9)

1151 

	)

1155 
	s_AT91S_TC
 {

1156 
AT91_REG
 
	mTC_CCR
;

1157 
AT91_REG
 
	mTC_CMR
;

1158 
AT91_REG
 
	mRe£rved0
[2];

1159 
AT91_REG
 
	mTC_CV
;

1160 
AT91_REG
 
	mTC_RA
;

1161 
AT91_REG
 
	mTC_RB
;

1162 
AT91_REG
 
	mTC_RC
;

1163 
AT91_REG
 
	mTC_SR
;

1164 
AT91_REG
 
	mTC_IER
;

1165 
AT91_REG
 
	mTC_IDR
;

1166 
AT91_REG
 
	mTC_IMR
;

1167 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1170 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1171 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1172 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1174 
	#AT91C_TC_CLKS
 (() 0x7 << 0)

1175 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (() 0x0)

1176 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (() 0x1)

1177 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (() 0x2)

1178 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (() 0x3)

1179 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (() 0x4)

1180 
	#AT91C_TC_CLKS_XC0
 (() 0x5)

1181 
	#AT91C_TC_CLKS_XC1
 (() 0x6)

1182 
	#AT91C_TC_CLKS_XC2
 (() 0x7)

1183 
	#AT91C_TC_CLKI
 (() 0x1 << 3)

1184 
	#AT91C_TC_BURST
 (() 0x3 << 4)

1185 
	#AT91C_TC_BURST_NONE
 (() 0x0 << 4)

1186 
	#AT91C_TC_BURST_XC0
 (() 0x1 << 4)

1187 
	#AT91C_TC_BURST_XC1
 (() 0x2 << 4)

1188 
	#AT91C_TC_BURST_XC2
 (() 0x3 << 4)

1189 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1190 
	#AT91C_TC_LDBSTOP
 (() 0x1 << 6)

1191 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1192 
	#AT91C_TC_LDBDIS
 (() 0x1 << 7)

1193 
	#AT91C_TC_ETRGEDG
 (() 0x3 << 8)

1194 
	#AT91C_TC_ETRGEDG_NONE
 (() 0x0 << 8)

1195 
	#AT91C_TC_ETRGEDG_RISING
 (() 0x1 << 8)

1196 
	#AT91C_TC_ETRGEDG_FALLING
 (() 0x2 << 8)

1197 
	#AT91C_TC_ETRGEDG_BOTH
 (() 0x3 << 8)

1198 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1199 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1200 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1201 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1202 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1203 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1204 
	#AT91C_TC_EEVT_TIOB
 (() 0x0 << 10)

1205 
	#AT91C_TC_EEVT_XC0
 (() 0x1 << 10)

1206 
	#AT91C_TC_EEVT_XC1
 (() 0x2 << 10)

1207 
	#AT91C_TC_EEVT_XC2
 (() 0x3 << 10)

1208 
	#AT91C_TC_ABETRG
 (() 0x1 << 10)

1209 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1210 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1211 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1212 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1213 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1214 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1215 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1216 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1217 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1218 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1219 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1220 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1221 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1222 
	#AT91C_TC_LDRA
 (() 0x3 << 16)

1223 
	#AT91C_TC_LDRA_NONE
 (() 0x0 << 16)

1224 
	#AT91C_TC_LDRA_RISING
 (() 0x1 << 16)

1225 
	#AT91C_TC_LDRA_FALLING
 (() 0x2 << 16)

1226 
	#AT91C_TC_LDRA_BOTH
 (() 0x3 << 16)

1227 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1228 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1229 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1230 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1231 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1232 
	#AT91C_TC_LDRB
 (() 0x3 << 18)

1233 
	#AT91C_TC_LDRB_NONE
 (() 0x0 << 18)

1234 
	#AT91C_TC_LDRB_RISING
 (() 0x1 << 18)

1235 
	#AT91C_TC_LDRB_FALLING
 (() 0x2 << 18)

1236 
	#AT91C_TC_LDRB_BOTH
 (() 0x3 << 18)

1237 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1238 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1239 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1240 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1241 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1242 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1243 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1244 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1245 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1246 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1247 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1248 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1249 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1250 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1251 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1252 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1253 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1254 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1255 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1256 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1257 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1258 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1259 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1260 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1261 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1262 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1263 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1264 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1265 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1266 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1268 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1269 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1270 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1271 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1272 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1273 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1274 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1275 
	#AT91C_TC_ETRGS
 (() 0x1 << 7)

1276 
	#AT91C_TC_CLKSTA
 (() 0x1 << 16)

1277 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1278 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1282 

	)

1286 
	s_AT91S_TCB
 {

1287 
AT91S_TC
 
	mTCB_TC0
;

1288 
AT91_REG
 
	mRe£rved0
[4];

1289 
AT91S_TC
 
	mTCB_TC1
;

1290 
AT91_REG
 
	mRe£rved1
[4];

1291 
AT91S_TC
 
	mTCB_TC2
;

1292 
AT91_REG
 
	mRe£rved2
[4];

1293 
AT91_REG
 
	mTCB_BCR
;

1294 
AT91_REG
 
	mTCB_BMR
;

1295 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1298 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1300 
	#AT91C_TCB_TC0XC0S
 (() 0x3 << 0)

1301 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1302 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1303 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1304 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1305 
	#AT91C_TCB_TC1XC1S
 (() 0x3 << 2)

1306 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1307 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1308 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1309 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1310 
	#AT91C_TCB_TC2XC2S
 (() 0x3 << 4)

1311 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1312 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1313 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1314 
	#AT91C_TCB_TC2XC2S_TIOA1
 (() 0x3 << 4)

1315 

	)

1319 
	s_AT91S_CAN_MB
 {

1320 
AT91_REG
 
	mCAN_MB_MMR
;

1321 
AT91_REG
 
	mCAN_MB_MAM
;

1322 
AT91_REG
 
	mCAN_MB_MID
;

1323 
AT91_REG
 
	mCAN_MB_MFID
;

1324 
AT91_REG
 
	mCAN_MB_MSR
;

1325 
AT91_REG
 
	mCAN_MB_MDL
;

1326 
AT91_REG
 
	mCAN_MB_MDH
;

1327 
AT91_REG
 
	mCAN_MB_MCR
;

1328 } 
	tAT91S_CAN_MB
, *
	tAT91PS_CAN_MB
;

1331 
	#AT91C_CAN_MTIMEMARK
 (() 0xFFFF << 0)

1332 
	#AT91C_CAN_PRIOR
 (() 0xF << 16)

1333 
	#AT91C_CAN_MOT
 (() 0x7 << 24)

1334 
	#AT91C_CAN_MOT_DIS
 (() 0x0 << 24)

1335 
	#AT91C_CAN_MOT_RX
 (() 0x1 << 24)

1336 
	#AT91C_CAN_MOT_RXOVERWRITE
 (() 0x2 << 24)

1337 
	#AT91C_CAN_MOT_TX
 (() 0x3 << 24)

1338 
	#AT91C_CAN_MOT_CONSUMER
 (() 0x4 << 24)

1339 
	#AT91C_CAN_MOT_PRODUCER
 (() 0x5 << 24)

1341 
	#AT91C_CAN_MIDvB
 (() 0x3FFFF << 0)

1342 
	#AT91C_CAN_MIDvA
 (() 0x7FF << 18)

1343 
	#AT91C_CAN_MIDE
 (() 0x1 << 29)

1347 
	#AT91C_CAN_MTIMESTAMP
 (() 0xFFFF << 0)

1348 
	#AT91C_CAN_MDLC
 (() 0xF << 16)

1349 
	#AT91C_CAN_MRTR
 (() 0x1 << 20)

1350 
	#AT91C_CAN_MABT
 (() 0x1 << 22)

1351 
	#AT91C_CAN_MRDY
 (() 0x1 << 23)

1352 
	#AT91C_CAN_MMI
 (() 0x1 << 24)

1356 
	#AT91C_CAN_MACR
 (() 0x1 << 22)

1357 
	#AT91C_CAN_MTCR
 (() 0x1 << 23)

1358 

	)

1362 
	s_AT91S_CAN
 {

1363 
AT91_REG
 
	mCAN_MR
;

1364 
AT91_REG
 
	mCAN_IER
;

1365 
AT91_REG
 
	mCAN_IDR
;

1366 
AT91_REG
 
	mCAN_IMR
;

1367 
AT91_REG
 
	mCAN_SR
;

1368 
AT91_REG
 
	mCAN_BR
;

1369 
AT91_REG
 
	mCAN_TIM
;

1370 
AT91_REG
 
	mCAN_TIMESTP
;

1371 
AT91_REG
 
	mCAN_ECR
;

1372 
AT91_REG
 
	mCAN_TCR
;

1373 
AT91_REG
 
	mCAN_ACR
;

1374 
AT91_REG
 
	mRe£rved0
[52];

1375 
AT91_REG
 
	mCAN_VR
;

1376 
AT91_REG
 
	mRe£rved1
[64];

1377 
AT91S_CAN_MB
 
	mCAN_MB0
;

1378 
AT91S_CAN_MB
 
	mCAN_MB1
;

1379 
AT91S_CAN_MB
 
	mCAN_MB2
;

1380 
AT91S_CAN_MB
 
	mCAN_MB3
;

1381 
AT91S_CAN_MB
 
	mCAN_MB4
;

1382 
AT91S_CAN_MB
 
	mCAN_MB5
;

1383 
AT91S_CAN_MB
 
	mCAN_MB6
;

1384 
AT91S_CAN_MB
 
	mCAN_MB7
;

1385 
AT91S_CAN_MB
 
	mCAN_MB8
;

1386 
AT91S_CAN_MB
 
	mCAN_MB9
;

1387 
AT91S_CAN_MB
 
	mCAN_MB10
;

1388 
AT91S_CAN_MB
 
	mCAN_MB11
;

1389 
AT91S_CAN_MB
 
	mCAN_MB12
;

1390 
AT91S_CAN_MB
 
	mCAN_MB13
;

1391 
AT91S_CAN_MB
 
	mCAN_MB14
;

1392 
AT91S_CAN_MB
 
	mCAN_MB15
;

1393 } 
	tAT91S_CAN
, *
	tAT91PS_CAN
;

1396 
	#AT91C_CAN_CANEN
 (() 0x1 << 0)

1397 
	#AT91C_CAN_LPM
 (() 0x1 << 1)

1398 
	#AT91C_CAN_ABM
 (() 0x1 << 2)

1399 
	#AT91C_CAN_OVL
 (() 0x1 << 3)

1400 
	#AT91C_CAN_TEOF
 (() 0x1 << 4)

1401 
	#AT91C_CAN_TTM
 (() 0x1 << 5)

1402 
	#AT91C_CAN_TIMFRZ
 (() 0x1 << 6)

1403 
	#AT91C_CAN_DRPT
 (() 0x1 << 7)

1405 
	#AT91C_CAN_MB0
 (() 0x1 << 0)

1406 
	#AT91C_CAN_MB1
 (() 0x1 << 1)

1407 
	#AT91C_CAN_MB2
 (() 0x1 << 2)

1408 
	#AT91C_CAN_MB3
 (() 0x1 << 3)

1409 
	#AT91C_CAN_MB4
 (() 0x1 << 4)

1410 
	#AT91C_CAN_MB5
 (() 0x1 << 5)

1411 
	#AT91C_CAN_MB6
 (() 0x1 << 6)

1412 
	#AT91C_CAN_MB7
 (() 0x1 << 7)

1413 
	#AT91C_CAN_MB8
 (() 0x1 << 8)

1414 
	#AT91C_CAN_MB9
 (() 0x1 << 9)

1415 
	#AT91C_CAN_MB10
 (() 0x1 << 10)

1416 
	#AT91C_CAN_MB11
 (() 0x1 << 11)

1417 
	#AT91C_CAN_MB12
 (() 0x1 << 12)

1418 
	#AT91C_CAN_MB13
 (() 0x1 << 13)

1419 
	#AT91C_CAN_MB14
 (() 0x1 << 14)

1420 
	#AT91C_CAN_MB15
 (() 0x1 << 15)

1421 
	#AT91C_CAN_ERRA
 (() 0x1 << 16)

1422 
	#AT91C_CAN_WARN
 (() 0x1 << 17)

1423 
	#AT91C_CAN_ERRP
 (() 0x1 << 18)

1424 
	#AT91C_CAN_BOFF
 (() 0x1 << 19)

1425 
	#AT91C_CAN_SLEEP
 (() 0x1 << 20)

1426 
	#AT91C_CAN_WAKEUP
 (() 0x1 << 21)

1427 
	#AT91C_CAN_TOVF
 (() 0x1 << 22)

1428 
	#AT91C_CAN_TSTP
 (() 0x1 << 23)

1429 
	#AT91C_CAN_CERR
 (() 0x1 << 24)

1430 
	#AT91C_CAN_SERR
 (() 0x1 << 25)

1431 
	#AT91C_CAN_AERR
 (() 0x1 << 26)

1432 
	#AT91C_CAN_FERR
 (() 0x1 << 27)

1433 
	#AT91C_CAN_BERR
 (() 0x1 << 28)

1437 
	#AT91C_CAN_RBSY
 (() 0x1 << 29)

1438 
	#AT91C_CAN_TBSY
 (() 0x1 << 30)

1439 
	#AT91C_CAN_OVLY
 (() 0x1 << 31)

1441 
	#AT91C_CAN_PHASE2
 (() 0x7 << 0)

1442 
	#AT91C_CAN_PHASE1
 (() 0x7 << 4)

1443 
	#AT91C_CAN_PROPAG
 (() 0x7 << 8)

1444 
	#AT91C_CAN_SYNC
 (() 0x3 << 12)

1445 
	#AT91C_CAN_BRP
 (() 0x7F << 16)

1446 
	#AT91C_CAN_SMP
 (() 0x1 << 24)

1448 
	#AT91C_CAN_TIMER
 (() 0xFFFF << 0)

1451 
	#AT91C_CAN_REC
 (() 0xFF << 0)

1452 
	#AT91C_CAN_TEC
 (() 0xFF << 16)

1454 
	#AT91C_CAN_TIMRST
 (() 0x1 << 31)

1456 

	)

1460 
	s_AT91S_EMAC
 {

1461 
AT91_REG
 
	mEMAC_NCR
;

1462 
AT91_REG
 
	mEMAC_NCFGR
;

1463 
AT91_REG
 
	mEMAC_NSR
;

1464 
AT91_REG
 
	mRe£rved0
[2];

1465 
AT91_REG
 
	mEMAC_TSR
;

1466 
AT91_REG
 
	mEMAC_RBQP
;

1467 
AT91_REG
 
	mEMAC_TBQP
;

1468 
AT91_REG
 
	mEMAC_RSR
;

1469 
AT91_REG
 
	mEMAC_ISR
;

1470 
AT91_REG
 
	mEMAC_IER
;

1471 
AT91_REG
 
	mEMAC_IDR
;

1472 
AT91_REG
 
	mEMAC_IMR
;

1473 
AT91_REG
 
	mEMAC_MAN
;

1474 
AT91_REG
 
	mEMAC_PTR
;

1475 
AT91_REG
 
	mEMAC_PFR
;

1476 
AT91_REG
 
	mEMAC_FTO
;

1477 
AT91_REG
 
	mEMAC_SCF
;

1478 
AT91_REG
 
	mEMAC_MCF
;

1479 
AT91_REG
 
	mEMAC_FRO
;

1480 
AT91_REG
 
	mEMAC_FCSE
;

1481 
AT91_REG
 
	mEMAC_ALE
;

1482 
AT91_REG
 
	mEMAC_DTF
;

1483 
AT91_REG
 
	mEMAC_LCOL
;

1484 
AT91_REG
 
	mEMAC_ECOL
;

1485 
AT91_REG
 
	mEMAC_TUND
;

1486 
AT91_REG
 
	mEMAC_CSE
;

1487 
AT91_REG
 
	mEMAC_RRE
;

1488 
AT91_REG
 
	mEMAC_ROV
;

1489 
AT91_REG
 
	mEMAC_RSE
;

1490 
AT91_REG
 
	mEMAC_ELE
;

1491 
AT91_REG
 
	mEMAC_RJA
;

1492 
AT91_REG
 
	mEMAC_USF
;

1493 
AT91_REG
 
	mEMAC_STE
;

1494 
AT91_REG
 
	mEMAC_RLE
;

1495 
AT91_REG
 
	mEMAC_TPF
;

1496 
AT91_REG
 
	mEMAC_HRB
;

1497 
AT91_REG
 
	mEMAC_HRT
;

1498 
AT91_REG
 
	mEMAC_SA1L
;

1499 
AT91_REG
 
	mEMAC_SA1H
;

1500 
AT91_REG
 
	mEMAC_SA2L
;

1501 
AT91_REG
 
	mEMAC_SA2H
;

1502 
AT91_REG
 
	mEMAC_SA3L
;

1503 
AT91_REG
 
	mEMAC_SA3H
;

1504 
AT91_REG
 
	mEMAC_SA4L
;

1505 
AT91_REG
 
	mEMAC_SA4H
;

1506 
AT91_REG
 
	mEMAC_TID
;

1507 
AT91_REG
 
	mEMAC_TPQ
;

1508 
AT91_REG
 
	mEMAC_USRIO
;

1509 
AT91_REG
 
	mEMAC_WOL
;

1510 
AT91_REG
 
	mRe£rved1
[13];

1511 
AT91_REG
 
	mEMAC_REV
;

1512 } 
	tAT91S_EMAC
, *
	tAT91PS_EMAC
;

1515 
	#AT91C_EMAC_LB
 (() 0x1 << 0)

1516 
	#AT91C_EMAC_LLB
 (() 0x1 << 1)

1517 
	#AT91C_EMAC_RE
 (() 0x1 << 2)

1518 
	#AT91C_EMAC_TE
 (() 0x1 << 3)

1519 
	#AT91C_EMAC_MPE
 (() 0x1 << 4)

1520 
	#AT91C_EMAC_CLRSTAT
 (() 0x1 << 5)

1521 
	#AT91C_EMAC_INCSTAT
 (() 0x1 << 6)

1522 
	#AT91C_EMAC_WESTAT
 (() 0x1 << 7)

1523 
	#AT91C_EMAC_BP
 (() 0x1 << 8)

1524 
	#AT91C_EMAC_TSTART
 (() 0x1 << 9)

1525 
	#AT91C_EMAC_THALT
 (() 0x1 << 10)

1526 
	#AT91C_EMAC_TPFR
 (() 0x1 << 11)

1527 
	#AT91C_EMAC_TZQ
 (() 0x1 << 12)

1529 
	#AT91C_EMAC_SPD
 (() 0x1 << 0)

1530 
	#AT91C_EMAC_FD
 (() 0x1 << 1)

1531 
	#AT91C_EMAC_JFRAME
 (() 0x1 << 3)

1532 
	#AT91C_EMAC_CAF
 (() 0x1 << 4)

1533 
	#AT91C_EMAC_NBC
 (() 0x1 << 5)

1534 
	#AT91C_EMAC_MTI
 (() 0x1 << 6)

1535 
	#AT91C_EMAC_UNI
 (() 0x1 << 7)

1536 
	#AT91C_EMAC_BIG
 (() 0x1 << 8)

1537 
	#AT91C_EMAC_EAE
 (() 0x1 << 9)

1538 
	#AT91C_EMAC_CLK
 (() 0x3 << 10)

1539 
	#AT91C_EMAC_CLK_HCLK_8
 (() 0x0 << 10)

1540 
	#AT91C_EMAC_CLK_HCLK_16
 (() 0x1 << 10)

1541 
	#AT91C_EMAC_CLK_HCLK_32
 (() 0x2 << 10)

1542 
	#AT91C_EMAC_CLK_HCLK_64
 (() 0x3 << 10)

1543 
	#AT91C_EMAC_RTY
 (() 0x1 << 12)

1544 
	#AT91C_EMAC_PAE
 (() 0x1 << 13)

1545 
	#AT91C_EMAC_RBOF
 (() 0x3 << 14)

1546 
	#AT91C_EMAC_RBOF_OFFSET_0
 (() 0x0 << 14)

1547 
	#AT91C_EMAC_RBOF_OFFSET_1
 (() 0x1 << 14)

1548 
	#AT91C_EMAC_RBOF_OFFSET_2
 (() 0x2 << 14)

1549 
	#AT91C_EMAC_RBOF_OFFSET_3
 (() 0x3 << 14)

1550 
	#AT91C_EMAC_RLCE
 (() 0x1 << 16)

1551 
	#AT91C_EMAC_DRFCS
 (() 0x1 << 17)

1552 
	#AT91C_EMAC_EFRHD
 (() 0x1 << 18)

1553 
	#AT91C_EMAC_IRXFCS
 (() 0x1 << 19)

1555 
	#AT91C_EMAC_LINKR
 (() 0x1 << 0)

1556 
	#AT91C_EMAC_MDIO
 (() 0x1 << 1)

1557 
	#AT91C_EMAC_IDLE
 (() 0x1 << 2)

1559 
	#AT91C_EMAC_UBR
 (() 0x1 << 0)

1560 
	#AT91C_EMAC_COL
 (() 0x1 << 1)

1561 
	#AT91C_EMAC_RLES
 (() 0x1 << 2)

1562 
	#AT91C_EMAC_TGO
 (() 0x1 << 3)

1563 
	#AT91C_EMAC_BEX
 (() 0x1 << 4)

1564 
	#AT91C_EMAC_COMP
 (() 0x1 << 5)

1565 
	#AT91C_EMAC_UND
 (() 0x1 << 6)

1567 
	#AT91C_EMAC_BNA
 (() 0x1 << 0)

1568 
	#AT91C_EMAC_REC
 (() 0x1 << 1)

1569 
	#AT91C_EMAC_OVR
 (() 0x1 << 2)

1571 
	#AT91C_EMAC_MFD
 (() 0x1 << 0)

1572 
	#AT91C_EMAC_RCOMP
 (() 0x1 << 1)

1573 
	#AT91C_EMAC_RXUBR
 (() 0x1 << 2)

1574 
	#AT91C_EMAC_TXUBR
 (() 0x1 << 3)

1575 
	#AT91C_EMAC_TUNDR
 (() 0x1 << 4)

1576 
	#AT91C_EMAC_RLEX
 (() 0x1 << 5)

1577 
	#AT91C_EMAC_TXERR
 (() 0x1 << 6)

1578 
	#AT91C_EMAC_TCOMP
 (() 0x1 << 7)

1579 
	#AT91C_EMAC_LINK
 (() 0x1 << 9)

1580 
	#AT91C_EMAC_ROVR
 (() 0x1 << 10)

1581 
	#AT91C_EMAC_HRESP
 (() 0x1 << 11)

1582 
	#AT91C_EMAC_PFRE
 (() 0x1 << 12)

1583 
	#AT91C_EMAC_PTZ
 (() 0x1 << 13)

1588 
	#AT91C_EMAC_DATA
 (() 0xFFFF << 0)

1589 
	#AT91C_EMAC_CODE
 (() 0x3 << 16)

1590 
	#AT91C_EMAC_REGA
 (() 0x1F << 18)

1591 
	#AT91C_EMAC_PHYA
 (() 0x1F << 23)

1592 
	#AT91C_EMAC_RW
 (() 0x3 << 28)

1593 
	#AT91C_EMAC_SOF
 (() 0x3 << 30)

1595 
	#AT91C_EMAC_RMII
 (() 0x1 << 0)

1597 
	#AT91C_EMAC_IP
 (() 0xFFFF << 0)

1598 
	#AT91C_EMAC_MAG
 (() 0x1 << 16)

1599 
	#AT91C_EMAC_ARP
 (() 0x1 << 17)

1600 
	#AT91C_EMAC_SA1
 (() 0x1 << 18)

1602 
	#AT91C_EMAC_REVREF
 (() 0xFFFF << 0)

1603 
	#AT91C_EMAC_PARTREF
 (() 0xFFFF << 16)

1604 

	)

1608 
	s_AT91S_ADC
 {

1609 
AT91_REG
 
	mADC_CR
;

1610 
AT91_REG
 
	mADC_MR
;

1611 
AT91_REG
 
	mRe£rved0
[2];

1612 
AT91_REG
 
	mADC_CHER
;

1613 
AT91_REG
 
	mADC_CHDR
;

1614 
AT91_REG
 
	mADC_CHSR
;

1615 
AT91_REG
 
	mADC_SR
;

1616 
AT91_REG
 
	mADC_LCDR
;

1617 
AT91_REG
 
	mADC_IER
;

1618 
AT91_REG
 
	mADC_IDR
;

1619 
AT91_REG
 
	mADC_IMR
;

1620 
AT91_REG
 
	mADC_CDR0
;

1621 
AT91_REG
 
	mADC_CDR1
;

1622 
AT91_REG
 
	mADC_CDR2
;

1623 
AT91_REG
 
	mADC_CDR3
;

1624 
AT91_REG
 
	mADC_CDR4
;

1625 
AT91_REG
 
	mADC_CDR5
;

1626 
AT91_REG
 
	mADC_CDR6
;

1627 
AT91_REG
 
	mADC_CDR7
;

1628 
AT91_REG
 
	mRe£rved1
[44];

1629 
AT91_REG
 
	mADC_RPR
;

1630 
AT91_REG
 
	mADC_RCR
;

1631 
AT91_REG
 
	mADC_TPR
;

1632 
AT91_REG
 
	mADC_TCR
;

1633 
AT91_REG
 
	mADC_RNPR
;

1634 
AT91_REG
 
	mADC_RNCR
;

1635 
AT91_REG
 
	mADC_TNPR
;

1636 
AT91_REG
 
	mADC_TNCR
;

1637 
AT91_REG
 
	mADC_PTCR
;

1638 
AT91_REG
 
	mADC_PTSR
;

1639 } 
	tAT91S_ADC
, *
	tAT91PS_ADC
;

1642 
	#AT91C_ADC_SWRST
 (() 0x1 << 0)

1643 
	#AT91C_ADC_START
 (() 0x1 << 1)

1645 
	#AT91C_ADC_TRGEN
 (() 0x1 << 0)

1646 
	#AT91C_ADC_TRGEN_DIS
 (() 0x0)

1647 
	#AT91C_ADC_TRGEN_EN
 (() 0x1)

1648 
	#AT91C_ADC_TRGSEL
 (() 0x7 << 1)

1649 
	#AT91C_ADC_TRGSEL_TIOA0
 (() 0x0 << 1)

1650 
	#AT91C_ADC_TRGSEL_TIOA1
 (() 0x1 << 1)

1651 
	#AT91C_ADC_TRGSEL_TIOA2
 (() 0x2 << 1)

1652 
	#AT91C_ADC_TRGSEL_TIOA3
 (() 0x3 << 1)

1653 
	#AT91C_ADC_TRGSEL_TIOA4
 (() 0x4 << 1)

1654 
	#AT91C_ADC_TRGSEL_TIOA5
 (() 0x5 << 1)

1655 
	#AT91C_ADC_TRGSEL_EXT
 (() 0x6 << 1)

1656 
	#AT91C_ADC_LOWRES
 (() 0x1 << 4)

1657 
	#AT91C_ADC_LOWRES_10_BIT
 (() 0x0 << 4)

1658 
	#AT91C_ADC_LOWRES_8_BIT
 (() 0x1 << 4)

1659 
	#AT91C_ADC_SLEEP
 (() 0x1 << 5)

1660 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (() 0x0 << 5)

1661 
	#AT91C_ADC_SLEEP_MODE
 (() 0x1 << 5)

1662 
	#AT91C_ADC_PRESCAL
 (() 0x3F << 8)

1663 
	#AT91C_ADC_STARTUP
 (() 0x1F << 16)

1664 
	#AT91C_ADC_SHTIM
 (() 0xF << 24)

1666 
	#AT91C_ADC_CH0
 (() 0x1 << 0)

1667 
	#AT91C_ADC_CH1
 (() 0x1 << 1)

1668 
	#AT91C_ADC_CH2
 (() 0x1 << 2)

1669 
	#AT91C_ADC_CH3
 (() 0x1 << 3)

1670 
	#AT91C_ADC_CH4
 (() 0x1 << 4)

1671 
	#AT91C_ADC_CH5
 (() 0x1 << 5)

1672 
	#AT91C_ADC_CH6
 (() 0x1 << 6)

1673 
	#AT91C_ADC_CH7
 (() 0x1 << 7)

1677 
	#AT91C_ADC_EOC0
 (() 0x1 << 0)

1678 
	#AT91C_ADC_EOC1
 (() 0x1 << 1)

1679 
	#AT91C_ADC_EOC2
 (() 0x1 << 2)

1680 
	#AT91C_ADC_EOC3
 (() 0x1 << 3)

1681 
	#AT91C_ADC_EOC4
 (() 0x1 << 4)

1682 
	#AT91C_ADC_EOC5
 (() 0x1 << 5)

1683 
	#AT91C_ADC_EOC6
 (() 0x1 << 6)

1684 
	#AT91C_ADC_EOC7
 (() 0x1 << 7)

1685 
	#AT91C_ADC_OVRE0
 (() 0x1 << 8)

1686 
	#AT91C_ADC_OVRE1
 (() 0x1 << 9)

1687 
	#AT91C_ADC_OVRE2
 (() 0x1 << 10)

1688 
	#AT91C_ADC_OVRE3
 (() 0x1 << 11)

1689 
	#AT91C_ADC_OVRE4
 (() 0x1 << 12)

1690 
	#AT91C_ADC_OVRE5
 (() 0x1 << 13)

1691 
	#AT91C_ADC_OVRE6
 (() 0x1 << 14)

1692 
	#AT91C_ADC_OVRE7
 (() 0x1 << 15)

1693 
	#AT91C_ADC_DRDY
 (() 0x1 << 16)

1694 
	#AT91C_ADC_GOVRE
 (() 0x1 << 17)

1695 
	#AT91C_ADC_ENDRX
 (() 0x1 << 18)

1696 
	#AT91C_ADC_RXBUFF
 (() 0x1 << 19)

1698 
	#AT91C_ADC_LDATA
 (() 0x3FF << 0)

1703 
	#AT91C_ADC_DATA
 (() 0x3FF << 0)

1711 

	)

1715 
	s_AT91S_AES
 {

1716 
AT91_REG
 
	mAES_CR
;

1717 
AT91_REG
 
	mAES_MR
;

1718 
AT91_REG
 
	mRe£rved0
[2];

1719 
AT91_REG
 
	mAES_IER
;

1720 
AT91_REG
 
	mAES_IDR
;

1721 
AT91_REG
 
	mAES_IMR
;

1722 
AT91_REG
 
	mAES_ISR
;

1723 
AT91_REG
 
	mAES_KEYWxR
[4];

1724 
AT91_REG
 
	mRe£rved1
[4];

1725 
AT91_REG
 
	mAES_IDATAxR
[4];

1726 
AT91_REG
 
	mAES_ODATAxR
[4];

1727 
AT91_REG
 
	mAES_IVxR
[4];

1728 
AT91_REG
 
	mRe£rved2
[35];

1729 
AT91_REG
 
	mAES_VR
;

1730 
AT91_REG
 
	mAES_RPR
;

1731 
AT91_REG
 
	mAES_RCR
;

1732 
AT91_REG
 
	mAES_TPR
;

1733 
AT91_REG
 
	mAES_TCR
;

1734 
AT91_REG
 
	mAES_RNPR
;

1735 
AT91_REG
 
	mAES_RNCR
;

1736 
AT91_REG
 
	mAES_TNPR
;

1737 
AT91_REG
 
	mAES_TNCR
;

1738 
AT91_REG
 
	mAES_PTCR
;

1739 
AT91_REG
 
	mAES_PTSR
;

1740 } 
	tAT91S_AES
, *
	tAT91PS_AES
;

1743 
	#AT91C_AES_START
 (() 0x1 << 0)

1744 
	#AT91C_AES_SWRST
 (() 0x1 << 8)

1745 
	#AT91C_AES_LOADSEED
 (() 0x1 << 16)

1747 
	#AT91C_AES_CIPHER
 (() 0x1 << 0)

1748 
	#AT91C_AES_PROCDLY
 (() 0xF << 4)

1749 
	#AT91C_AES_SMOD
 (() 0x3 << 8)

1750 
	#AT91C_AES_SMOD_MANUAL
 (() 0x0 << 8)

1751 
	#AT91C_AES_SMOD_AUTO
 (() 0x1 << 8)

1752 
	#AT91C_AES_SMOD_PDC
 (() 0x2 << 8)

1753 
	#AT91C_AES_OPMOD
 (() 0x7 << 12)

1754 
	#AT91C_AES_OPMOD_ECB
 (() 0x0 << 12)

1755 
	#AT91C_AES_OPMOD_CBC
 (() 0x1 << 12)

1756 
	#AT91C_AES_OPMOD_OFB
 (() 0x2 << 12)

1757 
	#AT91C_AES_OPMOD_CFB
 (() 0x3 << 12)

1758 
	#AT91C_AES_OPMOD_CTR
 (() 0x4 << 12)

1759 
	#AT91C_AES_LOD
 (() 0x1 << 15)

1760 
	#AT91C_AES_CFBS
 (() 0x7 << 16)

1761 
	#AT91C_AES_CFBS_128_BIT
 (() 0x0 << 16)

1762 
	#AT91C_AES_CFBS_64_BIT
 (() 0x1 << 16)

1763 
	#AT91C_AES_CFBS_32_BIT
 (() 0x2 << 16)

1764 
	#AT91C_AES_CFBS_16_BIT
 (() 0x3 << 16)

1765 
	#AT91C_AES_CFBS_8_BIT
 (() 0x4 << 16)

1766 
	#AT91C_AES_CKEY
 (() 0xF << 20)

1767 
	#AT91C_AES_CTYPE
 (() 0x1F << 24)

1768 
	#AT91C_AES_CTYPE_TYPE1_EN
 (() 0x1 << 24)

1769 
	#AT91C_AES_CTYPE_TYPE2_EN
 (() 0x2 << 24)

1770 
	#AT91C_AES_CTYPE_TYPE3_EN
 (() 0x4 << 24)

1771 
	#AT91C_AES_CTYPE_TYPE4_EN
 (() 0x8 << 24)

1772 
	#AT91C_AES_CTYPE_TYPE5_EN
 (() 0x10 << 24)

1774 
	#AT91C_AES_DATRDY
 (() 0x1 << 0)

1775 
	#AT91C_AES_ENDRX
 (() 0x1 << 1)

1776 
	#AT91C_AES_ENDTX
 (() 0x1 << 2)

1777 
	#AT91C_AES_RXBUFF
 (() 0x1 << 3)

1778 
	#AT91C_AES_TXBUFE
 (() 0x1 << 4)

1779 
	#AT91C_AES_URAD
 (() 0x1 << 8)

1783 
	#AT91C_AES_URAT
 (() 0x7 << 12)

1784 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1785 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1786 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1787 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (() 0x3 << 12)

1788 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (() 0x4 << 12)

1789 
	#AT91C_AES_URAT_WO_REG_READ
 (() 0x5 << 12)

1790 

	)

1794 
	s_AT91S_TDES
 {

1795 
AT91_REG
 
	mTDES_CR
;

1796 
AT91_REG
 
	mTDES_MR
;

1797 
AT91_REG
 
	mRe£rved0
[2];

1798 
AT91_REG
 
	mTDES_IER
;

1799 
AT91_REG
 
	mTDES_IDR
;

1800 
AT91_REG
 
	mTDES_IMR
;

1801 
AT91_REG
 
	mTDES_ISR
;

1802 
AT91_REG
 
	mTDES_KEY1WxR
[2];

1803 
AT91_REG
 
	mTDES_KEY2WxR
[2];

1804 
AT91_REG
 
	mTDES_KEY3WxR
[2];

1805 
AT91_REG
 
	mRe£rved1
[2];

1806 
AT91_REG
 
	mTDES_IDATAxR
[2];

1807 
AT91_REG
 
	mRe£rved2
[2];

1808 
AT91_REG
 
	mTDES_ODATAxR
[2];

1809 
AT91_REG
 
	mRe£rved3
[2];

1810 
AT91_REG
 
	mTDES_IVxR
[2];

1811 
AT91_REG
 
	mRe£rved4
[37];

1812 
AT91_REG
 
	mTDES_VR
;

1813 
AT91_REG
 
	mTDES_RPR
;

1814 
AT91_REG
 
	mTDES_RCR
;

1815 
AT91_REG
 
	mTDES_TPR
;

1816 
AT91_REG
 
	mTDES_TCR
;

1817 
AT91_REG
 
	mTDES_RNPR
;

1818 
AT91_REG
 
	mTDES_RNCR
;

1819 
AT91_REG
 
	mTDES_TNPR
;

1820 
AT91_REG
 
	mTDES_TNCR
;

1821 
AT91_REG
 
	mTDES_PTCR
;

1822 
AT91_REG
 
	mTDES_PTSR
;

1823 } 
	tAT91S_TDES
, *
	tAT91PS_TDES
;

1826 
	#AT91C_TDES_START
 (() 0x1 << 0)

1827 
	#AT91C_TDES_SWRST
 (() 0x1 << 8)

1829 
	#AT91C_TDES_CIPHER
 (() 0x1 << 0)

1830 
	#AT91C_TDES_TDESMOD
 (() 0x1 << 1)

1831 
	#AT91C_TDES_KEYMOD
 (() 0x1 << 4)

1832 
	#AT91C_TDES_SMOD
 (() 0x3 << 8)

1833 
	#AT91C_TDES_SMOD_MANUAL
 (() 0x0 << 8)

1834 
	#AT91C_TDES_SMOD_AUTO
 (() 0x1 << 8)

1835 
	#AT91C_TDES_SMOD_PDC
 (() 0x2 << 8)

1836 
	#AT91C_TDES_OPMOD
 (() 0x3 << 12)

1837 
	#AT91C_TDES_OPMOD_ECB
 (() 0x0 << 12)

1838 
	#AT91C_TDES_OPMOD_CBC
 (() 0x1 << 12)

1839 
	#AT91C_TDES_OPMOD_OFB
 (() 0x2 << 12)

1840 
	#AT91C_TDES_OPMOD_CFB
 (() 0x3 << 12)

1841 
	#AT91C_TDES_LOD
 (() 0x1 << 15)

1842 
	#AT91C_TDES_CFBS
 (() 0x3 << 16)

1843 
	#AT91C_TDES_CFBS_64_BIT
 (() 0x0 << 16)

1844 
	#AT91C_TDES_CFBS_32_BIT
 (() 0x1 << 16)

1845 
	#AT91C_TDES_CFBS_16_BIT
 (() 0x2 << 16)

1846 
	#AT91C_TDES_CFBS_8_BIT
 (() 0x3 << 16)

1848 
	#AT91C_TDES_DATRDY
 (() 0x1 << 0)

1849 
	#AT91C_TDES_ENDRX
 (() 0x1 << 1)

1850 
	#AT91C_TDES_ENDTX
 (() 0x1 << 2)

1851 
	#AT91C_TDES_RXBUFF
 (() 0x1 << 3)

1852 
	#AT91C_TDES_TXBUFE
 (() 0x1 << 4)

1853 
	#AT91C_TDES_URAD
 (() 0x1 << 8)

1857 
	#AT91C_TDES_URAT
 (() 0x3 << 12)

1858 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1859 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1860 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1861 
	#AT91C_TDES_URAT_WO_REG_READ
 (() 0x3 << 12)

1862 

	)

1868 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1869 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1870 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1871 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1872 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1873 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1874 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1875 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1876 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1877 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1878 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1879 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1880 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1881 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1882 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1883 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1884 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1885 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1887 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1888 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1889 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1890 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1891 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1892 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1893 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1894 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1895 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1896 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1898 
	#AT91C_DBGU_EXID
 ((
AT91_REG
 *) 0xFFFFF244)

1899 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1900 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1901 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1902 
	#AT91C_DBGU_CIDR
 ((
AT91_REG
 *) 0xFFFFF240)

1903 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1904 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1905 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1906 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1907 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1908 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1909 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1911 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1912 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1913 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1914 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1915 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1916 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1917 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1918 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1919 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1920 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1921 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1922 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1923 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1924 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1925 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1926 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1927 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1928 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1929 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1930 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1931 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1932 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1933 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1934 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1935 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1936 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1937 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1938 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1939 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1941 
	#AT91C_PIOB_OWDR
 ((
AT91_REG
 *) 0xFFFFF6A4)

1942 
	#AT91C_PIOB_MDER
 ((
AT91_REG
 *) 0xFFFFF650)

1943 
	#AT91C_PIOB_PPUSR
 ((
AT91_REG
 *) 0xFFFFF668)

1944 
	#AT91C_PIOB_IMR
 ((
AT91_REG
 *) 0xFFFFF648)

1945 
	#AT91C_PIOB_ASR
 ((
AT91_REG
 *) 0xFFFFF670)

1946 
	#AT91C_PIOB_PPUDR
 ((
AT91_REG
 *) 0xFFFFF660)

1947 
	#AT91C_PIOB_PSR
 ((
AT91_REG
 *) 0xFFFFF608)

1948 
	#AT91C_PIOB_IER
 ((
AT91_REG
 *) 0xFFFFF640)

1949 
	#AT91C_PIOB_CODR
 ((
AT91_REG
 *) 0xFFFFF634)

1950 
	#AT91C_PIOB_OWER
 ((
AT91_REG
 *) 0xFFFFF6A0)

1951 
	#AT91C_PIOB_ABSR
 ((
AT91_REG
 *) 0xFFFFF678)

1952 
	#AT91C_PIOB_IFDR
 ((
AT91_REG
 *) 0xFFFFF624)

1953 
	#AT91C_PIOB_PDSR
 ((
AT91_REG
 *) 0xFFFFF63C)

1954 
	#AT91C_PIOB_IDR
 ((
AT91_REG
 *) 0xFFFFF644)

1955 
	#AT91C_PIOB_OWSR
 ((
AT91_REG
 *) 0xFFFFF6A8)

1956 
	#AT91C_PIOB_PDR
 ((
AT91_REG
 *) 0xFFFFF604)

1957 
	#AT91C_PIOB_ODR
 ((
AT91_REG
 *) 0xFFFFF614)

1958 
	#AT91C_PIOB_IFSR
 ((
AT91_REG
 *) 0xFFFFF628)

1959 
	#AT91C_PIOB_PPUER
 ((
AT91_REG
 *) 0xFFFFF664)

1960 
	#AT91C_PIOB_SODR
 ((
AT91_REG
 *) 0xFFFFF630)

1961 
	#AT91C_PIOB_ISR
 ((
AT91_REG
 *) 0xFFFFF64C)

1962 
	#AT91C_PIOB_ODSR
 ((
AT91_REG
 *) 0xFFFFF638)

1963 
	#AT91C_PIOB_OSR
 ((
AT91_REG
 *) 0xFFFFF618)

1964 
	#AT91C_PIOB_MDSR
 ((
AT91_REG
 *) 0xFFFFF658)

1965 
	#AT91C_PIOB_IFER
 ((
AT91_REG
 *) 0xFFFFF620)

1966 
	#AT91C_PIOB_BSR
 ((
AT91_REG
 *) 0xFFFFF674)

1967 
	#AT91C_PIOB_MDDR
 ((
AT91_REG
 *) 0xFFFFF654)

1968 
	#AT91C_PIOB_OER
 ((
AT91_REG
 *) 0xFFFFF610)

1969 
	#AT91C_PIOB_PER
 ((
AT91_REG
 *) 0xFFFFF600)

1971 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1972 
	#AT91C_CKGR_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1973 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1975 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1976 
	#AT91C_PMC_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1977 
	#AT91C_PMC_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1978 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1979 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1980 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1981 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1982 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1983 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1984 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1985 
	#AT91C_PMC_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1986 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1987 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1988 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1989 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1991 
	#AT91C_RSTC_RCR
 ((
AT91_REG
 *) 0xFFFFFD00)

1992 
	#AT91C_RSTC_RMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1993 
	#AT91C_RSTC_RSR
 ((
AT91_REG
 *) 0xFFFFFD04)

1995 
	#AT91C_RTTC_RTSR
 ((
AT91_REG
 *) 0xFFFFFD2C)

1996 
	#AT91C_RTTC_RTMR
 ((
AT91_REG
 *) 0xFFFFFD20)

1997 
	#AT91C_RTTC_RTVR
 ((
AT91_REG
 *) 0xFFFFFD28)

1998 
	#AT91C_RTTC_RTAR
 ((
AT91_REG
 *) 0xFFFFFD24)

2000 
	#AT91C_PITC_PIVR
 ((
AT91_REG
 *) 0xFFFFFD38)

2001 
	#AT91C_PITC_PISR
 ((
AT91_REG
 *) 0xFFFFFD34)

2002 
	#AT91C_PITC_PIIR
 ((
AT91_REG
 *) 0xFFFFFD3C)

2003 
	#AT91C_PITC_PIMR
 ((
AT91_REG
 *) 0xFFFFFD30)

2005 
	#AT91C_WDTC_WDCR
 ((
AT91_REG
 *) 0xFFFFFD40)

2006 
	#AT91C_WDTC_WDSR
 ((
AT91_REG
 *) 0xFFFFFD48)

2007 
	#AT91C_WDTC_WDMR
 ((
AT91_REG
 *) 0xFFFFFD44)

2009 
	#AT91C_VREG_MR
 ((
AT91_REG
 *) 0xFFFFFD60)

2011 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

2012 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

2013 
	#AT91C_MC_FCR
 ((
AT91_REG
 *) 0xFFFFFF64)

2014 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

2015 
	#AT91C_MC_FSR
 ((
AT91_REG
 *) 0xFFFFFF68)

2016 
	#AT91C_MC_FMR
 ((
AT91_REG
 *) 0xFFFFFF60)

2018 
	#AT91C_SPI1_PTCR
 ((
AT91_REG
 *) 0xFFFE4120)

2019 
	#AT91C_SPI1_RPR
 ((
AT91_REG
 *) 0xFFFE4100)

2020 
	#AT91C_SPI1_TNCR
 ((
AT91_REG
 *) 0xFFFE411C)

2021 
	#AT91C_SPI1_TPR
 ((
AT91_REG
 *) 0xFFFE4108)

2022 
	#AT91C_SPI1_TNPR
 ((
AT91_REG
 *) 0xFFFE4118)

2023 
	#AT91C_SPI1_TCR
 ((
AT91_REG
 *) 0xFFFE410C)

2024 
	#AT91C_SPI1_RCR
 ((
AT91_REG
 *) 0xFFFE4104)

2025 
	#AT91C_SPI1_RNPR
 ((
AT91_REG
 *) 0xFFFE4110)

2026 
	#AT91C_SPI1_RNCR
 ((
AT91_REG
 *) 0xFFFE4114)

2027 
	#AT91C_SPI1_PTSR
 ((
AT91_REG
 *) 0xFFFE4124)

2029 
	#AT91C_SPI1_IMR
 ((
AT91_REG
 *) 0xFFFE401C)

2030 
	#AT91C_SPI1_IER
 ((
AT91_REG
 *) 0xFFFE4014)

2031 
	#AT91C_SPI1_MR
 ((
AT91_REG
 *) 0xFFFE4004)

2032 
	#AT91C_SPI1_RDR
 ((
AT91_REG
 *) 0xFFFE4008)

2033 
	#AT91C_SPI1_IDR
 ((
AT91_REG
 *) 0xFFFE4018)

2034 
	#AT91C_SPI1_SR
 ((
AT91_REG
 *) 0xFFFE4010)

2035 
	#AT91C_SPI1_TDR
 ((
AT91_REG
 *) 0xFFFE400C)

2036 
	#AT91C_SPI1_CR
 ((
AT91_REG
 *) 0xFFFE4000)

2037 
	#AT91C_SPI1_CSR
 ((
AT91_REG
 *) 0xFFFE4030)

2039 
	#AT91C_SPI0_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

2040 
	#AT91C_SPI0_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

2041 
	#AT91C_SPI0_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

2042 
	#AT91C_SPI0_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

2043 
	#AT91C_SPI0_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

2044 
	#AT91C_SPI0_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

2045 
	#AT91C_SPI0_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

2046 
	#AT91C_SPI0_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

2047 
	#AT91C_SPI0_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

2048 
	#AT91C_SPI0_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

2050 
	#AT91C_SPI0_IER
 ((
AT91_REG
 *) 0xFFFE0014)

2051 
	#AT91C_SPI0_SR
 ((
AT91_REG
 *) 0xFFFE0010)

2052 
	#AT91C_SPI0_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

2053 
	#AT91C_SPI0_CR
 ((
AT91_REG
 *) 0xFFFE0000)

2054 
	#AT91C_SPI0_MR
 ((
AT91_REG
 *) 0xFFFE0004)

2055 
	#AT91C_SPI0_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

2056 
	#AT91C_SPI0_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

2057 
	#AT91C_SPI0_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

2058 
	#AT91C_SPI0_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

2060 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

2061 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

2062 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

2063 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

2064 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

2065 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

2066 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

2067 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

2068 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

2069 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

2071 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

2072 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

2073 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

2074 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

2075 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

2076 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

2077 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

2078 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

2079 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

2080 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

2081 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

2082 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

2083 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

2084 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

2086 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

2087 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

2088 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

2089 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

2090 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

2091 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

2092 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

2093 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

2094 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

2095 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

2097 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

2098 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

2099 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

2100 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

2101 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

2102 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

2103 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

2104 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

2105 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

2106 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

2107 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

2108 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

2109 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

2110 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

2112 
	#AT91C_SSC_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

2113 
	#AT91C_SSC_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

2114 
	#AT91C_SSC_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

2115 
	#AT91C_SSC_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

2116 
	#AT91C_SSC_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

2117 
	#AT91C_SSC_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

2118 
	#AT91C_SSC_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

2119 
	#AT91C_SSC_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

2120 
	#AT91C_SSC_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

2121 
	#AT91C_SSC_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

2123 
	#AT91C_SSC_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

2124 
	#AT91C_SSC_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

2125 
	#AT91C_SSC_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

2126 
	#AT91C_SSC_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

2127 
	#AT91C_SSC_THR
 ((
AT91_REG
 *) 0xFFFD4024)

2128 
	#AT91C_SSC_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

2129 
	#AT91C_SSC_IER
 ((
AT91_REG
 *) 0xFFFD4044)

2130 
	#AT91C_SSC_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

2131 
	#AT91C_SSC_SR
 ((
AT91_REG
 *) 0xFFFD4040)

2132 
	#AT91C_SSC_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

2133 
	#AT91C_SSC_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

2134 
	#AT91C_SSC_CR
 ((
AT91_REG
 *) 0xFFFD4000)

2135 
	#AT91C_SSC_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

2136 
	#AT91C_SSC_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

2138 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

2139 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

2140 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

2141 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

2142 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

2143 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

2144 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

2145 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

2146 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

2147 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

2149 
	#AT91C_PWMC_CH3_CUPDR
 ((
AT91_REG
 *) 0xFFFCC270)

2150 
	#AT91C_PWMC_CH3_Re£rved
 ((
AT91_REG
 *) 0xFFFCC274)

2151 
	#AT91C_PWMC_CH3_CPRDR
 ((
AT91_REG
 *) 0xFFFCC268)

2152 
	#AT91C_PWMC_CH3_CDTYR
 ((
AT91_REG
 *) 0xFFFCC264)

2153 
	#AT91C_PWMC_CH3_CCNTR
 ((
AT91_REG
 *) 0xFFFCC26C)

2154 
	#AT91C_PWMC_CH3_CMR
 ((
AT91_REG
 *) 0xFFFCC260)

2156 
	#AT91C_PWMC_CH2_Re£rved
 ((
AT91_REG
 *) 0xFFFCC254)

2157 
	#AT91C_PWMC_CH2_CMR
 ((
AT91_REG
 *) 0xFFFCC240)

2158 
	#AT91C_PWMC_CH2_CCNTR
 ((
AT91_REG
 *) 0xFFFCC24C)

2159 
	#AT91C_PWMC_CH2_CPRDR
 ((
AT91_REG
 *) 0xFFFCC248)

2160 
	#AT91C_PWMC_CH2_CUPDR
 ((
AT91_REG
 *) 0xFFFCC250)

2161 
	#AT91C_PWMC_CH2_CDTYR
 ((
AT91_REG
 *) 0xFFFCC244)

2163 
	#AT91C_PWMC_CH1_Re£rved
 ((
AT91_REG
 *) 0xFFFCC234)

2164 
	#AT91C_PWMC_CH1_CUPDR
 ((
AT91_REG
 *) 0xFFFCC230)

2165 
	#AT91C_PWMC_CH1_CPRDR
 ((
AT91_REG
 *) 0xFFFCC228)

2166 
	#AT91C_PWMC_CH1_CCNTR
 ((
AT91_REG
 *) 0xFFFCC22C)

2167 
	#AT91C_PWMC_CH1_CDTYR
 ((
AT91_REG
 *) 0xFFFCC224)

2168 
	#AT91C_PWMC_CH1_CMR
 ((
AT91_REG
 *) 0xFFFCC220)

2170 
	#AT91C_PWMC_CH0_Re£rved
 ((
AT91_REG
 *) 0xFFFCC214)

2171 
	#AT91C_PWMC_CH0_CPRDR
 ((
AT91_REG
 *) 0xFFFCC208)

2172 
	#AT91C_PWMC_CH0_CDTYR
 ((
AT91_REG
 *) 0xFFFCC204)

2173 
	#AT91C_PWMC_CH0_CMR
 ((
AT91_REG
 *) 0xFFFCC200)

2174 
	#AT91C_PWMC_CH0_CUPDR
 ((
AT91_REG
 *) 0xFFFCC210)

2175 
	#AT91C_PWMC_CH0_CCNTR
 ((
AT91_REG
 *) 0xFFFCC20C)

2177 
	#AT91C_PWMC_IDR
 ((
AT91_REG
 *) 0xFFFCC014)

2178 
	#AT91C_PWMC_DIS
 ((
AT91_REG
 *) 0xFFFCC008)

2179 
	#AT91C_PWMC_IER
 ((
AT91_REG
 *) 0xFFFCC010)

2180 
	#AT91C_PWMC_VR
 ((
AT91_REG
 *) 0xFFFCC0FC)

2181 
	#AT91C_PWMC_ISR
 ((
AT91_REG
 *) 0xFFFCC01C)

2182 
	#AT91C_PWMC_SR
 ((
AT91_REG
 *) 0xFFFCC00C)

2183 
	#AT91C_PWMC_IMR
 ((
AT91_REG
 *) 0xFFFCC018)

2184 
	#AT91C_PWMC_MR
 ((
AT91_REG
 *) 0xFFFCC000)

2185 
	#AT91C_PWMC_ENA
 ((
AT91_REG
 *) 0xFFFCC004)

2187 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

2188 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

2189 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

2190 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

2191 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

2192 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

2193 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

2194 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

2195 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

2196 
	#AT91C_UDP_TXVC
 ((
AT91_REG
 *) 0xFFFB0074)

2197 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

2198 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

2200 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

2201 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

2202 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

2203 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

2204 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

2205 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

2206 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

2207 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

2208 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

2209 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

2211 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

2212 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

2213 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

2214 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

2215 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

2216 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

2217 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

2218 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

2219 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

2220 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

2222 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

2223 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

2224 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

2225 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

2226 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

2227 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

2228 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

2229 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

2230 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

2231 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

2233 
	#AT91C_TCB_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

2234 
	#AT91C_TCB_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

2236 
	#AT91C_CAN_MB0_MDL
 ((
AT91_REG
 *) 0xFFFD0214)

2237 
	#AT91C_CAN_MB0_MAM
 ((
AT91_REG
 *) 0xFFFD0204)

2238 
	#AT91C_CAN_MB0_MCR
 ((
AT91_REG
 *) 0xFFFD021C)

2239 
	#AT91C_CAN_MB0_MID
 ((
AT91_REG
 *) 0xFFFD0208)

2240 
	#AT91C_CAN_MB0_MSR
 ((
AT91_REG
 *) 0xFFFD0210)

2241 
	#AT91C_CAN_MB0_MFID
 ((
AT91_REG
 *) 0xFFFD020C)

2242 
	#AT91C_CAN_MB0_MDH
 ((
AT91_REG
 *) 0xFFFD0218)

2243 
	#AT91C_CAN_MB0_MMR
 ((
AT91_REG
 *) 0xFFFD0200)

2245 
	#AT91C_CAN_MB1_MDL
 ((
AT91_REG
 *) 0xFFFD0234)

2246 
	#AT91C_CAN_MB1_MID
 ((
AT91_REG
 *) 0xFFFD0228)

2247 
	#AT91C_CAN_MB1_MMR
 ((
AT91_REG
 *) 0xFFFD0220)

2248 
	#AT91C_CAN_MB1_MSR
 ((
AT91_REG
 *) 0xFFFD0230)

2249 
	#AT91C_CAN_MB1_MAM
 ((
AT91_REG
 *) 0xFFFD0224)

2250 
	#AT91C_CAN_MB1_MDH
 ((
AT91_REG
 *) 0xFFFD0238)

2251 
	#AT91C_CAN_MB1_MCR
 ((
AT91_REG
 *) 0xFFFD023C)

2252 
	#AT91C_CAN_MB1_MFID
 ((
AT91_REG
 *) 0xFFFD022C)

2254 
	#AT91C_CAN_MB2_MCR
 ((
AT91_REG
 *) 0xFFFD025C)

2255 
	#AT91C_CAN_MB2_MDH
 ((
AT91_REG
 *) 0xFFFD0258)

2256 
	#AT91C_CAN_MB2_MID
 ((
AT91_REG
 *) 0xFFFD0248)

2257 
	#AT91C_CAN_MB2_MDL
 ((
AT91_REG
 *) 0xFFFD0254)

2258 
	#AT91C_CAN_MB2_MMR
 ((
AT91_REG
 *) 0xFFFD0240)

2259 
	#AT91C_CAN_MB2_MAM
 ((
AT91_REG
 *) 0xFFFD0244)

2260 
	#AT91C_CAN_MB2_MFID
 ((
AT91_REG
 *) 0xFFFD024C)

2261 
	#AT91C_CAN_MB2_MSR
 ((
AT91_REG
 *) 0xFFFD0250)

2263 
	#AT91C_CAN_MB3_MFID
 ((
AT91_REG
 *) 0xFFFD026C)

2264 
	#AT91C_CAN_MB3_MAM
 ((
AT91_REG
 *) 0xFFFD0264)

2265 
	#AT91C_CAN_MB3_MID
 ((
AT91_REG
 *) 0xFFFD0268)

2266 
	#AT91C_CAN_MB3_MCR
 ((
AT91_REG
 *) 0xFFFD027C)

2267 
	#AT91C_CAN_MB3_MMR
 ((
AT91_REG
 *) 0xFFFD0260)

2268 
	#AT91C_CAN_MB3_MSR
 ((
AT91_REG
 *) 0xFFFD0270)

2269 
	#AT91C_CAN_MB3_MDL
 ((
AT91_REG
 *) 0xFFFD0274)

2270 
	#AT91C_CAN_MB3_MDH
 ((
AT91_REG
 *) 0xFFFD0278)

2272 
	#AT91C_CAN_MB4_MID
 ((
AT91_REG
 *) 0xFFFD0288)

2273 
	#AT91C_CAN_MB4_MMR
 ((
AT91_REG
 *) 0xFFFD0280)

2274 
	#AT91C_CAN_MB4_MDH
 ((
AT91_REG
 *) 0xFFFD0298)

2275 
	#AT91C_CAN_MB4_MFID
 ((
AT91_REG
 *) 0xFFFD028C)

2276 
	#AT91C_CAN_MB4_MSR
 ((
AT91_REG
 *) 0xFFFD0290)

2277 
	#AT91C_CAN_MB4_MCR
 ((
AT91_REG
 *) 0xFFFD029C)

2278 
	#AT91C_CAN_MB4_MDL
 ((
AT91_REG
 *) 0xFFFD0294)

2279 
	#AT91C_CAN_MB4_MAM
 ((
AT91_REG
 *) 0xFFFD0284)

2281 
	#AT91C_CAN_MB5_MSR
 ((
AT91_REG
 *) 0xFFFD02B0)

2282 
	#AT91C_CAN_MB5_MCR
 ((
AT91_REG
 *) 0xFFFD02BC)

2283 
	#AT91C_CAN_MB5_MFID
 ((
AT91_REG
 *) 0xFFFD02AC)

2284 
	#AT91C_CAN_MB5_MDH
 ((
AT91_REG
 *) 0xFFFD02B8)

2285 
	#AT91C_CAN_MB5_MID
 ((
AT91_REG
 *) 0xFFFD02A8)

2286 
	#AT91C_CAN_MB5_MMR
 ((
AT91_REG
 *) 0xFFFD02A0)

2287 
	#AT91C_CAN_MB5_MDL
 ((
AT91_REG
 *) 0xFFFD02B4)

2288 
	#AT91C_CAN_MB5_MAM
 ((
AT91_REG
 *) 0xFFFD02A4)

2290 
	#AT91C_CAN_MB6_MFID
 ((
AT91_REG
 *) 0xFFFD02CC)

2291 
	#AT91C_CAN_MB6_MID
 ((
AT91_REG
 *) 0xFFFD02C8)

2292 
	#AT91C_CAN_MB6_MAM
 ((
AT91_REG
 *) 0xFFFD02C4)

2293 
	#AT91C_CAN_MB6_MSR
 ((
AT91_REG
 *) 0xFFFD02D0)

2294 
	#AT91C_CAN_MB6_MDL
 ((
AT91_REG
 *) 0xFFFD02D4)

2295 
	#AT91C_CAN_MB6_MCR
 ((
AT91_REG
 *) 0xFFFD02DC)

2296 
	#AT91C_CAN_MB6_MDH
 ((
AT91_REG
 *) 0xFFFD02D8)

2297 
	#AT91C_CAN_MB6_MMR
 ((
AT91_REG
 *) 0xFFFD02C0)

2299 
	#AT91C_CAN_MB7_MCR
 ((
AT91_REG
 *) 0xFFFD02FC)

2300 
	#AT91C_CAN_MB7_MDH
 ((
AT91_REG
 *) 0xFFFD02F8)

2301 
	#AT91C_CAN_MB7_MFID
 ((
AT91_REG
 *) 0xFFFD02EC)

2302 
	#AT91C_CAN_MB7_MDL
 ((
AT91_REG
 *) 0xFFFD02F4)

2303 
	#AT91C_CAN_MB7_MID
 ((
AT91_REG
 *) 0xFFFD02E8)

2304 
	#AT91C_CAN_MB7_MMR
 ((
AT91_REG
 *) 0xFFFD02E0)

2305 
	#AT91C_CAN_MB7_MAM
 ((
AT91_REG
 *) 0xFFFD02E4)

2306 
	#AT91C_CAN_MB7_MSR
 ((
AT91_REG
 *) 0xFFFD02F0)

2308 
	#AT91C_CAN_TCR
 ((
AT91_REG
 *) 0xFFFD0024)

2309 
	#AT91C_CAN_IMR
 ((
AT91_REG
 *) 0xFFFD000C)

2310 
	#AT91C_CAN_IER
 ((
AT91_REG
 *) 0xFFFD0004)

2311 
	#AT91C_CAN_ECR
 ((
AT91_REG
 *) 0xFFFD0020)

2312 
	#AT91C_CAN_TIMESTP
 ((
AT91_REG
 *) 0xFFFD001C)

2313 
	#AT91C_CAN_MR
 ((
AT91_REG
 *) 0xFFFD0000)

2314 
	#AT91C_CAN_IDR
 ((
AT91_REG
 *) 0xFFFD0008)

2315 
	#AT91C_CAN_ACR
 ((
AT91_REG
 *) 0xFFFD0028)

2316 
	#AT91C_CAN_TIM
 ((
AT91_REG
 *) 0xFFFD0018)

2317 
	#AT91C_CAN_SR
 ((
AT91_REG
 *) 0xFFFD0010)

2318 
	#AT91C_CAN_BR
 ((
AT91_REG
 *) 0xFFFD0014)

2319 
	#AT91C_CAN_VR
 ((
AT91_REG
 *) 0xFFFD00FC)

2321 
	#AT91C_EMAC_ISR
 ((
AT91_REG
 *) 0xFFFDC024)

2322 
	#AT91C_EMAC_SA4H
 ((
AT91_REG
 *) 0xFFFDC0B4)

2323 
	#AT91C_EMAC_SA1L
 ((
AT91_REG
 *) 0xFFFDC098)

2324 
	#AT91C_EMAC_ELE
 ((
AT91_REG
 *) 0xFFFDC078)

2325 
	#AT91C_EMAC_LCOL
 ((
AT91_REG
 *) 0xFFFDC05C)

2326 
	#AT91C_EMAC_RLE
 ((
AT91_REG
 *) 0xFFFDC088)

2327 
	#AT91C_EMAC_WOL
 ((
AT91_REG
 *) 0xFFFDC0C4)

2328 
	#AT91C_EMAC_DTF
 ((
AT91_REG
 *) 0xFFFDC058)

2329 
	#AT91C_EMAC_TUND
 ((
AT91_REG
 *) 0xFFFDC064)

2330 
	#AT91C_EMAC_NCR
 ((
AT91_REG
 *) 0xFFFDC000)

2331 
	#AT91C_EMAC_SA4L
 ((
AT91_REG
 *) 0xFFFDC0B0)

2332 
	#AT91C_EMAC_RSR
 ((
AT91_REG
 *) 0xFFFDC020)

2333 
	#AT91C_EMAC_SA3L
 ((
AT91_REG
 *) 0xFFFDC0A8)

2334 
	#AT91C_EMAC_TSR
 ((
AT91_REG
 *) 0xFFFDC014)

2335 
	#AT91C_EMAC_IDR
 ((
AT91_REG
 *) 0xFFFDC02C)

2336 
	#AT91C_EMAC_RSE
 ((
AT91_REG
 *) 0xFFFDC074)

2337 
	#AT91C_EMAC_ECOL
 ((
AT91_REG
 *) 0xFFFDC060)

2338 
	#AT91C_EMAC_TID
 ((
AT91_REG
 *) 0xFFFDC0B8)

2339 
	#AT91C_EMAC_HRB
 ((
AT91_REG
 *) 0xFFFDC090)

2340 
	#AT91C_EMAC_TBQP
 ((
AT91_REG
 *) 0xFFFDC01C)

2341 
	#AT91C_EMAC_USRIO
 ((
AT91_REG
 *) 0xFFFDC0C0)

2342 
	#AT91C_EMAC_PTR
 ((
AT91_REG
 *) 0xFFFDC038)

2343 
	#AT91C_EMAC_SA2H
 ((
AT91_REG
 *) 0xFFFDC0A4)

2344 
	#AT91C_EMAC_ROV
 ((
AT91_REG
 *) 0xFFFDC070)

2345 
	#AT91C_EMAC_ALE
 ((
AT91_REG
 *) 0xFFFDC054)

2346 
	#AT91C_EMAC_RJA
 ((
AT91_REG
 *) 0xFFFDC07C)

2347 
	#AT91C_EMAC_RBQP
 ((
AT91_REG
 *) 0xFFFDC018)

2348 
	#AT91C_EMAC_TPF
 ((
AT91_REG
 *) 0xFFFDC08C)

2349 
	#AT91C_EMAC_NCFGR
 ((
AT91_REG
 *) 0xFFFDC004)

2350 
	#AT91C_EMAC_HRT
 ((
AT91_REG
 *) 0xFFFDC094)

2351 
	#AT91C_EMAC_USF
 ((
AT91_REG
 *) 0xFFFDC080)

2352 
	#AT91C_EMAC_FCSE
 ((
AT91_REG
 *) 0xFFFDC050)

2353 
	#AT91C_EMAC_TPQ
 ((
AT91_REG
 *) 0xFFFDC0BC)

2354 
	#AT91C_EMAC_MAN
 ((
AT91_REG
 *) 0xFFFDC034)

2355 
	#AT91C_EMAC_FTO
 ((
AT91_REG
 *) 0xFFFDC040)

2356 
	#AT91C_EMAC_REV
 ((
AT91_REG
 *) 0xFFFDC0FC)

2357 
	#AT91C_EMAC_IMR
 ((
AT91_REG
 *) 0xFFFDC030)

2358 
	#AT91C_EMAC_SCF
 ((
AT91_REG
 *) 0xFFFDC044)

2359 
	#AT91C_EMAC_PFR
 ((
AT91_REG
 *) 0xFFFDC03C)

2360 
	#AT91C_EMAC_MCF
 ((
AT91_REG
 *) 0xFFFDC048)

2361 
	#AT91C_EMAC_NSR
 ((
AT91_REG
 *) 0xFFFDC008)

2362 
	#AT91C_EMAC_SA2L
 ((
AT91_REG
 *) 0xFFFDC0A0)

2363 
	#AT91C_EMAC_FRO
 ((
AT91_REG
 *) 0xFFFDC04C)

2364 
	#AT91C_EMAC_IER
 ((
AT91_REG
 *) 0xFFFDC028)

2365 
	#AT91C_EMAC_SA1H
 ((
AT91_REG
 *) 0xFFFDC09C)

2366 
	#AT91C_EMAC_CSE
 ((
AT91_REG
 *) 0xFFFDC068)

2367 
	#AT91C_EMAC_SA3H
 ((
AT91_REG
 *) 0xFFFDC0AC)

2368 
	#AT91C_EMAC_RRE
 ((
AT91_REG
 *) 0xFFFDC06C)

2369 
	#AT91C_EMAC_STE
 ((
AT91_REG
 *) 0xFFFDC084)

2371 
	#AT91C_ADC_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

2372 
	#AT91C_ADC_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

2373 
	#AT91C_ADC_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

2374 
	#AT91C_ADC_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

2375 
	#AT91C_ADC_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

2376 
	#AT91C_ADC_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

2377 
	#AT91C_ADC_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

2378 
	#AT91C_ADC_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

2379 
	#AT91C_ADC_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

2380 
	#AT91C_ADC_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

2382 
	#AT91C_ADC_CDR2
 ((
AT91_REG
 *) 0xFFFD8038)

2383 
	#AT91C_ADC_CDR3
 ((
AT91_REG
 *) 0xFFFD803C)

2384 
	#AT91C_ADC_CDR0
 ((
AT91_REG
 *) 0xFFFD8030)

2385 
	#AT91C_ADC_CDR5
 ((
AT91_REG
 *) 0xFFFD8044)

2386 
	#AT91C_ADC_CHDR
 ((
AT91_REG
 *) 0xFFFD8014)

2387 
	#AT91C_ADC_SR
 ((
AT91_REG
 *) 0xFFFD801C)

2388 
	#AT91C_ADC_CDR4
 ((
AT91_REG
 *) 0xFFFD8040)

2389 
	#AT91C_ADC_CDR1
 ((
AT91_REG
 *) 0xFFFD8034)

2390 
	#AT91C_ADC_LCDR
 ((
AT91_REG
 *) 0xFFFD8020)

2391 
	#AT91C_ADC_IDR
 ((
AT91_REG
 *) 0xFFFD8028)

2392 
	#AT91C_ADC_CR
 ((
AT91_REG
 *) 0xFFFD8000)

2393 
	#AT91C_ADC_CDR7
 ((
AT91_REG
 *) 0xFFFD804C)

2394 
	#AT91C_ADC_CDR6
 ((
AT91_REG
 *) 0xFFFD8048)

2395 
	#AT91C_ADC_IER
 ((
AT91_REG
 *) 0xFFFD8024)

2396 
	#AT91C_ADC_CHER
 ((
AT91_REG
 *) 0xFFFD8010)

2397 
	#AT91C_ADC_CHSR
 ((
AT91_REG
 *) 0xFFFD8018)

2398 
	#AT91C_ADC_MR
 ((
AT91_REG
 *) 0xFFFD8004)

2399 
	#AT91C_ADC_IMR
 ((
AT91_REG
 *) 0xFFFD802C)

2401 
	#AT91C_AES_TPR
 ((
AT91_REG
 *) 0xFFFA4108)

2402 
	#AT91C_AES_PTCR
 ((
AT91_REG
 *) 0xFFFA4120)

2403 
	#AT91C_AES_RNPR
 ((
AT91_REG
 *) 0xFFFA4110)

2404 
	#AT91C_AES_TNCR
 ((
AT91_REG
 *) 0xFFFA411C)

2405 
	#AT91C_AES_TCR
 ((
AT91_REG
 *) 0xFFFA410C)

2406 
	#AT91C_AES_RCR
 ((
AT91_REG
 *) 0xFFFA4104)

2407 
	#AT91C_AES_RNCR
 ((
AT91_REG
 *) 0xFFFA4114)

2408 
	#AT91C_AES_TNPR
 ((
AT91_REG
 *) 0xFFFA4118)

2409 
	#AT91C_AES_RPR
 ((
AT91_REG
 *) 0xFFFA4100)

2410 
	#AT91C_AES_PTSR
 ((
AT91_REG
 *) 0xFFFA4124)

2412 
	#AT91C_AES_IVxR
 ((
AT91_REG
 *) 0xFFFA4060)

2413 
	#AT91C_AES_MR
 ((
AT91_REG
 *) 0xFFFA4004)

2414 
	#AT91C_AES_VR
 ((
AT91_REG
 *) 0xFFFA40FC)

2415 
	#AT91C_AES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA4050)

2416 
	#AT91C_AES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA4040)

2417 
	#AT91C_AES_CR
 ((
AT91_REG
 *) 0xFFFA4000)

2418 
	#AT91C_AES_IDR
 ((
AT91_REG
 *) 0xFFFA4014)

2419 
	#AT91C_AES_IMR
 ((
AT91_REG
 *) 0xFFFA4018)

2420 
	#AT91C_AES_IER
 ((
AT91_REG
 *) 0xFFFA4010)

2421 
	#AT91C_AES_KEYWxR
 ((
AT91_REG
 *) 0xFFFA4020)

2422 
	#AT91C_AES_ISR
 ((
AT91_REG
 *) 0xFFFA401C)

2424 
	#AT91C_TDES_RNCR
 ((
AT91_REG
 *) 0xFFFA8114)

2425 
	#AT91C_TDES_TCR
 ((
AT91_REG
 *) 0xFFFA810C)

2426 
	#AT91C_TDES_RCR
 ((
AT91_REG
 *) 0xFFFA8104)

2427 
	#AT91C_TDES_TNPR
 ((
AT91_REG
 *) 0xFFFA8118)

2428 
	#AT91C_TDES_RNPR
 ((
AT91_REG
 *) 0xFFFA8110)

2429 
	#AT91C_TDES_RPR
 ((
AT91_REG
 *) 0xFFFA8100)

2430 
	#AT91C_TDES_TNCR
 ((
AT91_REG
 *) 0xFFFA811C)

2431 
	#AT91C_TDES_TPR
 ((
AT91_REG
 *) 0xFFFA8108)

2432 
	#AT91C_TDES_PTSR
 ((
AT91_REG
 *) 0xFFFA8124)

2433 
	#AT91C_TDES_PTCR
 ((
AT91_REG
 *) 0xFFFA8120)

2435 
	#AT91C_TDES_KEY2WxR
 ((
AT91_REG
 *) 0xFFFA8028)

2436 
	#AT91C_TDES_KEY3WxR
 ((
AT91_REG
 *) 0xFFFA8030)

2437 
	#AT91C_TDES_IDR
 ((
AT91_REG
 *) 0xFFFA8014)

2438 
	#AT91C_TDES_VR
 ((
AT91_REG
 *) 0xFFFA80FC)

2439 
	#AT91C_TDES_IVxR
 ((
AT91_REG
 *) 0xFFFA8060)

2440 
	#AT91C_TDES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA8050)

2441 
	#AT91C_TDES_IMR
 ((
AT91_REG
 *) 0xFFFA8018)

2442 
	#AT91C_TDES_MR
 ((
AT91_REG
 *) 0xFFFA8004)

2443 
	#AT91C_TDES_CR
 ((
AT91_REG
 *) 0xFFFA8000)

2444 
	#AT91C_TDES_IER
 ((
AT91_REG
 *) 0xFFFA8010)

2445 
	#AT91C_TDES_ISR
 ((
AT91_REG
 *) 0xFFFA801C)

2446 
	#AT91C_TDES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA8040)

2447 
	#AT91C_TDES_KEY1WxR
 ((
AT91_REG
 *) 0xFFFA8020)

2448 

	)

2452 
	#AT91C_PIO_PA0
 (() 1 << 0)

2453 
	#AT91C_PA0_RXD0
 ((Ë
AT91C_PIO_PA0
)

2454 
	#AT91C_PIO_PA1
 (() 1 << 1)

2455 
	#AT91C_PA1_TXD0
 ((Ë
AT91C_PIO_PA1
)

2456 
	#AT91C_PIO_PA10
 (() 1 << 10)

2457 
	#AT91C_PA10_TWD
 ((Ë
AT91C_PIO_PA10
)

2458 
	#AT91C_PIO_PA11
 (() 1 << 11)

2459 
	#AT91C_PA11_TWCK
 ((Ë
AT91C_PIO_PA11
)

2460 
	#AT91C_PIO_PA12
 (() 1 << 12)

2461 
	#AT91C_PA12_NPCS00
 ((Ë
AT91C_PIO_PA12
)

2462 
	#AT91C_PIO_PA13
 (() 1 << 13)

2463 
	#AT91C_PA13_NPCS01
 ((Ë
AT91C_PIO_PA13
)

2464 
	#AT91C_PA13_PCK1
 ((Ë
AT91C_PIO_PA13
)

2465 
	#AT91C_PIO_PA14
 (() 1 << 14)

2466 
	#AT91C_PA14_NPCS02
 ((Ë
AT91C_PIO_PA14
)

2467 
	#AT91C_PA14_IRQ1
 ((Ë
AT91C_PIO_PA14
)

2468 
	#AT91C_PIO_PA15
 (() 1 << 15)

2469 
	#AT91C_PA15_NPCS03
 ((Ë
AT91C_PIO_PA15
)

2470 
	#AT91C_PA15_TCLK2
 ((Ë
AT91C_PIO_PA15
)

2471 
	#AT91C_PIO_PA16
 (() 1 << 16)

2472 
	#AT91C_PA16_MISO0
 ((Ë
AT91C_PIO_PA16
)

2473 
	#AT91C_PIO_PA17
 (() 1 << 17)

2474 
	#AT91C_PA17_MOSI0
 ((Ë
AT91C_PIO_PA17
)

2475 
	#AT91C_PIO_PA18
 (() 1 << 18)

2476 
	#AT91C_PA18_SPCK0
 ((Ë
AT91C_PIO_PA18
)

2477 
	#AT91C_PIO_PA19
 (() 1 << 19)

2478 
	#AT91C_PA19_CANRX
 ((Ë
AT91C_PIO_PA19
)

2479 
	#AT91C_PIO_PA2
 (() 1 << 2)

2480 
	#AT91C_PA2_SCK0
 ((Ë
AT91C_PIO_PA2
)

2481 
	#AT91C_PA2_NPCS11
 ((Ë
AT91C_PIO_PA2
)

2482 
	#AT91C_PIO_PA20
 (() 1 << 20)

2483 
	#AT91C_PA20_CANTX
 ((Ë
AT91C_PIO_PA20
)

2484 
	#AT91C_PIO_PA21
 (() 1 << 21)

2485 
	#AT91C_PA21_TF
 ((Ë
AT91C_PIO_PA21
)

2486 
	#AT91C_PA21_NPCS10
 ((Ë
AT91C_PIO_PA21
)

2487 
	#AT91C_PIO_PA22
 (() 1 << 22)

2488 
	#AT91C_PA22_TK
 ((Ë
AT91C_PIO_PA22
)

2489 
	#AT91C_PA22_SPCK1
 ((Ë
AT91C_PIO_PA22
)

2490 
	#AT91C_PIO_PA23
 (() 1 << 23)

2491 
	#AT91C_PA23_TD
 ((Ë
AT91C_PIO_PA23
)

2492 
	#AT91C_PA23_MOSI1
 ((Ë
AT91C_PIO_PA23
)

2493 
	#AT91C_PIO_PA24
 (() 1 << 24)

2494 
	#AT91C_PA24_RD
 ((Ë
AT91C_PIO_PA24
)

2495 
	#AT91C_PA24_MISO1
 ((Ë
AT91C_PIO_PA24
)

2496 
	#AT91C_PIO_PA25
 (() 1 << 25)

2497 
	#AT91C_PA25_RK
 ((Ë
AT91C_PIO_PA25
)

2498 
	#AT91C_PA25_NPCS11
 ((Ë
AT91C_PIO_PA25
)

2499 
	#AT91C_PIO_PA26
 (() 1 << 26)

2500 
	#AT91C_PA26_RF
 ((Ë
AT91C_PIO_PA26
)

2501 
	#AT91C_PA26_NPCS12
 ((Ë
AT91C_PIO_PA26
)

2502 
	#AT91C_PIO_PA27
 (() 1 << 27)

2503 
	#AT91C_PA27_DRXD
 ((Ë
AT91C_PIO_PA27
)

2504 
	#AT91C_PA27_PCK3
 ((Ë
AT91C_PIO_PA27
)

2505 
	#AT91C_PIO_PA28
 (() 1 << 28)

2506 
	#AT91C_PA28_DTXD
 ((Ë
AT91C_PIO_PA28
)

2507 
	#AT91C_PIO_PA29
 (() 1 << 29)

2508 
	#AT91C_PA29_FIQ
 ((Ë
AT91C_PIO_PA29
)

2509 
	#AT91C_PA29_NPCS13
 ((Ë
AT91C_PIO_PA29
)

2510 
	#AT91C_PIO_PA3
 (() 1 << 3)

2511 
	#AT91C_PA3_RTS0
 ((Ë
AT91C_PIO_PA3
)

2512 
	#AT91C_PA3_NPCS12
 ((Ë
AT91C_PIO_PA3
)

2513 
	#AT91C_PIO_PA30
 (() 1 << 30)

2514 
	#AT91C_PA30_IRQ0
 ((Ë
AT91C_PIO_PA30
)

2515 
	#AT91C_PA30_PCK2
 ((Ë
AT91C_PIO_PA30
)

2516 
	#AT91C_PIO_PA4
 (() 1 << 4)

2517 
	#AT91C_PA4_CTS0
 ((Ë
AT91C_PIO_PA4
)

2518 
	#AT91C_PA4_NPCS13
 ((Ë
AT91C_PIO_PA4
)

2519 
	#AT91C_PIO_PA5
 (() 1 << 5)

2520 
	#AT91C_PA5_RXD1
 ((Ë
AT91C_PIO_PA5
)

2521 
	#AT91C_PIO_PA6
 (() 1 << 6)

2522 
	#AT91C_PA6_TXD1
 ((Ë
AT91C_PIO_PA6
)

2523 
	#AT91C_PIO_PA7
 (() 1 << 7)

2524 
	#AT91C_PA7_SCK1
 ((Ë
AT91C_PIO_PA7
)

2525 
	#AT91C_PA7_NPCS01
 ((Ë
AT91C_PIO_PA7
)

2526 
	#AT91C_PIO_PA8
 (() 1 << 8)

2527 
	#AT91C_PA8_RTS1
 ((Ë
AT91C_PIO_PA8
)

2528 
	#AT91C_PA8_NPCS02
 ((Ë
AT91C_PIO_PA8
)

2529 
	#AT91C_PIO_PA9
 (() 1 << 9)

2530 
	#AT91C_PA9_CTS1
 ((Ë
AT91C_PIO_PA9
)

2531 
	#AT91C_PA9_NPCS03
 ((Ë
AT91C_PIO_PA9
)

2532 
	#AT91C_PIO_PB0
 (() 1 << 0)

2533 
	#AT91C_PB0_ETXCK_EREFCK
 ((Ë
AT91C_PIO_PB0
)

2534 
	#AT91C_PB0_PCK0
 ((Ë
AT91C_PIO_PB0
)

2535 
	#AT91C_PIO_PB1
 (() 1 << 1)

2536 
	#AT91C_PB1_ETXEN
 ((Ë
AT91C_PIO_PB1
)

2537 
	#AT91C_PIO_PB10
 (() 1 << 10)

2538 
	#AT91C_PB10_ETX2
 ((Ë
AT91C_PIO_PB10
)

2539 
	#AT91C_PB10_NPCS11
 ((Ë
AT91C_PIO_PB10
)

2540 
	#AT91C_PIO_PB11
 (() 1 << 11)

2541 
	#AT91C_PB11_ETX3
 ((Ë
AT91C_PIO_PB11
)

2542 
	#AT91C_PB11_NPCS12
 ((Ë
AT91C_PIO_PB11
)

2543 
	#AT91C_PIO_PB12
 (() 1 << 12)

2544 
	#AT91C_PB12_ETXER
 ((Ë
AT91C_PIO_PB12
)

2545 
	#AT91C_PB12_TCLK0
 ((Ë
AT91C_PIO_PB12
)

2546 
	#AT91C_PIO_PB13
 (() 1 << 13)

2547 
	#AT91C_PB13_ERX2
 ((Ë
AT91C_PIO_PB13
)

2548 
	#AT91C_PB13_NPCS01
 ((Ë
AT91C_PIO_PB13
)

2549 
	#AT91C_PIO_PB14
 (() 1 << 14)

2550 
	#AT91C_PB14_ERX3
 ((Ë
AT91C_PIO_PB14
)

2551 
	#AT91C_PB14_NPCS02
 ((Ë
AT91C_PIO_PB14
)

2552 
	#AT91C_PIO_PB15
 (() 1 << 15)

2553 
	#AT91C_PB15_ERXDV
 ((Ë
AT91C_PIO_PB15
)

2554 
	#AT91C_PIO_PB16
 (() 1 << 16)

2555 
	#AT91C_PB16_ECOL
 ((Ë
AT91C_PIO_PB16
)

2556 
	#AT91C_PB16_NPCS13
 ((Ë
AT91C_PIO_PB16
)

2557 
	#AT91C_PIO_PB17
 (() 1 << 17)

2558 
	#AT91C_PB17_ERXCK
 ((Ë
AT91C_PIO_PB17
)

2559 
	#AT91C_PB17_NPCS03
 ((Ë
AT91C_PIO_PB17
)

2560 
	#AT91C_PIO_PB18
 (() 1 << 18)

2561 
	#AT91C_PB18_EF100
 ((Ë
AT91C_PIO_PB18
)

2562 
	#AT91C_PB18_ADTRG
 ((Ë
AT91C_PIO_PB18
)

2563 
	#AT91C_PIO_PB19
 (() 1 << 19)

2564 
	#AT91C_PB19_PWM0
 ((Ë
AT91C_PIO_PB19
)

2565 
	#AT91C_PB19_TCLK1
 ((Ë
AT91C_PIO_PB19
)

2566 
	#AT91C_PIO_PB2
 (() 1 << 2)

2567 
	#AT91C_PB2_ETX0
 ((Ë
AT91C_PIO_PB2
)

2568 
	#AT91C_PIO_PB20
 (() 1 << 20)

2569 
	#AT91C_PB20_PWM1
 ((Ë
AT91C_PIO_PB20
)

2570 
	#AT91C_PB20_PCK0
 ((Ë
AT91C_PIO_PB20
)

2571 
	#AT91C_PIO_PB21
 (() 1 << 21)

2572 
	#AT91C_PB21_PWM2
 ((Ë
AT91C_PIO_PB21
)

2573 
	#AT91C_PB21_PCK1
 ((Ë
AT91C_PIO_PB21
)

2574 
	#AT91C_PIO_PB22
 (() 1 << 22)

2575 
	#AT91C_PB22_PWM3
 ((Ë
AT91C_PIO_PB22
)

2576 
	#AT91C_PB22_PCK2
 ((Ë
AT91C_PIO_PB22
)

2577 
	#AT91C_PIO_PB23
 (() 1 << 23)

2578 
	#AT91C_PB23_TIOA0
 ((Ë
AT91C_PIO_PB23
)

2579 
	#AT91C_PB23_DCD1
 ((Ë
AT91C_PIO_PB23
)

2580 
	#AT91C_PIO_PB24
 (() 1 << 24)

2581 
	#AT91C_PB24_TIOB0
 ((Ë
AT91C_PIO_PB24
)

2582 
	#AT91C_PB24_DSR1
 ((Ë
AT91C_PIO_PB24
)

2583 
	#AT91C_PIO_PB25
 (() 1 << 25)

2584 
	#AT91C_PB25_TIOA1
 ((Ë
AT91C_PIO_PB25
)

2585 
	#AT91C_PB25_DTR1
 ((Ë
AT91C_PIO_PB25
)

2586 
	#AT91C_PIO_PB26
 (() 1 << 26)

2587 
	#AT91C_PB26_TIOB1
 ((Ë
AT91C_PIO_PB26
)

2588 
	#AT91C_PB26_RI1
 ((Ë
AT91C_PIO_PB26
)

2589 
	#AT91C_PIO_PB27
 (() 1 << 27)

2590 
	#AT91C_PB27_TIOA2
 ((Ë
AT91C_PIO_PB27
)

2591 
	#AT91C_PB27_PWM0
 ((Ë
AT91C_PIO_PB27
)

2592 
	#AT91C_PIO_PB28
 (() 1 << 28)

2593 
	#AT91C_PB28_TIOB2
 ((Ë
AT91C_PIO_PB28
)

2594 
	#AT91C_PB28_PWM1
 ((Ë
AT91C_PIO_PB28
)

2595 
	#AT91C_PIO_PB29
 (() 1 << 29)

2596 
	#AT91C_PB29_PCK1
 ((Ë
AT91C_PIO_PB29
)

2597 
	#AT91C_PB29_PWM2
 ((Ë
AT91C_PIO_PB29
)

2598 
	#AT91C_PIO_PB3
 (() 1 << 3)

2599 
	#AT91C_PB3_ETX1
 ((Ë
AT91C_PIO_PB3
)

2600 
	#AT91C_PIO_PB30
 (() 1 << 30)

2601 
	#AT91C_PB30_PCK2
 ((Ë
AT91C_PIO_PB30
)

2602 
	#AT91C_PB30_PWM3
 ((Ë
AT91C_PIO_PB30
)

2603 
	#AT91C_PIO_PB4
 (() 1 << 4)

2604 
	#AT91C_PB4_ECRS_ECRSDV
 ((Ë
AT91C_PIO_PB4
)

2605 
	#AT91C_PIO_PB5
 (() 1 << 5)

2606 
	#AT91C_PB5_ERX0
 ((Ë
AT91C_PIO_PB5
)

2607 
	#AT91C_PIO_PB6
 (() 1 << 6)

2608 
	#AT91C_PB6_ERX1
 ((Ë
AT91C_PIO_PB6
)

2609 
	#AT91C_PIO_PB7
 (() 1 << 7)

2610 
	#AT91C_PB7_ERXER
 ((Ë
AT91C_PIO_PB7
)

2611 
	#AT91C_PIO_PB8
 (() 1 << 8)

2612 
	#AT91C_PB8_EMDC
 ((Ë
AT91C_PIO_PB8
)

2613 
	#AT91C_PIO_PB9
 (() 1 << 9)

2614 
	#AT91C_PB9_EMDIO
 ((Ë
AT91C_PIO_PB9
)

2615 

	)

2619 
	#AT91C_ID_FIQ
 (() 0)

2620 
	#AT91C_ID_SYS
 (() 1)

2621 
	#AT91C_ID_PIOA
 (() 2)

2622 
	#AT91C_ID_PIOB
 (() 3)

2623 
	#AT91C_ID_SPI0
 (() 4)

2624 
	#AT91C_ID_SPI1
 (() 5)

2625 
	#AT91C_ID_US0
 (() 6)

2626 
	#AT91C_ID_US1
 (() 7)

2627 
	#AT91C_ID_SSC
 (() 8)

2628 
	#AT91C_ID_TWI
 (() 9)

2629 
	#AT91C_ID_PWMC
 (() 10)

2630 
	#AT91C_ID_UDP
 (() 11)

2631 
	#AT91C_ID_TC0
 (() 12)

2632 
	#AT91C_ID_TC1
 (() 13)

2633 
	#AT91C_ID_TC2
 (() 14)

2634 
	#AT91C_ID_CAN
 (() 15)

2635 
	#AT91C_ID_EMAC
 (() 16)

2636 
	#AT91C_ID_ADC
 (() 17)

2637 
	#AT91C_ID_AES
 (() 18)

2638 
	#AT91C_ID_TDES
 (() 19)

2639 
	#AT91C_ID_20_Re£rved
 (() 20)

2640 
	#AT91C_ID_21_Re£rved
 (() 21)

2641 
	#AT91C_ID_22_Re£rved
 (() 22)

2642 
	#AT91C_ID_23_Re£rved
 (() 23)

2643 
	#AT91C_ID_24_Re£rved
 (() 24)

2644 
	#AT91C_ID_25_Re£rved
 (() 25)

2645 
	#AT91C_ID_26_Re£rved
 (() 26)

2646 
	#AT91C_ID_27_Re£rved
 (() 27)

2647 
	#AT91C_ID_28_Re£rved
 (() 28)

2648 
	#AT91C_ID_29_Re£rved
 (() 29)

2649 
	#AT91C_ID_IRQ0
 (() 30)

2650 
	#AT91C_ID_IRQ1
 (() 31)

2651 

	)

2655 
	#AT91C_BASE_SYS
 ((
AT91PS_SYS
) 0xFFFFF000)

2656 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

2657 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

2658 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

2659 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

2660 
	#AT91C_BASE_PIOB
 ((
AT91PS_PIO
) 0xFFFFF600)

2661 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

2662 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

2663 
	#AT91C_BASE_RSTC
 ((
AT91PS_RSTC
) 0xFFFFFD00)

2664 
	#AT91C_BASE_RTTC
 ((
AT91PS_RTTC
) 0xFFFFFD20)

2665 
	#AT91C_BASE_PITC
 ((
AT91PS_PITC
) 0xFFFFFD30)

2666 
	#AT91C_BASE_WDTC
 ((
AT91PS_WDTC
) 0xFFFFFD40)

2667 
	#AT91C_BASE_VREG
 ((
AT91PS_VREG
) 0xFFFFFD60)

2668 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

2669 
	#AT91C_BASE_PDC_SPI1
 ((
AT91PS_PDC
) 0xFFFE4100)

2670 
	#AT91C_BASE_SPI1
 ((
AT91PS_SPI
) 0xFFFE4000)

2671 
	#AT91C_BASE_PDC_SPI0
 ((
AT91PS_PDC
) 0xFFFE0100)

2672 
	#AT91C_BASE_SPI0
 ((
AT91PS_SPI
) 0xFFFE0000)

2673 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

2674 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

2675 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

2676 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

2677 
	#AT91C_BASE_PDC_SSC
 ((
AT91PS_PDC
) 0xFFFD4100)

2678 
	#AT91C_BASE_SSC
 ((
AT91PS_SSC
) 0xFFFD4000)

2679 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

2680 
	#AT91C_BASE_PWMC_CH3
 ((
AT91PS_PWMC_CH
) 0xFFFCC260)

2681 
	#AT91C_BASE_PWMC_CH2
 ((
AT91PS_PWMC_CH
) 0xFFFCC240)

2682 
	#AT91C_BASE_PWMC_CH1
 ((
AT91PS_PWMC_CH
) 0xFFFCC220)

2683 
	#AT91C_BASE_PWMC_CH0
 ((
AT91PS_PWMC_CH
) 0xFFFCC200)

2684 
	#AT91C_BASE_PWMC
 ((
AT91PS_PWMC
) 0xFFFCC000)

2685 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

2686 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

2687 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

2688 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

2689 
	#AT91C_BASE_TCB
 ((
AT91PS_TCB
) 0xFFFA0000)

2690 
	#AT91C_BASE_CAN_MB0
 ((
AT91PS_CAN_MB
) 0xFFFD0200)

2691 
	#AT91C_BASE_CAN_MB1
 ((
AT91PS_CAN_MB
) 0xFFFD0220)

2692 
	#AT91C_BASE_CAN_MB2
 ((
AT91PS_CAN_MB
) 0xFFFD0240)

2693 
	#AT91C_BASE_CAN_MB3
 ((
AT91PS_CAN_MB
) 0xFFFD0260)

2694 
	#AT91C_BASE_CAN_MB4
 ((
AT91PS_CAN_MB
) 0xFFFD0280)

2695 
	#AT91C_BASE_CAN_MB5
 ((
AT91PS_CAN_MB
) 0xFFFD02A0)

2696 
	#AT91C_BASE_CAN_MB6
 ((
AT91PS_CAN_MB
) 0xFFFD02C0)

2697 
	#AT91C_BASE_CAN_MB7
 ((
AT91PS_CAN_MB
) 0xFFFD02E0)

2698 
	#AT91C_BASE_CAN
 ((
AT91PS_CAN
) 0xFFFD0000)

2699 
	#AT91C_BASE_EMAC
 ((
AT91PS_EMAC
) 0xFFFDC000)

2700 
	#AT91C_BASE_PDC_ADC
 ((
AT91PS_PDC
) 0xFFFD8100)

2701 
	#AT91C_BASE_ADC
 ((
AT91PS_ADC
) 0xFFFD8000)

2702 
	#AT91C_BASE_PDC_AES
 ((
AT91PS_PDC
) 0xFFFA4100)

2703 
	#AT91C_BASE_AES
 ((
AT91PS_AES
) 0xFFFA4000)

2704 
	#AT91C_BASE_PDC_TDES
 ((
AT91PS_PDC
) 0xFFFA8100)

2705 
	#AT91C_BASE_TDES
 ((
AT91PS_TDES
) 0xFFFA8000)

2706 

	)

2710 
	#AT91C_ISRAM
 ((*) 0x00200000)

2711 
	#AT91C_ISRAM_SIZE
 (() 0x00008000)

2712 
	#AT91C_IFLASH
 ((*) 0x00100000)

2713 
	#AT91C_IFLASH_SIZE
 (() 0x00020000)

2714 

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7X128_inc.h

56 
	#AIC_SMR
 ( 0)

57 
	#AIC_SVR
 (128)

58 
	#AIC_IVR
 (256)

59 
	#AIC_FVR
 (260)

60 
	#AIC_ISR
 (264)

61 
	#AIC_IPR
 (268)

62 
	#AIC_IMR
 (272)

63 
	#AIC_CISR
 (276)

64 
	#AIC_IECR
 (288)

65 
	#AIC_IDCR
 (292)

66 
	#AIC_ICCR
 (296)

67 
	#AIC_ISCR
 (300)

68 
	#AIC_EOICR
 (304)

69 
	#AIC_SPU
 (308)

70 
	#AIC_DCR
 (312)

71 
	#AIC_FFER
 (320)

72 
	#AIC_FFDR
 (324)

73 
	#AIC_FFSR
 (328)

75 
	#AT91C_AIC_PRIOR
 (0x7 << 0)

76 
	#AT91C_AIC_PRIOR_LOWEST
 (0x0)

77 
	#AT91C_AIC_PRIOR_HIGHEST
 (0x7)

78 
	#AT91C_AIC_SRCTYPE
 (0x3 << 5)

79 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (0x0 << 5)

80 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (0x0 << 5)

81 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (0x1 << 5)

82 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (0x1 << 5)

83 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (0x2 << 5)

84 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (0x3 << 5)

86 
	#AT91C_AIC_NFIQ
 (0x1 << 0)

87 
	#AT91C_AIC_NIRQ
 (0x1 << 1)

89 
	#AT91C_AIC_DCR_PROT
 (0x1 << 0)

90 
	#AT91C_AIC_DCR_GMSK
 (0x1 << 1)

91 

	)

96 
	#PDC_RPR
 ( 0)

97 
	#PDC_RCR
 ( 4)

98 
	#PDC_TPR
 ( 8)

99 
	#PDC_TCR
 (12)

100 
	#PDC_RNPR
 (16)

101 
	#PDC_RNCR
 (20)

102 
	#PDC_TNPR
 (24)

103 
	#PDC_TNCR
 (28)

104 
	#PDC_PTCR
 (32)

105 
	#PDC_PTSR
 (36)

107 
	#AT91C_PDC_RXTEN
 (0x1 << 0)

108 
	#AT91C_PDC_RXTDIS
 (0x1 << 1)

109 
	#AT91C_PDC_TXTEN
 (0x1 << 8)

110 
	#AT91C_PDC_TXTDIS
 (0x1 << 9)

112 

	)

117 
	#DBGU_CR
 ( 0)

118 
	#DBGU_MR
 ( 4)

119 
	#DBGU_IER
 ( 8)

120 
	#DBGU_IDR
 (12)

121 
	#DBGU_IMR
 (16)

122 
	#DBGU_CSR
 (20)

123 
	#DBGU_RHR
 (24)

124 
	#DBGU_THR
 (28)

125 
	#DBGU_BRGR
 (32)

126 
	#DBGU_CIDR
 (64)

127 
	#DBGU_EXID
 (68)

128 
	#DBGU_FNTR
 (72)

129 
	#DBGU_RPR
 (256)

130 
	#DBGU_RCR
 (260)

131 
	#DBGU_TPR
 (264)

132 
	#DBGU_TCR
 (268)

133 
	#DBGU_RNPR
 (272)

134 
	#DBGU_RNCR
 (276)

135 
	#DBGU_TNPR
 (280)

136 
	#DBGU_TNCR
 (284)

137 
	#DBGU_PTCR
 (288)

138 
	#DBGU_PTSR
 (292)

140 
	#AT91C_US_RSTRX
 (0x1 << 2)

141 
	#AT91C_US_RSTTX
 (0x1 << 3)

142 
	#AT91C_US_RXEN
 (0x1 << 4)

143 
	#AT91C_US_RXDIS
 (0x1 << 5)

144 
	#AT91C_US_TXEN
 (0x1 << 6)

145 
	#AT91C_US_TXDIS
 (0x1 << 7)

146 
	#AT91C_US_RSTSTA
 (0x1 << 8)

148 
	#AT91C_US_PAR
 (0x7 << 9)

149 
	#AT91C_US_PAR_EVEN
 (0x0 << 9)

150 
	#AT91C_US_PAR_ODD
 (0x1 << 9)

151 
	#AT91C_US_PAR_SPACE
 (0x2 << 9)

152 
	#AT91C_US_PAR_MARK
 (0x3 << 9)

153 
	#AT91C_US_PAR_NONE
 (0x4 << 9)

154 
	#AT91C_US_PAR_MULTI_DROP
 (0x6 << 9)

155 
	#AT91C_US_CHMODE
 (0x3 << 14)

156 
	#AT91C_US_CHMODE_NORMAL
 (0x0 << 14)

157 
	#AT91C_US_CHMODE_AUTO
 (0x1 << 14)

158 
	#AT91C_US_CHMODE_LOCAL
 (0x2 << 14)

159 
	#AT91C_US_CHMODE_REMOTE
 (0x3 << 14)

161 
	#AT91C_US_RXRDY
 (0x1 << 0)

162 
	#AT91C_US_TXRDY
 (0x1 << 1)

163 
	#AT91C_US_ENDRX
 (0x1 << 3)

164 
	#AT91C_US_ENDTX
 (0x1 << 4)

165 
	#AT91C_US_OVRE
 (0x1 << 5)

166 
	#AT91C_US_FRAME
 (0x1 << 6)

167 
	#AT91C_US_PARE
 (0x1 << 7)

168 
	#AT91C_US_TXEMPTY
 (0x1 << 9)

169 
	#AT91C_US_TXBUFE
 (0x1 << 11)

170 
	#AT91C_US_RXBUFF
 (0x1 << 12)

171 
	#AT91C_US_COMM_TX
 (0x1 << 30)

172 
	#AT91C_US_COMM_RX
 (0x1 << 31)

177 
	#AT91C_US_FORCE_NTRST
 (0x1 << 0)

178 

	)

183 
	#PIO_PER
 ( 0)

184 
	#PIO_PDR
 ( 4)

185 
	#PIO_PSR
 ( 8)

186 
	#PIO_OER
 (16)

187 
	#PIO_ODR
 (20)

188 
	#PIO_OSR
 (24)

189 
	#PIO_IFER
 (32)

190 
	#PIO_IFDR
 (36)

191 
	#PIO_IFSR
 (40)

192 
	#PIO_SODR
 (48)

193 
	#PIO_CODR
 (52)

194 
	#PIO_ODSR
 (56)

195 
	#PIO_PDSR
 (60)

196 
	#PIO_IER
 (64)

197 
	#PIO_IDR
 (68)

198 
	#PIO_IMR
 (72)

199 
	#PIO_ISR
 (76)

200 
	#PIO_MDER
 (80)

201 
	#PIO_MDDR
 (84)

202 
	#PIO_MDSR
 (88)

203 
	#PIO_PPUDR
 (96)

204 
	#PIO_PPUER
 (100)

205 
	#PIO_PPUSR
 (104)

206 
	#PIO_ASR
 (112)

207 
	#PIO_BSR
 (116)

208 
	#PIO_ABSR
 (120)

209 
	#PIO_OWER
 (160)

210 
	#PIO_OWDR
 (164)

211 
	#PIO_OWSR
 (168)

212 

	)

217 
	#CKGR_MOR
 ( 0)

218 
	#CKGR_MCFR
 ( 4)

219 
	#CKGR_PLLR
 (12)

221 
	#AT91C_CKGR_MOSCEN
 (0x1 << 0)

222 
	#AT91C_CKGR_OSCBYPASS
 (0x1 << 1)

223 
	#AT91C_CKGR_OSCOUNT
 (0xFF << 8)

225 
	#AT91C_CKGR_MAINF
 (0xFFFF << 0)

226 
	#AT91C_CKGR_MAINRDY
 (0x1 << 16)

228 
	#AT91C_CKGR_DIV
 (0xFF << 0)

229 
	#AT91C_CKGR_DIV_0
 (0x0)

230 
	#AT91C_CKGR_DIV_BYPASS
 (0x1)

231 
	#AT91C_CKGR_PLLCOUNT
 (0x3F << 8)

232 
	#AT91C_CKGR_OUT
 (0x3 << 14)

233 
	#AT91C_CKGR_OUT_0
 (0x0 << 14)

234 
	#AT91C_CKGR_OUT_1
 (0x1 << 14)

235 
	#AT91C_CKGR_OUT_2
 (0x2 << 14)

236 
	#AT91C_CKGR_OUT_3
 (0x3 << 14)

237 
	#AT91C_CKGR_MUL
 (0x7FF << 16)

238 
	#AT91C_CKGR_USBDIV
 (0x3 << 28)

239 
	#AT91C_CKGR_USBDIV_0
 (0x0 << 28)

240 
	#AT91C_CKGR_USBDIV_1
 (0x1 << 28)

241 
	#AT91C_CKGR_USBDIV_2
 (0x2 << 28)

242 

	)

247 
	#PMC_SCER
 ( 0)

248 
	#PMC_SCDR
 ( 4)

249 
	#PMC_SCSR
 ( 8)

250 
	#PMC_PCER
 (16)

251 
	#PMC_PCDR
 (20)

252 
	#PMC_PCSR
 (24)

253 
	#PMC_MOR
 (32)

254 
	#PMC_MCFR
 (36)

255 
	#PMC_PLLR
 (44)

256 
	#PMC_MCKR
 (48)

257 
	#PMC_PCKR
 (64)

258 
	#PMC_IER
 (96)

259 
	#PMC_IDR
 (100)

260 
	#PMC_SR
 (104)

261 
	#PMC_IMR
 (108)

263 
	#AT91C_PMC_PCK
 (0x1 << 0)

264 
	#AT91C_PMC_UDP
 (0x1 << 7)

265 
	#AT91C_PMC_PCK0
 (0x1 << 8)

266 
	#AT91C_PMC_PCK1
 (0x1 << 9)

267 
	#AT91C_PMC_PCK2
 (0x1 << 10)

268 
	#AT91C_PMC_PCK3
 (0x1 << 11)

275 
	#AT91C_PMC_CSS
 (0x3 << 0)

276 
	#AT91C_PMC_CSS_SLOW_CLK
 (0x0)

277 
	#AT91C_PMC_CSS_MAIN_CLK
 (0x1)

278 
	#AT91C_PMC_CSS_PLL_CLK
 (0x3)

279 
	#AT91C_PMC_PRES
 (0x7 << 2)

280 
	#AT91C_PMC_PRES_CLK
 (0x0 << 2)

281 
	#AT91C_PMC_PRES_CLK_2
 (0x1 << 2)

282 
	#AT91C_PMC_PRES_CLK_4
 (0x2 << 2)

283 
	#AT91C_PMC_PRES_CLK_8
 (0x3 << 2)

284 
	#AT91C_PMC_PRES_CLK_16
 (0x4 << 2)

285 
	#AT91C_PMC_PRES_CLK_32
 (0x5 << 2)

286 
	#AT91C_PMC_PRES_CLK_64
 (0x6 << 2)

289 
	#AT91C_PMC_MOSCS
 (0x1 << 0)

290 
	#AT91C_PMC_LOCK
 (0x1 << 2)

291 
	#AT91C_PMC_MCKRDY
 (0x1 << 3)

292 
	#AT91C_PMC_PCK0RDY
 (0x1 << 8)

293 
	#AT91C_PMC_PCK1RDY
 (0x1 << 9)

294 
	#AT91C_PMC_PCK2RDY
 (0x1 << 10)

295 
	#AT91C_PMC_PCK3RDY
 (0x1 << 11)

299 

	)

304 
	#RSTC_RCR
 ( 0)

305 
	#RSTC_RSR
 ( 4)

306 
	#RSTC_RMR
 ( 8)

308 
	#AT91C_RSTC_PROCRST
 (0x1 << 0)

309 
	#AT91C_RSTC_PERRST
 (0x1 << 2)

310 
	#AT91C_RSTC_EXTRST
 (0x1 << 3)

311 
	#AT91C_RSTC_KEY
 (0xFF << 24)

313 
	#AT91C_RSTC_URSTS
 (0x1 << 0)

314 
	#AT91C_RSTC_BODSTS
 (0x1 << 1)

315 
	#AT91C_RSTC_RSTTYP
 (0x7 << 8)

316 
	#AT91C_RSTC_RSTTYP_POWERUP
 (0x0 << 8)

317 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (0x1 << 8)

318 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (0x2 << 8)

319 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (0x3 << 8)

320 
	#AT91C_RSTC_RSTTYP_USER
 (0x4 << 8)

321 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (0x5 << 8)

322 
	#AT91C_RSTC_NRSTL
 (0x1 << 16)

323 
	#AT91C_RSTC_SRCMP
 (0x1 << 17)

325 
	#AT91C_RSTC_URSTEN
 (0x1 << 0)

326 
	#AT91C_RSTC_URSTIEN
 (0x1 << 4)

327 
	#AT91C_RSTC_ERSTL
 (0xF << 8)

328 
	#AT91C_RSTC_BODIEN
 (0x1 << 16)

329 

	)

334 
	#RTTC_RTMR
 ( 0)

335 
	#RTTC_RTAR
 ( 4)

336 
	#RTTC_RTVR
 ( 8)

337 
	#RTTC_RTSR
 (12)

339 
	#AT91C_RTTC_RTPRES
 (0xFFFF << 0)

340 
	#AT91C_RTTC_ALMIEN
 (0x1 << 16)

341 
	#AT91C_RTTC_RTTINCIEN
 (0x1 << 17)

342 
	#AT91C_RTTC_RTTRST
 (0x1 << 18)

344 
	#AT91C_RTTC_ALMV
 (0x0 << 0)

346 
	#AT91C_RTTC_CRTV
 (0x0 << 0)

348 
	#AT91C_RTTC_ALMS
 (0x1 << 0)

349 
	#AT91C_RTTC_RTTINC
 (0x1 << 1)

350 

	)

355 
	#PITC_PIMR
 ( 0)

356 
	#PITC_PISR
 ( 4)

357 
	#PITC_PIVR
 ( 8)

358 
	#PITC_PIIR
 (12)

360 
	#AT91C_PITC_PIV
 (0xFFFFF << 0)

361 
	#AT91C_PITC_PITEN
 (0x1 << 24)

362 
	#AT91C_PITC_PITIEN
 (0x1 << 25)

364 
	#AT91C_PITC_PITS
 (0x1 << 0)

366 
	#AT91C_PITC_CPIV
 (0xFFFFF << 0)

367 
	#AT91C_PITC_PICNT
 (0xFFF << 20)

369 

	)

374 
	#WDTC_WDCR
 ( 0)

375 
	#WDTC_WDMR
 ( 4)

376 
	#WDTC_WDSR
 ( 8)

378 
	#AT91C_WDTC_WDRSTT
 (0x1 << 0)

379 
	#AT91C_WDTC_KEY
 (0xFF << 24)

381 
	#AT91C_WDTC_WDV
 (0xFFF << 0)

382 
	#AT91C_WDTC_WDFIEN
 (0x1 << 12)

383 
	#AT91C_WDTC_WDRSTEN
 (0x1 << 13)

384 
	#AT91C_WDTC_WDRPROC
 (0x1 << 14)

385 
	#AT91C_WDTC_WDDIS
 (0x1 << 15)

386 
	#AT91C_WDTC_WDD
 (0xFFF << 16)

387 
	#AT91C_WDTC_WDDBGHLT
 (0x1 << 28)

388 
	#AT91C_WDTC_WDIDLEHLT
 (0x1 << 29)

390 
	#AT91C_WDTC_WDUNF
 (0x1 << 0)

391 
	#AT91C_WDTC_WDERR
 (0x1 << 1)

392 

	)

397 
	#VREG_MR
 ( 0)

399 
	#AT91C_VREG_PSTDBY
 (0x1 << 0)

400 

	)

405 
	#MC_RCR
 ( 0)

406 
	#MC_ASR
 ( 4)

407 
	#MC_AASR
 ( 8)

408 
	#MC_FMR
 (96)

409 
	#MC_FCR
 (100)

410 
	#MC_FSR
 (104)

412 
	#AT91C_MC_RCB
 (0x1 << 0)

414 
	#AT91C_MC_UNDADD
 (0x1 << 0)

415 
	#AT91C_MC_MISADD
 (0x1 << 1)

416 
	#AT91C_MC_ABTSZ
 (0x3 << 8)

417 
	#AT91C_MC_ABTSZ_BYTE
 (0x0 << 8)

418 
	#AT91C_MC_ABTSZ_HWORD
 (0x1 << 8)

419 
	#AT91C_MC_ABTSZ_WORD
 (0x2 << 8)

420 
	#AT91C_MC_ABTTYP
 (0x3 << 10)

421 
	#AT91C_MC_ABTTYP_DATAR
 (0x0 << 10)

422 
	#AT91C_MC_ABTTYP_DATAW
 (0x1 << 10)

423 
	#AT91C_MC_ABTTYP_FETCH
 (0x2 << 10)

424 
	#AT91C_MC_MST0
 (0x1 << 16)

425 
	#AT91C_MC_MST1
 (0x1 << 17)

426 
	#AT91C_MC_SVMST0
 (0x1 << 24)

427 
	#AT91C_MC_SVMST1
 (0x1 << 25)

429 
	#AT91C_MC_FRDY
 (0x1 << 0)

430 
	#AT91C_MC_LOCKE
 (0x1 << 2)

431 
	#AT91C_MC_PROGE
 (0x1 << 3)

432 
	#AT91C_MC_NEBP
 (0x1 << 7)

433 
	#AT91C_MC_FWS
 (0x3 << 8)

434 
	#AT91C_MC_FWS_0FWS
 (0x0 << 8)

435 
	#AT91C_MC_FWS_1FWS
 (0x1 << 8)

436 
	#AT91C_MC_FWS_2FWS
 (0x2 << 8)

437 
	#AT91C_MC_FWS_3FWS
 (0x3 << 8)

438 
	#AT91C_MC_FMCN
 (0xFF << 16)

440 
	#AT91C_MC_FCMD
 (0xF << 0)

441 
	#AT91C_MC_FCMD_START_PROG
 (0x1)

442 
	#AT91C_MC_FCMD_LOCK
 (0x2)

443 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (0x3)

444 
	#AT91C_MC_FCMD_UNLOCK
 (0x4)

445 
	#AT91C_MC_FCMD_ERASE_ALL
 (0x8)

446 
	#AT91C_MC_FCMD_SET_GP_NVM
 (0xB)

447 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (0xD)

448 
	#AT91C_MC_FCMD_SET_SECURITY
 (0xF)

449 
	#AT91C_MC_PAGEN
 (0x3FF << 8)

450 
	#AT91C_MC_KEY
 (0xFF << 24)

452 
	#AT91C_MC_SECURITY
 (0x1 << 4)

453 
	#AT91C_MC_GPNVM0
 (0x1 << 8)

454 
	#AT91C_MC_GPNVM1
 (0x1 << 9)

455 
	#AT91C_MC_GPNVM2
 (0x1 << 10)

456 
	#AT91C_MC_GPNVM3
 (0x1 << 11)

457 
	#AT91C_MC_GPNVM4
 (0x1 << 12)

458 
	#AT91C_MC_GPNVM5
 (0x1 << 13)

459 
	#AT91C_MC_GPNVM6
 (0x1 << 14)

460 
	#AT91C_MC_GPNVM7
 (0x1 << 15)

461 
	#AT91C_MC_LOCKS0
 (0x1 << 16)

462 
	#AT91C_MC_LOCKS1
 (0x1 << 17)

463 
	#AT91C_MC_LOCKS2
 (0x1 << 18)

464 
	#AT91C_MC_LOCKS3
 (0x1 << 19)

465 
	#AT91C_MC_LOCKS4
 (0x1 << 20)

466 
	#AT91C_MC_LOCKS5
 (0x1 << 21)

467 
	#AT91C_MC_LOCKS6
 (0x1 << 22)

468 
	#AT91C_MC_LOCKS7
 (0x1 << 23)

469 
	#AT91C_MC_LOCKS8
 (0x1 << 24)

470 
	#AT91C_MC_LOCKS9
 (0x1 << 25)

471 
	#AT91C_MC_LOCKS10
 (0x1 << 26)

472 
	#AT91C_MC_LOCKS11
 (0x1 << 27)

473 
	#AT91C_MC_LOCKS12
 (0x1 << 28)

474 
	#AT91C_MC_LOCKS13
 (0x1 << 29)

475 
	#AT91C_MC_LOCKS14
 (0x1 << 30)

476 
	#AT91C_MC_LOCKS15
 (0x1 << 31)

477 

	)

482 
	#SPI_CR
 ( 0)

483 
	#SPI_MR
 ( 4)

484 
	#SPI_RDR
 ( 8)

485 
	#SPI_TDR
 (12)

486 
	#SPI_SR
 (16)

487 
	#SPI_IER
 (20)

488 
	#SPI_IDR
 (24)

489 
	#SPI_IMR
 (28)

490 
	#SPI_CSR
 (48)

491 
	#SPI_RPR
 (256)

492 
	#SPI_RCR
 (260)

493 
	#SPI_TPR
 (264)

494 
	#SPI_TCR
 (268)

495 
	#SPI_RNPR
 (272)

496 
	#SPI_RNCR
 (276)

497 
	#SPI_TNPR
 (280)

498 
	#SPI_TNCR
 (284)

499 
	#SPI_PTCR
 (288)

500 
	#SPI_PTSR
 (292)

502 
	#AT91C_SPI_SPIEN
 (0x1 << 0)

503 
	#AT91C_SPI_SPIDIS
 (0x1 << 1)

504 
	#AT91C_SPI_SWRST
 (0x1 << 7)

505 
	#AT91C_SPI_LASTXFER
 (0x1 << 24)

507 
	#AT91C_SPI_MSTR
 (0x1 << 0)

508 
	#AT91C_SPI_PS
 (0x1 << 1)

509 
	#AT91C_SPI_PS_FIXED
 (0x0 << 1)

510 
	#AT91C_SPI_PS_VARIABLE
 (0x1 << 1)

511 
	#AT91C_SPI_PCSDEC
 (0x1 << 2)

512 
	#AT91C_SPI_FDIV
 (0x1 << 3)

513 
	#AT91C_SPI_MODFDIS
 (0x1 << 4)

514 
	#AT91C_SPI_LLB
 (0x1 << 7)

515 
	#AT91C_SPI_PCS
 (0xF << 16)

516 
	#AT91C_SPI_DLYBCS
 (0xFF << 24)

518 
	#AT91C_SPI_RD
 (0xFFFF << 0)

519 
	#AT91C_SPI_RPCS
 (0xF << 16)

521 
	#AT91C_SPI_TD
 (0xFFFF << 0)

522 
	#AT91C_SPI_TPCS
 (0xF << 16)

524 
	#AT91C_SPI_RDRF
 (0x1 << 0)

525 
	#AT91C_SPI_TDRE
 (0x1 << 1)

526 
	#AT91C_SPI_MODF
 (0x1 << 2)

527 
	#AT91C_SPI_OVRES
 (0x1 << 3)

528 
	#AT91C_SPI_ENDRX
 (0x1 << 4)

529 
	#AT91C_SPI_ENDTX
 (0x1 << 5)

530 
	#AT91C_SPI_RXBUFF
 (0x1 << 6)

531 
	#AT91C_SPI_TXBUFE
 (0x1 << 7)

532 
	#AT91C_SPI_NSSR
 (0x1 << 8)

533 
	#AT91C_SPI_TXEMPTY
 (0x1 << 9)

534 
	#AT91C_SPI_SPIENS
 (0x1 << 16)

539 
	#AT91C_SPI_CPOL
 (0x1 << 0)

540 
	#AT91C_SPI_NCPHA
 (0x1 << 1)

541 
	#AT91C_SPI_CSAAT
 (0x1 << 3)

542 
	#AT91C_SPI_BITS
 (0xF << 4)

543 
	#AT91C_SPI_BITS_8
 (0x0 << 4)

544 
	#AT91C_SPI_BITS_9
 (0x1 << 4)

545 
	#AT91C_SPI_BITS_10
 (0x2 << 4)

546 
	#AT91C_SPI_BITS_11
 (0x3 << 4)

547 
	#AT91C_SPI_BITS_12
 (0x4 << 4)

548 
	#AT91C_SPI_BITS_13
 (0x5 << 4)

549 
	#AT91C_SPI_BITS_14
 (0x6 << 4)

550 
	#AT91C_SPI_BITS_15
 (0x7 << 4)

551 
	#AT91C_SPI_BITS_16
 (0x8 << 4)

552 
	#AT91C_SPI_SCBR
 (0xFF << 8)

553 
	#AT91C_SPI_DLYBS
 (0xFF << 16)

554 
	#AT91C_SPI_DLYBCT
 (0xFF << 24)

555 

	)

560 
	#US_CR
 ( 0)

561 
	#US_MR
 ( 4)

562 
	#US_IER
 ( 8)

563 
	#US_IDR
 (12)

564 
	#US_IMR
 (16)

565 
	#US_CSR
 (20)

566 
	#US_RHR
 (24)

567 
	#US_THR
 (28)

568 
	#US_BRGR
 (32)

569 
	#US_RTOR
 (36)

570 
	#US_TTGR
 (40)

571 
	#US_FIDI
 (64)

572 
	#US_NER
 (68)

573 
	#US_IF
 (76)

574 
	#US_RPR
 (256)

575 
	#US_RCR
 (260)

576 
	#US_TPR
 (264)

577 
	#US_TCR
 (268)

578 
	#US_RNPR
 (272)

579 
	#US_RNCR
 (276)

580 
	#US_TNPR
 (280)

581 
	#US_TNCR
 (284)

582 
	#US_PTCR
 (288)

583 
	#US_PTSR
 (292)

585 
	#AT91C_US_STTBRK
 (0x1 << 9)

586 
	#AT91C_US_STPBRK
 (0x1 << 10)

587 
	#AT91C_US_STTTO
 (0x1 << 11)

588 
	#AT91C_US_SENDA
 (0x1 << 12)

589 
	#AT91C_US_RSTIT
 (0x1 << 13)

590 
	#AT91C_US_RSTNACK
 (0x1 << 14)

591 
	#AT91C_US_RETTO
 (0x1 << 15)

592 
	#AT91C_US_DTREN
 (0x1 << 16)

593 
	#AT91C_US_DTRDIS
 (0x1 << 17)

594 
	#AT91C_US_RTSEN
 (0x1 << 18)

595 
	#AT91C_US_RTSDIS
 (0x1 << 19)

597 
	#AT91C_US_USMODE
 (0xF << 0)

598 
	#AT91C_US_USMODE_NORMAL
 (0x0)

599 
	#AT91C_US_USMODE_RS485
 (0x1)

600 
	#AT91C_US_USMODE_HWHSH
 (0x2)

601 
	#AT91C_US_USMODE_MODEM
 (0x3)

602 
	#AT91C_US_USMODE_ISO7816_0
 (0x4)

603 
	#AT91C_US_USMODE_ISO7816_1
 (0x6)

604 
	#AT91C_US_USMODE_IRDA
 (0x8)

605 
	#AT91C_US_USMODE_SWHSH
 (0xC)

606 
	#AT91C_US_CLKS
 (0x3 << 4)

607 
	#AT91C_US_CLKS_CLOCK
 (0x0 << 4)

608 
	#AT91C_US_CLKS_FDIV1
 (0x1 << 4)

609 
	#AT91C_US_CLKS_SLOW
 (0x2 << 4)

610 
	#AT91C_US_CLKS_EXT
 (0x3 << 4)

611 
	#AT91C_US_CHRL
 (0x3 << 6)

612 
	#AT91C_US_CHRL_5_BITS
 (0x0 << 6)

613 
	#AT91C_US_CHRL_6_BITS
 (0x1 << 6)

614 
	#AT91C_US_CHRL_7_BITS
 (0x2 << 6)

615 
	#AT91C_US_CHRL_8_BITS
 (0x3 << 6)

616 
	#AT91C_US_SYNC
 (0x1 << 8)

617 
	#AT91C_US_NBSTOP
 (0x3 << 12)

618 
	#AT91C_US_NBSTOP_1_BIT
 (0x0 << 12)

619 
	#AT91C_US_NBSTOP_15_BIT
 (0x1 << 12)

620 
	#AT91C_US_NBSTOP_2_BIT
 (0x2 << 12)

621 
	#AT91C_US_MSBF
 (0x1 << 16)

622 
	#AT91C_US_MODE9
 (0x1 << 17)

623 
	#AT91C_US_CKLO
 (0x1 << 18)

624 
	#AT91C_US_OVER
 (0x1 << 19)

625 
	#AT91C_US_INACK
 (0x1 << 20)

626 
	#AT91C_US_DSNACK
 (0x1 << 21)

627 
	#AT91C_US_MAX_ITER
 (0x1 << 24)

628 
	#AT91C_US_FILTER
 (0x1 << 28)

630 
	#AT91C_US_RXBRK
 (0x1 << 2)

631 
	#AT91C_US_TIMEOUT
 (0x1 << 8)

632 
	#AT91C_US_ITERATION
 (0x1 << 10)

633 
	#AT91C_US_NACK
 (0x1 << 13)

634 
	#AT91C_US_RIIC
 (0x1 << 16)

635 
	#AT91C_US_DSRIC
 (0x1 << 17)

636 
	#AT91C_US_DCDIC
 (0x1 << 18)

637 
	#AT91C_US_CTSIC
 (0x1 << 19)

641 
	#AT91C_US_RI
 (0x1 << 20)

642 
	#AT91C_US_DSR
 (0x1 << 21)

643 
	#AT91C_US_DCD
 (0x1 << 22)

644 
	#AT91C_US_CTS
 (0x1 << 23)

645 

	)

650 
	#SSC_CR
 ( 0)

651 
	#SSC_CMR
 ( 4)

652 
	#SSC_RCMR
 (16)

653 
	#SSC_RFMR
 (20)

654 
	#SSC_TCMR
 (24)

655 
	#SSC_TFMR
 (28)

656 
	#SSC_RHR
 (32)

657 
	#SSC_THR
 (36)

658 
	#SSC_RSHR
 (48)

659 
	#SSC_TSHR
 (52)

660 
	#SSC_SR
 (64)

661 
	#SSC_IER
 (68)

662 
	#SSC_IDR
 (72)

663 
	#SSC_IMR
 (76)

664 
	#SSC_RPR
 (256)

665 
	#SSC_RCR
 (260)

666 
	#SSC_TPR
 (264)

667 
	#SSC_TCR
 (268)

668 
	#SSC_RNPR
 (272)

669 
	#SSC_RNCR
 (276)

670 
	#SSC_TNPR
 (280)

671 
	#SSC_TNCR
 (284)

672 
	#SSC_PTCR
 (288)

673 
	#SSC_PTSR
 (292)

675 
	#AT91C_SSC_RXEN
 (0x1 << 0)

676 
	#AT91C_SSC_RXDIS
 (0x1 << 1)

677 
	#AT91C_SSC_TXEN
 (0x1 << 8)

678 
	#AT91C_SSC_TXDIS
 (0x1 << 9)

679 
	#AT91C_SSC_SWRST
 (0x1 << 15)

681 
	#AT91C_SSC_CKS
 (0x3 << 0)

682 
	#AT91C_SSC_CKS_DIV
 (0x0)

683 
	#AT91C_SSC_CKS_TK
 (0x1)

684 
	#AT91C_SSC_CKS_RK
 (0x2)

685 
	#AT91C_SSC_CKO
 (0x7 << 2)

686 
	#AT91C_SSC_CKO_NONE
 (0x0 << 2)

687 
	#AT91C_SSC_CKO_CONTINOUS
 (0x1 << 2)

688 
	#AT91C_SSC_CKO_DATA_TX
 (0x2 << 2)

689 
	#AT91C_SSC_CKI
 (0x1 << 5)

690 
	#AT91C_SSC_START
 (0xF << 8)

691 
	#AT91C_SSC_START_CONTINOUS
 (0x0 << 8)

692 
	#AT91C_SSC_START_TX
 (0x1 << 8)

693 
	#AT91C_SSC_START_LOW_RF
 (0x2 << 8)

694 
	#AT91C_SSC_START_HIGH_RF
 (0x3 << 8)

695 
	#AT91C_SSC_START_FALL_RF
 (0x4 << 8)

696 
	#AT91C_SSC_START_RISE_RF
 (0x5 << 8)

697 
	#AT91C_SSC_START_LEVEL_RF
 (0x6 << 8)

698 
	#AT91C_SSC_START_EDGE_RF
 (0x7 << 8)

699 
	#AT91C_SSC_START_0
 (0x8 << 8)

700 
	#AT91C_SSC_STTDLY
 (0xFF << 16)

701 
	#AT91C_SSC_PERIOD
 (0xFF << 24)

703 
	#AT91C_SSC_DATLEN
 (0x1F << 0)

704 
	#AT91C_SSC_LOOP
 (0x1 << 5)

705 
	#AT91C_SSC_MSBF
 (0x1 << 7)

706 
	#AT91C_SSC_DATNB
 (0xF << 8)

707 
	#AT91C_SSC_FSLEN
 (0xF << 16)

708 
	#AT91C_SSC_FSOS
 (0x7 << 20)

709 
	#AT91C_SSC_FSOS_NONE
 (0x0 << 20)

710 
	#AT91C_SSC_FSOS_NEGATIVE
 (0x1 << 20)

711 
	#AT91C_SSC_FSOS_POSITIVE
 (0x2 << 20)

712 
	#AT91C_SSC_FSOS_LOW
 (0x3 << 20)

713 
	#AT91C_SSC_FSOS_HIGH
 (0x4 << 20)

714 
	#AT91C_SSC_FSOS_TOGGLE
 (0x5 << 20)

715 
	#AT91C_SSC_FSEDGE
 (0x1 << 24)

718 
	#AT91C_SSC_DATDEF
 (0x1 << 5)

719 
	#AT91C_SSC_FSDEN
 (0x1 << 23)

721 
	#AT91C_SSC_TXRDY
 (0x1 << 0)

722 
	#AT91C_SSC_TXEMPTY
 (0x1 << 1)

723 
	#AT91C_SSC_ENDTX
 (0x1 << 2)

724 
	#AT91C_SSC_TXBUFE
 (0x1 << 3)

725 
	#AT91C_SSC_RXRDY
 (0x1 << 4)

726 
	#AT91C_SSC_OVRUN
 (0x1 << 5)

727 
	#AT91C_SSC_ENDRX
 (0x1 << 6)

728 
	#AT91C_SSC_RXBUFF
 (0x1 << 7)

729 
	#AT91C_SSC_TXSYN
 (0x1 << 10)

730 
	#AT91C_SSC_RXSYN
 (0x1 << 11)

731 
	#AT91C_SSC_TXENA
 (0x1 << 16)

732 
	#AT91C_SSC_RXENA
 (0x1 << 17)

736 

	)

741 
	#TWI_CR
 ( 0)

742 
	#TWI_MMR
 ( 4)

743 
	#TWI_IADR
 (12)

744 
	#TWI_CWGR
 (16)

745 
	#TWI_SR
 (32)

746 
	#TWI_IER
 (36)

747 
	#TWI_IDR
 (40)

748 
	#TWI_IMR
 (44)

749 
	#TWI_RHR
 (48)

750 
	#TWI_THR
 (52)

752 
	#AT91C_TWI_START
 (0x1 << 0)

753 
	#AT91C_TWI_STOP
 (0x1 << 1)

754 
	#AT91C_TWI_MSEN
 (0x1 << 2)

755 
	#AT91C_TWI_MSDIS
 (0x1 << 3)

756 
	#AT91C_TWI_SWRST
 (0x1 << 7)

758 
	#AT91C_TWI_IADRSZ
 (0x3 << 8)

759 
	#AT91C_TWI_IADRSZ_NO
 (0x0 << 8)

760 
	#AT91C_TWI_IADRSZ_1_BYTE
 (0x1 << 8)

761 
	#AT91C_TWI_IADRSZ_2_BYTE
 (0x2 << 8)

762 
	#AT91C_TWI_IADRSZ_3_BYTE
 (0x3 << 8)

763 
	#AT91C_TWI_MREAD
 (0x1 << 12)

764 
	#AT91C_TWI_DADR
 (0x7F << 16)

766 
	#AT91C_TWI_CLDIV
 (0xFF << 0)

767 
	#AT91C_TWI_CHDIV
 (0xFF << 8)

768 
	#AT91C_TWI_CKDIV
 (0x7 << 16)

770 
	#AT91C_TWI_TXCOMP
 (0x1 << 0)

771 
	#AT91C_TWI_RXRDY
 (0x1 << 1)

772 
	#AT91C_TWI_TXRDY
 (0x1 << 2)

773 
	#AT91C_TWI_OVRE
 (0x1 << 6)

774 
	#AT91C_TWI_UNRE
 (0x1 << 7)

775 
	#AT91C_TWI_NACK
 (0x1 << 8)

779 

	)

784 
	#PWMC_CMR
 ( 0)

785 
	#PWMC_CDTYR
 ( 4)

786 
	#PWMC_CPRDR
 ( 8)

787 
	#PWMC_CCNTR
 (12)

788 
	#PWMC_CUPDR
 (16)

789 
	#PWMC_Re£rved
 (20)

791 
	#AT91C_PWMC_CPRE
 (0xF << 0)

792 
	#AT91C_PWMC_CPRE_MCK
 (0x0)

793 
	#AT91C_PWMC_CPRE_MCKA
 (0xB)

794 
	#AT91C_PWMC_CPRE_MCKB
 (0xC)

795 
	#AT91C_PWMC_CALG
 (0x1 << 8)

796 
	#AT91C_PWMC_CPOL
 (0x1 << 9)

797 
	#AT91C_PWMC_CPD
 (0x1 << 10)

799 
	#AT91C_PWMC_CDTY
 (0x0 << 0)

801 
	#AT91C_PWMC_CPRD
 (0x0 << 0)

803 
	#AT91C_PWMC_CCNT
 (0x0 << 0)

805 
	#AT91C_PWMC_CUPD
 (0x0 << 0)

806 

	)

811 
	#PWMC_MR
 ( 0)

812 
	#PWMC_ENA
 ( 4)

813 
	#PWMC_DIS
 ( 8)

814 
	#PWMC_SR
 (12)

815 
	#PWMC_IER
 (16)

816 
	#PWMC_IDR
 (20)

817 
	#PWMC_IMR
 (24)

818 
	#PWMC_ISR
 (28)

819 
	#PWMC_VR
 (252)

820 
	#PWMC_CH
 (512)

822 
	#AT91C_PWMC_DIVA
 (0xFF << 0)

823 
	#AT91C_PWMC_PREA
 (0xF << 8)

824 
	#AT91C_PWMC_PREA_MCK
 (0x0 << 8)

825 
	#AT91C_PWMC_DIVB
 (0xFF << 16)

826 
	#AT91C_PWMC_PREB
 (0xF << 24)

827 
	#AT91C_PWMC_PREB_MCK
 (0x0 << 24)

829 
	#AT91C_PWMC_CHID0
 (0x1 << 0)

830 
	#AT91C_PWMC_CHID1
 (0x1 << 1)

831 
	#AT91C_PWMC_CHID2
 (0x1 << 2)

832 
	#AT91C_PWMC_CHID3
 (0x1 << 3)

839 

	)

844 
	#UDP_NUM
 ( 0)

845 
	#UDP_GLBSTATE
 ( 4)

846 
	#UDP_FADDR
 ( 8)

847 
	#UDP_IER
 (16)

848 
	#UDP_IDR
 (20)

849 
	#UDP_IMR
 (24)

850 
	#UDP_ISR
 (28)

851 
	#UDP_ICR
 (32)

852 
	#UDP_RSTEP
 (40)

853 
	#UDP_CSR
 (48)

854 
	#UDP_FDR
 (80)

855 
	#UDP_TXVC
 (116)

857 
	#AT91C_UDP_FRM_NUM
 (0x7FF << 0)

858 
	#AT91C_UDP_FRM_ERR
 (0x1 << 16)

859 
	#AT91C_UDP_FRM_OK
 (0x1 << 17)

861 
	#AT91C_UDP_FADDEN
 (0x1 << 0)

862 
	#AT91C_UDP_CONFG
 (0x1 << 1)

863 
	#AT91C_UDP_ESR
 (0x1 << 2)

864 
	#AT91C_UDP_RSMINPR
 (0x1 << 3)

865 
	#AT91C_UDP_RMWUPE
 (0x1 << 4)

867 
	#AT91C_UDP_FADD
 (0xFF << 0)

868 
	#AT91C_UDP_FEN
 (0x1 << 8)

870 
	#AT91C_UDP_EPINT0
 (0x1 << 0)

871 
	#AT91C_UDP_EPINT1
 (0x1 << 1)

872 
	#AT91C_UDP_EPINT2
 (0x1 << 2)

873 
	#AT91C_UDP_EPINT3
 (0x1 << 3)

874 
	#AT91C_UDP_EPINT4
 (0x1 << 4)

875 
	#AT91C_UDP_EPINT5
 (0x1 << 5)

876 
	#AT91C_UDP_RXSUSP
 (0x1 << 8)

877 
	#AT91C_UDP_RXRSM
 (0x1 << 9)

878 
	#AT91C_UDP_EXTRSM
 (0x1 << 10)

879 
	#AT91C_UDP_SOFINT
 (0x1 << 11)

880 
	#AT91C_UDP_WAKEUP
 (0x1 << 13)

884 
	#AT91C_UDP_ENDBUSRES
 (0x1 << 12)

887 
	#AT91C_UDP_EP0
 (0x1 << 0)

888 
	#AT91C_UDP_EP1
 (0x1 << 1)

889 
	#AT91C_UDP_EP2
 (0x1 << 2)

890 
	#AT91C_UDP_EP3
 (0x1 << 3)

891 
	#AT91C_UDP_EP4
 (0x1 << 4)

892 
	#AT91C_UDP_EP5
 (0x1 << 5)

894 
	#AT91C_UDP_TXCOMP
 (0x1 << 0)

895 
	#AT91C_UDP_RX_DATA_BK0
 (0x1 << 1)

896 
	#AT91C_UDP_RXSETUP
 (0x1 << 2)

897 
	#AT91C_UDP_ISOERROR
 (0x1 << 3)

898 
	#AT91C_UDP_TXPKTRDY
 (0x1 << 4)

899 
	#AT91C_UDP_FORCESTALL
 (0x1 << 5)

900 
	#AT91C_UDP_RX_DATA_BK1
 (0x1 << 6)

901 
	#AT91C_UDP_DIR
 (0x1 << 7)

902 
	#AT91C_UDP_EPTYPE
 (0x7 << 8)

903 
	#AT91C_UDP_EPTYPE_CTRL
 (0x0 << 8)

904 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (0x1 << 8)

905 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (0x2 << 8)

906 
	#AT91C_UDP_EPTYPE_INT_OUT
 (0x3 << 8)

907 
	#AT91C_UDP_EPTYPE_ISO_IN
 (0x5 << 8)

908 
	#AT91C_UDP_EPTYPE_BULK_IN
 (0x6 << 8)

909 
	#AT91C_UDP_EPTYPE_INT_IN
 (0x7 << 8)

910 
	#AT91C_UDP_DTGLE
 (0x1 << 11)

911 
	#AT91C_UDP_EPEDS
 (0x1 << 15)

912 
	#AT91C_UDP_RXBYTECNT
 (0x7FF << 16)

914 
	#AT91C_UDP_TXVDIS
 (0x1 << 8)

915 
	#AT91C_UDP_PUON
 (0x1 << 9)

916 

	)

921 
	#TC_CCR
 ( 0)

922 
	#TC_CMR
 ( 4)

923 
	#TC_CV
 (16)

924 
	#TC_RA
 (20)

925 
	#TC_RB
 (24)

926 
	#TC_RC
 (28)

927 
	#TC_SR
 (32)

928 
	#TC_IER
 (36)

929 
	#TC_IDR
 (40)

930 
	#TC_IMR
 (44)

932 
	#AT91C_TC_CLKEN
 (0x1 << 0)

933 
	#AT91C_TC_CLKDIS
 (0x1 << 1)

934 
	#AT91C_TC_SWTRG
 (0x1 << 2)

936 
	#AT91C_TC_CLKS
 (0x7 << 0)

937 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (0x0)

938 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (0x1)

939 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (0x2)

940 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (0x3)

941 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (0x4)

942 
	#AT91C_TC_CLKS_XC0
 (0x5)

943 
	#AT91C_TC_CLKS_XC1
 (0x6)

944 
	#AT91C_TC_CLKS_XC2
 (0x7)

945 
	#AT91C_TC_CLKI
 (0x1 << 3)

946 
	#AT91C_TC_BURST
 (0x3 << 4)

947 
	#AT91C_TC_BURST_NONE
 (0x0 << 4)

948 
	#AT91C_TC_BURST_XC0
 (0x1 << 4)

949 
	#AT91C_TC_BURST_XC1
 (0x2 << 4)

950 
	#AT91C_TC_BURST_XC2
 (0x3 << 4)

951 
	#AT91C_TC_CPCSTOP
 (0x1 << 6)

952 
	#AT91C_TC_LDBSTOP
 (0x1 << 6)

953 
	#AT91C_TC_CPCDIS
 (0x1 << 7)

954 
	#AT91C_TC_LDBDIS
 (0x1 << 7)

955 
	#AT91C_TC_ETRGEDG
 (0x3 << 8)

956 
	#AT91C_TC_ETRGEDG_NONE
 (0x0 << 8)

957 
	#AT91C_TC_ETRGEDG_RISING
 (0x1 << 8)

958 
	#AT91C_TC_ETRGEDG_FALLING
 (0x2 << 8)

959 
	#AT91C_TC_ETRGEDG_BOTH
 (0x3 << 8)

960 
	#AT91C_TC_EEVTEDG
 (0x3 << 8)

961 
	#AT91C_TC_EEVTEDG_NONE
 (0x0 << 8)

962 
	#AT91C_TC_EEVTEDG_RISING
 (0x1 << 8)

963 
	#AT91C_TC_EEVTEDG_FALLING
 (0x2 << 8)

964 
	#AT91C_TC_EEVTEDG_BOTH
 (0x3 << 8)

965 
	#AT91C_TC_EEVT
 (0x3 << 10)

966 
	#AT91C_TC_EEVT_TIOB
 (0x0 << 10)

967 
	#AT91C_TC_EEVT_XC0
 (0x1 << 10)

968 
	#AT91C_TC_EEVT_XC1
 (0x2 << 10)

969 
	#AT91C_TC_EEVT_XC2
 (0x3 << 10)

970 
	#AT91C_TC_ABETRG
 (0x1 << 10)

971 
	#AT91C_TC_ENETRG
 (0x1 << 12)

972 
	#AT91C_TC_WAVESEL
 (0x3 << 13)

973 
	#AT91C_TC_WAVESEL_UP
 (0x0 << 13)

974 
	#AT91C_TC_WAVESEL_UPDOWN
 (0x1 << 13)

975 
	#AT91C_TC_WAVESEL_UP_AUTO
 (0x2 << 13)

976 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (0x3 << 13)

977 
	#AT91C_TC_CPCTRG
 (0x1 << 14)

978 
	#AT91C_TC_WAVE
 (0x1 << 15)

979 
	#AT91C_TC_ACPA
 (0x3 << 16)

980 
	#AT91C_TC_ACPA_NONE
 (0x0 << 16)

981 
	#AT91C_TC_ACPA_SET
 (0x1 << 16)

982 
	#AT91C_TC_ACPA_CLEAR
 (0x2 << 16)

983 
	#AT91C_TC_ACPA_TOGGLE
 (0x3 << 16)

984 
	#AT91C_TC_LDRA
 (0x3 << 16)

985 
	#AT91C_TC_LDRA_NONE
 (0x0 << 16)

986 
	#AT91C_TC_LDRA_RISING
 (0x1 << 16)

987 
	#AT91C_TC_LDRA_FALLING
 (0x2 << 16)

988 
	#AT91C_TC_LDRA_BOTH
 (0x3 << 16)

989 
	#AT91C_TC_ACPC
 (0x3 << 18)

990 
	#AT91C_TC_ACPC_NONE
 (0x0 << 18)

991 
	#AT91C_TC_ACPC_SET
 (0x1 << 18)

992 
	#AT91C_TC_ACPC_CLEAR
 (0x2 << 18)

993 
	#AT91C_TC_ACPC_TOGGLE
 (0x3 << 18)

994 
	#AT91C_TC_LDRB
 (0x3 << 18)

995 
	#AT91C_TC_LDRB_NONE
 (0x0 << 18)

996 
	#AT91C_TC_LDRB_RISING
 (0x1 << 18)

997 
	#AT91C_TC_LDRB_FALLING
 (0x2 << 18)

998 
	#AT91C_TC_LDRB_BOTH
 (0x3 << 18)

999 
	#AT91C_TC_AEEVT
 (0x3 << 20)

1000 
	#AT91C_TC_AEEVT_NONE
 (0x0 << 20)

1001 
	#AT91C_TC_AEEVT_SET
 (0x1 << 20)

1002 
	#AT91C_TC_AEEVT_CLEAR
 (0x2 << 20)

1003 
	#AT91C_TC_AEEVT_TOGGLE
 (0x3 << 20)

1004 
	#AT91C_TC_ASWTRG
 (0x3 << 22)

1005 
	#AT91C_TC_ASWTRG_NONE
 (0x0 << 22)

1006 
	#AT91C_TC_ASWTRG_SET
 (0x1 << 22)

1007 
	#AT91C_TC_ASWTRG_CLEAR
 (0x2 << 22)

1008 
	#AT91C_TC_ASWTRG_TOGGLE
 (0x3 << 22)

1009 
	#AT91C_TC_BCPB
 (0x3 << 24)

1010 
	#AT91C_TC_BCPB_NONE
 (0x0 << 24)

1011 
	#AT91C_TC_BCPB_SET
 (0x1 << 24)

1012 
	#AT91C_TC_BCPB_CLEAR
 (0x2 << 24)

1013 
	#AT91C_TC_BCPB_TOGGLE
 (0x3 << 24)

1014 
	#AT91C_TC_BCPC
 (0x3 << 26)

1015 
	#AT91C_TC_BCPC_NONE
 (0x0 << 26)

1016 
	#AT91C_TC_BCPC_SET
 (0x1 << 26)

1017 
	#AT91C_TC_BCPC_CLEAR
 (0x2 << 26)

1018 
	#AT91C_TC_BCPC_TOGGLE
 (0x3 << 26)

1019 
	#AT91C_TC_BEEVT
 (0x3 << 28)

1020 
	#AT91C_TC_BEEVT_NONE
 (0x0 << 28)

1021 
	#AT91C_TC_BEEVT_SET
 (0x1 << 28)

1022 
	#AT91C_TC_BEEVT_CLEAR
 (0x2 << 28)

1023 
	#AT91C_TC_BEEVT_TOGGLE
 (0x3 << 28)

1024 
	#AT91C_TC_BSWTRG
 (0x3 << 30)

1025 
	#AT91C_TC_BSWTRG_NONE
 (0x0 << 30)

1026 
	#AT91C_TC_BSWTRG_SET
 (0x1 << 30)

1027 
	#AT91C_TC_BSWTRG_CLEAR
 (0x2 << 30)

1028 
	#AT91C_TC_BSWTRG_TOGGLE
 (0x3 << 30)

1030 
	#AT91C_TC_COVFS
 (0x1 << 0)

1031 
	#AT91C_TC_LOVRS
 (0x1 << 1)

1032 
	#AT91C_TC_CPAS
 (0x1 << 2)

1033 
	#AT91C_TC_CPBS
 (0x1 << 3)

1034 
	#AT91C_TC_CPCS
 (0x1 << 4)

1035 
	#AT91C_TC_LDRAS
 (0x1 << 5)

1036 
	#AT91C_TC_LDRBS
 (0x1 << 6)

1037 
	#AT91C_TC_ETRGS
 (0x1 << 7)

1038 
	#AT91C_TC_CLKSTA
 (0x1 << 16)

1039 
	#AT91C_TC_MTIOA
 (0x1 << 17)

1040 
	#AT91C_TC_MTIOB
 (0x1 << 18)

1044 

	)

1049 
	#TCB_TC0
 ( 0)

1050 
	#TCB_TC1
 (64)

1051 
	#TCB_TC2
 (128)

1052 
	#TCB_BCR
 (192)

1053 
	#TCB_BMR
 (196)

1055 
	#AT91C_TCB_SYNC
 (0x1 << 0)

1057 
	#AT91C_TCB_TC0XC0S
 (0x3 << 0)

1058 
	#AT91C_TCB_TC0XC0S_TCLK0
 (0x0)

1059 
	#AT91C_TCB_TC0XC0S_NONE
 (0x1)

1060 
	#AT91C_TCB_TC0XC0S_TIOA1
 (0x2)

1061 
	#AT91C_TCB_TC0XC0S_TIOA2
 (0x3)

1062 
	#AT91C_TCB_TC1XC1S
 (0x3 << 2)

1063 
	#AT91C_TCB_TC1XC1S_TCLK1
 (0x0 << 2)

1064 
	#AT91C_TCB_TC1XC1S_NONE
 (0x1 << 2)

1065 
	#AT91C_TCB_TC1XC1S_TIOA0
 (0x2 << 2)

1066 
	#AT91C_TCB_TC1XC1S_TIOA2
 (0x3 << 2)

1067 
	#AT91C_TCB_TC2XC2S
 (0x3 << 4)

1068 
	#AT91C_TCB_TC2XC2S_TCLK2
 (0x0 << 4)

1069 
	#AT91C_TCB_TC2XC2S_NONE
 (0x1 << 4)

1070 
	#AT91C_TCB_TC2XC2S_TIOA0
 (0x2 << 4)

1071 
	#AT91C_TCB_TC2XC2S_TIOA1
 (0x3 << 4)

1072 

	)

1077 
	#CAN_MB_MMR
 ( 0)

1078 
	#CAN_MB_MAM
 ( 4)

1079 
	#CAN_MB_MID
 ( 8)

1080 
	#CAN_MB_MFID
 (12)

1081 
	#CAN_MB_MSR
 (16)

1082 
	#CAN_MB_MDL
 (20)

1083 
	#CAN_MB_MDH
 (24)

1084 
	#CAN_MB_MCR
 (28)

1086 
	#AT91C_CAN_MTIMEMARK
 (0xFFFF << 0)

1087 
	#AT91C_CAN_PRIOR
 (0xF << 16)

1088 
	#AT91C_CAN_MOT
 (0x7 << 24)

1089 
	#AT91C_CAN_MOT_DIS
 (0x0 << 24)

1090 
	#AT91C_CAN_MOT_RX
 (0x1 << 24)

1091 
	#AT91C_CAN_MOT_RXOVERWRITE
 (0x2 << 24)

1092 
	#AT91C_CAN_MOT_TX
 (0x3 << 24)

1093 
	#AT91C_CAN_MOT_CONSUMER
 (0x4 << 24)

1094 
	#AT91C_CAN_MOT_PRODUCER
 (0x5 << 24)

1096 
	#AT91C_CAN_MIDvB
 (0x3FFFF << 0)

1097 
	#AT91C_CAN_MIDvA
 (0x7FF << 18)

1098 
	#AT91C_CAN_MIDE
 (0x1 << 29)

1102 
	#AT91C_CAN_MTIMESTAMP
 (0xFFFF << 0)

1103 
	#AT91C_CAN_MDLC
 (0xF << 16)

1104 
	#AT91C_CAN_MRTR
 (0x1 << 20)

1105 
	#AT91C_CAN_MABT
 (0x1 << 22)

1106 
	#AT91C_CAN_MRDY
 (0x1 << 23)

1107 
	#AT91C_CAN_MMI
 (0x1 << 24)

1111 
	#AT91C_CAN_MACR
 (0x1 << 22)

1112 
	#AT91C_CAN_MTCR
 (0x1 << 23)

1113 

	)

1118 
	#CAN_MR
 ( 0)

1119 
	#CAN_IER
 ( 4)

1120 
	#CAN_IDR
 ( 8)

1121 
	#CAN_IMR
 (12)

1122 
	#CAN_SR
 (16)

1123 
	#CAN_BR
 (20)

1124 
	#CAN_TIM
 (24)

1125 
	#CAN_TIMESTP
 (28)

1126 
	#CAN_ECR
 (32)

1127 
	#CAN_TCR
 (36)

1128 
	#CAN_ACR
 (40)

1129 
	#CAN_VR
 (252)

1130 
	#CAN_MB0
 (512)

1131 
	#CAN_MB1
 (544)

1132 
	#CAN_MB2
 (576)

1133 
	#CAN_MB3
 (608)

1134 
	#CAN_MB4
 (640)

1135 
	#CAN_MB5
 (672)

1136 
	#CAN_MB6
 (704)

1137 
	#CAN_MB7
 (736)

1138 
	#CAN_MB8
 (768)

1139 
	#CAN_MB9
 (800)

1140 
	#CAN_MB10
 (832)

1141 
	#CAN_MB11
 (864)

1142 
	#CAN_MB12
 (896)

1143 
	#CAN_MB13
 (928)

1144 
	#CAN_MB14
 (960)

1145 
	#CAN_MB15
 (992)

1147 
	#AT91C_CAN_CANEN
 (0x1 << 0)

1148 
	#AT91C_CAN_LPM
 (0x1 << 1)

1149 
	#AT91C_CAN_ABM
 (0x1 << 2)

1150 
	#AT91C_CAN_OVL
 (0x1 << 3)

1151 
	#AT91C_CAN_TEOF
 (0x1 << 4)

1152 
	#AT91C_CAN_TTM
 (0x1 << 5)

1153 
	#AT91C_CAN_TIMFRZ
 (0x1 << 6)

1154 
	#AT91C_CAN_DRPT
 (0x1 << 7)

1156 
	#AT91C_CAN_MB0
 (0x1 << 0)

1157 
	#AT91C_CAN_MB1
 (0x1 << 1)

1158 
	#AT91C_CAN_MB2
 (0x1 << 2)

1159 
	#AT91C_CAN_MB3
 (0x1 << 3)

1160 
	#AT91C_CAN_MB4
 (0x1 << 4)

1161 
	#AT91C_CAN_MB5
 (0x1 << 5)

1162 
	#AT91C_CAN_MB6
 (0x1 << 6)

1163 
	#AT91C_CAN_MB7
 (0x1 << 7)

1164 
	#AT91C_CAN_MB8
 (0x1 << 8)

1165 
	#AT91C_CAN_MB9
 (0x1 << 9)

1166 
	#AT91C_CAN_MB10
 (0x1 << 10)

1167 
	#AT91C_CAN_MB11
 (0x1 << 11)

1168 
	#AT91C_CAN_MB12
 (0x1 << 12)

1169 
	#AT91C_CAN_MB13
 (0x1 << 13)

1170 
	#AT91C_CAN_MB14
 (0x1 << 14)

1171 
	#AT91C_CAN_MB15
 (0x1 << 15)

1172 
	#AT91C_CAN_ERRA
 (0x1 << 16)

1173 
	#AT91C_CAN_WARN
 (0x1 << 17)

1174 
	#AT91C_CAN_ERRP
 (0x1 << 18)

1175 
	#AT91C_CAN_BOFF
 (0x1 << 19)

1176 
	#AT91C_CAN_SLEEP
 (0x1 << 20)

1177 
	#AT91C_CAN_WAKEUP
 (0x1 << 21)

1178 
	#AT91C_CAN_TOVF
 (0x1 << 22)

1179 
	#AT91C_CAN_TSTP
 (0x1 << 23)

1180 
	#AT91C_CAN_CERR
 (0x1 << 24)

1181 
	#AT91C_CAN_SERR
 (0x1 << 25)

1182 
	#AT91C_CAN_AERR
 (0x1 << 26)

1183 
	#AT91C_CAN_FERR
 (0x1 << 27)

1184 
	#AT91C_CAN_BERR
 (0x1 << 28)

1188 
	#AT91C_CAN_RBSY
 (0x1 << 29)

1189 
	#AT91C_CAN_TBSY
 (0x1 << 30)

1190 
	#AT91C_CAN_OVLY
 (0x1 << 31)

1192 
	#AT91C_CAN_PHASE2
 (0x7 << 0)

1193 
	#AT91C_CAN_PHASE1
 (0x7 << 4)

1194 
	#AT91C_CAN_PROPAG
 (0x7 << 8)

1195 
	#AT91C_CAN_SYNC
 (0x3 << 12)

1196 
	#AT91C_CAN_BRP
 (0x7F << 16)

1197 
	#AT91C_CAN_SMP
 (0x1 << 24)

1199 
	#AT91C_CAN_TIMER
 (0xFFFF << 0)

1202 
	#AT91C_CAN_REC
 (0xFF << 0)

1203 
	#AT91C_CAN_TEC
 (0xFF << 16)

1205 
	#AT91C_CAN_TIMRST
 (0x1 << 31)

1207 

	)

1212 
	#EMAC_NCR
 ( 0)

1213 
	#EMAC_NCFGR
 ( 4)

1214 
	#EMAC_NSR
 ( 8)

1215 
	#EMAC_TSR
 (20)

1216 
	#EMAC_RBQP
 (24)

1217 
	#EMAC_TBQP
 (28)

1218 
	#EMAC_RSR
 (32)

1219 
	#EMAC_ISR
 (36)

1220 
	#EMAC_IER
 (40)

1221 
	#EMAC_IDR
 (44)

1222 
	#EMAC_IMR
 (48)

1223 
	#EMAC_MAN
 (52)

1224 
	#EMAC_PTR
 (56)

1225 
	#EMAC_PFR
 (60)

1226 
	#EMAC_FTO
 (64)

1227 
	#EMAC_SCF
 (68)

1228 
	#EMAC_MCF
 (72)

1229 
	#EMAC_FRO
 (76)

1230 
	#EMAC_FCSE
 (80)

1231 
	#EMAC_ALE
 (84)

1232 
	#EMAC_DTF
 (88)

1233 
	#EMAC_LCOL
 (92)

1234 
	#EMAC_ECOL
 (96)

1235 
	#EMAC_TUND
 (100)

1236 
	#EMAC_CSE
 (104)

1237 
	#EMAC_RRE
 (108)

1238 
	#EMAC_ROV
 (112)

1239 
	#EMAC_RSE
 (116)

1240 
	#EMAC_ELE
 (120)

1241 
	#EMAC_RJA
 (124)

1242 
	#EMAC_USF
 (128)

1243 
	#EMAC_STE
 (132)

1244 
	#EMAC_RLE
 (136)

1245 
	#EMAC_TPF
 (140)

1246 
	#EMAC_HRB
 (144)

1247 
	#EMAC_HRT
 (148)

1248 
	#EMAC_SA1L
 (152)

1249 
	#EMAC_SA1H
 (156)

1250 
	#EMAC_SA2L
 (160)

1251 
	#EMAC_SA2H
 (164)

1252 
	#EMAC_SA3L
 (168)

1253 
	#EMAC_SA3H
 (172)

1254 
	#EMAC_SA4L
 (176)

1255 
	#EMAC_SA4H
 (180)

1256 
	#EMAC_TID
 (184)

1257 
	#EMAC_TPQ
 (188)

1258 
	#EMAC_USRIO
 (192)

1259 
	#EMAC_WOL
 (196)

1260 
	#EMAC_REV
 (252)

1262 
	#AT91C_EMAC_LB
 (0x1 << 0)

1263 
	#AT91C_EMAC_LLB
 (0x1 << 1)

1264 
	#AT91C_EMAC_RE
 (0x1 << 2)

1265 
	#AT91C_EMAC_TE
 (0x1 << 3)

1266 
	#AT91C_EMAC_MPE
 (0x1 << 4)

1267 
	#AT91C_EMAC_CLRSTAT
 (0x1 << 5)

1268 
	#AT91C_EMAC_INCSTAT
 (0x1 << 6)

1269 
	#AT91C_EMAC_WESTAT
 (0x1 << 7)

1270 
	#AT91C_EMAC_BP
 (0x1 << 8)

1271 
	#AT91C_EMAC_TSTART
 (0x1 << 9)

1272 
	#AT91C_EMAC_THALT
 (0x1 << 10)

1273 
	#AT91C_EMAC_TPFR
 (0x1 << 11)

1274 
	#AT91C_EMAC_TZQ
 (0x1 << 12)

1276 
	#AT91C_EMAC_SPD
 (0x1 << 0)

1277 
	#AT91C_EMAC_FD
 (0x1 << 1)

1278 
	#AT91C_EMAC_JFRAME
 (0x1 << 3)

1279 
	#AT91C_EMAC_CAF
 (0x1 << 4)

1280 
	#AT91C_EMAC_NBC
 (0x1 << 5)

1281 
	#AT91C_EMAC_MTI
 (0x1 << 6)

1282 
	#AT91C_EMAC_UNI
 (0x1 << 7)

1283 
	#AT91C_EMAC_BIG
 (0x1 << 8)

1284 
	#AT91C_EMAC_EAE
 (0x1 << 9)

1285 
	#AT91C_EMAC_CLK
 (0x3 << 10)

1286 
	#AT91C_EMAC_CLK_HCLK_8
 (0x0 << 10)

1287 
	#AT91C_EMAC_CLK_HCLK_16
 (0x1 << 10)

1288 
	#AT91C_EMAC_CLK_HCLK_32
 (0x2 << 10)

1289 
	#AT91C_EMAC_CLK_HCLK_64
 (0x3 << 10)

1290 
	#AT91C_EMAC_RTY
 (0x1 << 12)

1291 
	#AT91C_EMAC_PAE
 (0x1 << 13)

1292 
	#AT91C_EMAC_RBOF
 (0x3 << 14)

1293 
	#AT91C_EMAC_RBOF_OFFSET_0
 (0x0 << 14)

1294 
	#AT91C_EMAC_RBOF_OFFSET_1
 (0x1 << 14)

1295 
	#AT91C_EMAC_RBOF_OFFSET_2
 (0x2 << 14)

1296 
	#AT91C_EMAC_RBOF_OFFSET_3
 (0x3 << 14)

1297 
	#AT91C_EMAC_RLCE
 (0x1 << 16)

1298 
	#AT91C_EMAC_DRFCS
 (0x1 << 17)

1299 
	#AT91C_EMAC_EFRHD
 (0x1 << 18)

1300 
	#AT91C_EMAC_IRXFCS
 (0x1 << 19)

1302 
	#AT91C_EMAC_LINKR
 (0x1 << 0)

1303 
	#AT91C_EMAC_MDIO
 (0x1 << 1)

1304 
	#AT91C_EMAC_IDLE
 (0x1 << 2)

1306 
	#AT91C_EMAC_UBR
 (0x1 << 0)

1307 
	#AT91C_EMAC_COL
 (0x1 << 1)

1308 
	#AT91C_EMAC_RLES
 (0x1 << 2)

1309 
	#AT91C_EMAC_TGO
 (0x1 << 3)

1310 
	#AT91C_EMAC_BEX
 (0x1 << 4)

1311 
	#AT91C_EMAC_COMP
 (0x1 << 5)

1312 
	#AT91C_EMAC_UND
 (0x1 << 6)

1314 
	#AT91C_EMAC_BNA
 (0x1 << 0)

1315 
	#AT91C_EMAC_REC
 (0x1 << 1)

1316 
	#AT91C_EMAC_OVR
 (0x1 << 2)

1318 
	#AT91C_EMAC_MFD
 (0x1 << 0)

1319 
	#AT91C_EMAC_RCOMP
 (0x1 << 1)

1320 
	#AT91C_EMAC_RXUBR
 (0x1 << 2)

1321 
	#AT91C_EMAC_TXUBR
 (0x1 << 3)

1322 
	#AT91C_EMAC_TUNDR
 (0x1 << 4)

1323 
	#AT91C_EMAC_RLEX
 (0x1 << 5)

1324 
	#AT91C_EMAC_TXERR
 (0x1 << 6)

1325 
	#AT91C_EMAC_TCOMP
 (0x1 << 7)

1326 
	#AT91C_EMAC_LINK
 (0x1 << 9)

1327 
	#AT91C_EMAC_ROVR
 (0x1 << 10)

1328 
	#AT91C_EMAC_HRESP
 (0x1 << 11)

1329 
	#AT91C_EMAC_PFRE
 (0x1 << 12)

1330 
	#AT91C_EMAC_PTZ
 (0x1 << 13)

1335 
	#AT91C_EMAC_DATA
 (0xFFFF << 0)

1336 
	#AT91C_EMAC_CODE
 (0x3 << 16)

1337 
	#AT91C_EMAC_REGA
 (0x1F << 18)

1338 
	#AT91C_EMAC_PHYA
 (0x1F << 23)

1339 
	#AT91C_EMAC_RW
 (0x3 << 28)

1340 
	#AT91C_EMAC_SOF
 (0x3 << 30)

1342 
	#AT91C_EMAC_RMII
 (0x1 << 0)

1344 
	#AT91C_EMAC_IP
 (0xFFFF << 0)

1345 
	#AT91C_EMAC_MAG
 (0x1 << 16)

1346 
	#AT91C_EMAC_ARP
 (0x1 << 17)

1347 
	#AT91C_EMAC_SA1
 (0x1 << 18)

1349 
	#AT91C_EMAC_REVREF
 (0xFFFF << 0)

1350 
	#AT91C_EMAC_PARTREF
 (0xFFFF << 16)

1351 

	)

1356 
	#ADC_CR
 ( 0)

1357 
	#ADC_MR
 ( 4)

1358 
	#ADC_CHER
 (16)

1359 
	#ADC_CHDR
 (20)

1360 
	#ADC_CHSR
 (24)

1361 
	#ADC_SR
 (28)

1362 
	#ADC_LCDR
 (32)

1363 
	#ADC_IER
 (36)

1364 
	#ADC_IDR
 (40)

1365 
	#ADC_IMR
 (44)

1366 
	#ADC_CDR0
 (48)

1367 
	#ADC_CDR1
 (52)

1368 
	#ADC_CDR2
 (56)

1369 
	#ADC_CDR3
 (60)

1370 
	#ADC_CDR4
 (64)

1371 
	#ADC_CDR5
 (68)

1372 
	#ADC_CDR6
 (72)

1373 
	#ADC_CDR7
 (76)

1374 
	#ADC_RPR
 (256)

1375 
	#ADC_RCR
 (260)

1376 
	#ADC_TPR
 (264)

1377 
	#ADC_TCR
 (268)

1378 
	#ADC_RNPR
 (272)

1379 
	#ADC_RNCR
 (276)

1380 
	#ADC_TNPR
 (280)

1381 
	#ADC_TNCR
 (284)

1382 
	#ADC_PTCR
 (288)

1383 
	#ADC_PTSR
 (292)

1385 
	#AT91C_ADC_SWRST
 (0x1 << 0)

1386 
	#AT91C_ADC_START
 (0x1 << 1)

1388 
	#AT91C_ADC_TRGEN
 (0x1 << 0)

1389 
	#AT91C_ADC_TRGEN_DIS
 (0x0)

1390 
	#AT91C_ADC_TRGEN_EN
 (0x1)

1391 
	#AT91C_ADC_TRGSEL
 (0x7 << 1)

1392 
	#AT91C_ADC_TRGSEL_TIOA0
 (0x0 << 1)

1393 
	#AT91C_ADC_TRGSEL_TIOA1
 (0x1 << 1)

1394 
	#AT91C_ADC_TRGSEL_TIOA2
 (0x2 << 1)

1395 
	#AT91C_ADC_TRGSEL_TIOA3
 (0x3 << 1)

1396 
	#AT91C_ADC_TRGSEL_TIOA4
 (0x4 << 1)

1397 
	#AT91C_ADC_TRGSEL_TIOA5
 (0x5 << 1)

1398 
	#AT91C_ADC_TRGSEL_EXT
 (0x6 << 1)

1399 
	#AT91C_ADC_LOWRES
 (0x1 << 4)

1400 
	#AT91C_ADC_LOWRES_10_BIT
 (0x0 << 4)

1401 
	#AT91C_ADC_LOWRES_8_BIT
 (0x1 << 4)

1402 
	#AT91C_ADC_SLEEP
 (0x1 << 5)

1403 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (0x0 << 5)

1404 
	#AT91C_ADC_SLEEP_MODE
 (0x1 << 5)

1405 
	#AT91C_ADC_PRESCAL
 (0x3F << 8)

1406 
	#AT91C_ADC_STARTUP
 (0x1F << 16)

1407 
	#AT91C_ADC_SHTIM
 (0xF << 24)

1409 
	#AT91C_ADC_CH0
 (0x1 << 0)

1410 
	#AT91C_ADC_CH1
 (0x1 << 1)

1411 
	#AT91C_ADC_CH2
 (0x1 << 2)

1412 
	#AT91C_ADC_CH3
 (0x1 << 3)

1413 
	#AT91C_ADC_CH4
 (0x1 << 4)

1414 
	#AT91C_ADC_CH5
 (0x1 << 5)

1415 
	#AT91C_ADC_CH6
 (0x1 << 6)

1416 
	#AT91C_ADC_CH7
 (0x1 << 7)

1420 
	#AT91C_ADC_EOC0
 (0x1 << 0)

1421 
	#AT91C_ADC_EOC1
 (0x1 << 1)

1422 
	#AT91C_ADC_EOC2
 (0x1 << 2)

1423 
	#AT91C_ADC_EOC3
 (0x1 << 3)

1424 
	#AT91C_ADC_EOC4
 (0x1 << 4)

1425 
	#AT91C_ADC_EOC5
 (0x1 << 5)

1426 
	#AT91C_ADC_EOC6
 (0x1 << 6)

1427 
	#AT91C_ADC_EOC7
 (0x1 << 7)

1428 
	#AT91C_ADC_OVRE0
 (0x1 << 8)

1429 
	#AT91C_ADC_OVRE1
 (0x1 << 9)

1430 
	#AT91C_ADC_OVRE2
 (0x1 << 10)

1431 
	#AT91C_ADC_OVRE3
 (0x1 << 11)

1432 
	#AT91C_ADC_OVRE4
 (0x1 << 12)

1433 
	#AT91C_ADC_OVRE5
 (0x1 << 13)

1434 
	#AT91C_ADC_OVRE6
 (0x1 << 14)

1435 
	#AT91C_ADC_OVRE7
 (0x1 << 15)

1436 
	#AT91C_ADC_DRDY
 (0x1 << 16)

1437 
	#AT91C_ADC_GOVRE
 (0x1 << 17)

1438 
	#AT91C_ADC_ENDRX
 (0x1 << 18)

1439 
	#AT91C_ADC_RXBUFF
 (0x1 << 19)

1441 
	#AT91C_ADC_LDATA
 (0x3FF << 0)

1446 
	#AT91C_ADC_DATA
 (0x3FF << 0)

1454 

	)

1459 
	#AES_CR
 ( 0)

1460 
	#AES_MR
 ( 4)

1461 
	#AES_IER
 (16)

1462 
	#AES_IDR
 (20)

1463 
	#AES_IMR
 (24)

1464 
	#AES_ISR
 (28)

1465 
	#AES_KEYWxR
 (32)

1466 
	#AES_IDATAxR
 (64)

1467 
	#AES_ODATAxR
 (80)

1468 
	#AES_IVxR
 (96)

1469 
	#AES_VR
 (252)

1470 
	#AES_RPR
 (256)

1471 
	#AES_RCR
 (260)

1472 
	#AES_TPR
 (264)

1473 
	#AES_TCR
 (268)

1474 
	#AES_RNPR
 (272)

1475 
	#AES_RNCR
 (276)

1476 
	#AES_TNPR
 (280)

1477 
	#AES_TNCR
 (284)

1478 
	#AES_PTCR
 (288)

1479 
	#AES_PTSR
 (292)

1481 
	#AT91C_AES_START
 (0x1 << 0)

1482 
	#AT91C_AES_SWRST
 (0x1 << 8)

1483 
	#AT91C_AES_LOADSEED
 (0x1 << 16)

1485 
	#AT91C_AES_CIPHER
 (0x1 << 0)

1486 
	#AT91C_AES_PROCDLY
 (0xF << 4)

1487 
	#AT91C_AES_SMOD
 (0x3 << 8)

1488 
	#AT91C_AES_SMOD_MANUAL
 (0x0 << 8)

1489 
	#AT91C_AES_SMOD_AUTO
 (0x1 << 8)

1490 
	#AT91C_AES_SMOD_PDC
 (0x2 << 8)

1491 
	#AT91C_AES_OPMOD
 (0x7 << 12)

1492 
	#AT91C_AES_OPMOD_ECB
 (0x0 << 12)

1493 
	#AT91C_AES_OPMOD_CBC
 (0x1 << 12)

1494 
	#AT91C_AES_OPMOD_OFB
 (0x2 << 12)

1495 
	#AT91C_AES_OPMOD_CFB
 (0x3 << 12)

1496 
	#AT91C_AES_OPMOD_CTR
 (0x4 << 12)

1497 
	#AT91C_AES_LOD
 (0x1 << 15)

1498 
	#AT91C_AES_CFBS
 (0x7 << 16)

1499 
	#AT91C_AES_CFBS_128_BIT
 (0x0 << 16)

1500 
	#AT91C_AES_CFBS_64_BIT
 (0x1 << 16)

1501 
	#AT91C_AES_CFBS_32_BIT
 (0x2 << 16)

1502 
	#AT91C_AES_CFBS_16_BIT
 (0x3 << 16)

1503 
	#AT91C_AES_CFBS_8_BIT
 (0x4 << 16)

1504 
	#AT91C_AES_CKEY
 (0xF << 20)

1505 
	#AT91C_AES_CTYPE
 (0x1F << 24)

1506 
	#AT91C_AES_CTYPE_TYPE1_EN
 (0x1 << 24)

1507 
	#AT91C_AES_CTYPE_TYPE2_EN
 (0x2 << 24)

1508 
	#AT91C_AES_CTYPE_TYPE3_EN
 (0x4 << 24)

1509 
	#AT91C_AES_CTYPE_TYPE4_EN
 (0x8 << 24)

1510 
	#AT91C_AES_CTYPE_TYPE5_EN
 (0x10 << 24)

1512 
	#AT91C_AES_DATRDY
 (0x1 << 0)

1513 
	#AT91C_AES_ENDRX
 (0x1 << 1)

1514 
	#AT91C_AES_ENDTX
 (0x1 << 2)

1515 
	#AT91C_AES_RXBUFF
 (0x1 << 3)

1516 
	#AT91C_AES_TXBUFE
 (0x1 << 4)

1517 
	#AT91C_AES_URAD
 (0x1 << 8)

1521 
	#AT91C_AES_URAT
 (0x7 << 12)

1522 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (0x0 << 12)

1523 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (0x1 << 12)

1524 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (0x2 << 12)

1525 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (0x3 << 12)

1526 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (0x4 << 12)

1527 
	#AT91C_AES_URAT_WO_REG_READ
 (0x5 << 12)

1528 

	)

1533 
	#TDES_CR
 ( 0)

1534 
	#TDES_MR
 ( 4)

1535 
	#TDES_IER
 (16)

1536 
	#TDES_IDR
 (20)

1537 
	#TDES_IMR
 (24)

1538 
	#TDES_ISR
 (28)

1539 
	#TDES_KEY1WxR
 (32)

1540 
	#TDES_KEY2WxR
 (40)

1541 
	#TDES_KEY3WxR
 (48)

1542 
	#TDES_IDATAxR
 (64)

1543 
	#TDES_ODATAxR
 (80)

1544 
	#TDES_IVxR
 (96)

1545 
	#TDES_VR
 (252)

1546 
	#TDES_RPR
 (256)

1547 
	#TDES_RCR
 (260)

1548 
	#TDES_TPR
 (264)

1549 
	#TDES_TCR
 (268)

1550 
	#TDES_RNPR
 (272)

1551 
	#TDES_RNCR
 (276)

1552 
	#TDES_TNPR
 (280)

1553 
	#TDES_TNCR
 (284)

1554 
	#TDES_PTCR
 (288)

1555 
	#TDES_PTSR
 (292)

1557 
	#AT91C_TDES_START
 (0x1 << 0)

1558 
	#AT91C_TDES_SWRST
 (0x1 << 8)

1560 
	#AT91C_TDES_CIPHER
 (0x1 << 0)

1561 
	#AT91C_TDES_TDESMOD
 (0x1 << 1)

1562 
	#AT91C_TDES_KEYMOD
 (0x1 << 4)

1563 
	#AT91C_TDES_SMOD
 (0x3 << 8)

1564 
	#AT91C_TDES_SMOD_MANUAL
 (0x0 << 8)

1565 
	#AT91C_TDES_SMOD_AUTO
 (0x1 << 8)

1566 
	#AT91C_TDES_SMOD_PDC
 (0x2 << 8)

1567 
	#AT91C_TDES_OPMOD
 (0x3 << 12)

1568 
	#AT91C_TDES_OPMOD_ECB
 (0x0 << 12)

1569 
	#AT91C_TDES_OPMOD_CBC
 (0x1 << 12)

1570 
	#AT91C_TDES_OPMOD_OFB
 (0x2 << 12)

1571 
	#AT91C_TDES_OPMOD_CFB
 (0x3 << 12)

1572 
	#AT91C_TDES_LOD
 (0x1 << 15)

1573 
	#AT91C_TDES_CFBS
 (0x3 << 16)

1574 
	#AT91C_TDES_CFBS_64_BIT
 (0x0 << 16)

1575 
	#AT91C_TDES_CFBS_32_BIT
 (0x1 << 16)

1576 
	#AT91C_TDES_CFBS_16_BIT
 (0x2 << 16)

1577 
	#AT91C_TDES_CFBS_8_BIT
 (0x3 << 16)

1579 
	#AT91C_TDES_DATRDY
 (0x1 << 0)

1580 
	#AT91C_TDES_ENDRX
 (0x1 << 1)

1581 
	#AT91C_TDES_ENDTX
 (0x1 << 2)

1582 
	#AT91C_TDES_RXBUFF
 (0x1 << 3)

1583 
	#AT91C_TDES_TXBUFE
 (0x1 << 4)

1584 
	#AT91C_TDES_URAD
 (0x1 << 8)

1588 
	#AT91C_TDES_URAT
 (0x3 << 12)

1589 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (0x0 << 12)

1590 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (0x1 << 12)

1591 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (0x2 << 12)

1592 
	#AT91C_TDES_URAT_WO_REG_READ
 (0x3 << 12)

1593 

	)

1599 
	#AT91C_AIC_IVR
 (0xFFFFF100)

1600 
	#AT91C_AIC_SMR
 (0xFFFFF000)

1601 
	#AT91C_AIC_FVR
 (0xFFFFF104)

1602 
	#AT91C_AIC_DCR
 (0xFFFFF138)

1603 
	#AT91C_AIC_EOICR
 (0xFFFFF130)

1604 
	#AT91C_AIC_SVR
 (0xFFFFF080)

1605 
	#AT91C_AIC_FFSR
 (0xFFFFF148)

1606 
	#AT91C_AIC_ICCR
 (0xFFFFF128)

1607 
	#AT91C_AIC_ISR
 (0xFFFFF108)

1608 
	#AT91C_AIC_IMR
 (0xFFFFF110)

1609 
	#AT91C_AIC_IPR
 (0xFFFFF10C)

1610 
	#AT91C_AIC_FFER
 (0xFFFFF140)

1611 
	#AT91C_AIC_IECR
 (0xFFFFF120)

1612 
	#AT91C_AIC_ISCR
 (0xFFFFF12C)

1613 
	#AT91C_AIC_FFDR
 (0xFFFFF144)

1614 
	#AT91C_AIC_CISR
 (0xFFFFF114)

1615 
	#AT91C_AIC_IDCR
 (0xFFFFF124)

1616 
	#AT91C_AIC_SPU
 (0xFFFFF134)

1618 
	#AT91C_DBGU_TCR
 (0xFFFFF30C)

1619 
	#AT91C_DBGU_RNPR
 (0xFFFFF310)

1620 
	#AT91C_DBGU_TNPR
 (0xFFFFF318)

1621 
	#AT91C_DBGU_TPR
 (0xFFFFF308)

1622 
	#AT91C_DBGU_RPR
 (0xFFFFF300)

1623 
	#AT91C_DBGU_RCR
 (0xFFFFF304)

1624 
	#AT91C_DBGU_RNCR
 (0xFFFFF314)

1625 
	#AT91C_DBGU_PTCR
 (0xFFFFF320)

1626 
	#AT91C_DBGU_PTSR
 (0xFFFFF324)

1627 
	#AT91C_DBGU_TNCR
 (0xFFFFF31C)

1629 
	#AT91C_DBGU_EXID
 (0xFFFFF244)

1630 
	#AT91C_DBGU_BRGR
 (0xFFFFF220)

1631 
	#AT91C_DBGU_IDR
 (0xFFFFF20C)

1632 
	#AT91C_DBGU_CSR
 (0xFFFFF214)

1633 
	#AT91C_DBGU_CIDR
 (0xFFFFF240)

1634 
	#AT91C_DBGU_MR
 (0xFFFFF204)

1635 
	#AT91C_DBGU_IMR
 (0xFFFFF210)

1636 
	#AT91C_DBGU_CR
 (0xFFFFF200)

1637 
	#AT91C_DBGU_FNTR
 (0xFFFFF248)

1638 
	#AT91C_DBGU_THR
 (0xFFFFF21C)

1639 
	#AT91C_DBGU_RHR
 (0xFFFFF218)

1640 
	#AT91C_DBGU_IER
 (0xFFFFF208)

1642 
	#AT91C_PIOA_ODR
 (0xFFFFF414)

1643 
	#AT91C_PIOA_SODR
 (0xFFFFF430)

1644 
	#AT91C_PIOA_ISR
 (0xFFFFF44C)

1645 
	#AT91C_PIOA_ABSR
 (0xFFFFF478)

1646 
	#AT91C_PIOA_IER
 (0xFFFFF440)

1647 
	#AT91C_PIOA_PPUDR
 (0xFFFFF460)

1648 
	#AT91C_PIOA_IMR
 (0xFFFFF448)

1649 
	#AT91C_PIOA_PER
 (0xFFFFF400)

1650 
	#AT91C_PIOA_IFDR
 (0xFFFFF424)

1651 
	#AT91C_PIOA_OWDR
 (0xFFFFF4A4)

1652 
	#AT91C_PIOA_MDSR
 (0xFFFFF458)

1653 
	#AT91C_PIOA_IDR
 (0xFFFFF444)

1654 
	#AT91C_PIOA_ODSR
 (0xFFFFF438)

1655 
	#AT91C_PIOA_PPUSR
 (0xFFFFF468)

1656 
	#AT91C_PIOA_OWSR
 (0xFFFFF4A8)

1657 
	#AT91C_PIOA_BSR
 (0xFFFFF474)

1658 
	#AT91C_PIOA_OWER
 (0xFFFFF4A0)

1659 
	#AT91C_PIOA_IFER
 (0xFFFFF420)

1660 
	#AT91C_PIOA_PDSR
 (0xFFFFF43C)

1661 
	#AT91C_PIOA_PPUER
 (0xFFFFF464)

1662 
	#AT91C_PIOA_OSR
 (0xFFFFF418)

1663 
	#AT91C_PIOA_ASR
 (0xFFFFF470)

1664 
	#AT91C_PIOA_MDDR
 (0xFFFFF454)

1665 
	#AT91C_PIOA_CODR
 (0xFFFFF434)

1666 
	#AT91C_PIOA_MDER
 (0xFFFFF450)

1667 
	#AT91C_PIOA_PDR
 (0xFFFFF404)

1668 
	#AT91C_PIOA_IFSR
 (0xFFFFF428)

1669 
	#AT91C_PIOA_OER
 (0xFFFFF410)

1670 
	#AT91C_PIOA_PSR
 (0xFFFFF408)

1672 
	#AT91C_PIOB_OWDR
 (0xFFFFF6A4)

1673 
	#AT91C_PIOB_MDER
 (0xFFFFF650)

1674 
	#AT91C_PIOB_PPUSR
 (0xFFFFF668)

1675 
	#AT91C_PIOB_IMR
 (0xFFFFF648)

1676 
	#AT91C_PIOB_ASR
 (0xFFFFF670)

1677 
	#AT91C_PIOB_PPUDR
 (0xFFFFF660)

1678 
	#AT91C_PIOB_PSR
 (0xFFFFF608)

1679 
	#AT91C_PIOB_IER
 (0xFFFFF640)

1680 
	#AT91C_PIOB_CODR
 (0xFFFFF634)

1681 
	#AT91C_PIOB_OWER
 (0xFFFFF6A0)

1682 
	#AT91C_PIOB_ABSR
 (0xFFFFF678)

1683 
	#AT91C_PIOB_IFDR
 (0xFFFFF624)

1684 
	#AT91C_PIOB_PDSR
 (0xFFFFF63C)

1685 
	#AT91C_PIOB_IDR
 (0xFFFFF644)

1686 
	#AT91C_PIOB_OWSR
 (0xFFFFF6A8)

1687 
	#AT91C_PIOB_PDR
 (0xFFFFF604)

1688 
	#AT91C_PIOB_ODR
 (0xFFFFF614)

1689 
	#AT91C_PIOB_IFSR
 (0xFFFFF628)

1690 
	#AT91C_PIOB_PPUER
 (0xFFFFF664)

1691 
	#AT91C_PIOB_SODR
 (0xFFFFF630)

1692 
	#AT91C_PIOB_ISR
 (0xFFFFF64C)

1693 
	#AT91C_PIOB_ODSR
 (0xFFFFF638)

1694 
	#AT91C_PIOB_OSR
 (0xFFFFF618)

1695 
	#AT91C_PIOB_MDSR
 (0xFFFFF658)

1696 
	#AT91C_PIOB_IFER
 (0xFFFFF620)

1697 
	#AT91C_PIOB_BSR
 (0xFFFFF674)

1698 
	#AT91C_PIOB_MDDR
 (0xFFFFF654)

1699 
	#AT91C_PIOB_OER
 (0xFFFFF610)

1700 
	#AT91C_PIOB_PER
 (0xFFFFF600)

1702 
	#AT91C_CKGR_MOR
 (0xFFFFFC20)

1703 
	#AT91C_CKGR_PLLR
 (0xFFFFFC2C)

1704 
	#AT91C_CKGR_MCFR
 (0xFFFFFC24)

1706 
	#AT91C_PMC_IDR
 (0xFFFFFC64)

1707 
	#AT91C_PMC_MOR
 (0xFFFFFC20)

1708 
	#AT91C_PMC_PLLR
 (0xFFFFFC2C)

1709 
	#AT91C_PMC_PCER
 (0xFFFFFC10)

1710 
	#AT91C_PMC_PCKR
 (0xFFFFFC40)

1711 
	#AT91C_PMC_MCKR
 (0xFFFFFC30)

1712 
	#AT91C_PMC_SCDR
 (0xFFFFFC04)

1713 
	#AT91C_PMC_PCDR
 (0xFFFFFC14)

1714 
	#AT91C_PMC_SCSR
 (0xFFFFFC08)

1715 
	#AT91C_PMC_PCSR
 (0xFFFFFC18)

1716 
	#AT91C_PMC_MCFR
 (0xFFFFFC24)

1717 
	#AT91C_PMC_SCER
 (0xFFFFFC00)

1718 
	#AT91C_PMC_IMR
 (0xFFFFFC6C)

1719 
	#AT91C_PMC_IER
 (0xFFFFFC60)

1720 
	#AT91C_PMC_SR
 (0xFFFFFC68)

1722 
	#AT91C_RSTC_RCR
 (0xFFFFFD00)

1723 
	#AT91C_RSTC_RMR
 (0xFFFFFD08)

1724 
	#AT91C_RSTC_RSR
 (0xFFFFFD04)

1726 
	#AT91C_RTTC_RTSR
 (0xFFFFFD2C)

1727 
	#AT91C_RTTC_RTMR
 (0xFFFFFD20)

1728 
	#AT91C_RTTC_RTVR
 (0xFFFFFD28)

1729 
	#AT91C_RTTC_RTAR
 (0xFFFFFD24)

1731 
	#AT91C_PITC_PIVR
 (0xFFFFFD38)

1732 
	#AT91C_PITC_PISR
 (0xFFFFFD34)

1733 
	#AT91C_PITC_PIIR
 (0xFFFFFD3C)

1734 
	#AT91C_PITC_PIMR
 (0xFFFFFD30)

1736 
	#AT91C_WDTC_WDCR
 (0xFFFFFD40)

1737 
	#AT91C_WDTC_WDSR
 (0xFFFFFD48)

1738 
	#AT91C_WDTC_WDMR
 (0xFFFFFD44)

1740 
	#AT91C_VREG_MR
 (0xFFFFFD60)

1742 
	#AT91C_MC_ASR
 (0xFFFFFF04)

1743 
	#AT91C_MC_RCR
 (0xFFFFFF00)

1744 
	#AT91C_MC_FCR
 (0xFFFFFF64)

1745 
	#AT91C_MC_AASR
 (0xFFFFFF08)

1746 
	#AT91C_MC_FSR
 (0xFFFFFF68)

1747 
	#AT91C_MC_FMR
 (0xFFFFFF60)

1749 
	#AT91C_SPI1_PTCR
 (0xFFFE4120)

1750 
	#AT91C_SPI1_RPR
 (0xFFFE4100)

1751 
	#AT91C_SPI1_TNCR
 (0xFFFE411C)

1752 
	#AT91C_SPI1_TPR
 (0xFFFE4108)

1753 
	#AT91C_SPI1_TNPR
 (0xFFFE4118)

1754 
	#AT91C_SPI1_TCR
 (0xFFFE410C)

1755 
	#AT91C_SPI1_RCR
 (0xFFFE4104)

1756 
	#AT91C_SPI1_RNPR
 (0xFFFE4110)

1757 
	#AT91C_SPI1_RNCR
 (0xFFFE4114)

1758 
	#AT91C_SPI1_PTSR
 (0xFFFE4124)

1760 
	#AT91C_SPI1_IMR
 (0xFFFE401C)

1761 
	#AT91C_SPI1_IER
 (0xFFFE4014)

1762 
	#AT91C_SPI1_MR
 (0xFFFE4004)

1763 
	#AT91C_SPI1_RDR
 (0xFFFE4008)

1764 
	#AT91C_SPI1_IDR
 (0xFFFE4018)

1765 
	#AT91C_SPI1_SR
 (0xFFFE4010)

1766 
	#AT91C_SPI1_TDR
 (0xFFFE400C)

1767 
	#AT91C_SPI1_CR
 (0xFFFE4000)

1768 
	#AT91C_SPI1_CSR
 (0xFFFE4030)

1770 
	#AT91C_SPI0_PTCR
 (0xFFFE0120)

1771 
	#AT91C_SPI0_TPR
 (0xFFFE0108)

1772 
	#AT91C_SPI0_TCR
 (0xFFFE010C)

1773 
	#AT91C_SPI0_RCR
 (0xFFFE0104)

1774 
	#AT91C_SPI0_PTSR
 (0xFFFE0124)

1775 
	#AT91C_SPI0_RNPR
 (0xFFFE0110)

1776 
	#AT91C_SPI0_RPR
 (0xFFFE0100)

1777 
	#AT91C_SPI0_TNCR
 (0xFFFE011C)

1778 
	#AT91C_SPI0_RNCR
 (0xFFFE0114)

1779 
	#AT91C_SPI0_TNPR
 (0xFFFE0118)

1781 
	#AT91C_SPI0_IER
 (0xFFFE0014)

1782 
	#AT91C_SPI0_SR
 (0xFFFE0010)

1783 
	#AT91C_SPI0_IDR
 (0xFFFE0018)

1784 
	#AT91C_SPI0_CR
 (0xFFFE0000)

1785 
	#AT91C_SPI0_MR
 (0xFFFE0004)

1786 
	#AT91C_SPI0_IMR
 (0xFFFE001C)

1787 
	#AT91C_SPI0_TDR
 (0xFFFE000C)

1788 
	#AT91C_SPI0_RDR
 (0xFFFE0008)

1789 
	#AT91C_SPI0_CSR
 (0xFFFE0030)

1791 
	#AT91C_US1_RNCR
 (0xFFFC4114)

1792 
	#AT91C_US1_PTCR
 (0xFFFC4120)

1793 
	#AT91C_US1_TCR
 (0xFFFC410C)

1794 
	#AT91C_US1_PTSR
 (0xFFFC4124)

1795 
	#AT91C_US1_TNPR
 (0xFFFC4118)

1796 
	#AT91C_US1_RCR
 (0xFFFC4104)

1797 
	#AT91C_US1_RNPR
 (0xFFFC4110)

1798 
	#AT91C_US1_RPR
 (0xFFFC4100)

1799 
	#AT91C_US1_TNCR
 (0xFFFC411C)

1800 
	#AT91C_US1_TPR
 (0xFFFC4108)

1802 
	#AT91C_US1_IF
 (0xFFFC404C)

1803 
	#AT91C_US1_NER
 (0xFFFC4044)

1804 
	#AT91C_US1_RTOR
 (0xFFFC4024)

1805 
	#AT91C_US1_CSR
 (0xFFFC4014)

1806 
	#AT91C_US1_IDR
 (0xFFFC400C)

1807 
	#AT91C_US1_IER
 (0xFFFC4008)

1808 
	#AT91C_US1_THR
 (0xFFFC401C)

1809 
	#AT91C_US1_TTGR
 (0xFFFC4028)

1810 
	#AT91C_US1_RHR
 (0xFFFC4018)

1811 
	#AT91C_US1_BRGR
 (0xFFFC4020)

1812 
	#AT91C_US1_IMR
 (0xFFFC4010)

1813 
	#AT91C_US1_FIDI
 (0xFFFC4040)

1814 
	#AT91C_US1_CR
 (0xFFFC4000)

1815 
	#AT91C_US1_MR
 (0xFFFC4004)

1817 
	#AT91C_US0_TNPR
 (0xFFFC0118)

1818 
	#AT91C_US0_RNPR
 (0xFFFC0110)

1819 
	#AT91C_US0_TCR
 (0xFFFC010C)

1820 
	#AT91C_US0_PTCR
 (0xFFFC0120)

1821 
	#AT91C_US0_PTSR
 (0xFFFC0124)

1822 
	#AT91C_US0_TNCR
 (0xFFFC011C)

1823 
	#AT91C_US0_TPR
 (0xFFFC0108)

1824 
	#AT91C_US0_RCR
 (0xFFFC0104)

1825 
	#AT91C_US0_RPR
 (0xFFFC0100)

1826 
	#AT91C_US0_RNCR
 (0xFFFC0114)

1828 
	#AT91C_US0_BRGR
 (0xFFFC0020)

1829 
	#AT91C_US0_NER
 (0xFFFC0044)

1830 
	#AT91C_US0_CR
 (0xFFFC0000)

1831 
	#AT91C_US0_IMR
 (0xFFFC0010)

1832 
	#AT91C_US0_FIDI
 (0xFFFC0040)

1833 
	#AT91C_US0_TTGR
 (0xFFFC0028)

1834 
	#AT91C_US0_MR
 (0xFFFC0004)

1835 
	#AT91C_US0_RTOR
 (0xFFFC0024)

1836 
	#AT91C_US0_CSR
 (0xFFFC0014)

1837 
	#AT91C_US0_RHR
 (0xFFFC0018)

1838 
	#AT91C_US0_IDR
 (0xFFFC000C)

1839 
	#AT91C_US0_THR
 (0xFFFC001C)

1840 
	#AT91C_US0_IF
 (0xFFFC004C)

1841 
	#AT91C_US0_IER
 (0xFFFC0008)

1843 
	#AT91C_SSC_TNCR
 (0xFFFD411C)

1844 
	#AT91C_SSC_RPR
 (0xFFFD4100)

1845 
	#AT91C_SSC_RNCR
 (0xFFFD4114)

1846 
	#AT91C_SSC_TPR
 (0xFFFD4108)

1847 
	#AT91C_SSC_PTCR
 (0xFFFD4120)

1848 
	#AT91C_SSC_TCR
 (0xFFFD410C)

1849 
	#AT91C_SSC_RCR
 (0xFFFD4104)

1850 
	#AT91C_SSC_RNPR
 (0xFFFD4110)

1851 
	#AT91C_SSC_TNPR
 (0xFFFD4118)

1852 
	#AT91C_SSC_PTSR
 (0xFFFD4124)

1854 
	#AT91C_SSC_RHR
 (0xFFFD4020)

1855 
	#AT91C_SSC_RSHR
 (0xFFFD4030)

1856 
	#AT91C_SSC_TFMR
 (0xFFFD401C)

1857 
	#AT91C_SSC_IDR
 (0xFFFD4048)

1858 
	#AT91C_SSC_THR
 (0xFFFD4024)

1859 
	#AT91C_SSC_RCMR
 (0xFFFD4010)

1860 
	#AT91C_SSC_IER
 (0xFFFD4044)

1861 
	#AT91C_SSC_TSHR
 (0xFFFD4034)

1862 
	#AT91C_SSC_SR
 (0xFFFD4040)

1863 
	#AT91C_SSC_CMR
 (0xFFFD4004)

1864 
	#AT91C_SSC_TCMR
 (0xFFFD4018)

1865 
	#AT91C_SSC_CR
 (0xFFFD4000)

1866 
	#AT91C_SSC_IMR
 (0xFFFD404C)

1867 
	#AT91C_SSC_RFMR
 (0xFFFD4014)

1869 
	#AT91C_TWI_IER
 (0xFFFB8024)

1870 
	#AT91C_TWI_CR
 (0xFFFB8000)

1871 
	#AT91C_TWI_SR
 (0xFFFB8020)

1872 
	#AT91C_TWI_IMR
 (0xFFFB802C)

1873 
	#AT91C_TWI_THR
 (0xFFFB8034)

1874 
	#AT91C_TWI_IDR
 (0xFFFB8028)

1875 
	#AT91C_TWI_IADR
 (0xFFFB800C)

1876 
	#AT91C_TWI_MMR
 (0xFFFB8004)

1877 
	#AT91C_TWI_CWGR
 (0xFFFB8010)

1878 
	#AT91C_TWI_RHR
 (0xFFFB8030)

1880 
	#AT91C_PWMC_CH3_CUPDR
 (0xFFFCC270)

1881 
	#AT91C_PWMC_CH3_Re£rved
 (0xFFFCC274)

1882 
	#AT91C_PWMC_CH3_CPRDR
 (0xFFFCC268)

1883 
	#AT91C_PWMC_CH3_CDTYR
 (0xFFFCC264)

1884 
	#AT91C_PWMC_CH3_CCNTR
 (0xFFFCC26C)

1885 
	#AT91C_PWMC_CH3_CMR
 (0xFFFCC260)

1887 
	#AT91C_PWMC_CH2_Re£rved
 (0xFFFCC254)

1888 
	#AT91C_PWMC_CH2_CMR
 (0xFFFCC240)

1889 
	#AT91C_PWMC_CH2_CCNTR
 (0xFFFCC24C)

1890 
	#AT91C_PWMC_CH2_CPRDR
 (0xFFFCC248)

1891 
	#AT91C_PWMC_CH2_CUPDR
 (0xFFFCC250)

1892 
	#AT91C_PWMC_CH2_CDTYR
 (0xFFFCC244)

1894 
	#AT91C_PWMC_CH1_Re£rved
 (0xFFFCC234)

1895 
	#AT91C_PWMC_CH1_CUPDR
 (0xFFFCC230)

1896 
	#AT91C_PWMC_CH1_CPRDR
 (0xFFFCC228)

1897 
	#AT91C_PWMC_CH1_CCNTR
 (0xFFFCC22C)

1898 
	#AT91C_PWMC_CH1_CDTYR
 (0xFFFCC224)

1899 
	#AT91C_PWMC_CH1_CMR
 (0xFFFCC220)

1901 
	#AT91C_PWMC_CH0_Re£rved
 (0xFFFCC214)

1902 
	#AT91C_PWMC_CH0_CPRDR
 (0xFFFCC208)

1903 
	#AT91C_PWMC_CH0_CDTYR
 (0xFFFCC204)

1904 
	#AT91C_PWMC_CH0_CMR
 (0xFFFCC200)

1905 
	#AT91C_PWMC_CH0_CUPDR
 (0xFFFCC210)

1906 
	#AT91C_PWMC_CH0_CCNTR
 (0xFFFCC20C)

1908 
	#AT91C_PWMC_IDR
 (0xFFFCC014)

1909 
	#AT91C_PWMC_DIS
 (0xFFFCC008)

1910 
	#AT91C_PWMC_IER
 (0xFFFCC010)

1911 
	#AT91C_PWMC_VR
 (0xFFFCC0FC)

1912 
	#AT91C_PWMC_ISR
 (0xFFFCC01C)

1913 
	#AT91C_PWMC_SR
 (0xFFFCC00C)

1914 
	#AT91C_PWMC_IMR
 (0xFFFCC018)

1915 
	#AT91C_PWMC_MR
 (0xFFFCC000)

1916 
	#AT91C_PWMC_ENA
 (0xFFFCC004)

1918 
	#AT91C_UDP_IMR
 (0xFFFB0018)

1919 
	#AT91C_UDP_FADDR
 (0xFFFB0008)

1920 
	#AT91C_UDP_NUM
 (0xFFFB0000)

1921 
	#AT91C_UDP_FDR
 (0xFFFB0050)

1922 
	#AT91C_UDP_ISR
 (0xFFFB001C)

1923 
	#AT91C_UDP_CSR
 (0xFFFB0030)

1924 
	#AT91C_UDP_IDR
 (0xFFFB0014)

1925 
	#AT91C_UDP_ICR
 (0xFFFB0020)

1926 
	#AT91C_UDP_RSTEP
 (0xFFFB0028)

1927 
	#AT91C_UDP_TXVC
 (0xFFFB0074)

1928 
	#AT91C_UDP_GLBSTATE
 (0xFFFB0004)

1929 
	#AT91C_UDP_IER
 (0xFFFB0010)

1931 
	#AT91C_TC0_SR
 (0xFFFA0020)

1932 
	#AT91C_TC0_RC
 (0xFFFA001C)

1933 
	#AT91C_TC0_RB
 (0xFFFA0018)

1934 
	#AT91C_TC0_CCR
 (0xFFFA0000)

1935 
	#AT91C_TC0_CMR
 (0xFFFA0004)

1936 
	#AT91C_TC0_IER
 (0xFFFA0024)

1937 
	#AT91C_TC0_RA
 (0xFFFA0014)

1938 
	#AT91C_TC0_IDR
 (0xFFFA0028)

1939 
	#AT91C_TC0_CV
 (0xFFFA0010)

1940 
	#AT91C_TC0_IMR
 (0xFFFA002C)

1942 
	#AT91C_TC1_RB
 (0xFFFA0058)

1943 
	#AT91C_TC1_CCR
 (0xFFFA0040)

1944 
	#AT91C_TC1_IER
 (0xFFFA0064)

1945 
	#AT91C_TC1_IDR
 (0xFFFA0068)

1946 
	#AT91C_TC1_SR
 (0xFFFA0060)

1947 
	#AT91C_TC1_CMR
 (0xFFFA0044)

1948 
	#AT91C_TC1_RA
 (0xFFFA0054)

1949 
	#AT91C_TC1_RC
 (0xFFFA005C)

1950 
	#AT91C_TC1_IMR
 (0xFFFA006C)

1951 
	#AT91C_TC1_CV
 (0xFFFA0050)

1953 
	#AT91C_TC2_CMR
 (0xFFFA0084)

1954 
	#AT91C_TC2_CCR
 (0xFFFA0080)

1955 
	#AT91C_TC2_CV
 (0xFFFA0090)

1956 
	#AT91C_TC2_RA
 (0xFFFA0094)

1957 
	#AT91C_TC2_RB
 (0xFFFA0098)

1958 
	#AT91C_TC2_IDR
 (0xFFFA00A8)

1959 
	#AT91C_TC2_IMR
 (0xFFFA00AC)

1960 
	#AT91C_TC2_RC
 (0xFFFA009C)

1961 
	#AT91C_TC2_IER
 (0xFFFA00A4)

1962 
	#AT91C_TC2_SR
 (0xFFFA00A0)

1964 
	#AT91C_TCB_BMR
 (0xFFFA00C4)

1965 
	#AT91C_TCB_BCR
 (0xFFFA00C0)

1967 
	#AT91C_CAN_MB0_MDL
 (0xFFFD0214)

1968 
	#AT91C_CAN_MB0_MAM
 (0xFFFD0204)

1969 
	#AT91C_CAN_MB0_MCR
 (0xFFFD021C)

1970 
	#AT91C_CAN_MB0_MID
 (0xFFFD0208)

1971 
	#AT91C_CAN_MB0_MSR
 (0xFFFD0210)

1972 
	#AT91C_CAN_MB0_MFID
 (0xFFFD020C)

1973 
	#AT91C_CAN_MB0_MDH
 (0xFFFD0218)

1974 
	#AT91C_CAN_MB0_MMR
 (0xFFFD0200)

1976 
	#AT91C_CAN_MB1_MDL
 (0xFFFD0234)

1977 
	#AT91C_CAN_MB1_MID
 (0xFFFD0228)

1978 
	#AT91C_CAN_MB1_MMR
 (0xFFFD0220)

1979 
	#AT91C_CAN_MB1_MSR
 (0xFFFD0230)

1980 
	#AT91C_CAN_MB1_MAM
 (0xFFFD0224)

1981 
	#AT91C_CAN_MB1_MDH
 (0xFFFD0238)

1982 
	#AT91C_CAN_MB1_MCR
 (0xFFFD023C)

1983 
	#AT91C_CAN_MB1_MFID
 (0xFFFD022C)

1985 
	#AT91C_CAN_MB2_MCR
 (0xFFFD025C)

1986 
	#AT91C_CAN_MB2_MDH
 (0xFFFD0258)

1987 
	#AT91C_CAN_MB2_MID
 (0xFFFD0248)

1988 
	#AT91C_CAN_MB2_MDL
 (0xFFFD0254)

1989 
	#AT91C_CAN_MB2_MMR
 (0xFFFD0240)

1990 
	#AT91C_CAN_MB2_MAM
 (0xFFFD0244)

1991 
	#AT91C_CAN_MB2_MFID
 (0xFFFD024C)

1992 
	#AT91C_CAN_MB2_MSR
 (0xFFFD0250)

1994 
	#AT91C_CAN_MB3_MFID
 (0xFFFD026C)

1995 
	#AT91C_CAN_MB3_MAM
 (0xFFFD0264)

1996 
	#AT91C_CAN_MB3_MID
 (0xFFFD0268)

1997 
	#AT91C_CAN_MB3_MCR
 (0xFFFD027C)

1998 
	#AT91C_CAN_MB3_MMR
 (0xFFFD0260)

1999 
	#AT91C_CAN_MB3_MSR
 (0xFFFD0270)

2000 
	#AT91C_CAN_MB3_MDL
 (0xFFFD0274)

2001 
	#AT91C_CAN_MB3_MDH
 (0xFFFD0278)

2003 
	#AT91C_CAN_MB4_MID
 (0xFFFD0288)

2004 
	#AT91C_CAN_MB4_MMR
 (0xFFFD0280)

2005 
	#AT91C_CAN_MB4_MDH
 (0xFFFD0298)

2006 
	#AT91C_CAN_MB4_MFID
 (0xFFFD028C)

2007 
	#AT91C_CAN_MB4_MSR
 (0xFFFD0290)

2008 
	#AT91C_CAN_MB4_MCR
 (0xFFFD029C)

2009 
	#AT91C_CAN_MB4_MDL
 (0xFFFD0294)

2010 
	#AT91C_CAN_MB4_MAM
 (0xFFFD0284)

2012 
	#AT91C_CAN_MB5_MSR
 (0xFFFD02B0)

2013 
	#AT91C_CAN_MB5_MCR
 (0xFFFD02BC)

2014 
	#AT91C_CAN_MB5_MFID
 (0xFFFD02AC)

2015 
	#AT91C_CAN_MB5_MDH
 (0xFFFD02B8)

2016 
	#AT91C_CAN_MB5_MID
 (0xFFFD02A8)

2017 
	#AT91C_CAN_MB5_MMR
 (0xFFFD02A0)

2018 
	#AT91C_CAN_MB5_MDL
 (0xFFFD02B4)

2019 
	#AT91C_CAN_MB5_MAM
 (0xFFFD02A4)

2021 
	#AT91C_CAN_MB6_MFID
 (0xFFFD02CC)

2022 
	#AT91C_CAN_MB6_MID
 (0xFFFD02C8)

2023 
	#AT91C_CAN_MB6_MAM
 (0xFFFD02C4)

2024 
	#AT91C_CAN_MB6_MSR
 (0xFFFD02D0)

2025 
	#AT91C_CAN_MB6_MDL
 (0xFFFD02D4)

2026 
	#AT91C_CAN_MB6_MCR
 (0xFFFD02DC)

2027 
	#AT91C_CAN_MB6_MDH
 (0xFFFD02D8)

2028 
	#AT91C_CAN_MB6_MMR
 (0xFFFD02C0)

2030 
	#AT91C_CAN_MB7_MCR
 (0xFFFD02FC)

2031 
	#AT91C_CAN_MB7_MDH
 (0xFFFD02F8)

2032 
	#AT91C_CAN_MB7_MFID
 (0xFFFD02EC)

2033 
	#AT91C_CAN_MB7_MDL
 (0xFFFD02F4)

2034 
	#AT91C_CAN_MB7_MID
 (0xFFFD02E8)

2035 
	#AT91C_CAN_MB7_MMR
 (0xFFFD02E0)

2036 
	#AT91C_CAN_MB7_MAM
 (0xFFFD02E4)

2037 
	#AT91C_CAN_MB7_MSR
 (0xFFFD02F0)

2039 
	#AT91C_CAN_TCR
 (0xFFFD0024)

2040 
	#AT91C_CAN_IMR
 (0xFFFD000C)

2041 
	#AT91C_CAN_IER
 (0xFFFD0004)

2042 
	#AT91C_CAN_ECR
 (0xFFFD0020)

2043 
	#AT91C_CAN_TIMESTP
 (0xFFFD001C)

2044 
	#AT91C_CAN_MR
 (0xFFFD0000)

2045 
	#AT91C_CAN_IDR
 (0xFFFD0008)

2046 
	#AT91C_CAN_ACR
 (0xFFFD0028)

2047 
	#AT91C_CAN_TIM
 (0xFFFD0018)

2048 
	#AT91C_CAN_SR
 (0xFFFD0010)

2049 
	#AT91C_CAN_BR
 (0xFFFD0014)

2050 
	#AT91C_CAN_VR
 (0xFFFD00FC)

2052 
	#AT91C_EMAC_ISR
 (0xFFFDC024)

2053 
	#AT91C_EMAC_SA4H
 (0xFFFDC0B4)

2054 
	#AT91C_EMAC_SA1L
 (0xFFFDC098)

2055 
	#AT91C_EMAC_ELE
 (0xFFFDC078)

2056 
	#AT91C_EMAC_LCOL
 (0xFFFDC05C)

2057 
	#AT91C_EMAC_RLE
 (0xFFFDC088)

2058 
	#AT91C_EMAC_WOL
 (0xFFFDC0C4)

2059 
	#AT91C_EMAC_DTF
 (0xFFFDC058)

2060 
	#AT91C_EMAC_TUND
 (0xFFFDC064)

2061 
	#AT91C_EMAC_NCR
 (0xFFFDC000)

2062 
	#AT91C_EMAC_SA4L
 (0xFFFDC0B0)

2063 
	#AT91C_EMAC_RSR
 (0xFFFDC020)

2064 
	#AT91C_EMAC_SA3L
 (0xFFFDC0A8)

2065 
	#AT91C_EMAC_TSR
 (0xFFFDC014)

2066 
	#AT91C_EMAC_IDR
 (0xFFFDC02C)

2067 
	#AT91C_EMAC_RSE
 (0xFFFDC074)

2068 
	#AT91C_EMAC_ECOL
 (0xFFFDC060)

2069 
	#AT91C_EMAC_TID
 (0xFFFDC0B8)

2070 
	#AT91C_EMAC_HRB
 (0xFFFDC090)

2071 
	#AT91C_EMAC_TBQP
 (0xFFFDC01C)

2072 
	#AT91C_EMAC_USRIO
 (0xFFFDC0C0)

2073 
	#AT91C_EMAC_PTR
 (0xFFFDC038)

2074 
	#AT91C_EMAC_SA2H
 (0xFFFDC0A4)

2075 
	#AT91C_EMAC_ROV
 (0xFFFDC070)

2076 
	#AT91C_EMAC_ALE
 (0xFFFDC054)

2077 
	#AT91C_EMAC_RJA
 (0xFFFDC07C)

2078 
	#AT91C_EMAC_RBQP
 (0xFFFDC018)

2079 
	#AT91C_EMAC_TPF
 (0xFFFDC08C)

2080 
	#AT91C_EMAC_NCFGR
 (0xFFFDC004)

2081 
	#AT91C_EMAC_HRT
 (0xFFFDC094)

2082 
	#AT91C_EMAC_USF
 (0xFFFDC080)

2083 
	#AT91C_EMAC_FCSE
 (0xFFFDC050)

2084 
	#AT91C_EMAC_TPQ
 (0xFFFDC0BC)

2085 
	#AT91C_EMAC_MAN
 (0xFFFDC034)

2086 
	#AT91C_EMAC_FTO
 (0xFFFDC040)

2087 
	#AT91C_EMAC_REV
 (0xFFFDC0FC)

2088 
	#AT91C_EMAC_IMR
 (0xFFFDC030)

2089 
	#AT91C_EMAC_SCF
 (0xFFFDC044)

2090 
	#AT91C_EMAC_PFR
 (0xFFFDC03C)

2091 
	#AT91C_EMAC_MCF
 (0xFFFDC048)

2092 
	#AT91C_EMAC_NSR
 (0xFFFDC008)

2093 
	#AT91C_EMAC_SA2L
 (0xFFFDC0A0)

2094 
	#AT91C_EMAC_FRO
 (0xFFFDC04C)

2095 
	#AT91C_EMAC_IER
 (0xFFFDC028)

2096 
	#AT91C_EMAC_SA1H
 (0xFFFDC09C)

2097 
	#AT91C_EMAC_CSE
 (0xFFFDC068)

2098 
	#AT91C_EMAC_SA3H
 (0xFFFDC0AC)

2099 
	#AT91C_EMAC_RRE
 (0xFFFDC06C)

2100 
	#AT91C_EMAC_STE
 (0xFFFDC084)

2102 
	#AT91C_ADC_PTSR
 (0xFFFD8124)

2103 
	#AT91C_ADC_PTCR
 (0xFFFD8120)

2104 
	#AT91C_ADC_TNPR
 (0xFFFD8118)

2105 
	#AT91C_ADC_TNCR
 (0xFFFD811C)

2106 
	#AT91C_ADC_RNPR
 (0xFFFD8110)

2107 
	#AT91C_ADC_RNCR
 (0xFFFD8114)

2108 
	#AT91C_ADC_RPR
 (0xFFFD8100)

2109 
	#AT91C_ADC_TCR
 (0xFFFD810C)

2110 
	#AT91C_ADC_TPR
 (0xFFFD8108)

2111 
	#AT91C_ADC_RCR
 (0xFFFD8104)

2113 
	#AT91C_ADC_CDR2
 (0xFFFD8038)

2114 
	#AT91C_ADC_CDR3
 (0xFFFD803C)

2115 
	#AT91C_ADC_CDR0
 (0xFFFD8030)

2116 
	#AT91C_ADC_CDR5
 (0xFFFD8044)

2117 
	#AT91C_ADC_CHDR
 (0xFFFD8014)

2118 
	#AT91C_ADC_SR
 (0xFFFD801C)

2119 
	#AT91C_ADC_CDR4
 (0xFFFD8040)

2120 
	#AT91C_ADC_CDR1
 (0xFFFD8034)

2121 
	#AT91C_ADC_LCDR
 (0xFFFD8020)

2122 
	#AT91C_ADC_IDR
 (0xFFFD8028)

2123 
	#AT91C_ADC_CR
 (0xFFFD8000)

2124 
	#AT91C_ADC_CDR7
 (0xFFFD804C)

2125 
	#AT91C_ADC_CDR6
 (0xFFFD8048)

2126 
	#AT91C_ADC_IER
 (0xFFFD8024)

2127 
	#AT91C_ADC_CHER
 (0xFFFD8010)

2128 
	#AT91C_ADC_CHSR
 (0xFFFD8018)

2129 
	#AT91C_ADC_MR
 (0xFFFD8004)

2130 
	#AT91C_ADC_IMR
 (0xFFFD802C)

2132 
	#AT91C_AES_TPR
 (0xFFFA4108)

2133 
	#AT91C_AES_PTCR
 (0xFFFA4120)

2134 
	#AT91C_AES_RNPR
 (0xFFFA4110)

2135 
	#AT91C_AES_TNCR
 (0xFFFA411C)

2136 
	#AT91C_AES_TCR
 (0xFFFA410C)

2137 
	#AT91C_AES_RCR
 (0xFFFA4104)

2138 
	#AT91C_AES_RNCR
 (0xFFFA4114)

2139 
	#AT91C_AES_TNPR
 (0xFFFA4118)

2140 
	#AT91C_AES_RPR
 (0xFFFA4100)

2141 
	#AT91C_AES_PTSR
 (0xFFFA4124)

2143 
	#AT91C_AES_IVxR
 (0xFFFA4060)

2144 
	#AT91C_AES_MR
 (0xFFFA4004)

2145 
	#AT91C_AES_VR
 (0xFFFA40FC)

2146 
	#AT91C_AES_ODATAxR
 (0xFFFA4050)

2147 
	#AT91C_AES_IDATAxR
 (0xFFFA4040)

2148 
	#AT91C_AES_CR
 (0xFFFA4000)

2149 
	#AT91C_AES_IDR
 (0xFFFA4014)

2150 
	#AT91C_AES_IMR
 (0xFFFA4018)

2151 
	#AT91C_AES_IER
 (0xFFFA4010)

2152 
	#AT91C_AES_KEYWxR
 (0xFFFA4020)

2153 
	#AT91C_AES_ISR
 (0xFFFA401C)

2155 
	#AT91C_TDES_RNCR
 (0xFFFA8114)

2156 
	#AT91C_TDES_TCR
 (0xFFFA810C)

2157 
	#AT91C_TDES_RCR
 (0xFFFA8104)

2158 
	#AT91C_TDES_TNPR
 (0xFFFA8118)

2159 
	#AT91C_TDES_RNPR
 (0xFFFA8110)

2160 
	#AT91C_TDES_RPR
 (0xFFFA8100)

2161 
	#AT91C_TDES_TNCR
 (0xFFFA811C)

2162 
	#AT91C_TDES_TPR
 (0xFFFA8108)

2163 
	#AT91C_TDES_PTSR
 (0xFFFA8124)

2164 
	#AT91C_TDES_PTCR
 (0xFFFA8120)

2166 
	#AT91C_TDES_KEY2WxR
 (0xFFFA8028)

2167 
	#AT91C_TDES_KEY3WxR
 (0xFFFA8030)

2168 
	#AT91C_TDES_IDR
 (0xFFFA8014)

2169 
	#AT91C_TDES_VR
 (0xFFFA80FC)

2170 
	#AT91C_TDES_IVxR
 (0xFFFA8060)

2171 
	#AT91C_TDES_ODATAxR
 (0xFFFA8050)

2172 
	#AT91C_TDES_IMR
 (0xFFFA8018)

2173 
	#AT91C_TDES_MR
 (0xFFFA8004)

2174 
	#AT91C_TDES_CR
 (0xFFFA8000)

2175 
	#AT91C_TDES_IER
 (0xFFFA8010)

2176 
	#AT91C_TDES_ISR
 (0xFFFA801C)

2177 
	#AT91C_TDES_IDATAxR
 (0xFFFA8040)

2178 
	#AT91C_TDES_KEY1WxR
 (0xFFFA8020)

2179 

	)

2183 
	#AT91C_PIO_PA0
 (1 << 0)

2184 
	#AT91C_PA0_RXD0
 (
AT91C_PIO_PA0
)

2185 
	#AT91C_PIO_PA1
 (1 << 1)

2186 
	#AT91C_PA1_TXD0
 (
AT91C_PIO_PA1
)

2187 
	#AT91C_PIO_PA10
 (1 << 10)

2188 
	#AT91C_PA10_TWD
 (
AT91C_PIO_PA10
)

2189 
	#AT91C_PIO_PA11
 (1 << 11)

2190 
	#AT91C_PA11_TWCK
 (
AT91C_PIO_PA11
)

2191 
	#AT91C_PIO_PA12
 (1 << 12)

2192 
	#AT91C_PA12_NPCS00
 (
AT91C_PIO_PA12
)

2193 
	#AT91C_PIO_PA13
 (1 << 13)

2194 
	#AT91C_PA13_NPCS01
 (
AT91C_PIO_PA13
)

2195 
	#AT91C_PA13_PCK1
 (
AT91C_PIO_PA13
)

2196 
	#AT91C_PIO_PA14
 (1 << 14)

2197 
	#AT91C_PA14_NPCS02
 (
AT91C_PIO_PA14
)

2198 
	#AT91C_PA14_IRQ1
 (
AT91C_PIO_PA14
)

2199 
	#AT91C_PIO_PA15
 (1 << 15)

2200 
	#AT91C_PA15_NPCS03
 (
AT91C_PIO_PA15
)

2201 
	#AT91C_PA15_TCLK2
 (
AT91C_PIO_PA15
)

2202 
	#AT91C_PIO_PA16
 (1 << 16)

2203 
	#AT91C_PA16_MISO0
 (
AT91C_PIO_PA16
)

2204 
	#AT91C_PIO_PA17
 (1 << 17)

2205 
	#AT91C_PA17_MOSI0
 (
AT91C_PIO_PA17
)

2206 
	#AT91C_PIO_PA18
 (1 << 18)

2207 
	#AT91C_PA18_SPCK0
 (
AT91C_PIO_PA18
)

2208 
	#AT91C_PIO_PA19
 (1 << 19)

2209 
	#AT91C_PA19_CANRX
 (
AT91C_PIO_PA19
)

2210 
	#AT91C_PIO_PA2
 (1 << 2)

2211 
	#AT91C_PA2_SCK0
 (
AT91C_PIO_PA2
)

2212 
	#AT91C_PA2_NPCS11
 (
AT91C_PIO_PA2
)

2213 
	#AT91C_PIO_PA20
 (1 << 20)

2214 
	#AT91C_PA20_CANTX
 (
AT91C_PIO_PA20
)

2215 
	#AT91C_PIO_PA21
 (1 << 21)

2216 
	#AT91C_PA21_TF
 (
AT91C_PIO_PA21
)

2217 
	#AT91C_PA21_NPCS10
 (
AT91C_PIO_PA21
)

2218 
	#AT91C_PIO_PA22
 (1 << 22)

2219 
	#AT91C_PA22_TK
 (
AT91C_PIO_PA22
)

2220 
	#AT91C_PA22_SPCK1
 (
AT91C_PIO_PA22
)

2221 
	#AT91C_PIO_PA23
 (1 << 23)

2222 
	#AT91C_PA23_TD
 (
AT91C_PIO_PA23
)

2223 
	#AT91C_PA23_MOSI1
 (
AT91C_PIO_PA23
)

2224 
	#AT91C_PIO_PA24
 (1 << 24)

2225 
	#AT91C_PA24_RD
 (
AT91C_PIO_PA24
)

2226 
	#AT91C_PA24_MISO1
 (
AT91C_PIO_PA24
)

2227 
	#AT91C_PIO_PA25
 (1 << 25)

2228 
	#AT91C_PA25_RK
 (
AT91C_PIO_PA25
)

2229 
	#AT91C_PA25_NPCS11
 (
AT91C_PIO_PA25
)

2230 
	#AT91C_PIO_PA26
 (1 << 26)

2231 
	#AT91C_PA26_RF
 (
AT91C_PIO_PA26
)

2232 
	#AT91C_PA26_NPCS12
 (
AT91C_PIO_PA26
)

2233 
	#AT91C_PIO_PA27
 (1 << 27)

2234 
	#AT91C_PA27_DRXD
 (
AT91C_PIO_PA27
)

2235 
	#AT91C_PA27_PCK3
 (
AT91C_PIO_PA27
)

2236 
	#AT91C_PIO_PA28
 (1 << 28)

2237 
	#AT91C_PA28_DTXD
 (
AT91C_PIO_PA28
)

2238 
	#AT91C_PIO_PA29
 (1 << 29)

2239 
	#AT91C_PA29_FIQ
 (
AT91C_PIO_PA29
)

2240 
	#AT91C_PA29_NPCS13
 (
AT91C_PIO_PA29
)

2241 
	#AT91C_PIO_PA3
 (1 << 3)

2242 
	#AT91C_PA3_RTS0
 (
AT91C_PIO_PA3
)

2243 
	#AT91C_PA3_NPCS12
 (
AT91C_PIO_PA3
)

2244 
	#AT91C_PIO_PA30
 (1 << 30)

2245 
	#AT91C_PA30_IRQ0
 (
AT91C_PIO_PA30
)

2246 
	#AT91C_PA30_PCK2
 (
AT91C_PIO_PA30
)

2247 
	#AT91C_PIO_PA4
 (1 << 4)

2248 
	#AT91C_PA4_CTS0
 (
AT91C_PIO_PA4
)

2249 
	#AT91C_PA4_NPCS13
 (
AT91C_PIO_PA4
)

2250 
	#AT91C_PIO_PA5
 (1 << 5)

2251 
	#AT91C_PA5_RXD1
 (
AT91C_PIO_PA5
)

2252 
	#AT91C_PIO_PA6
 (1 << 6)

2253 
	#AT91C_PA6_TXD1
 (
AT91C_PIO_PA6
)

2254 
	#AT91C_PIO_PA7
 (1 << 7)

2255 
	#AT91C_PA7_SCK1
 (
AT91C_PIO_PA7
)

2256 
	#AT91C_PA7_NPCS01
 (
AT91C_PIO_PA7
)

2257 
	#AT91C_PIO_PA8
 (1 << 8)

2258 
	#AT91C_PA8_RTS1
 (
AT91C_PIO_PA8
)

2259 
	#AT91C_PA8_NPCS02
 (
AT91C_PIO_PA8
)

2260 
	#AT91C_PIO_PA9
 (1 << 9)

2261 
	#AT91C_PA9_CTS1
 (
AT91C_PIO_PA9
)

2262 
	#AT91C_PA9_NPCS03
 (
AT91C_PIO_PA9
)

2263 
	#AT91C_PIO_PB0
 (1 << 0)

2264 
	#AT91C_PB0_ETXCK_EREFCK
 (
AT91C_PIO_PB0
)

2265 
	#AT91C_PB0_PCK0
 (
AT91C_PIO_PB0
)

2266 
	#AT91C_PIO_PB1
 (1 << 1)

2267 
	#AT91C_PB1_ETXEN
 (
AT91C_PIO_PB1
)

2268 
	#AT91C_PIO_PB10
 (1 << 10)

2269 
	#AT91C_PB10_ETX2
 (
AT91C_PIO_PB10
)

2270 
	#AT91C_PB10_NPCS11
 (
AT91C_PIO_PB10
)

2271 
	#AT91C_PIO_PB11
 (1 << 11)

2272 
	#AT91C_PB11_ETX3
 (
AT91C_PIO_PB11
)

2273 
	#AT91C_PB11_NPCS12
 (
AT91C_PIO_PB11
)

2274 
	#AT91C_PIO_PB12
 (1 << 12)

2275 
	#AT91C_PB12_ETXER
 (
AT91C_PIO_PB12
)

2276 
	#AT91C_PB12_TCLK0
 (
AT91C_PIO_PB12
)

2277 
	#AT91C_PIO_PB13
 (1 << 13)

2278 
	#AT91C_PB13_ERX2
 (
AT91C_PIO_PB13
)

2279 
	#AT91C_PB13_NPCS01
 (
AT91C_PIO_PB13
)

2280 
	#AT91C_PIO_PB14
 (1 << 14)

2281 
	#AT91C_PB14_ERX3
 (
AT91C_PIO_PB14
)

2282 
	#AT91C_PB14_NPCS02
 (
AT91C_PIO_PB14
)

2283 
	#AT91C_PIO_PB15
 (1 << 15)

2284 
	#AT91C_PB15_ERXDV
 (
AT91C_PIO_PB15
)

2285 
	#AT91C_PIO_PB16
 (1 << 16)

2286 
	#AT91C_PB16_ECOL
 (
AT91C_PIO_PB16
)

2287 
	#AT91C_PB16_NPCS13
 (
AT91C_PIO_PB16
)

2288 
	#AT91C_PIO_PB17
 (1 << 17)

2289 
	#AT91C_PB17_ERXCK
 (
AT91C_PIO_PB17
)

2290 
	#AT91C_PB17_NPCS03
 (
AT91C_PIO_PB17
)

2291 
	#AT91C_PIO_PB18
 (1 << 18)

2292 
	#AT91C_PB18_EF100
 (
AT91C_PIO_PB18
)

2293 
	#AT91C_PB18_ADTRG
 (
AT91C_PIO_PB18
)

2294 
	#AT91C_PIO_PB19
 (1 << 19)

2295 
	#AT91C_PB19_PWM0
 (
AT91C_PIO_PB19
)

2296 
	#AT91C_PB19_TCLK1
 (
AT91C_PIO_PB19
)

2297 
	#AT91C_PIO_PB2
 (1 << 2)

2298 
	#AT91C_PB2_ETX0
 (
AT91C_PIO_PB2
)

2299 
	#AT91C_PIO_PB20
 (1 << 20)

2300 
	#AT91C_PB20_PWM1
 (
AT91C_PIO_PB20
)

2301 
	#AT91C_PB20_PCK0
 (
AT91C_PIO_PB20
)

2302 
	#AT91C_PIO_PB21
 (1 << 21)

2303 
	#AT91C_PB21_PWM2
 (
AT91C_PIO_PB21
)

2304 
	#AT91C_PB21_PCK1
 (
AT91C_PIO_PB21
)

2305 
	#AT91C_PIO_PB22
 (1 << 22)

2306 
	#AT91C_PB22_PWM3
 (
AT91C_PIO_PB22
)

2307 
	#AT91C_PB22_PCK2
 (
AT91C_PIO_PB22
)

2308 
	#AT91C_PIO_PB23
 (1 << 23)

2309 
	#AT91C_PB23_TIOA0
 (
AT91C_PIO_PB23
)

2310 
	#AT91C_PB23_DCD1
 (
AT91C_PIO_PB23
)

2311 
	#AT91C_PIO_PB24
 (1 << 24)

2312 
	#AT91C_PB24_TIOB0
 (
AT91C_PIO_PB24
)

2313 
	#AT91C_PB24_DSR1
 (
AT91C_PIO_PB24
)

2314 
	#AT91C_PIO_PB25
 (1 << 25)

2315 
	#AT91C_PB25_TIOA1
 (
AT91C_PIO_PB25
)

2316 
	#AT91C_PB25_DTR1
 (
AT91C_PIO_PB25
)

2317 
	#AT91C_PIO_PB26
 (1 << 26)

2318 
	#AT91C_PB26_TIOB1
 (
AT91C_PIO_PB26
)

2319 
	#AT91C_PB26_RI1
 (
AT91C_PIO_PB26
)

2320 
	#AT91C_PIO_PB27
 (1 << 27)

2321 
	#AT91C_PB27_TIOA2
 (
AT91C_PIO_PB27
)

2322 
	#AT91C_PB27_PWM0
 (
AT91C_PIO_PB27
)

2323 
	#AT91C_PIO_PB28
 (1 << 28)

2324 
	#AT91C_PB28_TIOB2
 (
AT91C_PIO_PB28
)

2325 
	#AT91C_PB28_PWM1
 (
AT91C_PIO_PB28
)

2326 
	#AT91C_PIO_PB29
 (1 << 29)

2327 
	#AT91C_PB29_PCK1
 (
AT91C_PIO_PB29
)

2328 
	#AT91C_PB29_PWM2
 (
AT91C_PIO_PB29
)

2329 
	#AT91C_PIO_PB3
 (1 << 3)

2330 
	#AT91C_PB3_ETX1
 (
AT91C_PIO_PB3
)

2331 
	#AT91C_PIO_PB30
 (1 << 30)

2332 
	#AT91C_PB30_PCK2
 (
AT91C_PIO_PB30
)

2333 
	#AT91C_PB30_PWM3
 (
AT91C_PIO_PB30
)

2334 
	#AT91C_PIO_PB4
 (1 << 4)

2335 
	#AT91C_PB4_ECRS_ECRSDV
 (
AT91C_PIO_PB4
)

2336 
	#AT91C_PIO_PB5
 (1 << 5)

2337 
	#AT91C_PB5_ERX0
 (
AT91C_PIO_PB5
)

2338 
	#AT91C_PIO_PB6
 (1 << 6)

2339 
	#AT91C_PB6_ERX1
 (
AT91C_PIO_PB6
)

2340 
	#AT91C_PIO_PB7
 (1 << 7)

2341 
	#AT91C_PB7_ERXER
 (
AT91C_PIO_PB7
)

2342 
	#AT91C_PIO_PB8
 (1 << 8)

2343 
	#AT91C_PB8_EMDC
 (
AT91C_PIO_PB8
)

2344 
	#AT91C_PIO_PB9
 (1 << 9)

2345 
	#AT91C_PB9_EMDIO
 (
AT91C_PIO_PB9
)

2346 

	)

2350 
	#AT91C_ID_FIQ
 ( 0)

2351 
	#AT91C_ID_SYS
 ( 1)

2352 
	#AT91C_ID_PIOA
 ( 2)

2353 
	#AT91C_ID_PIOB
 ( 3)

2354 
	#AT91C_ID_SPI0
 ( 4)

2355 
	#AT91C_ID_SPI1
 ( 5)

2356 
	#AT91C_ID_US0
 ( 6)

2357 
	#AT91C_ID_US1
 ( 7)

2358 
	#AT91C_ID_SSC
 ( 8)

2359 
	#AT91C_ID_TWI
 ( 9)

2360 
	#AT91C_ID_PWMC
 (10)

2361 
	#AT91C_ID_UDP
 (11)

2362 
	#AT91C_ID_TC0
 (12)

2363 
	#AT91C_ID_TC1
 (13)

2364 
	#AT91C_ID_TC2
 (14)

2365 
	#AT91C_ID_CAN
 (15)

2366 
	#AT91C_ID_EMAC
 (16)

2367 
	#AT91C_ID_ADC
 (17)

2368 
	#AT91C_ID_AES
 (18)

2369 
	#AT91C_ID_TDES
 (19)

2370 
	#AT91C_ID_20_Re£rved
 (20)

2371 
	#AT91C_ID_21_Re£rved
 (21)

2372 
	#AT91C_ID_22_Re£rved
 (22)

2373 
	#AT91C_ID_23_Re£rved
 (23)

2374 
	#AT91C_ID_24_Re£rved
 (24)

2375 
	#AT91C_ID_25_Re£rved
 (25)

2376 
	#AT91C_ID_26_Re£rved
 (26)

2377 
	#AT91C_ID_27_Re£rved
 (27)

2378 
	#AT91C_ID_28_Re£rved
 (28)

2379 
	#AT91C_ID_29_Re£rved
 (29)

2380 
	#AT91C_ID_IRQ0
 (30)

2381 
	#AT91C_ID_IRQ1
 (31)

2382 

	)

2386 
	#AT91C_BASE_SYS
 (0xFFFFF000)

2387 
	#AT91C_BASE_AIC
 (0xFFFFF000)

2388 
	#AT91C_BASE_PDC_DBGU
 (0xFFFFF300)

2389 
	#AT91C_BASE_DBGU
 (0xFFFFF200)

2390 
	#AT91C_BASE_PIOA
 (0xFFFFF400)

2391 
	#AT91C_BASE_PIOB
 (0xFFFFF600)

2392 
	#AT91C_BASE_CKGR
 (0xFFFFFC20)

2393 
	#AT91C_BASE_PMC
 (0xFFFFFC00)

2394 
	#AT91C_BASE_RSTC
 (0xFFFFFD00)

2395 
	#AT91C_BASE_RTTC
 (0xFFFFFD20)

2396 
	#AT91C_BASE_PITC
 (0xFFFFFD30)

2397 
	#AT91C_BASE_WDTC
 (0xFFFFFD40)

2398 
	#AT91C_BASE_VREG
 (0xFFFFFD60)

2399 
	#AT91C_BASE_MC
 (0xFFFFFF00)

2400 
	#AT91C_BASE_PDC_SPI1
 (0xFFFE4100)

2401 
	#AT91C_BASE_SPI1
 (0xFFFE4000)

2402 
	#AT91C_BASE_PDC_SPI0
 (0xFFFE0100)

2403 
	#AT91C_BASE_SPI0
 (0xFFFE0000)

2404 
	#AT91C_BASE_PDC_US1
 (0xFFFC4100)

2405 
	#AT91C_BASE_US1
 (0xFFFC4000)

2406 
	#AT91C_BASE_PDC_US0
 (0xFFFC0100)

2407 
	#AT91C_BASE_US0
 (0xFFFC0000)

2408 
	#AT91C_BASE_PDC_SSC
 (0xFFFD4100)

2409 
	#AT91C_BASE_SSC
 (0xFFFD4000)

2410 
	#AT91C_BASE_TWI
 (0xFFFB8000)

2411 
	#AT91C_BASE_PWMC_CH3
 (0xFFFCC260)

2412 
	#AT91C_BASE_PWMC_CH2
 (0xFFFCC240)

2413 
	#AT91C_BASE_PWMC_CH1
 (0xFFFCC220)

2414 
	#AT91C_BASE_PWMC_CH0
 (0xFFFCC200)

2415 
	#AT91C_BASE_PWMC
 (0xFFFCC000)

2416 
	#AT91C_BASE_UDP
 (0xFFFB0000)

2417 
	#AT91C_BASE_TC0
 (0xFFFA0000)

2418 
	#AT91C_BASE_TC1
 (0xFFFA0040)

2419 
	#AT91C_BASE_TC2
 (0xFFFA0080)

2420 
	#AT91C_BASE_TCB
 (0xFFFA0000)

2421 
	#AT91C_BASE_CAN_MB0
 (0xFFFD0200)

2422 
	#AT91C_BASE_CAN_MB1
 (0xFFFD0220)

2423 
	#AT91C_BASE_CAN_MB2
 (0xFFFD0240)

2424 
	#AT91C_BASE_CAN_MB3
 (0xFFFD0260)

2425 
	#AT91C_BASE_CAN_MB4
 (0xFFFD0280)

2426 
	#AT91C_BASE_CAN_MB5
 (0xFFFD02A0)

2427 
	#AT91C_BASE_CAN_MB6
 (0xFFFD02C0)

2428 
	#AT91C_BASE_CAN_MB7
 (0xFFFD02E0)

2429 
	#AT91C_BASE_CAN
 (0xFFFD0000)

2430 
	#AT91C_BASE_EMAC
 (0xFFFDC000)

2431 
	#AT91C_BASE_PDC_ADC
 (0xFFFD8100)

2432 
	#AT91C_BASE_ADC
 (0xFFFD8000)

2433 
	#AT91C_BASE_PDC_AES
 (0xFFFA4100)

2434 
	#AT91C_BASE_AES
 (0xFFFA4000)

2435 
	#AT91C_BASE_PDC_TDES
 (0xFFFA8100)

2436 
	#AT91C_BASE_TDES
 (0xFFFA8000)

2437 

	)

2441 
	#AT91C_ISRAM
 (0x00200000)

2442 
	#AT91C_ISRAM_SIZE
 (0x00008000)

2443 
	#AT91C_IFLASH
 (0x00100000)

2444 
	#AT91C_IFLASH_SIZE
 (0x00020000)

2445 

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7X256.h

46 #i‚de‡
AT91SAM7X256_H


47 
	#AT91SAM7X256_H


	)

49 vﬁ©ûê
	tAT91_REG
;

54 
	s_AT91S_SYS
 {

55 
AT91_REG
 
	mAIC_SMR
[32];

56 
AT91_REG
 
	mAIC_SVR
[32];

57 
AT91_REG
 
	mAIC_IVR
;

58 
AT91_REG
 
	mAIC_FVR
;

59 
AT91_REG
 
	mAIC_ISR
;

60 
AT91_REG
 
	mAIC_IPR
;

61 
AT91_REG
 
	mAIC_IMR
;

62 
AT91_REG
 
	mAIC_CISR
;

63 
AT91_REG
 
	mRe£rved0
[2];

64 
AT91_REG
 
	mAIC_IECR
;

65 
AT91_REG
 
	mAIC_IDCR
;

66 
AT91_REG
 
	mAIC_ICCR
;

67 
AT91_REG
 
	mAIC_ISCR
;

68 
AT91_REG
 
	mAIC_EOICR
;

69 
AT91_REG
 
	mAIC_SPU
;

70 
AT91_REG
 
	mAIC_DCR
;

71 
AT91_REG
 
	mRe£rved1
[1];

72 
AT91_REG
 
	mAIC_FFER
;

73 
AT91_REG
 
	mAIC_FFDR
;

74 
AT91_REG
 
	mAIC_FFSR
;

75 
AT91_REG
 
	mRe£rved2
[45];

76 
AT91_REG
 
	mDBGU_CR
;

77 
AT91_REG
 
	mDBGU_MR
;

78 
AT91_REG
 
	mDBGU_IER
;

79 
AT91_REG
 
	mDBGU_IDR
;

80 
AT91_REG
 
	mDBGU_IMR
;

81 
AT91_REG
 
	mDBGU_CSR
;

82 
AT91_REG
 
	mDBGU_RHR
;

83 
AT91_REG
 
	mDBGU_THR
;

84 
AT91_REG
 
	mDBGU_BRGR
;

85 
AT91_REG
 
	mRe£rved3
[7];

86 
AT91_REG
 
	mDBGU_CIDR
;

87 
AT91_REG
 
	mDBGU_EXID
;

88 
AT91_REG
 
	mDBGU_FNTR
;

89 
AT91_REG
 
	mRe£rved4
[45];

90 
AT91_REG
 
	mDBGU_RPR
;

91 
AT91_REG
 
	mDBGU_RCR
;

92 
AT91_REG
 
	mDBGU_TPR
;

93 
AT91_REG
 
	mDBGU_TCR
;

94 
AT91_REG
 
	mDBGU_RNPR
;

95 
AT91_REG
 
	mDBGU_RNCR
;

96 
AT91_REG
 
	mDBGU_TNPR
;

97 
AT91_REG
 
	mDBGU_TNCR
;

98 
AT91_REG
 
	mDBGU_PTCR
;

99 
AT91_REG
 
	mDBGU_PTSR
;

100 
AT91_REG
 
	mRe£rved5
[54];

101 
AT91_REG
 
	mPIOA_PER
;

102 
AT91_REG
 
	mPIOA_PDR
;

103 
AT91_REG
 
	mPIOA_PSR
;

104 
AT91_REG
 
	mRe£rved6
[1];

105 
AT91_REG
 
	mPIOA_OER
;

106 
AT91_REG
 
	mPIOA_ODR
;

107 
AT91_REG
 
	mPIOA_OSR
;

108 
AT91_REG
 
	mRe£rved7
[1];

109 
AT91_REG
 
	mPIOA_IFER
;

110 
AT91_REG
 
	mPIOA_IFDR
;

111 
AT91_REG
 
	mPIOA_IFSR
;

112 
AT91_REG
 
	mRe£rved8
[1];

113 
AT91_REG
 
	mPIOA_SODR
;

114 
AT91_REG
 
	mPIOA_CODR
;

115 
AT91_REG
 
	mPIOA_ODSR
;

116 
AT91_REG
 
	mPIOA_PDSR
;

117 
AT91_REG
 
	mPIOA_IER
;

118 
AT91_REG
 
	mPIOA_IDR
;

119 
AT91_REG
 
	mPIOA_IMR
;

120 
AT91_REG
 
	mPIOA_ISR
;

121 
AT91_REG
 
	mPIOA_MDER
;

122 
AT91_REG
 
	mPIOA_MDDR
;

123 
AT91_REG
 
	mPIOA_MDSR
;

124 
AT91_REG
 
	mRe£rved9
[1];

125 
AT91_REG
 
	mPIOA_PPUDR
;

126 
AT91_REG
 
	mPIOA_PPUER
;

127 
AT91_REG
 
	mPIOA_PPUSR
;

128 
AT91_REG
 
	mRe£rved10
[1];

129 
AT91_REG
 
	mPIOA_ASR
;

130 
AT91_REG
 
	mPIOA_BSR
;

131 
AT91_REG
 
	mPIOA_ABSR
;

132 
AT91_REG
 
	mRe£rved11
[9];

133 
AT91_REG
 
	mPIOA_OWER
;

134 
AT91_REG
 
	mPIOA_OWDR
;

135 
AT91_REG
 
	mPIOA_OWSR
;

136 
AT91_REG
 
	mRe£rved12
[85];

137 
AT91_REG
 
	mPIOB_PER
;

138 
AT91_REG
 
	mPIOB_PDR
;

139 
AT91_REG
 
	mPIOB_PSR
;

140 
AT91_REG
 
	mRe£rved13
[1];

141 
AT91_REG
 
	mPIOB_OER
;

142 
AT91_REG
 
	mPIOB_ODR
;

143 
AT91_REG
 
	mPIOB_OSR
;

144 
AT91_REG
 
	mRe£rved14
[1];

145 
AT91_REG
 
	mPIOB_IFER
;

146 
AT91_REG
 
	mPIOB_IFDR
;

147 
AT91_REG
 
	mPIOB_IFSR
;

148 
AT91_REG
 
	mRe£rved15
[1];

149 
AT91_REG
 
	mPIOB_SODR
;

150 
AT91_REG
 
	mPIOB_CODR
;

151 
AT91_REG
 
	mPIOB_ODSR
;

152 
AT91_REG
 
	mPIOB_PDSR
;

153 
AT91_REG
 
	mPIOB_IER
;

154 
AT91_REG
 
	mPIOB_IDR
;

155 
AT91_REG
 
	mPIOB_IMR
;

156 
AT91_REG
 
	mPIOB_ISR
;

157 
AT91_REG
 
	mPIOB_MDER
;

158 
AT91_REG
 
	mPIOB_MDDR
;

159 
AT91_REG
 
	mPIOB_MDSR
;

160 
AT91_REG
 
	mRe£rved16
[1];

161 
AT91_REG
 
	mPIOB_PPUDR
;

162 
AT91_REG
 
	mPIOB_PPUER
;

163 
AT91_REG
 
	mPIOB_PPUSR
;

164 
AT91_REG
 
	mRe£rved17
[1];

165 
AT91_REG
 
	mPIOB_ASR
;

166 
AT91_REG
 
	mPIOB_BSR
;

167 
AT91_REG
 
	mPIOB_ABSR
;

168 
AT91_REG
 
	mRe£rved18
[9];

169 
AT91_REG
 
	mPIOB_OWER
;

170 
AT91_REG
 
	mPIOB_OWDR
;

171 
AT91_REG
 
	mPIOB_OWSR
;

172 
AT91_REG
 
	mRe£rved19
[341];

173 
AT91_REG
 
	mPMC_SCER
;

174 
AT91_REG
 
	mPMC_SCDR
;

175 
AT91_REG
 
	mPMC_SCSR
;

176 
AT91_REG
 
	mRe£rved20
[1];

177 
AT91_REG
 
	mPMC_PCER
;

178 
AT91_REG
 
	mPMC_PCDR
;

179 
AT91_REG
 
	mPMC_PCSR
;

180 
AT91_REG
 
	mRe£rved21
[1];

181 
AT91_REG
 
	mPMC_MOR
;

182 
AT91_REG
 
	mPMC_MCFR
;

183 
AT91_REG
 
	mRe£rved22
[1];

184 
AT91_REG
 
	mPMC_PLLR
;

185 
AT91_REG
 
	mPMC_MCKR
;

186 
AT91_REG
 
	mRe£rved23
[3];

187 
AT91_REG
 
	mPMC_PCKR
[4];

188 
AT91_REG
 
	mRe£rved24
[4];

189 
AT91_REG
 
	mPMC_IER
;

190 
AT91_REG
 
	mPMC_IDR
;

191 
AT91_REG
 
	mPMC_SR
;

192 
AT91_REG
 
	mPMC_IMR
;

193 
AT91_REG
 
	mRe£rved25
[36];

194 
AT91_REG
 
	mRSTC_RCR
;

195 
AT91_REG
 
	mRSTC_RSR
;

196 
AT91_REG
 
	mRSTC_RMR
;

197 
AT91_REG
 
	mRe£rved26
[5];

198 
AT91_REG
 
	mRTTC_RTMR
;

199 
AT91_REG
 
	mRTTC_RTAR
;

200 
AT91_REG
 
	mRTTC_RTVR
;

201 
AT91_REG
 
	mRTTC_RTSR
;

202 
AT91_REG
 
	mPITC_PIMR
;

203 
AT91_REG
 
	mPITC_PISR
;

204 
AT91_REG
 
	mPITC_PIVR
;

205 
AT91_REG
 
	mPITC_PIIR
;

206 
AT91_REG
 
	mWDTC_WDCR
;

207 
AT91_REG
 
	mWDTC_WDMR
;

208 
AT91_REG
 
	mWDTC_WDSR
;

209 
AT91_REG
 
	mRe£rved27
[5];

210 
AT91_REG
 
	mVREG_MR
;

211 } 
	tAT91S_SYS
, *
	tAT91PS_SYS
;

217 
	s_AT91S_AIC
 {

218 
AT91_REG
 
	mAIC_SMR
[32];

219 
AT91_REG
 
	mAIC_SVR
[32];

220 
AT91_REG
 
	mAIC_IVR
;

221 
AT91_REG
 
	mAIC_FVR
;

222 
AT91_REG
 
	mAIC_ISR
;

223 
AT91_REG
 
	mAIC_IPR
;

224 
AT91_REG
 
	mAIC_IMR
;

225 
AT91_REG
 
	mAIC_CISR
;

226 
AT91_REG
 
	mRe£rved0
[2];

227 
AT91_REG
 
	mAIC_IECR
;

228 
AT91_REG
 
	mAIC_IDCR
;

229 
AT91_REG
 
	mAIC_ICCR
;

230 
AT91_REG
 
	mAIC_ISCR
;

231 
AT91_REG
 
	mAIC_EOICR
;

232 
AT91_REG
 
	mAIC_SPU
;

233 
AT91_REG
 
	mAIC_DCR
;

234 
AT91_REG
 
	mRe£rved1
[1];

235 
AT91_REG
 
	mAIC_FFER
;

236 
AT91_REG
 
	mAIC_FFDR
;

237 
AT91_REG
 
	mAIC_FFSR
;

238 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

241 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

242 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

243 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

244 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

245 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (() 0x0 << 5)

246 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (() 0x0 << 5)

247 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (() 0x1 << 5)

248 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (() 0x1 << 5)

249 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (() 0x2 << 5)

250 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (() 0x3 << 5)

252 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

253 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

255 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

256 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

257 

	)

261 
	s_AT91S_PDC
 {

262 
AT91_REG
 
	mPDC_RPR
;

263 
AT91_REG
 
	mPDC_RCR
;

264 
AT91_REG
 
	mPDC_TPR
;

265 
AT91_REG
 
	mPDC_TCR
;

266 
AT91_REG
 
	mPDC_RNPR
;

267 
AT91_REG
 
	mPDC_RNCR
;

268 
AT91_REG
 
	mPDC_TNPR
;

269 
AT91_REG
 
	mPDC_TNCR
;

270 
AT91_REG
 
	mPDC_PTCR
;

271 
AT91_REG
 
	mPDC_PTSR
;

272 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

275 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

276 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

277 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

278 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

280 

	)

284 
	s_AT91S_DBGU
 {

285 
AT91_REG
 
	mDBGU_CR
;

286 
AT91_REG
 
	mDBGU_MR
;

287 
AT91_REG
 
	mDBGU_IER
;

288 
AT91_REG
 
	mDBGU_IDR
;

289 
AT91_REG
 
	mDBGU_IMR
;

290 
AT91_REG
 
	mDBGU_CSR
;

291 
AT91_REG
 
	mDBGU_RHR
;

292 
AT91_REG
 
	mDBGU_THR
;

293 
AT91_REG
 
	mDBGU_BRGR
;

294 
AT91_REG
 
	mRe£rved0
[7];

295 
AT91_REG
 
	mDBGU_CIDR
;

296 
AT91_REG
 
	mDBGU_EXID
;

297 
AT91_REG
 
	mDBGU_FNTR
;

298 
AT91_REG
 
	mRe£rved1
[45];

299 
AT91_REG
 
	mDBGU_RPR
;

300 
AT91_REG
 
	mDBGU_RCR
;

301 
AT91_REG
 
	mDBGU_TPR
;

302 
AT91_REG
 
	mDBGU_TCR
;

303 
AT91_REG
 
	mDBGU_RNPR
;

304 
AT91_REG
 
	mDBGU_RNCR
;

305 
AT91_REG
 
	mDBGU_TNPR
;

306 
AT91_REG
 
	mDBGU_TNCR
;

307 
AT91_REG
 
	mDBGU_PTCR
;

308 
AT91_REG
 
	mDBGU_PTSR
;

309 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

312 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

313 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

314 
	#AT91C_US_RXEN
 (() 0x1 << 4)

315 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

316 
	#AT91C_US_TXEN
 (() 0x1 << 6)

317 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

318 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

320 
	#AT91C_US_PAR
 (() 0x7 << 9)

321 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

322 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

323 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

324 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

325 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

326 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

327 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

328 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

329 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

330 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

331 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

333 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

334 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

335 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

336 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

337 
	#AT91C_US_OVRE
 (() 0x1 << 5)

338 
	#AT91C_US_FRAME
 (() 0x1 << 6)

339 
	#AT91C_US_PARE
 (() 0x1 << 7)

340 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

341 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

342 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

343 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

344 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

349 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

350 

	)

354 
	s_AT91S_PIO
 {

355 
AT91_REG
 
	mPIO_PER
;

356 
AT91_REG
 
	mPIO_PDR
;

357 
AT91_REG
 
	mPIO_PSR
;

358 
AT91_REG
 
	mRe£rved0
[1];

359 
AT91_REG
 
	mPIO_OER
;

360 
AT91_REG
 
	mPIO_ODR
;

361 
AT91_REG
 
	mPIO_OSR
;

362 
AT91_REG
 
	mRe£rved1
[1];

363 
AT91_REG
 
	mPIO_IFER
;

364 
AT91_REG
 
	mPIO_IFDR
;

365 
AT91_REG
 
	mPIO_IFSR
;

366 
AT91_REG
 
	mRe£rved2
[1];

367 
AT91_REG
 
	mPIO_SODR
;

368 
AT91_REG
 
	mPIO_CODR
;

369 
AT91_REG
 
	mPIO_ODSR
;

370 
AT91_REG
 
	mPIO_PDSR
;

371 
AT91_REG
 
	mPIO_IER
;

372 
AT91_REG
 
	mPIO_IDR
;

373 
AT91_REG
 
	mPIO_IMR
;

374 
AT91_REG
 
	mPIO_ISR
;

375 
AT91_REG
 
	mPIO_MDER
;

376 
AT91_REG
 
	mPIO_MDDR
;

377 
AT91_REG
 
	mPIO_MDSR
;

378 
AT91_REG
 
	mRe£rved3
[1];

379 
AT91_REG
 
	mPIO_PPUDR
;

380 
AT91_REG
 
	mPIO_PPUER
;

381 
AT91_REG
 
	mPIO_PPUSR
;

382 
AT91_REG
 
	mRe£rved4
[1];

383 
AT91_REG
 
	mPIO_ASR
;

384 
AT91_REG
 
	mPIO_BSR
;

385 
AT91_REG
 
	mPIO_ABSR
;

386 
AT91_REG
 
	mRe£rved5
[9];

387 
AT91_REG
 
	mPIO_OWER
;

388 
AT91_REG
 
	mPIO_OWDR
;

389 
AT91_REG
 
	mPIO_OWSR
;

390 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

396 
	s_AT91S_CKGR
 {

397 
AT91_REG
 
	mCKGR_MOR
;

398 
AT91_REG
 
	mCKGR_MCFR
;

399 
AT91_REG
 
	mRe£rved0
[1];

400 
AT91_REG
 
	mCKGR_PLLR
;

401 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

404 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

405 
	#AT91C_CKGR_OSCBYPASS
 (() 0x1 << 1)

406 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

408 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

409 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

411 
	#AT91C_CKGR_DIV
 (() 0xFF << 0)

412 
	#AT91C_CKGR_DIV_0
 (() 0x0)

413 
	#AT91C_CKGR_DIV_BYPASS
 (() 0x1)

414 
	#AT91C_CKGR_PLLCOUNT
 (() 0x3F << 8)

415 
	#AT91C_CKGR_OUT
 (() 0x3 << 14)

416 
	#AT91C_CKGR_OUT_0
 (() 0x0 << 14)

417 
	#AT91C_CKGR_OUT_1
 (() 0x1 << 14)

418 
	#AT91C_CKGR_OUT_2
 (() 0x2 << 14)

419 
	#AT91C_CKGR_OUT_3
 (() 0x3 << 14)

420 
	#AT91C_CKGR_MUL
 (() 0x7FF << 16)

421 
	#AT91C_CKGR_USBDIV
 (() 0x3 << 28)

422 
	#AT91C_CKGR_USBDIV_0
 (() 0x0 << 28)

423 
	#AT91C_CKGR_USBDIV_1
 (() 0x1 << 28)

424 
	#AT91C_CKGR_USBDIV_2
 (() 0x2 << 28)

425 

	)

429 
	s_AT91S_PMC
 {

430 
AT91_REG
 
	mPMC_SCER
;

431 
AT91_REG
 
	mPMC_SCDR
;

432 
AT91_REG
 
	mPMC_SCSR
;

433 
AT91_REG
 
	mRe£rved0
[1];

434 
AT91_REG
 
	mPMC_PCER
;

435 
AT91_REG
 
	mPMC_PCDR
;

436 
AT91_REG
 
	mPMC_PCSR
;

437 
AT91_REG
 
	mRe£rved1
[1];

438 
AT91_REG
 
	mPMC_MOR
;

439 
AT91_REG
 
	mPMC_MCFR
;

440 
AT91_REG
 
	mRe£rved2
[1];

441 
AT91_REG
 
	mPMC_PLLR
;

442 
AT91_REG
 
	mPMC_MCKR
;

443 
AT91_REG
 
	mRe£rved3
[3];

444 
AT91_REG
 
	mPMC_PCKR
[4];

445 
AT91_REG
 
	mRe£rved4
[4];

446 
AT91_REG
 
	mPMC_IER
;

447 
AT91_REG
 
	mPMC_IDR
;

448 
AT91_REG
 
	mPMC_SR
;

449 
AT91_REG
 
	mPMC_IMR
;

450 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

453 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

454 
	#AT91C_PMC_UDP
 (() 0x1 << 7)

455 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

456 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

457 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

458 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

465 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

466 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

467 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

468 
	#AT91C_PMC_CSS_PLL_CLK
 (() 0x3)

469 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

470 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

471 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

472 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

473 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

474 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

475 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

476 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

479 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

480 
	#AT91C_PMC_LOCK
 (() 0x1 << 2)

481 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

482 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

483 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

484 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

485 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

489 

	)

493 
	s_AT91S_RSTC
 {

494 
AT91_REG
 
	mRSTC_RCR
;

495 
AT91_REG
 
	mRSTC_RSR
;

496 
AT91_REG
 
	mRSTC_RMR
;

497 } 
	tAT91S_RSTC
, *
	tAT91PS_RSTC
;

500 
	#AT91C_RSTC_PROCRST
 (() 0x1 << 0)

501 
	#AT91C_RSTC_PERRST
 (() 0x1 << 2)

502 
	#AT91C_RSTC_EXTRST
 (() 0x1 << 3)

503 
	#AT91C_RSTC_KEY
 (() 0xFF << 24)

505 
	#AT91C_RSTC_URSTS
 (() 0x1 << 0)

506 
	#AT91C_RSTC_BODSTS
 (() 0x1 << 1)

507 
	#AT91C_RSTC_RSTTYP
 (() 0x7 << 8)

508 
	#AT91C_RSTC_RSTTYP_POWERUP
 (() 0x0 << 8)

509 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (() 0x1 << 8)

510 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (() 0x2 << 8)

511 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (() 0x3 << 8)

512 
	#AT91C_RSTC_RSTTYP_USER
 (() 0x4 << 8)

513 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (() 0x5 << 8)

514 
	#AT91C_RSTC_NRSTL
 (() 0x1 << 16)

515 
	#AT91C_RSTC_SRCMP
 (() 0x1 << 17)

517 
	#AT91C_RSTC_URSTEN
 (() 0x1 << 0)

518 
	#AT91C_RSTC_URSTIEN
 (() 0x1 << 4)

519 
	#AT91C_RSTC_ERSTL
 (() 0xF << 8)

520 
	#AT91C_RSTC_BODIEN
 (() 0x1 << 16)

521 

	)

525 
	s_AT91S_RTTC
 {

526 
AT91_REG
 
	mRTTC_RTMR
;

527 
AT91_REG
 
	mRTTC_RTAR
;

528 
AT91_REG
 
	mRTTC_RTVR
;

529 
AT91_REG
 
	mRTTC_RTSR
;

530 } 
	tAT91S_RTTC
, *
	tAT91PS_RTTC
;

533 
	#AT91C_RTTC_RTPRES
 (() 0xFFFF << 0)

534 
	#AT91C_RTTC_ALMIEN
 (() 0x1 << 16)

535 
	#AT91C_RTTC_RTTINCIEN
 (() 0x1 << 17)

536 
	#AT91C_RTTC_RTTRST
 (() 0x1 << 18)

538 
	#AT91C_RTTC_ALMV
 (() 0x0 << 0)

540 
	#AT91C_RTTC_CRTV
 (() 0x0 << 0)

542 
	#AT91C_RTTC_ALMS
 (() 0x1 << 0)

543 
	#AT91C_RTTC_RTTINC
 (() 0x1 << 1)

544 

	)

548 
	s_AT91S_PITC
 {

549 
AT91_REG
 
	mPITC_PIMR
;

550 
AT91_REG
 
	mPITC_PISR
;

551 
AT91_REG
 
	mPITC_PIVR
;

552 
AT91_REG
 
	mPITC_PIIR
;

553 } 
	tAT91S_PITC
, *
	tAT91PS_PITC
;

556 
	#AT91C_PITC_PIV
 (() 0xFFFFF << 0)

557 
	#AT91C_PITC_PITEN
 (() 0x1 << 24)

558 
	#AT91C_PITC_PITIEN
 (() 0x1 << 25)

560 
	#AT91C_PITC_PITS
 (() 0x1 << 0)

562 
	#AT91C_PITC_CPIV
 (() 0xFFFFF << 0)

563 
	#AT91C_PITC_PICNT
 (() 0xFFF << 20)

565 

	)

569 
	s_AT91S_WDTC
 {

570 
AT91_REG
 
	mWDTC_WDCR
;

571 
AT91_REG
 
	mWDTC_WDMR
;

572 
AT91_REG
 
	mWDTC_WDSR
;

573 } 
	tAT91S_WDTC
, *
	tAT91PS_WDTC
;

576 
	#AT91C_WDTC_WDRSTT
 (() 0x1 << 0)

577 
	#AT91C_WDTC_KEY
 (() 0xFF << 24)

579 
	#AT91C_WDTC_WDV
 (() 0xFFF << 0)

580 
	#AT91C_WDTC_WDFIEN
 (() 0x1 << 12)

581 
	#AT91C_WDTC_WDRSTEN
 (() 0x1 << 13)

582 
	#AT91C_WDTC_WDRPROC
 (() 0x1 << 14)

583 
	#AT91C_WDTC_WDDIS
 (() 0x1 << 15)

584 
	#AT91C_WDTC_WDD
 (() 0xFFF << 16)

585 
	#AT91C_WDTC_WDDBGHLT
 (() 0x1 << 28)

586 
	#AT91C_WDTC_WDIDLEHLT
 (() 0x1 << 29)

588 
	#AT91C_WDTC_WDUNF
 (() 0x1 << 0)

589 
	#AT91C_WDTC_WDERR
 (() 0x1 << 1)

590 

	)

594 
	s_AT91S_VREG
 {

595 
AT91_REG
 
	mVREG_MR
;

596 } 
	tAT91S_VREG
, *
	tAT91PS_VREG
;

599 
	#AT91C_VREG_PSTDBY
 (() 0x1 << 0)

600 

	)

604 
	s_AT91S_MC
 {

605 
AT91_REG
 
	mMC_RCR
;

606 
AT91_REG
 
	mMC_ASR
;

607 
AT91_REG
 
	mMC_AASR
;

608 
AT91_REG
 
	mRe£rved0
[21];

609 
AT91_REG
 
	mMC_FMR
;

610 
AT91_REG
 
	mMC_FCR
;

611 
AT91_REG
 
	mMC_FSR
;

612 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

615 
	#AT91C_MC_RCB
 (() 0x1 << 0)

617 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

618 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

619 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

620 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

621 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

622 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

623 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

624 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

625 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

626 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

627 
	#AT91C_MC_MST0
 (() 0x1 << 16)

628 
	#AT91C_MC_MST1
 (() 0x1 << 17)

629 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

630 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

632 
	#AT91C_MC_FRDY
 (() 0x1 << 0)

633 
	#AT91C_MC_LOCKE
 (() 0x1 << 2)

634 
	#AT91C_MC_PROGE
 (() 0x1 << 3)

635 
	#AT91C_MC_NEBP
 (() 0x1 << 7)

636 
	#AT91C_MC_FWS
 (() 0x3 << 8)

637 
	#AT91C_MC_FWS_0FWS
 (() 0x0 << 8)

638 
	#AT91C_MC_FWS_1FWS
 (() 0x1 << 8)

639 
	#AT91C_MC_FWS_2FWS
 (() 0x2 << 8)

640 
	#AT91C_MC_FWS_3FWS
 (() 0x3 << 8)

641 
	#AT91C_MC_FMCN
 (() 0xFF << 16)

643 
	#AT91C_MC_FCMD
 (() 0xF << 0)

644 
	#AT91C_MC_FCMD_START_PROG
 (() 0x1)

645 
	#AT91C_MC_FCMD_LOCK
 (() 0x2)

646 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (() 0x3)

647 
	#AT91C_MC_FCMD_UNLOCK
 (() 0x4)

648 
	#AT91C_MC_FCMD_ERASE_ALL
 (() 0x8)

649 
	#AT91C_MC_FCMD_SET_GP_NVM
 (() 0xB)

650 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (() 0xD)

651 
	#AT91C_MC_FCMD_SET_SECURITY
 (() 0xF)

652 
	#AT91C_MC_PAGEN
 (() 0x3FF << 8)

653 
	#AT91C_MC_KEY
 (() 0xFF << 24)

655 
	#AT91C_MC_SECURITY
 (() 0x1 << 4)

656 
	#AT91C_MC_GPNVM0
 (() 0x1 << 8)

657 
	#AT91C_MC_GPNVM1
 (() 0x1 << 9)

658 
	#AT91C_MC_GPNVM2
 (() 0x1 << 10)

659 
	#AT91C_MC_GPNVM3
 (() 0x1 << 11)

660 
	#AT91C_MC_GPNVM4
 (() 0x1 << 12)

661 
	#AT91C_MC_GPNVM5
 (() 0x1 << 13)

662 
	#AT91C_MC_GPNVM6
 (() 0x1 << 14)

663 
	#AT91C_MC_GPNVM7
 (() 0x1 << 15)

664 
	#AT91C_MC_LOCKS0
 (() 0x1 << 16)

665 
	#AT91C_MC_LOCKS1
 (() 0x1 << 17)

666 
	#AT91C_MC_LOCKS2
 (() 0x1 << 18)

667 
	#AT91C_MC_LOCKS3
 (() 0x1 << 19)

668 
	#AT91C_MC_LOCKS4
 (() 0x1 << 20)

669 
	#AT91C_MC_LOCKS5
 (() 0x1 << 21)

670 
	#AT91C_MC_LOCKS6
 (() 0x1 << 22)

671 
	#AT91C_MC_LOCKS7
 (() 0x1 << 23)

672 
	#AT91C_MC_LOCKS8
 (() 0x1 << 24)

673 
	#AT91C_MC_LOCKS9
 (() 0x1 << 25)

674 
	#AT91C_MC_LOCKS10
 (() 0x1 << 26)

675 
	#AT91C_MC_LOCKS11
 (() 0x1 << 27)

676 
	#AT91C_MC_LOCKS12
 (() 0x1 << 28)

677 
	#AT91C_MC_LOCKS13
 (() 0x1 << 29)

678 
	#AT91C_MC_LOCKS14
 (() 0x1 << 30)

679 
	#AT91C_MC_LOCKS15
 (() 0x1 << 31)

680 

	)

684 
	s_AT91S_SPI
 {

685 
AT91_REG
 
	mSPI_CR
;

686 
AT91_REG
 
	mSPI_MR
;

687 
AT91_REG
 
	mSPI_RDR
;

688 
AT91_REG
 
	mSPI_TDR
;

689 
AT91_REG
 
	mSPI_SR
;

690 
AT91_REG
 
	mSPI_IER
;

691 
AT91_REG
 
	mSPI_IDR
;

692 
AT91_REG
 
	mSPI_IMR
;

693 
AT91_REG
 
	mRe£rved0
[4];

694 
AT91_REG
 
	mSPI_CSR
[4];

695 
AT91_REG
 
	mRe£rved1
[48];

696 
AT91_REG
 
	mSPI_RPR
;

697 
AT91_REG
 
	mSPI_RCR
;

698 
AT91_REG
 
	mSPI_TPR
;

699 
AT91_REG
 
	mSPI_TCR
;

700 
AT91_REG
 
	mSPI_RNPR
;

701 
AT91_REG
 
	mSPI_RNCR
;

702 
AT91_REG
 
	mSPI_TNPR
;

703 
AT91_REG
 
	mSPI_TNCR
;

704 
AT91_REG
 
	mSPI_PTCR
;

705 
AT91_REG
 
	mSPI_PTSR
;

706 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

709 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

710 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

711 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

712 
	#AT91C_SPI_LASTXFER
 (() 0x1 << 24)

714 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

715 
	#AT91C_SPI_PS
 (() 0x1 << 1)

716 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

717 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

718 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

719 
	#AT91C_SPI_FDIV
 (() 0x1 << 3)

720 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

721 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

722 
	#AT91C_SPI_PCS
 (() 0xF << 16)

723 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

725 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

726 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

728 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

729 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

731 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

732 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

733 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

734 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

735 
	#AT91C_SPI_ENDRX
 (() 0x1 << 4)

736 
	#AT91C_SPI_ENDTX
 (() 0x1 << 5)

737 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

738 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

739 
	#AT91C_SPI_NSSR
 (() 0x1 << 8)

740 
	#AT91C_SPI_TXEMPTY
 (() 0x1 << 9)

741 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

746 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

747 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

748 
	#AT91C_SPI_CSAAT
 (() 0x1 << 3)

749 
	#AT91C_SPI_BITS
 (() 0xF << 4)

750 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

751 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

752 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

753 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

754 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

755 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

756 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

757 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

758 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

759 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

760 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

761 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

762 

	)

766 
	s_AT91S_USART
 {

767 
AT91_REG
 
	mUS_CR
;

768 
AT91_REG
 
	mUS_MR
;

769 
AT91_REG
 
	mUS_IER
;

770 
AT91_REG
 
	mUS_IDR
;

771 
AT91_REG
 
	mUS_IMR
;

772 
AT91_REG
 
	mUS_CSR
;

773 
AT91_REG
 
	mUS_RHR
;

774 
AT91_REG
 
	mUS_THR
;

775 
AT91_REG
 
	mUS_BRGR
;

776 
AT91_REG
 
	mUS_RTOR
;

777 
AT91_REG
 
	mUS_TTGR
;

778 
AT91_REG
 
	mRe£rved0
[5];

779 
AT91_REG
 
	mUS_FIDI
;

780 
AT91_REG
 
	mUS_NER
;

781 
AT91_REG
 
	mRe£rved1
[1];

782 
AT91_REG
 
	mUS_IF
;

783 
AT91_REG
 
	mRe£rved2
[44];

784 
AT91_REG
 
	mUS_RPR
;

785 
AT91_REG
 
	mUS_RCR
;

786 
AT91_REG
 
	mUS_TPR
;

787 
AT91_REG
 
	mUS_TCR
;

788 
AT91_REG
 
	mUS_RNPR
;

789 
AT91_REG
 
	mUS_RNCR
;

790 
AT91_REG
 
	mUS_TNPR
;

791 
AT91_REG
 
	mUS_TNCR
;

792 
AT91_REG
 
	mUS_PTCR
;

793 
AT91_REG
 
	mUS_PTSR
;

794 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

797 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

798 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

799 
	#AT91C_US_STTTO
 (() 0x1 << 11)

800 
	#AT91C_US_SENDA
 (() 0x1 << 12)

801 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

802 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

803 
	#AT91C_US_RETTO
 (() 0x1 << 15)

804 
	#AT91C_US_DTREN
 (() 0x1 << 16)

805 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

806 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

807 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

809 
	#AT91C_US_USMODE
 (() 0xF << 0)

810 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

811 
	#AT91C_US_USMODE_RS485
 (() 0x1)

812 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

813 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

814 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

815 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

816 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

817 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

818 
	#AT91C_US_CLKS
 (() 0x3 << 4)

819 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

820 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

821 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

822 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

823 
	#AT91C_US_CHRL
 (() 0x3 << 6)

824 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

825 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

826 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

827 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

828 
	#AT91C_US_SYNC
 (() 0x1 << 8)

829 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

830 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

831 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

832 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

833 
	#AT91C_US_MSBF
 (() 0x1 << 16)

834 
	#AT91C_US_MODE9
 (() 0x1 << 17)

835 
	#AT91C_US_CKLO
 (() 0x1 << 18)

836 
	#AT91C_US_OVER
 (() 0x1 << 19)

837 
	#AT91C_US_INACK
 (() 0x1 << 20)

838 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

839 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

840 
	#AT91C_US_FILTER
 (() 0x1 << 28)

842 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

843 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

844 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

845 
	#AT91C_US_NACK
 (() 0x1 << 13)

846 
	#AT91C_US_RIIC
 (() 0x1 << 16)

847 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

848 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

849 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

853 
	#AT91C_US_RI
 (() 0x1 << 20)

854 
	#AT91C_US_DSR
 (() 0x1 << 21)

855 
	#AT91C_US_DCD
 (() 0x1 << 22)

856 
	#AT91C_US_CTS
 (() 0x1 << 23)

857 

	)

861 
	s_AT91S_SSC
 {

862 
AT91_REG
 
	mSSC_CR
;

863 
AT91_REG
 
	mSSC_CMR
;

864 
AT91_REG
 
	mRe£rved0
[2];

865 
AT91_REG
 
	mSSC_RCMR
;

866 
AT91_REG
 
	mSSC_RFMR
;

867 
AT91_REG
 
	mSSC_TCMR
;

868 
AT91_REG
 
	mSSC_TFMR
;

869 
AT91_REG
 
	mSSC_RHR
;

870 
AT91_REG
 
	mSSC_THR
;

871 
AT91_REG
 
	mRe£rved1
[2];

872 
AT91_REG
 
	mSSC_RSHR
;

873 
AT91_REG
 
	mSSC_TSHR
;

874 
AT91_REG
 
	mRe£rved2
[2];

875 
AT91_REG
 
	mSSC_SR
;

876 
AT91_REG
 
	mSSC_IER
;

877 
AT91_REG
 
	mSSC_IDR
;

878 
AT91_REG
 
	mSSC_IMR
;

879 
AT91_REG
 
	mRe£rved3
[44];

880 
AT91_REG
 
	mSSC_RPR
;

881 
AT91_REG
 
	mSSC_RCR
;

882 
AT91_REG
 
	mSSC_TPR
;

883 
AT91_REG
 
	mSSC_TCR
;

884 
AT91_REG
 
	mSSC_RNPR
;

885 
AT91_REG
 
	mSSC_RNCR
;

886 
AT91_REG
 
	mSSC_TNPR
;

887 
AT91_REG
 
	mSSC_TNCR
;

888 
AT91_REG
 
	mSSC_PTCR
;

889 
AT91_REG
 
	mSSC_PTSR
;

890 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

893 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

894 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

895 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

896 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

897 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

899 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

900 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

901 
	#AT91C_SSC_CKS_TK
 (() 0x1)

902 
	#AT91C_SSC_CKS_RK
 (() 0x2)

903 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

904 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

905 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

906 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

907 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

908 
	#AT91C_SSC_START
 (() 0xF << 8)

909 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

910 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

911 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

912 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

913 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

914 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

915 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

916 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

917 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

918 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

919 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

921 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

922 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

923 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

924 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

925 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

926 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

927 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

928 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

929 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

930 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

931 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

932 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

933 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

936 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

937 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

939 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

940 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

941 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

942 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

943 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

944 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

945 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

946 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

947 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

948 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

949 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

950 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

954 

	)

958 
	s_AT91S_TWI
 {

959 
AT91_REG
 
	mTWI_CR
;

960 
AT91_REG
 
	mTWI_MMR
;

961 
AT91_REG
 
	mRe£rved0
[1];

962 
AT91_REG
 
	mTWI_IADR
;

963 
AT91_REG
 
	mTWI_CWGR
;

964 
AT91_REG
 
	mRe£rved1
[3];

965 
AT91_REG
 
	mTWI_SR
;

966 
AT91_REG
 
	mTWI_IER
;

967 
AT91_REG
 
	mTWI_IDR
;

968 
AT91_REG
 
	mTWI_IMR
;

969 
AT91_REG
 
	mTWI_RHR
;

970 
AT91_REG
 
	mTWI_THR
;

971 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

974 
	#AT91C_TWI_START
 (() 0x1 << 0)

975 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

976 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

977 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

978 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

980 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

981 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

982 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

983 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

984 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

985 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

986 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

988 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

989 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

990 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

992 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

993 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

994 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

995 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

996 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

997 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1001 

	)

1005 
	s_AT91S_PWMC_CH
 {

1006 
AT91_REG
 
	mPWMC_CMR
;

1007 
AT91_REG
 
	mPWMC_CDTYR
;

1008 
AT91_REG
 
	mPWMC_CPRDR
;

1009 
AT91_REG
 
	mPWMC_CCNTR
;

1010 
AT91_REG
 
	mPWMC_CUPDR
;

1011 
AT91_REG
 
	mPWMC_Re£rved
[3];

1012 } 
	tAT91S_PWMC_CH
, *
	tAT91PS_PWMC_CH
;

1015 
	#AT91C_PWMC_CPRE
 (() 0xF << 0)

1016 
	#AT91C_PWMC_CPRE_MCK
 (() 0x0)

1017 
	#AT91C_PWMC_CPRE_MCKA
 (() 0xB)

1018 
	#AT91C_PWMC_CPRE_MCKB
 (() 0xC)

1019 
	#AT91C_PWMC_CALG
 (() 0x1 << 8)

1020 
	#AT91C_PWMC_CPOL
 (() 0x1 << 9)

1021 
	#AT91C_PWMC_CPD
 (() 0x1 << 10)

1023 
	#AT91C_PWMC_CDTY
 (() 0x0 << 0)

1025 
	#AT91C_PWMC_CPRD
 (() 0x0 << 0)

1027 
	#AT91C_PWMC_CCNT
 (() 0x0 << 0)

1029 
	#AT91C_PWMC_CUPD
 (() 0x0 << 0)

1030 

	)

1034 
	s_AT91S_PWMC
 {

1035 
AT91_REG
 
	mPWMC_MR
;

1036 
AT91_REG
 
	mPWMC_ENA
;

1037 
AT91_REG
 
	mPWMC_DIS
;

1038 
AT91_REG
 
	mPWMC_SR
;

1039 
AT91_REG
 
	mPWMC_IER
;

1040 
AT91_REG
 
	mPWMC_IDR
;

1041 
AT91_REG
 
	mPWMC_IMR
;

1042 
AT91_REG
 
	mPWMC_ISR
;

1043 
AT91_REG
 
	mRe£rved0
[55];

1044 
AT91_REG
 
	mPWMC_VR
;

1045 
AT91_REG
 
	mRe£rved1
[64];

1046 
AT91S_PWMC_CH
 
	mPWMC_CH
[4];

1047 } 
	tAT91S_PWMC
, *
	tAT91PS_PWMC
;

1050 
	#AT91C_PWMC_DIVA
 (() 0xFF << 0)

1051 
	#AT91C_PWMC_PREA
 (() 0xF << 8)

1052 
	#AT91C_PWMC_PREA_MCK
 (() 0x0 << 8)

1053 
	#AT91C_PWMC_DIVB
 (() 0xFF << 16)

1054 
	#AT91C_PWMC_PREB
 (() 0xF << 24)

1055 
	#AT91C_PWMC_PREB_MCK
 (() 0x0 << 24)

1057 
	#AT91C_PWMC_CHID0
 (() 0x1 << 0)

1058 
	#AT91C_PWMC_CHID1
 (() 0x1 << 1)

1059 
	#AT91C_PWMC_CHID2
 (() 0x1 << 2)

1060 
	#AT91C_PWMC_CHID3
 (() 0x1 << 3)

1067 

	)

1071 
	s_AT91S_UDP
 {

1072 
AT91_REG
 
	mUDP_NUM
;

1073 
AT91_REG
 
	mUDP_GLBSTATE
;

1074 
AT91_REG
 
	mUDP_FADDR
;

1075 
AT91_REG
 
	mRe£rved0
[1];

1076 
AT91_REG
 
	mUDP_IER
;

1077 
AT91_REG
 
	mUDP_IDR
;

1078 
AT91_REG
 
	mUDP_IMR
;

1079 
AT91_REG
 
	mUDP_ISR
;

1080 
AT91_REG
 
	mUDP_ICR
;

1081 
AT91_REG
 
	mRe£rved1
[1];

1082 
AT91_REG
 
	mUDP_RSTEP
;

1083 
AT91_REG
 
	mRe£rved2
[1];

1084 
AT91_REG
 
	mUDP_CSR
[6];

1085 
AT91_REG
 
	mRe£rved3
[2];

1086 
AT91_REG
 
	mUDP_FDR
[6];

1087 
AT91_REG
 
	mRe£rved4
[3];

1088 
AT91_REG
 
	mUDP_TXVC
;

1089 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1092 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1093 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1094 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1096 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1097 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1098 
	#AT91C_UDP_ESR
 (() 0x1 << 2)

1099 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1100 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 4)

1102 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1103 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1105 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1106 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1107 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1108 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1109 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1110 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1111 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1112 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1113 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1114 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1115 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1119 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1122 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1123 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1124 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1125 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1126 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1127 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1129 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1130 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1131 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1132 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1133 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1134 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1135 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1136 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1137 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1138 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1139 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1140 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1141 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1142 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1143 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1144 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1145 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1146 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1147 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1149 
	#AT91C_UDP_TXVDIS
 (() 0x1 << 8)

1150 
	#AT91C_UDP_PUON
 (() 0x1 << 9)

1151 

	)

1155 
	s_AT91S_TC
 {

1156 
AT91_REG
 
	mTC_CCR
;

1157 
AT91_REG
 
	mTC_CMR
;

1158 
AT91_REG
 
	mRe£rved0
[2];

1159 
AT91_REG
 
	mTC_CV
;

1160 
AT91_REG
 
	mTC_RA
;

1161 
AT91_REG
 
	mTC_RB
;

1162 
AT91_REG
 
	mTC_RC
;

1163 
AT91_REG
 
	mTC_SR
;

1164 
AT91_REG
 
	mTC_IER
;

1165 
AT91_REG
 
	mTC_IDR
;

1166 
AT91_REG
 
	mTC_IMR
;

1167 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1170 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1171 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1172 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1174 
	#AT91C_TC_CLKS
 (() 0x7 << 0)

1175 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (() 0x0)

1176 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (() 0x1)

1177 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (() 0x2)

1178 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (() 0x3)

1179 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (() 0x4)

1180 
	#AT91C_TC_CLKS_XC0
 (() 0x5)

1181 
	#AT91C_TC_CLKS_XC1
 (() 0x6)

1182 
	#AT91C_TC_CLKS_XC2
 (() 0x7)

1183 
	#AT91C_TC_CLKI
 (() 0x1 << 3)

1184 
	#AT91C_TC_BURST
 (() 0x3 << 4)

1185 
	#AT91C_TC_BURST_NONE
 (() 0x0 << 4)

1186 
	#AT91C_TC_BURST_XC0
 (() 0x1 << 4)

1187 
	#AT91C_TC_BURST_XC1
 (() 0x2 << 4)

1188 
	#AT91C_TC_BURST_XC2
 (() 0x3 << 4)

1189 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1190 
	#AT91C_TC_LDBSTOP
 (() 0x1 << 6)

1191 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1192 
	#AT91C_TC_LDBDIS
 (() 0x1 << 7)

1193 
	#AT91C_TC_ETRGEDG
 (() 0x3 << 8)

1194 
	#AT91C_TC_ETRGEDG_NONE
 (() 0x0 << 8)

1195 
	#AT91C_TC_ETRGEDG_RISING
 (() 0x1 << 8)

1196 
	#AT91C_TC_ETRGEDG_FALLING
 (() 0x2 << 8)

1197 
	#AT91C_TC_ETRGEDG_BOTH
 (() 0x3 << 8)

1198 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1199 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1200 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1201 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1202 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1203 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1204 
	#AT91C_TC_EEVT_TIOB
 (() 0x0 << 10)

1205 
	#AT91C_TC_EEVT_XC0
 (() 0x1 << 10)

1206 
	#AT91C_TC_EEVT_XC1
 (() 0x2 << 10)

1207 
	#AT91C_TC_EEVT_XC2
 (() 0x3 << 10)

1208 
	#AT91C_TC_ABETRG
 (() 0x1 << 10)

1209 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1210 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1211 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1212 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1213 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1214 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1215 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1216 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1217 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1218 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1219 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1220 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1221 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1222 
	#AT91C_TC_LDRA
 (() 0x3 << 16)

1223 
	#AT91C_TC_LDRA_NONE
 (() 0x0 << 16)

1224 
	#AT91C_TC_LDRA_RISING
 (() 0x1 << 16)

1225 
	#AT91C_TC_LDRA_FALLING
 (() 0x2 << 16)

1226 
	#AT91C_TC_LDRA_BOTH
 (() 0x3 << 16)

1227 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1228 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1229 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1230 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1231 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1232 
	#AT91C_TC_LDRB
 (() 0x3 << 18)

1233 
	#AT91C_TC_LDRB_NONE
 (() 0x0 << 18)

1234 
	#AT91C_TC_LDRB_RISING
 (() 0x1 << 18)

1235 
	#AT91C_TC_LDRB_FALLING
 (() 0x2 << 18)

1236 
	#AT91C_TC_LDRB_BOTH
 (() 0x3 << 18)

1237 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1238 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1239 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1240 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1241 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1242 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1243 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1244 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1245 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1246 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1247 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1248 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1249 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1250 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1251 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1252 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1253 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1254 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1255 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1256 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1257 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1258 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1259 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1260 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1261 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1262 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1263 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1264 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1265 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1266 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1268 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1269 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1270 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1271 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1272 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1273 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1274 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1275 
	#AT91C_TC_ETRGS
 (() 0x1 << 7)

1276 
	#AT91C_TC_CLKSTA
 (() 0x1 << 16)

1277 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1278 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1282 

	)

1286 
	s_AT91S_TCB
 {

1287 
AT91S_TC
 
	mTCB_TC0
;

1288 
AT91_REG
 
	mRe£rved0
[4];

1289 
AT91S_TC
 
	mTCB_TC1
;

1290 
AT91_REG
 
	mRe£rved1
[4];

1291 
AT91S_TC
 
	mTCB_TC2
;

1292 
AT91_REG
 
	mRe£rved2
[4];

1293 
AT91_REG
 
	mTCB_BCR
;

1294 
AT91_REG
 
	mTCB_BMR
;

1295 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1298 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1300 
	#AT91C_TCB_TC0XC0S
 (() 0x3 << 0)

1301 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1302 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1303 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1304 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1305 
	#AT91C_TCB_TC1XC1S
 (() 0x3 << 2)

1306 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1307 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1308 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1309 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1310 
	#AT91C_TCB_TC2XC2S
 (() 0x3 << 4)

1311 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1312 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1313 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1314 
	#AT91C_TCB_TC2XC2S_TIOA1
 (() 0x3 << 4)

1315 

	)

1319 
	s_AT91S_CAN_MB
 {

1320 
AT91_REG
 
	mCAN_MB_MMR
;

1321 
AT91_REG
 
	mCAN_MB_MAM
;

1322 
AT91_REG
 
	mCAN_MB_MID
;

1323 
AT91_REG
 
	mCAN_MB_MFID
;

1324 
AT91_REG
 
	mCAN_MB_MSR
;

1325 
AT91_REG
 
	mCAN_MB_MDL
;

1326 
AT91_REG
 
	mCAN_MB_MDH
;

1327 
AT91_REG
 
	mCAN_MB_MCR
;

1328 } 
	tAT91S_CAN_MB
, *
	tAT91PS_CAN_MB
;

1331 
	#AT91C_CAN_MTIMEMARK
 (() 0xFFFF << 0)

1332 
	#AT91C_CAN_PRIOR
 (() 0xF << 16)

1333 
	#AT91C_CAN_MOT
 (() 0x7 << 24)

1334 
	#AT91C_CAN_MOT_DIS
 (() 0x0 << 24)

1335 
	#AT91C_CAN_MOT_RX
 (() 0x1 << 24)

1336 
	#AT91C_CAN_MOT_RXOVERWRITE
 (() 0x2 << 24)

1337 
	#AT91C_CAN_MOT_TX
 (() 0x3 << 24)

1338 
	#AT91C_CAN_MOT_CONSUMER
 (() 0x4 << 24)

1339 
	#AT91C_CAN_MOT_PRODUCER
 (() 0x5 << 24)

1341 
	#AT91C_CAN_MIDvB
 (() 0x3FFFF << 0)

1342 
	#AT91C_CAN_MIDvA
 (() 0x7FF << 18)

1343 
	#AT91C_CAN_MIDE
 (() 0x1 << 29)

1347 
	#AT91C_CAN_MTIMESTAMP
 (() 0xFFFF << 0)

1348 
	#AT91C_CAN_MDLC
 (() 0xF << 16)

1349 
	#AT91C_CAN_MRTR
 (() 0x1 << 20)

1350 
	#AT91C_CAN_MABT
 (() 0x1 << 22)

1351 
	#AT91C_CAN_MRDY
 (() 0x1 << 23)

1352 
	#AT91C_CAN_MMI
 (() 0x1 << 24)

1356 
	#AT91C_CAN_MACR
 (() 0x1 << 22)

1357 
	#AT91C_CAN_MTCR
 (() 0x1 << 23)

1358 

	)

1362 
	s_AT91S_CAN
 {

1363 
AT91_REG
 
	mCAN_MR
;

1364 
AT91_REG
 
	mCAN_IER
;

1365 
AT91_REG
 
	mCAN_IDR
;

1366 
AT91_REG
 
	mCAN_IMR
;

1367 
AT91_REG
 
	mCAN_SR
;

1368 
AT91_REG
 
	mCAN_BR
;

1369 
AT91_REG
 
	mCAN_TIM
;

1370 
AT91_REG
 
	mCAN_TIMESTP
;

1371 
AT91_REG
 
	mCAN_ECR
;

1372 
AT91_REG
 
	mCAN_TCR
;

1373 
AT91_REG
 
	mCAN_ACR
;

1374 
AT91_REG
 
	mRe£rved0
[52];

1375 
AT91_REG
 
	mCAN_VR
;

1376 
AT91_REG
 
	mRe£rved1
[64];

1377 
AT91S_CAN_MB
 
	mCAN_MB0
;

1378 
AT91S_CAN_MB
 
	mCAN_MB1
;

1379 
AT91S_CAN_MB
 
	mCAN_MB2
;

1380 
AT91S_CAN_MB
 
	mCAN_MB3
;

1381 
AT91S_CAN_MB
 
	mCAN_MB4
;

1382 
AT91S_CAN_MB
 
	mCAN_MB5
;

1383 
AT91S_CAN_MB
 
	mCAN_MB6
;

1384 
AT91S_CAN_MB
 
	mCAN_MB7
;

1385 
AT91S_CAN_MB
 
	mCAN_MB8
;

1386 
AT91S_CAN_MB
 
	mCAN_MB9
;

1387 
AT91S_CAN_MB
 
	mCAN_MB10
;

1388 
AT91S_CAN_MB
 
	mCAN_MB11
;

1389 
AT91S_CAN_MB
 
	mCAN_MB12
;

1390 
AT91S_CAN_MB
 
	mCAN_MB13
;

1391 
AT91S_CAN_MB
 
	mCAN_MB14
;

1392 
AT91S_CAN_MB
 
	mCAN_MB15
;

1393 } 
	tAT91S_CAN
, *
	tAT91PS_CAN
;

1396 
	#AT91C_CAN_CANEN
 (() 0x1 << 0)

1397 
	#AT91C_CAN_LPM
 (() 0x1 << 1)

1398 
	#AT91C_CAN_ABM
 (() 0x1 << 2)

1399 
	#AT91C_CAN_OVL
 (() 0x1 << 3)

1400 
	#AT91C_CAN_TEOF
 (() 0x1 << 4)

1401 
	#AT91C_CAN_TTM
 (() 0x1 << 5)

1402 
	#AT91C_CAN_TIMFRZ
 (() 0x1 << 6)

1403 
	#AT91C_CAN_DRPT
 (() 0x1 << 7)

1405 
	#AT91C_CAN_MB0
 (() 0x1 << 0)

1406 
	#AT91C_CAN_MB1
 (() 0x1 << 1)

1407 
	#AT91C_CAN_MB2
 (() 0x1 << 2)

1408 
	#AT91C_CAN_MB3
 (() 0x1 << 3)

1409 
	#AT91C_CAN_MB4
 (() 0x1 << 4)

1410 
	#AT91C_CAN_MB5
 (() 0x1 << 5)

1411 
	#AT91C_CAN_MB6
 (() 0x1 << 6)

1412 
	#AT91C_CAN_MB7
 (() 0x1 << 7)

1413 
	#AT91C_CAN_MB8
 (() 0x1 << 8)

1414 
	#AT91C_CAN_MB9
 (() 0x1 << 9)

1415 
	#AT91C_CAN_MB10
 (() 0x1 << 10)

1416 
	#AT91C_CAN_MB11
 (() 0x1 << 11)

1417 
	#AT91C_CAN_MB12
 (() 0x1 << 12)

1418 
	#AT91C_CAN_MB13
 (() 0x1 << 13)

1419 
	#AT91C_CAN_MB14
 (() 0x1 << 14)

1420 
	#AT91C_CAN_MB15
 (() 0x1 << 15)

1421 
	#AT91C_CAN_ERRA
 (() 0x1 << 16)

1422 
	#AT91C_CAN_WARN
 (() 0x1 << 17)

1423 
	#AT91C_CAN_ERRP
 (() 0x1 << 18)

1424 
	#AT91C_CAN_BOFF
 (() 0x1 << 19)

1425 
	#AT91C_CAN_SLEEP
 (() 0x1 << 20)

1426 
	#AT91C_CAN_WAKEUP
 (() 0x1 << 21)

1427 
	#AT91C_CAN_TOVF
 (() 0x1 << 22)

1428 
	#AT91C_CAN_TSTP
 (() 0x1 << 23)

1429 
	#AT91C_CAN_CERR
 (() 0x1 << 24)

1430 
	#AT91C_CAN_SERR
 (() 0x1 << 25)

1431 
	#AT91C_CAN_AERR
 (() 0x1 << 26)

1432 
	#AT91C_CAN_FERR
 (() 0x1 << 27)

1433 
	#AT91C_CAN_BERR
 (() 0x1 << 28)

1437 
	#AT91C_CAN_RBSY
 (() 0x1 << 29)

1438 
	#AT91C_CAN_TBSY
 (() 0x1 << 30)

1439 
	#AT91C_CAN_OVLY
 (() 0x1 << 31)

1441 
	#AT91C_CAN_PHASE2
 (() 0x7 << 0)

1442 
	#AT91C_CAN_PHASE1
 (() 0x7 << 4)

1443 
	#AT91C_CAN_PROPAG
 (() 0x7 << 8)

1444 
	#AT91C_CAN_SYNC
 (() 0x3 << 12)

1445 
	#AT91C_CAN_BRP
 (() 0x7F << 16)

1446 
	#AT91C_CAN_SMP
 (() 0x1 << 24)

1448 
	#AT91C_CAN_TIMER
 (() 0xFFFF << 0)

1451 
	#AT91C_CAN_REC
 (() 0xFF << 0)

1452 
	#AT91C_CAN_TEC
 (() 0xFF << 16)

1454 
	#AT91C_CAN_TIMRST
 (() 0x1 << 31)

1456 

	)

1460 
	s_AT91S_EMAC
 {

1461 
AT91_REG
 
	mEMAC_NCR
;

1462 
AT91_REG
 
	mEMAC_NCFGR
;

1463 
AT91_REG
 
	mEMAC_NSR
;

1464 
AT91_REG
 
	mRe£rved0
[2];

1465 
AT91_REG
 
	mEMAC_TSR
;

1466 
AT91_REG
 
	mEMAC_RBQP
;

1467 
AT91_REG
 
	mEMAC_TBQP
;

1468 
AT91_REG
 
	mEMAC_RSR
;

1469 
AT91_REG
 
	mEMAC_ISR
;

1470 
AT91_REG
 
	mEMAC_IER
;

1471 
AT91_REG
 
	mEMAC_IDR
;

1472 
AT91_REG
 
	mEMAC_IMR
;

1473 
AT91_REG
 
	mEMAC_MAN
;

1474 
AT91_REG
 
	mEMAC_PTR
;

1475 
AT91_REG
 
	mEMAC_PFR
;

1476 
AT91_REG
 
	mEMAC_FTO
;

1477 
AT91_REG
 
	mEMAC_SCF
;

1478 
AT91_REG
 
	mEMAC_MCF
;

1479 
AT91_REG
 
	mEMAC_FRO
;

1480 
AT91_REG
 
	mEMAC_FCSE
;

1481 
AT91_REG
 
	mEMAC_ALE
;

1482 
AT91_REG
 
	mEMAC_DTF
;

1483 
AT91_REG
 
	mEMAC_LCOL
;

1484 
AT91_REG
 
	mEMAC_ECOL
;

1485 
AT91_REG
 
	mEMAC_TUND
;

1486 
AT91_REG
 
	mEMAC_CSE
;

1487 
AT91_REG
 
	mEMAC_RRE
;

1488 
AT91_REG
 
	mEMAC_ROV
;

1489 
AT91_REG
 
	mEMAC_RSE
;

1490 
AT91_REG
 
	mEMAC_ELE
;

1491 
AT91_REG
 
	mEMAC_RJA
;

1492 
AT91_REG
 
	mEMAC_USF
;

1493 
AT91_REG
 
	mEMAC_STE
;

1494 
AT91_REG
 
	mEMAC_RLE
;

1495 
AT91_REG
 
	mEMAC_TPF
;

1496 
AT91_REG
 
	mEMAC_HRB
;

1497 
AT91_REG
 
	mEMAC_HRT
;

1498 
AT91_REG
 
	mEMAC_SA1L
;

1499 
AT91_REG
 
	mEMAC_SA1H
;

1500 
AT91_REG
 
	mEMAC_SA2L
;

1501 
AT91_REG
 
	mEMAC_SA2H
;

1502 
AT91_REG
 
	mEMAC_SA3L
;

1503 
AT91_REG
 
	mEMAC_SA3H
;

1504 
AT91_REG
 
	mEMAC_SA4L
;

1505 
AT91_REG
 
	mEMAC_SA4H
;

1506 
AT91_REG
 
	mEMAC_TID
;

1507 
AT91_REG
 
	mEMAC_TPQ
;

1508 
AT91_REG
 
	mEMAC_USRIO
;

1509 
AT91_REG
 
	mEMAC_WOL
;

1510 
AT91_REG
 
	mRe£rved1
[13];

1511 
AT91_REG
 
	mEMAC_REV
;

1512 } 
	tAT91S_EMAC
, *
	tAT91PS_EMAC
;

1515 
	#AT91C_EMAC_LB
 (() 0x1 << 0)

1516 
	#AT91C_EMAC_LLB
 (() 0x1 << 1)

1517 
	#AT91C_EMAC_RE
 (() 0x1 << 2)

1518 
	#AT91C_EMAC_TE
 (() 0x1 << 3)

1519 
	#AT91C_EMAC_MPE
 (() 0x1 << 4)

1520 
	#AT91C_EMAC_CLRSTAT
 (() 0x1 << 5)

1521 
	#AT91C_EMAC_INCSTAT
 (() 0x1 << 6)

1522 
	#AT91C_EMAC_WESTAT
 (() 0x1 << 7)

1523 
	#AT91C_EMAC_BP
 (() 0x1 << 8)

1524 
	#AT91C_EMAC_TSTART
 (() 0x1 << 9)

1525 
	#AT91C_EMAC_THALT
 (() 0x1 << 10)

1526 
	#AT91C_EMAC_TPFR
 (() 0x1 << 11)

1527 
	#AT91C_EMAC_TZQ
 (() 0x1 << 12)

1529 
	#AT91C_EMAC_SPD
 (() 0x1 << 0)

1530 
	#AT91C_EMAC_FD
 (() 0x1 << 1)

1531 
	#AT91C_EMAC_JFRAME
 (() 0x1 << 3)

1532 
	#AT91C_EMAC_CAF
 (() 0x1 << 4)

1533 
	#AT91C_EMAC_NBC
 (() 0x1 << 5)

1534 
	#AT91C_EMAC_MTI
 (() 0x1 << 6)

1535 
	#AT91C_EMAC_UNI
 (() 0x1 << 7)

1536 
	#AT91C_EMAC_BIG
 (() 0x1 << 8)

1537 
	#AT91C_EMAC_EAE
 (() 0x1 << 9)

1538 
	#AT91C_EMAC_CLK
 (() 0x3 << 10)

1539 
	#AT91C_EMAC_CLK_HCLK_8
 (() 0x0 << 10)

1540 
	#AT91C_EMAC_CLK_HCLK_16
 (() 0x1 << 10)

1541 
	#AT91C_EMAC_CLK_HCLK_32
 (() 0x2 << 10)

1542 
	#AT91C_EMAC_CLK_HCLK_64
 (() 0x3 << 10)

1543 
	#AT91C_EMAC_RTY
 (() 0x1 << 12)

1544 
	#AT91C_EMAC_PAE
 (() 0x1 << 13)

1545 
	#AT91C_EMAC_RBOF
 (() 0x3 << 14)

1546 
	#AT91C_EMAC_RBOF_OFFSET_0
 (() 0x0 << 14)

1547 
	#AT91C_EMAC_RBOF_OFFSET_1
 (() 0x1 << 14)

1548 
	#AT91C_EMAC_RBOF_OFFSET_2
 (() 0x2 << 14)

1549 
	#AT91C_EMAC_RBOF_OFFSET_3
 (() 0x3 << 14)

1550 
	#AT91C_EMAC_RLCE
 (() 0x1 << 16)

1551 
	#AT91C_EMAC_DRFCS
 (() 0x1 << 17)

1552 
	#AT91C_EMAC_EFRHD
 (() 0x1 << 18)

1553 
	#AT91C_EMAC_IRXFCS
 (() 0x1 << 19)

1555 
	#AT91C_EMAC_LINKR
 (() 0x1 << 0)

1556 
	#AT91C_EMAC_MDIO
 (() 0x1 << 1)

1557 
	#AT91C_EMAC_IDLE
 (() 0x1 << 2)

1559 
	#AT91C_EMAC_UBR
 (() 0x1 << 0)

1560 
	#AT91C_EMAC_COL
 (() 0x1 << 1)

1561 
	#AT91C_EMAC_RLES
 (() 0x1 << 2)

1562 
	#AT91C_EMAC_TGO
 (() 0x1 << 3)

1563 
	#AT91C_EMAC_BEX
 (() 0x1 << 4)

1564 
	#AT91C_EMAC_COMP
 (() 0x1 << 5)

1565 
	#AT91C_EMAC_UND
 (() 0x1 << 6)

1567 
	#AT91C_EMAC_BNA
 (() 0x1 << 0)

1568 
	#AT91C_EMAC_REC
 (() 0x1 << 1)

1569 
	#AT91C_EMAC_OVR
 (() 0x1 << 2)

1571 
	#AT91C_EMAC_MFD
 (() 0x1 << 0)

1572 
	#AT91C_EMAC_RCOMP
 (() 0x1 << 1)

1573 
	#AT91C_EMAC_RXUBR
 (() 0x1 << 2)

1574 
	#AT91C_EMAC_TXUBR
 (() 0x1 << 3)

1575 
	#AT91C_EMAC_TUNDR
 (() 0x1 << 4)

1576 
	#AT91C_EMAC_RLEX
 (() 0x1 << 5)

1577 
	#AT91C_EMAC_TXERR
 (() 0x1 << 6)

1578 
	#AT91C_EMAC_TCOMP
 (() 0x1 << 7)

1579 
	#AT91C_EMAC_LINK
 (() 0x1 << 9)

1580 
	#AT91C_EMAC_ROVR
 (() 0x1 << 10)

1581 
	#AT91C_EMAC_HRESP
 (() 0x1 << 11)

1582 
	#AT91C_EMAC_PFRE
 (() 0x1 << 12)

1583 
	#AT91C_EMAC_PTZ
 (() 0x1 << 13)

1588 
	#AT91C_EMAC_DATA
 (() 0xFFFF << 0)

1589 
	#AT91C_EMAC_CODE
 (() 0x3 << 16)

1590 
	#AT91C_EMAC_REGA
 (() 0x1F << 18)

1591 
	#AT91C_EMAC_PHYA
 (() 0x1F << 23)

1592 
	#AT91C_EMAC_RW
 (() 0x3 << 28)

1593 
	#AT91C_EMAC_SOF
 (() 0x3 << 30)

1595 
	#AT91C_EMAC_RMII
 (() 0x1 << 0)

1597 
	#AT91C_EMAC_IP
 (() 0xFFFF << 0)

1598 
	#AT91C_EMAC_MAG
 (() 0x1 << 16)

1599 
	#AT91C_EMAC_ARP
 (() 0x1 << 17)

1600 
	#AT91C_EMAC_SA1
 (() 0x1 << 18)

1602 
	#AT91C_EMAC_REVREF
 (() 0xFFFF << 0)

1603 
	#AT91C_EMAC_PARTREF
 (() 0xFFFF << 16)

1604 

	)

1608 
	s_AT91S_ADC
 {

1609 
AT91_REG
 
	mADC_CR
;

1610 
AT91_REG
 
	mADC_MR
;

1611 
AT91_REG
 
	mRe£rved0
[2];

1612 
AT91_REG
 
	mADC_CHER
;

1613 
AT91_REG
 
	mADC_CHDR
;

1614 
AT91_REG
 
	mADC_CHSR
;

1615 
AT91_REG
 
	mADC_SR
;

1616 
AT91_REG
 
	mADC_LCDR
;

1617 
AT91_REG
 
	mADC_IER
;

1618 
AT91_REG
 
	mADC_IDR
;

1619 
AT91_REG
 
	mADC_IMR
;

1620 
AT91_REG
 
	mADC_CDR0
;

1621 
AT91_REG
 
	mADC_CDR1
;

1622 
AT91_REG
 
	mADC_CDR2
;

1623 
AT91_REG
 
	mADC_CDR3
;

1624 
AT91_REG
 
	mADC_CDR4
;

1625 
AT91_REG
 
	mADC_CDR5
;

1626 
AT91_REG
 
	mADC_CDR6
;

1627 
AT91_REG
 
	mADC_CDR7
;

1628 
AT91_REG
 
	mRe£rved1
[44];

1629 
AT91_REG
 
	mADC_RPR
;

1630 
AT91_REG
 
	mADC_RCR
;

1631 
AT91_REG
 
	mADC_TPR
;

1632 
AT91_REG
 
	mADC_TCR
;

1633 
AT91_REG
 
	mADC_RNPR
;

1634 
AT91_REG
 
	mADC_RNCR
;

1635 
AT91_REG
 
	mADC_TNPR
;

1636 
AT91_REG
 
	mADC_TNCR
;

1637 
AT91_REG
 
	mADC_PTCR
;

1638 
AT91_REG
 
	mADC_PTSR
;

1639 } 
	tAT91S_ADC
, *
	tAT91PS_ADC
;

1642 
	#AT91C_ADC_SWRST
 (() 0x1 << 0)

1643 
	#AT91C_ADC_START
 (() 0x1 << 1)

1645 
	#AT91C_ADC_TRGEN
 (() 0x1 << 0)

1646 
	#AT91C_ADC_TRGEN_DIS
 (() 0x0)

1647 
	#AT91C_ADC_TRGEN_EN
 (() 0x1)

1648 
	#AT91C_ADC_TRGSEL
 (() 0x7 << 1)

1649 
	#AT91C_ADC_TRGSEL_TIOA0
 (() 0x0 << 1)

1650 
	#AT91C_ADC_TRGSEL_TIOA1
 (() 0x1 << 1)

1651 
	#AT91C_ADC_TRGSEL_TIOA2
 (() 0x2 << 1)

1652 
	#AT91C_ADC_TRGSEL_TIOA3
 (() 0x3 << 1)

1653 
	#AT91C_ADC_TRGSEL_TIOA4
 (() 0x4 << 1)

1654 
	#AT91C_ADC_TRGSEL_TIOA5
 (() 0x5 << 1)

1655 
	#AT91C_ADC_TRGSEL_EXT
 (() 0x6 << 1)

1656 
	#AT91C_ADC_LOWRES
 (() 0x1 << 4)

1657 
	#AT91C_ADC_LOWRES_10_BIT
 (() 0x0 << 4)

1658 
	#AT91C_ADC_LOWRES_8_BIT
 (() 0x1 << 4)

1659 
	#AT91C_ADC_SLEEP
 (() 0x1 << 5)

1660 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (() 0x0 << 5)

1661 
	#AT91C_ADC_SLEEP_MODE
 (() 0x1 << 5)

1662 
	#AT91C_ADC_PRESCAL
 (() 0x3F << 8)

1663 
	#AT91C_ADC_STARTUP
 (() 0x1F << 16)

1664 
	#AT91C_ADC_SHTIM
 (() 0xF << 24)

1666 
	#AT91C_ADC_CH0
 (() 0x1 << 0)

1667 
	#AT91C_ADC_CH1
 (() 0x1 << 1)

1668 
	#AT91C_ADC_CH2
 (() 0x1 << 2)

1669 
	#AT91C_ADC_CH3
 (() 0x1 << 3)

1670 
	#AT91C_ADC_CH4
 (() 0x1 << 4)

1671 
	#AT91C_ADC_CH5
 (() 0x1 << 5)

1672 
	#AT91C_ADC_CH6
 (() 0x1 << 6)

1673 
	#AT91C_ADC_CH7
 (() 0x1 << 7)

1677 
	#AT91C_ADC_EOC0
 (() 0x1 << 0)

1678 
	#AT91C_ADC_EOC1
 (() 0x1 << 1)

1679 
	#AT91C_ADC_EOC2
 (() 0x1 << 2)

1680 
	#AT91C_ADC_EOC3
 (() 0x1 << 3)

1681 
	#AT91C_ADC_EOC4
 (() 0x1 << 4)

1682 
	#AT91C_ADC_EOC5
 (() 0x1 << 5)

1683 
	#AT91C_ADC_EOC6
 (() 0x1 << 6)

1684 
	#AT91C_ADC_EOC7
 (() 0x1 << 7)

1685 
	#AT91C_ADC_OVRE0
 (() 0x1 << 8)

1686 
	#AT91C_ADC_OVRE1
 (() 0x1 << 9)

1687 
	#AT91C_ADC_OVRE2
 (() 0x1 << 10)

1688 
	#AT91C_ADC_OVRE3
 (() 0x1 << 11)

1689 
	#AT91C_ADC_OVRE4
 (() 0x1 << 12)

1690 
	#AT91C_ADC_OVRE5
 (() 0x1 << 13)

1691 
	#AT91C_ADC_OVRE6
 (() 0x1 << 14)

1692 
	#AT91C_ADC_OVRE7
 (() 0x1 << 15)

1693 
	#AT91C_ADC_DRDY
 (() 0x1 << 16)

1694 
	#AT91C_ADC_GOVRE
 (() 0x1 << 17)

1695 
	#AT91C_ADC_ENDRX
 (() 0x1 << 18)

1696 
	#AT91C_ADC_RXBUFF
 (() 0x1 << 19)

1698 
	#AT91C_ADC_LDATA
 (() 0x3FF << 0)

1703 
	#AT91C_ADC_DATA
 (() 0x3FF << 0)

1711 

	)

1715 
	s_AT91S_AES
 {

1716 
AT91_REG
 
	mAES_CR
;

1717 
AT91_REG
 
	mAES_MR
;

1718 
AT91_REG
 
	mRe£rved0
[2];

1719 
AT91_REG
 
	mAES_IER
;

1720 
AT91_REG
 
	mAES_IDR
;

1721 
AT91_REG
 
	mAES_IMR
;

1722 
AT91_REG
 
	mAES_ISR
;

1723 
AT91_REG
 
	mAES_KEYWxR
[4];

1724 
AT91_REG
 
	mRe£rved1
[4];

1725 
AT91_REG
 
	mAES_IDATAxR
[4];

1726 
AT91_REG
 
	mAES_ODATAxR
[4];

1727 
AT91_REG
 
	mAES_IVxR
[4];

1728 
AT91_REG
 
	mRe£rved2
[35];

1729 
AT91_REG
 
	mAES_VR
;

1730 
AT91_REG
 
	mAES_RPR
;

1731 
AT91_REG
 
	mAES_RCR
;

1732 
AT91_REG
 
	mAES_TPR
;

1733 
AT91_REG
 
	mAES_TCR
;

1734 
AT91_REG
 
	mAES_RNPR
;

1735 
AT91_REG
 
	mAES_RNCR
;

1736 
AT91_REG
 
	mAES_TNPR
;

1737 
AT91_REG
 
	mAES_TNCR
;

1738 
AT91_REG
 
	mAES_PTCR
;

1739 
AT91_REG
 
	mAES_PTSR
;

1740 } 
	tAT91S_AES
, *
	tAT91PS_AES
;

1743 
	#AT91C_AES_START
 (() 0x1 << 0)

1744 
	#AT91C_AES_SWRST
 (() 0x1 << 8)

1745 
	#AT91C_AES_LOADSEED
 (() 0x1 << 16)

1747 
	#AT91C_AES_CIPHER
 (() 0x1 << 0)

1748 
	#AT91C_AES_PROCDLY
 (() 0xF << 4)

1749 
	#AT91C_AES_SMOD
 (() 0x3 << 8)

1750 
	#AT91C_AES_SMOD_MANUAL
 (() 0x0 << 8)

1751 
	#AT91C_AES_SMOD_AUTO
 (() 0x1 << 8)

1752 
	#AT91C_AES_SMOD_PDC
 (() 0x2 << 8)

1753 
	#AT91C_AES_OPMOD
 (() 0x7 << 12)

1754 
	#AT91C_AES_OPMOD_ECB
 (() 0x0 << 12)

1755 
	#AT91C_AES_OPMOD_CBC
 (() 0x1 << 12)

1756 
	#AT91C_AES_OPMOD_OFB
 (() 0x2 << 12)

1757 
	#AT91C_AES_OPMOD_CFB
 (() 0x3 << 12)

1758 
	#AT91C_AES_OPMOD_CTR
 (() 0x4 << 12)

1759 
	#AT91C_AES_LOD
 (() 0x1 << 15)

1760 
	#AT91C_AES_CFBS
 (() 0x7 << 16)

1761 
	#AT91C_AES_CFBS_128_BIT
 (() 0x0 << 16)

1762 
	#AT91C_AES_CFBS_64_BIT
 (() 0x1 << 16)

1763 
	#AT91C_AES_CFBS_32_BIT
 (() 0x2 << 16)

1764 
	#AT91C_AES_CFBS_16_BIT
 (() 0x3 << 16)

1765 
	#AT91C_AES_CFBS_8_BIT
 (() 0x4 << 16)

1766 
	#AT91C_AES_CKEY
 (() 0xF << 20)

1767 
	#AT91C_AES_CTYPE
 (() 0x1F << 24)

1768 
	#AT91C_AES_CTYPE_TYPE1_EN
 (() 0x1 << 24)

1769 
	#AT91C_AES_CTYPE_TYPE2_EN
 (() 0x2 << 24)

1770 
	#AT91C_AES_CTYPE_TYPE3_EN
 (() 0x4 << 24)

1771 
	#AT91C_AES_CTYPE_TYPE4_EN
 (() 0x8 << 24)

1772 
	#AT91C_AES_CTYPE_TYPE5_EN
 (() 0x10 << 24)

1774 
	#AT91C_AES_DATRDY
 (() 0x1 << 0)

1775 
	#AT91C_AES_ENDRX
 (() 0x1 << 1)

1776 
	#AT91C_AES_ENDTX
 (() 0x1 << 2)

1777 
	#AT91C_AES_RXBUFF
 (() 0x1 << 3)

1778 
	#AT91C_AES_TXBUFE
 (() 0x1 << 4)

1779 
	#AT91C_AES_URAD
 (() 0x1 << 8)

1783 
	#AT91C_AES_URAT
 (() 0x7 << 12)

1784 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1785 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1786 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1787 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (() 0x3 << 12)

1788 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (() 0x4 << 12)

1789 
	#AT91C_AES_URAT_WO_REG_READ
 (() 0x5 << 12)

1790 

	)

1794 
	s_AT91S_TDES
 {

1795 
AT91_REG
 
	mTDES_CR
;

1796 
AT91_REG
 
	mTDES_MR
;

1797 
AT91_REG
 
	mRe£rved0
[2];

1798 
AT91_REG
 
	mTDES_IER
;

1799 
AT91_REG
 
	mTDES_IDR
;

1800 
AT91_REG
 
	mTDES_IMR
;

1801 
AT91_REG
 
	mTDES_ISR
;

1802 
AT91_REG
 
	mTDES_KEY1WxR
[2];

1803 
AT91_REG
 
	mTDES_KEY2WxR
[2];

1804 
AT91_REG
 
	mTDES_KEY3WxR
[2];

1805 
AT91_REG
 
	mRe£rved1
[2];

1806 
AT91_REG
 
	mTDES_IDATAxR
[2];

1807 
AT91_REG
 
	mRe£rved2
[2];

1808 
AT91_REG
 
	mTDES_ODATAxR
[2];

1809 
AT91_REG
 
	mRe£rved3
[2];

1810 
AT91_REG
 
	mTDES_IVxR
[2];

1811 
AT91_REG
 
	mRe£rved4
[37];

1812 
AT91_REG
 
	mTDES_VR
;

1813 
AT91_REG
 
	mTDES_RPR
;

1814 
AT91_REG
 
	mTDES_RCR
;

1815 
AT91_REG
 
	mTDES_TPR
;

1816 
AT91_REG
 
	mTDES_TCR
;

1817 
AT91_REG
 
	mTDES_RNPR
;

1818 
AT91_REG
 
	mTDES_RNCR
;

1819 
AT91_REG
 
	mTDES_TNPR
;

1820 
AT91_REG
 
	mTDES_TNCR
;

1821 
AT91_REG
 
	mTDES_PTCR
;

1822 
AT91_REG
 
	mTDES_PTSR
;

1823 } 
	tAT91S_TDES
, *
	tAT91PS_TDES
;

1826 
	#AT91C_TDES_START
 (() 0x1 << 0)

1827 
	#AT91C_TDES_SWRST
 (() 0x1 << 8)

1829 
	#AT91C_TDES_CIPHER
 (() 0x1 << 0)

1830 
	#AT91C_TDES_TDESMOD
 (() 0x1 << 1)

1831 
	#AT91C_TDES_KEYMOD
 (() 0x1 << 4)

1832 
	#AT91C_TDES_SMOD
 (() 0x3 << 8)

1833 
	#AT91C_TDES_SMOD_MANUAL
 (() 0x0 << 8)

1834 
	#AT91C_TDES_SMOD_AUTO
 (() 0x1 << 8)

1835 
	#AT91C_TDES_SMOD_PDC
 (() 0x2 << 8)

1836 
	#AT91C_TDES_OPMOD
 (() 0x3 << 12)

1837 
	#AT91C_TDES_OPMOD_ECB
 (() 0x0 << 12)

1838 
	#AT91C_TDES_OPMOD_CBC
 (() 0x1 << 12)

1839 
	#AT91C_TDES_OPMOD_OFB
 (() 0x2 << 12)

1840 
	#AT91C_TDES_OPMOD_CFB
 (() 0x3 << 12)

1841 
	#AT91C_TDES_LOD
 (() 0x1 << 15)

1842 
	#AT91C_TDES_CFBS
 (() 0x3 << 16)

1843 
	#AT91C_TDES_CFBS_64_BIT
 (() 0x0 << 16)

1844 
	#AT91C_TDES_CFBS_32_BIT
 (() 0x1 << 16)

1845 
	#AT91C_TDES_CFBS_16_BIT
 (() 0x2 << 16)

1846 
	#AT91C_TDES_CFBS_8_BIT
 (() 0x3 << 16)

1848 
	#AT91C_TDES_DATRDY
 (() 0x1 << 0)

1849 
	#AT91C_TDES_ENDRX
 (() 0x1 << 1)

1850 
	#AT91C_TDES_ENDTX
 (() 0x1 << 2)

1851 
	#AT91C_TDES_RXBUFF
 (() 0x1 << 3)

1852 
	#AT91C_TDES_TXBUFE
 (() 0x1 << 4)

1853 
	#AT91C_TDES_URAD
 (() 0x1 << 8)

1857 
	#AT91C_TDES_URAT
 (() 0x3 << 12)

1858 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1859 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1860 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1861 
	#AT91C_TDES_URAT_WO_REG_READ
 (() 0x3 << 12)

1862 

	)

1868 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1869 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1870 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1871 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1872 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1873 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1874 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1875 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1876 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1877 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1878 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1879 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1880 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1881 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1882 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1883 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1884 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1885 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1887 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1888 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1889 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1890 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1891 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1892 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1893 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1894 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1895 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1896 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1898 
	#AT91C_DBGU_EXID
 ((
AT91_REG
 *) 0xFFFFF244)

1899 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1900 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1901 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1902 
	#AT91C_DBGU_CIDR
 ((
AT91_REG
 *) 0xFFFFF240)

1903 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1904 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1905 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1906 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1907 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1908 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1909 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1911 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1912 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1913 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1914 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1915 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1916 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1917 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1918 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1919 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1920 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1921 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1922 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1923 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1924 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1925 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1926 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1927 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1928 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1929 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1930 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1931 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1932 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1933 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1934 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1935 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1936 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1937 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1938 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1939 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1941 
	#AT91C_PIOB_OWDR
 ((
AT91_REG
 *) 0xFFFFF6A4)

1942 
	#AT91C_PIOB_MDER
 ((
AT91_REG
 *) 0xFFFFF650)

1943 
	#AT91C_PIOB_PPUSR
 ((
AT91_REG
 *) 0xFFFFF668)

1944 
	#AT91C_PIOB_IMR
 ((
AT91_REG
 *) 0xFFFFF648)

1945 
	#AT91C_PIOB_ASR
 ((
AT91_REG
 *) 0xFFFFF670)

1946 
	#AT91C_PIOB_PPUDR
 ((
AT91_REG
 *) 0xFFFFF660)

1947 
	#AT91C_PIOB_PSR
 ((
AT91_REG
 *) 0xFFFFF608)

1948 
	#AT91C_PIOB_IER
 ((
AT91_REG
 *) 0xFFFFF640)

1949 
	#AT91C_PIOB_CODR
 ((
AT91_REG
 *) 0xFFFFF634)

1950 
	#AT91C_PIOB_OWER
 ((
AT91_REG
 *) 0xFFFFF6A0)

1951 
	#AT91C_PIOB_ABSR
 ((
AT91_REG
 *) 0xFFFFF678)

1952 
	#AT91C_PIOB_IFDR
 ((
AT91_REG
 *) 0xFFFFF624)

1953 
	#AT91C_PIOB_PDSR
 ((
AT91_REG
 *) 0xFFFFF63C)

1954 
	#AT91C_PIOB_IDR
 ((
AT91_REG
 *) 0xFFFFF644)

1955 
	#AT91C_PIOB_OWSR
 ((
AT91_REG
 *) 0xFFFFF6A8)

1956 
	#AT91C_PIOB_PDR
 ((
AT91_REG
 *) 0xFFFFF604)

1957 
	#AT91C_PIOB_ODR
 ((
AT91_REG
 *) 0xFFFFF614)

1958 
	#AT91C_PIOB_IFSR
 ((
AT91_REG
 *) 0xFFFFF628)

1959 
	#AT91C_PIOB_PPUER
 ((
AT91_REG
 *) 0xFFFFF664)

1960 
	#AT91C_PIOB_SODR
 ((
AT91_REG
 *) 0xFFFFF630)

1961 
	#AT91C_PIOB_ISR
 ((
AT91_REG
 *) 0xFFFFF64C)

1962 
	#AT91C_PIOB_ODSR
 ((
AT91_REG
 *) 0xFFFFF638)

1963 
	#AT91C_PIOB_OSR
 ((
AT91_REG
 *) 0xFFFFF618)

1964 
	#AT91C_PIOB_MDSR
 ((
AT91_REG
 *) 0xFFFFF658)

1965 
	#AT91C_PIOB_IFER
 ((
AT91_REG
 *) 0xFFFFF620)

1966 
	#AT91C_PIOB_BSR
 ((
AT91_REG
 *) 0xFFFFF674)

1967 
	#AT91C_PIOB_MDDR
 ((
AT91_REG
 *) 0xFFFFF654)

1968 
	#AT91C_PIOB_OER
 ((
AT91_REG
 *) 0xFFFFF610)

1969 
	#AT91C_PIOB_PER
 ((
AT91_REG
 *) 0xFFFFF600)

1971 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1972 
	#AT91C_CKGR_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1973 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1975 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1976 
	#AT91C_PMC_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1977 
	#AT91C_PMC_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1978 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1979 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1980 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1981 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1982 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1983 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1984 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1985 
	#AT91C_PMC_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1986 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1987 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1988 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1989 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1991 
	#AT91C_RSTC_RCR
 ((
AT91_REG
 *) 0xFFFFFD00)

1992 
	#AT91C_RSTC_RMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1993 
	#AT91C_RSTC_RSR
 ((
AT91_REG
 *) 0xFFFFFD04)

1995 
	#AT91C_RTTC_RTSR
 ((
AT91_REG
 *) 0xFFFFFD2C)

1996 
	#AT91C_RTTC_RTMR
 ((
AT91_REG
 *) 0xFFFFFD20)

1997 
	#AT91C_RTTC_RTVR
 ((
AT91_REG
 *) 0xFFFFFD28)

1998 
	#AT91C_RTTC_RTAR
 ((
AT91_REG
 *) 0xFFFFFD24)

2000 
	#AT91C_PITC_PIVR
 ((
AT91_REG
 *) 0xFFFFFD38)

2001 
	#AT91C_PITC_PISR
 ((
AT91_REG
 *) 0xFFFFFD34)

2002 
	#AT91C_PITC_PIIR
 ((
AT91_REG
 *) 0xFFFFFD3C)

2003 
	#AT91C_PITC_PIMR
 ((
AT91_REG
 *) 0xFFFFFD30)

2005 
	#AT91C_WDTC_WDCR
 ((
AT91_REG
 *) 0xFFFFFD40)

2006 
	#AT91C_WDTC_WDSR
 ((
AT91_REG
 *) 0xFFFFFD48)

2007 
	#AT91C_WDTC_WDMR
 ((
AT91_REG
 *) 0xFFFFFD44)

2009 
	#AT91C_VREG_MR
 ((
AT91_REG
 *) 0xFFFFFD60)

2011 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

2012 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

2013 
	#AT91C_MC_FCR
 ((
AT91_REG
 *) 0xFFFFFF64)

2014 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

2015 
	#AT91C_MC_FSR
 ((
AT91_REG
 *) 0xFFFFFF68)

2016 
	#AT91C_MC_FMR
 ((
AT91_REG
 *) 0xFFFFFF60)

2018 
	#AT91C_SPI1_PTCR
 ((
AT91_REG
 *) 0xFFFE4120)

2019 
	#AT91C_SPI1_RPR
 ((
AT91_REG
 *) 0xFFFE4100)

2020 
	#AT91C_SPI1_TNCR
 ((
AT91_REG
 *) 0xFFFE411C)

2021 
	#AT91C_SPI1_TPR
 ((
AT91_REG
 *) 0xFFFE4108)

2022 
	#AT91C_SPI1_TNPR
 ((
AT91_REG
 *) 0xFFFE4118)

2023 
	#AT91C_SPI1_TCR
 ((
AT91_REG
 *) 0xFFFE410C)

2024 
	#AT91C_SPI1_RCR
 ((
AT91_REG
 *) 0xFFFE4104)

2025 
	#AT91C_SPI1_RNPR
 ((
AT91_REG
 *) 0xFFFE4110)

2026 
	#AT91C_SPI1_RNCR
 ((
AT91_REG
 *) 0xFFFE4114)

2027 
	#AT91C_SPI1_PTSR
 ((
AT91_REG
 *) 0xFFFE4124)

2029 
	#AT91C_SPI1_IMR
 ((
AT91_REG
 *) 0xFFFE401C)

2030 
	#AT91C_SPI1_IER
 ((
AT91_REG
 *) 0xFFFE4014)

2031 
	#AT91C_SPI1_MR
 ((
AT91_REG
 *) 0xFFFE4004)

2032 
	#AT91C_SPI1_RDR
 ((
AT91_REG
 *) 0xFFFE4008)

2033 
	#AT91C_SPI1_IDR
 ((
AT91_REG
 *) 0xFFFE4018)

2034 
	#AT91C_SPI1_SR
 ((
AT91_REG
 *) 0xFFFE4010)

2035 
	#AT91C_SPI1_TDR
 ((
AT91_REG
 *) 0xFFFE400C)

2036 
	#AT91C_SPI1_CR
 ((
AT91_REG
 *) 0xFFFE4000)

2037 
	#AT91C_SPI1_CSR
 ((
AT91_REG
 *) 0xFFFE4030)

2039 
	#AT91C_SPI0_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

2040 
	#AT91C_SPI0_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

2041 
	#AT91C_SPI0_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

2042 
	#AT91C_SPI0_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

2043 
	#AT91C_SPI0_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

2044 
	#AT91C_SPI0_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

2045 
	#AT91C_SPI0_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

2046 
	#AT91C_SPI0_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

2047 
	#AT91C_SPI0_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

2048 
	#AT91C_SPI0_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

2050 
	#AT91C_SPI0_IER
 ((
AT91_REG
 *) 0xFFFE0014)

2051 
	#AT91C_SPI0_SR
 ((
AT91_REG
 *) 0xFFFE0010)

2052 
	#AT91C_SPI0_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

2053 
	#AT91C_SPI0_CR
 ((
AT91_REG
 *) 0xFFFE0000)

2054 
	#AT91C_SPI0_MR
 ((
AT91_REG
 *) 0xFFFE0004)

2055 
	#AT91C_SPI0_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

2056 
	#AT91C_SPI0_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

2057 
	#AT91C_SPI0_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

2058 
	#AT91C_SPI0_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

2060 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

2061 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

2062 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

2063 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

2064 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

2065 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

2066 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

2067 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

2068 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

2069 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

2071 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

2072 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

2073 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

2074 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

2075 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

2076 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

2077 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

2078 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

2079 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

2080 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

2081 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

2082 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

2083 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

2084 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

2086 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

2087 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

2088 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

2089 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

2090 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

2091 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

2092 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

2093 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

2094 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

2095 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

2097 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

2098 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

2099 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

2100 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

2101 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

2102 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

2103 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

2104 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

2105 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

2106 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

2107 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

2108 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

2109 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

2110 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

2112 
	#AT91C_SSC_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

2113 
	#AT91C_SSC_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

2114 
	#AT91C_SSC_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

2115 
	#AT91C_SSC_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

2116 
	#AT91C_SSC_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

2117 
	#AT91C_SSC_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

2118 
	#AT91C_SSC_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

2119 
	#AT91C_SSC_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

2120 
	#AT91C_SSC_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

2121 
	#AT91C_SSC_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

2123 
	#AT91C_SSC_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

2124 
	#AT91C_SSC_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

2125 
	#AT91C_SSC_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

2126 
	#AT91C_SSC_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

2127 
	#AT91C_SSC_THR
 ((
AT91_REG
 *) 0xFFFD4024)

2128 
	#AT91C_SSC_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

2129 
	#AT91C_SSC_IER
 ((
AT91_REG
 *) 0xFFFD4044)

2130 
	#AT91C_SSC_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

2131 
	#AT91C_SSC_SR
 ((
AT91_REG
 *) 0xFFFD4040)

2132 
	#AT91C_SSC_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

2133 
	#AT91C_SSC_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

2134 
	#AT91C_SSC_CR
 ((
AT91_REG
 *) 0xFFFD4000)

2135 
	#AT91C_SSC_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

2136 
	#AT91C_SSC_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

2138 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

2139 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

2140 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

2141 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

2142 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

2143 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

2144 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

2145 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

2146 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

2147 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

2149 
	#AT91C_PWMC_CH3_CUPDR
 ((
AT91_REG
 *) 0xFFFCC270)

2150 
	#AT91C_PWMC_CH3_Re£rved
 ((
AT91_REG
 *) 0xFFFCC274)

2151 
	#AT91C_PWMC_CH3_CPRDR
 ((
AT91_REG
 *) 0xFFFCC268)

2152 
	#AT91C_PWMC_CH3_CDTYR
 ((
AT91_REG
 *) 0xFFFCC264)

2153 
	#AT91C_PWMC_CH3_CCNTR
 ((
AT91_REG
 *) 0xFFFCC26C)

2154 
	#AT91C_PWMC_CH3_CMR
 ((
AT91_REG
 *) 0xFFFCC260)

2156 
	#AT91C_PWMC_CH2_Re£rved
 ((
AT91_REG
 *) 0xFFFCC254)

2157 
	#AT91C_PWMC_CH2_CMR
 ((
AT91_REG
 *) 0xFFFCC240)

2158 
	#AT91C_PWMC_CH2_CCNTR
 ((
AT91_REG
 *) 0xFFFCC24C)

2159 
	#AT91C_PWMC_CH2_CPRDR
 ((
AT91_REG
 *) 0xFFFCC248)

2160 
	#AT91C_PWMC_CH2_CUPDR
 ((
AT91_REG
 *) 0xFFFCC250)

2161 
	#AT91C_PWMC_CH2_CDTYR
 ((
AT91_REG
 *) 0xFFFCC244)

2163 
	#AT91C_PWMC_CH1_Re£rved
 ((
AT91_REG
 *) 0xFFFCC234)

2164 
	#AT91C_PWMC_CH1_CUPDR
 ((
AT91_REG
 *) 0xFFFCC230)

2165 
	#AT91C_PWMC_CH1_CPRDR
 ((
AT91_REG
 *) 0xFFFCC228)

2166 
	#AT91C_PWMC_CH1_CCNTR
 ((
AT91_REG
 *) 0xFFFCC22C)

2167 
	#AT91C_PWMC_CH1_CDTYR
 ((
AT91_REG
 *) 0xFFFCC224)

2168 
	#AT91C_PWMC_CH1_CMR
 ((
AT91_REG
 *) 0xFFFCC220)

2170 
	#AT91C_PWMC_CH0_Re£rved
 ((
AT91_REG
 *) 0xFFFCC214)

2171 
	#AT91C_PWMC_CH0_CPRDR
 ((
AT91_REG
 *) 0xFFFCC208)

2172 
	#AT91C_PWMC_CH0_CDTYR
 ((
AT91_REG
 *) 0xFFFCC204)

2173 
	#AT91C_PWMC_CH0_CMR
 ((
AT91_REG
 *) 0xFFFCC200)

2174 
	#AT91C_PWMC_CH0_CUPDR
 ((
AT91_REG
 *) 0xFFFCC210)

2175 
	#AT91C_PWMC_CH0_CCNTR
 ((
AT91_REG
 *) 0xFFFCC20C)

2177 
	#AT91C_PWMC_IDR
 ((
AT91_REG
 *) 0xFFFCC014)

2178 
	#AT91C_PWMC_DIS
 ((
AT91_REG
 *) 0xFFFCC008)

2179 
	#AT91C_PWMC_IER
 ((
AT91_REG
 *) 0xFFFCC010)

2180 
	#AT91C_PWMC_VR
 ((
AT91_REG
 *) 0xFFFCC0FC)

2181 
	#AT91C_PWMC_ISR
 ((
AT91_REG
 *) 0xFFFCC01C)

2182 
	#AT91C_PWMC_SR
 ((
AT91_REG
 *) 0xFFFCC00C)

2183 
	#AT91C_PWMC_IMR
 ((
AT91_REG
 *) 0xFFFCC018)

2184 
	#AT91C_PWMC_MR
 ((
AT91_REG
 *) 0xFFFCC000)

2185 
	#AT91C_PWMC_ENA
 ((
AT91_REG
 *) 0xFFFCC004)

2187 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

2188 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

2189 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

2190 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

2191 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

2192 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

2193 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

2194 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

2195 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

2196 
	#AT91C_UDP_TXVC
 ((
AT91_REG
 *) 0xFFFB0074)

2197 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

2198 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

2200 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

2201 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

2202 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

2203 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

2204 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

2205 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

2206 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

2207 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

2208 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

2209 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

2211 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

2212 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

2213 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

2214 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

2215 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

2216 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

2217 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

2218 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

2219 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

2220 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

2222 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

2223 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

2224 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

2225 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

2226 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

2227 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

2228 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

2229 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

2230 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

2231 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

2233 
	#AT91C_TCB_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

2234 
	#AT91C_TCB_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

2236 
	#AT91C_CAN_MB0_MDL
 ((
AT91_REG
 *) 0xFFFD0214)

2237 
	#AT91C_CAN_MB0_MAM
 ((
AT91_REG
 *) 0xFFFD0204)

2238 
	#AT91C_CAN_MB0_MCR
 ((
AT91_REG
 *) 0xFFFD021C)

2239 
	#AT91C_CAN_MB0_MID
 ((
AT91_REG
 *) 0xFFFD0208)

2240 
	#AT91C_CAN_MB0_MSR
 ((
AT91_REG
 *) 0xFFFD0210)

2241 
	#AT91C_CAN_MB0_MFID
 ((
AT91_REG
 *) 0xFFFD020C)

2242 
	#AT91C_CAN_MB0_MDH
 ((
AT91_REG
 *) 0xFFFD0218)

2243 
	#AT91C_CAN_MB0_MMR
 ((
AT91_REG
 *) 0xFFFD0200)

2245 
	#AT91C_CAN_MB1_MDL
 ((
AT91_REG
 *) 0xFFFD0234)

2246 
	#AT91C_CAN_MB1_MID
 ((
AT91_REG
 *) 0xFFFD0228)

2247 
	#AT91C_CAN_MB1_MMR
 ((
AT91_REG
 *) 0xFFFD0220)

2248 
	#AT91C_CAN_MB1_MSR
 ((
AT91_REG
 *) 0xFFFD0230)

2249 
	#AT91C_CAN_MB1_MAM
 ((
AT91_REG
 *) 0xFFFD0224)

2250 
	#AT91C_CAN_MB1_MDH
 ((
AT91_REG
 *) 0xFFFD0238)

2251 
	#AT91C_CAN_MB1_MCR
 ((
AT91_REG
 *) 0xFFFD023C)

2252 
	#AT91C_CAN_MB1_MFID
 ((
AT91_REG
 *) 0xFFFD022C)

2254 
	#AT91C_CAN_MB2_MCR
 ((
AT91_REG
 *) 0xFFFD025C)

2255 
	#AT91C_CAN_MB2_MDH
 ((
AT91_REG
 *) 0xFFFD0258)

2256 
	#AT91C_CAN_MB2_MID
 ((
AT91_REG
 *) 0xFFFD0248)

2257 
	#AT91C_CAN_MB2_MDL
 ((
AT91_REG
 *) 0xFFFD0254)

2258 
	#AT91C_CAN_MB2_MMR
 ((
AT91_REG
 *) 0xFFFD0240)

2259 
	#AT91C_CAN_MB2_MAM
 ((
AT91_REG
 *) 0xFFFD0244)

2260 
	#AT91C_CAN_MB2_MFID
 ((
AT91_REG
 *) 0xFFFD024C)

2261 
	#AT91C_CAN_MB2_MSR
 ((
AT91_REG
 *) 0xFFFD0250)

2263 
	#AT91C_CAN_MB3_MFID
 ((
AT91_REG
 *) 0xFFFD026C)

2264 
	#AT91C_CAN_MB3_MAM
 ((
AT91_REG
 *) 0xFFFD0264)

2265 
	#AT91C_CAN_MB3_MID
 ((
AT91_REG
 *) 0xFFFD0268)

2266 
	#AT91C_CAN_MB3_MCR
 ((
AT91_REG
 *) 0xFFFD027C)

2267 
	#AT91C_CAN_MB3_MMR
 ((
AT91_REG
 *) 0xFFFD0260)

2268 
	#AT91C_CAN_MB3_MSR
 ((
AT91_REG
 *) 0xFFFD0270)

2269 
	#AT91C_CAN_MB3_MDL
 ((
AT91_REG
 *) 0xFFFD0274)

2270 
	#AT91C_CAN_MB3_MDH
 ((
AT91_REG
 *) 0xFFFD0278)

2272 
	#AT91C_CAN_MB4_MID
 ((
AT91_REG
 *) 0xFFFD0288)

2273 
	#AT91C_CAN_MB4_MMR
 ((
AT91_REG
 *) 0xFFFD0280)

2274 
	#AT91C_CAN_MB4_MDH
 ((
AT91_REG
 *) 0xFFFD0298)

2275 
	#AT91C_CAN_MB4_MFID
 ((
AT91_REG
 *) 0xFFFD028C)

2276 
	#AT91C_CAN_MB4_MSR
 ((
AT91_REG
 *) 0xFFFD0290)

2277 
	#AT91C_CAN_MB4_MCR
 ((
AT91_REG
 *) 0xFFFD029C)

2278 
	#AT91C_CAN_MB4_MDL
 ((
AT91_REG
 *) 0xFFFD0294)

2279 
	#AT91C_CAN_MB4_MAM
 ((
AT91_REG
 *) 0xFFFD0284)

2281 
	#AT91C_CAN_MB5_MSR
 ((
AT91_REG
 *) 0xFFFD02B0)

2282 
	#AT91C_CAN_MB5_MCR
 ((
AT91_REG
 *) 0xFFFD02BC)

2283 
	#AT91C_CAN_MB5_MFID
 ((
AT91_REG
 *) 0xFFFD02AC)

2284 
	#AT91C_CAN_MB5_MDH
 ((
AT91_REG
 *) 0xFFFD02B8)

2285 
	#AT91C_CAN_MB5_MID
 ((
AT91_REG
 *) 0xFFFD02A8)

2286 
	#AT91C_CAN_MB5_MMR
 ((
AT91_REG
 *) 0xFFFD02A0)

2287 
	#AT91C_CAN_MB5_MDL
 ((
AT91_REG
 *) 0xFFFD02B4)

2288 
	#AT91C_CAN_MB5_MAM
 ((
AT91_REG
 *) 0xFFFD02A4)

2290 
	#AT91C_CAN_MB6_MFID
 ((
AT91_REG
 *) 0xFFFD02CC)

2291 
	#AT91C_CAN_MB6_MID
 ((
AT91_REG
 *) 0xFFFD02C8)

2292 
	#AT91C_CAN_MB6_MAM
 ((
AT91_REG
 *) 0xFFFD02C4)

2293 
	#AT91C_CAN_MB6_MSR
 ((
AT91_REG
 *) 0xFFFD02D0)

2294 
	#AT91C_CAN_MB6_MDL
 ((
AT91_REG
 *) 0xFFFD02D4)

2295 
	#AT91C_CAN_MB6_MCR
 ((
AT91_REG
 *) 0xFFFD02DC)

2296 
	#AT91C_CAN_MB6_MDH
 ((
AT91_REG
 *) 0xFFFD02D8)

2297 
	#AT91C_CAN_MB6_MMR
 ((
AT91_REG
 *) 0xFFFD02C0)

2299 
	#AT91C_CAN_MB7_MCR
 ((
AT91_REG
 *) 0xFFFD02FC)

2300 
	#AT91C_CAN_MB7_MDH
 ((
AT91_REG
 *) 0xFFFD02F8)

2301 
	#AT91C_CAN_MB7_MFID
 ((
AT91_REG
 *) 0xFFFD02EC)

2302 
	#AT91C_CAN_MB7_MDL
 ((
AT91_REG
 *) 0xFFFD02F4)

2303 
	#AT91C_CAN_MB7_MID
 ((
AT91_REG
 *) 0xFFFD02E8)

2304 
	#AT91C_CAN_MB7_MMR
 ((
AT91_REG
 *) 0xFFFD02E0)

2305 
	#AT91C_CAN_MB7_MAM
 ((
AT91_REG
 *) 0xFFFD02E4)

2306 
	#AT91C_CAN_MB7_MSR
 ((
AT91_REG
 *) 0xFFFD02F0)

2308 
	#AT91C_CAN_TCR
 ((
AT91_REG
 *) 0xFFFD0024)

2309 
	#AT91C_CAN_IMR
 ((
AT91_REG
 *) 0xFFFD000C)

2310 
	#AT91C_CAN_IER
 ((
AT91_REG
 *) 0xFFFD0004)

2311 
	#AT91C_CAN_ECR
 ((
AT91_REG
 *) 0xFFFD0020)

2312 
	#AT91C_CAN_TIMESTP
 ((
AT91_REG
 *) 0xFFFD001C)

2313 
	#AT91C_CAN_MR
 ((
AT91_REG
 *) 0xFFFD0000)

2314 
	#AT91C_CAN_IDR
 ((
AT91_REG
 *) 0xFFFD0008)

2315 
	#AT91C_CAN_ACR
 ((
AT91_REG
 *) 0xFFFD0028)

2316 
	#AT91C_CAN_TIM
 ((
AT91_REG
 *) 0xFFFD0018)

2317 
	#AT91C_CAN_SR
 ((
AT91_REG
 *) 0xFFFD0010)

2318 
	#AT91C_CAN_BR
 ((
AT91_REG
 *) 0xFFFD0014)

2319 
	#AT91C_CAN_VR
 ((
AT91_REG
 *) 0xFFFD00FC)

2321 
	#AT91C_EMAC_ISR
 ((
AT91_REG
 *) 0xFFFDC024)

2322 
	#AT91C_EMAC_SA4H
 ((
AT91_REG
 *) 0xFFFDC0B4)

2323 
	#AT91C_EMAC_SA1L
 ((
AT91_REG
 *) 0xFFFDC098)

2324 
	#AT91C_EMAC_ELE
 ((
AT91_REG
 *) 0xFFFDC078)

2325 
	#AT91C_EMAC_LCOL
 ((
AT91_REG
 *) 0xFFFDC05C)

2326 
	#AT91C_EMAC_RLE
 ((
AT91_REG
 *) 0xFFFDC088)

2327 
	#AT91C_EMAC_WOL
 ((
AT91_REG
 *) 0xFFFDC0C4)

2328 
	#AT91C_EMAC_DTF
 ((
AT91_REG
 *) 0xFFFDC058)

2329 
	#AT91C_EMAC_TUND
 ((
AT91_REG
 *) 0xFFFDC064)

2330 
	#AT91C_EMAC_NCR
 ((
AT91_REG
 *) 0xFFFDC000)

2331 
	#AT91C_EMAC_SA4L
 ((
AT91_REG
 *) 0xFFFDC0B0)

2332 
	#AT91C_EMAC_RSR
 ((
AT91_REG
 *) 0xFFFDC020)

2333 
	#AT91C_EMAC_SA3L
 ((
AT91_REG
 *) 0xFFFDC0A8)

2334 
	#AT91C_EMAC_TSR
 ((
AT91_REG
 *) 0xFFFDC014)

2335 
	#AT91C_EMAC_IDR
 ((
AT91_REG
 *) 0xFFFDC02C)

2336 
	#AT91C_EMAC_RSE
 ((
AT91_REG
 *) 0xFFFDC074)

2337 
	#AT91C_EMAC_ECOL
 ((
AT91_REG
 *) 0xFFFDC060)

2338 
	#AT91C_EMAC_TID
 ((
AT91_REG
 *) 0xFFFDC0B8)

2339 
	#AT91C_EMAC_HRB
 ((
AT91_REG
 *) 0xFFFDC090)

2340 
	#AT91C_EMAC_TBQP
 ((
AT91_REG
 *) 0xFFFDC01C)

2341 
	#AT91C_EMAC_USRIO
 ((
AT91_REG
 *) 0xFFFDC0C0)

2342 
	#AT91C_EMAC_PTR
 ((
AT91_REG
 *) 0xFFFDC038)

2343 
	#AT91C_EMAC_SA2H
 ((
AT91_REG
 *) 0xFFFDC0A4)

2344 
	#AT91C_EMAC_ROV
 ((
AT91_REG
 *) 0xFFFDC070)

2345 
	#AT91C_EMAC_ALE
 ((
AT91_REG
 *) 0xFFFDC054)

2346 
	#AT91C_EMAC_RJA
 ((
AT91_REG
 *) 0xFFFDC07C)

2347 
	#AT91C_EMAC_RBQP
 ((
AT91_REG
 *) 0xFFFDC018)

2348 
	#AT91C_EMAC_TPF
 ((
AT91_REG
 *) 0xFFFDC08C)

2349 
	#AT91C_EMAC_NCFGR
 ((
AT91_REG
 *) 0xFFFDC004)

2350 
	#AT91C_EMAC_HRT
 ((
AT91_REG
 *) 0xFFFDC094)

2351 
	#AT91C_EMAC_USF
 ((
AT91_REG
 *) 0xFFFDC080)

2352 
	#AT91C_EMAC_FCSE
 ((
AT91_REG
 *) 0xFFFDC050)

2353 
	#AT91C_EMAC_TPQ
 ((
AT91_REG
 *) 0xFFFDC0BC)

2354 
	#AT91C_EMAC_MAN
 ((
AT91_REG
 *) 0xFFFDC034)

2355 
	#AT91C_EMAC_FTO
 ((
AT91_REG
 *) 0xFFFDC040)

2356 
	#AT91C_EMAC_REV
 ((
AT91_REG
 *) 0xFFFDC0FC)

2357 
	#AT91C_EMAC_IMR
 ((
AT91_REG
 *) 0xFFFDC030)

2358 
	#AT91C_EMAC_SCF
 ((
AT91_REG
 *) 0xFFFDC044)

2359 
	#AT91C_EMAC_PFR
 ((
AT91_REG
 *) 0xFFFDC03C)

2360 
	#AT91C_EMAC_MCF
 ((
AT91_REG
 *) 0xFFFDC048)

2361 
	#AT91C_EMAC_NSR
 ((
AT91_REG
 *) 0xFFFDC008)

2362 
	#AT91C_EMAC_SA2L
 ((
AT91_REG
 *) 0xFFFDC0A0)

2363 
	#AT91C_EMAC_FRO
 ((
AT91_REG
 *) 0xFFFDC04C)

2364 
	#AT91C_EMAC_IER
 ((
AT91_REG
 *) 0xFFFDC028)

2365 
	#AT91C_EMAC_SA1H
 ((
AT91_REG
 *) 0xFFFDC09C)

2366 
	#AT91C_EMAC_CSE
 ((
AT91_REG
 *) 0xFFFDC068)

2367 
	#AT91C_EMAC_SA3H
 ((
AT91_REG
 *) 0xFFFDC0AC)

2368 
	#AT91C_EMAC_RRE
 ((
AT91_REG
 *) 0xFFFDC06C)

2369 
	#AT91C_EMAC_STE
 ((
AT91_REG
 *) 0xFFFDC084)

2371 
	#AT91C_ADC_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

2372 
	#AT91C_ADC_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

2373 
	#AT91C_ADC_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

2374 
	#AT91C_ADC_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

2375 
	#AT91C_ADC_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

2376 
	#AT91C_ADC_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

2377 
	#AT91C_ADC_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

2378 
	#AT91C_ADC_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

2379 
	#AT91C_ADC_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

2380 
	#AT91C_ADC_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

2382 
	#AT91C_ADC_CDR2
 ((
AT91_REG
 *) 0xFFFD8038)

2383 
	#AT91C_ADC_CDR3
 ((
AT91_REG
 *) 0xFFFD803C)

2384 
	#AT91C_ADC_CDR0
 ((
AT91_REG
 *) 0xFFFD8030)

2385 
	#AT91C_ADC_CDR5
 ((
AT91_REG
 *) 0xFFFD8044)

2386 
	#AT91C_ADC_CHDR
 ((
AT91_REG
 *) 0xFFFD8014)

2387 
	#AT91C_ADC_SR
 ((
AT91_REG
 *) 0xFFFD801C)

2388 
	#AT91C_ADC_CDR4
 ((
AT91_REG
 *) 0xFFFD8040)

2389 
	#AT91C_ADC_CDR1
 ((
AT91_REG
 *) 0xFFFD8034)

2390 
	#AT91C_ADC_LCDR
 ((
AT91_REG
 *) 0xFFFD8020)

2391 
	#AT91C_ADC_IDR
 ((
AT91_REG
 *) 0xFFFD8028)

2392 
	#AT91C_ADC_CR
 ((
AT91_REG
 *) 0xFFFD8000)

2393 
	#AT91C_ADC_CDR7
 ((
AT91_REG
 *) 0xFFFD804C)

2394 
	#AT91C_ADC_CDR6
 ((
AT91_REG
 *) 0xFFFD8048)

2395 
	#AT91C_ADC_IER
 ((
AT91_REG
 *) 0xFFFD8024)

2396 
	#AT91C_ADC_CHER
 ((
AT91_REG
 *) 0xFFFD8010)

2397 
	#AT91C_ADC_CHSR
 ((
AT91_REG
 *) 0xFFFD8018)

2398 
	#AT91C_ADC_MR
 ((
AT91_REG
 *) 0xFFFD8004)

2399 
	#AT91C_ADC_IMR
 ((
AT91_REG
 *) 0xFFFD802C)

2401 
	#AT91C_AES_TPR
 ((
AT91_REG
 *) 0xFFFA4108)

2402 
	#AT91C_AES_PTCR
 ((
AT91_REG
 *) 0xFFFA4120)

2403 
	#AT91C_AES_RNPR
 ((
AT91_REG
 *) 0xFFFA4110)

2404 
	#AT91C_AES_TNCR
 ((
AT91_REG
 *) 0xFFFA411C)

2405 
	#AT91C_AES_TCR
 ((
AT91_REG
 *) 0xFFFA410C)

2406 
	#AT91C_AES_RCR
 ((
AT91_REG
 *) 0xFFFA4104)

2407 
	#AT91C_AES_RNCR
 ((
AT91_REG
 *) 0xFFFA4114)

2408 
	#AT91C_AES_TNPR
 ((
AT91_REG
 *) 0xFFFA4118)

2409 
	#AT91C_AES_RPR
 ((
AT91_REG
 *) 0xFFFA4100)

2410 
	#AT91C_AES_PTSR
 ((
AT91_REG
 *) 0xFFFA4124)

2412 
	#AT91C_AES_IVxR
 ((
AT91_REG
 *) 0xFFFA4060)

2413 
	#AT91C_AES_MR
 ((
AT91_REG
 *) 0xFFFA4004)

2414 
	#AT91C_AES_VR
 ((
AT91_REG
 *) 0xFFFA40FC)

2415 
	#AT91C_AES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA4050)

2416 
	#AT91C_AES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA4040)

2417 
	#AT91C_AES_CR
 ((
AT91_REG
 *) 0xFFFA4000)

2418 
	#AT91C_AES_IDR
 ((
AT91_REG
 *) 0xFFFA4014)

2419 
	#AT91C_AES_IMR
 ((
AT91_REG
 *) 0xFFFA4018)

2420 
	#AT91C_AES_IER
 ((
AT91_REG
 *) 0xFFFA4010)

2421 
	#AT91C_AES_KEYWxR
 ((
AT91_REG
 *) 0xFFFA4020)

2422 
	#AT91C_AES_ISR
 ((
AT91_REG
 *) 0xFFFA401C)

2424 
	#AT91C_TDES_RNCR
 ((
AT91_REG
 *) 0xFFFA8114)

2425 
	#AT91C_TDES_TCR
 ((
AT91_REG
 *) 0xFFFA810C)

2426 
	#AT91C_TDES_RCR
 ((
AT91_REG
 *) 0xFFFA8104)

2427 
	#AT91C_TDES_TNPR
 ((
AT91_REG
 *) 0xFFFA8118)

2428 
	#AT91C_TDES_RNPR
 ((
AT91_REG
 *) 0xFFFA8110)

2429 
	#AT91C_TDES_RPR
 ((
AT91_REG
 *) 0xFFFA8100)

2430 
	#AT91C_TDES_TNCR
 ((
AT91_REG
 *) 0xFFFA811C)

2431 
	#AT91C_TDES_TPR
 ((
AT91_REG
 *) 0xFFFA8108)

2432 
	#AT91C_TDES_PTSR
 ((
AT91_REG
 *) 0xFFFA8124)

2433 
	#AT91C_TDES_PTCR
 ((
AT91_REG
 *) 0xFFFA8120)

2435 
	#AT91C_TDES_KEY2WxR
 ((
AT91_REG
 *) 0xFFFA8028)

2436 
	#AT91C_TDES_KEY3WxR
 ((
AT91_REG
 *) 0xFFFA8030)

2437 
	#AT91C_TDES_IDR
 ((
AT91_REG
 *) 0xFFFA8014)

2438 
	#AT91C_TDES_VR
 ((
AT91_REG
 *) 0xFFFA80FC)

2439 
	#AT91C_TDES_IVxR
 ((
AT91_REG
 *) 0xFFFA8060)

2440 
	#AT91C_TDES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA8050)

2441 
	#AT91C_TDES_IMR
 ((
AT91_REG
 *) 0xFFFA8018)

2442 
	#AT91C_TDES_MR
 ((
AT91_REG
 *) 0xFFFA8004)

2443 
	#AT91C_TDES_CR
 ((
AT91_REG
 *) 0xFFFA8000)

2444 
	#AT91C_TDES_IER
 ((
AT91_REG
 *) 0xFFFA8010)

2445 
	#AT91C_TDES_ISR
 ((
AT91_REG
 *) 0xFFFA801C)

2446 
	#AT91C_TDES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA8040)

2447 
	#AT91C_TDES_KEY1WxR
 ((
AT91_REG
 *) 0xFFFA8020)

2448 

	)

2452 
	#AT91C_PIO_PA0
 (() 1 << 0)

2453 
	#AT91C_PA0_RXD0
 ((Ë
AT91C_PIO_PA0
)

2454 
	#AT91C_PIO_PA1
 (() 1 << 1)

2455 
	#AT91C_PA1_TXD0
 ((Ë
AT91C_PIO_PA1
)

2456 
	#AT91C_PIO_PA10
 (() 1 << 10)

2457 
	#AT91C_PA10_TWD
 ((Ë
AT91C_PIO_PA10
)

2458 
	#AT91C_PIO_PA11
 (() 1 << 11)

2459 
	#AT91C_PA11_TWCK
 ((Ë
AT91C_PIO_PA11
)

2460 
	#AT91C_PIO_PA12
 (() 1 << 12)

2461 
	#AT91C_PA12_NPCS00
 ((Ë
AT91C_PIO_PA12
)

2462 
	#AT91C_PIO_PA13
 (() 1 << 13)

2463 
	#AT91C_PA13_NPCS01
 ((Ë
AT91C_PIO_PA13
)

2464 
	#AT91C_PA13_PCK1
 ((Ë
AT91C_PIO_PA13
)

2465 
	#AT91C_PIO_PA14
 (() 1 << 14)

2466 
	#AT91C_PA14_NPCS02
 ((Ë
AT91C_PIO_PA14
)

2467 
	#AT91C_PA14_IRQ1
 ((Ë
AT91C_PIO_PA14
)

2468 
	#AT91C_PIO_PA15
 (() 1 << 15)

2469 
	#AT91C_PA15_NPCS03
 ((Ë
AT91C_PIO_PA15
)

2470 
	#AT91C_PA15_TCLK2
 ((Ë
AT91C_PIO_PA15
)

2471 
	#AT91C_PIO_PA16
 (() 1 << 16)

2472 
	#AT91C_PA16_MISO0
 ((Ë
AT91C_PIO_PA16
)

2473 
	#AT91C_PIO_PA17
 (() 1 << 17)

2474 
	#AT91C_PA17_MOSI0
 ((Ë
AT91C_PIO_PA17
)

2475 
	#AT91C_PIO_PA18
 (() 1 << 18)

2476 
	#AT91C_PA18_SPCK0
 ((Ë
AT91C_PIO_PA18
)

2477 
	#AT91C_PIO_PA19
 (() 1 << 19)

2478 
	#AT91C_PA19_CANRX
 ((Ë
AT91C_PIO_PA19
)

2479 
	#AT91C_PIO_PA2
 (() 1 << 2)

2480 
	#AT91C_PA2_SCK0
 ((Ë
AT91C_PIO_PA2
)

2481 
	#AT91C_PA2_NPCS11
 ((Ë
AT91C_PIO_PA2
)

2482 
	#AT91C_PIO_PA20
 (() 1 << 20)

2483 
	#AT91C_PA20_CANTX
 ((Ë
AT91C_PIO_PA20
)

2484 
	#AT91C_PIO_PA21
 (() 1 << 21)

2485 
	#AT91C_PA21_TF
 ((Ë
AT91C_PIO_PA21
)

2486 
	#AT91C_PA21_NPCS10
 ((Ë
AT91C_PIO_PA21
)

2487 
	#AT91C_PIO_PA22
 (() 1 << 22)

2488 
	#AT91C_PA22_TK
 ((Ë
AT91C_PIO_PA22
)

2489 
	#AT91C_PA22_SPCK1
 ((Ë
AT91C_PIO_PA22
)

2490 
	#AT91C_PIO_PA23
 (() 1 << 23)

2491 
	#AT91C_PA23_TD
 ((Ë
AT91C_PIO_PA23
)

2492 
	#AT91C_PA23_MOSI1
 ((Ë
AT91C_PIO_PA23
)

2493 
	#AT91C_PIO_PA24
 (() 1 << 24)

2494 
	#AT91C_PA24_RD
 ((Ë
AT91C_PIO_PA24
)

2495 
	#AT91C_PA24_MISO1
 ((Ë
AT91C_PIO_PA24
)

2496 
	#AT91C_PIO_PA25
 (() 1 << 25)

2497 
	#AT91C_PA25_RK
 ((Ë
AT91C_PIO_PA25
)

2498 
	#AT91C_PA25_NPCS11
 ((Ë
AT91C_PIO_PA25
)

2499 
	#AT91C_PIO_PA26
 (() 1 << 26)

2500 
	#AT91C_PA26_RF
 ((Ë
AT91C_PIO_PA26
)

2501 
	#AT91C_PA26_NPCS12
 ((Ë
AT91C_PIO_PA26
)

2502 
	#AT91C_PIO_PA27
 (() 1 << 27)

2503 
	#AT91C_PA27_DRXD
 ((Ë
AT91C_PIO_PA27
)

2504 
	#AT91C_PA27_PCK3
 ((Ë
AT91C_PIO_PA27
)

2505 
	#AT91C_PIO_PA28
 (() 1 << 28)

2506 
	#AT91C_PA28_DTXD
 ((Ë
AT91C_PIO_PA28
)

2507 
	#AT91C_PIO_PA29
 (() 1 << 29)

2508 
	#AT91C_PA29_FIQ
 ((Ë
AT91C_PIO_PA29
)

2509 
	#AT91C_PA29_NPCS13
 ((Ë
AT91C_PIO_PA29
)

2510 
	#AT91C_PIO_PA3
 (() 1 << 3)

2511 
	#AT91C_PA3_RTS0
 ((Ë
AT91C_PIO_PA3
)

2512 
	#AT91C_PA3_NPCS12
 ((Ë
AT91C_PIO_PA3
)

2513 
	#AT91C_PIO_PA30
 (() 1 << 30)

2514 
	#AT91C_PA30_IRQ0
 ((Ë
AT91C_PIO_PA30
)

2515 
	#AT91C_PA30_PCK2
 ((Ë
AT91C_PIO_PA30
)

2516 
	#AT91C_PIO_PA4
 (() 1 << 4)

2517 
	#AT91C_PA4_CTS0
 ((Ë
AT91C_PIO_PA4
)

2518 
	#AT91C_PA4_NPCS13
 ((Ë
AT91C_PIO_PA4
)

2519 
	#AT91C_PIO_PA5
 (() 1 << 5)

2520 
	#AT91C_PA5_RXD1
 ((Ë
AT91C_PIO_PA5
)

2521 
	#AT91C_PIO_PA6
 (() 1 << 6)

2522 
	#AT91C_PA6_TXD1
 ((Ë
AT91C_PIO_PA6
)

2523 
	#AT91C_PIO_PA7
 (() 1 << 7)

2524 
	#AT91C_PA7_SCK1
 ((Ë
AT91C_PIO_PA7
)

2525 
	#AT91C_PA7_NPCS01
 ((Ë
AT91C_PIO_PA7
)

2526 
	#AT91C_PIO_PA8
 (() 1 << 8)

2527 
	#AT91C_PA8_RTS1
 ((Ë
AT91C_PIO_PA8
)

2528 
	#AT91C_PA8_NPCS02
 ((Ë
AT91C_PIO_PA8
)

2529 
	#AT91C_PIO_PA9
 (() 1 << 9)

2530 
	#AT91C_PA9_CTS1
 ((Ë
AT91C_PIO_PA9
)

2531 
	#AT91C_PA9_NPCS03
 ((Ë
AT91C_PIO_PA9
)

2532 
	#AT91C_PIO_PB0
 (() 1 << 0)

2533 
	#AT91C_PB0_ETXCK_EREFCK
 ((Ë
AT91C_PIO_PB0
)

2534 
	#AT91C_PB0_PCK0
 ((Ë
AT91C_PIO_PB0
)

2535 
	#AT91C_PIO_PB1
 (() 1 << 1)

2536 
	#AT91C_PB1_ETXEN
 ((Ë
AT91C_PIO_PB1
)

2537 
	#AT91C_PIO_PB10
 (() 1 << 10)

2538 
	#AT91C_PB10_ETX2
 ((Ë
AT91C_PIO_PB10
)

2539 
	#AT91C_PB10_NPCS11
 ((Ë
AT91C_PIO_PB10
)

2540 
	#AT91C_PIO_PB11
 (() 1 << 11)

2541 
	#AT91C_PB11_ETX3
 ((Ë
AT91C_PIO_PB11
)

2542 
	#AT91C_PB11_NPCS12
 ((Ë
AT91C_PIO_PB11
)

2543 
	#AT91C_PIO_PB12
 (() 1 << 12)

2544 
	#AT91C_PB12_ETXER
 ((Ë
AT91C_PIO_PB12
)

2545 
	#AT91C_PB12_TCLK0
 ((Ë
AT91C_PIO_PB12
)

2546 
	#AT91C_PIO_PB13
 (() 1 << 13)

2547 
	#AT91C_PB13_ERX2
 ((Ë
AT91C_PIO_PB13
)

2548 
	#AT91C_PB13_NPCS01
 ((Ë
AT91C_PIO_PB13
)

2549 
	#AT91C_PIO_PB14
 (() 1 << 14)

2550 
	#AT91C_PB14_ERX3
 ((Ë
AT91C_PIO_PB14
)

2551 
	#AT91C_PB14_NPCS02
 ((Ë
AT91C_PIO_PB14
)

2552 
	#AT91C_PIO_PB15
 (() 1 << 15)

2553 
	#AT91C_PB15_ERXDV
 ((Ë
AT91C_PIO_PB15
)

2554 
	#AT91C_PIO_PB16
 (() 1 << 16)

2555 
	#AT91C_PB16_ECOL
 ((Ë
AT91C_PIO_PB16
)

2556 
	#AT91C_PB16_NPCS13
 ((Ë
AT91C_PIO_PB16
)

2557 
	#AT91C_PIO_PB17
 (() 1 << 17)

2558 
	#AT91C_PB17_ERXCK
 ((Ë
AT91C_PIO_PB17
)

2559 
	#AT91C_PB17_NPCS03
 ((Ë
AT91C_PIO_PB17
)

2560 
	#AT91C_PIO_PB18
 (() 1 << 18)

2561 
	#AT91C_PB18_EF100
 ((Ë
AT91C_PIO_PB18
)

2562 
	#AT91C_PB18_ADTRG
 ((Ë
AT91C_PIO_PB18
)

2563 
	#AT91C_PIO_PB19
 (() 1 << 19)

2564 
	#AT91C_PB19_PWM0
 ((Ë
AT91C_PIO_PB19
)

2565 
	#AT91C_PB19_TCLK1
 ((Ë
AT91C_PIO_PB19
)

2566 
	#AT91C_PIO_PB2
 (() 1 << 2)

2567 
	#AT91C_PB2_ETX0
 ((Ë
AT91C_PIO_PB2
)

2568 
	#AT91C_PIO_PB20
 (() 1 << 20)

2569 
	#AT91C_PB20_PWM1
 ((Ë
AT91C_PIO_PB20
)

2570 
	#AT91C_PB20_PCK0
 ((Ë
AT91C_PIO_PB20
)

2571 
	#AT91C_PIO_PB21
 (() 1 << 21)

2572 
	#AT91C_PB21_PWM2
 ((Ë
AT91C_PIO_PB21
)

2573 
	#AT91C_PB21_PCK1
 ((Ë
AT91C_PIO_PB21
)

2574 
	#AT91C_PIO_PB22
 (() 1 << 22)

2575 
	#AT91C_PB22_PWM3
 ((Ë
AT91C_PIO_PB22
)

2576 
	#AT91C_PB22_PCK2
 ((Ë
AT91C_PIO_PB22
)

2577 
	#AT91C_PIO_PB23
 (() 1 << 23)

2578 
	#AT91C_PB23_TIOA0
 ((Ë
AT91C_PIO_PB23
)

2579 
	#AT91C_PB23_DCD1
 ((Ë
AT91C_PIO_PB23
)

2580 
	#AT91C_PIO_PB24
 (() 1 << 24)

2581 
	#AT91C_PB24_TIOB0
 ((Ë
AT91C_PIO_PB24
)

2582 
	#AT91C_PB24_DSR1
 ((Ë
AT91C_PIO_PB24
)

2583 
	#AT91C_PIO_PB25
 (() 1 << 25)

2584 
	#AT91C_PB25_TIOA1
 ((Ë
AT91C_PIO_PB25
)

2585 
	#AT91C_PB25_DTR1
 ((Ë
AT91C_PIO_PB25
)

2586 
	#AT91C_PIO_PB26
 (() 1 << 26)

2587 
	#AT91C_PB26_TIOB1
 ((Ë
AT91C_PIO_PB26
)

2588 
	#AT91C_PB26_RI1
 ((Ë
AT91C_PIO_PB26
)

2589 
	#AT91C_PIO_PB27
 (() 1 << 27)

2590 
	#AT91C_PB27_TIOA2
 ((Ë
AT91C_PIO_PB27
)

2591 
	#AT91C_PB27_PWM0
 ((Ë
AT91C_PIO_PB27
)

2592 
	#AT91C_PIO_PB28
 (() 1 << 28)

2593 
	#AT91C_PB28_TIOB2
 ((Ë
AT91C_PIO_PB28
)

2594 
	#AT91C_PB28_PWM1
 ((Ë
AT91C_PIO_PB28
)

2595 
	#AT91C_PIO_PB29
 (() 1 << 29)

2596 
	#AT91C_PB29_PCK1
 ((Ë
AT91C_PIO_PB29
)

2597 
	#AT91C_PB29_PWM2
 ((Ë
AT91C_PIO_PB29
)

2598 
	#AT91C_PIO_PB3
 (() 1 << 3)

2599 
	#AT91C_PB3_ETX1
 ((Ë
AT91C_PIO_PB3
)

2600 
	#AT91C_PIO_PB30
 (() 1 << 30)

2601 
	#AT91C_PB30_PCK2
 ((Ë
AT91C_PIO_PB30
)

2602 
	#AT91C_PB30_PWM3
 ((Ë
AT91C_PIO_PB30
)

2603 
	#AT91C_PIO_PB4
 (() 1 << 4)

2604 
	#AT91C_PB4_ECRS_ECRSDV
 ((Ë
AT91C_PIO_PB4
)

2605 
	#AT91C_PIO_PB5
 (() 1 << 5)

2606 
	#AT91C_PB5_ERX0
 ((Ë
AT91C_PIO_PB5
)

2607 
	#AT91C_PIO_PB6
 (() 1 << 6)

2608 
	#AT91C_PB6_ERX1
 ((Ë
AT91C_PIO_PB6
)

2609 
	#AT91C_PIO_PB7
 (() 1 << 7)

2610 
	#AT91C_PB7_ERXER
 ((Ë
AT91C_PIO_PB7
)

2611 
	#AT91C_PIO_PB8
 (() 1 << 8)

2612 
	#AT91C_PB8_EMDC
 ((Ë
AT91C_PIO_PB8
)

2613 
	#AT91C_PIO_PB9
 (() 1 << 9)

2614 
	#AT91C_PB9_EMDIO
 ((Ë
AT91C_PIO_PB9
)

2615 

	)

2619 
	#AT91C_ID_FIQ
 (() 0)

2620 
	#AT91C_ID_SYS
 (() 1)

2621 
	#AT91C_ID_PIOA
 (() 2)

2622 
	#AT91C_ID_PIOB
 (() 3)

2623 
	#AT91C_ID_SPI0
 (() 4)

2624 
	#AT91C_ID_SPI1
 (() 5)

2625 
	#AT91C_ID_US0
 (() 6)

2626 
	#AT91C_ID_US1
 (() 7)

2627 
	#AT91C_ID_SSC
 (() 8)

2628 
	#AT91C_ID_TWI
 (() 9)

2629 
	#AT91C_ID_PWMC
 (() 10)

2630 
	#AT91C_ID_UDP
 (() 11)

2631 
	#AT91C_ID_TC0
 (() 12)

2632 
	#AT91C_ID_TC1
 (() 13)

2633 
	#AT91C_ID_TC2
 (() 14)

2634 
	#AT91C_ID_CAN
 (() 15)

2635 
	#AT91C_ID_EMAC
 (() 16)

2636 
	#AT91C_ID_ADC
 (() 17)

2637 
	#AT91C_ID_AES
 (() 18)

2638 
	#AT91C_ID_TDES
 (() 19)

2639 
	#AT91C_ID_20_Re£rved
 (() 20)

2640 
	#AT91C_ID_21_Re£rved
 (() 21)

2641 
	#AT91C_ID_22_Re£rved
 (() 22)

2642 
	#AT91C_ID_23_Re£rved
 (() 23)

2643 
	#AT91C_ID_24_Re£rved
 (() 24)

2644 
	#AT91C_ID_25_Re£rved
 (() 25)

2645 
	#AT91C_ID_26_Re£rved
 (() 26)

2646 
	#AT91C_ID_27_Re£rved
 (() 27)

2647 
	#AT91C_ID_28_Re£rved
 (() 28)

2648 
	#AT91C_ID_29_Re£rved
 (() 29)

2649 
	#AT91C_ID_IRQ0
 (() 30)

2650 
	#AT91C_ID_IRQ1
 (() 31)

2651 

	)

2655 
	#AT91C_BASE_SYS
 ((
AT91PS_SYS
) 0xFFFFF000)

2656 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

2657 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

2658 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

2659 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

2660 
	#AT91C_BASE_PIOB
 ((
AT91PS_PIO
) 0xFFFFF600)

2661 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

2662 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

2663 
	#AT91C_BASE_RSTC
 ((
AT91PS_RSTC
) 0xFFFFFD00)

2664 
	#AT91C_BASE_RTTC
 ((
AT91PS_RTTC
) 0xFFFFFD20)

2665 
	#AT91C_BASE_PITC
 ((
AT91PS_PITC
) 0xFFFFFD30)

2666 
	#AT91C_BASE_WDTC
 ((
AT91PS_WDTC
) 0xFFFFFD40)

2667 
	#AT91C_BASE_VREG
 ((
AT91PS_VREG
) 0xFFFFFD60)

2668 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

2669 
	#AT91C_BASE_PDC_SPI1
 ((
AT91PS_PDC
) 0xFFFE4100)

2670 
	#AT91C_BASE_SPI1
 ((
AT91PS_SPI
) 0xFFFE4000)

2671 
	#AT91C_BASE_PDC_SPI0
 ((
AT91PS_PDC
) 0xFFFE0100)

2672 
	#AT91C_BASE_SPI0
 ((
AT91PS_SPI
) 0xFFFE0000)

2673 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

2674 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

2675 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

2676 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

2677 
	#AT91C_BASE_PDC_SSC
 ((
AT91PS_PDC
) 0xFFFD4100)

2678 
	#AT91C_BASE_SSC
 ((
AT91PS_SSC
) 0xFFFD4000)

2679 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

2680 
	#AT91C_BASE_PWMC_CH3
 ((
AT91PS_PWMC_CH
) 0xFFFCC260)

2681 
	#AT91C_BASE_PWMC_CH2
 ((
AT91PS_PWMC_CH
) 0xFFFCC240)

2682 
	#AT91C_BASE_PWMC_CH1
 ((
AT91PS_PWMC_CH
) 0xFFFCC220)

2683 
	#AT91C_BASE_PWMC_CH0
 ((
AT91PS_PWMC_CH
) 0xFFFCC200)

2684 
	#AT91C_BASE_PWMC
 ((
AT91PS_PWMC
) 0xFFFCC000)

2685 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

2686 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

2687 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

2688 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

2689 
	#AT91C_BASE_TCB
 ((
AT91PS_TCB
) 0xFFFA0000)

2690 
	#AT91C_BASE_CAN_MB0
 ((
AT91PS_CAN_MB
) 0xFFFD0200)

2691 
	#AT91C_BASE_CAN_MB1
 ((
AT91PS_CAN_MB
) 0xFFFD0220)

2692 
	#AT91C_BASE_CAN_MB2
 ((
AT91PS_CAN_MB
) 0xFFFD0240)

2693 
	#AT91C_BASE_CAN_MB3
 ((
AT91PS_CAN_MB
) 0xFFFD0260)

2694 
	#AT91C_BASE_CAN_MB4
 ((
AT91PS_CAN_MB
) 0xFFFD0280)

2695 
	#AT91C_BASE_CAN_MB5
 ((
AT91PS_CAN_MB
) 0xFFFD02A0)

2696 
	#AT91C_BASE_CAN_MB6
 ((
AT91PS_CAN_MB
) 0xFFFD02C0)

2697 
	#AT91C_BASE_CAN_MB7
 ((
AT91PS_CAN_MB
) 0xFFFD02E0)

2698 
	#AT91C_BASE_CAN
 ((
AT91PS_CAN
) 0xFFFD0000)

2699 
	#AT91C_BASE_EMAC
 ((
AT91PS_EMAC
) 0xFFFDC000)

2700 
	#AT91C_BASE_PDC_ADC
 ((
AT91PS_PDC
) 0xFFFD8100)

2701 
	#AT91C_BASE_ADC
 ((
AT91PS_ADC
) 0xFFFD8000)

2702 
	#AT91C_BASE_PDC_AES
 ((
AT91PS_PDC
) 0xFFFA4100)

2703 
	#AT91C_BASE_AES
 ((
AT91PS_AES
) 0xFFFA4000)

2704 
	#AT91C_BASE_PDC_TDES
 ((
AT91PS_PDC
) 0xFFFA8100)

2705 
	#AT91C_BASE_TDES
 ((
AT91PS_TDES
) 0xFFFA8000)

2706 

	)

2710 
	#AT91C_ISRAM
 ((*) 0x00200000)

2711 
	#AT91C_ISRAM_SIZE
 (() 0x00010000)

2712 
	#AT91C_IFLASH
 ((*) 0x00100000)

2713 
	#AT91C_IFLASH_SIZE
 (() 0x00040000)

2714 

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7X256_inc.h

56 
	#AIC_SMR
 ( 0)

57 
	#AIC_SVR
 (128)

58 
	#AIC_IVR
 (256)

59 
	#AIC_FVR
 (260)

60 
	#AIC_ISR
 (264)

61 
	#AIC_IPR
 (268)

62 
	#AIC_IMR
 (272)

63 
	#AIC_CISR
 (276)

64 
	#AIC_IECR
 (288)

65 
	#AIC_IDCR
 (292)

66 
	#AIC_ICCR
 (296)

67 
	#AIC_ISCR
 (300)

68 
	#AIC_EOICR
 (304)

69 
	#AIC_SPU
 (308)

70 
	#AIC_DCR
 (312)

71 
	#AIC_FFER
 (320)

72 
	#AIC_FFDR
 (324)

73 
	#AIC_FFSR
 (328)

75 
	#AT91C_AIC_PRIOR
 (0x7 << 0)

76 
	#AT91C_AIC_PRIOR_LOWEST
 (0x0)

77 
	#AT91C_AIC_PRIOR_HIGHEST
 (0x7)

78 
	#AT91C_AIC_SRCTYPE
 (0x3 << 5)

79 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (0x0 << 5)

80 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (0x0 << 5)

81 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (0x1 << 5)

82 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (0x1 << 5)

83 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (0x2 << 5)

84 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (0x3 << 5)

86 
	#AT91C_AIC_NFIQ
 (0x1 << 0)

87 
	#AT91C_AIC_NIRQ
 (0x1 << 1)

89 
	#AT91C_AIC_DCR_PROT
 (0x1 << 0)

90 
	#AT91C_AIC_DCR_GMSK
 (0x1 << 1)

91 

	)

96 
	#PDC_RPR
 ( 0)

97 
	#PDC_RCR
 ( 4)

98 
	#PDC_TPR
 ( 8)

99 
	#PDC_TCR
 (12)

100 
	#PDC_RNPR
 (16)

101 
	#PDC_RNCR
 (20)

102 
	#PDC_TNPR
 (24)

103 
	#PDC_TNCR
 (28)

104 
	#PDC_PTCR
 (32)

105 
	#PDC_PTSR
 (36)

107 
	#AT91C_PDC_RXTEN
 (0x1 << 0)

108 
	#AT91C_PDC_RXTDIS
 (0x1 << 1)

109 
	#AT91C_PDC_TXTEN
 (0x1 << 8)

110 
	#AT91C_PDC_TXTDIS
 (0x1 << 9)

112 

	)

117 
	#DBGU_CR
 ( 0)

118 
	#DBGU_MR
 ( 4)

119 
	#DBGU_IER
 ( 8)

120 
	#DBGU_IDR
 (12)

121 
	#DBGU_IMR
 (16)

122 
	#DBGU_CSR
 (20)

123 
	#DBGU_RHR
 (24)

124 
	#DBGU_THR
 (28)

125 
	#DBGU_BRGR
 (32)

126 
	#DBGU_CIDR
 (64)

127 
	#DBGU_EXID
 (68)

128 
	#DBGU_FNTR
 (72)

129 
	#DBGU_RPR
 (256)

130 
	#DBGU_RCR
 (260)

131 
	#DBGU_TPR
 (264)

132 
	#DBGU_TCR
 (268)

133 
	#DBGU_RNPR
 (272)

134 
	#DBGU_RNCR
 (276)

135 
	#DBGU_TNPR
 (280)

136 
	#DBGU_TNCR
 (284)

137 
	#DBGU_PTCR
 (288)

138 
	#DBGU_PTSR
 (292)

140 
	#AT91C_US_RSTRX
 (0x1 << 2)

141 
	#AT91C_US_RSTTX
 (0x1 << 3)

142 
	#AT91C_US_RXEN
 (0x1 << 4)

143 
	#AT91C_US_RXDIS
 (0x1 << 5)

144 
	#AT91C_US_TXEN
 (0x1 << 6)

145 
	#AT91C_US_TXDIS
 (0x1 << 7)

146 
	#AT91C_US_RSTSTA
 (0x1 << 8)

148 
	#AT91C_US_PAR
 (0x7 << 9)

149 
	#AT91C_US_PAR_EVEN
 (0x0 << 9)

150 
	#AT91C_US_PAR_ODD
 (0x1 << 9)

151 
	#AT91C_US_PAR_SPACE
 (0x2 << 9)

152 
	#AT91C_US_PAR_MARK
 (0x3 << 9)

153 
	#AT91C_US_PAR_NONE
 (0x4 << 9)

154 
	#AT91C_US_PAR_MULTI_DROP
 (0x6 << 9)

155 
	#AT91C_US_CHMODE
 (0x3 << 14)

156 
	#AT91C_US_CHMODE_NORMAL
 (0x0 << 14)

157 
	#AT91C_US_CHMODE_AUTO
 (0x1 << 14)

158 
	#AT91C_US_CHMODE_LOCAL
 (0x2 << 14)

159 
	#AT91C_US_CHMODE_REMOTE
 (0x3 << 14)

161 
	#AT91C_US_RXRDY
 (0x1 << 0)

162 
	#AT91C_US_TXRDY
 (0x1 << 1)

163 
	#AT91C_US_ENDRX
 (0x1 << 3)

164 
	#AT91C_US_ENDTX
 (0x1 << 4)

165 
	#AT91C_US_OVRE
 (0x1 << 5)

166 
	#AT91C_US_FRAME
 (0x1 << 6)

167 
	#AT91C_US_PARE
 (0x1 << 7)

168 
	#AT91C_US_TXEMPTY
 (0x1 << 9)

169 
	#AT91C_US_TXBUFE
 (0x1 << 11)

170 
	#AT91C_US_RXBUFF
 (0x1 << 12)

171 
	#AT91C_US_COMM_TX
 (0x1 << 30)

172 
	#AT91C_US_COMM_RX
 (0x1 << 31)

177 
	#AT91C_US_FORCE_NTRST
 (0x1 << 0)

178 

	)

183 
	#PIO_PER
 ( 0)

184 
	#PIO_PDR
 ( 4)

185 
	#PIO_PSR
 ( 8)

186 
	#PIO_OER
 (16)

187 
	#PIO_ODR
 (20)

188 
	#PIO_OSR
 (24)

189 
	#PIO_IFER
 (32)

190 
	#PIO_IFDR
 (36)

191 
	#PIO_IFSR
 (40)

192 
	#PIO_SODR
 (48)

193 
	#PIO_CODR
 (52)

194 
	#PIO_ODSR
 (56)

195 
	#PIO_PDSR
 (60)

196 
	#PIO_IER
 (64)

197 
	#PIO_IDR
 (68)

198 
	#PIO_IMR
 (72)

199 
	#PIO_ISR
 (76)

200 
	#PIO_MDER
 (80)

201 
	#PIO_MDDR
 (84)

202 
	#PIO_MDSR
 (88)

203 
	#PIO_PPUDR
 (96)

204 
	#PIO_PPUER
 (100)

205 
	#PIO_PPUSR
 (104)

206 
	#PIO_ASR
 (112)

207 
	#PIO_BSR
 (116)

208 
	#PIO_ABSR
 (120)

209 
	#PIO_OWER
 (160)

210 
	#PIO_OWDR
 (164)

211 
	#PIO_OWSR
 (168)

212 

	)

217 
	#CKGR_MOR
 ( 0)

218 
	#CKGR_MCFR
 ( 4)

219 
	#CKGR_PLLR
 (12)

221 
	#AT91C_CKGR_MOSCEN
 (0x1 << 0)

222 
	#AT91C_CKGR_OSCBYPASS
 (0x1 << 1)

223 
	#AT91C_CKGR_OSCOUNT
 (0xFF << 8)

225 
	#AT91C_CKGR_MAINF
 (0xFFFF << 0)

226 
	#AT91C_CKGR_MAINRDY
 (0x1 << 16)

228 
	#AT91C_CKGR_DIV
 (0xFF << 0)

229 
	#AT91C_CKGR_DIV_0
 (0x0)

230 
	#AT91C_CKGR_DIV_BYPASS
 (0x1)

231 
	#AT91C_CKGR_PLLCOUNT
 (0x3F << 8)

232 
	#AT91C_CKGR_OUT
 (0x3 << 14)

233 
	#AT91C_CKGR_OUT_0
 (0x0 << 14)

234 
	#AT91C_CKGR_OUT_1
 (0x1 << 14)

235 
	#AT91C_CKGR_OUT_2
 (0x2 << 14)

236 
	#AT91C_CKGR_OUT_3
 (0x3 << 14)

237 
	#AT91C_CKGR_MUL
 (0x7FF << 16)

238 
	#AT91C_CKGR_USBDIV
 (0x3 << 28)

239 
	#AT91C_CKGR_USBDIV_0
 (0x0 << 28)

240 
	#AT91C_CKGR_USBDIV_1
 (0x1 << 28)

241 
	#AT91C_CKGR_USBDIV_2
 (0x2 << 28)

242 

	)

247 
	#PMC_SCER
 ( 0)

248 
	#PMC_SCDR
 ( 4)

249 
	#PMC_SCSR
 ( 8)

250 
	#PMC_PCER
 (16)

251 
	#PMC_PCDR
 (20)

252 
	#PMC_PCSR
 (24)

253 
	#PMC_MOR
 (32)

254 
	#PMC_MCFR
 (36)

255 
	#PMC_PLLR
 (44)

256 
	#PMC_MCKR
 (48)

257 
	#PMC_PCKR
 (64)

258 
	#PMC_IER
 (96)

259 
	#PMC_IDR
 (100)

260 
	#PMC_SR
 (104)

261 
	#PMC_IMR
 (108)

263 
	#AT91C_PMC_PCK
 (0x1 << 0)

264 
	#AT91C_PMC_UDP
 (0x1 << 7)

265 
	#AT91C_PMC_PCK0
 (0x1 << 8)

266 
	#AT91C_PMC_PCK1
 (0x1 << 9)

267 
	#AT91C_PMC_PCK2
 (0x1 << 10)

268 
	#AT91C_PMC_PCK3
 (0x1 << 11)

275 
	#AT91C_PMC_CSS
 (0x3 << 0)

276 
	#AT91C_PMC_CSS_SLOW_CLK
 (0x0)

277 
	#AT91C_PMC_CSS_MAIN_CLK
 (0x1)

278 
	#AT91C_PMC_CSS_PLL_CLK
 (0x3)

279 
	#AT91C_PMC_PRES
 (0x7 << 2)

280 
	#AT91C_PMC_PRES_CLK
 (0x0 << 2)

281 
	#AT91C_PMC_PRES_CLK_2
 (0x1 << 2)

282 
	#AT91C_PMC_PRES_CLK_4
 (0x2 << 2)

283 
	#AT91C_PMC_PRES_CLK_8
 (0x3 << 2)

284 
	#AT91C_PMC_PRES_CLK_16
 (0x4 << 2)

285 
	#AT91C_PMC_PRES_CLK_32
 (0x5 << 2)

286 
	#AT91C_PMC_PRES_CLK_64
 (0x6 << 2)

289 
	#AT91C_PMC_MOSCS
 (0x1 << 0)

290 
	#AT91C_PMC_LOCK
 (0x1 << 2)

291 
	#AT91C_PMC_MCKRDY
 (0x1 << 3)

292 
	#AT91C_PMC_PCK0RDY
 (0x1 << 8)

293 
	#AT91C_PMC_PCK1RDY
 (0x1 << 9)

294 
	#AT91C_PMC_PCK2RDY
 (0x1 << 10)

295 
	#AT91C_PMC_PCK3RDY
 (0x1 << 11)

299 

	)

304 
	#RSTC_RCR
 ( 0)

305 
	#RSTC_RSR
 ( 4)

306 
	#RSTC_RMR
 ( 8)

308 
	#AT91C_RSTC_PROCRST
 (0x1 << 0)

309 
	#AT91C_RSTC_PERRST
 (0x1 << 2)

310 
	#AT91C_RSTC_EXTRST
 (0x1 << 3)

311 
	#AT91C_RSTC_KEY
 (0xFF << 24)

313 
	#AT91C_RSTC_URSTS
 (0x1 << 0)

314 
	#AT91C_RSTC_BODSTS
 (0x1 << 1)

315 
	#AT91C_RSTC_RSTTYP
 (0x7 << 8)

316 
	#AT91C_RSTC_RSTTYP_POWERUP
 (0x0 << 8)

317 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (0x1 << 8)

318 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (0x2 << 8)

319 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (0x3 << 8)

320 
	#AT91C_RSTC_RSTTYP_USER
 (0x4 << 8)

321 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (0x5 << 8)

322 
	#AT91C_RSTC_NRSTL
 (0x1 << 16)

323 
	#AT91C_RSTC_SRCMP
 (0x1 << 17)

325 
	#AT91C_RSTC_URSTEN
 (0x1 << 0)

326 
	#AT91C_RSTC_URSTIEN
 (0x1 << 4)

327 
	#AT91C_RSTC_ERSTL
 (0xF << 8)

328 
	#AT91C_RSTC_BODIEN
 (0x1 << 16)

329 

	)

334 
	#RTTC_RTMR
 ( 0)

335 
	#RTTC_RTAR
 ( 4)

336 
	#RTTC_RTVR
 ( 8)

337 
	#RTTC_RTSR
 (12)

339 
	#AT91C_RTTC_RTPRES
 (0xFFFF << 0)

340 
	#AT91C_RTTC_ALMIEN
 (0x1 << 16)

341 
	#AT91C_RTTC_RTTINCIEN
 (0x1 << 17)

342 
	#AT91C_RTTC_RTTRST
 (0x1 << 18)

344 
	#AT91C_RTTC_ALMV
 (0x0 << 0)

346 
	#AT91C_RTTC_CRTV
 (0x0 << 0)

348 
	#AT91C_RTTC_ALMS
 (0x1 << 0)

349 
	#AT91C_RTTC_RTTINC
 (0x1 << 1)

350 

	)

355 
	#PITC_PIMR
 ( 0)

356 
	#PITC_PISR
 ( 4)

357 
	#PITC_PIVR
 ( 8)

358 
	#PITC_PIIR
 (12)

360 
	#AT91C_PITC_PIV
 (0xFFFFF << 0)

361 
	#AT91C_PITC_PITEN
 (0x1 << 24)

362 
	#AT91C_PITC_PITIEN
 (0x1 << 25)

364 
	#AT91C_PITC_PITS
 (0x1 << 0)

366 
	#AT91C_PITC_CPIV
 (0xFFFFF << 0)

367 
	#AT91C_PITC_PICNT
 (0xFFF << 20)

369 

	)

374 
	#WDTC_WDCR
 ( 0)

375 
	#WDTC_WDMR
 ( 4)

376 
	#WDTC_WDSR
 ( 8)

378 
	#AT91C_WDTC_WDRSTT
 (0x1 << 0)

379 
	#AT91C_WDTC_KEY
 (0xFF << 24)

381 
	#AT91C_WDTC_WDV
 (0xFFF << 0)

382 
	#AT91C_WDTC_WDFIEN
 (0x1 << 12)

383 
	#AT91C_WDTC_WDRSTEN
 (0x1 << 13)

384 
	#AT91C_WDTC_WDRPROC
 (0x1 << 14)

385 
	#AT91C_WDTC_WDDIS
 (0x1 << 15)

386 
	#AT91C_WDTC_WDD
 (0xFFF << 16)

387 
	#AT91C_WDTC_WDDBGHLT
 (0x1 << 28)

388 
	#AT91C_WDTC_WDIDLEHLT
 (0x1 << 29)

390 
	#AT91C_WDTC_WDUNF
 (0x1 << 0)

391 
	#AT91C_WDTC_WDERR
 (0x1 << 1)

392 

	)

397 
	#VREG_MR
 ( 0)

399 
	#AT91C_VREG_PSTDBY
 (0x1 << 0)

400 

	)

405 
	#MC_RCR
 ( 0)

406 
	#MC_ASR
 ( 4)

407 
	#MC_AASR
 ( 8)

408 
	#MC_FMR
 (96)

409 
	#MC_FCR
 (100)

410 
	#MC_FSR
 (104)

412 
	#AT91C_MC_RCB
 (0x1 << 0)

414 
	#AT91C_MC_UNDADD
 (0x1 << 0)

415 
	#AT91C_MC_MISADD
 (0x1 << 1)

416 
	#AT91C_MC_ABTSZ
 (0x3 << 8)

417 
	#AT91C_MC_ABTSZ_BYTE
 (0x0 << 8)

418 
	#AT91C_MC_ABTSZ_HWORD
 (0x1 << 8)

419 
	#AT91C_MC_ABTSZ_WORD
 (0x2 << 8)

420 
	#AT91C_MC_ABTTYP
 (0x3 << 10)

421 
	#AT91C_MC_ABTTYP_DATAR
 (0x0 << 10)

422 
	#AT91C_MC_ABTTYP_DATAW
 (0x1 << 10)

423 
	#AT91C_MC_ABTTYP_FETCH
 (0x2 << 10)

424 
	#AT91C_MC_MST0
 (0x1 << 16)

425 
	#AT91C_MC_MST1
 (0x1 << 17)

426 
	#AT91C_MC_SVMST0
 (0x1 << 24)

427 
	#AT91C_MC_SVMST1
 (0x1 << 25)

429 
	#AT91C_MC_FRDY
 (0x1 << 0)

430 
	#AT91C_MC_LOCKE
 (0x1 << 2)

431 
	#AT91C_MC_PROGE
 (0x1 << 3)

432 
	#AT91C_MC_NEBP
 (0x1 << 7)

433 
	#AT91C_MC_FWS
 (0x3 << 8)

434 
	#AT91C_MC_FWS_0FWS
 (0x0 << 8)

435 
	#AT91C_MC_FWS_1FWS
 (0x1 << 8)

436 
	#AT91C_MC_FWS_2FWS
 (0x2 << 8)

437 
	#AT91C_MC_FWS_3FWS
 (0x3 << 8)

438 
	#AT91C_MC_FMCN
 (0xFF << 16)

440 
	#AT91C_MC_FCMD
 (0xF << 0)

441 
	#AT91C_MC_FCMD_START_PROG
 (0x1)

442 
	#AT91C_MC_FCMD_LOCK
 (0x2)

443 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (0x3)

444 
	#AT91C_MC_FCMD_UNLOCK
 (0x4)

445 
	#AT91C_MC_FCMD_ERASE_ALL
 (0x8)

446 
	#AT91C_MC_FCMD_SET_GP_NVM
 (0xB)

447 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (0xD)

448 
	#AT91C_MC_FCMD_SET_SECURITY
 (0xF)

449 
	#AT91C_MC_PAGEN
 (0x3FF << 8)

450 
	#AT91C_MC_KEY
 (0xFF << 24)

452 
	#AT91C_MC_SECURITY
 (0x1 << 4)

453 
	#AT91C_MC_GPNVM0
 (0x1 << 8)

454 
	#AT91C_MC_GPNVM1
 (0x1 << 9)

455 
	#AT91C_MC_GPNVM2
 (0x1 << 10)

456 
	#AT91C_MC_GPNVM3
 (0x1 << 11)

457 
	#AT91C_MC_GPNVM4
 (0x1 << 12)

458 
	#AT91C_MC_GPNVM5
 (0x1 << 13)

459 
	#AT91C_MC_GPNVM6
 (0x1 << 14)

460 
	#AT91C_MC_GPNVM7
 (0x1 << 15)

461 
	#AT91C_MC_LOCKS0
 (0x1 << 16)

462 
	#AT91C_MC_LOCKS1
 (0x1 << 17)

463 
	#AT91C_MC_LOCKS2
 (0x1 << 18)

464 
	#AT91C_MC_LOCKS3
 (0x1 << 19)

465 
	#AT91C_MC_LOCKS4
 (0x1 << 20)

466 
	#AT91C_MC_LOCKS5
 (0x1 << 21)

467 
	#AT91C_MC_LOCKS6
 (0x1 << 22)

468 
	#AT91C_MC_LOCKS7
 (0x1 << 23)

469 
	#AT91C_MC_LOCKS8
 (0x1 << 24)

470 
	#AT91C_MC_LOCKS9
 (0x1 << 25)

471 
	#AT91C_MC_LOCKS10
 (0x1 << 26)

472 
	#AT91C_MC_LOCKS11
 (0x1 << 27)

473 
	#AT91C_MC_LOCKS12
 (0x1 << 28)

474 
	#AT91C_MC_LOCKS13
 (0x1 << 29)

475 
	#AT91C_MC_LOCKS14
 (0x1 << 30)

476 
	#AT91C_MC_LOCKS15
 (0x1 << 31)

477 

	)

482 
	#SPI_CR
 ( 0)

483 
	#SPI_MR
 ( 4)

484 
	#SPI_RDR
 ( 8)

485 
	#SPI_TDR
 (12)

486 
	#SPI_SR
 (16)

487 
	#SPI_IER
 (20)

488 
	#SPI_IDR
 (24)

489 
	#SPI_IMR
 (28)

490 
	#SPI_CSR
 (48)

491 
	#SPI_RPR
 (256)

492 
	#SPI_RCR
 (260)

493 
	#SPI_TPR
 (264)

494 
	#SPI_TCR
 (268)

495 
	#SPI_RNPR
 (272)

496 
	#SPI_RNCR
 (276)

497 
	#SPI_TNPR
 (280)

498 
	#SPI_TNCR
 (284)

499 
	#SPI_PTCR
 (288)

500 
	#SPI_PTSR
 (292)

502 
	#AT91C_SPI_SPIEN
 (0x1 << 0)

503 
	#AT91C_SPI_SPIDIS
 (0x1 << 1)

504 
	#AT91C_SPI_SWRST
 (0x1 << 7)

505 
	#AT91C_SPI_LASTXFER
 (0x1 << 24)

507 
	#AT91C_SPI_MSTR
 (0x1 << 0)

508 
	#AT91C_SPI_PS
 (0x1 << 1)

509 
	#AT91C_SPI_PS_FIXED
 (0x0 << 1)

510 
	#AT91C_SPI_PS_VARIABLE
 (0x1 << 1)

511 
	#AT91C_SPI_PCSDEC
 (0x1 << 2)

512 
	#AT91C_SPI_FDIV
 (0x1 << 3)

513 
	#AT91C_SPI_MODFDIS
 (0x1 << 4)

514 
	#AT91C_SPI_LLB
 (0x1 << 7)

515 
	#AT91C_SPI_PCS
 (0xF << 16)

516 
	#AT91C_SPI_DLYBCS
 (0xFF << 24)

518 
	#AT91C_SPI_RD
 (0xFFFF << 0)

519 
	#AT91C_SPI_RPCS
 (0xF << 16)

521 
	#AT91C_SPI_TD
 (0xFFFF << 0)

522 
	#AT91C_SPI_TPCS
 (0xF << 16)

524 
	#AT91C_SPI_RDRF
 (0x1 << 0)

525 
	#AT91C_SPI_TDRE
 (0x1 << 1)

526 
	#AT91C_SPI_MODF
 (0x1 << 2)

527 
	#AT91C_SPI_OVRES
 (0x1 << 3)

528 
	#AT91C_SPI_ENDRX
 (0x1 << 4)

529 
	#AT91C_SPI_ENDTX
 (0x1 << 5)

530 
	#AT91C_SPI_RXBUFF
 (0x1 << 6)

531 
	#AT91C_SPI_TXBUFE
 (0x1 << 7)

532 
	#AT91C_SPI_NSSR
 (0x1 << 8)

533 
	#AT91C_SPI_TXEMPTY
 (0x1 << 9)

534 
	#AT91C_SPI_SPIENS
 (0x1 << 16)

539 
	#AT91C_SPI_CPOL
 (0x1 << 0)

540 
	#AT91C_SPI_NCPHA
 (0x1 << 1)

541 
	#AT91C_SPI_CSAAT
 (0x1 << 3)

542 
	#AT91C_SPI_BITS
 (0xF << 4)

543 
	#AT91C_SPI_BITS_8
 (0x0 << 4)

544 
	#AT91C_SPI_BITS_9
 (0x1 << 4)

545 
	#AT91C_SPI_BITS_10
 (0x2 << 4)

546 
	#AT91C_SPI_BITS_11
 (0x3 << 4)

547 
	#AT91C_SPI_BITS_12
 (0x4 << 4)

548 
	#AT91C_SPI_BITS_13
 (0x5 << 4)

549 
	#AT91C_SPI_BITS_14
 (0x6 << 4)

550 
	#AT91C_SPI_BITS_15
 (0x7 << 4)

551 
	#AT91C_SPI_BITS_16
 (0x8 << 4)

552 
	#AT91C_SPI_SCBR
 (0xFF << 8)

553 
	#AT91C_SPI_DLYBS
 (0xFF << 16)

554 
	#AT91C_SPI_DLYBCT
 (0xFF << 24)

555 

	)

560 
	#US_CR
 ( 0)

561 
	#US_MR
 ( 4)

562 
	#US_IER
 ( 8)

563 
	#US_IDR
 (12)

564 
	#US_IMR
 (16)

565 
	#US_CSR
 (20)

566 
	#US_RHR
 (24)

567 
	#US_THR
 (28)

568 
	#US_BRGR
 (32)

569 
	#US_RTOR
 (36)

570 
	#US_TTGR
 (40)

571 
	#US_FIDI
 (64)

572 
	#US_NER
 (68)

573 
	#US_IF
 (76)

574 
	#US_RPR
 (256)

575 
	#US_RCR
 (260)

576 
	#US_TPR
 (264)

577 
	#US_TCR
 (268)

578 
	#US_RNPR
 (272)

579 
	#US_RNCR
 (276)

580 
	#US_TNPR
 (280)

581 
	#US_TNCR
 (284)

582 
	#US_PTCR
 (288)

583 
	#US_PTSR
 (292)

585 
	#AT91C_US_STTBRK
 (0x1 << 9)

586 
	#AT91C_US_STPBRK
 (0x1 << 10)

587 
	#AT91C_US_STTTO
 (0x1 << 11)

588 
	#AT91C_US_SENDA
 (0x1 << 12)

589 
	#AT91C_US_RSTIT
 (0x1 << 13)

590 
	#AT91C_US_RSTNACK
 (0x1 << 14)

591 
	#AT91C_US_RETTO
 (0x1 << 15)

592 
	#AT91C_US_DTREN
 (0x1 << 16)

593 
	#AT91C_US_DTRDIS
 (0x1 << 17)

594 
	#AT91C_US_RTSEN
 (0x1 << 18)

595 
	#AT91C_US_RTSDIS
 (0x1 << 19)

597 
	#AT91C_US_USMODE
 (0xF << 0)

598 
	#AT91C_US_USMODE_NORMAL
 (0x0)

599 
	#AT91C_US_USMODE_RS485
 (0x1)

600 
	#AT91C_US_USMODE_HWHSH
 (0x2)

601 
	#AT91C_US_USMODE_MODEM
 (0x3)

602 
	#AT91C_US_USMODE_ISO7816_0
 (0x4)

603 
	#AT91C_US_USMODE_ISO7816_1
 (0x6)

604 
	#AT91C_US_USMODE_IRDA
 (0x8)

605 
	#AT91C_US_USMODE_SWHSH
 (0xC)

606 
	#AT91C_US_CLKS
 (0x3 << 4)

607 
	#AT91C_US_CLKS_CLOCK
 (0x0 << 4)

608 
	#AT91C_US_CLKS_FDIV1
 (0x1 << 4)

609 
	#AT91C_US_CLKS_SLOW
 (0x2 << 4)

610 
	#AT91C_US_CLKS_EXT
 (0x3 << 4)

611 
	#AT91C_US_CHRL
 (0x3 << 6)

612 
	#AT91C_US_CHRL_5_BITS
 (0x0 << 6)

613 
	#AT91C_US_CHRL_6_BITS
 (0x1 << 6)

614 
	#AT91C_US_CHRL_7_BITS
 (0x2 << 6)

615 
	#AT91C_US_CHRL_8_BITS
 (0x3 << 6)

616 
	#AT91C_US_SYNC
 (0x1 << 8)

617 
	#AT91C_US_NBSTOP
 (0x3 << 12)

618 
	#AT91C_US_NBSTOP_1_BIT
 (0x0 << 12)

619 
	#AT91C_US_NBSTOP_15_BIT
 (0x1 << 12)

620 
	#AT91C_US_NBSTOP_2_BIT
 (0x2 << 12)

621 
	#AT91C_US_MSBF
 (0x1 << 16)

622 
	#AT91C_US_MODE9
 (0x1 << 17)

623 
	#AT91C_US_CKLO
 (0x1 << 18)

624 
	#AT91C_US_OVER
 (0x1 << 19)

625 
	#AT91C_US_INACK
 (0x1 << 20)

626 
	#AT91C_US_DSNACK
 (0x1 << 21)

627 
	#AT91C_US_MAX_ITER
 (0x1 << 24)

628 
	#AT91C_US_FILTER
 (0x1 << 28)

630 
	#AT91C_US_RXBRK
 (0x1 << 2)

631 
	#AT91C_US_TIMEOUT
 (0x1 << 8)

632 
	#AT91C_US_ITERATION
 (0x1 << 10)

633 
	#AT91C_US_NACK
 (0x1 << 13)

634 
	#AT91C_US_RIIC
 (0x1 << 16)

635 
	#AT91C_US_DSRIC
 (0x1 << 17)

636 
	#AT91C_US_DCDIC
 (0x1 << 18)

637 
	#AT91C_US_CTSIC
 (0x1 << 19)

641 
	#AT91C_US_RI
 (0x1 << 20)

642 
	#AT91C_US_DSR
 (0x1 << 21)

643 
	#AT91C_US_DCD
 (0x1 << 22)

644 
	#AT91C_US_CTS
 (0x1 << 23)

645 

	)

650 
	#SSC_CR
 ( 0)

651 
	#SSC_CMR
 ( 4)

652 
	#SSC_RCMR
 (16)

653 
	#SSC_RFMR
 (20)

654 
	#SSC_TCMR
 (24)

655 
	#SSC_TFMR
 (28)

656 
	#SSC_RHR
 (32)

657 
	#SSC_THR
 (36)

658 
	#SSC_RSHR
 (48)

659 
	#SSC_TSHR
 (52)

660 
	#SSC_SR
 (64)

661 
	#SSC_IER
 (68)

662 
	#SSC_IDR
 (72)

663 
	#SSC_IMR
 (76)

664 
	#SSC_RPR
 (256)

665 
	#SSC_RCR
 (260)

666 
	#SSC_TPR
 (264)

667 
	#SSC_TCR
 (268)

668 
	#SSC_RNPR
 (272)

669 
	#SSC_RNCR
 (276)

670 
	#SSC_TNPR
 (280)

671 
	#SSC_TNCR
 (284)

672 
	#SSC_PTCR
 (288)

673 
	#SSC_PTSR
 (292)

675 
	#AT91C_SSC_RXEN
 (0x1 << 0)

676 
	#AT91C_SSC_RXDIS
 (0x1 << 1)

677 
	#AT91C_SSC_TXEN
 (0x1 << 8)

678 
	#AT91C_SSC_TXDIS
 (0x1 << 9)

679 
	#AT91C_SSC_SWRST
 (0x1 << 15)

681 
	#AT91C_SSC_CKS
 (0x3 << 0)

682 
	#AT91C_SSC_CKS_DIV
 (0x0)

683 
	#AT91C_SSC_CKS_TK
 (0x1)

684 
	#AT91C_SSC_CKS_RK
 (0x2)

685 
	#AT91C_SSC_CKO
 (0x7 << 2)

686 
	#AT91C_SSC_CKO_NONE
 (0x0 << 2)

687 
	#AT91C_SSC_CKO_CONTINOUS
 (0x1 << 2)

688 
	#AT91C_SSC_CKO_DATA_TX
 (0x2 << 2)

689 
	#AT91C_SSC_CKI
 (0x1 << 5)

690 
	#AT91C_SSC_START
 (0xF << 8)

691 
	#AT91C_SSC_START_CONTINOUS
 (0x0 << 8)

692 
	#AT91C_SSC_START_TX
 (0x1 << 8)

693 
	#AT91C_SSC_START_LOW_RF
 (0x2 << 8)

694 
	#AT91C_SSC_START_HIGH_RF
 (0x3 << 8)

695 
	#AT91C_SSC_START_FALL_RF
 (0x4 << 8)

696 
	#AT91C_SSC_START_RISE_RF
 (0x5 << 8)

697 
	#AT91C_SSC_START_LEVEL_RF
 (0x6 << 8)

698 
	#AT91C_SSC_START_EDGE_RF
 (0x7 << 8)

699 
	#AT91C_SSC_START_0
 (0x8 << 8)

700 
	#AT91C_SSC_STTDLY
 (0xFF << 16)

701 
	#AT91C_SSC_PERIOD
 (0xFF << 24)

703 
	#AT91C_SSC_DATLEN
 (0x1F << 0)

704 
	#AT91C_SSC_LOOP
 (0x1 << 5)

705 
	#AT91C_SSC_MSBF
 (0x1 << 7)

706 
	#AT91C_SSC_DATNB
 (0xF << 8)

707 
	#AT91C_SSC_FSLEN
 (0xF << 16)

708 
	#AT91C_SSC_FSOS
 (0x7 << 20)

709 
	#AT91C_SSC_FSOS_NONE
 (0x0 << 20)

710 
	#AT91C_SSC_FSOS_NEGATIVE
 (0x1 << 20)

711 
	#AT91C_SSC_FSOS_POSITIVE
 (0x2 << 20)

712 
	#AT91C_SSC_FSOS_LOW
 (0x3 << 20)

713 
	#AT91C_SSC_FSOS_HIGH
 (0x4 << 20)

714 
	#AT91C_SSC_FSOS_TOGGLE
 (0x5 << 20)

715 
	#AT91C_SSC_FSEDGE
 (0x1 << 24)

718 
	#AT91C_SSC_DATDEF
 (0x1 << 5)

719 
	#AT91C_SSC_FSDEN
 (0x1 << 23)

721 
	#AT91C_SSC_TXRDY
 (0x1 << 0)

722 
	#AT91C_SSC_TXEMPTY
 (0x1 << 1)

723 
	#AT91C_SSC_ENDTX
 (0x1 << 2)

724 
	#AT91C_SSC_TXBUFE
 (0x1 << 3)

725 
	#AT91C_SSC_RXRDY
 (0x1 << 4)

726 
	#AT91C_SSC_OVRUN
 (0x1 << 5)

727 
	#AT91C_SSC_ENDRX
 (0x1 << 6)

728 
	#AT91C_SSC_RXBUFF
 (0x1 << 7)

729 
	#AT91C_SSC_TXSYN
 (0x1 << 10)

730 
	#AT91C_SSC_RXSYN
 (0x1 << 11)

731 
	#AT91C_SSC_TXENA
 (0x1 << 16)

732 
	#AT91C_SSC_RXENA
 (0x1 << 17)

736 

	)

741 
	#TWI_CR
 ( 0)

742 
	#TWI_MMR
 ( 4)

743 
	#TWI_IADR
 (12)

744 
	#TWI_CWGR
 (16)

745 
	#TWI_SR
 (32)

746 
	#TWI_IER
 (36)

747 
	#TWI_IDR
 (40)

748 
	#TWI_IMR
 (44)

749 
	#TWI_RHR
 (48)

750 
	#TWI_THR
 (52)

752 
	#AT91C_TWI_START
 (0x1 << 0)

753 
	#AT91C_TWI_STOP
 (0x1 << 1)

754 
	#AT91C_TWI_MSEN
 (0x1 << 2)

755 
	#AT91C_TWI_MSDIS
 (0x1 << 3)

756 
	#AT91C_TWI_SWRST
 (0x1 << 7)

758 
	#AT91C_TWI_IADRSZ
 (0x3 << 8)

759 
	#AT91C_TWI_IADRSZ_NO
 (0x0 << 8)

760 
	#AT91C_TWI_IADRSZ_1_BYTE
 (0x1 << 8)

761 
	#AT91C_TWI_IADRSZ_2_BYTE
 (0x2 << 8)

762 
	#AT91C_TWI_IADRSZ_3_BYTE
 (0x3 << 8)

763 
	#AT91C_TWI_MREAD
 (0x1 << 12)

764 
	#AT91C_TWI_DADR
 (0x7F << 16)

766 
	#AT91C_TWI_CLDIV
 (0xFF << 0)

767 
	#AT91C_TWI_CHDIV
 (0xFF << 8)

768 
	#AT91C_TWI_CKDIV
 (0x7 << 16)

770 
	#AT91C_TWI_TXCOMP
 (0x1 << 0)

771 
	#AT91C_TWI_RXRDY
 (0x1 << 1)

772 
	#AT91C_TWI_TXRDY
 (0x1 << 2)

773 
	#AT91C_TWI_OVRE
 (0x1 << 6)

774 
	#AT91C_TWI_UNRE
 (0x1 << 7)

775 
	#AT91C_TWI_NACK
 (0x1 << 8)

779 

	)

784 
	#PWMC_CMR
 ( 0)

785 
	#PWMC_CDTYR
 ( 4)

786 
	#PWMC_CPRDR
 ( 8)

787 
	#PWMC_CCNTR
 (12)

788 
	#PWMC_CUPDR
 (16)

789 
	#PWMC_Re£rved
 (20)

791 
	#AT91C_PWMC_CPRE
 (0xF << 0)

792 
	#AT91C_PWMC_CPRE_MCK
 (0x0)

793 
	#AT91C_PWMC_CPRE_MCKA
 (0xB)

794 
	#AT91C_PWMC_CPRE_MCKB
 (0xC)

795 
	#AT91C_PWMC_CALG
 (0x1 << 8)

796 
	#AT91C_PWMC_CPOL
 (0x1 << 9)

797 
	#AT91C_PWMC_CPD
 (0x1 << 10)

799 
	#AT91C_PWMC_CDTY
 (0x0 << 0)

801 
	#AT91C_PWMC_CPRD
 (0x0 << 0)

803 
	#AT91C_PWMC_CCNT
 (0x0 << 0)

805 
	#AT91C_PWMC_CUPD
 (0x0 << 0)

806 

	)

811 
	#PWMC_MR
 ( 0)

812 
	#PWMC_ENA
 ( 4)

813 
	#PWMC_DIS
 ( 8)

814 
	#PWMC_SR
 (12)

815 
	#PWMC_IER
 (16)

816 
	#PWMC_IDR
 (20)

817 
	#PWMC_IMR
 (24)

818 
	#PWMC_ISR
 (28)

819 
	#PWMC_VR
 (252)

820 
	#PWMC_CH
 (512)

822 
	#AT91C_PWMC_DIVA
 (0xFF << 0)

823 
	#AT91C_PWMC_PREA
 (0xF << 8)

824 
	#AT91C_PWMC_PREA_MCK
 (0x0 << 8)

825 
	#AT91C_PWMC_DIVB
 (0xFF << 16)

826 
	#AT91C_PWMC_PREB
 (0xF << 24)

827 
	#AT91C_PWMC_PREB_MCK
 (0x0 << 24)

829 
	#AT91C_PWMC_CHID0
 (0x1 << 0)

830 
	#AT91C_PWMC_CHID1
 (0x1 << 1)

831 
	#AT91C_PWMC_CHID2
 (0x1 << 2)

832 
	#AT91C_PWMC_CHID3
 (0x1 << 3)

839 

	)

844 
	#UDP_NUM
 ( 0)

845 
	#UDP_GLBSTATE
 ( 4)

846 
	#UDP_FADDR
 ( 8)

847 
	#UDP_IER
 (16)

848 
	#UDP_IDR
 (20)

849 
	#UDP_IMR
 (24)

850 
	#UDP_ISR
 (28)

851 
	#UDP_ICR
 (32)

852 
	#UDP_RSTEP
 (40)

853 
	#UDP_CSR
 (48)

854 
	#UDP_FDR
 (80)

855 
	#UDP_TXVC
 (116)

857 
	#AT91C_UDP_FRM_NUM
 (0x7FF << 0)

858 
	#AT91C_UDP_FRM_ERR
 (0x1 << 16)

859 
	#AT91C_UDP_FRM_OK
 (0x1 << 17)

861 
	#AT91C_UDP_FADDEN
 (0x1 << 0)

862 
	#AT91C_UDP_CONFG
 (0x1 << 1)

863 
	#AT91C_UDP_ESR
 (0x1 << 2)

864 
	#AT91C_UDP_RSMINPR
 (0x1 << 3)

865 
	#AT91C_UDP_RMWUPE
 (0x1 << 4)

867 
	#AT91C_UDP_FADD
 (0xFF << 0)

868 
	#AT91C_UDP_FEN
 (0x1 << 8)

870 
	#AT91C_UDP_EPINT0
 (0x1 << 0)

871 
	#AT91C_UDP_EPINT1
 (0x1 << 1)

872 
	#AT91C_UDP_EPINT2
 (0x1 << 2)

873 
	#AT91C_UDP_EPINT3
 (0x1 << 3)

874 
	#AT91C_UDP_EPINT4
 (0x1 << 4)

875 
	#AT91C_UDP_EPINT5
 (0x1 << 5)

876 
	#AT91C_UDP_RXSUSP
 (0x1 << 8)

877 
	#AT91C_UDP_RXRSM
 (0x1 << 9)

878 
	#AT91C_UDP_EXTRSM
 (0x1 << 10)

879 
	#AT91C_UDP_SOFINT
 (0x1 << 11)

880 
	#AT91C_UDP_WAKEUP
 (0x1 << 13)

884 
	#AT91C_UDP_ENDBUSRES
 (0x1 << 12)

887 
	#AT91C_UDP_EP0
 (0x1 << 0)

888 
	#AT91C_UDP_EP1
 (0x1 << 1)

889 
	#AT91C_UDP_EP2
 (0x1 << 2)

890 
	#AT91C_UDP_EP3
 (0x1 << 3)

891 
	#AT91C_UDP_EP4
 (0x1 << 4)

892 
	#AT91C_UDP_EP5
 (0x1 << 5)

894 
	#AT91C_UDP_TXCOMP
 (0x1 << 0)

895 
	#AT91C_UDP_RX_DATA_BK0
 (0x1 << 1)

896 
	#AT91C_UDP_RXSETUP
 (0x1 << 2)

897 
	#AT91C_UDP_ISOERROR
 (0x1 << 3)

898 
	#AT91C_UDP_TXPKTRDY
 (0x1 << 4)

899 
	#AT91C_UDP_FORCESTALL
 (0x1 << 5)

900 
	#AT91C_UDP_RX_DATA_BK1
 (0x1 << 6)

901 
	#AT91C_UDP_DIR
 (0x1 << 7)

902 
	#AT91C_UDP_EPTYPE
 (0x7 << 8)

903 
	#AT91C_UDP_EPTYPE_CTRL
 (0x0 << 8)

904 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (0x1 << 8)

905 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (0x2 << 8)

906 
	#AT91C_UDP_EPTYPE_INT_OUT
 (0x3 << 8)

907 
	#AT91C_UDP_EPTYPE_ISO_IN
 (0x5 << 8)

908 
	#AT91C_UDP_EPTYPE_BULK_IN
 (0x6 << 8)

909 
	#AT91C_UDP_EPTYPE_INT_IN
 (0x7 << 8)

910 
	#AT91C_UDP_DTGLE
 (0x1 << 11)

911 
	#AT91C_UDP_EPEDS
 (0x1 << 15)

912 
	#AT91C_UDP_RXBYTECNT
 (0x7FF << 16)

914 
	#AT91C_UDP_TXVDIS
 (0x1 << 8)

915 
	#AT91C_UDP_PUON
 (0x1 << 9)

916 

	)

921 
	#TC_CCR
 ( 0)

922 
	#TC_CMR
 ( 4)

923 
	#TC_CV
 (16)

924 
	#TC_RA
 (20)

925 
	#TC_RB
 (24)

926 
	#TC_RC
 (28)

927 
	#TC_SR
 (32)

928 
	#TC_IER
 (36)

929 
	#TC_IDR
 (40)

930 
	#TC_IMR
 (44)

932 
	#AT91C_TC_CLKEN
 (0x1 << 0)

933 
	#AT91C_TC_CLKDIS
 (0x1 << 1)

934 
	#AT91C_TC_SWTRG
 (0x1 << 2)

936 
	#AT91C_TC_CLKS
 (0x7 << 0)

937 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (0x0)

938 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (0x1)

939 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (0x2)

940 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (0x3)

941 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (0x4)

942 
	#AT91C_TC_CLKS_XC0
 (0x5)

943 
	#AT91C_TC_CLKS_XC1
 (0x6)

944 
	#AT91C_TC_CLKS_XC2
 (0x7)

945 
	#AT91C_TC_CLKI
 (0x1 << 3)

946 
	#AT91C_TC_BURST
 (0x3 << 4)

947 
	#AT91C_TC_BURST_NONE
 (0x0 << 4)

948 
	#AT91C_TC_BURST_XC0
 (0x1 << 4)

949 
	#AT91C_TC_BURST_XC1
 (0x2 << 4)

950 
	#AT91C_TC_BURST_XC2
 (0x3 << 4)

951 
	#AT91C_TC_CPCSTOP
 (0x1 << 6)

952 
	#AT91C_TC_LDBSTOP
 (0x1 << 6)

953 
	#AT91C_TC_CPCDIS
 (0x1 << 7)

954 
	#AT91C_TC_LDBDIS
 (0x1 << 7)

955 
	#AT91C_TC_ETRGEDG
 (0x3 << 8)

956 
	#AT91C_TC_ETRGEDG_NONE
 (0x0 << 8)

957 
	#AT91C_TC_ETRGEDG_RISING
 (0x1 << 8)

958 
	#AT91C_TC_ETRGEDG_FALLING
 (0x2 << 8)

959 
	#AT91C_TC_ETRGEDG_BOTH
 (0x3 << 8)

960 
	#AT91C_TC_EEVTEDG
 (0x3 << 8)

961 
	#AT91C_TC_EEVTEDG_NONE
 (0x0 << 8)

962 
	#AT91C_TC_EEVTEDG_RISING
 (0x1 << 8)

963 
	#AT91C_TC_EEVTEDG_FALLING
 (0x2 << 8)

964 
	#AT91C_TC_EEVTEDG_BOTH
 (0x3 << 8)

965 
	#AT91C_TC_EEVT
 (0x3 << 10)

966 
	#AT91C_TC_EEVT_TIOB
 (0x0 << 10)

967 
	#AT91C_TC_EEVT_XC0
 (0x1 << 10)

968 
	#AT91C_TC_EEVT_XC1
 (0x2 << 10)

969 
	#AT91C_TC_EEVT_XC2
 (0x3 << 10)

970 
	#AT91C_TC_ABETRG
 (0x1 << 10)

971 
	#AT91C_TC_ENETRG
 (0x1 << 12)

972 
	#AT91C_TC_WAVESEL
 (0x3 << 13)

973 
	#AT91C_TC_WAVESEL_UP
 (0x0 << 13)

974 
	#AT91C_TC_WAVESEL_UPDOWN
 (0x1 << 13)

975 
	#AT91C_TC_WAVESEL_UP_AUTO
 (0x2 << 13)

976 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (0x3 << 13)

977 
	#AT91C_TC_CPCTRG
 (0x1 << 14)

978 
	#AT91C_TC_WAVE
 (0x1 << 15)

979 
	#AT91C_TC_ACPA
 (0x3 << 16)

980 
	#AT91C_TC_ACPA_NONE
 (0x0 << 16)

981 
	#AT91C_TC_ACPA_SET
 (0x1 << 16)

982 
	#AT91C_TC_ACPA_CLEAR
 (0x2 << 16)

983 
	#AT91C_TC_ACPA_TOGGLE
 (0x3 << 16)

984 
	#AT91C_TC_LDRA
 (0x3 << 16)

985 
	#AT91C_TC_LDRA_NONE
 (0x0 << 16)

986 
	#AT91C_TC_LDRA_RISING
 (0x1 << 16)

987 
	#AT91C_TC_LDRA_FALLING
 (0x2 << 16)

988 
	#AT91C_TC_LDRA_BOTH
 (0x3 << 16)

989 
	#AT91C_TC_ACPC
 (0x3 << 18)

990 
	#AT91C_TC_ACPC_NONE
 (0x0 << 18)

991 
	#AT91C_TC_ACPC_SET
 (0x1 << 18)

992 
	#AT91C_TC_ACPC_CLEAR
 (0x2 << 18)

993 
	#AT91C_TC_ACPC_TOGGLE
 (0x3 << 18)

994 
	#AT91C_TC_LDRB
 (0x3 << 18)

995 
	#AT91C_TC_LDRB_NONE
 (0x0 << 18)

996 
	#AT91C_TC_LDRB_RISING
 (0x1 << 18)

997 
	#AT91C_TC_LDRB_FALLING
 (0x2 << 18)

998 
	#AT91C_TC_LDRB_BOTH
 (0x3 << 18)

999 
	#AT91C_TC_AEEVT
 (0x3 << 20)

1000 
	#AT91C_TC_AEEVT_NONE
 (0x0 << 20)

1001 
	#AT91C_TC_AEEVT_SET
 (0x1 << 20)

1002 
	#AT91C_TC_AEEVT_CLEAR
 (0x2 << 20)

1003 
	#AT91C_TC_AEEVT_TOGGLE
 (0x3 << 20)

1004 
	#AT91C_TC_ASWTRG
 (0x3 << 22)

1005 
	#AT91C_TC_ASWTRG_NONE
 (0x0 << 22)

1006 
	#AT91C_TC_ASWTRG_SET
 (0x1 << 22)

1007 
	#AT91C_TC_ASWTRG_CLEAR
 (0x2 << 22)

1008 
	#AT91C_TC_ASWTRG_TOGGLE
 (0x3 << 22)

1009 
	#AT91C_TC_BCPB
 (0x3 << 24)

1010 
	#AT91C_TC_BCPB_NONE
 (0x0 << 24)

1011 
	#AT91C_TC_BCPB_SET
 (0x1 << 24)

1012 
	#AT91C_TC_BCPB_CLEAR
 (0x2 << 24)

1013 
	#AT91C_TC_BCPB_TOGGLE
 (0x3 << 24)

1014 
	#AT91C_TC_BCPC
 (0x3 << 26)

1015 
	#AT91C_TC_BCPC_NONE
 (0x0 << 26)

1016 
	#AT91C_TC_BCPC_SET
 (0x1 << 26)

1017 
	#AT91C_TC_BCPC_CLEAR
 (0x2 << 26)

1018 
	#AT91C_TC_BCPC_TOGGLE
 (0x3 << 26)

1019 
	#AT91C_TC_BEEVT
 (0x3 << 28)

1020 
	#AT91C_TC_BEEVT_NONE
 (0x0 << 28)

1021 
	#AT91C_TC_BEEVT_SET
 (0x1 << 28)

1022 
	#AT91C_TC_BEEVT_CLEAR
 (0x2 << 28)

1023 
	#AT91C_TC_BEEVT_TOGGLE
 (0x3 << 28)

1024 
	#AT91C_TC_BSWTRG
 (0x3 << 30)

1025 
	#AT91C_TC_BSWTRG_NONE
 (0x0 << 30)

1026 
	#AT91C_TC_BSWTRG_SET
 (0x1 << 30)

1027 
	#AT91C_TC_BSWTRG_CLEAR
 (0x2 << 30)

1028 
	#AT91C_TC_BSWTRG_TOGGLE
 (0x3 << 30)

1030 
	#AT91C_TC_COVFS
 (0x1 << 0)

1031 
	#AT91C_TC_LOVRS
 (0x1 << 1)

1032 
	#AT91C_TC_CPAS
 (0x1 << 2)

1033 
	#AT91C_TC_CPBS
 (0x1 << 3)

1034 
	#AT91C_TC_CPCS
 (0x1 << 4)

1035 
	#AT91C_TC_LDRAS
 (0x1 << 5)

1036 
	#AT91C_TC_LDRBS
 (0x1 << 6)

1037 
	#AT91C_TC_ETRGS
 (0x1 << 7)

1038 
	#AT91C_TC_CLKSTA
 (0x1 << 16)

1039 
	#AT91C_TC_MTIOA
 (0x1 << 17)

1040 
	#AT91C_TC_MTIOB
 (0x1 << 18)

1044 

	)

1049 
	#TCB_TC0
 ( 0)

1050 
	#TCB_TC1
 (64)

1051 
	#TCB_TC2
 (128)

1052 
	#TCB_BCR
 (192)

1053 
	#TCB_BMR
 (196)

1055 
	#AT91C_TCB_SYNC
 (0x1 << 0)

1057 
	#AT91C_TCB_TC0XC0S
 (0x3 << 0)

1058 
	#AT91C_TCB_TC0XC0S_TCLK0
 (0x0)

1059 
	#AT91C_TCB_TC0XC0S_NONE
 (0x1)

1060 
	#AT91C_TCB_TC0XC0S_TIOA1
 (0x2)

1061 
	#AT91C_TCB_TC0XC0S_TIOA2
 (0x3)

1062 
	#AT91C_TCB_TC1XC1S
 (0x3 << 2)

1063 
	#AT91C_TCB_TC1XC1S_TCLK1
 (0x0 << 2)

1064 
	#AT91C_TCB_TC1XC1S_NONE
 (0x1 << 2)

1065 
	#AT91C_TCB_TC1XC1S_TIOA0
 (0x2 << 2)

1066 
	#AT91C_TCB_TC1XC1S_TIOA2
 (0x3 << 2)

1067 
	#AT91C_TCB_TC2XC2S
 (0x3 << 4)

1068 
	#AT91C_TCB_TC2XC2S_TCLK2
 (0x0 << 4)

1069 
	#AT91C_TCB_TC2XC2S_NONE
 (0x1 << 4)

1070 
	#AT91C_TCB_TC2XC2S_TIOA0
 (0x2 << 4)

1071 
	#AT91C_TCB_TC2XC2S_TIOA1
 (0x3 << 4)

1072 

	)

1077 
	#CAN_MB_MMR
 ( 0)

1078 
	#CAN_MB_MAM
 ( 4)

1079 
	#CAN_MB_MID
 ( 8)

1080 
	#CAN_MB_MFID
 (12)

1081 
	#CAN_MB_MSR
 (16)

1082 
	#CAN_MB_MDL
 (20)

1083 
	#CAN_MB_MDH
 (24)

1084 
	#CAN_MB_MCR
 (28)

1086 
	#AT91C_CAN_MTIMEMARK
 (0xFFFF << 0)

1087 
	#AT91C_CAN_PRIOR
 (0xF << 16)

1088 
	#AT91C_CAN_MOT
 (0x7 << 24)

1089 
	#AT91C_CAN_MOT_DIS
 (0x0 << 24)

1090 
	#AT91C_CAN_MOT_RX
 (0x1 << 24)

1091 
	#AT91C_CAN_MOT_RXOVERWRITE
 (0x2 << 24)

1092 
	#AT91C_CAN_MOT_TX
 (0x3 << 24)

1093 
	#AT91C_CAN_MOT_CONSUMER
 (0x4 << 24)

1094 
	#AT91C_CAN_MOT_PRODUCER
 (0x5 << 24)

1096 
	#AT91C_CAN_MIDvB
 (0x3FFFF << 0)

1097 
	#AT91C_CAN_MIDvA
 (0x7FF << 18)

1098 
	#AT91C_CAN_MIDE
 (0x1 << 29)

1102 
	#AT91C_CAN_MTIMESTAMP
 (0xFFFF << 0)

1103 
	#AT91C_CAN_MDLC
 (0xF << 16)

1104 
	#AT91C_CAN_MRTR
 (0x1 << 20)

1105 
	#AT91C_CAN_MABT
 (0x1 << 22)

1106 
	#AT91C_CAN_MRDY
 (0x1 << 23)

1107 
	#AT91C_CAN_MMI
 (0x1 << 24)

1111 
	#AT91C_CAN_MACR
 (0x1 << 22)

1112 
	#AT91C_CAN_MTCR
 (0x1 << 23)

1113 

	)

1118 
	#CAN_MR
 ( 0)

1119 
	#CAN_IER
 ( 4)

1120 
	#CAN_IDR
 ( 8)

1121 
	#CAN_IMR
 (12)

1122 
	#CAN_SR
 (16)

1123 
	#CAN_BR
 (20)

1124 
	#CAN_TIM
 (24)

1125 
	#CAN_TIMESTP
 (28)

1126 
	#CAN_ECR
 (32)

1127 
	#CAN_TCR
 (36)

1128 
	#CAN_ACR
 (40)

1129 
	#CAN_VR
 (252)

1130 
	#CAN_MB0
 (512)

1131 
	#CAN_MB1
 (544)

1132 
	#CAN_MB2
 (576)

1133 
	#CAN_MB3
 (608)

1134 
	#CAN_MB4
 (640)

1135 
	#CAN_MB5
 (672)

1136 
	#CAN_MB6
 (704)

1137 
	#CAN_MB7
 (736)

1138 
	#CAN_MB8
 (768)

1139 
	#CAN_MB9
 (800)

1140 
	#CAN_MB10
 (832)

1141 
	#CAN_MB11
 (864)

1142 
	#CAN_MB12
 (896)

1143 
	#CAN_MB13
 (928)

1144 
	#CAN_MB14
 (960)

1145 
	#CAN_MB15
 (992)

1147 
	#AT91C_CAN_CANEN
 (0x1 << 0)

1148 
	#AT91C_CAN_LPM
 (0x1 << 1)

1149 
	#AT91C_CAN_ABM
 (0x1 << 2)

1150 
	#AT91C_CAN_OVL
 (0x1 << 3)

1151 
	#AT91C_CAN_TEOF
 (0x1 << 4)

1152 
	#AT91C_CAN_TTM
 (0x1 << 5)

1153 
	#AT91C_CAN_TIMFRZ
 (0x1 << 6)

1154 
	#AT91C_CAN_DRPT
 (0x1 << 7)

1156 
	#AT91C_CAN_MB0
 (0x1 << 0)

1157 
	#AT91C_CAN_MB1
 (0x1 << 1)

1158 
	#AT91C_CAN_MB2
 (0x1 << 2)

1159 
	#AT91C_CAN_MB3
 (0x1 << 3)

1160 
	#AT91C_CAN_MB4
 (0x1 << 4)

1161 
	#AT91C_CAN_MB5
 (0x1 << 5)

1162 
	#AT91C_CAN_MB6
 (0x1 << 6)

1163 
	#AT91C_CAN_MB7
 (0x1 << 7)

1164 
	#AT91C_CAN_MB8
 (0x1 << 8)

1165 
	#AT91C_CAN_MB9
 (0x1 << 9)

1166 
	#AT91C_CAN_MB10
 (0x1 << 10)

1167 
	#AT91C_CAN_MB11
 (0x1 << 11)

1168 
	#AT91C_CAN_MB12
 (0x1 << 12)

1169 
	#AT91C_CAN_MB13
 (0x1 << 13)

1170 
	#AT91C_CAN_MB14
 (0x1 << 14)

1171 
	#AT91C_CAN_MB15
 (0x1 << 15)

1172 
	#AT91C_CAN_ERRA
 (0x1 << 16)

1173 
	#AT91C_CAN_WARN
 (0x1 << 17)

1174 
	#AT91C_CAN_ERRP
 (0x1 << 18)

1175 
	#AT91C_CAN_BOFF
 (0x1 << 19)

1176 
	#AT91C_CAN_SLEEP
 (0x1 << 20)

1177 
	#AT91C_CAN_WAKEUP
 (0x1 << 21)

1178 
	#AT91C_CAN_TOVF
 (0x1 << 22)

1179 
	#AT91C_CAN_TSTP
 (0x1 << 23)

1180 
	#AT91C_CAN_CERR
 (0x1 << 24)

1181 
	#AT91C_CAN_SERR
 (0x1 << 25)

1182 
	#AT91C_CAN_AERR
 (0x1 << 26)

1183 
	#AT91C_CAN_FERR
 (0x1 << 27)

1184 
	#AT91C_CAN_BERR
 (0x1 << 28)

1188 
	#AT91C_CAN_RBSY
 (0x1 << 29)

1189 
	#AT91C_CAN_TBSY
 (0x1 << 30)

1190 
	#AT91C_CAN_OVLY
 (0x1 << 31)

1192 
	#AT91C_CAN_PHASE2
 (0x7 << 0)

1193 
	#AT91C_CAN_PHASE1
 (0x7 << 4)

1194 
	#AT91C_CAN_PROPAG
 (0x7 << 8)

1195 
	#AT91C_CAN_SYNC
 (0x3 << 12)

1196 
	#AT91C_CAN_BRP
 (0x7F << 16)

1197 
	#AT91C_CAN_SMP
 (0x1 << 24)

1199 
	#AT91C_CAN_TIMER
 (0xFFFF << 0)

1202 
	#AT91C_CAN_REC
 (0xFF << 0)

1203 
	#AT91C_CAN_TEC
 (0xFF << 16)

1205 
	#AT91C_CAN_TIMRST
 (0x1 << 31)

1207 

	)

1212 
	#EMAC_NCR
 ( 0)

1213 
	#EMAC_NCFGR
 ( 4)

1214 
	#EMAC_NSR
 ( 8)

1215 
	#EMAC_TSR
 (20)

1216 
	#EMAC_RBQP
 (24)

1217 
	#EMAC_TBQP
 (28)

1218 
	#EMAC_RSR
 (32)

1219 
	#EMAC_ISR
 (36)

1220 
	#EMAC_IER
 (40)

1221 
	#EMAC_IDR
 (44)

1222 
	#EMAC_IMR
 (48)

1223 
	#EMAC_MAN
 (52)

1224 
	#EMAC_PTR
 (56)

1225 
	#EMAC_PFR
 (60)

1226 
	#EMAC_FTO
 (64)

1227 
	#EMAC_SCF
 (68)

1228 
	#EMAC_MCF
 (72)

1229 
	#EMAC_FRO
 (76)

1230 
	#EMAC_FCSE
 (80)

1231 
	#EMAC_ALE
 (84)

1232 
	#EMAC_DTF
 (88)

1233 
	#EMAC_LCOL
 (92)

1234 
	#EMAC_ECOL
 (96)

1235 
	#EMAC_TUND
 (100)

1236 
	#EMAC_CSE
 (104)

1237 
	#EMAC_RRE
 (108)

1238 
	#EMAC_ROV
 (112)

1239 
	#EMAC_RSE
 (116)

1240 
	#EMAC_ELE
 (120)

1241 
	#EMAC_RJA
 (124)

1242 
	#EMAC_USF
 (128)

1243 
	#EMAC_STE
 (132)

1244 
	#EMAC_RLE
 (136)

1245 
	#EMAC_TPF
 (140)

1246 
	#EMAC_HRB
 (144)

1247 
	#EMAC_HRT
 (148)

1248 
	#EMAC_SA1L
 (152)

1249 
	#EMAC_SA1H
 (156)

1250 
	#EMAC_SA2L
 (160)

1251 
	#EMAC_SA2H
 (164)

1252 
	#EMAC_SA3L
 (168)

1253 
	#EMAC_SA3H
 (172)

1254 
	#EMAC_SA4L
 (176)

1255 
	#EMAC_SA4H
 (180)

1256 
	#EMAC_TID
 (184)

1257 
	#EMAC_TPQ
 (188)

1258 
	#EMAC_USRIO
 (192)

1259 
	#EMAC_WOL
 (196)

1260 
	#EMAC_REV
 (252)

1262 
	#AT91C_EMAC_LB
 (0x1 << 0)

1263 
	#AT91C_EMAC_LLB
 (0x1 << 1)

1264 
	#AT91C_EMAC_RE
 (0x1 << 2)

1265 
	#AT91C_EMAC_TE
 (0x1 << 3)

1266 
	#AT91C_EMAC_MPE
 (0x1 << 4)

1267 
	#AT91C_EMAC_CLRSTAT
 (0x1 << 5)

1268 
	#AT91C_EMAC_INCSTAT
 (0x1 << 6)

1269 
	#AT91C_EMAC_WESTAT
 (0x1 << 7)

1270 
	#AT91C_EMAC_BP
 (0x1 << 8)

1271 
	#AT91C_EMAC_TSTART
 (0x1 << 9)

1272 
	#AT91C_EMAC_THALT
 (0x1 << 10)

1273 
	#AT91C_EMAC_TPFR
 (0x1 << 11)

1274 
	#AT91C_EMAC_TZQ
 (0x1 << 12)

1276 
	#AT91C_EMAC_SPD
 (0x1 << 0)

1277 
	#AT91C_EMAC_FD
 (0x1 << 1)

1278 
	#AT91C_EMAC_JFRAME
 (0x1 << 3)

1279 
	#AT91C_EMAC_CAF
 (0x1 << 4)

1280 
	#AT91C_EMAC_NBC
 (0x1 << 5)

1281 
	#AT91C_EMAC_MTI
 (0x1 << 6)

1282 
	#AT91C_EMAC_UNI
 (0x1 << 7)

1283 
	#AT91C_EMAC_BIG
 (0x1 << 8)

1284 
	#AT91C_EMAC_EAE
 (0x1 << 9)

1285 
	#AT91C_EMAC_CLK
 (0x3 << 10)

1286 
	#AT91C_EMAC_CLK_HCLK_8
 (0x0 << 10)

1287 
	#AT91C_EMAC_CLK_HCLK_16
 (0x1 << 10)

1288 
	#AT91C_EMAC_CLK_HCLK_32
 (0x2 << 10)

1289 
	#AT91C_EMAC_CLK_HCLK_64
 (0x3 << 10)

1290 
	#AT91C_EMAC_RTY
 (0x1 << 12)

1291 
	#AT91C_EMAC_PAE
 (0x1 << 13)

1292 
	#AT91C_EMAC_RBOF
 (0x3 << 14)

1293 
	#AT91C_EMAC_RBOF_OFFSET_0
 (0x0 << 14)

1294 
	#AT91C_EMAC_RBOF_OFFSET_1
 (0x1 << 14)

1295 
	#AT91C_EMAC_RBOF_OFFSET_2
 (0x2 << 14)

1296 
	#AT91C_EMAC_RBOF_OFFSET_3
 (0x3 << 14)

1297 
	#AT91C_EMAC_RLCE
 (0x1 << 16)

1298 
	#AT91C_EMAC_DRFCS
 (0x1 << 17)

1299 
	#AT91C_EMAC_EFRHD
 (0x1 << 18)

1300 
	#AT91C_EMAC_IRXFCS
 (0x1 << 19)

1302 
	#AT91C_EMAC_LINKR
 (0x1 << 0)

1303 
	#AT91C_EMAC_MDIO
 (0x1 << 1)

1304 
	#AT91C_EMAC_IDLE
 (0x1 << 2)

1306 
	#AT91C_EMAC_UBR
 (0x1 << 0)

1307 
	#AT91C_EMAC_COL
 (0x1 << 1)

1308 
	#AT91C_EMAC_RLES
 (0x1 << 2)

1309 
	#AT91C_EMAC_TGO
 (0x1 << 3)

1310 
	#AT91C_EMAC_BEX
 (0x1 << 4)

1311 
	#AT91C_EMAC_COMP
 (0x1 << 5)

1312 
	#AT91C_EMAC_UND
 (0x1 << 6)

1314 
	#AT91C_EMAC_BNA
 (0x1 << 0)

1315 
	#AT91C_EMAC_REC
 (0x1 << 1)

1316 
	#AT91C_EMAC_OVR
 (0x1 << 2)

1318 
	#AT91C_EMAC_MFD
 (0x1 << 0)

1319 
	#AT91C_EMAC_RCOMP
 (0x1 << 1)

1320 
	#AT91C_EMAC_RXUBR
 (0x1 << 2)

1321 
	#AT91C_EMAC_TXUBR
 (0x1 << 3)

1322 
	#AT91C_EMAC_TUNDR
 (0x1 << 4)

1323 
	#AT91C_EMAC_RLEX
 (0x1 << 5)

1324 
	#AT91C_EMAC_TXERR
 (0x1 << 6)

1325 
	#AT91C_EMAC_TCOMP
 (0x1 << 7)

1326 
	#AT91C_EMAC_LINK
 (0x1 << 9)

1327 
	#AT91C_EMAC_ROVR
 (0x1 << 10)

1328 
	#AT91C_EMAC_HRESP
 (0x1 << 11)

1329 
	#AT91C_EMAC_PFRE
 (0x1 << 12)

1330 
	#AT91C_EMAC_PTZ
 (0x1 << 13)

1335 
	#AT91C_EMAC_DATA
 (0xFFFF << 0)

1336 
	#AT91C_EMAC_CODE
 (0x3 << 16)

1337 
	#AT91C_EMAC_REGA
 (0x1F << 18)

1338 
	#AT91C_EMAC_PHYA
 (0x1F << 23)

1339 
	#AT91C_EMAC_RW
 (0x3 << 28)

1340 
	#AT91C_EMAC_SOF
 (0x3 << 30)

1342 
	#AT91C_EMAC_RMII
 (0x1 << 0)

1344 
	#AT91C_EMAC_IP
 (0xFFFF << 0)

1345 
	#AT91C_EMAC_MAG
 (0x1 << 16)

1346 
	#AT91C_EMAC_ARP
 (0x1 << 17)

1347 
	#AT91C_EMAC_SA1
 (0x1 << 18)

1349 
	#AT91C_EMAC_REVREF
 (0xFFFF << 0)

1350 
	#AT91C_EMAC_PARTREF
 (0xFFFF << 16)

1351 

	)

1356 
	#ADC_CR
 ( 0)

1357 
	#ADC_MR
 ( 4)

1358 
	#ADC_CHER
 (16)

1359 
	#ADC_CHDR
 (20)

1360 
	#ADC_CHSR
 (24)

1361 
	#ADC_SR
 (28)

1362 
	#ADC_LCDR
 (32)

1363 
	#ADC_IER
 (36)

1364 
	#ADC_IDR
 (40)

1365 
	#ADC_IMR
 (44)

1366 
	#ADC_CDR0
 (48)

1367 
	#ADC_CDR1
 (52)

1368 
	#ADC_CDR2
 (56)

1369 
	#ADC_CDR3
 (60)

1370 
	#ADC_CDR4
 (64)

1371 
	#ADC_CDR5
 (68)

1372 
	#ADC_CDR6
 (72)

1373 
	#ADC_CDR7
 (76)

1374 
	#ADC_RPR
 (256)

1375 
	#ADC_RCR
 (260)

1376 
	#ADC_TPR
 (264)

1377 
	#ADC_TCR
 (268)

1378 
	#ADC_RNPR
 (272)

1379 
	#ADC_RNCR
 (276)

1380 
	#ADC_TNPR
 (280)

1381 
	#ADC_TNCR
 (284)

1382 
	#ADC_PTCR
 (288)

1383 
	#ADC_PTSR
 (292)

1385 
	#AT91C_ADC_SWRST
 (0x1 << 0)

1386 
	#AT91C_ADC_START
 (0x1 << 1)

1388 
	#AT91C_ADC_TRGEN
 (0x1 << 0)

1389 
	#AT91C_ADC_TRGEN_DIS
 (0x0)

1390 
	#AT91C_ADC_TRGEN_EN
 (0x1)

1391 
	#AT91C_ADC_TRGSEL
 (0x7 << 1)

1392 
	#AT91C_ADC_TRGSEL_TIOA0
 (0x0 << 1)

1393 
	#AT91C_ADC_TRGSEL_TIOA1
 (0x1 << 1)

1394 
	#AT91C_ADC_TRGSEL_TIOA2
 (0x2 << 1)

1395 
	#AT91C_ADC_TRGSEL_TIOA3
 (0x3 << 1)

1396 
	#AT91C_ADC_TRGSEL_TIOA4
 (0x4 << 1)

1397 
	#AT91C_ADC_TRGSEL_TIOA5
 (0x5 << 1)

1398 
	#AT91C_ADC_TRGSEL_EXT
 (0x6 << 1)

1399 
	#AT91C_ADC_LOWRES
 (0x1 << 4)

1400 
	#AT91C_ADC_LOWRES_10_BIT
 (0x0 << 4)

1401 
	#AT91C_ADC_LOWRES_8_BIT
 (0x1 << 4)

1402 
	#AT91C_ADC_SLEEP
 (0x1 << 5)

1403 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (0x0 << 5)

1404 
	#AT91C_ADC_SLEEP_MODE
 (0x1 << 5)

1405 
	#AT91C_ADC_PRESCAL
 (0x3F << 8)

1406 
	#AT91C_ADC_STARTUP
 (0x1F << 16)

1407 
	#AT91C_ADC_SHTIM
 (0xF << 24)

1409 
	#AT91C_ADC_CH0
 (0x1 << 0)

1410 
	#AT91C_ADC_CH1
 (0x1 << 1)

1411 
	#AT91C_ADC_CH2
 (0x1 << 2)

1412 
	#AT91C_ADC_CH3
 (0x1 << 3)

1413 
	#AT91C_ADC_CH4
 (0x1 << 4)

1414 
	#AT91C_ADC_CH5
 (0x1 << 5)

1415 
	#AT91C_ADC_CH6
 (0x1 << 6)

1416 
	#AT91C_ADC_CH7
 (0x1 << 7)

1420 
	#AT91C_ADC_EOC0
 (0x1 << 0)

1421 
	#AT91C_ADC_EOC1
 (0x1 << 1)

1422 
	#AT91C_ADC_EOC2
 (0x1 << 2)

1423 
	#AT91C_ADC_EOC3
 (0x1 << 3)

1424 
	#AT91C_ADC_EOC4
 (0x1 << 4)

1425 
	#AT91C_ADC_EOC5
 (0x1 << 5)

1426 
	#AT91C_ADC_EOC6
 (0x1 << 6)

1427 
	#AT91C_ADC_EOC7
 (0x1 << 7)

1428 
	#AT91C_ADC_OVRE0
 (0x1 << 8)

1429 
	#AT91C_ADC_OVRE1
 (0x1 << 9)

1430 
	#AT91C_ADC_OVRE2
 (0x1 << 10)

1431 
	#AT91C_ADC_OVRE3
 (0x1 << 11)

1432 
	#AT91C_ADC_OVRE4
 (0x1 << 12)

1433 
	#AT91C_ADC_OVRE5
 (0x1 << 13)

1434 
	#AT91C_ADC_OVRE6
 (0x1 << 14)

1435 
	#AT91C_ADC_OVRE7
 (0x1 << 15)

1436 
	#AT91C_ADC_DRDY
 (0x1 << 16)

1437 
	#AT91C_ADC_GOVRE
 (0x1 << 17)

1438 
	#AT91C_ADC_ENDRX
 (0x1 << 18)

1439 
	#AT91C_ADC_RXBUFF
 (0x1 << 19)

1441 
	#AT91C_ADC_LDATA
 (0x3FF << 0)

1446 
	#AT91C_ADC_DATA
 (0x3FF << 0)

1454 

	)

1459 
	#AES_CR
 ( 0)

1460 
	#AES_MR
 ( 4)

1461 
	#AES_IER
 (16)

1462 
	#AES_IDR
 (20)

1463 
	#AES_IMR
 (24)

1464 
	#AES_ISR
 (28)

1465 
	#AES_KEYWxR
 (32)

1466 
	#AES_IDATAxR
 (64)

1467 
	#AES_ODATAxR
 (80)

1468 
	#AES_IVxR
 (96)

1469 
	#AES_VR
 (252)

1470 
	#AES_RPR
 (256)

1471 
	#AES_RCR
 (260)

1472 
	#AES_TPR
 (264)

1473 
	#AES_TCR
 (268)

1474 
	#AES_RNPR
 (272)

1475 
	#AES_RNCR
 (276)

1476 
	#AES_TNPR
 (280)

1477 
	#AES_TNCR
 (284)

1478 
	#AES_PTCR
 (288)

1479 
	#AES_PTSR
 (292)

1481 
	#AT91C_AES_START
 (0x1 << 0)

1482 
	#AT91C_AES_SWRST
 (0x1 << 8)

1483 
	#AT91C_AES_LOADSEED
 (0x1 << 16)

1485 
	#AT91C_AES_CIPHER
 (0x1 << 0)

1486 
	#AT91C_AES_PROCDLY
 (0xF << 4)

1487 
	#AT91C_AES_SMOD
 (0x3 << 8)

1488 
	#AT91C_AES_SMOD_MANUAL
 (0x0 << 8)

1489 
	#AT91C_AES_SMOD_AUTO
 (0x1 << 8)

1490 
	#AT91C_AES_SMOD_PDC
 (0x2 << 8)

1491 
	#AT91C_AES_OPMOD
 (0x7 << 12)

1492 
	#AT91C_AES_OPMOD_ECB
 (0x0 << 12)

1493 
	#AT91C_AES_OPMOD_CBC
 (0x1 << 12)

1494 
	#AT91C_AES_OPMOD_OFB
 (0x2 << 12)

1495 
	#AT91C_AES_OPMOD_CFB
 (0x3 << 12)

1496 
	#AT91C_AES_OPMOD_CTR
 (0x4 << 12)

1497 
	#AT91C_AES_LOD
 (0x1 << 15)

1498 
	#AT91C_AES_CFBS
 (0x7 << 16)

1499 
	#AT91C_AES_CFBS_128_BIT
 (0x0 << 16)

1500 
	#AT91C_AES_CFBS_64_BIT
 (0x1 << 16)

1501 
	#AT91C_AES_CFBS_32_BIT
 (0x2 << 16)

1502 
	#AT91C_AES_CFBS_16_BIT
 (0x3 << 16)

1503 
	#AT91C_AES_CFBS_8_BIT
 (0x4 << 16)

1504 
	#AT91C_AES_CKEY
 (0xF << 20)

1505 
	#AT91C_AES_CTYPE
 (0x1F << 24)

1506 
	#AT91C_AES_CTYPE_TYPE1_EN
 (0x1 << 24)

1507 
	#AT91C_AES_CTYPE_TYPE2_EN
 (0x2 << 24)

1508 
	#AT91C_AES_CTYPE_TYPE3_EN
 (0x4 << 24)

1509 
	#AT91C_AES_CTYPE_TYPE4_EN
 (0x8 << 24)

1510 
	#AT91C_AES_CTYPE_TYPE5_EN
 (0x10 << 24)

1512 
	#AT91C_AES_DATRDY
 (0x1 << 0)

1513 
	#AT91C_AES_ENDRX
 (0x1 << 1)

1514 
	#AT91C_AES_ENDTX
 (0x1 << 2)

1515 
	#AT91C_AES_RXBUFF
 (0x1 << 3)

1516 
	#AT91C_AES_TXBUFE
 (0x1 << 4)

1517 
	#AT91C_AES_URAD
 (0x1 << 8)

1521 
	#AT91C_AES_URAT
 (0x7 << 12)

1522 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (0x0 << 12)

1523 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (0x1 << 12)

1524 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (0x2 << 12)

1525 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (0x3 << 12)

1526 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (0x4 << 12)

1527 
	#AT91C_AES_URAT_WO_REG_READ
 (0x5 << 12)

1528 

	)

1533 
	#TDES_CR
 ( 0)

1534 
	#TDES_MR
 ( 4)

1535 
	#TDES_IER
 (16)

1536 
	#TDES_IDR
 (20)

1537 
	#TDES_IMR
 (24)

1538 
	#TDES_ISR
 (28)

1539 
	#TDES_KEY1WxR
 (32)

1540 
	#TDES_KEY2WxR
 (40)

1541 
	#TDES_KEY3WxR
 (48)

1542 
	#TDES_IDATAxR
 (64)

1543 
	#TDES_ODATAxR
 (80)

1544 
	#TDES_IVxR
 (96)

1545 
	#TDES_VR
 (252)

1546 
	#TDES_RPR
 (256)

1547 
	#TDES_RCR
 (260)

1548 
	#TDES_TPR
 (264)

1549 
	#TDES_TCR
 (268)

1550 
	#TDES_RNPR
 (272)

1551 
	#TDES_RNCR
 (276)

1552 
	#TDES_TNPR
 (280)

1553 
	#TDES_TNCR
 (284)

1554 
	#TDES_PTCR
 (288)

1555 
	#TDES_PTSR
 (292)

1557 
	#AT91C_TDES_START
 (0x1 << 0)

1558 
	#AT91C_TDES_SWRST
 (0x1 << 8)

1560 
	#AT91C_TDES_CIPHER
 (0x1 << 0)

1561 
	#AT91C_TDES_TDESMOD
 (0x1 << 1)

1562 
	#AT91C_TDES_KEYMOD
 (0x1 << 4)

1563 
	#AT91C_TDES_SMOD
 (0x3 << 8)

1564 
	#AT91C_TDES_SMOD_MANUAL
 (0x0 << 8)

1565 
	#AT91C_TDES_SMOD_AUTO
 (0x1 << 8)

1566 
	#AT91C_TDES_SMOD_PDC
 (0x2 << 8)

1567 
	#AT91C_TDES_OPMOD
 (0x3 << 12)

1568 
	#AT91C_TDES_OPMOD_ECB
 (0x0 << 12)

1569 
	#AT91C_TDES_OPMOD_CBC
 (0x1 << 12)

1570 
	#AT91C_TDES_OPMOD_OFB
 (0x2 << 12)

1571 
	#AT91C_TDES_OPMOD_CFB
 (0x3 << 12)

1572 
	#AT91C_TDES_LOD
 (0x1 << 15)

1573 
	#AT91C_TDES_CFBS
 (0x3 << 16)

1574 
	#AT91C_TDES_CFBS_64_BIT
 (0x0 << 16)

1575 
	#AT91C_TDES_CFBS_32_BIT
 (0x1 << 16)

1576 
	#AT91C_TDES_CFBS_16_BIT
 (0x2 << 16)

1577 
	#AT91C_TDES_CFBS_8_BIT
 (0x3 << 16)

1579 
	#AT91C_TDES_DATRDY
 (0x1 << 0)

1580 
	#AT91C_TDES_ENDRX
 (0x1 << 1)

1581 
	#AT91C_TDES_ENDTX
 (0x1 << 2)

1582 
	#AT91C_TDES_RXBUFF
 (0x1 << 3)

1583 
	#AT91C_TDES_TXBUFE
 (0x1 << 4)

1584 
	#AT91C_TDES_URAD
 (0x1 << 8)

1588 
	#AT91C_TDES_URAT
 (0x3 << 12)

1589 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (0x0 << 12)

1590 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (0x1 << 12)

1591 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (0x2 << 12)

1592 
	#AT91C_TDES_URAT_WO_REG_READ
 (0x3 << 12)

1593 

	)

1599 
	#AT91C_AIC_IVR
 (0xFFFFF100)

1600 
	#AT91C_AIC_SMR
 (0xFFFFF000)

1601 
	#AT91C_AIC_FVR
 (0xFFFFF104)

1602 
	#AT91C_AIC_DCR
 (0xFFFFF138)

1603 
	#AT91C_AIC_EOICR
 (0xFFFFF130)

1604 
	#AT91C_AIC_SVR
 (0xFFFFF080)

1605 
	#AT91C_AIC_FFSR
 (0xFFFFF148)

1606 
	#AT91C_AIC_ICCR
 (0xFFFFF128)

1607 
	#AT91C_AIC_ISR
 (0xFFFFF108)

1608 
	#AT91C_AIC_IMR
 (0xFFFFF110)

1609 
	#AT91C_AIC_IPR
 (0xFFFFF10C)

1610 
	#AT91C_AIC_FFER
 (0xFFFFF140)

1611 
	#AT91C_AIC_IECR
 (0xFFFFF120)

1612 
	#AT91C_AIC_ISCR
 (0xFFFFF12C)

1613 
	#AT91C_AIC_FFDR
 (0xFFFFF144)

1614 
	#AT91C_AIC_CISR
 (0xFFFFF114)

1615 
	#AT91C_AIC_IDCR
 (0xFFFFF124)

1616 
	#AT91C_AIC_SPU
 (0xFFFFF134)

1618 
	#AT91C_DBGU_TCR
 (0xFFFFF30C)

1619 
	#AT91C_DBGU_RNPR
 (0xFFFFF310)

1620 
	#AT91C_DBGU_TNPR
 (0xFFFFF318)

1621 
	#AT91C_DBGU_TPR
 (0xFFFFF308)

1622 
	#AT91C_DBGU_RPR
 (0xFFFFF300)

1623 
	#AT91C_DBGU_RCR
 (0xFFFFF304)

1624 
	#AT91C_DBGU_RNCR
 (0xFFFFF314)

1625 
	#AT91C_DBGU_PTCR
 (0xFFFFF320)

1626 
	#AT91C_DBGU_PTSR
 (0xFFFFF324)

1627 
	#AT91C_DBGU_TNCR
 (0xFFFFF31C)

1629 
	#AT91C_DBGU_EXID
 (0xFFFFF244)

1630 
	#AT91C_DBGU_BRGR
 (0xFFFFF220)

1631 
	#AT91C_DBGU_IDR
 (0xFFFFF20C)

1632 
	#AT91C_DBGU_CSR
 (0xFFFFF214)

1633 
	#AT91C_DBGU_CIDR
 (0xFFFFF240)

1634 
	#AT91C_DBGU_MR
 (0xFFFFF204)

1635 
	#AT91C_DBGU_IMR
 (0xFFFFF210)

1636 
	#AT91C_DBGU_CR
 (0xFFFFF200)

1637 
	#AT91C_DBGU_FNTR
 (0xFFFFF248)

1638 
	#AT91C_DBGU_THR
 (0xFFFFF21C)

1639 
	#AT91C_DBGU_RHR
 (0xFFFFF218)

1640 
	#AT91C_DBGU_IER
 (0xFFFFF208)

1642 
	#AT91C_PIOA_ODR
 (0xFFFFF414)

1643 
	#AT91C_PIOA_SODR
 (0xFFFFF430)

1644 
	#AT91C_PIOA_ISR
 (0xFFFFF44C)

1645 
	#AT91C_PIOA_ABSR
 (0xFFFFF478)

1646 
	#AT91C_PIOA_IER
 (0xFFFFF440)

1647 
	#AT91C_PIOA_PPUDR
 (0xFFFFF460)

1648 
	#AT91C_PIOA_IMR
 (0xFFFFF448)

1649 
	#AT91C_PIOA_PER
 (0xFFFFF400)

1650 
	#AT91C_PIOA_IFDR
 (0xFFFFF424)

1651 
	#AT91C_PIOA_OWDR
 (0xFFFFF4A4)

1652 
	#AT91C_PIOA_MDSR
 (0xFFFFF458)

1653 
	#AT91C_PIOA_IDR
 (0xFFFFF444)

1654 
	#AT91C_PIOA_ODSR
 (0xFFFFF438)

1655 
	#AT91C_PIOA_PPUSR
 (0xFFFFF468)

1656 
	#AT91C_PIOA_OWSR
 (0xFFFFF4A8)

1657 
	#AT91C_PIOA_BSR
 (0xFFFFF474)

1658 
	#AT91C_PIOA_OWER
 (0xFFFFF4A0)

1659 
	#AT91C_PIOA_IFER
 (0xFFFFF420)

1660 
	#AT91C_PIOA_PDSR
 (0xFFFFF43C)

1661 
	#AT91C_PIOA_PPUER
 (0xFFFFF464)

1662 
	#AT91C_PIOA_OSR
 (0xFFFFF418)

1663 
	#AT91C_PIOA_ASR
 (0xFFFFF470)

1664 
	#AT91C_PIOA_MDDR
 (0xFFFFF454)

1665 
	#AT91C_PIOA_CODR
 (0xFFFFF434)

1666 
	#AT91C_PIOA_MDER
 (0xFFFFF450)

1667 
	#AT91C_PIOA_PDR
 (0xFFFFF404)

1668 
	#AT91C_PIOA_IFSR
 (0xFFFFF428)

1669 
	#AT91C_PIOA_OER
 (0xFFFFF410)

1670 
	#AT91C_PIOA_PSR
 (0xFFFFF408)

1672 
	#AT91C_PIOB_OWDR
 (0xFFFFF6A4)

1673 
	#AT91C_PIOB_MDER
 (0xFFFFF650)

1674 
	#AT91C_PIOB_PPUSR
 (0xFFFFF668)

1675 
	#AT91C_PIOB_IMR
 (0xFFFFF648)

1676 
	#AT91C_PIOB_ASR
 (0xFFFFF670)

1677 
	#AT91C_PIOB_PPUDR
 (0xFFFFF660)

1678 
	#AT91C_PIOB_PSR
 (0xFFFFF608)

1679 
	#AT91C_PIOB_IER
 (0xFFFFF640)

1680 
	#AT91C_PIOB_CODR
 (0xFFFFF634)

1681 
	#AT91C_PIOB_OWER
 (0xFFFFF6A0)

1682 
	#AT91C_PIOB_ABSR
 (0xFFFFF678)

1683 
	#AT91C_PIOB_IFDR
 (0xFFFFF624)

1684 
	#AT91C_PIOB_PDSR
 (0xFFFFF63C)

1685 
	#AT91C_PIOB_IDR
 (0xFFFFF644)

1686 
	#AT91C_PIOB_OWSR
 (0xFFFFF6A8)

1687 
	#AT91C_PIOB_PDR
 (0xFFFFF604)

1688 
	#AT91C_PIOB_ODR
 (0xFFFFF614)

1689 
	#AT91C_PIOB_IFSR
 (0xFFFFF628)

1690 
	#AT91C_PIOB_PPUER
 (0xFFFFF664)

1691 
	#AT91C_PIOB_SODR
 (0xFFFFF630)

1692 
	#AT91C_PIOB_ISR
 (0xFFFFF64C)

1693 
	#AT91C_PIOB_ODSR
 (0xFFFFF638)

1694 
	#AT91C_PIOB_OSR
 (0xFFFFF618)

1695 
	#AT91C_PIOB_MDSR
 (0xFFFFF658)

1696 
	#AT91C_PIOB_IFER
 (0xFFFFF620)

1697 
	#AT91C_PIOB_BSR
 (0xFFFFF674)

1698 
	#AT91C_PIOB_MDDR
 (0xFFFFF654)

1699 
	#AT91C_PIOB_OER
 (0xFFFFF610)

1700 
	#AT91C_PIOB_PER
 (0xFFFFF600)

1702 
	#AT91C_CKGR_MOR
 (0xFFFFFC20)

1703 
	#AT91C_CKGR_PLLR
 (0xFFFFFC2C)

1704 
	#AT91C_CKGR_MCFR
 (0xFFFFFC24)

1706 
	#AT91C_PMC_IDR
 (0xFFFFFC64)

1707 
	#AT91C_PMC_MOR
 (0xFFFFFC20)

1708 
	#AT91C_PMC_PLLR
 (0xFFFFFC2C)

1709 
	#AT91C_PMC_PCER
 (0xFFFFFC10)

1710 
	#AT91C_PMC_PCKR
 (0xFFFFFC40)

1711 
	#AT91C_PMC_MCKR
 (0xFFFFFC30)

1712 
	#AT91C_PMC_SCDR
 (0xFFFFFC04)

1713 
	#AT91C_PMC_PCDR
 (0xFFFFFC14)

1714 
	#AT91C_PMC_SCSR
 (0xFFFFFC08)

1715 
	#AT91C_PMC_PCSR
 (0xFFFFFC18)

1716 
	#AT91C_PMC_MCFR
 (0xFFFFFC24)

1717 
	#AT91C_PMC_SCER
 (0xFFFFFC00)

1718 
	#AT91C_PMC_IMR
 (0xFFFFFC6C)

1719 
	#AT91C_PMC_IER
 (0xFFFFFC60)

1720 
	#AT91C_PMC_SR
 (0xFFFFFC68)

1722 
	#AT91C_RSTC_RCR
 (0xFFFFFD00)

1723 
	#AT91C_RSTC_RMR
 (0xFFFFFD08)

1724 
	#AT91C_RSTC_RSR
 (0xFFFFFD04)

1726 
	#AT91C_RTTC_RTSR
 (0xFFFFFD2C)

1727 
	#AT91C_RTTC_RTMR
 (0xFFFFFD20)

1728 
	#AT91C_RTTC_RTVR
 (0xFFFFFD28)

1729 
	#AT91C_RTTC_RTAR
 (0xFFFFFD24)

1731 
	#AT91C_PITC_PIVR
 (0xFFFFFD38)

1732 
	#AT91C_PITC_PISR
 (0xFFFFFD34)

1733 
	#AT91C_PITC_PIIR
 (0xFFFFFD3C)

1734 
	#AT91C_PITC_PIMR
 (0xFFFFFD30)

1736 
	#AT91C_WDTC_WDCR
 (0xFFFFFD40)

1737 
	#AT91C_WDTC_WDSR
 (0xFFFFFD48)

1738 
	#AT91C_WDTC_WDMR
 (0xFFFFFD44)

1740 
	#AT91C_VREG_MR
 (0xFFFFFD60)

1742 
	#AT91C_MC_ASR
 (0xFFFFFF04)

1743 
	#AT91C_MC_RCR
 (0xFFFFFF00)

1744 
	#AT91C_MC_FCR
 (0xFFFFFF64)

1745 
	#AT91C_MC_AASR
 (0xFFFFFF08)

1746 
	#AT91C_MC_FSR
 (0xFFFFFF68)

1747 
	#AT91C_MC_FMR
 (0xFFFFFF60)

1749 
	#AT91C_SPI1_PTCR
 (0xFFFE4120)

1750 
	#AT91C_SPI1_RPR
 (0xFFFE4100)

1751 
	#AT91C_SPI1_TNCR
 (0xFFFE411C)

1752 
	#AT91C_SPI1_TPR
 (0xFFFE4108)

1753 
	#AT91C_SPI1_TNPR
 (0xFFFE4118)

1754 
	#AT91C_SPI1_TCR
 (0xFFFE410C)

1755 
	#AT91C_SPI1_RCR
 (0xFFFE4104)

1756 
	#AT91C_SPI1_RNPR
 (0xFFFE4110)

1757 
	#AT91C_SPI1_RNCR
 (0xFFFE4114)

1758 
	#AT91C_SPI1_PTSR
 (0xFFFE4124)

1760 
	#AT91C_SPI1_IMR
 (0xFFFE401C)

1761 
	#AT91C_SPI1_IER
 (0xFFFE4014)

1762 
	#AT91C_SPI1_MR
 (0xFFFE4004)

1763 
	#AT91C_SPI1_RDR
 (0xFFFE4008)

1764 
	#AT91C_SPI1_IDR
 (0xFFFE4018)

1765 
	#AT91C_SPI1_SR
 (0xFFFE4010)

1766 
	#AT91C_SPI1_TDR
 (0xFFFE400C)

1767 
	#AT91C_SPI1_CR
 (0xFFFE4000)

1768 
	#AT91C_SPI1_CSR
 (0xFFFE4030)

1770 
	#AT91C_SPI0_PTCR
 (0xFFFE0120)

1771 
	#AT91C_SPI0_TPR
 (0xFFFE0108)

1772 
	#AT91C_SPI0_TCR
 (0xFFFE010C)

1773 
	#AT91C_SPI0_RCR
 (0xFFFE0104)

1774 
	#AT91C_SPI0_PTSR
 (0xFFFE0124)

1775 
	#AT91C_SPI0_RNPR
 (0xFFFE0110)

1776 
	#AT91C_SPI0_RPR
 (0xFFFE0100)

1777 
	#AT91C_SPI0_TNCR
 (0xFFFE011C)

1778 
	#AT91C_SPI0_RNCR
 (0xFFFE0114)

1779 
	#AT91C_SPI0_TNPR
 (0xFFFE0118)

1781 
	#AT91C_SPI0_IER
 (0xFFFE0014)

1782 
	#AT91C_SPI0_SR
 (0xFFFE0010)

1783 
	#AT91C_SPI0_IDR
 (0xFFFE0018)

1784 
	#AT91C_SPI0_CR
 (0xFFFE0000)

1785 
	#AT91C_SPI0_MR
 (0xFFFE0004)

1786 
	#AT91C_SPI0_IMR
 (0xFFFE001C)

1787 
	#AT91C_SPI0_TDR
 (0xFFFE000C)

1788 
	#AT91C_SPI0_RDR
 (0xFFFE0008)

1789 
	#AT91C_SPI0_CSR
 (0xFFFE0030)

1791 
	#AT91C_US1_RNCR
 (0xFFFC4114)

1792 
	#AT91C_US1_PTCR
 (0xFFFC4120)

1793 
	#AT91C_US1_TCR
 (0xFFFC410C)

1794 
	#AT91C_US1_PTSR
 (0xFFFC4124)

1795 
	#AT91C_US1_TNPR
 (0xFFFC4118)

1796 
	#AT91C_US1_RCR
 (0xFFFC4104)

1797 
	#AT91C_US1_RNPR
 (0xFFFC4110)

1798 
	#AT91C_US1_RPR
 (0xFFFC4100)

1799 
	#AT91C_US1_TNCR
 (0xFFFC411C)

1800 
	#AT91C_US1_TPR
 (0xFFFC4108)

1802 
	#AT91C_US1_IF
 (0xFFFC404C)

1803 
	#AT91C_US1_NER
 (0xFFFC4044)

1804 
	#AT91C_US1_RTOR
 (0xFFFC4024)

1805 
	#AT91C_US1_CSR
 (0xFFFC4014)

1806 
	#AT91C_US1_IDR
 (0xFFFC400C)

1807 
	#AT91C_US1_IER
 (0xFFFC4008)

1808 
	#AT91C_US1_THR
 (0xFFFC401C)

1809 
	#AT91C_US1_TTGR
 (0xFFFC4028)

1810 
	#AT91C_US1_RHR
 (0xFFFC4018)

1811 
	#AT91C_US1_BRGR
 (0xFFFC4020)

1812 
	#AT91C_US1_IMR
 (0xFFFC4010)

1813 
	#AT91C_US1_FIDI
 (0xFFFC4040)

1814 
	#AT91C_US1_CR
 (0xFFFC4000)

1815 
	#AT91C_US1_MR
 (0xFFFC4004)

1817 
	#AT91C_US0_TNPR
 (0xFFFC0118)

1818 
	#AT91C_US0_RNPR
 (0xFFFC0110)

1819 
	#AT91C_US0_TCR
 (0xFFFC010C)

1820 
	#AT91C_US0_PTCR
 (0xFFFC0120)

1821 
	#AT91C_US0_PTSR
 (0xFFFC0124)

1822 
	#AT91C_US0_TNCR
 (0xFFFC011C)

1823 
	#AT91C_US0_TPR
 (0xFFFC0108)

1824 
	#AT91C_US0_RCR
 (0xFFFC0104)

1825 
	#AT91C_US0_RPR
 (0xFFFC0100)

1826 
	#AT91C_US0_RNCR
 (0xFFFC0114)

1828 
	#AT91C_US0_BRGR
 (0xFFFC0020)

1829 
	#AT91C_US0_NER
 (0xFFFC0044)

1830 
	#AT91C_US0_CR
 (0xFFFC0000)

1831 
	#AT91C_US0_IMR
 (0xFFFC0010)

1832 
	#AT91C_US0_FIDI
 (0xFFFC0040)

1833 
	#AT91C_US0_TTGR
 (0xFFFC0028)

1834 
	#AT91C_US0_MR
 (0xFFFC0004)

1835 
	#AT91C_US0_RTOR
 (0xFFFC0024)

1836 
	#AT91C_US0_CSR
 (0xFFFC0014)

1837 
	#AT91C_US0_RHR
 (0xFFFC0018)

1838 
	#AT91C_US0_IDR
 (0xFFFC000C)

1839 
	#AT91C_US0_THR
 (0xFFFC001C)

1840 
	#AT91C_US0_IF
 (0xFFFC004C)

1841 
	#AT91C_US0_IER
 (0xFFFC0008)

1843 
	#AT91C_SSC_TNCR
 (0xFFFD411C)

1844 
	#AT91C_SSC_RPR
 (0xFFFD4100)

1845 
	#AT91C_SSC_RNCR
 (0xFFFD4114)

1846 
	#AT91C_SSC_TPR
 (0xFFFD4108)

1847 
	#AT91C_SSC_PTCR
 (0xFFFD4120)

1848 
	#AT91C_SSC_TCR
 (0xFFFD410C)

1849 
	#AT91C_SSC_RCR
 (0xFFFD4104)

1850 
	#AT91C_SSC_RNPR
 (0xFFFD4110)

1851 
	#AT91C_SSC_TNPR
 (0xFFFD4118)

1852 
	#AT91C_SSC_PTSR
 (0xFFFD4124)

1854 
	#AT91C_SSC_RHR
 (0xFFFD4020)

1855 
	#AT91C_SSC_RSHR
 (0xFFFD4030)

1856 
	#AT91C_SSC_TFMR
 (0xFFFD401C)

1857 
	#AT91C_SSC_IDR
 (0xFFFD4048)

1858 
	#AT91C_SSC_THR
 (0xFFFD4024)

1859 
	#AT91C_SSC_RCMR
 (0xFFFD4010)

1860 
	#AT91C_SSC_IER
 (0xFFFD4044)

1861 
	#AT91C_SSC_TSHR
 (0xFFFD4034)

1862 
	#AT91C_SSC_SR
 (0xFFFD4040)

1863 
	#AT91C_SSC_CMR
 (0xFFFD4004)

1864 
	#AT91C_SSC_TCMR
 (0xFFFD4018)

1865 
	#AT91C_SSC_CR
 (0xFFFD4000)

1866 
	#AT91C_SSC_IMR
 (0xFFFD404C)

1867 
	#AT91C_SSC_RFMR
 (0xFFFD4014)

1869 
	#AT91C_TWI_IER
 (0xFFFB8024)

1870 
	#AT91C_TWI_CR
 (0xFFFB8000)

1871 
	#AT91C_TWI_SR
 (0xFFFB8020)

1872 
	#AT91C_TWI_IMR
 (0xFFFB802C)

1873 
	#AT91C_TWI_THR
 (0xFFFB8034)

1874 
	#AT91C_TWI_IDR
 (0xFFFB8028)

1875 
	#AT91C_TWI_IADR
 (0xFFFB800C)

1876 
	#AT91C_TWI_MMR
 (0xFFFB8004)

1877 
	#AT91C_TWI_CWGR
 (0xFFFB8010)

1878 
	#AT91C_TWI_RHR
 (0xFFFB8030)

1880 
	#AT91C_PWMC_CH3_CUPDR
 (0xFFFCC270)

1881 
	#AT91C_PWMC_CH3_Re£rved
 (0xFFFCC274)

1882 
	#AT91C_PWMC_CH3_CPRDR
 (0xFFFCC268)

1883 
	#AT91C_PWMC_CH3_CDTYR
 (0xFFFCC264)

1884 
	#AT91C_PWMC_CH3_CCNTR
 (0xFFFCC26C)

1885 
	#AT91C_PWMC_CH3_CMR
 (0xFFFCC260)

1887 
	#AT91C_PWMC_CH2_Re£rved
 (0xFFFCC254)

1888 
	#AT91C_PWMC_CH2_CMR
 (0xFFFCC240)

1889 
	#AT91C_PWMC_CH2_CCNTR
 (0xFFFCC24C)

1890 
	#AT91C_PWMC_CH2_CPRDR
 (0xFFFCC248)

1891 
	#AT91C_PWMC_CH2_CUPDR
 (0xFFFCC250)

1892 
	#AT91C_PWMC_CH2_CDTYR
 (0xFFFCC244)

1894 
	#AT91C_PWMC_CH1_Re£rved
 (0xFFFCC234)

1895 
	#AT91C_PWMC_CH1_CUPDR
 (0xFFFCC230)

1896 
	#AT91C_PWMC_CH1_CPRDR
 (0xFFFCC228)

1897 
	#AT91C_PWMC_CH1_CCNTR
 (0xFFFCC22C)

1898 
	#AT91C_PWMC_CH1_CDTYR
 (0xFFFCC224)

1899 
	#AT91C_PWMC_CH1_CMR
 (0xFFFCC220)

1901 
	#AT91C_PWMC_CH0_Re£rved
 (0xFFFCC214)

1902 
	#AT91C_PWMC_CH0_CPRDR
 (0xFFFCC208)

1903 
	#AT91C_PWMC_CH0_CDTYR
 (0xFFFCC204)

1904 
	#AT91C_PWMC_CH0_CMR
 (0xFFFCC200)

1905 
	#AT91C_PWMC_CH0_CUPDR
 (0xFFFCC210)

1906 
	#AT91C_PWMC_CH0_CCNTR
 (0xFFFCC20C)

1908 
	#AT91C_PWMC_IDR
 (0xFFFCC014)

1909 
	#AT91C_PWMC_DIS
 (0xFFFCC008)

1910 
	#AT91C_PWMC_IER
 (0xFFFCC010)

1911 
	#AT91C_PWMC_VR
 (0xFFFCC0FC)

1912 
	#AT91C_PWMC_ISR
 (0xFFFCC01C)

1913 
	#AT91C_PWMC_SR
 (0xFFFCC00C)

1914 
	#AT91C_PWMC_IMR
 (0xFFFCC018)

1915 
	#AT91C_PWMC_MR
 (0xFFFCC000)

1916 
	#AT91C_PWMC_ENA
 (0xFFFCC004)

1918 
	#AT91C_UDP_IMR
 (0xFFFB0018)

1919 
	#AT91C_UDP_FADDR
 (0xFFFB0008)

1920 
	#AT91C_UDP_NUM
 (0xFFFB0000)

1921 
	#AT91C_UDP_FDR
 (0xFFFB0050)

1922 
	#AT91C_UDP_ISR
 (0xFFFB001C)

1923 
	#AT91C_UDP_CSR
 (0xFFFB0030)

1924 
	#AT91C_UDP_IDR
 (0xFFFB0014)

1925 
	#AT91C_UDP_ICR
 (0xFFFB0020)

1926 
	#AT91C_UDP_RSTEP
 (0xFFFB0028)

1927 
	#AT91C_UDP_TXVC
 (0xFFFB0074)

1928 
	#AT91C_UDP_GLBSTATE
 (0xFFFB0004)

1929 
	#AT91C_UDP_IER
 (0xFFFB0010)

1931 
	#AT91C_TC0_SR
 (0xFFFA0020)

1932 
	#AT91C_TC0_RC
 (0xFFFA001C)

1933 
	#AT91C_TC0_RB
 (0xFFFA0018)

1934 
	#AT91C_TC0_CCR
 (0xFFFA0000)

1935 
	#AT91C_TC0_CMR
 (0xFFFA0004)

1936 
	#AT91C_TC0_IER
 (0xFFFA0024)

1937 
	#AT91C_TC0_RA
 (0xFFFA0014)

1938 
	#AT91C_TC0_IDR
 (0xFFFA0028)

1939 
	#AT91C_TC0_CV
 (0xFFFA0010)

1940 
	#AT91C_TC0_IMR
 (0xFFFA002C)

1942 
	#AT91C_TC1_RB
 (0xFFFA0058)

1943 
	#AT91C_TC1_CCR
 (0xFFFA0040)

1944 
	#AT91C_TC1_IER
 (0xFFFA0064)

1945 
	#AT91C_TC1_IDR
 (0xFFFA0068)

1946 
	#AT91C_TC1_SR
 (0xFFFA0060)

1947 
	#AT91C_TC1_CMR
 (0xFFFA0044)

1948 
	#AT91C_TC1_RA
 (0xFFFA0054)

1949 
	#AT91C_TC1_RC
 (0xFFFA005C)

1950 
	#AT91C_TC1_IMR
 (0xFFFA006C)

1951 
	#AT91C_TC1_CV
 (0xFFFA0050)

1953 
	#AT91C_TC2_CMR
 (0xFFFA0084)

1954 
	#AT91C_TC2_CCR
 (0xFFFA0080)

1955 
	#AT91C_TC2_CV
 (0xFFFA0090)

1956 
	#AT91C_TC2_RA
 (0xFFFA0094)

1957 
	#AT91C_TC2_RB
 (0xFFFA0098)

1958 
	#AT91C_TC2_IDR
 (0xFFFA00A8)

1959 
	#AT91C_TC2_IMR
 (0xFFFA00AC)

1960 
	#AT91C_TC2_RC
 (0xFFFA009C)

1961 
	#AT91C_TC2_IER
 (0xFFFA00A4)

1962 
	#AT91C_TC2_SR
 (0xFFFA00A0)

1964 
	#AT91C_TCB_BMR
 (0xFFFA00C4)

1965 
	#AT91C_TCB_BCR
 (0xFFFA00C0)

1967 
	#AT91C_CAN_MB0_MDL
 (0xFFFD0214)

1968 
	#AT91C_CAN_MB0_MAM
 (0xFFFD0204)

1969 
	#AT91C_CAN_MB0_MCR
 (0xFFFD021C)

1970 
	#AT91C_CAN_MB0_MID
 (0xFFFD0208)

1971 
	#AT91C_CAN_MB0_MSR
 (0xFFFD0210)

1972 
	#AT91C_CAN_MB0_MFID
 (0xFFFD020C)

1973 
	#AT91C_CAN_MB0_MDH
 (0xFFFD0218)

1974 
	#AT91C_CAN_MB0_MMR
 (0xFFFD0200)

1976 
	#AT91C_CAN_MB1_MDL
 (0xFFFD0234)

1977 
	#AT91C_CAN_MB1_MID
 (0xFFFD0228)

1978 
	#AT91C_CAN_MB1_MMR
 (0xFFFD0220)

1979 
	#AT91C_CAN_MB1_MSR
 (0xFFFD0230)

1980 
	#AT91C_CAN_MB1_MAM
 (0xFFFD0224)

1981 
	#AT91C_CAN_MB1_MDH
 (0xFFFD0238)

1982 
	#AT91C_CAN_MB1_MCR
 (0xFFFD023C)

1983 
	#AT91C_CAN_MB1_MFID
 (0xFFFD022C)

1985 
	#AT91C_CAN_MB2_MCR
 (0xFFFD025C)

1986 
	#AT91C_CAN_MB2_MDH
 (0xFFFD0258)

1987 
	#AT91C_CAN_MB2_MID
 (0xFFFD0248)

1988 
	#AT91C_CAN_MB2_MDL
 (0xFFFD0254)

1989 
	#AT91C_CAN_MB2_MMR
 (0xFFFD0240)

1990 
	#AT91C_CAN_MB2_MAM
 (0xFFFD0244)

1991 
	#AT91C_CAN_MB2_MFID
 (0xFFFD024C)

1992 
	#AT91C_CAN_MB2_MSR
 (0xFFFD0250)

1994 
	#AT91C_CAN_MB3_MFID
 (0xFFFD026C)

1995 
	#AT91C_CAN_MB3_MAM
 (0xFFFD0264)

1996 
	#AT91C_CAN_MB3_MID
 (0xFFFD0268)

1997 
	#AT91C_CAN_MB3_MCR
 (0xFFFD027C)

1998 
	#AT91C_CAN_MB3_MMR
 (0xFFFD0260)

1999 
	#AT91C_CAN_MB3_MSR
 (0xFFFD0270)

2000 
	#AT91C_CAN_MB3_MDL
 (0xFFFD0274)

2001 
	#AT91C_CAN_MB3_MDH
 (0xFFFD0278)

2003 
	#AT91C_CAN_MB4_MID
 (0xFFFD0288)

2004 
	#AT91C_CAN_MB4_MMR
 (0xFFFD0280)

2005 
	#AT91C_CAN_MB4_MDH
 (0xFFFD0298)

2006 
	#AT91C_CAN_MB4_MFID
 (0xFFFD028C)

2007 
	#AT91C_CAN_MB4_MSR
 (0xFFFD0290)

2008 
	#AT91C_CAN_MB4_MCR
 (0xFFFD029C)

2009 
	#AT91C_CAN_MB4_MDL
 (0xFFFD0294)

2010 
	#AT91C_CAN_MB4_MAM
 (0xFFFD0284)

2012 
	#AT91C_CAN_MB5_MSR
 (0xFFFD02B0)

2013 
	#AT91C_CAN_MB5_MCR
 (0xFFFD02BC)

2014 
	#AT91C_CAN_MB5_MFID
 (0xFFFD02AC)

2015 
	#AT91C_CAN_MB5_MDH
 (0xFFFD02B8)

2016 
	#AT91C_CAN_MB5_MID
 (0xFFFD02A8)

2017 
	#AT91C_CAN_MB5_MMR
 (0xFFFD02A0)

2018 
	#AT91C_CAN_MB5_MDL
 (0xFFFD02B4)

2019 
	#AT91C_CAN_MB5_MAM
 (0xFFFD02A4)

2021 
	#AT91C_CAN_MB6_MFID
 (0xFFFD02CC)

2022 
	#AT91C_CAN_MB6_MID
 (0xFFFD02C8)

2023 
	#AT91C_CAN_MB6_MAM
 (0xFFFD02C4)

2024 
	#AT91C_CAN_MB6_MSR
 (0xFFFD02D0)

2025 
	#AT91C_CAN_MB6_MDL
 (0xFFFD02D4)

2026 
	#AT91C_CAN_MB6_MCR
 (0xFFFD02DC)

2027 
	#AT91C_CAN_MB6_MDH
 (0xFFFD02D8)

2028 
	#AT91C_CAN_MB6_MMR
 (0xFFFD02C0)

2030 
	#AT91C_CAN_MB7_MCR
 (0xFFFD02FC)

2031 
	#AT91C_CAN_MB7_MDH
 (0xFFFD02F8)

2032 
	#AT91C_CAN_MB7_MFID
 (0xFFFD02EC)

2033 
	#AT91C_CAN_MB7_MDL
 (0xFFFD02F4)

2034 
	#AT91C_CAN_MB7_MID
 (0xFFFD02E8)

2035 
	#AT91C_CAN_MB7_MMR
 (0xFFFD02E0)

2036 
	#AT91C_CAN_MB7_MAM
 (0xFFFD02E4)

2037 
	#AT91C_CAN_MB7_MSR
 (0xFFFD02F0)

2039 
	#AT91C_CAN_TCR
 (0xFFFD0024)

2040 
	#AT91C_CAN_IMR
 (0xFFFD000C)

2041 
	#AT91C_CAN_IER
 (0xFFFD0004)

2042 
	#AT91C_CAN_ECR
 (0xFFFD0020)

2043 
	#AT91C_CAN_TIMESTP
 (0xFFFD001C)

2044 
	#AT91C_CAN_MR
 (0xFFFD0000)

2045 
	#AT91C_CAN_IDR
 (0xFFFD0008)

2046 
	#AT91C_CAN_ACR
 (0xFFFD0028)

2047 
	#AT91C_CAN_TIM
 (0xFFFD0018)

2048 
	#AT91C_CAN_SR
 (0xFFFD0010)

2049 
	#AT91C_CAN_BR
 (0xFFFD0014)

2050 
	#AT91C_CAN_VR
 (0xFFFD00FC)

2052 
	#AT91C_EMAC_ISR
 (0xFFFDC024)

2053 
	#AT91C_EMAC_SA4H
 (0xFFFDC0B4)

2054 
	#AT91C_EMAC_SA1L
 (0xFFFDC098)

2055 
	#AT91C_EMAC_ELE
 (0xFFFDC078)

2056 
	#AT91C_EMAC_LCOL
 (0xFFFDC05C)

2057 
	#AT91C_EMAC_RLE
 (0xFFFDC088)

2058 
	#AT91C_EMAC_WOL
 (0xFFFDC0C4)

2059 
	#AT91C_EMAC_DTF
 (0xFFFDC058)

2060 
	#AT91C_EMAC_TUND
 (0xFFFDC064)

2061 
	#AT91C_EMAC_NCR
 (0xFFFDC000)

2062 
	#AT91C_EMAC_SA4L
 (0xFFFDC0B0)

2063 
	#AT91C_EMAC_RSR
 (0xFFFDC020)

2064 
	#AT91C_EMAC_SA3L
 (0xFFFDC0A8)

2065 
	#AT91C_EMAC_TSR
 (0xFFFDC014)

2066 
	#AT91C_EMAC_IDR
 (0xFFFDC02C)

2067 
	#AT91C_EMAC_RSE
 (0xFFFDC074)

2068 
	#AT91C_EMAC_ECOL
 (0xFFFDC060)

2069 
	#AT91C_EMAC_TID
 (0xFFFDC0B8)

2070 
	#AT91C_EMAC_HRB
 (0xFFFDC090)

2071 
	#AT91C_EMAC_TBQP
 (0xFFFDC01C)

2072 
	#AT91C_EMAC_USRIO
 (0xFFFDC0C0)

2073 
	#AT91C_EMAC_PTR
 (0xFFFDC038)

2074 
	#AT91C_EMAC_SA2H
 (0xFFFDC0A4)

2075 
	#AT91C_EMAC_ROV
 (0xFFFDC070)

2076 
	#AT91C_EMAC_ALE
 (0xFFFDC054)

2077 
	#AT91C_EMAC_RJA
 (0xFFFDC07C)

2078 
	#AT91C_EMAC_RBQP
 (0xFFFDC018)

2079 
	#AT91C_EMAC_TPF
 (0xFFFDC08C)

2080 
	#AT91C_EMAC_NCFGR
 (0xFFFDC004)

2081 
	#AT91C_EMAC_HRT
 (0xFFFDC094)

2082 
	#AT91C_EMAC_USF
 (0xFFFDC080)

2083 
	#AT91C_EMAC_FCSE
 (0xFFFDC050)

2084 
	#AT91C_EMAC_TPQ
 (0xFFFDC0BC)

2085 
	#AT91C_EMAC_MAN
 (0xFFFDC034)

2086 
	#AT91C_EMAC_FTO
 (0xFFFDC040)

2087 
	#AT91C_EMAC_REV
 (0xFFFDC0FC)

2088 
	#AT91C_EMAC_IMR
 (0xFFFDC030)

2089 
	#AT91C_EMAC_SCF
 (0xFFFDC044)

2090 
	#AT91C_EMAC_PFR
 (0xFFFDC03C)

2091 
	#AT91C_EMAC_MCF
 (0xFFFDC048)

2092 
	#AT91C_EMAC_NSR
 (0xFFFDC008)

2093 
	#AT91C_EMAC_SA2L
 (0xFFFDC0A0)

2094 
	#AT91C_EMAC_FRO
 (0xFFFDC04C)

2095 
	#AT91C_EMAC_IER
 (0xFFFDC028)

2096 
	#AT91C_EMAC_SA1H
 (0xFFFDC09C)

2097 
	#AT91C_EMAC_CSE
 (0xFFFDC068)

2098 
	#AT91C_EMAC_SA3H
 (0xFFFDC0AC)

2099 
	#AT91C_EMAC_RRE
 (0xFFFDC06C)

2100 
	#AT91C_EMAC_STE
 (0xFFFDC084)

2102 
	#AT91C_ADC_PTSR
 (0xFFFD8124)

2103 
	#AT91C_ADC_PTCR
 (0xFFFD8120)

2104 
	#AT91C_ADC_TNPR
 (0xFFFD8118)

2105 
	#AT91C_ADC_TNCR
 (0xFFFD811C)

2106 
	#AT91C_ADC_RNPR
 (0xFFFD8110)

2107 
	#AT91C_ADC_RNCR
 (0xFFFD8114)

2108 
	#AT91C_ADC_RPR
 (0xFFFD8100)

2109 
	#AT91C_ADC_TCR
 (0xFFFD810C)

2110 
	#AT91C_ADC_TPR
 (0xFFFD8108)

2111 
	#AT91C_ADC_RCR
 (0xFFFD8104)

2113 
	#AT91C_ADC_CDR2
 (0xFFFD8038)

2114 
	#AT91C_ADC_CDR3
 (0xFFFD803C)

2115 
	#AT91C_ADC_CDR0
 (0xFFFD8030)

2116 
	#AT91C_ADC_CDR5
 (0xFFFD8044)

2117 
	#AT91C_ADC_CHDR
 (0xFFFD8014)

2118 
	#AT91C_ADC_SR
 (0xFFFD801C)

2119 
	#AT91C_ADC_CDR4
 (0xFFFD8040)

2120 
	#AT91C_ADC_CDR1
 (0xFFFD8034)

2121 
	#AT91C_ADC_LCDR
 (0xFFFD8020)

2122 
	#AT91C_ADC_IDR
 (0xFFFD8028)

2123 
	#AT91C_ADC_CR
 (0xFFFD8000)

2124 
	#AT91C_ADC_CDR7
 (0xFFFD804C)

2125 
	#AT91C_ADC_CDR6
 (0xFFFD8048)

2126 
	#AT91C_ADC_IER
 (0xFFFD8024)

2127 
	#AT91C_ADC_CHER
 (0xFFFD8010)

2128 
	#AT91C_ADC_CHSR
 (0xFFFD8018)

2129 
	#AT91C_ADC_MR
 (0xFFFD8004)

2130 
	#AT91C_ADC_IMR
 (0xFFFD802C)

2132 
	#AT91C_AES_TPR
 (0xFFFA4108)

2133 
	#AT91C_AES_PTCR
 (0xFFFA4120)

2134 
	#AT91C_AES_RNPR
 (0xFFFA4110)

2135 
	#AT91C_AES_TNCR
 (0xFFFA411C)

2136 
	#AT91C_AES_TCR
 (0xFFFA410C)

2137 
	#AT91C_AES_RCR
 (0xFFFA4104)

2138 
	#AT91C_AES_RNCR
 (0xFFFA4114)

2139 
	#AT91C_AES_TNPR
 (0xFFFA4118)

2140 
	#AT91C_AES_RPR
 (0xFFFA4100)

2141 
	#AT91C_AES_PTSR
 (0xFFFA4124)

2143 
	#AT91C_AES_IVxR
 (0xFFFA4060)

2144 
	#AT91C_AES_MR
 (0xFFFA4004)

2145 
	#AT91C_AES_VR
 (0xFFFA40FC)

2146 
	#AT91C_AES_ODATAxR
 (0xFFFA4050)

2147 
	#AT91C_AES_IDATAxR
 (0xFFFA4040)

2148 
	#AT91C_AES_CR
 (0xFFFA4000)

2149 
	#AT91C_AES_IDR
 (0xFFFA4014)

2150 
	#AT91C_AES_IMR
 (0xFFFA4018)

2151 
	#AT91C_AES_IER
 (0xFFFA4010)

2152 
	#AT91C_AES_KEYWxR
 (0xFFFA4020)

2153 
	#AT91C_AES_ISR
 (0xFFFA401C)

2155 
	#AT91C_TDES_RNCR
 (0xFFFA8114)

2156 
	#AT91C_TDES_TCR
 (0xFFFA810C)

2157 
	#AT91C_TDES_RCR
 (0xFFFA8104)

2158 
	#AT91C_TDES_TNPR
 (0xFFFA8118)

2159 
	#AT91C_TDES_RNPR
 (0xFFFA8110)

2160 
	#AT91C_TDES_RPR
 (0xFFFA8100)

2161 
	#AT91C_TDES_TNCR
 (0xFFFA811C)

2162 
	#AT91C_TDES_TPR
 (0xFFFA8108)

2163 
	#AT91C_TDES_PTSR
 (0xFFFA8124)

2164 
	#AT91C_TDES_PTCR
 (0xFFFA8120)

2166 
	#AT91C_TDES_KEY2WxR
 (0xFFFA8028)

2167 
	#AT91C_TDES_KEY3WxR
 (0xFFFA8030)

2168 
	#AT91C_TDES_IDR
 (0xFFFA8014)

2169 
	#AT91C_TDES_VR
 (0xFFFA80FC)

2170 
	#AT91C_TDES_IVxR
 (0xFFFA8060)

2171 
	#AT91C_TDES_ODATAxR
 (0xFFFA8050)

2172 
	#AT91C_TDES_IMR
 (0xFFFA8018)

2173 
	#AT91C_TDES_MR
 (0xFFFA8004)

2174 
	#AT91C_TDES_CR
 (0xFFFA8000)

2175 
	#AT91C_TDES_IER
 (0xFFFA8010)

2176 
	#AT91C_TDES_ISR
 (0xFFFA801C)

2177 
	#AT91C_TDES_IDATAxR
 (0xFFFA8040)

2178 
	#AT91C_TDES_KEY1WxR
 (0xFFFA8020)

2179 

	)

2183 
	#AT91C_PIO_PA0
 (1 << 0)

2184 
	#AT91C_PA0_RXD0
 (
AT91C_PIO_PA0
)

2185 
	#AT91C_PIO_PA1
 (1 << 1)

2186 
	#AT91C_PA1_TXD0
 (
AT91C_PIO_PA1
)

2187 
	#AT91C_PIO_PA10
 (1 << 10)

2188 
	#AT91C_PA10_TWD
 (
AT91C_PIO_PA10
)

2189 
	#AT91C_PIO_PA11
 (1 << 11)

2190 
	#AT91C_PA11_TWCK
 (
AT91C_PIO_PA11
)

2191 
	#AT91C_PIO_PA12
 (1 << 12)

2192 
	#AT91C_PA12_NPCS00
 (
AT91C_PIO_PA12
)

2193 
	#AT91C_PIO_PA13
 (1 << 13)

2194 
	#AT91C_PA13_NPCS01
 (
AT91C_PIO_PA13
)

2195 
	#AT91C_PA13_PCK1
 (
AT91C_PIO_PA13
)

2196 
	#AT91C_PIO_PA14
 (1 << 14)

2197 
	#AT91C_PA14_NPCS02
 (
AT91C_PIO_PA14
)

2198 
	#AT91C_PA14_IRQ1
 (
AT91C_PIO_PA14
)

2199 
	#AT91C_PIO_PA15
 (1 << 15)

2200 
	#AT91C_PA15_NPCS03
 (
AT91C_PIO_PA15
)

2201 
	#AT91C_PA15_TCLK2
 (
AT91C_PIO_PA15
)

2202 
	#AT91C_PIO_PA16
 (1 << 16)

2203 
	#AT91C_PA16_MISO0
 (
AT91C_PIO_PA16
)

2204 
	#AT91C_PIO_PA17
 (1 << 17)

2205 
	#AT91C_PA17_MOSI0
 (
AT91C_PIO_PA17
)

2206 
	#AT91C_PIO_PA18
 (1 << 18)

2207 
	#AT91C_PA18_SPCK0
 (
AT91C_PIO_PA18
)

2208 
	#AT91C_PIO_PA19
 (1 << 19)

2209 
	#AT91C_PA19_CANRX
 (
AT91C_PIO_PA19
)

2210 
	#AT91C_PIO_PA2
 (1 << 2)

2211 
	#AT91C_PA2_SCK0
 (
AT91C_PIO_PA2
)

2212 
	#AT91C_PA2_NPCS11
 (
AT91C_PIO_PA2
)

2213 
	#AT91C_PIO_PA20
 (1 << 20)

2214 
	#AT91C_PA20_CANTX
 (
AT91C_PIO_PA20
)

2215 
	#AT91C_PIO_PA21
 (1 << 21)

2216 
	#AT91C_PA21_TF
 (
AT91C_PIO_PA21
)

2217 
	#AT91C_PA21_NPCS10
 (
AT91C_PIO_PA21
)

2218 
	#AT91C_PIO_PA22
 (1 << 22)

2219 
	#AT91C_PA22_TK
 (
AT91C_PIO_PA22
)

2220 
	#AT91C_PA22_SPCK1
 (
AT91C_PIO_PA22
)

2221 
	#AT91C_PIO_PA23
 (1 << 23)

2222 
	#AT91C_PA23_TD
 (
AT91C_PIO_PA23
)

2223 
	#AT91C_PA23_MOSI1
 (
AT91C_PIO_PA23
)

2224 
	#AT91C_PIO_PA24
 (1 << 24)

2225 
	#AT91C_PA24_RD
 (
AT91C_PIO_PA24
)

2226 
	#AT91C_PA24_MISO1
 (
AT91C_PIO_PA24
)

2227 
	#AT91C_PIO_PA25
 (1 << 25)

2228 
	#AT91C_PA25_RK
 (
AT91C_PIO_PA25
)

2229 
	#AT91C_PA25_NPCS11
 (
AT91C_PIO_PA25
)

2230 
	#AT91C_PIO_PA26
 (1 << 26)

2231 
	#AT91C_PA26_RF
 (
AT91C_PIO_PA26
)

2232 
	#AT91C_PA26_NPCS12
 (
AT91C_PIO_PA26
)

2233 
	#AT91C_PIO_PA27
 (1 << 27)

2234 
	#AT91C_PA27_DRXD
 (
AT91C_PIO_PA27
)

2235 
	#AT91C_PA27_PCK3
 (
AT91C_PIO_PA27
)

2236 
	#AT91C_PIO_PA28
 (1 << 28)

2237 
	#AT91C_PA28_DTXD
 (
AT91C_PIO_PA28
)

2238 
	#AT91C_PIO_PA29
 (1 << 29)

2239 
	#AT91C_PA29_FIQ
 (
AT91C_PIO_PA29
)

2240 
	#AT91C_PA29_NPCS13
 (
AT91C_PIO_PA29
)

2241 
	#AT91C_PIO_PA3
 (1 << 3)

2242 
	#AT91C_PA3_RTS0
 (
AT91C_PIO_PA3
)

2243 
	#AT91C_PA3_NPCS12
 (
AT91C_PIO_PA3
)

2244 
	#AT91C_PIO_PA30
 (1 << 30)

2245 
	#AT91C_PA30_IRQ0
 (
AT91C_PIO_PA30
)

2246 
	#AT91C_PA30_PCK2
 (
AT91C_PIO_PA30
)

2247 
	#AT91C_PIO_PA4
 (1 << 4)

2248 
	#AT91C_PA4_CTS0
 (
AT91C_PIO_PA4
)

2249 
	#AT91C_PA4_NPCS13
 (
AT91C_PIO_PA4
)

2250 
	#AT91C_PIO_PA5
 (1 << 5)

2251 
	#AT91C_PA5_RXD1
 (
AT91C_PIO_PA5
)

2252 
	#AT91C_PIO_PA6
 (1 << 6)

2253 
	#AT91C_PA6_TXD1
 (
AT91C_PIO_PA6
)

2254 
	#AT91C_PIO_PA7
 (1 << 7)

2255 
	#AT91C_PA7_SCK1
 (
AT91C_PIO_PA7
)

2256 
	#AT91C_PA7_NPCS01
 (
AT91C_PIO_PA7
)

2257 
	#AT91C_PIO_PA8
 (1 << 8)

2258 
	#AT91C_PA8_RTS1
 (
AT91C_PIO_PA8
)

2259 
	#AT91C_PA8_NPCS02
 (
AT91C_PIO_PA8
)

2260 
	#AT91C_PIO_PA9
 (1 << 9)

2261 
	#AT91C_PA9_CTS1
 (
AT91C_PIO_PA9
)

2262 
	#AT91C_PA9_NPCS03
 (
AT91C_PIO_PA9
)

2263 
	#AT91C_PIO_PB0
 (1 << 0)

2264 
	#AT91C_PB0_ETXCK_EREFCK
 (
AT91C_PIO_PB0
)

2265 
	#AT91C_PB0_PCK0
 (
AT91C_PIO_PB0
)

2266 
	#AT91C_PIO_PB1
 (1 << 1)

2267 
	#AT91C_PB1_ETXEN
 (
AT91C_PIO_PB1
)

2268 
	#AT91C_PIO_PB10
 (1 << 10)

2269 
	#AT91C_PB10_ETX2
 (
AT91C_PIO_PB10
)

2270 
	#AT91C_PB10_NPCS11
 (
AT91C_PIO_PB10
)

2271 
	#AT91C_PIO_PB11
 (1 << 11)

2272 
	#AT91C_PB11_ETX3
 (
AT91C_PIO_PB11
)

2273 
	#AT91C_PB11_NPCS12
 (
AT91C_PIO_PB11
)

2274 
	#AT91C_PIO_PB12
 (1 << 12)

2275 
	#AT91C_PB12_ETXER
 (
AT91C_PIO_PB12
)

2276 
	#AT91C_PB12_TCLK0
 (
AT91C_PIO_PB12
)

2277 
	#AT91C_PIO_PB13
 (1 << 13)

2278 
	#AT91C_PB13_ERX2
 (
AT91C_PIO_PB13
)

2279 
	#AT91C_PB13_NPCS01
 (
AT91C_PIO_PB13
)

2280 
	#AT91C_PIO_PB14
 (1 << 14)

2281 
	#AT91C_PB14_ERX3
 (
AT91C_PIO_PB14
)

2282 
	#AT91C_PB14_NPCS02
 (
AT91C_PIO_PB14
)

2283 
	#AT91C_PIO_PB15
 (1 << 15)

2284 
	#AT91C_PB15_ERXDV
 (
AT91C_PIO_PB15
)

2285 
	#AT91C_PIO_PB16
 (1 << 16)

2286 
	#AT91C_PB16_ECOL
 (
AT91C_PIO_PB16
)

2287 
	#AT91C_PB16_NPCS13
 (
AT91C_PIO_PB16
)

2288 
	#AT91C_PIO_PB17
 (1 << 17)

2289 
	#AT91C_PB17_ERXCK
 (
AT91C_PIO_PB17
)

2290 
	#AT91C_PB17_NPCS03
 (
AT91C_PIO_PB17
)

2291 
	#AT91C_PIO_PB18
 (1 << 18)

2292 
	#AT91C_PB18_EF100
 (
AT91C_PIO_PB18
)

2293 
	#AT91C_PB18_ADTRG
 (
AT91C_PIO_PB18
)

2294 
	#AT91C_PIO_PB19
 (1 << 19)

2295 
	#AT91C_PB19_PWM0
 (
AT91C_PIO_PB19
)

2296 
	#AT91C_PB19_TCLK1
 (
AT91C_PIO_PB19
)

2297 
	#AT91C_PIO_PB2
 (1 << 2)

2298 
	#AT91C_PB2_ETX0
 (
AT91C_PIO_PB2
)

2299 
	#AT91C_PIO_PB20
 (1 << 20)

2300 
	#AT91C_PB20_PWM1
 (
AT91C_PIO_PB20
)

2301 
	#AT91C_PB20_PCK0
 (
AT91C_PIO_PB20
)

2302 
	#AT91C_PIO_PB21
 (1 << 21)

2303 
	#AT91C_PB21_PWM2
 (
AT91C_PIO_PB21
)

2304 
	#AT91C_PB21_PCK1
 (
AT91C_PIO_PB21
)

2305 
	#AT91C_PIO_PB22
 (1 << 22)

2306 
	#AT91C_PB22_PWM3
 (
AT91C_PIO_PB22
)

2307 
	#AT91C_PB22_PCK2
 (
AT91C_PIO_PB22
)

2308 
	#AT91C_PIO_PB23
 (1 << 23)

2309 
	#AT91C_PB23_TIOA0
 (
AT91C_PIO_PB23
)

2310 
	#AT91C_PB23_DCD1
 (
AT91C_PIO_PB23
)

2311 
	#AT91C_PIO_PB24
 (1 << 24)

2312 
	#AT91C_PB24_TIOB0
 (
AT91C_PIO_PB24
)

2313 
	#AT91C_PB24_DSR1
 (
AT91C_PIO_PB24
)

2314 
	#AT91C_PIO_PB25
 (1 << 25)

2315 
	#AT91C_PB25_TIOA1
 (
AT91C_PIO_PB25
)

2316 
	#AT91C_PB25_DTR1
 (
AT91C_PIO_PB25
)

2317 
	#AT91C_PIO_PB26
 (1 << 26)

2318 
	#AT91C_PB26_TIOB1
 (
AT91C_PIO_PB26
)

2319 
	#AT91C_PB26_RI1
 (
AT91C_PIO_PB26
)

2320 
	#AT91C_PIO_PB27
 (1 << 27)

2321 
	#AT91C_PB27_TIOA2
 (
AT91C_PIO_PB27
)

2322 
	#AT91C_PB27_PWM0
 (
AT91C_PIO_PB27
)

2323 
	#AT91C_PIO_PB28
 (1 << 28)

2324 
	#AT91C_PB28_TIOB2
 (
AT91C_PIO_PB28
)

2325 
	#AT91C_PB28_PWM1
 (
AT91C_PIO_PB28
)

2326 
	#AT91C_PIO_PB29
 (1 << 29)

2327 
	#AT91C_PB29_PCK1
 (
AT91C_PIO_PB29
)

2328 
	#AT91C_PB29_PWM2
 (
AT91C_PIO_PB29
)

2329 
	#AT91C_PIO_PB3
 (1 << 3)

2330 
	#AT91C_PB3_ETX1
 (
AT91C_PIO_PB3
)

2331 
	#AT91C_PIO_PB30
 (1 << 30)

2332 
	#AT91C_PB30_PCK2
 (
AT91C_PIO_PB30
)

2333 
	#AT91C_PB30_PWM3
 (
AT91C_PIO_PB30
)

2334 
	#AT91C_PIO_PB4
 (1 << 4)

2335 
	#AT91C_PB4_ECRS_ECRSDV
 (
AT91C_PIO_PB4
)

2336 
	#AT91C_PIO_PB5
 (1 << 5)

2337 
	#AT91C_PB5_ERX0
 (
AT91C_PIO_PB5
)

2338 
	#AT91C_PIO_PB6
 (1 << 6)

2339 
	#AT91C_PB6_ERX1
 (
AT91C_PIO_PB6
)

2340 
	#AT91C_PIO_PB7
 (1 << 7)

2341 
	#AT91C_PB7_ERXER
 (
AT91C_PIO_PB7
)

2342 
	#AT91C_PIO_PB8
 (1 << 8)

2343 
	#AT91C_PB8_EMDC
 (
AT91C_PIO_PB8
)

2344 
	#AT91C_PIO_PB9
 (1 << 9)

2345 
	#AT91C_PB9_EMDIO
 (
AT91C_PIO_PB9
)

2346 

	)

2350 
	#AT91C_ID_FIQ
 ( 0)

2351 
	#AT91C_ID_SYS
 ( 1)

2352 
	#AT91C_ID_PIOA
 ( 2)

2353 
	#AT91C_ID_PIOB
 ( 3)

2354 
	#AT91C_ID_SPI0
 ( 4)

2355 
	#AT91C_ID_SPI1
 ( 5)

2356 
	#AT91C_ID_US0
 ( 6)

2357 
	#AT91C_ID_US1
 ( 7)

2358 
	#AT91C_ID_SSC
 ( 8)

2359 
	#AT91C_ID_TWI
 ( 9)

2360 
	#AT91C_ID_PWMC
 (10)

2361 
	#AT91C_ID_UDP
 (11)

2362 
	#AT91C_ID_TC0
 (12)

2363 
	#AT91C_ID_TC1
 (13)

2364 
	#AT91C_ID_TC2
 (14)

2365 
	#AT91C_ID_CAN
 (15)

2366 
	#AT91C_ID_EMAC
 (16)

2367 
	#AT91C_ID_ADC
 (17)

2368 
	#AT91C_ID_AES
 (18)

2369 
	#AT91C_ID_TDES
 (19)

2370 
	#AT91C_ID_20_Re£rved
 (20)

2371 
	#AT91C_ID_21_Re£rved
 (21)

2372 
	#AT91C_ID_22_Re£rved
 (22)

2373 
	#AT91C_ID_23_Re£rved
 (23)

2374 
	#AT91C_ID_24_Re£rved
 (24)

2375 
	#AT91C_ID_25_Re£rved
 (25)

2376 
	#AT91C_ID_26_Re£rved
 (26)

2377 
	#AT91C_ID_27_Re£rved
 (27)

2378 
	#AT91C_ID_28_Re£rved
 (28)

2379 
	#AT91C_ID_29_Re£rved
 (29)

2380 
	#AT91C_ID_IRQ0
 (30)

2381 
	#AT91C_ID_IRQ1
 (31)

2382 

	)

2386 
	#AT91C_BASE_SYS
 (0xFFFFF000)

2387 
	#AT91C_BASE_AIC
 (0xFFFFF000)

2388 
	#AT91C_BASE_PDC_DBGU
 (0xFFFFF300)

2389 
	#AT91C_BASE_DBGU
 (0xFFFFF200)

2390 
	#AT91C_BASE_PIOA
 (0xFFFFF400)

2391 
	#AT91C_BASE_PIOB
 (0xFFFFF600)

2392 
	#AT91C_BASE_CKGR
 (0xFFFFFC20)

2393 
	#AT91C_BASE_PMC
 (0xFFFFFC00)

2394 
	#AT91C_BASE_RSTC
 (0xFFFFFD00)

2395 
	#AT91C_BASE_RTTC
 (0xFFFFFD20)

2396 
	#AT91C_BASE_PITC
 (0xFFFFFD30)

2397 
	#AT91C_BASE_WDTC
 (0xFFFFFD40)

2398 
	#AT91C_BASE_VREG
 (0xFFFFFD60)

2399 
	#AT91C_BASE_MC
 (0xFFFFFF00)

2400 
	#AT91C_BASE_PDC_SPI1
 (0xFFFE4100)

2401 
	#AT91C_BASE_SPI1
 (0xFFFE4000)

2402 
	#AT91C_BASE_PDC_SPI0
 (0xFFFE0100)

2403 
	#AT91C_BASE_SPI0
 (0xFFFE0000)

2404 
	#AT91C_BASE_PDC_US1
 (0xFFFC4100)

2405 
	#AT91C_BASE_US1
 (0xFFFC4000)

2406 
	#AT91C_BASE_PDC_US0
 (0xFFFC0100)

2407 
	#AT91C_BASE_US0
 (0xFFFC0000)

2408 
	#AT91C_BASE_PDC_SSC
 (0xFFFD4100)

2409 
	#AT91C_BASE_SSC
 (0xFFFD4000)

2410 
	#AT91C_BASE_TWI
 (0xFFFB8000)

2411 
	#AT91C_BASE_PWMC_CH3
 (0xFFFCC260)

2412 
	#AT91C_BASE_PWMC_CH2
 (0xFFFCC240)

2413 
	#AT91C_BASE_PWMC_CH1
 (0xFFFCC220)

2414 
	#AT91C_BASE_PWMC_CH0
 (0xFFFCC200)

2415 
	#AT91C_BASE_PWMC
 (0xFFFCC000)

2416 
	#AT91C_BASE_UDP
 (0xFFFB0000)

2417 
	#AT91C_BASE_TC0
 (0xFFFA0000)

2418 
	#AT91C_BASE_TC1
 (0xFFFA0040)

2419 
	#AT91C_BASE_TC2
 (0xFFFA0080)

2420 
	#AT91C_BASE_TCB
 (0xFFFA0000)

2421 
	#AT91C_BASE_CAN_MB0
 (0xFFFD0200)

2422 
	#AT91C_BASE_CAN_MB1
 (0xFFFD0220)

2423 
	#AT91C_BASE_CAN_MB2
 (0xFFFD0240)

2424 
	#AT91C_BASE_CAN_MB3
 (0xFFFD0260)

2425 
	#AT91C_BASE_CAN_MB4
 (0xFFFD0280)

2426 
	#AT91C_BASE_CAN_MB5
 (0xFFFD02A0)

2427 
	#AT91C_BASE_CAN_MB6
 (0xFFFD02C0)

2428 
	#AT91C_BASE_CAN_MB7
 (0xFFFD02E0)

2429 
	#AT91C_BASE_CAN
 (0xFFFD0000)

2430 
	#AT91C_BASE_EMAC
 (0xFFFDC000)

2431 
	#AT91C_BASE_PDC_ADC
 (0xFFFD8100)

2432 
	#AT91C_BASE_ADC
 (0xFFFD8000)

2433 
	#AT91C_BASE_PDC_AES
 (0xFFFA4100)

2434 
	#AT91C_BASE_AES
 (0xFFFA4000)

2435 
	#AT91C_BASE_PDC_TDES
 (0xFFFA8100)

2436 
	#AT91C_BASE_TDES
 (0xFFFA8000)

2437 

	)

2441 
	#AT91C_ISRAM
 (0x00200000)

2442 
	#AT91C_ISRAM_SIZE
 (0x00010000)

2443 
	#AT91C_IFLASH
 (0x00100000)

2444 
	#AT91C_IFLASH_SIZE
 (0x00040000)

2445 

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/ISR_Support.h

53 
EXTERN
 
pxCuºítTCB


54 
EXTERN
 
	gulCrôiˇlNe°ög


57 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


60 
p‹tSAVE_CONTEXT
 
	gMACRO


62 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

63 
STMDB
 
	gSP
!, {
	gR0
}

65 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

66 
STMDB
 
	gSP
, {SP}^

67 
NOP


68 
SUB
 
	gSP
, SP, #4

69 
LDMIA
 
	gSP
!, {
	gR0
}

71 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

72 
STMDB
 
	gR0
!, {
	gLR
}

74 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

75 
MOV
 
	gLR
, 
	gR0


77 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

78 
LDMIA
 
	gSP
!, {
	gR0
}

80 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

81 
STMDB
 
	gLR
, {
	gR0
-LR}^

82 
NOP


83 
SUB
 
	gLR
, LR, #60

85 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

86 
MRS
 
	gR0
, 
SPSR


87 
STMDB
 
	gLR
!, {
	gR0
}

89 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


90 
LDR
 
R0
, [R0]

91 
STMDB
 
	gLR
!, {
	gR0
}

93 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

94 
LDR
 
	gR1
, =
pxCuºítTCB


95 
LDR
 
R0
, [
R1
]

96 
STR
 
	gLR
, [
R0
]

98 
ENDM


101 
p‹tRESTORE_CONTEXT
 
	gMACRO


103 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

104 
LDR
 
	gR1
, =
pxCuºítTCB


105 
LDR
 
R0
, [
R1
]

106 
LDR
 
	gLR
, [
R0
]

108 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

109 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

110 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


111 
LDMFD
 
LR
!, {
	gR1
}

112 
STR
 
	gR1
, [
R0
]

114 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

115 
LDMFD
 
	gLR
!, {
	gR0
}

116 
MSR
 
	gSPSR_cxsf
, 
	gR0


118 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

119 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

120 
	gNOP


122 ; 
Re°‹e
 
the
  
	gaddªss
.

123 
LDR
 
	gLR
, [
LR
, #+60]

125 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


126 ; 
c‹ª˘
 
	gaddªss
.

127 
SUBS
 
	gPC
, 
	gLR
, #4

129 
	gENDM


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/lib_AT91SAM7S64.h

30 #i‚de‡
lib_AT91SAM7S64_H


31 
	#lib_AT91SAM7S64_H


	)

37 
	#AT91C_MC_CORRECT_KEY
 (() 0x5A << 24)

38 

	)

43 
__ölöe
 
	$AT91F_MC_Rem≠
 ()

45 
AT91PS_MC
 
pMC
 = (AT91PS_MCË
AT91C_BASE_MC
;

47 
pMC
->
MC_RCR
 = 
AT91C_MC_RCB
;

48 
	}
}

54 
__ölöe
 
	$AT91F_MC_EFC_CfgModeReg
 (

55 
AT91PS_MC
 
pMC
,

56 
mode
)

59 
pMC
->
MC_FMR
 = 
mode
;

60 
	}
}

66 
__ölöe
 
	$AT91F_MC_EFC_GëModeReg
(

67 
AT91PS_MC
 
pMC
)

69  
pMC
->
MC_FMR
;

70 
	}
}

76 
__ölöe
 
	$AT91F_MC_EFC_CompuãFMCN
(

77 
ma°î_˛ock
)

79  (
ma°î_˛ock
/1000000 +2);

80 
	}
}

86 
__ölöe
 
	$AT91F_MC_EFC_Pîf‹mCmd
 (

87 
AT91PS_MC
 
pMC
,

88 
å™s„r_cmd
)

90 
pMC
->
MC_FCR
 = 
å™s„r_cmd
;

91 
	}
}

97 
__ölöe
 
	$AT91F_MC_EFC_GëSètus
(

98 
AT91PS_MC
 
pMC
)

100  
pMC
->
MC_FSR
;

101 
	}
}

107 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Masked
(

108 
AT91PS_MC
 
pMC
,

109 
Êag
)

111  (
	`AT91F_MC_EFC_GëModeReg
(
pMC
Ë& 
Êag
);

112 
	}
}

118 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Së
(

119 
AT91PS_MC
 
pMC
,

120 
Êag
)

122  (
	`AT91F_MC_EFC_GëSètus
(
pMC
Ë& 
Êag
);

123 
	}
}

132 
__ölöe
 
	$AT91F_PDC_SëNextRx
 (

133 
AT91PS_PDC
 
pPDC
,

134 *
addªss
,

135 
byãs
)

137 
pPDC
->
PDC_RNPR
 = (Ë
addªss
;

138 
pPDC
->
PDC_RNCR
 = 
byãs
;

139 
	}
}

145 
__ölöe
 
	$AT91F_PDC_SëNextTx
 (

146 
AT91PS_PDC
 
pPDC
,

147 *
addªss
,

148 
byãs
)

150 
pPDC
->
PDC_TNPR
 = (Ë
addªss
;

151 
pPDC
->
PDC_TNCR
 = 
byãs
;

152 
	}
}

158 
__ölöe
 
	$AT91F_PDC_SëRx
 (

159 
AT91PS_PDC
 
pPDC
,

160 *
addªss
,

161 
byãs
)

163 
pPDC
->
PDC_RPR
 = (Ë
addªss
;

164 
pPDC
->
PDC_RCR
 = 
byãs
;

165 
	}
}

171 
__ölöe
 
	$AT91F_PDC_SëTx
 (

172 
AT91PS_PDC
 
pPDC
,

173 *
addªss
,

174 
byãs
)

176 
pPDC
->
PDC_TPR
 = (Ë
addªss
;

177 
pPDC
->
PDC_TCR
 = 
byãs
;

178 
	}
}

184 
__ölöe
 
	$AT91F_PDC_E«bÀTx
 (

185 
AT91PS_PDC
 
pPDC
 )

187 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTEN
;

188 
	}
}

194 
__ölöe
 
	$AT91F_PDC_E«bÀRx
 (

195 
AT91PS_PDC
 
pPDC
 )

197 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTEN
;

198 
	}
}

204 
__ölöe
 
	$AT91F_PDC_DißbÀTx
 (

205 
AT91PS_PDC
 
pPDC
 )

207 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTDIS
;

208 
	}
}

214 
__ölöe
 
	$AT91F_PDC_DißbÀRx
 (

215 
AT91PS_PDC
 
pPDC
 )

217 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTDIS
;

218 
	}
}

224 
__ölöe
 
	$AT91F_PDC_IsTxEm±y
 (

225 
AT91PS_PDC
 
pPDC
 )

227  !(
pPDC
->
PDC_TCR
);

228 
	}
}

234 
__ölöe
 
	$AT91F_PDC_IsNextTxEm±y
 (

235 
AT91PS_PDC
 
pPDC
 )

237  !(
pPDC
->
PDC_TNCR
);

238 
	}
}

244 
__ölöe
 
	$AT91F_PDC_IsRxEm±y
 (

245 
AT91PS_PDC
 
pPDC
 )

247  !(
pPDC
->
PDC_RCR
);

248 
	}
}

254 
__ölöe
 
	$AT91F_PDC_IsNextRxEm±y
 (

255 
AT91PS_PDC
 
pPDC
 )

257  !(
pPDC
->
PDC_RNCR
);

258 
	}
}

264 
__ölöe
 
	$AT91F_PDC_O≥n
 (

265 
AT91PS_PDC
 
pPDC
)

268 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

269 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

272 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

273 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

274 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

275 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

278 
	`AT91F_PDC_E«bÀRx
(
pPDC
);

279 
	`AT91F_PDC_E«bÀTx
(
pPDC
);

280 
	}
}

286 
__ölöe
 
	$AT91F_PDC_Clo£
 (

287 
AT91PS_PDC
 
pPDC
)

290 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

291 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

294 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

295 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

296 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

297 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

299 
	}
}

305 
__ölöe
 
	$AT91F_PDC_SídFøme
(

306 
AT91PS_PDC
 
pPDC
,

307 *
pBuf„r
,

308 
szBuf„r
,

309 *
pNextBuf„r
,

310 
szNextBuf„r
 )

312 i‡(
	`AT91F_PDC_IsTxEm±y
(
pPDC
)) {

314 
	`AT91F_PDC_SëTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

315 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

318 i‡(
	`AT91F_PDC_IsNextTxEm±y
(
pPDC
)) {

320 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

327 
	}
}

333 
__ölöe
 
	$AT91F_PDC_Re˚iveFøme
 (

334 
AT91PS_PDC
 
pPDC
,

335 *
pBuf„r
,

336 
szBuf„r
,

337 *
pNextBuf„r
,

338 
szNextBuf„r
 )

340 i‡(
	`AT91F_PDC_IsRxEm±y
(
pPDC
)) {

342 
	`AT91F_PDC_SëRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

343 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

346 i‡(
	`AT91F_PDC_IsNextRxEm±y
(
pPDC
)) {

348 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

355 
	}
}

363 
__ölöe
 
	$AT91F_DBGU_I¡îru±E«bÀ
(

364 
AT91PS_DBGU
 
pDbgu
,

365 
Êag
)

367 
pDbgu
->
DBGU_IER
 = 
Êag
;

368 
	}
}

374 
__ölöe
 
	$AT91F_DBGU_I¡îru±DißbÀ
(

375 
AT91PS_DBGU
 
pDbgu
,

376 
Êag
)

378 
pDbgu
->
DBGU_IDR
 = 
Êag
;

379 
	}
}

385 
__ölöe
 
	$AT91F_DBGU_GëI¡îru±MaskSètus
(

386 
AT91PS_DBGU
 
pDbgu
)

388  
pDbgu
->
DBGU_IMR
;

389 
	}
}

395 
__ölöe
 
	$AT91F_DBGU_IsI¡îru±Masked
(

396 
AT91PS_DBGU
 
pDbgu
,

397 
Êag
)

399  (
	`AT91F_DBGU_GëI¡îru±MaskSètus
(
pDbgu
Ë& 
Êag
);

400 
	}
}

410 
	#AT91C_I2S_ASY_MASTER_TX_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)( +\

411 
AT91C_SSC_CKS_DIV
 +\

412 
AT91C_SSC_CKO_CONTINOUS
 +\

413 
AT91C_SSC_CKG_NONE
 +\

414 
AT91C_SSC_START_FALL_RF
 +\

415 
AT91C_SSC_STTOUT
 +\

416 ((1<<16Ë& 
AT91C_SSC_STTDLY
) +\

417 ((((
nb_bô_by_¶Ÿ
*
nb_¶Ÿ_by_‰ame
)/2)-1Ë<<24))

	)

423 
	#AT91C_I2S_ASY_TX_FRAME_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)( +\

424 (
nb_bô_by_¶Ÿ
-1) +\

425 
AT91C_SSC_MSBF
 +\

426 (((
nb_¶Ÿ_by_‰ame
-1)<<8Ë& 
AT91C_SSC_DATNB
) +\

427 (((
nb_bô_by_¶Ÿ
-1)<<16Ë& 
AT91C_SSC_FSLEN
) +\

428 
AT91C_SSC_FSOS_NEGATIVE
)

	)

435 
__ölöe
 
	$AT91F_SSC_SëBaudøã
 (

436 
AT91PS_SSC
 
pSSC
,

437 
maöClock
,

438 
•ìd
)

440 
baud_vÆue
;

442 i‡(
•ìd
 == 0)

443 
baud_vÆue
 = 0;

446 
baud_vÆue
 = (Ë(
maöClock
 * 10)/(2*
•ìd
);

447 i‡((
baud_vÆue
 % 10) >= 5)

448 
baud_vÆue
 = (baud_value / 10) + 1;

450 
baud_vÆue
 /= 10;

453 
pSSC
->
SSC_CMR
 = 
baud_vÆue
;

454 
	}
}

460 
__ölöe
 
	$AT91F_SSC_C⁄figuª
 (

461 
AT91PS_SSC
 
pSSC
,

462 
sy°_˛ock
,

463 
baud_øã
,

464 
˛ock_rx
,

465 
mode_rx
,

466 
˛ock_tx
,

467 
mode_tx
)

470 
pSSC
->
SSC_IDR
 = () -1;

473 
pSSC
->
SSC_CR
 = 
AT91C_SSC_SWRST
 | 
AT91C_SSC_RXDIS
 | 
AT91C_SSC_TXDIS
 ;

476 
	`AT91F_SSC_SëBaudøã
(
pSSC
, 
sy°_˛ock
, 
baud_øã
);

479 
pSSC
->
SSC_RCMR
 = 
˛ock_rx
;

482 
pSSC
->
SSC_TCMR
 = 
˛ock_tx
;

485 
pSSC
->
SSC_RFMR
 = 
mode_rx
;

488 
pSSC
->
SSC_TFMR
 = 
mode_tx
;

491 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
));

494 
	}
}

500 
__ölöe
 
	$AT91F_SSC_E«bÀRx
 (

501 
AT91PS_SSC
 
pSSC
)

504 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXEN
;

505 
	}
}

511 
__ölöe
 
	$AT91F_SSC_DißbÀRx
 (

512 
AT91PS_SSC
 
pSSC
)

515 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXDIS
;

516 
	}
}

522 
__ölöe
 
	$AT91F_SSC_E«bÀTx
 (

523 
AT91PS_SSC
 
pSSC
)

526 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXEN
;

527 
	}
}

533 
__ölöe
 
	$AT91F_SSC_DißbÀTx
 (

534 
AT91PS_SSC
 
pSSC
)

537 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXDIS
;

538 
	}
}

544 
__ölöe
 
	$AT91F_SSC_E«bÀIt
 (

545 
AT91PS_SSC
 
pSSC
,

546 
Êag
)

549 
pSSC
->
SSC_IER
 = 
Êag
;

550 
	}
}

556 
__ölöe
 
	$AT91F_SSC_DißbÀIt
 (

557 
AT91PS_SSC
 
pSSC
,

558 
Êag
)

561 
pSSC
->
SSC_IDR
 = 
Êag
;

562 
	}
}

568 
__ölöe
 
	$AT91F_SSC_Re˚iveFøme
 (

569 
AT91PS_SSC
 
pSSC
,

570 *
pBuf„r
,

571 
szBuf„r
,

572 *
pNextBuf„r
,

573 
szNextBuf„r
 )

575  
	`AT91F_PDC_Re˚iveFøme
(

576 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

577 
pBuf„r
,

578 
szBuf„r
,

579 
pNextBuf„r
,

580 
szNextBuf„r
);

581 
	}
}

587 
__ölöe
 
	$AT91F_SSC_SídFøme
(

588 
AT91PS_SSC
 
pSSC
,

589 *
pBuf„r
,

590 
szBuf„r
,

591 *
pNextBuf„r
,

592 
szNextBuf„r
 )

594  
	`AT91F_PDC_SídFøme
(

595 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

596 
pBuf„r
,

597 
szBuf„r
,

598 
pNextBuf„r
,

599 
szNextBuf„r
);

600 
	}
}

606 
__ölöe
 
	$AT91F_SSC_GëI¡îru±MaskSètus
(

607 
AT91PS_SSC
 
pSsc
)

609  
pSsc
->
SSC_IMR
;

610 
	}
}

616 
__ölöe
 
	$AT91F_SSC_IsI¡îru±Masked
(

617 
AT91PS_SSC
 
pSsc
,

618 
Êag
)

620  (
	`AT91F_SSC_GëI¡îru±MaskSètus
(
pSsc
Ë& 
Êag
);

621 
	}
}

630 
__ölöe
 
	$AT91F_SPI_O≥n
 (

631 c⁄° 
nuŒ
)

635 
	}
}

641 
__ölöe
 
	$AT91F_SPI_CfgCs
 (

642 
AT91PS_SPI
 
pSPI
,

643 
cs
,

644 
vÆ
)

647 *(
pSPI
->
SPI_CSR
 + 
cs
Ë
vÆ
;

648 
	}
}

654 
__ölöe
 
	$AT91F_SPI_E«bÀIt
 (

655 
AT91PS_SPI
 
pSPI
,

656 
Êag
)

659 
pSPI
->
SPI_IER
 = 
Êag
;

660 
	}
}

666 
__ölöe
 
	$AT91F_SPI_DißbÀIt
 (

667 
AT91PS_SPI
 
pSPI
,

668 
Êag
)

671 
pSPI
->
SPI_IDR
 = 
Êag
;

672 
	}
}

678 
__ölöe
 
	$AT91F_SPI_Re£t
 (

679 
AT91PS_SPI
 
pSPI


683 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SWRST
;

684 
	}
}

690 
__ölöe
 
	$AT91F_SPI_E«bÀ
 (

691 
AT91PS_SPI
 
pSPI


695 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIEN
;

696 
	}
}

702 
__ölöe
 
	$AT91F_SPI_DißbÀ
 (

703 
AT91PS_SPI
 
pSPI


707 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

708 
	}
}

714 
__ölöe
 
	$AT91F_SPI_CfgMode
 (

715 
AT91PS_SPI
 
pSPI
,

716 
mode
)

719 
pSPI
->
SPI_MR
 = 
mode
;

720 
	}
}

726 
__ölöe
 
	$AT91F_SPI_CfgPCS
 (

727 
AT91PS_SPI
 
pSPI
,

728 
PCS_Devi˚
)

731 
pSPI
->
SPI_MR
 &= 0xFFF0FFFF;

732 
pSPI
->
SPI_MR
 |–(
PCS_Devi˚
<<16Ë& 
AT91C_SPI_PCS
 );

733 
	}
}

739 
__ölöe
 
	$AT91F_SPI_Re˚iveFøme
 (

740 
AT91PS_SPI
 
pSPI
,

741 *
pBuf„r
,

742 
szBuf„r
,

743 *
pNextBuf„r
,

744 
szNextBuf„r
 )

746  
	`AT91F_PDC_Re˚iveFøme
(

747 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

748 
pBuf„r
,

749 
szBuf„r
,

750 
pNextBuf„r
,

751 
szNextBuf„r
);

752 
	}
}

758 
__ölöe
 
	$AT91F_SPI_SídFøme
(

759 
AT91PS_SPI
 
pSPI
,

760 *
pBuf„r
,

761 
szBuf„r
,

762 *
pNextBuf„r
,

763 
szNextBuf„r
 )

765  
	`AT91F_PDC_SídFøme
(

766 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

767 
pBuf„r
,

768 
szBuf„r
,

769 
pNextBuf„r
,

770 
szNextBuf„r
);

771 
	}
}

777 
__ölöe
 
	$AT91F_SPI_Clo£
 (

778 
AT91PS_SPI
 
pSPI
)

781 
pSPI
->
SPI_CSR
[0] = 0 ;

782 
pSPI
->
SPI_CSR
[1] = 0 ;

783 
pSPI
->
SPI_CSR
[2] = 0 ;

784 
pSPI
->
SPI_CSR
[3] = 0 ;

787 
pSPI
->
SPI_MR
 = 0 ;

790 
pSPI
->
SPI_IDR
 = 0xFFFFFFFF ;

793 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
));

796 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

797 
	}
}

803 
__ölöe
 
	$AT91F_SPI_PutCh¨
 (

804 
AT91PS_SPI
 
pSPI
,

805 
ch¨a˘î
,

806 
cs_numbî
 )

808 
vÆue_f‹_cs
;

809 
vÆue_f‹_cs
 = (~(1 << 
cs_numbî
)) & 0xF;

810 
pSPI
->
SPI_TDR
 = (
ch¨a˘î
 & 0xFFFFË| (
vÆue_f‹_cs
 << 16);

811 
	}
}

817 
__ölöe
 
	$AT91F_SPI_GëCh¨
 (

818 c⁄° 
AT91PS_SPI
 
pSPI
)

820 ((
pSPI
->
SPI_RDR
) & 0xFFFF);

821 
	}
}

827 
__ölöe
 
	$AT91F_SPI_GëI¡îru±MaskSètus
(

828 
AT91PS_SPI
 
pSpi
)

830  
pSpi
->
SPI_IMR
;

831 
	}
}

837 
__ölöe
 
	$AT91F_SPI_IsI¡îru±Masked
(

838 
AT91PS_SPI
 
pSpi
,

839 
Êag
)

841  (
	`AT91F_SPI_GëI¡îru±MaskSètus
(
pSpi
Ë& 
Êag
);

842 
	}
}

851 
__ölöe
 
	$AT91F_PWMC_GëSètus
(

852 
AT91PS_PWMC
 
pPWM
)

854  
pPWM
->
PWMC_SR
;

855 
	}
}

861 
__ölöe
 
	$AT91F_PWMC_I¡îru±E«bÀ
(

862 
AT91PS_PWMC
 
pPwm
,

863 
Êag
)

865 
pPwm
->
PWMC_IER
 = 
Êag
;

866 
	}
}

872 
__ölöe
 
	$AT91F_PWMC_I¡îru±DißbÀ
(

873 
AT91PS_PWMC
 
pPwm
,

874 
Êag
)

876 
pPwm
->
PWMC_IDR
 = 
Êag
;

877 
	}
}

883 
__ölöe
 
	$AT91F_PWMC_GëI¡îru±MaskSètus
(

884 
AT91PS_PWMC
 
pPwm
)

886  
pPwm
->
PWMC_IMR
;

887 
	}
}

893 
__ölöe
 
	$AT91F_PWMC_IsI¡îru±Masked
(

894 
AT91PS_PWMC
 
pPWM
,

895 
Êag
)

897  (
	`AT91F_PWMC_GëI¡îru±MaskSètus
(
pPWM
Ë& 
Êag
);

898 
	}
}

904 
__ölöe
 
	$AT91F_PWMC_IsSètusSë
(

905 
AT91PS_PWMC
 
pPWM
,

906 
Êag
)

908  (
	`AT91F_PWMC_GëSètus
(
pPWM
Ë& 
Êag
);

909 
	}
}

915 
__ölöe
 
	$AT91F_PWMC_CfgCh™√l
(

916 
AT91PS_PWMC
 
pPWM
,

917 
ch™√lId
,

918 
mode
,

919 
≥riod
,

920 
duty
)

922 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CMR
 = 
mode
;

923 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CDTYR
 = 
duty
;

924 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CPRDR
 = 
≥riod
;

925 
	}
}

931 
__ölöe
 
	$AT91F_PWMC_SèπCh™√l
(

932 
AT91PS_PWMC
 
pPWM
,

933 
Êag
)

935 
pPWM
->
PWMC_ENA
 = 
Êag
;

936 
	}
}

942 
__ölöe
 
	$AT91F_PWMC_St›Ch™√l
(

943 
AT91PS_PWMC
 
pPWM
,

944 
Êag
)

946 
pPWM
->
PWMC_DIS
 = 
Êag
;

947 
	}
}

953 
__ölöe
 
	$AT91F_PWMC_Upd©eCh™√l
(

954 
AT91PS_PWMC
 
pPWM
,

955 
ch™√lId
,

956 
upd©e
)

958 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CUPDR
 = 
upd©e
;

959 
	}
}

968 
__ölöe
 
	$AT91F_TC_I¡îru±E«bÀ
(

969 
AT91PS_TC
 
pTc
,

970 
Êag
)

972 
pTc
->
TC_IER
 = 
Êag
;

973 
	}
}

979 
__ölöe
 
	$AT91F_TC_I¡îru±DißbÀ
(

980 
AT91PS_TC
 
pTc
,

981 
Êag
)

983 
pTc
->
TC_IDR
 = 
Êag
;

984 
	}
}

990 
__ölöe
 
	$AT91F_TC_GëI¡îru±MaskSètus
(

991 
AT91PS_TC
 
pTc
)

993  
pTc
->
TC_IMR
;

994 
	}
}

1000 
__ölöe
 
	$AT91F_TC_IsI¡îru±Masked
(

1001 
AT91PS_TC
 
pTc
,

1002 
Êag
)

1004  (
	`AT91F_TC_GëI¡îru±MaskSètus
(
pTc
Ë& 
Êag
);

1005 
	}
}

1014 
__ölöe
 
	$AT91F_PMC_CfgSysClkE«bÀReg
 (

1015 
AT91PS_PMC
 
pPMC
,

1016 
mode
)

1019 
pPMC
->
PMC_SCER
 = 
mode
;

1020 
	}
}

1026 
__ölöe
 
	$AT91F_PMC_CfgSysClkDißbÀReg
 (

1027 
AT91PS_PMC
 
pPMC
,

1028 
mode
)

1031 
pPMC
->
PMC_SCDR
 = 
mode
;

1032 
	}
}

1038 
__ölöe
 
	$AT91F_PMC_GëSysClkSètusReg
 (

1039 
AT91PS_PMC
 
pPMC


1042  
pPMC
->
PMC_SCSR
;

1043 
	}
}

1049 
__ölöe
 
	$AT91F_PMC_E«bÀPîùhClock
 (

1050 
AT91PS_PMC
 
pPMC
,

1051 
≥rùhIds
)

1053 
pPMC
->
PMC_PCER
 = 
≥rùhIds
;

1054 
	}
}

1060 
__ölöe
 
	$AT91F_PMC_DißbÀPîùhClock
 (

1061 
AT91PS_PMC
 
pPMC
,

1062 
≥rùhIds
)

1064 
pPMC
->
PMC_PCDR
 = 
≥rùhIds
;

1065 
	}
}

1071 
__ölöe
 
	$AT91F_PMC_GëPîùhClock
 (

1072 
AT91PS_PMC
 
pPMC
)

1074  
pPMC
->
PMC_PCSR
;

1075 
	}
}

1081 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscûœt‹Reg
 (

1082 
AT91PS_CKGR
 
pCKGR
,

1083 
mode
)

1085 
pCKGR
->
CKGR_MOR
 = 
mode
;

1086 
	}
}

1092 
__ölöe
 
	$AT91F_CKGR_GëMaöOscûœt‹Reg
 (

1093 
AT91PS_CKGR
 
pCKGR
)

1095  
pCKGR
->
CKGR_MOR
;

1096 
	}
}

1102 
__ölöe
 
	$AT91F_CKGR_E«bÀMaöOscûœt‹
(

1103 
AT91PS_CKGR
 
pCKGR
)

1105 
pCKGR
->
CKGR_MOR
 |
AT91C_CKGR_MOSCEN
;

1106 
	}
}

1112 
__ölöe
 
	$AT91F_CKGR_DißbÀMaöOscûœt‹
 (

1113 
AT91PS_CKGR
 
pCKGR
)

1115 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_MOSCEN
;

1116 
	}
}

1122 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscSèπUpTime
 (

1123 
AT91PS_CKGR
 
pCKGR
,

1124 
°¨tup_time
,

1125 
¶owClock
)

1127 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_OSCOUNT
;

1128 
pCKGR
->
CKGR_MOR
 |((
¶owClock
 * 
°¨tup_time
)/(8*1000000)) << 8;

1129 
	}
}

1135 
__ölöe
 
	$AT91F_CKGR_GëMaöClockFªqReg
 (

1136 
AT91PS_CKGR
 
pCKGR
)

1138  
pCKGR
->
CKGR_MCFR
;

1139 
	}
}

1145 
__ölöe
 
	$AT91F_CKGR_GëMaöClock
 (

1146 
AT91PS_CKGR
 
pCKGR
,

1147 
¶owClock
)

1149  ((
pCKGR
->
CKGR_MCFR
 & 
AT91C_CKGR_MAINF
Ë* 
¶owClock
) >> 4;

1150 
	}
}

1156 
__ölöe
 
	$AT91F_PMC_CfgMCKReg
 (

1157 
AT91PS_PMC
 
pPMC
,

1158 
mode
)

1160 
pPMC
->
PMC_MCKR
 = 
mode
;

1161 
	}
}

1167 
__ölöe
 
	$AT91F_PMC_GëMCKReg
(

1168 
AT91PS_PMC
 
pPMC
)

1170  
pPMC
->
PMC_MCKR
;

1171 
	}
}

1177 
__ölöe
 
	$AT91F_PMC_GëMa°îClock
 (

1178 
AT91PS_PMC
 
pPMC
,

1179 
AT91PS_CKGR
 
pCKGR
,

1180 
¶owClock
)

1182 
ªg
 = 
pPMC
->
PMC_MCKR
;

1183 
¥esˇÀr
 = (1 << ((
ªg
 & 
AT91C_PMC_PRES
) >> 2));

1184 
∂lDividî
, 
∂lMu…ùlõr
;

1186 
ªg
 & 
AT91C_PMC_CSS
) {

1187 
AT91C_PMC_CSS_SLOW_CLK
:

1188  
¶owClock
 / 
¥esˇÀr
;

1189 
AT91C_PMC_CSS_MAIN_CLK
:

1190  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
¥esˇÀr
;

1191 
AT91C_PMC_CSS_PLL_CLK
:

1192 
ªg
 = 
pCKGR
->
CKGR_PLLR
;

1193 
∂lDividî
 = (
ªg
 & 
AT91C_CKGR_DIV
);

1194 
∂lMu…ùlõr
 = ((
ªg
 & 
AT91C_CKGR_MUL
) >> 16) + 1;

1195  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

1198 
	}
}

1204 
__ölöe
 
	$AT91F_PMC_E«bÀPCK
 (

1205 
AT91PS_PMC
 
pPMC
,

1206 
pck
,

1207 
mode
)

1209 
pPMC
->
PMC_PCKR
[
pck
] = 
mode
;

1210 
pPMC
->
PMC_SCER
 = (1 << 
pck
) << 8;

1211 
	}
}

1217 
__ölöe
 
	$AT91F_PMC_DißbÀPCK
 (

1218 
AT91PS_PMC
 
pPMC
,

1219 
pck
)

1221 
pPMC
->
PMC_SCDR
 = (1 << 
pck
) << 8;

1222 
	}
}

1228 
__ölöe
 
	$AT91F_PMC_E«bÀIt
 (

1229 
AT91PS_PMC
 
pPMC
,

1230 
Êag
)

1233 
pPMC
->
PMC_IER
 = 
Êag
;

1234 
	}
}

1240 
__ölöe
 
	$AT91F_PMC_DißbÀIt
 (

1241 
AT91PS_PMC
 
pPMC
,

1242 
Êag
)

1245 
pPMC
->
PMC_IDR
 = 
Êag
;

1246 
	}
}

1252 
__ölöe
 
	$AT91F_PMC_GëSètus
(

1253 
AT91PS_PMC
 
pPMC
)

1255  
pPMC
->
PMC_SR
;

1256 
	}
}

1262 
__ölöe
 
	$AT91F_PMC_GëI¡îru±MaskSètus
(

1263 
AT91PS_PMC
 
pPMC
)

1265  
pPMC
->
PMC_IMR
;

1266 
	}
}

1272 
__ölöe
 
	$AT91F_PMC_IsI¡îru±Masked
(

1273 
AT91PS_PMC
 
pPMC
,

1274 
Êag
)

1276  (
	`AT91F_PMC_GëI¡îru±MaskSètus
(
pPMC
Ë& 
Êag
);

1277 
	}
}

1283 
__ölöe
 
	$AT91F_PMC_IsSètusSë
(

1284 
AT91PS_PMC
 
pPMC
,

1285 
Êag
)

1287  (
	`AT91F_PMC_GëSètus
(
pPMC
Ë& 
Êag
);

1288 
	}
}

1295 
__ölöe
 
	$AT91F_ADC_E«bÀIt
 (

1296 
AT91PS_ADC
 
pADC
,

1297 
Êag
)

1300 
pADC
->
ADC_IER
 = 
Êag
;

1301 
	}
}

1307 
__ölöe
 
	$AT91F_ADC_DißbÀIt
 (

1308 
AT91PS_ADC
 
pADC
,

1309 
Êag
)

1312 
pADC
->
ADC_IDR
 = 
Êag
;

1313 
	}
}

1319 
__ölöe
 
	$AT91F_ADC_GëSètus
(

1320 
AT91PS_ADC
 
pADC
)

1322  
pADC
->
ADC_SR
;

1323 
	}
}

1329 
__ölöe
 
	$AT91F_ADC_GëI¡îru±MaskSètus
(

1330 
AT91PS_ADC
 
pADC
)

1332  
pADC
->
ADC_IMR
;

1333 
	}
}

1339 
__ölöe
 
	$AT91F_ADC_IsI¡îru±Masked
(

1340 
AT91PS_ADC
 
pADC
,

1341 
Êag
)

1343  (
	`AT91F_ADC_GëI¡îru±MaskSètus
(
pADC
Ë& 
Êag
);

1344 
	}
}

1350 
__ölöe
 
	$AT91F_ADC_IsSètusSë
(

1351 
AT91PS_ADC
 
pADC
,

1352 
Êag
)

1354  (
	`AT91F_ADC_GëSètus
(
pADC
Ë& 
Êag
);

1355 
	}
}

1361 
__ölöe
 
	$AT91F_ADC_CfgModeReg
 (

1362 
AT91PS_ADC
 
pADC
,

1363 
mode
)

1366 
pADC
->
ADC_MR
 = 
mode
;

1367 
	}
}

1373 
__ölöe
 
	$AT91F_ADC_GëModeReg
 (

1374 
AT91PS_ADC
 
pADC


1377  
pADC
->
ADC_MR
;

1378 
	}
}

1384 
__ölöe
 
	$AT91F_ADC_CfgTimögs
 (

1385 
AT91PS_ADC
 
pADC
,

1386 
mck_˛ock
,

1387 
adc_˛ock
,

1388 
°¨tup_time
,

1389 
ßm∂e_™d_hﬁd_time
)

1391 
¥esˇl
,
°¨tup
,
shtim
;

1393 
¥esˇl
 = 
mck_˛ock
/(2*
adc_˛ock
) - 1;

1394 
°¨tup
 = 
adc_˛ock
*
°¨tup_time
/8 - 1;

1395 
shtim
 = 
adc_˛ock
*
ßm∂e_™d_hﬁd_time
/1000 - 1;

1398 
pADC
->
ADC_MR
 = ( (
¥esˇl
<<8Ë& 
AT91C_ADC_PRESCAL
Ë| ( (
°¨tup
<<16Ë& 
AT91C_ADC_STARTUP
Ë| ( (
shtim
<<24Ë& 
AT91C_ADC_SHTIM
);

1399 
	}
}

1405 
__ölöe
 
	$AT91F_ADC_E«bÀCh™√l
 (

1406 
AT91PS_ADC
 
pADC
,

1407 
ch™√l
)

1410 
pADC
->
ADC_CHER
 = 
ch™√l
;

1411 
	}
}

1417 
__ölöe
 
	$AT91F_ADC_DißbÀCh™√l
 (

1418 
AT91PS_ADC
 
pADC
,

1419 
ch™√l
)

1422 
pADC
->
ADC_CHDR
 = 
ch™√l
;

1423 
	}
}

1429 
__ölöe
 
	$AT91F_ADC_GëCh™√lSètus
 (

1430 
AT91PS_ADC
 
pADC


1433  
pADC
->
ADC_CHSR
;

1434 
	}
}

1440 
__ölöe
 
	$AT91F_ADC_SèπC⁄vîsi⁄
 (

1441 
AT91PS_ADC
 
pADC


1444 
pADC
->
ADC_CR
 = 
AT91C_ADC_START
;

1445 
	}
}

1451 
__ölöe
 
	$AT91F_ADC_So·Re£t
 (

1452 
AT91PS_ADC
 
pADC


1455 
pADC
->
ADC_CR
 = 
AT91C_ADC_SWRST
;

1456 
	}
}

1462 
__ölöe
 
	$AT91F_ADC_GëLa°C⁄vîãdD©a
 (

1463 
AT91PS_ADC
 
pADC


1466  
pADC
->
ADC_LCDR
;

1467 
	}
}

1473 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH0
 (

1474 
AT91PS_ADC
 
pADC


1477  
pADC
->
ADC_CDR0
;

1478 
	}
}

1484 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH1
 (

1485 
AT91PS_ADC
 
pADC


1488  
pADC
->
ADC_CDR1
;

1489 
	}
}

1495 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH2
 (

1496 
AT91PS_ADC
 
pADC


1499  
pADC
->
ADC_CDR2
;

1500 
	}
}

1506 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH3
 (

1507 
AT91PS_ADC
 
pADC


1510  
pADC
->
ADC_CDR3
;

1511 
	}
}

1517 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH4
 (

1518 
AT91PS_ADC
 
pADC


1521  
pADC
->
ADC_CDR4
;

1522 
	}
}

1528 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH5
 (

1529 
AT91PS_ADC
 
pADC


1532  
pADC
->
ADC_CDR5
;

1533 
	}
}

1539 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH6
 (

1540 
AT91PS_ADC
 
pADC


1543  
pADC
->
ADC_CDR6
;

1544 
	}
}

1550 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH7
 (

1551 
AT91PS_ADC
 
pADC


1554  
pADC
->
ADC_CDR7
;

1555 
	}
}

1564 
__ölöe
 
	$AT91F_PIO_CfgPîùh
(

1565 
AT91PS_PIO
 
pPio
,

1566 
≥rùhAE«bÀ
,

1567 
≥rùhBE«bÀ
)

1570 
pPio
->
PIO_ASR
 = 
≥rùhAE«bÀ
;

1571 
pPio
->
PIO_BSR
 = 
≥rùhBE«bÀ
;

1572 
pPio
->
PIO_PDR
 = (
≥rùhAE«bÀ
 | 
≥rùhBE«bÀ
);

1573 
	}
}

1579 
__ölöe
 
	$AT91F_PIO_CfgOuçut
(

1580 
AT91PS_PIO
 
pPio
,

1581 
pioE«bÀ
)

1583 
pPio
->
PIO_PER
 = 
pioE«bÀ
;

1584 
pPio
->
PIO_OER
 = 
pioE«bÀ
;

1585 
	}
}

1591 
__ölöe
 
	$AT91F_PIO_CfgI≈ut
(

1592 
AT91PS_PIO
 
pPio
,

1593 
öputE«bÀ
)

1596 
pPio
->
PIO_ODR
 = 
öputE«bÀ
;

1597 
pPio
->
PIO_PER
 = 
öputE«bÀ
;

1598 
	}
}

1604 
__ölöe
 
	$AT91F_PIO_CfgO≥ndøö
(

1605 
AT91PS_PIO
 
pPio
,

1606 
mu…iDrvE«bÀ
)

1609 
pPio
->
PIO_MDDR
 = ~
mu…iDrvE«bÀ
;

1610 
pPio
->
PIO_MDER
 = 
mu…iDrvE«bÀ
;

1611 
	}
}

1617 
__ölöe
 
	$AT91F_PIO_CfgPuŒup
(

1618 
AT91PS_PIO
 
pPio
,

1619 
puŒupE«bÀ
)

1622 
pPio
->
PIO_PPUDR
 = ~
puŒupE«bÀ
;

1623 
pPio
->
PIO_PPUER
 = 
puŒupE«bÀ
;

1624 
	}
}

1630 
__ölöe
 
	$AT91F_PIO_CfgDúe˘Drive
(

1631 
AT91PS_PIO
 
pPio
,

1632 
dúe˘Drive
)

1636 
pPio
->
PIO_OWDR
 = ~
dúe˘Drive
;

1637 
pPio
->
PIO_OWER
 = 
dúe˘Drive
;

1638 
	}
}

1644 
__ölöe
 
	$AT91F_PIO_CfgI≈utFûãr
(

1645 
AT91PS_PIO
 
pPio
,

1646 
öputFûãr
)

1650 
pPio
->
PIO_IFDR
 = ~
öputFûãr
;

1651 
pPio
->
PIO_IFER
 = 
öputFûãr
;

1652 
	}
}

1658 
__ölöe
 
	$AT91F_PIO_GëI≈ut
(

1659 
AT91PS_PIO
 
pPio
)

1661  
pPio
->
PIO_PDSR
;

1662 
	}
}

1668 
__ölöe
 
	$AT91F_PIO_IsI≈utSë
(

1669 
AT91PS_PIO
 
pPio
,

1670 
Êag
)

1672  (
	`AT91F_PIO_GëI≈ut
(
pPio
Ë& 
Êag
);

1673 
	}
}

1680 
__ölöe
 
	$AT91F_PIO_SëOuçut
(

1681 
AT91PS_PIO
 
pPio
,

1682 
Êag
)

1684 
pPio
->
PIO_SODR
 = 
Êag
;

1685 
	}
}

1691 
__ölöe
 
	$AT91F_PIO_CÀ¨Ouçut
(

1692 
AT91PS_PIO
 
pPio
,

1693 
Êag
)

1695 
pPio
->
PIO_CODR
 = 
Êag
;

1696 
	}
}

1702 
__ölöe
 
	$AT91F_PIO_F‹˚Ouçut
(

1703 
AT91PS_PIO
 
pPio
,

1704 
Êag
)

1706 
pPio
->
PIO_ODSR
 = 
Êag
;

1707 
	}
}

1713 
__ölöe
 
	$AT91F_PIO_E«bÀ
(

1714 
AT91PS_PIO
 
pPio
,

1715 
Êag
)

1717 
pPio
->
PIO_PER
 = 
Êag
;

1718 
	}
}

1724 
__ölöe
 
	$AT91F_PIO_DißbÀ
(

1725 
AT91PS_PIO
 
pPio
,

1726 
Êag
)

1728 
pPio
->
PIO_PDR
 = 
Êag
;

1729 
	}
}

1735 
__ölöe
 
	$AT91F_PIO_GëSètus
(

1736 
AT91PS_PIO
 
pPio
)

1738  
pPio
->
PIO_PSR
;

1739 
	}
}

1745 
__ölöe
 
	$AT91F_PIO_IsSë
(

1746 
AT91PS_PIO
 
pPio
,

1747 
Êag
)

1749  (
	`AT91F_PIO_GëSètus
(
pPio
Ë& 
Êag
);

1750 
	}
}

1756 
__ölöe
 
	$AT91F_PIO_OuçutE«bÀ
(

1757 
AT91PS_PIO
 
pPio
,

1758 
Êag
)

1760 
pPio
->
PIO_OER
 = 
Êag
;

1761 
	}
}

1767 
__ölöe
 
	$AT91F_PIO_OuçutDißbÀ
(

1768 
AT91PS_PIO
 
pPio
,

1769 
Êag
)

1771 
pPio
->
PIO_ODR
 = 
Êag
;

1772 
	}
}

1778 
__ölöe
 
	$AT91F_PIO_GëOuçutSètus
(

1779 
AT91PS_PIO
 
pPio
)

1781  
pPio
->
PIO_OSR
;

1782 
	}
}

1788 
__ölöe
 
	$AT91F_PIO_IsOuçutSë
(

1789 
AT91PS_PIO
 
pPio
,

1790 
Êag
)

1792  (
	`AT91F_PIO_GëOuçutSètus
(
pPio
Ë& 
Êag
);

1793 
	}
}

1799 
__ölöe
 
	$AT91F_PIO_I≈utFûãrE«bÀ
(

1800 
AT91PS_PIO
 
pPio
,

1801 
Êag
)

1803 
pPio
->
PIO_IFER
 = 
Êag
;

1804 
	}
}

1810 
__ölöe
 
	$AT91F_PIO_I≈utFûãrDißbÀ
(

1811 
AT91PS_PIO
 
pPio
,

1812 
Êag
)

1814 
pPio
->
PIO_IFDR
 = 
Êag
;

1815 
	}
}

1821 
__ölöe
 
	$AT91F_PIO_GëI≈utFûãrSètus
(

1822 
AT91PS_PIO
 
pPio
)

1824  
pPio
->
PIO_IFSR
;

1825 
	}
}

1831 
__ölöe
 
	$AT91F_PIO_IsI≈utFûãrSë
(

1832 
AT91PS_PIO
 
pPio
,

1833 
Êag
)

1835  (
	`AT91F_PIO_GëI≈utFûãrSètus
(
pPio
Ë& 
Êag
);

1836 
	}
}

1842 
__ölöe
 
	$AT91F_PIO_GëOuçutD©aSètus
(

1843 
AT91PS_PIO
 
pPio
)

1845  
pPio
->
PIO_ODSR
;

1846 
	}
}

1852 
__ölöe
 
	$AT91F_PIO_I¡îru±E«bÀ
(

1853 
AT91PS_PIO
 
pPio
,

1854 
Êag
)

1856 
pPio
->
PIO_IER
 = 
Êag
;

1857 
	}
}

1863 
__ölöe
 
	$AT91F_PIO_I¡îru±DißbÀ
(

1864 
AT91PS_PIO
 
pPio
,

1865 
Êag
)

1867 
pPio
->
PIO_IDR
 = 
Êag
;

1868 
	}
}

1874 
__ölöe
 
	$AT91F_PIO_GëI¡îru±MaskSètus
(

1875 
AT91PS_PIO
 
pPio
)

1877  
pPio
->
PIO_IMR
;

1878 
	}
}

1884 
__ölöe
 
	$AT91F_PIO_GëI¡îru±Sètus
(

1885 
AT91PS_PIO
 
pPio
)

1887  
pPio
->
PIO_ISR
;

1888 
	}
}

1894 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Masked
(

1895 
AT91PS_PIO
 
pPio
,

1896 
Êag
)

1898  (
	`AT91F_PIO_GëI¡îru±MaskSètus
(
pPio
Ë& 
Êag
);

1899 
	}
}

1905 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Së
(

1906 
AT91PS_PIO
 
pPio
,

1907 
Êag
)

1909  (
	`AT91F_PIO_GëI¡îru±Sètus
(
pPio
Ë& 
Êag
);

1910 
	}
}

1916 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîE«bÀ
(

1917 
AT91PS_PIO
 
pPio
,

1918 
Êag
)

1920 
pPio
->
PIO_MDER
 = 
Êag
;

1921 
	}
}

1927 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîDißbÀ
(

1928 
AT91PS_PIO
 
pPio
,

1929 
Êag
)

1931 
pPio
->
PIO_MDDR
 = 
Êag
;

1932 
	}
}

1938 
__ölöe
 
	$AT91F_PIO_GëMu…iDrivîSètus
(

1939 
AT91PS_PIO
 
pPio
)

1941  
pPio
->
PIO_MDSR
;

1942 
	}
}

1948 
__ölöe
 
	$AT91F_PIO_IsMu…iDrivîSë
(

1949 
AT91PS_PIO
 
pPio
,

1950 
Êag
)

1952  (
	`AT91F_PIO_GëMu…iDrivîSètus
(
pPio
Ë& 
Êag
);

1953 
	}
}

1959 
__ölöe
 
	$AT91F_PIO_A_Regi°îSñe˘i⁄
(

1960 
AT91PS_PIO
 
pPio
,

1961 
Êag
)

1963 
pPio
->
PIO_ASR
 = 
Êag
;

1964 
	}
}

1970 
__ölöe
 
	$AT91F_PIO_B_Regi°îSñe˘i⁄
(

1971 
AT91PS_PIO
 
pPio
,

1972 
Êag
)

1974 
pPio
->
PIO_BSR
 = 
Êag
;

1975 
	}
}

1981 
__ölöe
 
	$AT91F_PIO_Gë_AB_Regi°îSètus
(

1982 
AT91PS_PIO
 
pPio
)

1984  
pPio
->
PIO_ABSR
;

1985 
	}
}

1991 
__ölöe
 
	$AT91F_PIO_IsAB_Regi°îSë
(

1992 
AT91PS_PIO
 
pPio
,

1993 
Êag
)

1995  (
	`AT91F_PIO_Gë_AB_Regi°îSètus
(
pPio
Ë& 
Êag
);

1996 
	}
}

2002 
__ölöe
 
	$AT91F_PIO_OuçutWrôeE«bÀ
(

2003 
AT91PS_PIO
 
pPio
,

2004 
Êag
)

2006 
pPio
->
PIO_OWER
 = 
Êag
;

2007 
	}
}

2013 
__ölöe
 
	$AT91F_PIO_OuçutWrôeDißbÀ
(

2014 
AT91PS_PIO
 
pPio
,

2015 
Êag
)

2017 
pPio
->
PIO_OWDR
 = 
Êag
;

2018 
	}
}

2024 
__ölöe
 
	$AT91F_PIO_GëOuçutWrôeSètus
(

2025 
AT91PS_PIO
 
pPio
)

2027  
pPio
->
PIO_OWSR
;

2028 
	}
}

2034 
__ölöe
 
	$AT91F_PIO_IsOuçutWrôeSë
(

2035 
AT91PS_PIO
 
pPio
,

2036 
Êag
)

2038  (
	`AT91F_PIO_GëOuçutWrôeSètus
(
pPio
Ë& 
Êag
);

2039 
	}
}

2045 
__ölöe
 
	$AT91F_PIO_GëCfgPuŒup
(

2046 
AT91PS_PIO
 
pPio
)

2048  
pPio
->
PIO_PPUSR
;

2049 
	}
}

2055 
__ölöe
 
	$AT91F_PIO_IsOuçutD©aSètusSë
(

2056 
AT91PS_PIO
 
pPio
,

2057 
Êag
)

2059  (
	`AT91F_PIO_GëOuçutD©aSètus
(
pPio
Ë& 
Êag
);

2060 
	}
}

2066 
__ölöe
 
	$AT91F_PIO_IsCfgPuŒupSètusSë
(

2067 
AT91PS_PIO
 
pPio
,

2068 
Êag
)

2070  (~
	`AT91F_PIO_GëCfgPuŒup
(
pPio
Ë& 
Êag
);

2071 
	}
}

2080 
__ölöe
 
	$AT91F_TWI_E«bÀIt
 (

2081 
AT91PS_TWI
 
pTWI
,

2082 
Êag
)

2085 
pTWI
->
TWI_IER
 = 
Êag
;

2086 
	}
}

2092 
__ölöe
 
	$AT91F_TWI_DißbÀIt
 (

2093 
AT91PS_TWI
 
pTWI
,

2094 
Êag
)

2097 
pTWI
->
TWI_IDR
 = 
Êag
;

2098 
	}
}

2104 
__ölöe
 
	$AT91F_TWI_C⁄figuª
 ( 
AT91PS_TWI
 
pTWI
 )

2107 
pTWI
->
TWI_IDR
 = () -1;

2110 
pTWI
->
TWI_CR
 = 
AT91C_TWI_SWRST
;

2113 
pTWI
->
TWI_CR
 = 
AT91C_TWI_MSEN
 | 
AT91C_TWI_SVDIS
;

2115 
	}
}

2121 
__ölöe
 
	$AT91F_TWI_GëI¡îru±MaskSètus
(

2122 
AT91PS_TWI
 
pTwi
)

2124  
pTwi
->
TWI_IMR
;

2125 
	}
}

2131 
__ölöe
 
	$AT91F_TWI_IsI¡îru±Masked
(

2132 
AT91PS_TWI
 
pTwi
,

2133 
Êag
)

2135  (
	`AT91F_TWI_GëI¡îru±MaskSètus
(
pTwi
Ë& 
Êag
);

2136 
	}
}

2145 
	#AT91C_US_ASYNC_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

2146 
AT91C_US_NBSTOP_1_BIT
 + \

2147 
AT91C_US_PAR_NONE
 + \

2148 
AT91C_US_CHRL_8_BITS
 + \

2149 
AT91C_US_CLKS_CLOCK
 )

	)

2152 
	#AT91C_US_ASYNC_SCK_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

2153 
AT91C_US_NBSTOP_1_BIT
 + \

2154 
AT91C_US_PAR_NONE
 + \

2155 
AT91C_US_CHRL_8_BITS
 + \

2156 
AT91C_US_CLKS_EXT
 )

	)

2159 
	#AT91C_US_SYNC_MODE
 ( 
AT91C_US_SYNC
 + \

2160 
AT91C_US_USMODE_NORMAL
 + \

2161 
AT91C_US_NBSTOP_1_BIT
 + \

2162 
AT91C_US_PAR_NONE
 + \

2163 
AT91C_US_CHRL_8_BITS
 + \

2164 
AT91C_US_CLKS_CLOCK
 )

	)

2167 
	#AT91C_US_SCK_USED
 (
AT91C_US_CKLO
 | 
AT91C_US_CLKS_EXT
)

	)

2170 
	#AT91C_US_ISO_READER_MODE
 ( 
AT91C_US_USMODE_ISO7816_0
 + \

2171 
AT91C_US_CLKS_CLOCK
 +\

2172 
AT91C_US_NBSTOP_1_BIT
 + \

2173 
AT91C_US_PAR_EVEN
 + \

2174 
AT91C_US_CHRL_8_BITS
 + \

2175 
AT91C_US_CKLO
 +\

2176 
AT91C_US_OVER
)

	)

2179 
	#AT91C_US_ASYNC_IRDA_MODE
 ( 
AT91C_US_USMODE_IRDA
 + \

2180 
AT91C_US_NBSTOP_1_BIT
 + \

2181 
AT91C_US_PAR_NONE
 + \

2182 
AT91C_US_CHRL_8_BITS
 + \

2183 
AT91C_US_CLKS_CLOCK
 )

	)

2189 
__ölöe
 
	$AT91F_US_Baudøã
 (

2190 c⁄° 
maö_˛ock
,

2191 c⁄° 
baud_øã
)

2193 
baud_vÆue
 = ((
maö_˛ock
*10)/(
baud_øã
 * 16));

2194 i‡((
baud_vÆue
 % 10) >= 5)

2195 
baud_vÆue
 = (baud_value / 10) + 1;

2197 
baud_vÆue
 /= 10;

2198  
baud_vÆue
;

2199 
	}
}

2205 
__ölöe
 
	$AT91F_US_SëBaudøã
 (

2206 
AT91PS_USART
 
pUSART
,

2207 
maöClock
,

2208 
•ìd
)

2211 
pUSART
->
US_BRGR
 = 
	`AT91F_US_Baudøã
(
maöClock
, 
•ìd
);

2212 
	}
}

2218 
__ölöe
 
	$AT91F_US_SëTimegu¨d
 (

2219 
AT91PS_USART
 
pUSART
,

2220 
timegu¨d
)

2223 
pUSART
->
US_TTGR
 = 
timegu¨d
 ;

2224 
	}
}

2230 
__ölöe
 
	$AT91F_US_E«bÀIt
 (

2231 
AT91PS_USART
 
pUSART
,

2232 
Êag
)

2235 
pUSART
->
US_IER
 = 
Êag
;

2236 
	}
}

2242 
__ölöe
 
	$AT91F_US_DißbÀIt
 (

2243 
AT91PS_USART
 
pUSART
,

2244 
Êag
)

2247 
pUSART
->
US_IDR
 = 
Êag
;

2248 
	}
}

2254 
__ölöe
 
	$AT91F_US_C⁄figuª
 (

2255 
AT91PS_USART
 
pUSART
,

2256 
maöClock
,

2257 
mode
 ,

2258 
baudR©e
 ,

2259 
timegu¨d
 )

2262 
pUSART
->
US_IDR
 = () -1;

2265 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RXDIS
 | 
AT91C_US_TXDIS
 ;

2268 
	`AT91F_US_SëBaudøã
(
pUSART
, 
maöClock
, 
baudR©e
);

2271 
	`AT91F_US_SëTimegu¨d
(
pUSART
, 
timegu¨d
);

2274 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2277 
pUSART
->
US_MR
 = 
mode
 ;

2279 
	}
}

2285 
__ölöe
 
	$AT91F_US_E«bÀRx
 (

2286 
AT91PS_USART
 
pUSART
)

2289 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2290 
	}
}

2296 
__ölöe
 
	$AT91F_US_E«bÀTx
 (

2297 
AT91PS_USART
 
pUSART
)

2300 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2301 
	}
}

2307 
__ölöe
 
	$AT91F_US_Re£tRx
 (

2308 
AT91PS_USART
 
pUSART
)

2311 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
;

2313 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2314 
	}
}

2320 
__ölöe
 
	$AT91F_US_Re£tTx
 (

2321 
AT91PS_USART
 
pUSART
)

2324 
pUSART
->
US_CR
 = 
AT91C_US_RSTTX
;

2326 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2327 
	}
}

2333 
__ölöe
 
	$AT91F_US_DißbÀRx
 (

2334 
AT91PS_USART
 
pUSART
)

2337 
pUSART
->
US_CR
 = 
AT91C_US_RXDIS
;

2338 
	}
}

2344 
__ölöe
 
	$AT91F_US_DißbÀTx
 (

2345 
AT91PS_USART
 
pUSART
)

2348 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
;

2349 
	}
}

2355 
__ölöe
 
	$AT91F_US_Clo£
 (

2356 
AT91PS_USART
 
pUSART
)

2359 
pUSART
->
US_BRGR
 = 0 ;

2362 
pUSART
->
US_MR
 = 0 ;

2365 
pUSART
->
US_TTGR
 = 0;

2368 
pUSART
->
US_IDR
 = 0xFFFFFFFF ;

2371 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2374 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
 | 
AT91C_US_RXDIS
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RSTRX
 ;

2375 
	}
}

2381 
__ölöe
 
	$AT91F_US_TxRódy
 (

2382 
AT91PS_USART
 
pUSART
 )

2384  (
pUSART
->
US_CSR
 & 
AT91C_US_TXRDY
);

2385 
	}
}

2391 
__ölöe
 
	$AT91F_US_RxRódy
 (

2392 
AT91PS_USART
 
pUSART
 )

2394  (
pUSART
->
US_CSR
 & 
AT91C_US_RXRDY
);

2395 
	}
}

2401 
__ölöe
 
	$AT91F_US_Eº‹
 (

2402 
AT91PS_USART
 
pUSART
 )

2404  (
pUSART
->
US_CSR
 &

2405 (
AT91C_US_OVRE
 |

2406 
AT91C_US_FRAME
 |

2407 
AT91C_US_PARE
));

2408 
	}
}

2414 
__ölöe
 
	$AT91F_US_PutCh¨
 (

2415 
AT91PS_USART
 
pUSART
,

2416 
ch¨a˘î
 )

2418 
pUSART
->
US_THR
 = (
ch¨a˘î
 & 0x1FF);

2419 
	}
}

2425 
__ölöe
 
	$AT91F_US_GëCh¨
 (

2426 c⁄° 
AT91PS_USART
 
pUSART
)

2428 ((
pUSART
->
US_RHR
) & 0x1FF);

2429 
	}
}

2435 
__ölöe
 
	$AT91F_US_SídFøme
(

2436 
AT91PS_USART
 
pUSART
,

2437 *
pBuf„r
,

2438 
szBuf„r
,

2439 *
pNextBuf„r
,

2440 
szNextBuf„r
 )

2442  
	`AT91F_PDC_SídFøme
(

2443 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2444 
pBuf„r
,

2445 
szBuf„r
,

2446 
pNextBuf„r
,

2447 
szNextBuf„r
);

2448 
	}
}

2454 
__ölöe
 
	$AT91F_US_Re˚iveFøme
 (

2455 
AT91PS_USART
 
pUSART
,

2456 *
pBuf„r
,

2457 
szBuf„r
,

2458 *
pNextBuf„r
,

2459 
szNextBuf„r
 )

2461  
	`AT91F_PDC_Re˚iveFøme
(

2462 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2463 
pBuf„r
,

2464 
szBuf„r
,

2465 
pNextBuf„r
,

2466 
szNextBuf„r
);

2467 
	}
}

2473 
__ölöe
 
	$AT91F_US_SëIrdaFûãr
 (

2474 
AT91PS_USART
 
pUSART
,

2475 
vÆue


2478 
pUSART
->
US_IF
 = 
vÆue
;

2479 
	}
}

2488 
__ölöe
 
	$AT91F_UDP_E«bÀIt
 (

2489 
AT91PS_UDP
 
pUDP
,

2490 
Êag
)

2493 
pUDP
->
UDP_IER
 = 
Êag
;

2494 
	}
}

2500 
__ölöe
 
	$AT91F_UDP_DißbÀIt
 (

2501 
AT91PS_UDP
 
pUDP
,

2502 
Êag
)

2505 
pUDP
->
UDP_IDR
 = 
Êag
;

2506 
	}
}

2512 
__ölöe
 
	$AT91F_UDP_SëAddªss
 (

2513 
AT91PS_UDP
 
pUDP
,

2514 
addªss
)

2516 
pUDP
->
UDP_FADDR
 = (
AT91C_UDP_FEN
 | 
addªss
);

2517 
	}
}

2523 
__ölöe
 
	$AT91F_UDP_E«bÀEp
 (

2524 
AT91PS_UDP
 
pUDP
,

2525 
Êag
)

2527 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2528 
	}
}

2534 
__ölöe
 
	$AT91F_UDP_DißbÀEp
 (

2535 
AT91PS_UDP
 
pUDP
,

2536 
Êag
)

2538 
pUDP
->
UDP_GLBSTATE
 &~(
Êag
);

2539 
	}
}

2545 
__ölöe
 
	$AT91F_UDP_SëSèã
 (

2546 
AT91PS_UDP
 
pUDP
,

2547 
Êag
)

2549 
pUDP
->
UDP_GLBSTATE
 &~(
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
);

2550 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2551 
	}
}

2557 
__ölöe
 
	$AT91F_UDP_GëSèã
 (

2558 
AT91PS_UDP
 
pUDP
)

2560  (
pUDP
->
UDP_GLBSTATE
 & (
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
));

2561 
	}
}

2567 
__ölöe
 
	$AT91F_UDP_Re£tEp
 (

2568 
AT91PS_UDP
 
pUDP
,

2569 
Êag
)

2571 
pUDP
->
UDP_RSTEP
 = 
Êag
;

2572 
	}
}

2578 
__ölöe
 
	$AT91F_UDP_EpSèŒ
(

2579 
AT91PS_UDP
 
pUDP
,

2580 
ídpoöt
)

2582 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_FORCESTALL
;

2583 
	}
}

2589 
__ölöe
 
	$AT91F_UDP_EpWrôe
(

2590 
AT91PS_UDP
 
pUDP
,

2591 
ídpoöt
,

2592 
vÆue
)

2594 
pUDP
->
UDP_FDR
[
ídpoöt
] = 
vÆue
;

2595 
	}
}

2601 
__ölöe
 
	$AT91F_UDP_EpRód
(

2602 
AT91PS_UDP
 
pUDP
,

2603 
ídpoöt
)

2605  
pUDP
->
UDP_FDR
[
ídpoöt
];

2606 
	}
}

2612 
__ölöe
 
	$AT91F_UDP_EpEndOfWr
(

2613 
AT91PS_UDP
 
pUDP
,

2614 
ídpoöt
)

2616 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_TXPKTRDY
;

2617 
	}
}

2623 
__ölöe
 
	$AT91F_UDP_EpCÀ¨
(

2624 
AT91PS_UDP
 
pUDP
,

2625 
ídpoöt
,

2626 
Êag
)

2628 
pUDP
->
UDP_CSR
[
ídpoöt
] &~(
Êag
);

2629 
	}
}

2635 
__ölöe
 
	$AT91F_UDP_EpSë
(

2636 
AT91PS_UDP
 
pUDP
,

2637 
ídpoöt
,

2638 
Êag
)

2640 
pUDP
->
UDP_CSR
[
ídpoöt
] |
Êag
;

2641 
	}
}

2647 
__ölöe
 
	$AT91F_UDP_EpSètus
(

2648 
AT91PS_UDP
 
pUDP
,

2649 
ídpoöt
)

2651  
pUDP
->
UDP_CSR
[
ídpoöt
];

2652 
	}
}

2658 
__ölöe
 
	$AT91F_UDP_GëI¡îru±MaskSètus
(

2659 
AT91PS_UDP
 
pUdp
)

2661  
pUdp
->
UDP_IMR
;

2662 
	}
}

2668 
__ölöe
 
	$AT91F_UDP_IsI¡îru±Masked
(

2669 
AT91PS_UDP
 
pUdp
,

2670 
Êag
)

2672  (
	`AT91F_UDP_GëI¡îru±MaskSètus
(
pUdp
Ë& 
Êag
);

2673 
	}
}

2678 
	#AT91C_AIC_BRANCH_OPCODE
 (((*) ()) 0xE51FFF20)

2679 

	)

2684 
__ölöe
 
AT91F_AIC_C⁄figuªIt
 (

2685 
AT91PS_AIC
 
pAic
,

2686 
úq_id
,

2687 
¥i‹ôy
,

2688 
§c_ty≥
,

2689 (*
√wH™dÀr
) () )

2691 
ﬁdH™dÀr
;

2692 
mask
 ;

2694 
ﬁdH™dÀr
 = 
pAic
->
AIC_SVR
[
úq_id
];

2696 
mask
 = 0x1 << 
úq_id
 ;

2698 
pAic
->
AIC_IDCR
 = 
mask
 ;

2700 
pAic
->
AIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ;

2702 
pAic
->
AIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ;

2704 
pAic
->
AIC_ICCR
 = 
mask
 ;

2706  
ﬁdH™dÀr
;

2707 
	}
}

2713 
__ölöe
 
	$AT91F_AIC_E«bÀIt
 (

2714 
AT91PS_AIC
 
pAic
,

2715 
úq_id
 )

2718 
pAic
->
AIC_IECR
 = 0x1 << 
úq_id
 ;

2719 
	}
}

2725 
__ölöe
 
	$AT91F_AIC_DißbÀIt
 (

2726 
AT91PS_AIC
 
pAic
,

2727 
úq_id
 )

2729 
mask
 = 0x1 << 
úq_id
;

2731 
pAic
->
AIC_IDCR
 = 
mask
 ;

2733 
pAic
->
AIC_ICCR
 = 
mask
 ;

2734 
	}
}

2740 
__ölöe
 
	$AT91F_AIC_CÀ¨It
 (

2741 
AT91PS_AIC
 
pAic
,

2742 
úq_id
)

2745 
pAic
->
AIC_ICCR
 = (0x1 << 
úq_id
);

2746 
	}
}

2752 
__ölöe
 
	$AT91F_AIC_AcknowÀdgeIt
 (

2753 
AT91PS_AIC
 
pAic
)

2755 
pAic
->
AIC_EOICR
 =ÖAic->AIC_EOICR;

2756 
	}
}

2762 
__ölöe
 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
 (

2763 *
pVe˘‹
,

2764 (*
H™dÀr
) () )

2766 
ﬁdVe˘‹
 = *
pVe˘‹
;

2768 i‡((Ë
H™dÀr
 =(Ë
AT91C_AIC_BRANCH_OPCODE
)

2769 *
pVe˘‹
 = (Ë
AT91C_AIC_BRANCH_OPCODE
;

2771 *
pVe˘‹
 = (((((Ë
H™dÀr
) - (()ÖVector) - 0x8) >> 2) & 0x00FFFFFF) | 0xEA000000;

2773  
ﬁdVe˘‹
;

2774 
	}
}

2780 
__ölöe
 
	$AT91F_AIC_Trig
 (

2781 
AT91PS_AIC
 
pAic
,

2782 
úq_id
)

2784 
pAic
->
AIC_ISCR
 = (0x1 << 
úq_id
) ;

2785 
	}
}

2791 
__ölöe
 
	$AT91F_AIC_IsA˘ive
 (

2792 
AT91PS_AIC
 
pAic
,

2793 
úq_id
)

2795  (
pAic
->
AIC_ISR
 & (0x1 << 
úq_id
));

2796 
	}
}

2802 
__ölöe
 
	$AT91F_AIC_IsPídög
 (

2803 
AT91PS_AIC
 
pAic
,

2804 
úq_id
)

2806  (
pAic
->
AIC_IPR
 & (0x1 << 
úq_id
));

2807 
	}
}

2813 
__ölöe
 
AT91F_AIC_O≥n
(

2814 
AT91PS_AIC
 
pAic
,

2815 (*
IrqH™dÀr
) (),

2816 (*
FiqH™dÀr
) (),

2817 (*
DeÁu…H™dÀr
) (),

2818 (*
SpuriousH™dÀr
) (),

2819 
¥Ÿe˘Mode
)

2821 
	gi
;

2824 
	gi
 = 0; i < 32; ++i) {

2825 
AT91F_AIC_DißbÀIt
(
pAic
, 
i
);

2826 
AT91F_AIC_C⁄figuªIt
(
pAic
, 
i
, 
AT91C_AIC_PRIOR_LOWEST
, 
AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
, 
DeÁu…H™dÀr
);

2830 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x18, 
IrqH™dÀr
);

2832 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x1C, 
FiqH™dÀr
);

2834 
	gpAic
->
	gAIC_SPU
 = (Ë
SpuriousH™dÀr
;

2835 
	gpAic
->
	gAIC_DCR
 = 
¥Ÿe˘Mode
;

2841 
__ölöe
 
	$AT91F_MC_CfgPMC
 ()

2843 
	`AT91F_PMC_E«bÀPîùhClock
(

2844 
AT91C_BASE_PMC
,

2845 ((Ë1 << 
AT91C_ID_SYS
));

2846 
	}
}

2852 
__ölöe
 
	$AT91F_DBGU_CfgPMC
 ()

2854 
	`AT91F_PMC_E«bÀPîùhClock
(

2855 
AT91C_BASE_PMC
,

2856 ((Ë1 << 
AT91C_ID_SYS
));

2857 
	}
}

2863 
__ölöe
 
	$AT91F_DBGU_CfgPIO
 ()

2866 
	`AT91F_PIO_CfgPîùh
(

2867 
AT91C_BASE_PIOA
,

2868 ((Ë
AT91C_PA10_DTXD
 ) |

2869 ((Ë
AT91C_PA9_DRXD
 ),

2871 
	}
}

2877 
__ölöe
 
	$AT91F_PWMC_CH3_CfgPIO
 ()

2880 
	`AT91F_PIO_CfgPîùh
(

2881 
AT91C_BASE_PIOA
,

2883 ((Ë
AT91C_PA14_PWM3
 ) |

2884 ((Ë
AT91C_PA7_PWM3
 ));

2885 
	}
}

2891 
__ölöe
 
	$AT91F_PWMC_CH2_CfgPIO
 ()

2894 
	`AT91F_PIO_CfgPîùh
(

2895 
AT91C_BASE_PIOA
,

2896 ((Ë
AT91C_PA2_PWM2
 ),

2897 ((Ë
AT91C_PA25_PWM2
 ) |

2898 ((Ë
AT91C_PA13_PWM2
 ));

2899 
	}
}

2905 
__ölöe
 
	$AT91F_PWMC_CH1_CfgPIO
 ()

2908 
	`AT91F_PIO_CfgPîùh
(

2909 
AT91C_BASE_PIOA
,

2910 ((Ë
AT91C_PA1_PWM1
 ),

2911 ((Ë
AT91C_PA24_PWM1
 ) |

2912 ((Ë
AT91C_PA12_PWM1
 ));

2913 
	}
}

2919 
__ölöe
 
	$AT91F_PWMC_CH0_CfgPIO
 ()

2922 
	`AT91F_PIO_CfgPîùh
(

2923 
AT91C_BASE_PIOA
,

2924 ((Ë
AT91C_PA0_PWM0
 ),

2925 ((Ë
AT91C_PA23_PWM0
 ) |

2926 ((Ë
AT91C_PA11_PWM0
 ));

2927 
	}
}

2933 
__ölöe
 
	$AT91F_SSC_CfgPMC
 ()

2935 
	`AT91F_PMC_E«bÀPîùhClock
(

2936 
AT91C_BASE_PMC
,

2937 ((Ë1 << 
AT91C_ID_SSC
));

2938 
	}
}

2944 
__ölöe
 
	$AT91F_SSC_CfgPIO
 ()

2947 
	`AT91F_PIO_CfgPîùh
(

2948 
AT91C_BASE_PIOA
,

2949 ((Ë
AT91C_PA17_TD
 ) |

2950 ((Ë
AT91C_PA15_TF
 ) |

2951 ((Ë
AT91C_PA19_RK
 ) |

2952 ((Ë
AT91C_PA18_RD
 ) |

2953 ((Ë
AT91C_PA20_RF
 ) |

2954 ((Ë
AT91C_PA16_TK
 ),

2956 
	}
}

2962 
__ölöe
 
	$AT91F_SPI_CfgPMC
 ()

2964 
	`AT91F_PMC_E«bÀPîùhClock
(

2965 
AT91C_BASE_PMC
,

2966 ((Ë1 << 
AT91C_ID_SPI
));

2967 
	}
}

2973 
__ölöe
 
	$AT91F_SPI_CfgPIO
 ()

2976 
	`AT91F_PIO_CfgPîùh
(

2977 
AT91C_BASE_PIOA
,

2978 ((Ë
AT91C_PA11_NPCS0
 ) |

2979 ((Ë
AT91C_PA13_MOSI
 ) |

2980 ((Ë
AT91C_PA31_NPCS1
 ) |

2981 ((Ë
AT91C_PA12_MISO
 ) |

2982 ((Ë
AT91C_PA14_SPCK
 ),

2983 ((Ë
AT91C_PA9_NPCS1
 ) |

2984 ((Ë
AT91C_PA30_NPCS2
 ) |

2985 ((Ë
AT91C_PA10_NPCS2
 ) |

2986 ((Ë
AT91C_PA22_NPCS3
 ) |

2987 ((Ë
AT91C_PA3_NPCS3
 ) |

2988 ((Ë
AT91C_PA5_NPCS3
 ));

2989 
	}
}

2995 
__ölöe
 
	$AT91F_PWMC_CfgPMC
 ()

2997 
	`AT91F_PMC_E«bÀPîùhClock
(

2998 
AT91C_BASE_PMC
,

2999 ((Ë1 << 
AT91C_ID_PWMC
));

3000 
	}
}

3006 
__ölöe
 
	$AT91F_TC2_CfgPMC
 ()

3008 
	`AT91F_PMC_E«bÀPîùhClock
(

3009 
AT91C_BASE_PMC
,

3010 ((Ë1 << 
AT91C_ID_TC2
));

3011 
	}
}

3017 
__ölöe
 
	$AT91F_TC2_CfgPIO
 ()

3020 
	`AT91F_PIO_CfgPîùh
(

3021 
AT91C_BASE_PIOA
,

3023 ((Ë
AT91C_PA26_TIOA2
 ) |

3024 ((Ë
AT91C_PA27_TIOB2
 ) |

3025 ((Ë
AT91C_PA29_TCLK2
 ));

3026 
	}
}

3032 
__ölöe
 
	$AT91F_TC1_CfgPMC
 ()

3034 
	`AT91F_PMC_E«bÀPîùhClock
(

3035 
AT91C_BASE_PMC
,

3036 ((Ë1 << 
AT91C_ID_TC1
));

3037 
	}
}

3043 
__ölöe
 
	$AT91F_TC1_CfgPIO
 ()

3046 
	`AT91F_PIO_CfgPîùh
(

3047 
AT91C_BASE_PIOA
,

3049 ((Ë
AT91C_PA15_TIOA1
 ) |

3050 ((Ë
AT91C_PA16_TIOB1
 ) |

3051 ((Ë
AT91C_PA28_TCLK1
 ));

3052 
	}
}

3058 
__ölöe
 
	$AT91F_TC0_CfgPMC
 ()

3060 
	`AT91F_PMC_E«bÀPîùhClock
(

3061 
AT91C_BASE_PMC
,

3062 ((Ë1 << 
AT91C_ID_TC0
));

3063 
	}
}

3069 
__ölöe
 
	$AT91F_TC0_CfgPIO
 ()

3072 
	`AT91F_PIO_CfgPîùh
(

3073 
AT91C_BASE_PIOA
,

3075 ((Ë
AT91C_PA0_TIOA0
 ) |

3076 ((Ë
AT91C_PA1_TIOB0
 ) |

3077 ((Ë
AT91C_PA4_TCLK0
 ));

3078 
	}
}

3084 
__ölöe
 
	$AT91F_PMC_CfgPMC
 ()

3086 
	`AT91F_PMC_E«bÀPîùhClock
(

3087 
AT91C_BASE_PMC
,

3088 ((Ë1 << 
AT91C_ID_SYS
));

3089 
	}
}

3095 
__ölöe
 
	$AT91F_PMC_CfgPIO
 ()

3098 
	`AT91F_PIO_CfgPîùh
(

3099 
AT91C_BASE_PIOA
,

3101 ((Ë
AT91C_PA17_PCK1
 ) |

3102 ((Ë
AT91C_PA21_PCK1
 ) |

3103 ((Ë
AT91C_PA31_PCK2
 ) |

3104 ((Ë
AT91C_PA18_PCK2
 ) |

3105 ((Ë
AT91C_PA6_PCK0
 ));

3106 
	}
}

3112 
__ölöe
 
	$AT91F_ADC_CfgPMC
 ()

3114 
	`AT91F_PMC_E«bÀPîùhClock
(

3115 
AT91C_BASE_PMC
,

3116 ((Ë1 << 
AT91C_ID_ADC
));

3117 
	}
}

3123 
__ölöe
 
	$AT91F_ADC_CfgPIO
 ()

3126 
	`AT91F_PIO_CfgPîùh
(

3127 
AT91C_BASE_PIOA
,

3129 ((Ë
AT91C_PA8_ADTRG
 ));

3130 
	}
}

3136 
__ölöe
 
	$AT91F_PIOA_CfgPMC
 ()

3138 
	`AT91F_PMC_E«bÀPîùhClock
(

3139 
AT91C_BASE_PMC
,

3140 ((Ë1 << 
AT91C_ID_PIOA
));

3141 
	}
}

3147 
__ölöe
 
	$AT91F_TWI_CfgPMC
 ()

3149 
	`AT91F_PMC_E«bÀPîùhClock
(

3150 
AT91C_BASE_PMC
,

3151 ((Ë1 << 
AT91C_ID_TWI
));

3152 
	}
}

3158 
__ölöe
 
	$AT91F_TWI_CfgPIO
 ()

3161 
	`AT91F_PIO_CfgPîùh
(

3162 
AT91C_BASE_PIOA
,

3163 ((Ë
AT91C_PA3_TWD
 ) |

3164 ((Ë
AT91C_PA4_TWCK
 ),

3166 
	}
}

3172 
__ölöe
 
	$AT91F_US1_CfgPMC
 ()

3174 
	`AT91F_PMC_E«bÀPîùhClock
(

3175 
AT91C_BASE_PMC
,

3176 ((Ë1 << 
AT91C_ID_US1
));

3177 
	}
}

3183 
__ölöe
 
	$AT91F_US1_CfgPIO
 ()

3186 
	`AT91F_PIO_CfgPîùh
(

3187 
AT91C_BASE_PIOA
,

3188 ((Ë
AT91C_PA21_RXD1
 ) |

3189 ((Ë
AT91C_PA27_DTR1
 ) |

3190 ((Ë
AT91C_PA26_DCD1
 ) |

3191 ((Ë
AT91C_PA22_TXD1
 ) |

3192 ((Ë
AT91C_PA24_RTS1
 ) |

3193 ((Ë
AT91C_PA23_SCK1
 ) |

3194 ((Ë
AT91C_PA28_DSR1
 ) |

3195 ((Ë
AT91C_PA29_RI1
 ) |

3196 ((Ë
AT91C_PA25_CTS1
 ),

3198 
	}
}

3204 
__ölöe
 
	$AT91F_US0_CfgPMC
 ()

3206 
	`AT91F_PMC_E«bÀPîùhClock
(

3207 
AT91C_BASE_PMC
,

3208 ((Ë1 << 
AT91C_ID_US0
));

3209 
	}
}

3215 
__ölöe
 
	$AT91F_US0_CfgPIO
 ()

3218 
	`AT91F_PIO_CfgPîùh
(

3219 
AT91C_BASE_PIOA
,

3220 ((Ë
AT91C_PA5_RXD0
 ) |

3221 ((Ë
AT91C_PA6_TXD0
 ) |

3222 ((Ë
AT91C_PA7_RTS0
 ) |

3223 ((Ë
AT91C_PA8_CTS0
 ),

3224 ((Ë
AT91C_PA2_SCK0
 ));

3225 
	}
}

3231 
__ölöe
 
	$AT91F_UDP_CfgPMC
 ()

3233 
	`AT91F_PMC_E«bÀPîùhClock
(

3234 
AT91C_BASE_PMC
,

3235 ((Ë1 << 
AT91C_ID_UDP
));

3236 
	}
}

3242 
__ölöe
 
	$AT91F_AIC_CfgPMC
 ()

3244 
	`AT91F_PMC_E«bÀPîùhClock
(

3245 
AT91C_BASE_PMC
,

3246 ((Ë1 << 
AT91C_ID_IRQ0
) |

3247 ((Ë1 << 
AT91C_ID_FIQ
) |

3248 ((Ë1 << 
AT91C_ID_IRQ1
));

3249 
	}
}

3255 
__ölöe
 
	$AT91F_AIC_CfgPIO
 ()

3258 
	`AT91F_PIO_CfgPîùh
(

3259 
AT91C_BASE_PIOA
,

3260 ((Ë
AT91C_PA30_IRQ1
 ),

3261 ((Ë
AT91C_PA20_IRQ0
 ) |

3262 ((Ë
AT91C_PA19_FIQ
 ));

3263 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/lib_AT91SAM7X128.h

43 #i‚de‡
lib_AT91SAM7X128_H


44 
	#lib_AT91SAM7X128_H


	)

49 
	#AT91C_AIC_BRANCH_OPCODE
 (((*) ()) 0xE51FFF20)

50 

	)

55 
__ölöe
 
AT91F_AIC_C⁄figuªIt
 (

56 
AT91PS_AIC
 
pAic
,

57 
úq_id
,

58 
¥i‹ôy
,

59 
§c_ty≥
,

60 (*
√wH™dÀr
) () )

62 
ﬁdH™dÀr
;

63 
mask
 ;

65 
ﬁdH™dÀr
 = 
pAic
->
AIC_SVR
[
úq_id
];

67 
mask
 = 0x1 << 
úq_id
 ;

69 
pAic
->
AIC_IDCR
 = 
mask
 ;

71 
pAic
->
AIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ;

73 
pAic
->
AIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ;

75 
pAic
->
AIC_ICCR
 = 
mask
 ;

77  
ﬁdH™dÀr
;

78 
	}
}

84 
__ölöe
 
	$AT91F_AIC_E«bÀIt
 (

85 
AT91PS_AIC
 
pAic
,

86 
úq_id
 )

89 
pAic
->
AIC_IECR
 = 0x1 << 
úq_id
 ;

90 
	}
}

96 
__ölöe
 
	$AT91F_AIC_DißbÀIt
 (

97 
AT91PS_AIC
 
pAic
,

98 
úq_id
 )

100 
mask
 = 0x1 << 
úq_id
;

102 
pAic
->
AIC_IDCR
 = 
mask
 ;

104 
pAic
->
AIC_ICCR
 = 
mask
 ;

105 
	}
}

111 
__ölöe
 
	$AT91F_AIC_CÀ¨It
 (

112 
AT91PS_AIC
 
pAic
,

113 
úq_id
)

116 
pAic
->
AIC_ICCR
 = (0x1 << 
úq_id
);

117 
	}
}

123 
__ölöe
 
	$AT91F_AIC_AcknowÀdgeIt
 (

124 
AT91PS_AIC
 
pAic
)

126 
pAic
->
AIC_EOICR
 =ÖAic->AIC_EOICR;

127 
	}
}

133 
__ölöe
 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
 (

134 *
pVe˘‹
,

135 (*
H™dÀr
) () )

137 
ﬁdVe˘‹
 = *
pVe˘‹
;

139 i‡((Ë
H™dÀr
 =(Ë
AT91C_AIC_BRANCH_OPCODE
)

140 *
pVe˘‹
 = (Ë
AT91C_AIC_BRANCH_OPCODE
;

142 *
pVe˘‹
 = (((((Ë
H™dÀr
) - (()ÖVector) - 0x8) >> 2) & 0x00FFFFFF) | 0xEA000000;

144  
ﬁdVe˘‹
;

145 
	}
}

151 
__ölöe
 
	$AT91F_AIC_Trig
 (

152 
AT91PS_AIC
 
pAic
,

153 
úq_id
)

155 
pAic
->
AIC_ISCR
 = (0x1 << 
úq_id
) ;

156 
	}
}

162 
__ölöe
 
	$AT91F_AIC_IsA˘ive
 (

163 
AT91PS_AIC
 
pAic
,

164 
úq_id
)

166  (
pAic
->
AIC_ISR
 & (0x1 << 
úq_id
));

167 
	}
}

173 
__ölöe
 
	$AT91F_AIC_IsPídög
 (

174 
AT91PS_AIC
 
pAic
,

175 
úq_id
)

177  (
pAic
->
AIC_IPR
 & (0x1 << 
úq_id
));

178 
	}
}

184 
__ölöe
 
AT91F_AIC_O≥n
(

185 
AT91PS_AIC
 
pAic
,

186 (*
IrqH™dÀr
) (),

187 (*
FiqH™dÀr
) (),

188 (*
DeÁu…H™dÀr
) (),

189 (*
SpuriousH™dÀr
) (),

190 
¥Ÿe˘Mode
)

192 
	gi
;

195 
	gi
 = 0; i < 32; ++i) {

196 
AT91F_AIC_DißbÀIt
(
pAic
, 
i
);

197 
AT91F_AIC_C⁄figuªIt
(
pAic
, 
i
, 
AT91C_AIC_PRIOR_LOWEST
, 
AT91C_AIC_SRCTYPE_HIGH_LEVEL
, 
DeÁu…H™dÀr
);

201 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x18, 
IrqH™dÀr
);

203 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x1C, 
FiqH™dÀr
);

205 
	gpAic
->
	gAIC_SPU
 = (Ë
SpuriousH™dÀr
;

206 
	gpAic
->
	gAIC_DCR
 = 
¥Ÿe˘Mode
;

215 
__ölöe
 
	$AT91F_PDC_SëNextRx
 (

216 
AT91PS_PDC
 
pPDC
,

217 *
addªss
,

218 
byãs
)

220 
pPDC
->
PDC_RNPR
 = (Ë
addªss
;

221 
pPDC
->
PDC_RNCR
 = 
byãs
;

222 
	}
}

228 
__ölöe
 
	$AT91F_PDC_SëNextTx
 (

229 
AT91PS_PDC
 
pPDC
,

230 *
addªss
,

231 
byãs
)

233 
pPDC
->
PDC_TNPR
 = (Ë
addªss
;

234 
pPDC
->
PDC_TNCR
 = 
byãs
;

235 
	}
}

241 
__ölöe
 
	$AT91F_PDC_SëRx
 (

242 
AT91PS_PDC
 
pPDC
,

243 *
addªss
,

244 
byãs
)

246 
pPDC
->
PDC_RPR
 = (Ë
addªss
;

247 
pPDC
->
PDC_RCR
 = 
byãs
;

248 
	}
}

254 
__ölöe
 
	$AT91F_PDC_SëTx
 (

255 
AT91PS_PDC
 
pPDC
,

256 *
addªss
,

257 
byãs
)

259 
pPDC
->
PDC_TPR
 = (Ë
addªss
;

260 
pPDC
->
PDC_TCR
 = 
byãs
;

261 
	}
}

267 
__ölöe
 
	$AT91F_PDC_E«bÀTx
 (

268 
AT91PS_PDC
 
pPDC
 )

270 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTEN
;

271 
	}
}

277 
__ölöe
 
	$AT91F_PDC_E«bÀRx
 (

278 
AT91PS_PDC
 
pPDC
 )

280 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTEN
;

281 
	}
}

287 
__ölöe
 
	$AT91F_PDC_DißbÀTx
 (

288 
AT91PS_PDC
 
pPDC
 )

290 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTDIS
;

291 
	}
}

297 
__ölöe
 
	$AT91F_PDC_DißbÀRx
 (

298 
AT91PS_PDC
 
pPDC
 )

300 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTDIS
;

301 
	}
}

307 
__ölöe
 
	$AT91F_PDC_IsTxEm±y
 (

308 
AT91PS_PDC
 
pPDC
 )

310  !(
pPDC
->
PDC_TCR
);

311 
	}
}

317 
__ölöe
 
	$AT91F_PDC_IsNextTxEm±y
 (

318 
AT91PS_PDC
 
pPDC
 )

320  !(
pPDC
->
PDC_TNCR
);

321 
	}
}

327 
__ölöe
 
	$AT91F_PDC_IsRxEm±y
 (

328 
AT91PS_PDC
 
pPDC
 )

330  !(
pPDC
->
PDC_RCR
);

331 
	}
}

337 
__ölöe
 
	$AT91F_PDC_IsNextRxEm±y
 (

338 
AT91PS_PDC
 
pPDC
 )

340  !(
pPDC
->
PDC_RNCR
);

341 
	}
}

347 
__ölöe
 
	$AT91F_PDC_O≥n
 (

348 
AT91PS_PDC
 
pPDC
)

351 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

352 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

355 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

356 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

357 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

358 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

361 
	`AT91F_PDC_E«bÀRx
(
pPDC
);

362 
	`AT91F_PDC_E«bÀTx
(
pPDC
);

363 
	}
}

369 
__ölöe
 
	$AT91F_PDC_Clo£
 (

370 
AT91PS_PDC
 
pPDC
)

373 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

374 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

377 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

378 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

379 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

380 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

382 
	}
}

388 
__ölöe
 
	$AT91F_PDC_SídFøme
(

389 
AT91PS_PDC
 
pPDC
,

390 *
pBuf„r
,

391 
szBuf„r
,

392 *
pNextBuf„r
,

393 
szNextBuf„r
 )

395 i‡(
	`AT91F_PDC_IsTxEm±y
(
pPDC
)) {

397 
	`AT91F_PDC_SëTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

398 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

401 i‡(
	`AT91F_PDC_IsNextTxEm±y
(
pPDC
)) {

403 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

410 
	}
}

416 
__ölöe
 
	$AT91F_PDC_Re˚iveFøme
 (

417 
AT91PS_PDC
 
pPDC
,

418 *
pBuf„r
,

419 
szBuf„r
,

420 *
pNextBuf„r
,

421 
szNextBuf„r
 )

423 i‡(
	`AT91F_PDC_IsRxEm±y
(
pPDC
)) {

425 
	`AT91F_PDC_SëRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

426 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

429 i‡(
	`AT91F_PDC_IsNextRxEm±y
(
pPDC
)) {

431 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

438 
	}
}

446 
__ölöe
 
	$AT91F_DBGU_I¡îru±E«bÀ
(

447 
AT91PS_DBGU
 
pDbgu
,

448 
Êag
)

450 
pDbgu
->
DBGU_IER
 = 
Êag
;

451 
	}
}

457 
__ölöe
 
	$AT91F_DBGU_I¡îru±DißbÀ
(

458 
AT91PS_DBGU
 
pDbgu
,

459 
Êag
)

461 
pDbgu
->
DBGU_IDR
 = 
Êag
;

462 
	}
}

468 
__ölöe
 
	$AT91F_DBGU_GëI¡îru±MaskSètus
(

469 
AT91PS_DBGU
 
pDbgu
)

471  
pDbgu
->
DBGU_IMR
;

472 
	}
}

478 
__ölöe
 
	$AT91F_DBGU_IsI¡îru±Masked
(

479 
AT91PS_DBGU
 
pDbgu
,

480 
Êag
)

482  (
	`AT91F_DBGU_GëI¡îru±MaskSètus
(
pDbgu
Ë& 
Êag
);

483 
	}
}

492 
__ölöe
 
	$AT91F_PIO_CfgPîùh
(

493 
AT91PS_PIO
 
pPio
,

494 
≥rùhAE«bÀ
,

495 
≥rùhBE«bÀ
)

498 
pPio
->
PIO_ASR
 = 
≥rùhAE«bÀ
;

499 
pPio
->
PIO_BSR
 = 
≥rùhBE«bÀ
;

500 
pPio
->
PIO_PDR
 = (
≥rùhAE«bÀ
 | 
≥rùhBE«bÀ
);

501 
	}
}

507 
__ölöe
 
	$AT91F_PIO_CfgOuçut
(

508 
AT91PS_PIO
 
pPio
,

509 
pioE«bÀ
)

511 
pPio
->
PIO_PER
 = 
pioE«bÀ
;

512 
pPio
->
PIO_OER
 = 
pioE«bÀ
;

513 
	}
}

519 
__ölöe
 
	$AT91F_PIO_CfgI≈ut
(

520 
AT91PS_PIO
 
pPio
,

521 
öputE«bÀ
)

524 
pPio
->
PIO_ODR
 = 
öputE«bÀ
;

525 
pPio
->
PIO_PER
 = 
öputE«bÀ
;

526 
	}
}

532 
__ölöe
 
	$AT91F_PIO_CfgO≥ndøö
(

533 
AT91PS_PIO
 
pPio
,

534 
mu…iDrvE«bÀ
)

537 
pPio
->
PIO_MDDR
 = ~
mu…iDrvE«bÀ
;

538 
pPio
->
PIO_MDER
 = 
mu…iDrvE«bÀ
;

539 
	}
}

545 
__ölöe
 
	$AT91F_PIO_CfgPuŒup
(

546 
AT91PS_PIO
 
pPio
,

547 
puŒupE«bÀ
)

550 
pPio
->
PIO_PPUDR
 = ~
puŒupE«bÀ
;

551 
pPio
->
PIO_PPUER
 = 
puŒupE«bÀ
;

552 
	}
}

558 
__ölöe
 
	$AT91F_PIO_CfgDúe˘Drive
(

559 
AT91PS_PIO
 
pPio
,

560 
dúe˘Drive
)

564 
pPio
->
PIO_OWDR
 = ~
dúe˘Drive
;

565 
pPio
->
PIO_OWER
 = 
dúe˘Drive
;

566 
	}
}

572 
__ölöe
 
	$AT91F_PIO_CfgI≈utFûãr
(

573 
AT91PS_PIO
 
pPio
,

574 
öputFûãr
)

578 
pPio
->
PIO_IFDR
 = ~
öputFûãr
;

579 
pPio
->
PIO_IFER
 = 
öputFûãr
;

580 
	}
}

586 
__ölöe
 
	$AT91F_PIO_GëI≈ut
(

587 
AT91PS_PIO
 
pPio
)

589  
pPio
->
PIO_PDSR
;

590 
	}
}

596 
__ölöe
 
	$AT91F_PIO_IsI≈utSë
(

597 
AT91PS_PIO
 
pPio
,

598 
Êag
)

600  (
	`AT91F_PIO_GëI≈ut
(
pPio
Ë& 
Êag
);

601 
	}
}

608 
__ölöe
 
	$AT91F_PIO_SëOuçut
(

609 
AT91PS_PIO
 
pPio
,

610 
Êag
)

612 
pPio
->
PIO_SODR
 = 
Êag
;

613 
	}
}

619 
__ölöe
 
	$AT91F_PIO_CÀ¨Ouçut
(

620 
AT91PS_PIO
 
pPio
,

621 
Êag
)

623 
pPio
->
PIO_CODR
 = 
Êag
;

624 
	}
}

630 
__ölöe
 
	$AT91F_PIO_F‹˚Ouçut
(

631 
AT91PS_PIO
 
pPio
,

632 
Êag
)

634 
pPio
->
PIO_ODSR
 = 
Êag
;

635 
	}
}

641 
__ölöe
 
	$AT91F_PIO_E«bÀ
(

642 
AT91PS_PIO
 
pPio
,

643 
Êag
)

645 
pPio
->
PIO_PER
 = 
Êag
;

646 
	}
}

652 
__ölöe
 
	$AT91F_PIO_DißbÀ
(

653 
AT91PS_PIO
 
pPio
,

654 
Êag
)

656 
pPio
->
PIO_PDR
 = 
Êag
;

657 
	}
}

663 
__ölöe
 
	$AT91F_PIO_GëSètus
(

664 
AT91PS_PIO
 
pPio
)

666  
pPio
->
PIO_PSR
;

667 
	}
}

673 
__ölöe
 
	$AT91F_PIO_IsSë
(

674 
AT91PS_PIO
 
pPio
,

675 
Êag
)

677  (
	`AT91F_PIO_GëSètus
(
pPio
Ë& 
Êag
);

678 
	}
}

684 
__ölöe
 
	$AT91F_PIO_OuçutE«bÀ
(

685 
AT91PS_PIO
 
pPio
,

686 
Êag
)

688 
pPio
->
PIO_OER
 = 
Êag
;

689 
	}
}

695 
__ölöe
 
	$AT91F_PIO_OuçutDißbÀ
(

696 
AT91PS_PIO
 
pPio
,

697 
Êag
)

699 
pPio
->
PIO_ODR
 = 
Êag
;

700 
	}
}

706 
__ölöe
 
	$AT91F_PIO_GëOuçutSètus
(

707 
AT91PS_PIO
 
pPio
)

709  
pPio
->
PIO_OSR
;

710 
	}
}

716 
__ölöe
 
	$AT91F_PIO_IsOuçutSë
(

717 
AT91PS_PIO
 
pPio
,

718 
Êag
)

720  (
	`AT91F_PIO_GëOuçutSètus
(
pPio
Ë& 
Êag
);

721 
	}
}

727 
__ölöe
 
	$AT91F_PIO_I≈utFûãrE«bÀ
(

728 
AT91PS_PIO
 
pPio
,

729 
Êag
)

731 
pPio
->
PIO_IFER
 = 
Êag
;

732 
	}
}

738 
__ölöe
 
	$AT91F_PIO_I≈utFûãrDißbÀ
(

739 
AT91PS_PIO
 
pPio
,

740 
Êag
)

742 
pPio
->
PIO_IFDR
 = 
Êag
;

743 
	}
}

749 
__ölöe
 
	$AT91F_PIO_GëI≈utFûãrSètus
(

750 
AT91PS_PIO
 
pPio
)

752  
pPio
->
PIO_IFSR
;

753 
	}
}

759 
__ölöe
 
	$AT91F_PIO_IsI≈utFûãrSë
(

760 
AT91PS_PIO
 
pPio
,

761 
Êag
)

763  (
	`AT91F_PIO_GëI≈utFûãrSètus
(
pPio
Ë& 
Êag
);

764 
	}
}

770 
__ölöe
 
	$AT91F_PIO_GëOuçutD©aSètus
(

771 
AT91PS_PIO
 
pPio
)

773  
pPio
->
PIO_ODSR
;

774 
	}
}

780 
__ölöe
 
	$AT91F_PIO_I¡îru±E«bÀ
(

781 
AT91PS_PIO
 
pPio
,

782 
Êag
)

784 
pPio
->
PIO_IER
 = 
Êag
;

785 
	}
}

791 
__ölöe
 
	$AT91F_PIO_I¡îru±DißbÀ
(

792 
AT91PS_PIO
 
pPio
,

793 
Êag
)

795 
pPio
->
PIO_IDR
 = 
Êag
;

796 
	}
}

802 
__ölöe
 
	$AT91F_PIO_GëI¡îru±MaskSètus
(

803 
AT91PS_PIO
 
pPio
)

805  
pPio
->
PIO_IMR
;

806 
	}
}

812 
__ölöe
 
	$AT91F_PIO_GëI¡îru±Sètus
(

813 
AT91PS_PIO
 
pPio
)

815  
pPio
->
PIO_ISR
;

816 
	}
}

822 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Masked
(

823 
AT91PS_PIO
 
pPio
,

824 
Êag
)

826  (
	`AT91F_PIO_GëI¡îru±MaskSètus
(
pPio
Ë& 
Êag
);

827 
	}
}

833 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Së
(

834 
AT91PS_PIO
 
pPio
,

835 
Êag
)

837  (
	`AT91F_PIO_GëI¡îru±Sètus
(
pPio
Ë& 
Êag
);

838 
	}
}

844 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîE«bÀ
(

845 
AT91PS_PIO
 
pPio
,

846 
Êag
)

848 
pPio
->
PIO_MDER
 = 
Êag
;

849 
	}
}

855 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîDißbÀ
(

856 
AT91PS_PIO
 
pPio
,

857 
Êag
)

859 
pPio
->
PIO_MDDR
 = 
Êag
;

860 
	}
}

866 
__ölöe
 
	$AT91F_PIO_GëMu…iDrivîSètus
(

867 
AT91PS_PIO
 
pPio
)

869  
pPio
->
PIO_MDSR
;

870 
	}
}

876 
__ölöe
 
	$AT91F_PIO_IsMu…iDrivîSë
(

877 
AT91PS_PIO
 
pPio
,

878 
Êag
)

880  (
	`AT91F_PIO_GëMu…iDrivîSètus
(
pPio
Ë& 
Êag
);

881 
	}
}

887 
__ölöe
 
	$AT91F_PIO_A_Regi°îSñe˘i⁄
(

888 
AT91PS_PIO
 
pPio
,

889 
Êag
)

891 
pPio
->
PIO_ASR
 = 
Êag
;

892 
	}
}

898 
__ölöe
 
	$AT91F_PIO_B_Regi°îSñe˘i⁄
(

899 
AT91PS_PIO
 
pPio
,

900 
Êag
)

902 
pPio
->
PIO_BSR
 = 
Êag
;

903 
	}
}

909 
__ölöe
 
	$AT91F_PIO_Gë_AB_Regi°îSètus
(

910 
AT91PS_PIO
 
pPio
)

912  
pPio
->
PIO_ABSR
;

913 
	}
}

919 
__ölöe
 
	$AT91F_PIO_IsAB_Regi°îSë
(

920 
AT91PS_PIO
 
pPio
,

921 
Êag
)

923  (
	`AT91F_PIO_Gë_AB_Regi°îSètus
(
pPio
Ë& 
Êag
);

924 
	}
}

930 
__ölöe
 
	$AT91F_PIO_OuçutWrôeE«bÀ
(

931 
AT91PS_PIO
 
pPio
,

932 
Êag
)

934 
pPio
->
PIO_OWER
 = 
Êag
;

935 
	}
}

941 
__ölöe
 
	$AT91F_PIO_OuçutWrôeDißbÀ
(

942 
AT91PS_PIO
 
pPio
,

943 
Êag
)

945 
pPio
->
PIO_OWDR
 = 
Êag
;

946 
	}
}

952 
__ölöe
 
	$AT91F_PIO_GëOuçutWrôeSètus
(

953 
AT91PS_PIO
 
pPio
)

955  
pPio
->
PIO_OWSR
;

956 
	}
}

962 
__ölöe
 
	$AT91F_PIO_IsOuçutWrôeSë
(

963 
AT91PS_PIO
 
pPio
,

964 
Êag
)

966  (
	`AT91F_PIO_GëOuçutWrôeSètus
(
pPio
Ë& 
Êag
);

967 
	}
}

973 
__ölöe
 
	$AT91F_PIO_GëCfgPuŒup
(

974 
AT91PS_PIO
 
pPio
)

976  
pPio
->
PIO_PPUSR
;

977 
	}
}

983 
__ölöe
 
	$AT91F_PIO_IsOuçutD©aSètusSë
(

984 
AT91PS_PIO
 
pPio
,

985 
Êag
)

987  (
	`AT91F_PIO_GëOuçutD©aSètus
(
pPio
Ë& 
Êag
);

988 
	}
}

994 
__ölöe
 
	$AT91F_PIO_IsCfgPuŒupSètusSë
(

995 
AT91PS_PIO
 
pPio
,

996 
Êag
)

998  (~
	`AT91F_PIO_GëCfgPuŒup
(
pPio
Ë& 
Êag
);

999 
	}
}

1008 
__ölöe
 
	$AT91F_PMC_CfgSysClkE«bÀReg
 (

1009 
AT91PS_PMC
 
pPMC
,

1010 
mode
)

1013 
pPMC
->
PMC_SCER
 = 
mode
;

1014 
	}
}

1020 
__ölöe
 
	$AT91F_PMC_CfgSysClkDißbÀReg
 (

1021 
AT91PS_PMC
 
pPMC
,

1022 
mode
)

1025 
pPMC
->
PMC_SCDR
 = 
mode
;

1026 
	}
}

1032 
__ölöe
 
	$AT91F_PMC_GëSysClkSètusReg
 (

1033 
AT91PS_PMC
 
pPMC


1036  
pPMC
->
PMC_SCSR
;

1037 
	}
}

1043 
__ölöe
 
	$AT91F_PMC_E«bÀPîùhClock
 (

1044 
AT91PS_PMC
 
pPMC
,

1045 
≥rùhIds
)

1047 
pPMC
->
PMC_PCER
 = 
≥rùhIds
;

1048 
	}
}

1054 
__ölöe
 
	$AT91F_PMC_DißbÀPîùhClock
 (

1055 
AT91PS_PMC
 
pPMC
,

1056 
≥rùhIds
)

1058 
pPMC
->
PMC_PCDR
 = 
≥rùhIds
;

1059 
	}
}

1065 
__ölöe
 
	$AT91F_PMC_GëPîùhClock
 (

1066 
AT91PS_PMC
 
pPMC
)

1068  
pPMC
->
PMC_PCSR
;

1069 
	}
}

1075 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscûœt‹Reg
 (

1076 
AT91PS_CKGR
 
pCKGR
,

1077 
mode
)

1079 
pCKGR
->
CKGR_MOR
 = 
mode
;

1080 
	}
}

1086 
__ölöe
 
	$AT91F_CKGR_GëMaöOscûœt‹Reg
 (

1087 
AT91PS_CKGR
 
pCKGR
)

1089  
pCKGR
->
CKGR_MOR
;

1090 
	}
}

1096 
__ölöe
 
	$AT91F_CKGR_E«bÀMaöOscûœt‹
(

1097 
AT91PS_CKGR
 
pCKGR
)

1099 
pCKGR
->
CKGR_MOR
 |
AT91C_CKGR_MOSCEN
;

1100 
	}
}

1106 
__ölöe
 
	$AT91F_CKGR_DißbÀMaöOscûœt‹
 (

1107 
AT91PS_CKGR
 
pCKGR
)

1109 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_MOSCEN
;

1110 
	}
}

1116 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscSèπUpTime
 (

1117 
AT91PS_CKGR
 
pCKGR
,

1118 
°¨tup_time
,

1119 
¶owClock
)

1121 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_OSCOUNT
;

1122 
pCKGR
->
CKGR_MOR
 |((
¶owClock
 * 
°¨tup_time
)/(8*1000000)) << 8;

1123 
	}
}

1129 
__ölöe
 
	$AT91F_CKGR_GëMaöClockFªqReg
 (

1130 
AT91PS_CKGR
 
pCKGR
)

1132  
pCKGR
->
CKGR_MCFR
;

1133 
	}
}

1139 
__ölöe
 
	$AT91F_CKGR_GëMaöClock
 (

1140 
AT91PS_CKGR
 
pCKGR
,

1141 
¶owClock
)

1143  ((
pCKGR
->
CKGR_MCFR
 & 
AT91C_CKGR_MAINF
Ë* 
¶owClock
) >> 4;

1144 
	}
}

1150 
__ölöe
 
	$AT91F_PMC_CfgMCKReg
 (

1151 
AT91PS_PMC
 
pPMC
,

1152 
mode
)

1154 
pPMC
->
PMC_MCKR
 = 
mode
;

1155 
	}
}

1161 
__ölöe
 
	$AT91F_PMC_GëMCKReg
(

1162 
AT91PS_PMC
 
pPMC
)

1164  
pPMC
->
PMC_MCKR
;

1165 
	}
}

1171 
__ölöe
 
	$AT91F_PMC_GëMa°îClock
 (

1172 
AT91PS_PMC
 
pPMC
,

1173 
AT91PS_CKGR
 
pCKGR
,

1174 
¶owClock
)

1176 
ªg
 = 
pPMC
->
PMC_MCKR
;

1177 
¥esˇÀr
 = (1 << ((
ªg
 & 
AT91C_PMC_PRES
) >> 2));

1178 
∂lDividî
, 
∂lMu…ùlõr
;

1180 
ªg
 & 
AT91C_PMC_CSS
) {

1181 
AT91C_PMC_CSS_SLOW_CLK
:

1182  
¶owClock
 / 
¥esˇÀr
;

1183 
AT91C_PMC_CSS_MAIN_CLK
:

1184  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
¥esˇÀr
;

1185 
AT91C_PMC_CSS_PLL_CLK
:

1186 
ªg
 = 
pCKGR
->
CKGR_PLLR
;

1187 
∂lDividî
 = (
ªg
 & 
AT91C_CKGR_DIV
);

1188 
∂lMu…ùlõr
 = ((
ªg
 & 
AT91C_CKGR_MUL
) >> 16) + 1;

1189  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

1192 
	}
}

1198 
__ölöe
 
	$AT91F_PMC_E«bÀPCK
 (

1199 
AT91PS_PMC
 
pPMC
,

1200 
pck
,

1201 
mode
)

1203 
pPMC
->
PMC_PCKR
[
pck
] = 
mode
;

1204 
pPMC
->
PMC_SCER
 = (1 << 
pck
) << 8;

1205 
	}
}

1211 
__ölöe
 
	$AT91F_PMC_DißbÀPCK
 (

1212 
AT91PS_PMC
 
pPMC
,

1213 
pck
)

1215 
pPMC
->
PMC_SCDR
 = (1 << 
pck
) << 8;

1216 
	}
}

1222 
__ölöe
 
	$AT91F_PMC_E«bÀIt
 (

1223 
AT91PS_PMC
 
pPMC
,

1224 
Êag
)

1227 
pPMC
->
PMC_IER
 = 
Êag
;

1228 
	}
}

1234 
__ölöe
 
	$AT91F_PMC_DißbÀIt
 (

1235 
AT91PS_PMC
 
pPMC
,

1236 
Êag
)

1239 
pPMC
->
PMC_IDR
 = 
Êag
;

1240 
	}
}

1246 
__ölöe
 
	$AT91F_PMC_GëSètus
(

1247 
AT91PS_PMC
 
pPMC
)

1249  
pPMC
->
PMC_SR
;

1250 
	}
}

1256 
__ölöe
 
	$AT91F_PMC_GëI¡îru±MaskSètus
(

1257 
AT91PS_PMC
 
pPMC
)

1259  
pPMC
->
PMC_IMR
;

1260 
	}
}

1266 
__ölöe
 
	$AT91F_PMC_IsI¡îru±Masked
(

1267 
AT91PS_PMC
 
pPMC
,

1268 
Êag
)

1270  (
	`AT91F_PMC_GëI¡îru±MaskSètus
(
pPMC
Ë& 
Êag
);

1271 
	}
}

1277 
__ölöe
 
	$AT91F_PMC_IsSètusSë
(

1278 
AT91PS_PMC
 
pPMC
,

1279 
Êag
)

1281  (
	`AT91F_PMC_GëSètus
(
pPMC
Ë& 
Êag
);

1282 
	}
}

1289 
__ölöe
 
	$AT91F_RSTSo·Re£t
(

1290 
AT91PS_RSTC
 
pRSTC
,

1291 
ª£t
)

1293 
pRSTC
->
RSTC_RCR
 = (0xA5000000 | 
ª£t
);

1294 
	}
}

1300 
__ölöe
 
	$AT91F_RSTSëMode
(

1301 
AT91PS_RSTC
 
pRSTC
,

1302 
mode
)

1304 
pRSTC
->
RSTC_RMR
 = (0xA5000000 | 
mode
);

1305 
	}
}

1311 
__ölöe
 
	$AT91F_RSTGëMode
(

1312 
AT91PS_RSTC
 
pRSTC
)

1314  (
pRSTC
->
RSTC_RMR
);

1315 
	}
}

1321 
__ölöe
 
	$AT91F_RSTGëSètus
(

1322 
AT91PS_RSTC
 
pRSTC
)

1324  (
pRSTC
->
RSTC_RSR
);

1325 
	}
}

1331 
__ölöe
 
	$AT91F_RSTIsSo·R°A˘ive
(

1332 
AT91PS_RSTC
 
pRSTC
)

1334  ((
pRSTC
->
RSTC_RSR
Ë& 
AT91C_RSTC_SRCMP
);

1335 
	}
}

1343 
__ölöe
 
	$AT91F_RTTSëTimeBa£
(

1344 
AT91PS_RTTC
 
pRTTC
,

1345 
ms
)

1347 i‡(
ms
 > 2000)

1349 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1350 
pRTTC
->
RTTC_RTMR
 |(((
ms
 << 15) /1000) & 0xFFFF);

1352 
	}
}

1358 
__ölöe
 
	$AT91F_RTTSëPªsˇÀr
(

1359 
AT91PS_RTTC
 
pRTTC
,

1360 
π¥es
)

1362 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1363 
pRTTC
->
RTTC_RTMR
 |(
π¥es
 & 0xFFFF);

1364  (
pRTTC
->
RTTC_RTMR
);

1365 
	}
}

1371 
__ölöe
 
	$AT91F_RTTRe°¨t
(

1372 
AT91PS_RTTC
 
pRTTC
)

1374 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTRST
;

1375 
	}
}

1382 
__ölöe
 
	$AT91F_RTTSëAœrmINT
(

1383 
AT91PS_RTTC
 
pRTTC
)

1385 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_ALMIEN
;

1386 
	}
}

1392 
__ölöe
 
	$AT91F_RTTCÀ¨AœrmINT
(

1393 
AT91PS_RTTC
 
pRTTC
)

1395 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_ALMIEN
;

1396 
	}
}

1402 
__ölöe
 
	$AT91F_RTTSëRâIncINT
(

1403 
AT91PS_RTTC
 
pRTTC
)

1405 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTINCIEN
;

1406 
	}
}

1412 
__ölöe
 
	$AT91F_RTTCÀ¨RâIncINT
(

1413 
AT91PS_RTTC
 
pRTTC
)

1415 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_RTTINCIEN
;

1416 
	}
}

1422 
__ölöe
 
	$AT91F_RTTSëAœrmVÆue
(

1423 
AT91PS_RTTC
 
pRTTC
, 
Æ¨m
)

1425 
pRTTC
->
RTTC_RTAR
 = 
Æ¨m
;

1426 
	}
}

1432 
__ölöe
 
	$AT91F_RTTGëAœrmVÆue
(

1433 
AT91PS_RTTC
 
pRTTC
)

1435 (
pRTTC
->
RTTC_RTAR
);

1436 
	}
}

1442 
__ölöe
 
	$AT91F_RTTGëSètus
(

1443 
AT91PS_RTTC
 
pRTTC
)

1445 (
pRTTC
->
RTTC_RTSR
);

1446 
	}
}

1452 
__ölöe
 
	$AT91F_RTTRódVÆue
(

1453 
AT91PS_RTTC
 
pRTTC
)

1455 vﬁ©ûê
vÆ1
,
vÆ2
;

1458 
vÆ1
 = 
pRTTC
->
RTTC_RTVR
;

1459 
vÆ2
 = 
pRTTC
->
RTTC_RTVR
;

1461 
vÆ1
 !
vÆ2
);

1462 (
vÆ1
);

1463 
	}
}

1471 
__ölöe
 
	$AT91F_PITInô
(

1472 
AT91PS_PITC
 
pPITC
,

1473 
≥riod
,

1474 
pô_‰equícy
)

1476 
pPITC
->
PITC_PIMR
 = 
≥riod
? (≥riod * 
pô_‰equícy
 + 8) >> 4 : 0;

1477 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITEN
;

1478 
	}
}

1484 
__ölöe
 
	$AT91F_PITSëPIV
(

1485 
AT91PS_PITC
 
pPITC
,

1486 
piv
)

1488 
pPITC
->
PITC_PIMR
 = 
piv
 | (pPITC->PITC_PIMR & (
AT91C_PITC_PITEN
 | 
AT91C_PITC_PITIEN
));

1489 
	}
}

1495 
__ölöe
 
	$AT91F_PITE«bÀI¡
(

1496 
AT91PS_PITC
 
pPITC
)

1498 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITIEN
;

1499 
	}
}

1505 
__ölöe
 
	$AT91F_PITDißbÀI¡
(

1506 
AT91PS_PITC
 
pPITC
)

1508 
pPITC
->
PITC_PIMR
 &~
AT91C_PITC_PITIEN
;

1509 
	}
}

1515 
__ölöe
 
	$AT91F_PITGëMode
(

1516 
AT91PS_PITC
 
pPITC
)

1518 (
pPITC
->
PITC_PIMR
);

1519 
	}
}

1525 
__ölöe
 
	$AT91F_PITGëSètus
(

1526 
AT91PS_PITC
 
pPITC
)

1528 (
pPITC
->
PITC_PISR
);

1529 
	}
}

1535 
__ölöe
 
	$AT91F_PITGëPIIR
(

1536 
AT91PS_PITC
 
pPITC
)

1538 (
pPITC
->
PITC_PIIR
);

1539 
	}
}

1545 
__ölöe
 
	$AT91F_PITGëPIVR
(

1546 
AT91PS_PITC
 
pPITC
)

1548 (
pPITC
->
PITC_PIVR
);

1549 
	}
}

1557 
__ölöe
 
	$AT91F_WDTSëMode
(

1558 
AT91PS_WDTC
 
pWDTC
,

1559 
Mode
)

1561 
pWDTC
->
WDTC_WDMR
 = 
Mode
;

1562 
	}
}

1568 
__ölöe
 
	$AT91F_WDTRe°¨t
(

1569 
AT91PS_WDTC
 
pWDTC
)

1571 
pWDTC
->
WDTC_WDCR
 = 0xA5000001;

1572 
	}
}

1578 
__ölöe
 
	$AT91F_WDTSGëètus
(

1579 
AT91PS_WDTC
 
pWDTC
)

1581 (
pWDTC
->
WDTC_WDSR
 & 0x3);

1582 
	}
}

1588 
__ölöe
 
	$AT91F_WDTGëPîiod
(
ms
)

1590 i‡((
ms
 < 4) || (ms > 16000))

1592 ((
ms
 << 8) / 1000);

1593 
	}
}

1601 
__ölöe
 
	$AT91F_VREG_E«bÀ_LowPowîMode
(

1602 
AT91PS_VREG
 
pVREG
)

1604 
pVREG
->
VREG_MR
 |
AT91C_VREG_PSTDBY
;

1605 
	}
}

1611 
__ölöe
 
	$AT91F_VREG_DißbÀ_LowPowîMode
(

1612 
AT91PS_VREG
 
pVREG
)

1614 
pVREG
->
VREG_MR
 &~
AT91C_VREG_PSTDBY
;

1615 
	}
}

1619 
	#AT91C_MC_CORRECT_KEY
 (() 0x5A << 24)

1620 

	)

1625 
__ölöe
 
	$AT91F_MC_Rem≠
 ()

1627 
AT91PS_MC
 
pMC
 = (AT91PS_MCË
AT91C_BASE_MC
;

1629 
pMC
->
MC_RCR
 = 
AT91C_MC_RCB
;

1630 
	}
}

1636 
__ölöe
 
	$AT91F_MC_EFC_CfgModeReg
 (

1637 
AT91PS_MC
 
pMC
,

1638 
mode
)

1641 
pMC
->
MC_FMR
 = 
mode
;

1642 
	}
}

1648 
__ölöe
 
	$AT91F_MC_EFC_GëModeReg
(

1649 
AT91PS_MC
 
pMC
)

1651  
pMC
->
MC_FMR
;

1652 
	}
}

1658 
__ölöe
 
	$AT91F_MC_EFC_CompuãFMCN
(

1659 
ma°î_˛ock
)

1661  (
ma°î_˛ock
/1000000 +2);

1662 
	}
}

1668 
__ölöe
 
	$AT91F_MC_EFC_Pîf‹mCmd
 (

1669 
AT91PS_MC
 
pMC
,

1670 
å™s„r_cmd
)

1672 
pMC
->
MC_FCR
 = 
å™s„r_cmd
;

1673 
	}
}

1679 
__ölöe
 
	$AT91F_MC_EFC_GëSètus
(

1680 
AT91PS_MC
 
pMC
)

1682  
pMC
->
MC_FSR
;

1683 
	}
}

1689 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Masked
(

1690 
AT91PS_MC
 
pMC
,

1691 
Êag
)

1693  (
	`AT91F_MC_EFC_GëModeReg
(
pMC
Ë& 
Êag
);

1694 
	}
}

1700 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Së
(

1701 
AT91PS_MC
 
pMC
,

1702 
Êag
)

1704  (
	`AT91F_MC_EFC_GëSètus
(
pMC
Ë& 
Êag
);

1705 
	}
}

1714 
__ölöe
 
	$AT91F_SPI_O≥n
 (

1715 c⁄° 
nuŒ
)

1719 
	}
}

1725 
__ölöe
 
	$AT91F_SPI_CfgCs
 (

1726 
AT91PS_SPI
 
pSPI
,

1727 
cs
,

1728 
vÆ
)

1731 *(
pSPI
->
SPI_CSR
 + 
cs
Ë
vÆ
;

1732 
	}
}

1738 
__ölöe
 
	$AT91F_SPI_E«bÀIt
 (

1739 
AT91PS_SPI
 
pSPI
,

1740 
Êag
)

1743 
pSPI
->
SPI_IER
 = 
Êag
;

1744 
	}
}

1750 
__ölöe
 
	$AT91F_SPI_DißbÀIt
 (

1751 
AT91PS_SPI
 
pSPI
,

1752 
Êag
)

1755 
pSPI
->
SPI_IDR
 = 
Êag
;

1756 
	}
}

1762 
__ölöe
 
	$AT91F_SPI_Re£t
 (

1763 
AT91PS_SPI
 
pSPI


1767 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SWRST
;

1768 
	}
}

1774 
__ölöe
 
	$AT91F_SPI_E«bÀ
 (

1775 
AT91PS_SPI
 
pSPI


1779 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIEN
;

1780 
	}
}

1786 
__ölöe
 
	$AT91F_SPI_DißbÀ
 (

1787 
AT91PS_SPI
 
pSPI


1791 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1792 
	}
}

1798 
__ölöe
 
	$AT91F_SPI_CfgMode
 (

1799 
AT91PS_SPI
 
pSPI
,

1800 
mode
)

1803 
pSPI
->
SPI_MR
 = 
mode
;

1804 
	}
}

1810 
__ölöe
 
	$AT91F_SPI_CfgPCS
 (

1811 
AT91PS_SPI
 
pSPI
,

1812 
PCS_Devi˚
)

1815 
pSPI
->
SPI_MR
 &= 0xFFF0FFFF;

1816 
pSPI
->
SPI_MR
 |–(
PCS_Devi˚
<<16Ë& 
AT91C_SPI_PCS
 );

1817 
	}
}

1823 
__ölöe
 
	$AT91F_SPI_Re˚iveFøme
 (

1824 
AT91PS_SPI
 
pSPI
,

1825 *
pBuf„r
,

1826 
szBuf„r
,

1827 *
pNextBuf„r
,

1828 
szNextBuf„r
 )

1830  
	`AT91F_PDC_Re˚iveFøme
(

1831 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1832 
pBuf„r
,

1833 
szBuf„r
,

1834 
pNextBuf„r
,

1835 
szNextBuf„r
);

1836 
	}
}

1842 
__ölöe
 
	$AT91F_SPI_SídFøme
(

1843 
AT91PS_SPI
 
pSPI
,

1844 *
pBuf„r
,

1845 
szBuf„r
,

1846 *
pNextBuf„r
,

1847 
szNextBuf„r
 )

1849  
	`AT91F_PDC_SídFøme
(

1850 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1851 
pBuf„r
,

1852 
szBuf„r
,

1853 
pNextBuf„r
,

1854 
szNextBuf„r
);

1855 
	}
}

1861 
__ölöe
 
	$AT91F_SPI_Clo£
 (

1862 
AT91PS_SPI
 
pSPI
)

1865 
pSPI
->
SPI_CSR
[0] = 0 ;

1866 
pSPI
->
SPI_CSR
[1] = 0 ;

1867 
pSPI
->
SPI_CSR
[2] = 0 ;

1868 
pSPI
->
SPI_CSR
[3] = 0 ;

1871 
pSPI
->
SPI_MR
 = 0 ;

1874 
pSPI
->
SPI_IDR
 = 0xFFFFFFFF ;

1877 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
));

1880 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1881 
	}
}

1887 
__ölöe
 
	$AT91F_SPI_PutCh¨
 (

1888 
AT91PS_SPI
 
pSPI
,

1889 
ch¨a˘î
,

1890 
cs_numbî
 )

1892 
vÆue_f‹_cs
;

1893 
vÆue_f‹_cs
 = (~(1 << 
cs_numbî
)) & 0xF;

1894 
pSPI
->
SPI_TDR
 = (
ch¨a˘î
 & 0xFFFFË| (
vÆue_f‹_cs
 << 16);

1895 
	}
}

1901 
__ölöe
 
	$AT91F_SPI_GëCh¨
 (

1902 c⁄° 
AT91PS_SPI
 
pSPI
)

1904 ((
pSPI
->
SPI_RDR
) & 0xFFFF);

1905 
	}
}

1911 
__ölöe
 
	$AT91F_SPI_GëI¡îru±MaskSètus
(

1912 
AT91PS_SPI
 
pSpi
)

1914  
pSpi
->
SPI_IMR
;

1915 
	}
}

1921 
__ölöe
 
	$AT91F_SPI_IsI¡îru±Masked
(

1922 
AT91PS_SPI
 
pSpi
,

1923 
Êag
)

1925  (
	`AT91F_SPI_GëI¡îru±MaskSètus
(
pSpi
Ë& 
Êag
);

1926 
	}
}

1935 
	#AT91C_US_ASYNC_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

1936 
AT91C_US_NBSTOP_1_BIT
 + \

1937 
AT91C_US_PAR_NONE
 + \

1938 
AT91C_US_CHRL_8_BITS
 + \

1939 
AT91C_US_CLKS_CLOCK
 )

	)

1942 
	#AT91C_US_ASYNC_SCK_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

1943 
AT91C_US_NBSTOP_1_BIT
 + \

1944 
AT91C_US_PAR_NONE
 + \

1945 
AT91C_US_CHRL_8_BITS
 + \

1946 
AT91C_US_CLKS_EXT
 )

	)

1949 
	#AT91C_US_SYNC_MODE
 ( 
AT91C_US_SYNC
 + \

1950 
AT91C_US_USMODE_NORMAL
 + \

1951 
AT91C_US_NBSTOP_1_BIT
 + \

1952 
AT91C_US_PAR_NONE
 + \

1953 
AT91C_US_CHRL_8_BITS
 + \

1954 
AT91C_US_CLKS_CLOCK
 )

	)

1957 
	#AT91C_US_SCK_USED
 (
AT91C_US_CKLO
 | 
AT91C_US_CLKS_EXT
)

	)

1960 
	#AT91C_US_ISO_READER_MODE
 ( 
AT91C_US_USMODE_ISO7816_0
 + \

1961 
AT91C_US_CLKS_CLOCK
 +\

1962 
AT91C_US_NBSTOP_1_BIT
 + \

1963 
AT91C_US_PAR_EVEN
 + \

1964 
AT91C_US_CHRL_8_BITS
 + \

1965 
AT91C_US_CKLO
 +\

1966 
AT91C_US_OVER
)

	)

1969 
	#AT91C_US_ASYNC_IRDA_MODE
 ( 
AT91C_US_USMODE_IRDA
 + \

1970 
AT91C_US_NBSTOP_1_BIT
 + \

1971 
AT91C_US_PAR_NONE
 + \

1972 
AT91C_US_CHRL_8_BITS
 + \

1973 
AT91C_US_CLKS_CLOCK
 )

	)

1979 
__ölöe
 
	$AT91F_US_Baudøã
 (

1980 c⁄° 
maö_˛ock
,

1981 c⁄° 
baud_øã
)

1983 
baud_vÆue
 = ((
maö_˛ock
*10)/(
baud_øã
 * 16));

1984 i‡((
baud_vÆue
 % 10) >= 5)

1985 
baud_vÆue
 = (baud_value / 10) + 1;

1987 
baud_vÆue
 /= 10;

1988  
baud_vÆue
;

1989 
	}
}

1995 
__ölöe
 
	$AT91F_US_SëBaudøã
 (

1996 
AT91PS_USART
 
pUSART
,

1997 
maöClock
,

1998 
•ìd
)

2001 
pUSART
->
US_BRGR
 = 
	`AT91F_US_Baudøã
(
maöClock
, 
•ìd
);

2002 
	}
}

2008 
__ölöe
 
	$AT91F_US_SëTimegu¨d
 (

2009 
AT91PS_USART
 
pUSART
,

2010 
timegu¨d
)

2013 
pUSART
->
US_TTGR
 = 
timegu¨d
 ;

2014 
	}
}

2020 
__ölöe
 
	$AT91F_US_E«bÀIt
 (

2021 
AT91PS_USART
 
pUSART
,

2022 
Êag
)

2025 
pUSART
->
US_IER
 = 
Êag
;

2026 
	}
}

2032 
__ölöe
 
	$AT91F_US_DißbÀIt
 (

2033 
AT91PS_USART
 
pUSART
,

2034 
Êag
)

2037 
pUSART
->
US_IDR
 = 
Êag
;

2038 
	}
}

2044 
__ölöe
 
	$AT91F_US_C⁄figuª
 (

2045 
AT91PS_USART
 
pUSART
,

2046 
maöClock
,

2047 
mode
 ,

2048 
baudR©e
 ,

2049 
timegu¨d
 )

2052 
pUSART
->
US_IDR
 = () -1;

2055 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RXDIS
 | 
AT91C_US_TXDIS
 ;

2058 
	`AT91F_US_SëBaudøã
(
pUSART
, 
maöClock
, 
baudR©e
);

2061 
	`AT91F_US_SëTimegu¨d
(
pUSART
, 
timegu¨d
);

2064 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2067 
pUSART
->
US_MR
 = 
mode
 ;

2069 
	}
}

2075 
__ölöe
 
	$AT91F_US_E«bÀRx
 (

2076 
AT91PS_USART
 
pUSART
)

2079 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2080 
	}
}

2086 
__ölöe
 
	$AT91F_US_E«bÀTx
 (

2087 
AT91PS_USART
 
pUSART
)

2090 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2091 
	}
}

2097 
__ölöe
 
	$AT91F_US_Re£tRx
 (

2098 
AT91PS_USART
 
pUSART
)

2101 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
;

2103 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2104 
	}
}

2110 
__ölöe
 
	$AT91F_US_Re£tTx
 (

2111 
AT91PS_USART
 
pUSART
)

2114 
pUSART
->
US_CR
 = 
AT91C_US_RSTTX
;

2116 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2117 
	}
}

2123 
__ölöe
 
	$AT91F_US_DißbÀRx
 (

2124 
AT91PS_USART
 
pUSART
)

2127 
pUSART
->
US_CR
 = 
AT91C_US_RXDIS
;

2128 
	}
}

2134 
__ölöe
 
	$AT91F_US_DißbÀTx
 (

2135 
AT91PS_USART
 
pUSART
)

2138 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
;

2139 
	}
}

2145 
__ölöe
 
	$AT91F_US_Clo£
 (

2146 
AT91PS_USART
 
pUSART
)

2149 
pUSART
->
US_BRGR
 = 0 ;

2152 
pUSART
->
US_MR
 = 0 ;

2155 
pUSART
->
US_TTGR
 = 0;

2158 
pUSART
->
US_IDR
 = 0xFFFFFFFF ;

2161 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2164 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
 | 
AT91C_US_RXDIS
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RSTRX
 ;

2165 
	}
}

2171 
__ölöe
 
	$AT91F_US_TxRódy
 (

2172 
AT91PS_USART
 
pUSART
 )

2174  (
pUSART
->
US_CSR
 & 
AT91C_US_TXRDY
);

2175 
	}
}

2181 
__ölöe
 
	$AT91F_US_RxRódy
 (

2182 
AT91PS_USART
 
pUSART
 )

2184  (
pUSART
->
US_CSR
 & 
AT91C_US_RXRDY
);

2185 
	}
}

2191 
__ölöe
 
	$AT91F_US_Eº‹
 (

2192 
AT91PS_USART
 
pUSART
 )

2194  (
pUSART
->
US_CSR
 &

2195 (
AT91C_US_OVRE
 |

2196 
AT91C_US_FRAME
 |

2197 
AT91C_US_PARE
));

2198 
	}
}

2204 
__ölöe
 
	$AT91F_US_PutCh¨
 (

2205 
AT91PS_USART
 
pUSART
,

2206 
ch¨a˘î
 )

2208 
pUSART
->
US_THR
 = (
ch¨a˘î
 & 0x1FF);

2209 
	}
}

2215 
__ölöe
 
	$AT91F_US_GëCh¨
 (

2216 c⁄° 
AT91PS_USART
 
pUSART
)

2218 ((
pUSART
->
US_RHR
) & 0x1FF);

2219 
	}
}

2225 
__ölöe
 
	$AT91F_US_SídFøme
(

2226 
AT91PS_USART
 
pUSART
,

2227 *
pBuf„r
,

2228 
szBuf„r
,

2229 *
pNextBuf„r
,

2230 
szNextBuf„r
 )

2232  
	`AT91F_PDC_SídFøme
(

2233 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2234 
pBuf„r
,

2235 
szBuf„r
,

2236 
pNextBuf„r
,

2237 
szNextBuf„r
);

2238 
	}
}

2244 
__ölöe
 
	$AT91F_US_Re˚iveFøme
 (

2245 
AT91PS_USART
 
pUSART
,

2246 *
pBuf„r
,

2247 
szBuf„r
,

2248 *
pNextBuf„r
,

2249 
szNextBuf„r
 )

2251  
	`AT91F_PDC_Re˚iveFøme
(

2252 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2253 
pBuf„r
,

2254 
szBuf„r
,

2255 
pNextBuf„r
,

2256 
szNextBuf„r
);

2257 
	}
}

2263 
__ölöe
 
	$AT91F_US_SëIrdaFûãr
 (

2264 
AT91PS_USART
 
pUSART
,

2265 
vÆue


2268 
pUSART
->
US_IF
 = 
vÆue
;

2269 
	}
}

2279 
	#AT91C_I2S_ASY_MASTER_TX_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)( +\

2280 
AT91C_SSC_CKS_DIV
 +\

2281 
AT91C_SSC_CKO_CONTINOUS
 +\

2282 
AT91C_SSC_CKG_NONE
 +\

2283 
AT91C_SSC_START_FALL_RF
 +\

2284 
AT91C_SSC_STTOUT
 +\

2285 ((1<<16Ë& 
AT91C_SSC_STTDLY
) +\

2286 ((((
nb_bô_by_¶Ÿ
*
nb_¶Ÿ_by_‰ame
)/2)-1Ë<<24))

	)

2292 
	#AT91C_I2S_ASY_TX_FRAME_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)( +\

2293 (
nb_bô_by_¶Ÿ
-1) +\

2294 
AT91C_SSC_MSBF
 +\

2295 (((
nb_¶Ÿ_by_‰ame
-1)<<8Ë& 
AT91C_SSC_DATNB
) +\

2296 (((
nb_bô_by_¶Ÿ
-1)<<16Ë& 
AT91C_SSC_FSLEN
) +\

2297 
AT91C_SSC_FSOS_NEGATIVE
)

	)

2304 
__ölöe
 
	$AT91F_SSC_SëBaudøã
 (

2305 
AT91PS_SSC
 
pSSC
,

2306 
maöClock
,

2307 
•ìd
)

2309 
baud_vÆue
;

2311 i‡(
•ìd
 == 0)

2312 
baud_vÆue
 = 0;

2315 
baud_vÆue
 = (Ë(
maöClock
 * 10)/(2*
•ìd
);

2316 i‡((
baud_vÆue
 % 10) >= 5)

2317 
baud_vÆue
 = (baud_value / 10) + 1;

2319 
baud_vÆue
 /= 10;

2322 
pSSC
->
SSC_CMR
 = 
baud_vÆue
;

2323 
	}
}

2329 
__ölöe
 
	$AT91F_SSC_C⁄figuª
 (

2330 
AT91PS_SSC
 
pSSC
,

2331 
sy°_˛ock
,

2332 
baud_øã
,

2333 
˛ock_rx
,

2334 
mode_rx
,

2335 
˛ock_tx
,

2336 
mode_tx
)

2339 
pSSC
->
SSC_IDR
 = () -1;

2342 
pSSC
->
SSC_CR
 = 
AT91C_SSC_SWRST
 | 
AT91C_SSC_RXDIS
 | 
AT91C_SSC_TXDIS
 ;

2345 
	`AT91F_SSC_SëBaudøã
(
pSSC
, 
sy°_˛ock
, 
baud_øã
);

2348 
pSSC
->
SSC_RCMR
 = 
˛ock_rx
;

2351 
pSSC
->
SSC_TCMR
 = 
˛ock_tx
;

2354 
pSSC
->
SSC_RFMR
 = 
mode_rx
;

2357 
pSSC
->
SSC_TFMR
 = 
mode_tx
;

2360 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
));

2363 
	}
}

2369 
__ölöe
 
	$AT91F_SSC_E«bÀRx
 (

2370 
AT91PS_SSC
 
pSSC
)

2373 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXEN
;

2374 
	}
}

2380 
__ölöe
 
	$AT91F_SSC_DißbÀRx
 (

2381 
AT91PS_SSC
 
pSSC
)

2384 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXDIS
;

2385 
	}
}

2391 
__ölöe
 
	$AT91F_SSC_E«bÀTx
 (

2392 
AT91PS_SSC
 
pSSC
)

2395 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXEN
;

2396 
	}
}

2402 
__ölöe
 
	$AT91F_SSC_DißbÀTx
 (

2403 
AT91PS_SSC
 
pSSC
)

2406 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXDIS
;

2407 
	}
}

2413 
__ölöe
 
	$AT91F_SSC_E«bÀIt
 (

2414 
AT91PS_SSC
 
pSSC
,

2415 
Êag
)

2418 
pSSC
->
SSC_IER
 = 
Êag
;

2419 
	}
}

2425 
__ölöe
 
	$AT91F_SSC_DißbÀIt
 (

2426 
AT91PS_SSC
 
pSSC
,

2427 
Êag
)

2430 
pSSC
->
SSC_IDR
 = 
Êag
;

2431 
	}
}

2437 
__ölöe
 
	$AT91F_SSC_Re˚iveFøme
 (

2438 
AT91PS_SSC
 
pSSC
,

2439 *
pBuf„r
,

2440 
szBuf„r
,

2441 *
pNextBuf„r
,

2442 
szNextBuf„r
 )

2444  
	`AT91F_PDC_Re˚iveFøme
(

2445 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2446 
pBuf„r
,

2447 
szBuf„r
,

2448 
pNextBuf„r
,

2449 
szNextBuf„r
);

2450 
	}
}

2456 
__ölöe
 
	$AT91F_SSC_SídFøme
(

2457 
AT91PS_SSC
 
pSSC
,

2458 *
pBuf„r
,

2459 
szBuf„r
,

2460 *
pNextBuf„r
,

2461 
szNextBuf„r
 )

2463  
	`AT91F_PDC_SídFøme
(

2464 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2465 
pBuf„r
,

2466 
szBuf„r
,

2467 
pNextBuf„r
,

2468 
szNextBuf„r
);

2469 
	}
}

2475 
__ölöe
 
	$AT91F_SSC_GëI¡îru±MaskSètus
(

2476 
AT91PS_SSC
 
pSsc
)

2478  
pSsc
->
SSC_IMR
;

2479 
	}
}

2485 
__ölöe
 
	$AT91F_SSC_IsI¡îru±Masked
(

2486 
AT91PS_SSC
 
pSsc
,

2487 
Êag
)

2489  (
	`AT91F_SSC_GëI¡îru±MaskSètus
(
pSsc
Ë& 
Êag
);

2490 
	}
}

2499 
__ölöe
 
	$AT91F_TWI_E«bÀIt
 (

2500 
AT91PS_TWI
 
pTWI
,

2501 
Êag
)

2504 
pTWI
->
TWI_IER
 = 
Êag
;

2505 
	}
}

2511 
__ölöe
 
	$AT91F_TWI_DißbÀIt
 (

2512 
AT91PS_TWI
 
pTWI
,

2513 
Êag
)

2516 
pTWI
->
TWI_IDR
 = 
Êag
;

2517 
	}
}

2523 
__ölöe
 
	$AT91F_TWI_C⁄figuª
 ( 
AT91PS_TWI
 
pTWI
 )

2526 
pTWI
->
TWI_IDR
 = () -1;

2529 
pTWI
->
TWI_CR
 = 
AT91C_TWI_SWRST
;

2532 
pTWI
->
TWI_CR
 = 
AT91C_TWI_MSEN
;

2534 
	}
}

2540 
__ölöe
 
	$AT91F_TWI_GëI¡îru±MaskSètus
(

2541 
AT91PS_TWI
 
pTwi
)

2543  
pTwi
->
TWI_IMR
;

2544 
	}
}

2550 
__ölöe
 
	$AT91F_TWI_IsI¡îru±Masked
(

2551 
AT91PS_TWI
 
pTwi
,

2552 
Êag
)

2554  (
	`AT91F_TWI_GëI¡îru±MaskSètus
(
pTwi
Ë& 
Êag
);

2555 
	}
}

2564 
__ölöe
 
	$AT91F_PWMC_GëSètus
(

2565 
AT91PS_PWMC
 
pPWM
)

2567  
pPWM
->
PWMC_SR
;

2568 
	}
}

2574 
__ölöe
 
	$AT91F_PWMC_I¡îru±E«bÀ
(

2575 
AT91PS_PWMC
 
pPwm
,

2576 
Êag
)

2578 
pPwm
->
PWMC_IER
 = 
Êag
;

2579 
	}
}

2585 
__ölöe
 
	$AT91F_PWMC_I¡îru±DißbÀ
(

2586 
AT91PS_PWMC
 
pPwm
,

2587 
Êag
)

2589 
pPwm
->
PWMC_IDR
 = 
Êag
;

2590 
	}
}

2596 
__ölöe
 
	$AT91F_PWMC_GëI¡îru±MaskSètus
(

2597 
AT91PS_PWMC
 
pPwm
)

2599  
pPwm
->
PWMC_IMR
;

2600 
	}
}

2606 
__ölöe
 
	$AT91F_PWMC_IsI¡îru±Masked
(

2607 
AT91PS_PWMC
 
pPWM
,

2608 
Êag
)

2610  (
	`AT91F_PWMC_GëI¡îru±MaskSètus
(
pPWM
Ë& 
Êag
);

2611 
	}
}

2617 
__ölöe
 
	$AT91F_PWMC_IsSètusSë
(

2618 
AT91PS_PWMC
 
pPWM
,

2619 
Êag
)

2621  (
	`AT91F_PWMC_GëSètus
(
pPWM
Ë& 
Êag
);

2622 
	}
}

2628 
__ölöe
 
	$AT91F_PWMC_CfgCh™√l
(

2629 
AT91PS_PWMC
 
pPWM
,

2630 
ch™√lId
,

2631 
mode
,

2632 
≥riod
,

2633 
duty
)

2635 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CMR
 = 
mode
;

2636 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CDTYR
 = 
duty
;

2637 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CPRDR
 = 
≥riod
;

2638 
	}
}

2644 
__ölöe
 
	$AT91F_PWMC_SèπCh™√l
(

2645 
AT91PS_PWMC
 
pPWM
,

2646 
Êag
)

2648 
pPWM
->
PWMC_ENA
 = 
Êag
;

2649 
	}
}

2655 
__ölöe
 
	$AT91F_PWMC_St›Ch™√l
(

2656 
AT91PS_PWMC
 
pPWM
,

2657 
Êag
)

2659 
pPWM
->
PWMC_DIS
 = 
Êag
;

2660 
	}
}

2666 
__ölöe
 
	$AT91F_PWMC_Upd©eCh™√l
(

2667 
AT91PS_PWMC
 
pPWM
,

2668 
ch™√lId
,

2669 
upd©e
)

2671 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CUPDR
 = 
upd©e
;

2672 
	}
}

2681 
__ölöe
 
	$AT91F_UDP_E«bÀIt
 (

2682 
AT91PS_UDP
 
pUDP
,

2683 
Êag
)

2686 
pUDP
->
UDP_IER
 = 
Êag
;

2687 
	}
}

2693 
__ölöe
 
	$AT91F_UDP_DißbÀIt
 (

2694 
AT91PS_UDP
 
pUDP
,

2695 
Êag
)

2698 
pUDP
->
UDP_IDR
 = 
Êag
;

2699 
	}
}

2705 
__ölöe
 
	$AT91F_UDP_SëAddªss
 (

2706 
AT91PS_UDP
 
pUDP
,

2707 
addªss
)

2709 
pUDP
->
UDP_FADDR
 = (
AT91C_UDP_FEN
 | 
addªss
);

2710 
	}
}

2716 
__ölöe
 
	$AT91F_UDP_E«bÀEp
 (

2717 
AT91PS_UDP
 
pUDP
,

2718 
ídpoöt
)

2720 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_EPEDS
;

2721 
	}
}

2727 
__ölöe
 
	$AT91F_UDP_DißbÀEp
 (

2728 
AT91PS_UDP
 
pUDP
,

2729 
ídpoöt
)

2731 
pUDP
->
UDP_CSR
[
ídpoöt
] &~
AT91C_UDP_EPEDS
;

2732 
	}
}

2738 
__ölöe
 
	$AT91F_UDP_SëSèã
 (

2739 
AT91PS_UDP
 
pUDP
,

2740 
Êag
)

2742 
pUDP
->
UDP_GLBSTATE
 &~(
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
);

2743 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2744 
	}
}

2750 
__ölöe
 
	$AT91F_UDP_GëSèã
 (

2751 
AT91PS_UDP
 
pUDP
)

2753  (
pUDP
->
UDP_GLBSTATE
 & (
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
));

2754 
	}
}

2760 
__ölöe
 
	$AT91F_UDP_Re£tEp
 (

2761 
AT91PS_UDP
 
pUDP
,

2762 
Êag
)

2764 
pUDP
->
UDP_RSTEP
 = 
Êag
;

2765 
pUDP
->
UDP_RSTEP
 = 0;

2766 
	}
}

2772 
__ölöe
 
	$AT91F_UDP_EpSèŒ
(

2773 
AT91PS_UDP
 
pUDP
,

2774 
ídpoöt
)

2776 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_FORCESTALL
;

2777 
	}
}

2783 
__ölöe
 
	$AT91F_UDP_EpWrôe
(

2784 
AT91PS_UDP
 
pUDP
,

2785 
ídpoöt
,

2786 
vÆue
)

2788 
pUDP
->
UDP_FDR
[
ídpoöt
] = 
vÆue
;

2789 
	}
}

2795 
__ölöe
 
	$AT91F_UDP_EpRód
(

2796 
AT91PS_UDP
 
pUDP
,

2797 
ídpoöt
)

2799  
pUDP
->
UDP_FDR
[
ídpoöt
];

2800 
	}
}

2806 
__ölöe
 
	$AT91F_UDP_EpEndOfWr
(

2807 
AT91PS_UDP
 
pUDP
,

2808 
ídpoöt
)

2810 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_TXPKTRDY
;

2811 
	}
}

2817 
__ölöe
 
	$AT91F_UDP_EpCÀ¨
(

2818 
AT91PS_UDP
 
pUDP
,

2819 
ídpoöt
,

2820 
Êag
)

2822 
pUDP
->
UDP_CSR
[
ídpoöt
] &~(
Êag
);

2823 
	}
}

2829 
__ölöe
 
	$AT91F_UDP_EpSë
(

2830 
AT91PS_UDP
 
pUDP
,

2831 
ídpoöt
,

2832 
Êag
)

2834 
pUDP
->
UDP_CSR
[
ídpoöt
] |
Êag
;

2835 
	}
}

2841 
__ölöe
 
	$AT91F_UDP_EpSètus
(

2842 
AT91PS_UDP
 
pUDP
,

2843 
ídpoöt
)

2845  
pUDP
->
UDP_CSR
[
ídpoöt
];

2846 
	}
}

2852 
__ölöe
 
	$AT91F_UDP_GëI¡îru±MaskSètus
(

2853 
AT91PS_UDP
 
pUdp
)

2855  
pUdp
->
UDP_IMR
;

2856 
	}
}

2862 
__ölöe
 
	$AT91F_UDP_IsI¡îru±Masked
(

2863 
AT91PS_UDP
 
pUdp
,

2864 
Êag
)

2866  (
	`AT91F_UDP_GëI¡îru±MaskSètus
(
pUdp
Ë& 
Êag
);

2867 
	}
}

2876 
__ölöe
 
	$AT91F_TC_I¡îru±E«bÀ
(

2877 
AT91PS_TC
 
pTc
,

2878 
Êag
)

2880 
pTc
->
TC_IER
 = 
Êag
;

2881 
	}
}

2887 
__ölöe
 
	$AT91F_TC_I¡îru±DißbÀ
(

2888 
AT91PS_TC
 
pTc
,

2889 
Êag
)

2891 
pTc
->
TC_IDR
 = 
Êag
;

2892 
	}
}

2898 
__ölöe
 
	$AT91F_TC_GëI¡îru±MaskSètus
(

2899 
AT91PS_TC
 
pTc
)

2901  
pTc
->
TC_IMR
;

2902 
	}
}

2908 
__ölöe
 
	$AT91F_TC_IsI¡îru±Masked
(

2909 
AT91PS_TC
 
pTc
,

2910 
Êag
)

2912  (
	`AT91F_TC_GëI¡îru±MaskSètus
(
pTc
Ë& 
Êag
);

2913 
	}
}

2918 
	#STANDARD_FORMAT
 0

	)

2919 
	#EXTENDED_FORMAT
 1

	)

2925 
__ölöe
 
	$AT91F_InôMaûboxRegi°îs
(
AT91PS_CAN_MB
 
CAN_Maûbox
,

2926 
mode_ªg
,

2927 
ac˚±™˚_mask_ªg
,

2928 
id_ªg
,

2929 
d©a_low_ªg
,

2930 
d©a_high_ªg
,

2931 
c⁄åﬁ_ªg
)

2933 
CAN_Maûbox
->
CAN_MB_MCR
 = 0x0;

2934 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode_ªg
;

2935 
CAN_Maûbox
->
CAN_MB_MAM
 = 
ac˚±™˚_mask_ªg
;

2936 
CAN_Maûbox
->
CAN_MB_MID
 = 
id_ªg
;

2937 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a_low_ªg
;

2938 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a_high_ªg
;

2939 
CAN_Maûbox
->
CAN_MB_MCR
 = 
c⁄åﬁ_ªg
;

2940 
	}
}

2946 
__ölöe
 
	$AT91F_E«bÀCAN
(

2947 
AT91PS_CAN
 
pCAN
)

2949 
pCAN
->
CAN_MR
 |
AT91C_CAN_CANEN
;

2952  (
pCAN
->
CAN_SR
 & 
AT91C_CAN_WAKEUP
) != AT91C_CAN_WAKEUP );

2953 
	}
}

2959 
__ölöe
 
	$AT91F_DißbÀCAN
(

2960 
AT91PS_CAN
 
pCAN
)

2962 
pCAN
->
CAN_MR
 &~
AT91C_CAN_CANEN
;

2963 
	}
}

2969 
__ölöe
 
	$AT91F_CAN_E«bÀIt
 (

2970 
AT91PS_CAN
 
pCAN
,

2971 
Êag
)

2974 
pCAN
->
CAN_IER
 = 
Êag
;

2975 
	}
}

2981 
__ölöe
 
	$AT91F_CAN_DißbÀIt
 (

2982 
AT91PS_CAN
 
pCAN
,

2983 
Êag
)

2986 
pCAN
->
CAN_IDR
 = 
Êag
;

2987 
	}
}

2993 
__ölöe
 
	$AT91F_CAN_GëSètus
(

2994 
AT91PS_CAN
 
pCAN
)

2996  
pCAN
->
CAN_SR
;

2997 
	}
}

3003 
__ölöe
 
	$AT91F_CAN_GëI¡îru±MaskSètus
(

3004 
AT91PS_CAN
 
pCAN
)

3006  
pCAN
->
CAN_IMR
;

3007 
	}
}

3013 
__ölöe
 
	$AT91F_CAN_IsI¡îru±Masked
(

3014 
AT91PS_CAN
 
pCAN
,

3015 
Êag
)

3017  (
	`AT91F_CAN_GëI¡îru±MaskSètus
(
pCAN
Ë& 
Êag
);

3018 
	}
}

3024 
__ölöe
 
	$AT91F_CAN_IsSètusSë
(

3025 
AT91PS_CAN
 
pCAN
,

3026 
Êag
)

3028  (
	`AT91F_CAN_GëSètus
(
pCAN
Ë& 
Êag
);

3029 
	}
}

3035 
__ölöe
 
	$AT91F_CAN_CfgModeReg
 (

3036 
AT91PS_CAN
 
pCAN
,

3037 
mode
)

3040 
pCAN
->
CAN_MR
 = 
mode
;

3041 
	}
}

3047 
__ölöe
 
	$AT91F_CAN_GëModeReg
 (

3048 
AT91PS_CAN
 
pCAN


3051  
pCAN
->
CAN_MR
;

3052 
	}
}

3058 
__ölöe
 
	$AT91F_CAN_CfgBaudøãReg
 (

3059 
AT91PS_CAN
 
pCAN
,

3060 
baudøã_cfg
)

3063 
pCAN
->
CAN_BR
 = 
baudøã_cfg
;

3064 
	}
}

3070 
__ölöe
 
	$AT91F_CAN_GëBaudøã
 (

3071 
AT91PS_CAN
 
pCAN


3074  
pCAN
->
CAN_BR
;

3075 
	}
}

3081 
__ölöe
 
	$AT91F_CAN_GëI¡î«lCou¡î
 (

3082 
AT91PS_CAN
 
pCAN


3085  
pCAN
->
CAN_TIM
;

3086 
	}
}

3092 
__ölöe
 
	$AT91F_CAN_GëTime°amp
 (

3093 
AT91PS_CAN
 
pCAN


3096  
pCAN
->
CAN_TIMESTP
;

3097 
	}
}

3103 
__ölöe
 
	$AT91F_CAN_GëEº‹Cou¡î
 (

3104 
AT91PS_CAN
 
pCAN


3107  
pCAN
->
CAN_ECR
;

3108 
	}
}

3114 
__ölöe
 
	$AT91F_CAN_InôTøns„rReque°
 (

3115 
AT91PS_CAN
 
pCAN
,

3116 
å™s„r_cmd
)

3118 
pCAN
->
CAN_TCR
 = 
å™s„r_cmd
;

3119 
	}
}

3125 
__ölöe
 
	$AT91F_CAN_InôAb‹tReque°
 (

3126 
AT91PS_CAN
 
pCAN
,

3127 
ab‹t_cmd
)

3129 
pCAN
->
CAN_ACR
 = 
ab‹t_cmd
;

3130 
	}
}

3136 
__ölöe
 
	$AT91F_CAN_CfgMesßgeModeReg
 (

3137 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3138 
mode
)

3140 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode
;

3141 
	}
}

3147 
__ölöe
 
	$AT91F_CAN_GëMesßgeModeReg
 (

3148 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3150  
CAN_Maûbox
->
CAN_MB_MMR
;

3151 
	}
}

3158 
__ölöe
 
	$AT91F_CAN_CfgMesßgeIDReg
 (

3159 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3160 
id
,

3161 
vîsi⁄
)

3163 if(
vîsi⁄
==0)

3164 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
<<18;

3166 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
 | (1<<29);

3167 
	}
}

3173 
__ölöe
 
	$AT91F_CAN_GëMesßgeIDReg
 (

3174 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3176  
CAN_Maûbox
->
CAN_MB_MID
;

3177 
	}
}

3183 
__ölöe
 
	$AT91F_CAN_CfgMesßgeAc˚±™˚MaskReg
 (

3184 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3185 
mask
)

3187 
CAN_Maûbox
->
CAN_MB_MAM
 = 
mask
;

3188 
	}
}

3194 
__ölöe
 
	$AT91F_CAN_GëMesßgeAc˚±™˚MaskReg
 (

3195 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3197  
CAN_Maûbox
->
CAN_MB_MAM
;

3198 
	}
}

3204 
__ölöe
 
	$AT91F_CAN_GëFamûyID
 (

3205 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3207  
CAN_Maûbox
->
CAN_MB_MFID
;

3208 
	}
}

3214 
__ölöe
 
	$AT91F_CAN_CfgMesßgeCålReg
 (

3215 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3216 
mesßge_˘æ_cmd
)

3218 
CAN_Maûbox
->
CAN_MB_MCR
 = 
mesßge_˘æ_cmd
;

3219 
	}
}

3225 
__ölöe
 
	$AT91F_CAN_GëMesßgeSètus
 (

3226 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3228  
CAN_Maûbox
->
CAN_MB_MSR
;

3229 
	}
}

3235 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aLow
 (

3236 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3237 
d©a
)

3239 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a
;

3240 
	}
}

3246 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aLow
 (

3247 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3249  
CAN_Maûbox
->
CAN_MB_MDL
;

3250 
	}
}

3256 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aHigh
 (

3257 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3258 
d©a
)

3260 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a
;

3261 
	}
}

3267 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aHigh
 (

3268 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3270  
CAN_Maûbox
->
CAN_MB_MDH
;

3271 
	}
}

3277 
__ölöe
 
	$AT91F_CAN_O≥n
 (

3278 c⁄° 
nuŒ
)

3282 
	}
}

3290 
__ölöe
 
	$AT91F_ADC_E«bÀIt
 (

3291 
AT91PS_ADC
 
pADC
,

3292 
Êag
)

3295 
pADC
->
ADC_IER
 = 
Êag
;

3296 
	}
}

3302 
__ölöe
 
	$AT91F_ADC_DißbÀIt
 (

3303 
AT91PS_ADC
 
pADC
,

3304 
Êag
)

3307 
pADC
->
ADC_IDR
 = 
Êag
;

3308 
	}
}

3314 
__ölöe
 
	$AT91F_ADC_GëSètus
(

3315 
AT91PS_ADC
 
pADC
)

3317  
pADC
->
ADC_SR
;

3318 
	}
}

3324 
__ölöe
 
	$AT91F_ADC_GëI¡îru±MaskSètus
(

3325 
AT91PS_ADC
 
pADC
)

3327  
pADC
->
ADC_IMR
;

3328 
	}
}

3334 
__ölöe
 
	$AT91F_ADC_IsI¡îru±Masked
(

3335 
AT91PS_ADC
 
pADC
,

3336 
Êag
)

3338  (
	`AT91F_ADC_GëI¡îru±MaskSètus
(
pADC
Ë& 
Êag
);

3339 
	}
}

3345 
__ölöe
 
	$AT91F_ADC_IsSètusSë
(

3346 
AT91PS_ADC
 
pADC
,

3347 
Êag
)

3349  (
	`AT91F_ADC_GëSètus
(
pADC
Ë& 
Êag
);

3350 
	}
}

3356 
__ölöe
 
	$AT91F_ADC_CfgModeReg
 (

3357 
AT91PS_ADC
 
pADC
,

3358 
mode
)

3361 
pADC
->
ADC_MR
 = 
mode
;

3362 
	}
}

3368 
__ölöe
 
	$AT91F_ADC_GëModeReg
 (

3369 
AT91PS_ADC
 
pADC


3372  
pADC
->
ADC_MR
;

3373 
	}
}

3379 
__ölöe
 
	$AT91F_ADC_CfgTimögs
 (

3380 
AT91PS_ADC
 
pADC
,

3381 
mck_˛ock
,

3382 
adc_˛ock
,

3383 
°¨tup_time
,

3384 
ßm∂e_™d_hﬁd_time
)

3386 
¥esˇl
,
°¨tup
,
shtim
;

3388 
¥esˇl
 = 
mck_˛ock
/(2*
adc_˛ock
) - 1;

3389 
°¨tup
 = 
adc_˛ock
*
°¨tup_time
/8 - 1;

3390 
shtim
 = 
adc_˛ock
*
ßm∂e_™d_hﬁd_time
/1000 - 1;

3393 
pADC
->
ADC_MR
 = ( (
¥esˇl
<<8Ë& 
AT91C_ADC_PRESCAL
Ë| ( (
°¨tup
<<16Ë& 
AT91C_ADC_STARTUP
Ë| ( (
shtim
<<24Ë& 
AT91C_ADC_SHTIM
);

3394 
	}
}

3400 
__ölöe
 
	$AT91F_ADC_E«bÀCh™√l
 (

3401 
AT91PS_ADC
 
pADC
,

3402 
ch™√l
)

3405 
pADC
->
ADC_CHER
 = 
ch™√l
;

3406 
	}
}

3412 
__ölöe
 
	$AT91F_ADC_DißbÀCh™√l
 (

3413 
AT91PS_ADC
 
pADC
,

3414 
ch™√l
)

3417 
pADC
->
ADC_CHDR
 = 
ch™√l
;

3418 
	}
}

3424 
__ölöe
 
	$AT91F_ADC_GëCh™√lSètus
 (

3425 
AT91PS_ADC
 
pADC


3428  
pADC
->
ADC_CHSR
;

3429 
	}
}

3435 
__ölöe
 
	$AT91F_ADC_SèπC⁄vîsi⁄
 (

3436 
AT91PS_ADC
 
pADC


3439 
pADC
->
ADC_CR
 = 
AT91C_ADC_START
;

3440 
	}
}

3446 
__ölöe
 
	$AT91F_ADC_So·Re£t
 (

3447 
AT91PS_ADC
 
pADC


3450 
pADC
->
ADC_CR
 = 
AT91C_ADC_SWRST
;

3451 
	}
}

3457 
__ölöe
 
	$AT91F_ADC_GëLa°C⁄vîãdD©a
 (

3458 
AT91PS_ADC
 
pADC


3461  
pADC
->
ADC_LCDR
;

3462 
	}
}

3468 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH0
 (

3469 
AT91PS_ADC
 
pADC


3472  
pADC
->
ADC_CDR0
;

3473 
	}
}

3479 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH1
 (

3480 
AT91PS_ADC
 
pADC


3483  
pADC
->
ADC_CDR1
;

3484 
	}
}

3490 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH2
 (

3491 
AT91PS_ADC
 
pADC


3494  
pADC
->
ADC_CDR2
;

3495 
	}
}

3501 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH3
 (

3502 
AT91PS_ADC
 
pADC


3505  
pADC
->
ADC_CDR3
;

3506 
	}
}

3512 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH4
 (

3513 
AT91PS_ADC
 
pADC


3516  
pADC
->
ADC_CDR4
;

3517 
	}
}

3523 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH5
 (

3524 
AT91PS_ADC
 
pADC


3527  
pADC
->
ADC_CDR5
;

3528 
	}
}

3534 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH6
 (

3535 
AT91PS_ADC
 
pADC


3538  
pADC
->
ADC_CDR6
;

3539 
	}
}

3545 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH7
 (

3546 
AT91PS_ADC
 
pADC


3549  
pADC
->
ADC_CDR7
;

3550 
	}
}

3559 
__ölöe
 
	$AT91F_AES_E«bÀIt
 (

3560 
AT91PS_AES
 
pAES
,

3561 
Êag
)

3564 
pAES
->
AES_IER
 = 
Êag
;

3565 
	}
}

3571 
__ölöe
 
	$AT91F_AES_DißbÀIt
 (

3572 
AT91PS_AES
 
pAES
,

3573 
Êag
)

3576 
pAES
->
AES_IDR
 = 
Êag
;

3577 
	}
}

3583 
__ölöe
 
	$AT91F_AES_GëSètus
(

3584 
AT91PS_AES
 
pAES
)

3586  
pAES
->
AES_ISR
;

3587 
	}
}

3593 
__ölöe
 
	$AT91F_AES_GëI¡îru±MaskSètus
(

3594 
AT91PS_AES
 
pAES
)

3596  
pAES
->
AES_IMR
;

3597 
	}
}

3603 
__ölöe
 
	$AT91F_AES_IsI¡îru±Masked
(

3604 
AT91PS_AES
 
pAES
,

3605 
Êag
)

3607  (
	`AT91F_AES_GëI¡îru±MaskSètus
(
pAES
Ë& 
Êag
);

3608 
	}
}

3614 
__ölöe
 
	$AT91F_AES_IsSètusSë
(

3615 
AT91PS_AES
 
pAES
,

3616 
Êag
)

3618  (
	`AT91F_AES_GëSètus
(
pAES
Ë& 
Êag
);

3619 
	}
}

3625 
__ölöe
 
	$AT91F_AES_CfgModeReg
 (

3626 
AT91PS_AES
 
pAES
,

3627 
mode
)

3630 
pAES
->
AES_MR
 = 
mode
;

3631 
	}
}

3637 
__ölöe
 
	$AT91F_AES_GëModeReg
 (

3638 
AT91PS_AES
 
pAES


3641  
pAES
->
AES_MR
;

3642 
	}
}

3648 
__ölöe
 
	$AT91F_AES_SèπPro˚ssög
 (

3649 
AT91PS_AES
 
pAES


3652 
pAES
->
AES_CR
 = 
AT91C_AES_START
;

3653 
	}
}

3659 
__ölöe
 
	$AT91F_AES_So·Re£t
 (

3660 
AT91PS_AES
 
pAES


3663 
pAES
->
AES_CR
 = 
AT91C_AES_SWRST
;

3664 
	}
}

3670 
__ölöe
 
	$AT91F_AES_LﬂdNewSìd
 (

3671 
AT91PS_AES
 
pAES


3674 
pAES
->
AES_CR
 = 
AT91C_AES_LOADSEED
;

3675 
	}
}

3681 
__ölöe
 
	$AT91F_AES_SëCry±oKey
 (

3682 
AT91PS_AES
 
pAES
,

3683 
ödex
,

3684 
keyw‹d


3687 
pAES
->
AES_KEYWxR
[
ödex
] = 
keyw‹d
;

3688 
	}
}

3694 
__ölöe
 
	$AT91F_AES_I≈utD©a
 (

3695 
AT91PS_AES
 
pAES
,

3696 
ödex
,

3697 
öd©a


3700 
pAES
->
AES_IDATAxR
[
ödex
] = 
öd©a
;

3701 
	}
}

3707 
__ölöe
 
	$AT91F_AES_GëOuçutD©a
 (

3708 
AT91PS_AES
 
pAES
,

3709 
ödex


3712  
pAES
->
AES_ODATAxR
[
ödex
];

3713 
	}
}

3719 
__ölöe
 
	$AT91F_AES_SëInôüliz©i⁄Ve˘‹
 (

3720 
AT91PS_AES
 
pAES
,

3721 
ödex
,

3722 
öôve˘‹


3725 
pAES
->
AES_IVxR
[
ödex
] = 
öôve˘‹
;

3726 
	}
}

3735 
__ölöe
 
	$AT91F_TDES_E«bÀIt
 (

3736 
AT91PS_TDES
 
pTDES
,

3737 
Êag
)

3740 
pTDES
->
TDES_IER
 = 
Êag
;

3741 
	}
}

3747 
__ölöe
 
	$AT91F_TDES_DißbÀIt
 (

3748 
AT91PS_TDES
 
pTDES
,

3749 
Êag
)

3752 
pTDES
->
TDES_IDR
 = 
Êag
;

3753 
	}
}

3759 
__ölöe
 
	$AT91F_TDES_GëSètus
(

3760 
AT91PS_TDES
 
pTDES
)

3762  
pTDES
->
TDES_ISR
;

3763 
	}
}

3769 
__ölöe
 
	$AT91F_TDES_GëI¡îru±MaskSètus
(

3770 
AT91PS_TDES
 
pTDES
)

3772  
pTDES
->
TDES_IMR
;

3773 
	}
}

3779 
__ölöe
 
	$AT91F_TDES_IsI¡îru±Masked
(

3780 
AT91PS_TDES
 
pTDES
,

3781 
Êag
)

3783  (
	`AT91F_TDES_GëI¡îru±MaskSètus
(
pTDES
Ë& 
Êag
);

3784 
	}
}

3790 
__ölöe
 
	$AT91F_TDES_IsSètusSë
(

3791 
AT91PS_TDES
 
pTDES
,

3792 
Êag
)

3794  (
	`AT91F_TDES_GëSètus
(
pTDES
Ë& 
Êag
);

3795 
	}
}

3801 
__ölöe
 
	$AT91F_TDES_CfgModeReg
 (

3802 
AT91PS_TDES
 
pTDES
,

3803 
mode
)

3806 
pTDES
->
TDES_MR
 = 
mode
;

3807 
	}
}

3813 
__ölöe
 
	$AT91F_TDES_GëModeReg
 (

3814 
AT91PS_TDES
 
pTDES


3817  
pTDES
->
TDES_MR
;

3818 
	}
}

3824 
__ölöe
 
	$AT91F_TDES_SèπPro˚ssög
 (

3825 
AT91PS_TDES
 
pTDES


3828 
pTDES
->
TDES_CR
 = 
AT91C_TDES_START
;

3829 
	}
}

3835 
__ölöe
 
	$AT91F_TDES_So·Re£t
 (

3836 
AT91PS_TDES
 
pTDES


3839 
pTDES
->
TDES_CR
 = 
AT91C_TDES_SWRST
;

3840 
	}
}

3846 
__ölöe
 
	$AT91F_TDES_SëCry±oKey1
 (

3847 
AT91PS_TDES
 
pTDES
,

3848 
ödex
,

3849 
keyw‹d


3852 
pTDES
->
TDES_KEY1WxR
[
ödex
] = 
keyw‹d
;

3853 
	}
}

3859 
__ölöe
 
	$AT91F_TDES_SëCry±oKey2
 (

3860 
AT91PS_TDES
 
pTDES
,

3861 
ödex
,

3862 
keyw‹d


3865 
pTDES
->
TDES_KEY2WxR
[
ödex
] = 
keyw‹d
;

3866 
	}
}

3872 
__ölöe
 
	$AT91F_TDES_SëCry±oKey3
 (

3873 
AT91PS_TDES
 
pTDES
,

3874 
ödex
,

3875 
keyw‹d


3878 
pTDES
->
TDES_KEY3WxR
[
ödex
] = 
keyw‹d
;

3879 
	}
}

3885 
__ölöe
 
	$AT91F_TDES_I≈utD©a
 (

3886 
AT91PS_TDES
 
pTDES
,

3887 
ödex
,

3888 
öd©a


3891 
pTDES
->
TDES_IDATAxR
[
ödex
] = 
öd©a
;

3892 
	}
}

3898 
__ölöe
 
	$AT91F_TDES_GëOuçutD©a
 (

3899 
AT91PS_TDES
 
pTDES
,

3900 
ödex


3903  
pTDES
->
TDES_ODATAxR
[
ödex
];

3904 
	}
}

3910 
__ölöe
 
	$AT91F_TDES_SëInôüliz©i⁄Ve˘‹
 (

3911 
AT91PS_TDES
 
pTDES
,

3912 
ödex
,

3913 
öôve˘‹


3916 
pTDES
->
TDES_IVxR
[
ödex
] = 
öôve˘‹
;

3917 
	}
}

3923 
__ölöe
 
	$AT91F_DBGU_CfgPMC
 ()

3925 
	`AT91F_PMC_E«bÀPîùhClock
(

3926 
AT91C_BASE_PMC
,

3927 ((Ë1 << 
AT91C_ID_SYS
));

3928 
	}
}

3934 
__ölöe
 
	$AT91F_DBGU_CfgPIO
 ()

3937 
	`AT91F_PIO_CfgPîùh
(

3938 
AT91C_BASE_PIOA
,

3939 ((Ë
AT91C_PA27_DRXD
 ) |

3940 ((Ë
AT91C_PA28_DTXD
 ),

3942 
	}
}

3948 
__ölöe
 
	$AT91F_PMC_CfgPMC
 ()

3950 
	`AT91F_PMC_E«bÀPîùhClock
(

3951 
AT91C_BASE_PMC
,

3952 ((Ë1 << 
AT91C_ID_SYS
));

3953 
	}
}

3959 
__ölöe
 
	$AT91F_PMC_CfgPIO
 ()

3962 
	`AT91F_PIO_CfgPîùh
(

3963 
AT91C_BASE_PIOB
,

3964 ((Ë
AT91C_PB30_PCK2
 ) |

3965 ((Ë
AT91C_PB29_PCK1
 ),

3966 ((Ë
AT91C_PB20_PCK0
 ) |

3967 ((Ë
AT91C_PB0_PCK0
 ) |

3968 ((Ë
AT91C_PB22_PCK2
 ) |

3969 ((Ë
AT91C_PB21_PCK1
 ));

3971 
	`AT91F_PIO_CfgPîùh
(

3972 
AT91C_BASE_PIOA
,

3974 ((Ë
AT91C_PA30_PCK2
 ) |

3975 ((Ë
AT91C_PA13_PCK1
 ) |

3976 ((Ë
AT91C_PA27_PCK3
 ));

3977 
	}
}

3983 
__ölöe
 
	$AT91F_VREG_CfgPMC
 ()

3985 
	`AT91F_PMC_E«bÀPîùhClock
(

3986 
AT91C_BASE_PMC
,

3987 ((Ë1 << 
AT91C_ID_SYS
));

3988 
	}
}

3994 
__ölöe
 
	$AT91F_RSTC_CfgPMC
 ()

3996 
	`AT91F_PMC_E«bÀPîùhClock
(

3997 
AT91C_BASE_PMC
,

3998 ((Ë1 << 
AT91C_ID_SYS
));

3999 
	}
}

4005 
__ölöe
 
	$AT91F_SSC_CfgPMC
 ()

4007 
	`AT91F_PMC_E«bÀPîùhClock
(

4008 
AT91C_BASE_PMC
,

4009 ((Ë1 << 
AT91C_ID_SSC
));

4010 
	}
}

4016 
__ölöe
 
	$AT91F_SSC_CfgPIO
 ()

4019 
	`AT91F_PIO_CfgPîùh
(

4020 
AT91C_BASE_PIOA
,

4021 ((Ë
AT91C_PA25_RK
 ) |

4022 ((Ë
AT91C_PA22_TK
 ) |

4023 ((Ë
AT91C_PA21_TF
 ) |

4024 ((Ë
AT91C_PA24_RD
 ) |

4025 ((Ë
AT91C_PA26_RF
 ) |

4026 ((Ë
AT91C_PA23_TD
 ),

4028 
	}
}

4034 
__ölöe
 
	$AT91F_WDTC_CfgPMC
 ()

4036 
	`AT91F_PMC_E«bÀPîùhClock
(

4037 
AT91C_BASE_PMC
,

4038 ((Ë1 << 
AT91C_ID_SYS
));

4039 
	}
}

4045 
__ölöe
 
	$AT91F_US1_CfgPMC
 ()

4047 
	`AT91F_PMC_E«bÀPîùhClock
(

4048 
AT91C_BASE_PMC
,

4049 ((Ë1 << 
AT91C_ID_US1
));

4050 
	}
}

4056 
__ölöe
 
	$AT91F_US1_CfgPIO
 ()

4059 
	`AT91F_PIO_CfgPîùh
(

4060 
AT91C_BASE_PIOB
,

4062 ((Ë
AT91C_PB26_RI1
 ) |

4063 ((Ë
AT91C_PB24_DSR1
 ) |

4064 ((Ë
AT91C_PB23_DCD1
 ) |

4065 ((Ë
AT91C_PB25_DTR1
 ));

4067 
	`AT91F_PIO_CfgPîùh
(

4068 
AT91C_BASE_PIOA
,

4069 ((Ë
AT91C_PA7_SCK1
 ) |

4070 ((Ë
AT91C_PA8_RTS1
 ) |

4071 ((Ë
AT91C_PA6_TXD1
 ) |

4072 ((Ë
AT91C_PA5_RXD1
 ) |

4073 ((Ë
AT91C_PA9_CTS1
 ),

4075 
	}
}

4081 
__ölöe
 
	$AT91F_US0_CfgPMC
 ()

4083 
	`AT91F_PMC_E«bÀPîùhClock
(

4084 
AT91C_BASE_PMC
,

4085 ((Ë1 << 
AT91C_ID_US0
));

4086 
	}
}

4092 
__ölöe
 
	$AT91F_US0_CfgPIO
 ()

4095 
	`AT91F_PIO_CfgPîùh
(

4096 
AT91C_BASE_PIOA
,

4097 ((Ë
AT91C_PA0_RXD0
 ) |

4098 ((Ë
AT91C_PA4_CTS0
 ) |

4099 ((Ë
AT91C_PA3_RTS0
 ) |

4100 ((Ë
AT91C_PA2_SCK0
 ) |

4101 ((Ë
AT91C_PA1_TXD0
 ),

4103 
	}
}

4109 
__ölöe
 
	$AT91F_SPI1_CfgPMC
 ()

4111 
	`AT91F_PMC_E«bÀPîùhClock
(

4112 
AT91C_BASE_PMC
,

4113 ((Ë1 << 
AT91C_ID_SPI1
));

4114 
	}
}

4120 
__ölöe
 
	$AT91F_SPI1_CfgPIO
 ()

4123 
	`AT91F_PIO_CfgPîùh
(

4124 
AT91C_BASE_PIOB
,

4126 ((Ë
AT91C_PB16_NPCS13
 ) |

4127 ((Ë
AT91C_PB10_NPCS11
 ) |

4128 ((Ë
AT91C_PB11_NPCS12
 ));

4130 
	`AT91F_PIO_CfgPîùh
(

4131 
AT91C_BASE_PIOA
,

4133 ((Ë
AT91C_PA4_NPCS13
 ) |

4134 ((Ë
AT91C_PA29_NPCS13
 ) |

4135 ((Ë
AT91C_PA21_NPCS10
 ) |

4136 ((Ë
AT91C_PA22_SPCK1
 ) |

4137 ((Ë
AT91C_PA25_NPCS11
 ) |

4138 ((Ë
AT91C_PA2_NPCS11
 ) |

4139 ((Ë
AT91C_PA24_MISO1
 ) |

4140 ((Ë
AT91C_PA3_NPCS12
 ) |

4141 ((Ë
AT91C_PA26_NPCS12
 ) |

4142 ((Ë
AT91C_PA23_MOSI1
 ));

4143 
	}
}

4149 
__ölöe
 
	$AT91F_SPI0_CfgPMC
 ()

4151 
	`AT91F_PMC_E«bÀPîùhClock
(

4152 
AT91C_BASE_PMC
,

4153 ((Ë1 << 
AT91C_ID_SPI0
));

4154 
	}
}

4160 
__ölöe
 
	$AT91F_SPI0_CfgPIO
 ()

4163 
	`AT91F_PIO_CfgPîùh
(

4164 
AT91C_BASE_PIOB
,

4166 ((Ë
AT91C_PB13_NPCS01
 ) |

4167 ((Ë
AT91C_PB17_NPCS03
 ) |

4168 ((Ë
AT91C_PB14_NPCS02
 ));

4170 
	`AT91F_PIO_CfgPîùh
(

4171 
AT91C_BASE_PIOA
,

4172 ((Ë
AT91C_PA16_MISO0
 ) |

4173 ((Ë
AT91C_PA13_NPCS01
 ) |

4174 ((Ë
AT91C_PA15_NPCS03
 ) |

4175 ((Ë
AT91C_PA17_MOSI0
 ) |

4176 ((Ë
AT91C_PA18_SPCK0
 ) |

4177 ((Ë
AT91C_PA14_NPCS02
 ) |

4178 ((Ë
AT91C_PA12_NPCS00
 ),

4179 ((Ë
AT91C_PA7_NPCS01
 ) |

4180 ((Ë
AT91C_PA9_NPCS03
 ) |

4181 ((Ë
AT91C_PA8_NPCS02
 ));

4182 
	}
}

4188 
__ölöe
 
	$AT91F_PITC_CfgPMC
 ()

4190 
	`AT91F_PMC_E«bÀPîùhClock
(

4191 
AT91C_BASE_PMC
,

4192 ((Ë1 << 
AT91C_ID_SYS
));

4193 
	}
}

4199 
__ölöe
 
	$AT91F_AIC_CfgPMC
 ()

4201 
	`AT91F_PMC_E«bÀPîùhClock
(

4202 
AT91C_BASE_PMC
,

4203 ((Ë1 << 
AT91C_ID_FIQ
) |

4204 ((Ë1 << 
AT91C_ID_IRQ0
) |

4205 ((Ë1 << 
AT91C_ID_IRQ1
));

4206 
	}
}

4212 
__ölöe
 
	$AT91F_AIC_CfgPIO
 ()

4215 
	`AT91F_PIO_CfgPîùh
(

4216 
AT91C_BASE_PIOA
,

4217 ((Ë
AT91C_PA30_IRQ0
 ) |

4218 ((Ë
AT91C_PA29_FIQ
 ),

4219 ((Ë
AT91C_PA14_IRQ1
 ));

4220 
	}
}

4226 
__ölöe
 
	$AT91F_AES_CfgPMC
 ()

4228 
	`AT91F_PMC_E«bÀPîùhClock
(

4229 
AT91C_BASE_PMC
,

4230 ((Ë1 << 
AT91C_ID_AES
));

4231 
	}
}

4237 
__ölöe
 
	$AT91F_TWI_CfgPMC
 ()

4239 
	`AT91F_PMC_E«bÀPîùhClock
(

4240 
AT91C_BASE_PMC
,

4241 ((Ë1 << 
AT91C_ID_TWI
));

4242 
	}
}

4248 
__ölöe
 
	$AT91F_TWI_CfgPIO
 ()

4251 
	`AT91F_PIO_CfgPîùh
(

4252 
AT91C_BASE_PIOA
,

4253 ((Ë
AT91C_PA11_TWCK
 ) |

4254 ((Ë
AT91C_PA10_TWD
 ),

4256 
	}
}

4262 
__ölöe
 
	$AT91F_ADC_CfgPMC
 ()

4264 
	`AT91F_PMC_E«bÀPîùhClock
(

4265 
AT91C_BASE_PMC
,

4266 ((Ë1 << 
AT91C_ID_ADC
));

4267 
	}
}

4273 
__ölöe
 
	$AT91F_ADC_CfgPIO
 ()

4276 
	`AT91F_PIO_CfgPîùh
(

4277 
AT91C_BASE_PIOB
,

4279 ((Ë
AT91C_PB18_ADTRG
 ));

4280 
	}
}

4286 
__ölöe
 
	$AT91F_PWMC_CH3_CfgPIO
 ()

4289 
	`AT91F_PIO_CfgPîùh
(

4290 
AT91C_BASE_PIOB
,

4291 ((Ë
AT91C_PB22_PWM3
 ),

4292 ((Ë
AT91C_PB30_PWM3
 ));

4293 
	}
}

4299 
__ölöe
 
	$AT91F_PWMC_CH2_CfgPIO
 ()

4302 
	`AT91F_PIO_CfgPîùh
(

4303 
AT91C_BASE_PIOB
,

4304 ((Ë
AT91C_PB21_PWM2
 ),

4305 ((Ë
AT91C_PB29_PWM2
 ));

4306 
	}
}

4312 
__ölöe
 
	$AT91F_PWMC_CH1_CfgPIO
 ()

4315 
	`AT91F_PIO_CfgPîùh
(

4316 
AT91C_BASE_PIOB
,

4317 ((Ë
AT91C_PB20_PWM1
 ),

4318 ((Ë
AT91C_PB28_PWM1
 ));

4319 
	}
}

4325 
__ölöe
 
	$AT91F_PWMC_CH0_CfgPIO
 ()

4328 
	`AT91F_PIO_CfgPîùh
(

4329 
AT91C_BASE_PIOB
,

4330 ((Ë
AT91C_PB19_PWM0
 ),

4331 ((Ë
AT91C_PB27_PWM0
 ));

4332 
	}
}

4338 
__ölöe
 
	$AT91F_RTTC_CfgPMC
 ()

4340 
	`AT91F_PMC_E«bÀPîùhClock
(

4341 
AT91C_BASE_PMC
,

4342 ((Ë1 << 
AT91C_ID_SYS
));

4343 
	}
}

4349 
__ölöe
 
	$AT91F_UDP_CfgPMC
 ()

4351 
	`AT91F_PMC_E«bÀPîùhClock
(

4352 
AT91C_BASE_PMC
,

4353 ((Ë1 << 
AT91C_ID_UDP
));

4354 
	}
}

4360 
__ölöe
 
	$AT91F_TDES_CfgPMC
 ()

4362 
	`AT91F_PMC_E«bÀPîùhClock
(

4363 
AT91C_BASE_PMC
,

4364 ((Ë1 << 
AT91C_ID_TDES
));

4365 
	}
}

4371 
__ölöe
 
	$AT91F_EMAC_CfgPMC
 ()

4373 
	`AT91F_PMC_E«bÀPîùhClock
(

4374 
AT91C_BASE_PMC
,

4375 ((Ë1 << 
AT91C_ID_EMAC
));

4376 
	}
}

4382 
__ölöe
 
	$AT91F_EMAC_CfgPIO
 ()

4385 
	`AT91F_PIO_CfgPîùh
(

4386 
AT91C_BASE_PIOB
,

4387 ((Ë
AT91C_PB2_ETX0
 ) |

4388 ((Ë
AT91C_PB12_ETXER
 ) |

4389 ((Ë
AT91C_PB16_ECOL
 ) |

4390 ((Ë
AT91C_PB11_ETX3
 ) |

4391 ((Ë
AT91C_PB6_ERX1
 ) |

4392 ((Ë
AT91C_PB15_ERXDV
 ) |

4393 ((Ë
AT91C_PB13_ERX2
 ) |

4394 ((Ë
AT91C_PB3_ETX1
 ) |

4395 ((Ë
AT91C_PB8_EMDC
 ) |

4396 ((Ë
AT91C_PB5_ERX0
 ) |

4398 ((Ë
AT91C_PB14_ERX3
 ) |

4399 ((Ë
AT91C_PB4_ECRS_ECRSDV
) |

4400 ((Ë
AT91C_PB1_ETXEN
 ) |

4401 ((Ë
AT91C_PB10_ETX2
 ) |

4402 ((Ë
AT91C_PB0_ETXCK_EREFCK
) |

4403 ((Ë
AT91C_PB9_EMDIO
 ) |

4404 ((Ë
AT91C_PB7_ERXER
 ) |

4405 ((Ë
AT91C_PB17_ERXCK
 ),

4407 
	}
}

4413 
__ölöe
 
	$AT91F_TC0_CfgPMC
 ()

4415 
	`AT91F_PMC_E«bÀPîùhClock
(

4416 
AT91C_BASE_PMC
,

4417 ((Ë1 << 
AT91C_ID_TC0
));

4418 
	}
}

4424 
__ölöe
 
	$AT91F_TC0_CfgPIO
 ()

4427 
	`AT91F_PIO_CfgPîùh
(

4428 
AT91C_BASE_PIOB
,

4429 ((Ë
AT91C_PB23_TIOA0
 ) |

4430 ((Ë
AT91C_PB24_TIOB0
 ),

4431 ((Ë
AT91C_PB12_TCLK0
 ));

4432 
	}
}

4438 
__ölöe
 
	$AT91F_TC1_CfgPMC
 ()

4440 
	`AT91F_PMC_E«bÀPîùhClock
(

4441 
AT91C_BASE_PMC
,

4442 ((Ë1 << 
AT91C_ID_TC1
));

4443 
	}
}

4449 
__ölöe
 
	$AT91F_TC1_CfgPIO
 ()

4452 
	`AT91F_PIO_CfgPîùh
(

4453 
AT91C_BASE_PIOB
,

4454 ((Ë
AT91C_PB25_TIOA1
 ) |

4455 ((Ë
AT91C_PB26_TIOB1
 ),

4456 ((Ë
AT91C_PB19_TCLK1
 ));

4457 
	}
}

4463 
__ölöe
 
	$AT91F_TC2_CfgPMC
 ()

4465 
	`AT91F_PMC_E«bÀPîùhClock
(

4466 
AT91C_BASE_PMC
,

4467 ((Ë1 << 
AT91C_ID_TC2
));

4468 
	}
}

4474 
__ölöe
 
	$AT91F_TC2_CfgPIO
 ()

4477 
	`AT91F_PIO_CfgPîùh
(

4478 
AT91C_BASE_PIOB
,

4479 ((Ë
AT91C_PB28_TIOB2
 ) |

4480 ((Ë
AT91C_PB27_TIOA2
 ),

4483 
	`AT91F_PIO_CfgPîùh
(

4484 
AT91C_BASE_PIOA
,

4486 ((Ë
AT91C_PA15_TCLK2
 ));

4487 
	}
}

4493 
__ölöe
 
	$AT91F_MC_CfgPMC
 ()

4495 
	`AT91F_PMC_E«bÀPîùhClock
(

4496 
AT91C_BASE_PMC
,

4497 ((Ë1 << 
AT91C_ID_SYS
));

4498 
	}
}

4504 
__ölöe
 
	$AT91F_PIOA_CfgPMC
 ()

4506 
	`AT91F_PMC_E«bÀPîùhClock
(

4507 
AT91C_BASE_PMC
,

4508 ((Ë1 << 
AT91C_ID_PIOA
));

4509 
	}
}

4515 
__ölöe
 
	$AT91F_PIOB_CfgPMC
 ()

4517 
	`AT91F_PMC_E«bÀPîùhClock
(

4518 
AT91C_BASE_PMC
,

4519 ((Ë1 << 
AT91C_ID_PIOB
));

4520 
	}
}

4526 
__ölöe
 
	$AT91F_CAN_CfgPMC
 ()

4528 
	`AT91F_PMC_E«bÀPîùhClock
(

4529 
AT91C_BASE_PMC
,

4530 ((Ë1 << 
AT91C_ID_CAN
));

4531 
	}
}

4537 
__ölöe
 
	$AT91F_CAN_CfgPIO
 ()

4540 
	`AT91F_PIO_CfgPîùh
(

4541 
AT91C_BASE_PIOA
,

4542 ((Ë
AT91C_PA20_CANTX
 ) |

4543 ((Ë
AT91C_PA19_CANRX
 ),

4545 
	}
}

4551 
__ölöe
 
	$AT91F_PWMC_CfgPMC
 ()

4553 
	`AT91F_PMC_E«bÀPîùhClock
(

4554 
AT91C_BASE_PMC
,

4555 ((Ë1 << 
AT91C_ID_PWMC
));

4556 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/lib_AT91SAM7X256.h

43 #i‚de‡
lib_AT91SAM7X256_H


44 
	#lib_AT91SAM7X256_H


	)

49 
	#AT91C_AIC_BRANCH_OPCODE
 (((*) ()) 0xE51FFF20)

50 

	)

55 
__ölöe
 
AT91F_AIC_C⁄figuªIt
 (

56 
AT91PS_AIC
 
pAic
,

57 
úq_id
,

58 
¥i‹ôy
,

59 
§c_ty≥
,

60 (*
√wH™dÀr
) () )

62 
ﬁdH™dÀr
;

63 
mask
 ;

65 
ﬁdH™dÀr
 = 
pAic
->
AIC_SVR
[
úq_id
];

67 
mask
 = 0x1 << 
úq_id
 ;

69 
pAic
->
AIC_IDCR
 = 
mask
 ;

71 
pAic
->
AIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ;

73 
pAic
->
AIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ;

75 
pAic
->
AIC_ICCR
 = 
mask
 ;

77  
ﬁdH™dÀr
;

78 
	}
}

84 
__ölöe
 
	$AT91F_AIC_E«bÀIt
 (

85 
AT91PS_AIC
 
pAic
,

86 
úq_id
 )

89 
pAic
->
AIC_IECR
 = 0x1 << 
úq_id
 ;

90 
	}
}

96 
__ölöe
 
	$AT91F_AIC_DißbÀIt
 (

97 
AT91PS_AIC
 
pAic
,

98 
úq_id
 )

100 
mask
 = 0x1 << 
úq_id
;

102 
pAic
->
AIC_IDCR
 = 
mask
 ;

104 
pAic
->
AIC_ICCR
 = 
mask
 ;

105 
	}
}

111 
__ölöe
 
	$AT91F_AIC_CÀ¨It
 (

112 
AT91PS_AIC
 
pAic
,

113 
úq_id
)

116 
pAic
->
AIC_ICCR
 = (0x1 << 
úq_id
);

117 
	}
}

123 
__ölöe
 
	$AT91F_AIC_AcknowÀdgeIt
 (

124 
AT91PS_AIC
 
pAic
)

126 
pAic
->
AIC_EOICR
 =ÖAic->AIC_EOICR;

127 
	}
}

133 
__ölöe
 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
 (

134 *
pVe˘‹
,

135 (*
H™dÀr
) () )

137 
ﬁdVe˘‹
 = *
pVe˘‹
;

139 i‡((Ë
H™dÀr
 =(Ë
AT91C_AIC_BRANCH_OPCODE
)

140 *
pVe˘‹
 = (Ë
AT91C_AIC_BRANCH_OPCODE
;

142 *
pVe˘‹
 = (((((Ë
H™dÀr
) - (()ÖVector) - 0x8) >> 2) & 0x00FFFFFF) | 0xEA000000;

144  
ﬁdVe˘‹
;

145 
	}
}

151 
__ölöe
 
	$AT91F_AIC_Trig
 (

152 
AT91PS_AIC
 
pAic
,

153 
úq_id
)

155 
pAic
->
AIC_ISCR
 = (0x1 << 
úq_id
) ;

156 
	}
}

162 
__ölöe
 
	$AT91F_AIC_IsA˘ive
 (

163 
AT91PS_AIC
 
pAic
,

164 
úq_id
)

166  (
pAic
->
AIC_ISR
 & (0x1 << 
úq_id
));

167 
	}
}

173 
__ölöe
 
	$AT91F_AIC_IsPídög
 (

174 
AT91PS_AIC
 
pAic
,

175 
úq_id
)

177  (
pAic
->
AIC_IPR
 & (0x1 << 
úq_id
));

178 
	}
}

184 
__ölöe
 
AT91F_AIC_O≥n
(

185 
AT91PS_AIC
 
pAic
,

186 (*
IrqH™dÀr
) (),

187 (*
FiqH™dÀr
) (),

188 (*
DeÁu…H™dÀr
) (),

189 (*
SpuriousH™dÀr
) (),

190 
¥Ÿe˘Mode
)

192 
	gi
;

195 
	gi
 = 0; i < 32; ++i) {

196 
AT91F_AIC_DißbÀIt
(
pAic
, 
i
);

197 
AT91F_AIC_C⁄figuªIt
(
pAic
, 
i
, 
AT91C_AIC_PRIOR_LOWEST
, 
AT91C_AIC_SRCTYPE_HIGH_LEVEL
, 
DeÁu…H™dÀr
);

201 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x18, 
IrqH™dÀr
);

203 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x1C, 
FiqH™dÀr
);

205 
	gpAic
->
	gAIC_SPU
 = (Ë
SpuriousH™dÀr
;

206 
	gpAic
->
	gAIC_DCR
 = 
¥Ÿe˘Mode
;

215 
__ölöe
 
	$AT91F_PDC_SëNextRx
 (

216 
AT91PS_PDC
 
pPDC
,

217 *
addªss
,

218 
byãs
)

220 
pPDC
->
PDC_RNPR
 = (Ë
addªss
;

221 
pPDC
->
PDC_RNCR
 = 
byãs
;

222 
	}
}

228 
__ölöe
 
	$AT91F_PDC_SëNextTx
 (

229 
AT91PS_PDC
 
pPDC
,

230 *
addªss
,

231 
byãs
)

233 
pPDC
->
PDC_TNPR
 = (Ë
addªss
;

234 
pPDC
->
PDC_TNCR
 = 
byãs
;

235 
	}
}

241 
__ölöe
 
	$AT91F_PDC_SëRx
 (

242 
AT91PS_PDC
 
pPDC
,

243 *
addªss
,

244 
byãs
)

246 
pPDC
->
PDC_RPR
 = (Ë
addªss
;

247 
pPDC
->
PDC_RCR
 = 
byãs
;

248 
	}
}

254 
__ölöe
 
	$AT91F_PDC_SëTx
 (

255 
AT91PS_PDC
 
pPDC
,

256 *
addªss
,

257 
byãs
)

259 
pPDC
->
PDC_TPR
 = (Ë
addªss
;

260 
pPDC
->
PDC_TCR
 = 
byãs
;

261 
	}
}

267 
__ölöe
 
	$AT91F_PDC_E«bÀTx
 (

268 
AT91PS_PDC
 
pPDC
 )

270 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTEN
;

271 
	}
}

277 
__ölöe
 
	$AT91F_PDC_E«bÀRx
 (

278 
AT91PS_PDC
 
pPDC
 )

280 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTEN
;

281 
	}
}

287 
__ölöe
 
	$AT91F_PDC_DißbÀTx
 (

288 
AT91PS_PDC
 
pPDC
 )

290 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTDIS
;

291 
	}
}

297 
__ölöe
 
	$AT91F_PDC_DißbÀRx
 (

298 
AT91PS_PDC
 
pPDC
 )

300 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTDIS
;

301 
	}
}

307 
__ölöe
 
	$AT91F_PDC_IsTxEm±y
 (

308 
AT91PS_PDC
 
pPDC
 )

310  !(
pPDC
->
PDC_TCR
);

311 
	}
}

317 
__ölöe
 
	$AT91F_PDC_IsNextTxEm±y
 (

318 
AT91PS_PDC
 
pPDC
 )

320  !(
pPDC
->
PDC_TNCR
);

321 
	}
}

327 
__ölöe
 
	$AT91F_PDC_IsRxEm±y
 (

328 
AT91PS_PDC
 
pPDC
 )

330  !(
pPDC
->
PDC_RCR
);

331 
	}
}

337 
__ölöe
 
	$AT91F_PDC_IsNextRxEm±y
 (

338 
AT91PS_PDC
 
pPDC
 )

340  !(
pPDC
->
PDC_RNCR
);

341 
	}
}

347 
__ölöe
 
	$AT91F_PDC_O≥n
 (

348 
AT91PS_PDC
 
pPDC
)

351 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

352 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

355 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

356 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

357 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

358 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

361 
	`AT91F_PDC_E«bÀRx
(
pPDC
);

362 
	`AT91F_PDC_E«bÀTx
(
pPDC
);

363 
	}
}

369 
__ölöe
 
	$AT91F_PDC_Clo£
 (

370 
AT91PS_PDC
 
pPDC
)

373 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

374 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

377 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

378 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

379 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

380 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

382 
	}
}

388 
__ölöe
 
	$AT91F_PDC_SídFøme
(

389 
AT91PS_PDC
 
pPDC
,

390 *
pBuf„r
,

391 
szBuf„r
,

392 *
pNextBuf„r
,

393 
szNextBuf„r
 )

395 i‡(
	`AT91F_PDC_IsTxEm±y
(
pPDC
)) {

397 
	`AT91F_PDC_SëTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

398 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

401 i‡(
	`AT91F_PDC_IsNextTxEm±y
(
pPDC
)) {

403 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

410 
	}
}

416 
__ölöe
 
	$AT91F_PDC_Re˚iveFøme
 (

417 
AT91PS_PDC
 
pPDC
,

418 *
pBuf„r
,

419 
szBuf„r
,

420 *
pNextBuf„r
,

421 
szNextBuf„r
 )

423 i‡(
	`AT91F_PDC_IsRxEm±y
(
pPDC
)) {

425 
	`AT91F_PDC_SëRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

426 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

429 i‡(
	`AT91F_PDC_IsNextRxEm±y
(
pPDC
)) {

431 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

438 
	}
}

446 
__ölöe
 
	$AT91F_DBGU_I¡îru±E«bÀ
(

447 
AT91PS_DBGU
 
pDbgu
,

448 
Êag
)

450 
pDbgu
->
DBGU_IER
 = 
Êag
;

451 
	}
}

457 
__ölöe
 
	$AT91F_DBGU_I¡îru±DißbÀ
(

458 
AT91PS_DBGU
 
pDbgu
,

459 
Êag
)

461 
pDbgu
->
DBGU_IDR
 = 
Êag
;

462 
	}
}

468 
__ölöe
 
	$AT91F_DBGU_GëI¡îru±MaskSètus
(

469 
AT91PS_DBGU
 
pDbgu
)

471  
pDbgu
->
DBGU_IMR
;

472 
	}
}

478 
__ölöe
 
	$AT91F_DBGU_IsI¡îru±Masked
(

479 
AT91PS_DBGU
 
pDbgu
,

480 
Êag
)

482  (
	`AT91F_DBGU_GëI¡îru±MaskSètus
(
pDbgu
Ë& 
Êag
);

483 
	}
}

492 
__ölöe
 
	$AT91F_PIO_CfgPîùh
(

493 
AT91PS_PIO
 
pPio
,

494 
≥rùhAE«bÀ
,

495 
≥rùhBE«bÀ
)

498 
pPio
->
PIO_ASR
 = 
≥rùhAE«bÀ
;

499 
pPio
->
PIO_BSR
 = 
≥rùhBE«bÀ
;

500 
pPio
->
PIO_PDR
 = (
≥rùhAE«bÀ
 | 
≥rùhBE«bÀ
);

501 
	}
}

507 
__ölöe
 
	$AT91F_PIO_CfgOuçut
(

508 
AT91PS_PIO
 
pPio
,

509 
pioE«bÀ
)

511 
pPio
->
PIO_PER
 = 
pioE«bÀ
;

512 
pPio
->
PIO_OER
 = 
pioE«bÀ
;

513 
	}
}

519 
__ölöe
 
	$AT91F_PIO_CfgI≈ut
(

520 
AT91PS_PIO
 
pPio
,

521 
öputE«bÀ
)

524 
pPio
->
PIO_ODR
 = 
öputE«bÀ
;

525 
pPio
->
PIO_PER
 = 
öputE«bÀ
;

526 
	}
}

532 
__ölöe
 
	$AT91F_PIO_CfgO≥ndøö
(

533 
AT91PS_PIO
 
pPio
,

534 
mu…iDrvE«bÀ
)

537 
pPio
->
PIO_MDDR
 = ~
mu…iDrvE«bÀ
;

538 
pPio
->
PIO_MDER
 = 
mu…iDrvE«bÀ
;

539 
	}
}

545 
__ölöe
 
	$AT91F_PIO_CfgPuŒup
(

546 
AT91PS_PIO
 
pPio
,

547 
puŒupE«bÀ
)

550 
pPio
->
PIO_PPUDR
 = ~
puŒupE«bÀ
;

551 
pPio
->
PIO_PPUER
 = 
puŒupE«bÀ
;

552 
	}
}

558 
__ölöe
 
	$AT91F_PIO_CfgDúe˘Drive
(

559 
AT91PS_PIO
 
pPio
,

560 
dúe˘Drive
)

564 
pPio
->
PIO_OWDR
 = ~
dúe˘Drive
;

565 
pPio
->
PIO_OWER
 = 
dúe˘Drive
;

566 
	}
}

572 
__ölöe
 
	$AT91F_PIO_CfgI≈utFûãr
(

573 
AT91PS_PIO
 
pPio
,

574 
öputFûãr
)

578 
pPio
->
PIO_IFDR
 = ~
öputFûãr
;

579 
pPio
->
PIO_IFER
 = 
öputFûãr
;

580 
	}
}

586 
__ölöe
 
	$AT91F_PIO_GëI≈ut
(

587 
AT91PS_PIO
 
pPio
)

589  
pPio
->
PIO_PDSR
;

590 
	}
}

596 
__ölöe
 
	$AT91F_PIO_IsI≈utSë
(

597 
AT91PS_PIO
 
pPio
,

598 
Êag
)

600  (
	`AT91F_PIO_GëI≈ut
(
pPio
Ë& 
Êag
);

601 
	}
}

608 
__ölöe
 
	$AT91F_PIO_SëOuçut
(

609 
AT91PS_PIO
 
pPio
,

610 
Êag
)

612 
pPio
->
PIO_SODR
 = 
Êag
;

613 
	}
}

619 
__ölöe
 
	$AT91F_PIO_CÀ¨Ouçut
(

620 
AT91PS_PIO
 
pPio
,

621 
Êag
)

623 
pPio
->
PIO_CODR
 = 
Êag
;

624 
	}
}

630 
__ölöe
 
	$AT91F_PIO_F‹˚Ouçut
(

631 
AT91PS_PIO
 
pPio
,

632 
Êag
)

634 
pPio
->
PIO_ODSR
 = 
Êag
;

635 
	}
}

641 
__ölöe
 
	$AT91F_PIO_E«bÀ
(

642 
AT91PS_PIO
 
pPio
,

643 
Êag
)

645 
pPio
->
PIO_PER
 = 
Êag
;

646 
	}
}

652 
__ölöe
 
	$AT91F_PIO_DißbÀ
(

653 
AT91PS_PIO
 
pPio
,

654 
Êag
)

656 
pPio
->
PIO_PDR
 = 
Êag
;

657 
	}
}

663 
__ölöe
 
	$AT91F_PIO_GëSètus
(

664 
AT91PS_PIO
 
pPio
)

666  
pPio
->
PIO_PSR
;

667 
	}
}

673 
__ölöe
 
	$AT91F_PIO_IsSë
(

674 
AT91PS_PIO
 
pPio
,

675 
Êag
)

677  (
	`AT91F_PIO_GëSètus
(
pPio
Ë& 
Êag
);

678 
	}
}

684 
__ölöe
 
	$AT91F_PIO_OuçutE«bÀ
(

685 
AT91PS_PIO
 
pPio
,

686 
Êag
)

688 
pPio
->
PIO_OER
 = 
Êag
;

689 
	}
}

695 
__ölöe
 
	$AT91F_PIO_OuçutDißbÀ
(

696 
AT91PS_PIO
 
pPio
,

697 
Êag
)

699 
pPio
->
PIO_ODR
 = 
Êag
;

700 
	}
}

706 
__ölöe
 
	$AT91F_PIO_GëOuçutSètus
(

707 
AT91PS_PIO
 
pPio
)

709  
pPio
->
PIO_OSR
;

710 
	}
}

716 
__ölöe
 
	$AT91F_PIO_IsOuçutSë
(

717 
AT91PS_PIO
 
pPio
,

718 
Êag
)

720  (
	`AT91F_PIO_GëOuçutSètus
(
pPio
Ë& 
Êag
);

721 
	}
}

727 
__ölöe
 
	$AT91F_PIO_I≈utFûãrE«bÀ
(

728 
AT91PS_PIO
 
pPio
,

729 
Êag
)

731 
pPio
->
PIO_IFER
 = 
Êag
;

732 
	}
}

738 
__ölöe
 
	$AT91F_PIO_I≈utFûãrDißbÀ
(

739 
AT91PS_PIO
 
pPio
,

740 
Êag
)

742 
pPio
->
PIO_IFDR
 = 
Êag
;

743 
	}
}

749 
__ölöe
 
	$AT91F_PIO_GëI≈utFûãrSètus
(

750 
AT91PS_PIO
 
pPio
)

752  
pPio
->
PIO_IFSR
;

753 
	}
}

759 
__ölöe
 
	$AT91F_PIO_IsI≈utFûãrSë
(

760 
AT91PS_PIO
 
pPio
,

761 
Êag
)

763  (
	`AT91F_PIO_GëI≈utFûãrSètus
(
pPio
Ë& 
Êag
);

764 
	}
}

770 
__ölöe
 
	$AT91F_PIO_GëOuçutD©aSètus
(

771 
AT91PS_PIO
 
pPio
)

773  
pPio
->
PIO_ODSR
;

774 
	}
}

780 
__ölöe
 
	$AT91F_PIO_I¡îru±E«bÀ
(

781 
AT91PS_PIO
 
pPio
,

782 
Êag
)

784 
pPio
->
PIO_IER
 = 
Êag
;

785 
	}
}

791 
__ölöe
 
	$AT91F_PIO_I¡îru±DißbÀ
(

792 
AT91PS_PIO
 
pPio
,

793 
Êag
)

795 
pPio
->
PIO_IDR
 = 
Êag
;

796 
	}
}

802 
__ölöe
 
	$AT91F_PIO_GëI¡îru±MaskSètus
(

803 
AT91PS_PIO
 
pPio
)

805  
pPio
->
PIO_IMR
;

806 
	}
}

812 
__ölöe
 
	$AT91F_PIO_GëI¡îru±Sètus
(

813 
AT91PS_PIO
 
pPio
)

815  
pPio
->
PIO_ISR
;

816 
	}
}

822 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Masked
(

823 
AT91PS_PIO
 
pPio
,

824 
Êag
)

826  (
	`AT91F_PIO_GëI¡îru±MaskSètus
(
pPio
Ë& 
Êag
);

827 
	}
}

833 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Së
(

834 
AT91PS_PIO
 
pPio
,

835 
Êag
)

837  (
	`AT91F_PIO_GëI¡îru±Sètus
(
pPio
Ë& 
Êag
);

838 
	}
}

844 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîE«bÀ
(

845 
AT91PS_PIO
 
pPio
,

846 
Êag
)

848 
pPio
->
PIO_MDER
 = 
Êag
;

849 
	}
}

855 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîDißbÀ
(

856 
AT91PS_PIO
 
pPio
,

857 
Êag
)

859 
pPio
->
PIO_MDDR
 = 
Êag
;

860 
	}
}

866 
__ölöe
 
	$AT91F_PIO_GëMu…iDrivîSètus
(

867 
AT91PS_PIO
 
pPio
)

869  
pPio
->
PIO_MDSR
;

870 
	}
}

876 
__ölöe
 
	$AT91F_PIO_IsMu…iDrivîSë
(

877 
AT91PS_PIO
 
pPio
,

878 
Êag
)

880  (
	`AT91F_PIO_GëMu…iDrivîSètus
(
pPio
Ë& 
Êag
);

881 
	}
}

887 
__ölöe
 
	$AT91F_PIO_A_Regi°îSñe˘i⁄
(

888 
AT91PS_PIO
 
pPio
,

889 
Êag
)

891 
pPio
->
PIO_ASR
 = 
Êag
;

892 
	}
}

898 
__ölöe
 
	$AT91F_PIO_B_Regi°îSñe˘i⁄
(

899 
AT91PS_PIO
 
pPio
,

900 
Êag
)

902 
pPio
->
PIO_BSR
 = 
Êag
;

903 
	}
}

909 
__ölöe
 
	$AT91F_PIO_Gë_AB_Regi°îSètus
(

910 
AT91PS_PIO
 
pPio
)

912  
pPio
->
PIO_ABSR
;

913 
	}
}

919 
__ölöe
 
	$AT91F_PIO_IsAB_Regi°îSë
(

920 
AT91PS_PIO
 
pPio
,

921 
Êag
)

923  (
	`AT91F_PIO_Gë_AB_Regi°îSètus
(
pPio
Ë& 
Êag
);

924 
	}
}

930 
__ölöe
 
	$AT91F_PIO_OuçutWrôeE«bÀ
(

931 
AT91PS_PIO
 
pPio
,

932 
Êag
)

934 
pPio
->
PIO_OWER
 = 
Êag
;

935 
	}
}

941 
__ölöe
 
	$AT91F_PIO_OuçutWrôeDißbÀ
(

942 
AT91PS_PIO
 
pPio
,

943 
Êag
)

945 
pPio
->
PIO_OWDR
 = 
Êag
;

946 
	}
}

952 
__ölöe
 
	$AT91F_PIO_GëOuçutWrôeSètus
(

953 
AT91PS_PIO
 
pPio
)

955  
pPio
->
PIO_OWSR
;

956 
	}
}

962 
__ölöe
 
	$AT91F_PIO_IsOuçutWrôeSë
(

963 
AT91PS_PIO
 
pPio
,

964 
Êag
)

966  (
	`AT91F_PIO_GëOuçutWrôeSètus
(
pPio
Ë& 
Êag
);

967 
	}
}

973 
__ölöe
 
	$AT91F_PIO_GëCfgPuŒup
(

974 
AT91PS_PIO
 
pPio
)

976  
pPio
->
PIO_PPUSR
;

977 
	}
}

983 
__ölöe
 
	$AT91F_PIO_IsOuçutD©aSètusSë
(

984 
AT91PS_PIO
 
pPio
,

985 
Êag
)

987  (
	`AT91F_PIO_GëOuçutD©aSètus
(
pPio
Ë& 
Êag
);

988 
	}
}

994 
__ölöe
 
	$AT91F_PIO_IsCfgPuŒupSètusSë
(

995 
AT91PS_PIO
 
pPio
,

996 
Êag
)

998  (~
	`AT91F_PIO_GëCfgPuŒup
(
pPio
Ë& 
Êag
);

999 
	}
}

1008 
__ölöe
 
	$AT91F_PMC_CfgSysClkE«bÀReg
 (

1009 
AT91PS_PMC
 
pPMC
,

1010 
mode
)

1013 
pPMC
->
PMC_SCER
 = 
mode
;

1014 
	}
}

1020 
__ölöe
 
	$AT91F_PMC_CfgSysClkDißbÀReg
 (

1021 
AT91PS_PMC
 
pPMC
,

1022 
mode
)

1025 
pPMC
->
PMC_SCDR
 = 
mode
;

1026 
	}
}

1032 
__ölöe
 
	$AT91F_PMC_GëSysClkSètusReg
 (

1033 
AT91PS_PMC
 
pPMC


1036  
pPMC
->
PMC_SCSR
;

1037 
	}
}

1043 
__ölöe
 
	$AT91F_PMC_E«bÀPîùhClock
 (

1044 
AT91PS_PMC
 
pPMC
,

1045 
≥rùhIds
)

1047 
pPMC
->
PMC_PCER
 = 
≥rùhIds
;

1048 
	}
}

1054 
__ölöe
 
	$AT91F_PMC_DißbÀPîùhClock
 (

1055 
AT91PS_PMC
 
pPMC
,

1056 
≥rùhIds
)

1058 
pPMC
->
PMC_PCDR
 = 
≥rùhIds
;

1059 
	}
}

1065 
__ölöe
 
	$AT91F_PMC_GëPîùhClock
 (

1066 
AT91PS_PMC
 
pPMC
)

1068  
pPMC
->
PMC_PCSR
;

1069 
	}
}

1075 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscûœt‹Reg
 (

1076 
AT91PS_CKGR
 
pCKGR
,

1077 
mode
)

1079 
pCKGR
->
CKGR_MOR
 = 
mode
;

1080 
	}
}

1086 
__ölöe
 
	$AT91F_CKGR_GëMaöOscûœt‹Reg
 (

1087 
AT91PS_CKGR
 
pCKGR
)

1089  
pCKGR
->
CKGR_MOR
;

1090 
	}
}

1096 
__ölöe
 
	$AT91F_CKGR_E«bÀMaöOscûœt‹
(

1097 
AT91PS_CKGR
 
pCKGR
)

1099 
pCKGR
->
CKGR_MOR
 |
AT91C_CKGR_MOSCEN
;

1100 
	}
}

1106 
__ölöe
 
	$AT91F_CKGR_DißbÀMaöOscûœt‹
 (

1107 
AT91PS_CKGR
 
pCKGR
)

1109 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_MOSCEN
;

1110 
	}
}

1116 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscSèπUpTime
 (

1117 
AT91PS_CKGR
 
pCKGR
,

1118 
°¨tup_time
,

1119 
¶owClock
)

1121 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_OSCOUNT
;

1122 
pCKGR
->
CKGR_MOR
 |((
¶owClock
 * 
°¨tup_time
)/(8*1000000)) << 8;

1123 
	}
}

1129 
__ölöe
 
	$AT91F_CKGR_GëMaöClockFªqReg
 (

1130 
AT91PS_CKGR
 
pCKGR
)

1132  
pCKGR
->
CKGR_MCFR
;

1133 
	}
}

1139 
__ölöe
 
	$AT91F_CKGR_GëMaöClock
 (

1140 
AT91PS_CKGR
 
pCKGR
,

1141 
¶owClock
)

1143  ((
pCKGR
->
CKGR_MCFR
 & 
AT91C_CKGR_MAINF
Ë* 
¶owClock
) >> 4;

1144 
	}
}

1150 
__ölöe
 
	$AT91F_PMC_CfgMCKReg
 (

1151 
AT91PS_PMC
 
pPMC
,

1152 
mode
)

1154 
pPMC
->
PMC_MCKR
 = 
mode
;

1155 
	}
}

1161 
__ölöe
 
	$AT91F_PMC_GëMCKReg
(

1162 
AT91PS_PMC
 
pPMC
)

1164  
pPMC
->
PMC_MCKR
;

1165 
	}
}

1171 
__ölöe
 
	$AT91F_PMC_GëMa°îClock
 (

1172 
AT91PS_PMC
 
pPMC
,

1173 
AT91PS_CKGR
 
pCKGR
,

1174 
¶owClock
)

1176 
ªg
 = 
pPMC
->
PMC_MCKR
;

1177 
¥esˇÀr
 = (1 << ((
ªg
 & 
AT91C_PMC_PRES
) >> 2));

1178 
∂lDividî
, 
∂lMu…ùlõr
;

1180 
ªg
 & 
AT91C_PMC_CSS
) {

1181 
AT91C_PMC_CSS_SLOW_CLK
:

1182  
¶owClock
 / 
¥esˇÀr
;

1183 
AT91C_PMC_CSS_MAIN_CLK
:

1184  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
¥esˇÀr
;

1185 
AT91C_PMC_CSS_PLL_CLK
:

1186 
ªg
 = 
pCKGR
->
CKGR_PLLR
;

1187 
∂lDividî
 = (
ªg
 & 
AT91C_CKGR_DIV
);

1188 
∂lMu…ùlõr
 = ((
ªg
 & 
AT91C_CKGR_MUL
) >> 16) + 1;

1189  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

1192 
	}
}

1198 
__ölöe
 
	$AT91F_PMC_E«bÀPCK
 (

1199 
AT91PS_PMC
 
pPMC
,

1200 
pck
,

1201 
mode
)

1203 
pPMC
->
PMC_PCKR
[
pck
] = 
mode
;

1204 
pPMC
->
PMC_SCER
 = (1 << 
pck
) << 8;

1205 
	}
}

1211 
__ölöe
 
	$AT91F_PMC_DißbÀPCK
 (

1212 
AT91PS_PMC
 
pPMC
,

1213 
pck
)

1215 
pPMC
->
PMC_SCDR
 = (1 << 
pck
) << 8;

1216 
	}
}

1222 
__ölöe
 
	$AT91F_PMC_E«bÀIt
 (

1223 
AT91PS_PMC
 
pPMC
,

1224 
Êag
)

1227 
pPMC
->
PMC_IER
 = 
Êag
;

1228 
	}
}

1234 
__ölöe
 
	$AT91F_PMC_DißbÀIt
 (

1235 
AT91PS_PMC
 
pPMC
,

1236 
Êag
)

1239 
pPMC
->
PMC_IDR
 = 
Êag
;

1240 
	}
}

1246 
__ölöe
 
	$AT91F_PMC_GëSètus
(

1247 
AT91PS_PMC
 
pPMC
)

1249  
pPMC
->
PMC_SR
;

1250 
	}
}

1256 
__ölöe
 
	$AT91F_PMC_GëI¡îru±MaskSètus
(

1257 
AT91PS_PMC
 
pPMC
)

1259  
pPMC
->
PMC_IMR
;

1260 
	}
}

1266 
__ölöe
 
	$AT91F_PMC_IsI¡îru±Masked
(

1267 
AT91PS_PMC
 
pPMC
,

1268 
Êag
)

1270  (
	`AT91F_PMC_GëI¡îru±MaskSètus
(
pPMC
Ë& 
Êag
);

1271 
	}
}

1277 
__ölöe
 
	$AT91F_PMC_IsSètusSë
(

1278 
AT91PS_PMC
 
pPMC
,

1279 
Êag
)

1281  (
	`AT91F_PMC_GëSètus
(
pPMC
Ë& 
Êag
);

1282 
	}
}

1289 
__ölöe
 
	$AT91F_RSTSo·Re£t
(

1290 
AT91PS_RSTC
 
pRSTC
,

1291 
ª£t
)

1293 
pRSTC
->
RSTC_RCR
 = (0xA5000000 | 
ª£t
);

1294 
	}
}

1300 
__ölöe
 
	$AT91F_RSTSëMode
(

1301 
AT91PS_RSTC
 
pRSTC
,

1302 
mode
)

1304 
pRSTC
->
RSTC_RMR
 = (0xA5000000 | 
mode
);

1305 
	}
}

1311 
__ölöe
 
	$AT91F_RSTGëMode
(

1312 
AT91PS_RSTC
 
pRSTC
)

1314  (
pRSTC
->
RSTC_RMR
);

1315 
	}
}

1321 
__ölöe
 
	$AT91F_RSTGëSètus
(

1322 
AT91PS_RSTC
 
pRSTC
)

1324  (
pRSTC
->
RSTC_RSR
);

1325 
	}
}

1331 
__ölöe
 
	$AT91F_RSTIsSo·R°A˘ive
(

1332 
AT91PS_RSTC
 
pRSTC
)

1334  ((
pRSTC
->
RSTC_RSR
Ë& 
AT91C_RSTC_SRCMP
);

1335 
	}
}

1343 
__ölöe
 
	$AT91F_RTTSëTimeBa£
(

1344 
AT91PS_RTTC
 
pRTTC
,

1345 
ms
)

1347 i‡(
ms
 > 2000)

1349 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1350 
pRTTC
->
RTTC_RTMR
 |(((
ms
 << 15) /1000) & 0xFFFF);

1352 
	}
}

1358 
__ölöe
 
	$AT91F_RTTSëPªsˇÀr
(

1359 
AT91PS_RTTC
 
pRTTC
,

1360 
π¥es
)

1362 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1363 
pRTTC
->
RTTC_RTMR
 |(
π¥es
 & 0xFFFF);

1364  (
pRTTC
->
RTTC_RTMR
);

1365 
	}
}

1371 
__ölöe
 
	$AT91F_RTTRe°¨t
(

1372 
AT91PS_RTTC
 
pRTTC
)

1374 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTRST
;

1375 
	}
}

1382 
__ölöe
 
	$AT91F_RTTSëAœrmINT
(

1383 
AT91PS_RTTC
 
pRTTC
)

1385 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_ALMIEN
;

1386 
	}
}

1392 
__ölöe
 
	$AT91F_RTTCÀ¨AœrmINT
(

1393 
AT91PS_RTTC
 
pRTTC
)

1395 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_ALMIEN
;

1396 
	}
}

1402 
__ölöe
 
	$AT91F_RTTSëRâIncINT
(

1403 
AT91PS_RTTC
 
pRTTC
)

1405 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTINCIEN
;

1406 
	}
}

1412 
__ölöe
 
	$AT91F_RTTCÀ¨RâIncINT
(

1413 
AT91PS_RTTC
 
pRTTC
)

1415 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_RTTINCIEN
;

1416 
	}
}

1422 
__ölöe
 
	$AT91F_RTTSëAœrmVÆue
(

1423 
AT91PS_RTTC
 
pRTTC
, 
Æ¨m
)

1425 
pRTTC
->
RTTC_RTAR
 = 
Æ¨m
;

1426 
	}
}

1432 
__ölöe
 
	$AT91F_RTTGëAœrmVÆue
(

1433 
AT91PS_RTTC
 
pRTTC
)

1435 (
pRTTC
->
RTTC_RTAR
);

1436 
	}
}

1442 
__ölöe
 
	$AT91F_RTTGëSètus
(

1443 
AT91PS_RTTC
 
pRTTC
)

1445 (
pRTTC
->
RTTC_RTSR
);

1446 
	}
}

1452 
__ölöe
 
	$AT91F_RTTRódVÆue
(

1453 
AT91PS_RTTC
 
pRTTC
)

1455 vﬁ©ûê
vÆ1
,
vÆ2
;

1458 
vÆ1
 = 
pRTTC
->
RTTC_RTVR
;

1459 
vÆ2
 = 
pRTTC
->
RTTC_RTVR
;

1461 
vÆ1
 !
vÆ2
);

1462 (
vÆ1
);

1463 
	}
}

1471 
__ölöe
 
	$AT91F_PITInô
(

1472 
AT91PS_PITC
 
pPITC
,

1473 
≥riod
,

1474 
pô_‰equícy
)

1476 
pPITC
->
PITC_PIMR
 = 
≥riod
? (≥riod * 
pô_‰equícy
 + 8) >> 4 : 0;

1477 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITEN
;

1478 
	}
}

1484 
__ölöe
 
	$AT91F_PITSëPIV
(

1485 
AT91PS_PITC
 
pPITC
,

1486 
piv
)

1488 
pPITC
->
PITC_PIMR
 = 
piv
 | (pPITC->PITC_PIMR & (
AT91C_PITC_PITEN
 | 
AT91C_PITC_PITIEN
));

1489 
	}
}

1495 
__ölöe
 
	$AT91F_PITE«bÀI¡
(

1496 
AT91PS_PITC
 
pPITC
)

1498 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITIEN
;

1499 
	}
}

1505 
__ölöe
 
	$AT91F_PITDißbÀI¡
(

1506 
AT91PS_PITC
 
pPITC
)

1508 
pPITC
->
PITC_PIMR
 &~
AT91C_PITC_PITIEN
;

1509 
	}
}

1515 
__ölöe
 
	$AT91F_PITGëMode
(

1516 
AT91PS_PITC
 
pPITC
)

1518 (
pPITC
->
PITC_PIMR
);

1519 
	}
}

1525 
__ölöe
 
	$AT91F_PITGëSètus
(

1526 
AT91PS_PITC
 
pPITC
)

1528 (
pPITC
->
PITC_PISR
);

1529 
	}
}

1535 
__ölöe
 
	$AT91F_PITGëPIIR
(

1536 
AT91PS_PITC
 
pPITC
)

1538 (
pPITC
->
PITC_PIIR
);

1539 
	}
}

1545 
__ölöe
 
	$AT91F_PITGëPIVR
(

1546 
AT91PS_PITC
 
pPITC
)

1548 (
pPITC
->
PITC_PIVR
);

1549 
	}
}

1557 
__ölöe
 
	$AT91F_WDTSëMode
(

1558 
AT91PS_WDTC
 
pWDTC
,

1559 
Mode
)

1561 
pWDTC
->
WDTC_WDMR
 = 
Mode
;

1562 
	}
}

1568 
__ölöe
 
	$AT91F_WDTRe°¨t
(

1569 
AT91PS_WDTC
 
pWDTC
)

1571 
pWDTC
->
WDTC_WDCR
 = 0xA5000001;

1572 
	}
}

1578 
__ölöe
 
	$AT91F_WDTSGëètus
(

1579 
AT91PS_WDTC
 
pWDTC
)

1581 (
pWDTC
->
WDTC_WDSR
 & 0x3);

1582 
	}
}

1588 
__ölöe
 
	$AT91F_WDTGëPîiod
(
ms
)

1590 i‡((
ms
 < 4) || (ms > 16000))

1592 ((
ms
 << 8) / 1000);

1593 
	}
}

1601 
__ölöe
 
	$AT91F_VREG_E«bÀ_LowPowîMode
(

1602 
AT91PS_VREG
 
pVREG
)

1604 
pVREG
->
VREG_MR
 |
AT91C_VREG_PSTDBY
;

1605 
	}
}

1611 
__ölöe
 
	$AT91F_VREG_DißbÀ_LowPowîMode
(

1612 
AT91PS_VREG
 
pVREG
)

1614 
pVREG
->
VREG_MR
 &~
AT91C_VREG_PSTDBY
;

1615 
	}
}

1619 
	#AT91C_MC_CORRECT_KEY
 (() 0x5A << 24)

1620 

	)

1625 
__ölöe
 
	$AT91F_MC_Rem≠
 ()

1627 
AT91PS_MC
 
pMC
 = (AT91PS_MCË
AT91C_BASE_MC
;

1629 
pMC
->
MC_RCR
 = 
AT91C_MC_RCB
;

1630 
	}
}

1636 
__ölöe
 
	$AT91F_MC_EFC_CfgModeReg
 (

1637 
AT91PS_MC
 
pMC
,

1638 
mode
)

1641 
pMC
->
MC_FMR
 = 
mode
;

1642 
	}
}

1648 
__ölöe
 
	$AT91F_MC_EFC_GëModeReg
(

1649 
AT91PS_MC
 
pMC
)

1651  
pMC
->
MC_FMR
;

1652 
	}
}

1658 
__ölöe
 
	$AT91F_MC_EFC_CompuãFMCN
(

1659 
ma°î_˛ock
)

1661  (
ma°î_˛ock
/1000000 +2);

1662 
	}
}

1668 
__ölöe
 
	$AT91F_MC_EFC_Pîf‹mCmd
 (

1669 
AT91PS_MC
 
pMC
,

1670 
å™s„r_cmd
)

1672 
pMC
->
MC_FCR
 = 
å™s„r_cmd
;

1673 
	}
}

1679 
__ölöe
 
	$AT91F_MC_EFC_GëSètus
(

1680 
AT91PS_MC
 
pMC
)

1682  
pMC
->
MC_FSR
;

1683 
	}
}

1689 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Masked
(

1690 
AT91PS_MC
 
pMC
,

1691 
Êag
)

1693  (
	`AT91F_MC_EFC_GëModeReg
(
pMC
Ë& 
Êag
);

1694 
	}
}

1700 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Së
(

1701 
AT91PS_MC
 
pMC
,

1702 
Êag
)

1704  (
	`AT91F_MC_EFC_GëSètus
(
pMC
Ë& 
Êag
);

1705 
	}
}

1714 
__ölöe
 
	$AT91F_SPI_O≥n
 (

1715 c⁄° 
nuŒ
)

1719 
	}
}

1725 
__ölöe
 
	$AT91F_SPI_CfgCs
 (

1726 
AT91PS_SPI
 
pSPI
,

1727 
cs
,

1728 
vÆ
)

1731 *(
pSPI
->
SPI_CSR
 + 
cs
Ë
vÆ
;

1732 
	}
}

1738 
__ölöe
 
	$AT91F_SPI_E«bÀIt
 (

1739 
AT91PS_SPI
 
pSPI
,

1740 
Êag
)

1743 
pSPI
->
SPI_IER
 = 
Êag
;

1744 
	}
}

1750 
__ölöe
 
	$AT91F_SPI_DißbÀIt
 (

1751 
AT91PS_SPI
 
pSPI
,

1752 
Êag
)

1755 
pSPI
->
SPI_IDR
 = 
Êag
;

1756 
	}
}

1762 
__ölöe
 
	$AT91F_SPI_Re£t
 (

1763 
AT91PS_SPI
 
pSPI


1767 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SWRST
;

1768 
	}
}

1774 
__ölöe
 
	$AT91F_SPI_E«bÀ
 (

1775 
AT91PS_SPI
 
pSPI


1779 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIEN
;

1780 
	}
}

1786 
__ölöe
 
	$AT91F_SPI_DißbÀ
 (

1787 
AT91PS_SPI
 
pSPI


1791 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1792 
	}
}

1798 
__ölöe
 
	$AT91F_SPI_CfgMode
 (

1799 
AT91PS_SPI
 
pSPI
,

1800 
mode
)

1803 
pSPI
->
SPI_MR
 = 
mode
;

1804 
	}
}

1810 
__ölöe
 
	$AT91F_SPI_CfgPCS
 (

1811 
AT91PS_SPI
 
pSPI
,

1812 
PCS_Devi˚
)

1815 
pSPI
->
SPI_MR
 &= 0xFFF0FFFF;

1816 
pSPI
->
SPI_MR
 |–(
PCS_Devi˚
<<16Ë& 
AT91C_SPI_PCS
 );

1817 
	}
}

1823 
__ölöe
 
	$AT91F_SPI_Re˚iveFøme
 (

1824 
AT91PS_SPI
 
pSPI
,

1825 *
pBuf„r
,

1826 
szBuf„r
,

1827 *
pNextBuf„r
,

1828 
szNextBuf„r
 )

1830  
	`AT91F_PDC_Re˚iveFøme
(

1831 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1832 
pBuf„r
,

1833 
szBuf„r
,

1834 
pNextBuf„r
,

1835 
szNextBuf„r
);

1836 
	}
}

1842 
__ölöe
 
	$AT91F_SPI_SídFøme
(

1843 
AT91PS_SPI
 
pSPI
,

1844 *
pBuf„r
,

1845 
szBuf„r
,

1846 *
pNextBuf„r
,

1847 
szNextBuf„r
 )

1849  
	`AT91F_PDC_SídFøme
(

1850 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1851 
pBuf„r
,

1852 
szBuf„r
,

1853 
pNextBuf„r
,

1854 
szNextBuf„r
);

1855 
	}
}

1861 
__ölöe
 
	$AT91F_SPI_Clo£
 (

1862 
AT91PS_SPI
 
pSPI
)

1865 
pSPI
->
SPI_CSR
[0] = 0 ;

1866 
pSPI
->
SPI_CSR
[1] = 0 ;

1867 
pSPI
->
SPI_CSR
[2] = 0 ;

1868 
pSPI
->
SPI_CSR
[3] = 0 ;

1871 
pSPI
->
SPI_MR
 = 0 ;

1874 
pSPI
->
SPI_IDR
 = 0xFFFFFFFF ;

1877 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
));

1880 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1881 
	}
}

1887 
__ölöe
 
	$AT91F_SPI_PutCh¨
 (

1888 
AT91PS_SPI
 
pSPI
,

1889 
ch¨a˘î
,

1890 
cs_numbî
 )

1892 
vÆue_f‹_cs
;

1893 
vÆue_f‹_cs
 = (~(1 << 
cs_numbî
)) & 0xF;

1894 
pSPI
->
SPI_TDR
 = (
ch¨a˘î
 & 0xFFFFË| (
vÆue_f‹_cs
 << 16);

1895 
	}
}

1901 
__ölöe
 
	$AT91F_SPI_GëCh¨
 (

1902 c⁄° 
AT91PS_SPI
 
pSPI
)

1904 ((
pSPI
->
SPI_RDR
) & 0xFFFF);

1905 
	}
}

1911 
__ölöe
 
	$AT91F_SPI_GëI¡îru±MaskSètus
(

1912 
AT91PS_SPI
 
pSpi
)

1914  
pSpi
->
SPI_IMR
;

1915 
	}
}

1921 
__ölöe
 
	$AT91F_SPI_IsI¡îru±Masked
(

1922 
AT91PS_SPI
 
pSpi
,

1923 
Êag
)

1925  (
	`AT91F_SPI_GëI¡îru±MaskSètus
(
pSpi
Ë& 
Êag
);

1926 
	}
}

1935 
	#AT91C_US_ASYNC_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

1936 
AT91C_US_NBSTOP_1_BIT
 + \

1937 
AT91C_US_PAR_NONE
 + \

1938 
AT91C_US_CHRL_8_BITS
 + \

1939 
AT91C_US_CLKS_CLOCK
 )

	)

1942 
	#AT91C_US_ASYNC_SCK_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

1943 
AT91C_US_NBSTOP_1_BIT
 + \

1944 
AT91C_US_PAR_NONE
 + \

1945 
AT91C_US_CHRL_8_BITS
 + \

1946 
AT91C_US_CLKS_EXT
 )

	)

1949 
	#AT91C_US_SYNC_MODE
 ( 
AT91C_US_SYNC
 + \

1950 
AT91C_US_USMODE_NORMAL
 + \

1951 
AT91C_US_NBSTOP_1_BIT
 + \

1952 
AT91C_US_PAR_NONE
 + \

1953 
AT91C_US_CHRL_8_BITS
 + \

1954 
AT91C_US_CLKS_CLOCK
 )

	)

1957 
	#AT91C_US_SCK_USED
 (
AT91C_US_CKLO
 | 
AT91C_US_CLKS_EXT
)

	)

1960 
	#AT91C_US_ISO_READER_MODE
 ( 
AT91C_US_USMODE_ISO7816_0
 + \

1961 
AT91C_US_CLKS_CLOCK
 +\

1962 
AT91C_US_NBSTOP_1_BIT
 + \

1963 
AT91C_US_PAR_EVEN
 + \

1964 
AT91C_US_CHRL_8_BITS
 + \

1965 
AT91C_US_CKLO
 +\

1966 
AT91C_US_OVER
)

	)

1969 
	#AT91C_US_ASYNC_IRDA_MODE
 ( 
AT91C_US_USMODE_IRDA
 + \

1970 
AT91C_US_NBSTOP_1_BIT
 + \

1971 
AT91C_US_PAR_NONE
 + \

1972 
AT91C_US_CHRL_8_BITS
 + \

1973 
AT91C_US_CLKS_CLOCK
 )

	)

1979 
__ölöe
 
	$AT91F_US_Baudøã
 (

1980 c⁄° 
maö_˛ock
,

1981 c⁄° 
baud_øã
)

1983 
baud_vÆue
 = ((
maö_˛ock
*10)/(
baud_øã
 * 16));

1984 i‡((
baud_vÆue
 % 10) >= 5)

1985 
baud_vÆue
 = (baud_value / 10) + 1;

1987 
baud_vÆue
 /= 10;

1988  
baud_vÆue
;

1989 
	}
}

1995 
__ölöe
 
	$AT91F_US_SëBaudøã
 (

1996 
AT91PS_USART
 
pUSART
,

1997 
maöClock
,

1998 
•ìd
)

2001 
pUSART
->
US_BRGR
 = 
	`AT91F_US_Baudøã
(
maöClock
, 
•ìd
);

2002 
	}
}

2008 
__ölöe
 
	$AT91F_US_SëTimegu¨d
 (

2009 
AT91PS_USART
 
pUSART
,

2010 
timegu¨d
)

2013 
pUSART
->
US_TTGR
 = 
timegu¨d
 ;

2014 
	}
}

2020 
__ölöe
 
	$AT91F_US_E«bÀIt
 (

2021 
AT91PS_USART
 
pUSART
,

2022 
Êag
)

2025 
pUSART
->
US_IER
 = 
Êag
;

2026 
	}
}

2032 
__ölöe
 
	$AT91F_US_DißbÀIt
 (

2033 
AT91PS_USART
 
pUSART
,

2034 
Êag
)

2037 
pUSART
->
US_IDR
 = 
Êag
;

2038 
	}
}

2044 
__ölöe
 
	$AT91F_US_C⁄figuª
 (

2045 
AT91PS_USART
 
pUSART
,

2046 
maöClock
,

2047 
mode
 ,

2048 
baudR©e
 ,

2049 
timegu¨d
 )

2052 
pUSART
->
US_IDR
 = () -1;

2055 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RXDIS
 | 
AT91C_US_TXDIS
 ;

2058 
	`AT91F_US_SëBaudøã
(
pUSART
, 
maöClock
, 
baudR©e
);

2061 
	`AT91F_US_SëTimegu¨d
(
pUSART
, 
timegu¨d
);

2064 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2067 
pUSART
->
US_MR
 = 
mode
 ;

2069 
	}
}

2075 
__ölöe
 
	$AT91F_US_E«bÀRx
 (

2076 
AT91PS_USART
 
pUSART
)

2079 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2080 
	}
}

2086 
__ölöe
 
	$AT91F_US_E«bÀTx
 (

2087 
AT91PS_USART
 
pUSART
)

2090 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2091 
	}
}

2097 
__ölöe
 
	$AT91F_US_Re£tRx
 (

2098 
AT91PS_USART
 
pUSART
)

2101 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
;

2103 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2104 
	}
}

2110 
__ölöe
 
	$AT91F_US_Re£tTx
 (

2111 
AT91PS_USART
 
pUSART
)

2114 
pUSART
->
US_CR
 = 
AT91C_US_RSTTX
;

2116 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2117 
	}
}

2123 
__ölöe
 
	$AT91F_US_DißbÀRx
 (

2124 
AT91PS_USART
 
pUSART
)

2127 
pUSART
->
US_CR
 = 
AT91C_US_RXDIS
;

2128 
	}
}

2134 
__ölöe
 
	$AT91F_US_DißbÀTx
 (

2135 
AT91PS_USART
 
pUSART
)

2138 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
;

2139 
	}
}

2145 
__ölöe
 
	$AT91F_US_Clo£
 (

2146 
AT91PS_USART
 
pUSART
)

2149 
pUSART
->
US_BRGR
 = 0 ;

2152 
pUSART
->
US_MR
 = 0 ;

2155 
pUSART
->
US_TTGR
 = 0;

2158 
pUSART
->
US_IDR
 = 0xFFFFFFFF ;

2161 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2164 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
 | 
AT91C_US_RXDIS
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RSTRX
 ;

2165 
	}
}

2171 
__ölöe
 
	$AT91F_US_TxRódy
 (

2172 
AT91PS_USART
 
pUSART
 )

2174  (
pUSART
->
US_CSR
 & 
AT91C_US_TXRDY
);

2175 
	}
}

2181 
__ölöe
 
	$AT91F_US_RxRódy
 (

2182 
AT91PS_USART
 
pUSART
 )

2184  (
pUSART
->
US_CSR
 & 
AT91C_US_RXRDY
);

2185 
	}
}

2191 
__ölöe
 
	$AT91F_US_Eº‹
 (

2192 
AT91PS_USART
 
pUSART
 )

2194  (
pUSART
->
US_CSR
 &

2195 (
AT91C_US_OVRE
 |

2196 
AT91C_US_FRAME
 |

2197 
AT91C_US_PARE
));

2198 
	}
}

2204 
__ölöe
 
	$AT91F_US_PutCh¨
 (

2205 
AT91PS_USART
 
pUSART
,

2206 
ch¨a˘î
 )

2208 
pUSART
->
US_THR
 = (
ch¨a˘î
 & 0x1FF);

2209 
	}
}

2215 
__ölöe
 
	$AT91F_US_GëCh¨
 (

2216 c⁄° 
AT91PS_USART
 
pUSART
)

2218 ((
pUSART
->
US_RHR
) & 0x1FF);

2219 
	}
}

2225 
__ölöe
 
	$AT91F_US_SídFøme
(

2226 
AT91PS_USART
 
pUSART
,

2227 *
pBuf„r
,

2228 
szBuf„r
,

2229 *
pNextBuf„r
,

2230 
szNextBuf„r
 )

2232  
	`AT91F_PDC_SídFøme
(

2233 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2234 
pBuf„r
,

2235 
szBuf„r
,

2236 
pNextBuf„r
,

2237 
szNextBuf„r
);

2238 
	}
}

2244 
__ölöe
 
	$AT91F_US_Re˚iveFøme
 (

2245 
AT91PS_USART
 
pUSART
,

2246 *
pBuf„r
,

2247 
szBuf„r
,

2248 *
pNextBuf„r
,

2249 
szNextBuf„r
 )

2251  
	`AT91F_PDC_Re˚iveFøme
(

2252 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2253 
pBuf„r
,

2254 
szBuf„r
,

2255 
pNextBuf„r
,

2256 
szNextBuf„r
);

2257 
	}
}

2263 
__ölöe
 
	$AT91F_US_SëIrdaFûãr
 (

2264 
AT91PS_USART
 
pUSART
,

2265 
vÆue


2268 
pUSART
->
US_IF
 = 
vÆue
;

2269 
	}
}

2279 
	#AT91C_I2S_ASY_MASTER_TX_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)( +\

2280 
AT91C_SSC_CKS_DIV
 +\

2281 
AT91C_SSC_CKO_CONTINOUS
 +\

2282 
AT91C_SSC_CKG_NONE
 +\

2283 
AT91C_SSC_START_FALL_RF
 +\

2284 
AT91C_SSC_STTOUT
 +\

2285 ((1<<16Ë& 
AT91C_SSC_STTDLY
) +\

2286 ((((
nb_bô_by_¶Ÿ
*
nb_¶Ÿ_by_‰ame
)/2)-1Ë<<24))

	)

2292 
	#AT91C_I2S_ASY_TX_FRAME_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)( +\

2293 (
nb_bô_by_¶Ÿ
-1) +\

2294 
AT91C_SSC_MSBF
 +\

2295 (((
nb_¶Ÿ_by_‰ame
-1)<<8Ë& 
AT91C_SSC_DATNB
) +\

2296 (((
nb_bô_by_¶Ÿ
-1)<<16Ë& 
AT91C_SSC_FSLEN
) +\

2297 
AT91C_SSC_FSOS_NEGATIVE
)

	)

2304 
__ölöe
 
	$AT91F_SSC_SëBaudøã
 (

2305 
AT91PS_SSC
 
pSSC
,

2306 
maöClock
,

2307 
•ìd
)

2309 
baud_vÆue
;

2311 i‡(
•ìd
 == 0)

2312 
baud_vÆue
 = 0;

2315 
baud_vÆue
 = (Ë(
maöClock
 * 10)/(2*
•ìd
);

2316 i‡((
baud_vÆue
 % 10) >= 5)

2317 
baud_vÆue
 = (baud_value / 10) + 1;

2319 
baud_vÆue
 /= 10;

2322 
pSSC
->
SSC_CMR
 = 
baud_vÆue
;

2323 
	}
}

2329 
__ölöe
 
	$AT91F_SSC_C⁄figuª
 (

2330 
AT91PS_SSC
 
pSSC
,

2331 
sy°_˛ock
,

2332 
baud_øã
,

2333 
˛ock_rx
,

2334 
mode_rx
,

2335 
˛ock_tx
,

2336 
mode_tx
)

2339 
pSSC
->
SSC_IDR
 = () -1;

2342 
pSSC
->
SSC_CR
 = 
AT91C_SSC_SWRST
 | 
AT91C_SSC_RXDIS
 | 
AT91C_SSC_TXDIS
 ;

2345 
	`AT91F_SSC_SëBaudøã
(
pSSC
, 
sy°_˛ock
, 
baud_øã
);

2348 
pSSC
->
SSC_RCMR
 = 
˛ock_rx
;

2351 
pSSC
->
SSC_TCMR
 = 
˛ock_tx
;

2354 
pSSC
->
SSC_RFMR
 = 
mode_rx
;

2357 
pSSC
->
SSC_TFMR
 = 
mode_tx
;

2360 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
));

2363 
	}
}

2369 
__ölöe
 
	$AT91F_SSC_E«bÀRx
 (

2370 
AT91PS_SSC
 
pSSC
)

2373 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXEN
;

2374 
	}
}

2380 
__ölöe
 
	$AT91F_SSC_DißbÀRx
 (

2381 
AT91PS_SSC
 
pSSC
)

2384 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXDIS
;

2385 
	}
}

2391 
__ölöe
 
	$AT91F_SSC_E«bÀTx
 (

2392 
AT91PS_SSC
 
pSSC
)

2395 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXEN
;

2396 
	}
}

2402 
__ölöe
 
	$AT91F_SSC_DißbÀTx
 (

2403 
AT91PS_SSC
 
pSSC
)

2406 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXDIS
;

2407 
	}
}

2413 
__ölöe
 
	$AT91F_SSC_E«bÀIt
 (

2414 
AT91PS_SSC
 
pSSC
,

2415 
Êag
)

2418 
pSSC
->
SSC_IER
 = 
Êag
;

2419 
	}
}

2425 
__ölöe
 
	$AT91F_SSC_DißbÀIt
 (

2426 
AT91PS_SSC
 
pSSC
,

2427 
Êag
)

2430 
pSSC
->
SSC_IDR
 = 
Êag
;

2431 
	}
}

2437 
__ölöe
 
	$AT91F_SSC_Re˚iveFøme
 (

2438 
AT91PS_SSC
 
pSSC
,

2439 *
pBuf„r
,

2440 
szBuf„r
,

2441 *
pNextBuf„r
,

2442 
szNextBuf„r
 )

2444  
	`AT91F_PDC_Re˚iveFøme
(

2445 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2446 
pBuf„r
,

2447 
szBuf„r
,

2448 
pNextBuf„r
,

2449 
szNextBuf„r
);

2450 
	}
}

2456 
__ölöe
 
	$AT91F_SSC_SídFøme
(

2457 
AT91PS_SSC
 
pSSC
,

2458 *
pBuf„r
,

2459 
szBuf„r
,

2460 *
pNextBuf„r
,

2461 
szNextBuf„r
 )

2463  
	`AT91F_PDC_SídFøme
(

2464 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2465 
pBuf„r
,

2466 
szBuf„r
,

2467 
pNextBuf„r
,

2468 
szNextBuf„r
);

2469 
	}
}

2475 
__ölöe
 
	$AT91F_SSC_GëI¡îru±MaskSètus
(

2476 
AT91PS_SSC
 
pSsc
)

2478  
pSsc
->
SSC_IMR
;

2479 
	}
}

2485 
__ölöe
 
	$AT91F_SSC_IsI¡îru±Masked
(

2486 
AT91PS_SSC
 
pSsc
,

2487 
Êag
)

2489  (
	`AT91F_SSC_GëI¡îru±MaskSètus
(
pSsc
Ë& 
Êag
);

2490 
	}
}

2499 
__ölöe
 
	$AT91F_TWI_E«bÀIt
 (

2500 
AT91PS_TWI
 
pTWI
,

2501 
Êag
)

2504 
pTWI
->
TWI_IER
 = 
Êag
;

2505 
	}
}

2511 
__ölöe
 
	$AT91F_TWI_DißbÀIt
 (

2512 
AT91PS_TWI
 
pTWI
,

2513 
Êag
)

2516 
pTWI
->
TWI_IDR
 = 
Êag
;

2517 
	}
}

2523 
__ölöe
 
	$AT91F_TWI_C⁄figuª
 ( 
AT91PS_TWI
 
pTWI
 )

2526 
pTWI
->
TWI_IDR
 = () -1;

2529 
pTWI
->
TWI_CR
 = 
AT91C_TWI_SWRST
;

2532 
pTWI
->
TWI_CR
 = 
AT91C_TWI_MSEN
;

2534 
	}
}

2540 
__ölöe
 
	$AT91F_TWI_GëI¡îru±MaskSètus
(

2541 
AT91PS_TWI
 
pTwi
)

2543  
pTwi
->
TWI_IMR
;

2544 
	}
}

2550 
__ölöe
 
	$AT91F_TWI_IsI¡îru±Masked
(

2551 
AT91PS_TWI
 
pTwi
,

2552 
Êag
)

2554  (
	`AT91F_TWI_GëI¡îru±MaskSètus
(
pTwi
Ë& 
Êag
);

2555 
	}
}

2564 
__ölöe
 
	$AT91F_PWMC_GëSètus
(

2565 
AT91PS_PWMC
 
pPWM
)

2567  
pPWM
->
PWMC_SR
;

2568 
	}
}

2574 
__ölöe
 
	$AT91F_PWMC_I¡îru±E«bÀ
(

2575 
AT91PS_PWMC
 
pPwm
,

2576 
Êag
)

2578 
pPwm
->
PWMC_IER
 = 
Êag
;

2579 
	}
}

2585 
__ölöe
 
	$AT91F_PWMC_I¡îru±DißbÀ
(

2586 
AT91PS_PWMC
 
pPwm
,

2587 
Êag
)

2589 
pPwm
->
PWMC_IDR
 = 
Êag
;

2590 
	}
}

2596 
__ölöe
 
	$AT91F_PWMC_GëI¡îru±MaskSètus
(

2597 
AT91PS_PWMC
 
pPwm
)

2599  
pPwm
->
PWMC_IMR
;

2600 
	}
}

2606 
__ölöe
 
	$AT91F_PWMC_IsI¡îru±Masked
(

2607 
AT91PS_PWMC
 
pPWM
,

2608 
Êag
)

2610  (
	`AT91F_PWMC_GëI¡îru±MaskSètus
(
pPWM
Ë& 
Êag
);

2611 
	}
}

2617 
__ölöe
 
	$AT91F_PWMC_IsSètusSë
(

2618 
AT91PS_PWMC
 
pPWM
,

2619 
Êag
)

2621  (
	`AT91F_PWMC_GëSètus
(
pPWM
Ë& 
Êag
);

2622 
	}
}

2628 
__ölöe
 
	$AT91F_PWMC_CfgCh™√l
(

2629 
AT91PS_PWMC
 
pPWM
,

2630 
ch™√lId
,

2631 
mode
,

2632 
≥riod
,

2633 
duty
)

2635 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CMR
 = 
mode
;

2636 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CDTYR
 = 
duty
;

2637 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CPRDR
 = 
≥riod
;

2638 
	}
}

2644 
__ölöe
 
	$AT91F_PWMC_SèπCh™√l
(

2645 
AT91PS_PWMC
 
pPWM
,

2646 
Êag
)

2648 
pPWM
->
PWMC_ENA
 = 
Êag
;

2649 
	}
}

2655 
__ölöe
 
	$AT91F_PWMC_St›Ch™√l
(

2656 
AT91PS_PWMC
 
pPWM
,

2657 
Êag
)

2659 
pPWM
->
PWMC_DIS
 = 
Êag
;

2660 
	}
}

2666 
__ölöe
 
	$AT91F_PWMC_Upd©eCh™√l
(

2667 
AT91PS_PWMC
 
pPWM
,

2668 
ch™√lId
,

2669 
upd©e
)

2671 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CUPDR
 = 
upd©e
;

2672 
	}
}

2681 
__ölöe
 
	$AT91F_UDP_E«bÀIt
 (

2682 
AT91PS_UDP
 
pUDP
,

2683 
Êag
)

2686 
pUDP
->
UDP_IER
 = 
Êag
;

2687 
	}
}

2693 
__ölöe
 
	$AT91F_UDP_DißbÀIt
 (

2694 
AT91PS_UDP
 
pUDP
,

2695 
Êag
)

2698 
pUDP
->
UDP_IDR
 = 
Êag
;

2699 
	}
}

2705 
__ölöe
 
	$AT91F_UDP_SëAddªss
 (

2706 
AT91PS_UDP
 
pUDP
,

2707 
addªss
)

2709 
pUDP
->
UDP_FADDR
 = (
AT91C_UDP_FEN
 | 
addªss
);

2710 
	}
}

2716 
__ölöe
 
	$AT91F_UDP_E«bÀEp
 (

2717 
AT91PS_UDP
 
pUDP
,

2718 
ídpoöt
)

2720 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_EPEDS
;

2721 
	}
}

2727 
__ölöe
 
	$AT91F_UDP_DißbÀEp
 (

2728 
AT91PS_UDP
 
pUDP
,

2729 
ídpoöt
)

2731 
pUDP
->
UDP_CSR
[
ídpoöt
] &~
AT91C_UDP_EPEDS
;

2732 
	}
}

2738 
__ölöe
 
	$AT91F_UDP_SëSèã
 (

2739 
AT91PS_UDP
 
pUDP
,

2740 
Êag
)

2742 
pUDP
->
UDP_GLBSTATE
 &~(
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
);

2743 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2744 
	}
}

2750 
__ölöe
 
	$AT91F_UDP_GëSèã
 (

2751 
AT91PS_UDP
 
pUDP
)

2753  (
pUDP
->
UDP_GLBSTATE
 & (
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
));

2754 
	}
}

2760 
__ölöe
 
	$AT91F_UDP_Re£tEp
 (

2761 
AT91PS_UDP
 
pUDP
,

2762 
Êag
)

2764 
pUDP
->
UDP_RSTEP
 = 
Êag
;

2765 
pUDP
->
UDP_RSTEP
 = 0;

2766 
	}
}

2772 
__ölöe
 
	$AT91F_UDP_EpSèŒ
(

2773 
AT91PS_UDP
 
pUDP
,

2774 
ídpoöt
)

2776 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_FORCESTALL
;

2777 
	}
}

2783 
__ölöe
 
	$AT91F_UDP_EpWrôe
(

2784 
AT91PS_UDP
 
pUDP
,

2785 
ídpoöt
,

2786 
vÆue
)

2788 
pUDP
->
UDP_FDR
[
ídpoöt
] = 
vÆue
;

2789 
	}
}

2795 
__ölöe
 
	$AT91F_UDP_EpRód
(

2796 
AT91PS_UDP
 
pUDP
,

2797 
ídpoöt
)

2799  
pUDP
->
UDP_FDR
[
ídpoöt
];

2800 
	}
}

2806 
__ölöe
 
	$AT91F_UDP_EpEndOfWr
(

2807 
AT91PS_UDP
 
pUDP
,

2808 
ídpoöt
)

2810 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_TXPKTRDY
;

2811 
	}
}

2817 
__ölöe
 
	$AT91F_UDP_EpCÀ¨
(

2818 
AT91PS_UDP
 
pUDP
,

2819 
ídpoöt
,

2820 
Êag
)

2822 
pUDP
->
UDP_CSR
[
ídpoöt
] &~(
Êag
);

2823 
	}
}

2829 
__ölöe
 
	$AT91F_UDP_EpSë
(

2830 
AT91PS_UDP
 
pUDP
,

2831 
ídpoöt
,

2832 
Êag
)

2834 
pUDP
->
UDP_CSR
[
ídpoöt
] |
Êag
;

2835 
	}
}

2841 
__ölöe
 
	$AT91F_UDP_EpSètus
(

2842 
AT91PS_UDP
 
pUDP
,

2843 
ídpoöt
)

2845  
pUDP
->
UDP_CSR
[
ídpoöt
];

2846 
	}
}

2852 
__ölöe
 
	$AT91F_UDP_GëI¡îru±MaskSètus
(

2853 
AT91PS_UDP
 
pUdp
)

2855  
pUdp
->
UDP_IMR
;

2856 
	}
}

2862 
__ölöe
 
	$AT91F_UDP_IsI¡îru±Masked
(

2863 
AT91PS_UDP
 
pUdp
,

2864 
Êag
)

2866  (
	`AT91F_UDP_GëI¡îru±MaskSètus
(
pUdp
Ë& 
Êag
);

2867 
	}
}

2876 
__ölöe
 
	$AT91F_TC_I¡îru±E«bÀ
(

2877 
AT91PS_TC
 
pTc
,

2878 
Êag
)

2880 
pTc
->
TC_IER
 = 
Êag
;

2881 
	}
}

2887 
__ölöe
 
	$AT91F_TC_I¡îru±DißbÀ
(

2888 
AT91PS_TC
 
pTc
,

2889 
Êag
)

2891 
pTc
->
TC_IDR
 = 
Êag
;

2892 
	}
}

2898 
__ölöe
 
	$AT91F_TC_GëI¡îru±MaskSètus
(

2899 
AT91PS_TC
 
pTc
)

2901  
pTc
->
TC_IMR
;

2902 
	}
}

2908 
__ölöe
 
	$AT91F_TC_IsI¡îru±Masked
(

2909 
AT91PS_TC
 
pTc
,

2910 
Êag
)

2912  (
	`AT91F_TC_GëI¡îru±MaskSètus
(
pTc
Ë& 
Êag
);

2913 
	}
}

2918 
	#STANDARD_FORMAT
 0

	)

2919 
	#EXTENDED_FORMAT
 1

	)

2925 
__ölöe
 
	$AT91F_InôMaûboxRegi°îs
(
AT91PS_CAN_MB
 
CAN_Maûbox
,

2926 
mode_ªg
,

2927 
ac˚±™˚_mask_ªg
,

2928 
id_ªg
,

2929 
d©a_low_ªg
,

2930 
d©a_high_ªg
,

2931 
c⁄åﬁ_ªg
)

2933 
CAN_Maûbox
->
CAN_MB_MCR
 = 0x0;

2934 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode_ªg
;

2935 
CAN_Maûbox
->
CAN_MB_MAM
 = 
ac˚±™˚_mask_ªg
;

2936 
CAN_Maûbox
->
CAN_MB_MID
 = 
id_ªg
;

2937 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a_low_ªg
;

2938 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a_high_ªg
;

2939 
CAN_Maûbox
->
CAN_MB_MCR
 = 
c⁄åﬁ_ªg
;

2940 
	}
}

2946 
__ölöe
 
	$AT91F_E«bÀCAN
(

2947 
AT91PS_CAN
 
pCAN
)

2949 
pCAN
->
CAN_MR
 |
AT91C_CAN_CANEN
;

2952  (
pCAN
->
CAN_SR
 & 
AT91C_CAN_WAKEUP
) != AT91C_CAN_WAKEUP );

2953 
	}
}

2959 
__ölöe
 
	$AT91F_DißbÀCAN
(

2960 
AT91PS_CAN
 
pCAN
)

2962 
pCAN
->
CAN_MR
 &~
AT91C_CAN_CANEN
;

2963 
	}
}

2969 
__ölöe
 
	$AT91F_CAN_E«bÀIt
 (

2970 
AT91PS_CAN
 
pCAN
,

2971 
Êag
)

2974 
pCAN
->
CAN_IER
 = 
Êag
;

2975 
	}
}

2981 
__ölöe
 
	$AT91F_CAN_DißbÀIt
 (

2982 
AT91PS_CAN
 
pCAN
,

2983 
Êag
)

2986 
pCAN
->
CAN_IDR
 = 
Êag
;

2987 
	}
}

2993 
__ölöe
 
	$AT91F_CAN_GëSètus
(

2994 
AT91PS_CAN
 
pCAN
)

2996  
pCAN
->
CAN_SR
;

2997 
	}
}

3003 
__ölöe
 
	$AT91F_CAN_GëI¡îru±MaskSètus
(

3004 
AT91PS_CAN
 
pCAN
)

3006  
pCAN
->
CAN_IMR
;

3007 
	}
}

3013 
__ölöe
 
	$AT91F_CAN_IsI¡îru±Masked
(

3014 
AT91PS_CAN
 
pCAN
,

3015 
Êag
)

3017  (
	`AT91F_CAN_GëI¡îru±MaskSètus
(
pCAN
Ë& 
Êag
);

3018 
	}
}

3024 
__ölöe
 
	$AT91F_CAN_IsSètusSë
(

3025 
AT91PS_CAN
 
pCAN
,

3026 
Êag
)

3028  (
	`AT91F_CAN_GëSètus
(
pCAN
Ë& 
Êag
);

3029 
	}
}

3035 
__ölöe
 
	$AT91F_CAN_CfgModeReg
 (

3036 
AT91PS_CAN
 
pCAN
,

3037 
mode
)

3040 
pCAN
->
CAN_MR
 = 
mode
;

3041 
	}
}

3047 
__ölöe
 
	$AT91F_CAN_GëModeReg
 (

3048 
AT91PS_CAN
 
pCAN


3051  
pCAN
->
CAN_MR
;

3052 
	}
}

3058 
__ölöe
 
	$AT91F_CAN_CfgBaudøãReg
 (

3059 
AT91PS_CAN
 
pCAN
,

3060 
baudøã_cfg
)

3063 
pCAN
->
CAN_BR
 = 
baudøã_cfg
;

3064 
	}
}

3070 
__ölöe
 
	$AT91F_CAN_GëBaudøã
 (

3071 
AT91PS_CAN
 
pCAN


3074  
pCAN
->
CAN_BR
;

3075 
	}
}

3081 
__ölöe
 
	$AT91F_CAN_GëI¡î«lCou¡î
 (

3082 
AT91PS_CAN
 
pCAN


3085  
pCAN
->
CAN_TIM
;

3086 
	}
}

3092 
__ölöe
 
	$AT91F_CAN_GëTime°amp
 (

3093 
AT91PS_CAN
 
pCAN


3096  
pCAN
->
CAN_TIMESTP
;

3097 
	}
}

3103 
__ölöe
 
	$AT91F_CAN_GëEº‹Cou¡î
 (

3104 
AT91PS_CAN
 
pCAN


3107  
pCAN
->
CAN_ECR
;

3108 
	}
}

3114 
__ölöe
 
	$AT91F_CAN_InôTøns„rReque°
 (

3115 
AT91PS_CAN
 
pCAN
,

3116 
å™s„r_cmd
)

3118 
pCAN
->
CAN_TCR
 = 
å™s„r_cmd
;

3119 
	}
}

3125 
__ölöe
 
	$AT91F_CAN_InôAb‹tReque°
 (

3126 
AT91PS_CAN
 
pCAN
,

3127 
ab‹t_cmd
)

3129 
pCAN
->
CAN_ACR
 = 
ab‹t_cmd
;

3130 
	}
}

3136 
__ölöe
 
	$AT91F_CAN_CfgMesßgeModeReg
 (

3137 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3138 
mode
)

3140 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode
;

3141 
	}
}

3147 
__ölöe
 
	$AT91F_CAN_GëMesßgeModeReg
 (

3148 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3150  
CAN_Maûbox
->
CAN_MB_MMR
;

3151 
	}
}

3158 
__ölöe
 
	$AT91F_CAN_CfgMesßgeIDReg
 (

3159 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3160 
id
,

3161 
vîsi⁄
)

3163 if(
vîsi⁄
==0)

3164 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
<<18;

3166 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
 | (1<<29);

3167 
	}
}

3173 
__ölöe
 
	$AT91F_CAN_GëMesßgeIDReg
 (

3174 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3176  
CAN_Maûbox
->
CAN_MB_MID
;

3177 
	}
}

3183 
__ölöe
 
	$AT91F_CAN_CfgMesßgeAc˚±™˚MaskReg
 (

3184 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3185 
mask
)

3187 
CAN_Maûbox
->
CAN_MB_MAM
 = 
mask
;

3188 
	}
}

3194 
__ölöe
 
	$AT91F_CAN_GëMesßgeAc˚±™˚MaskReg
 (

3195 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3197  
CAN_Maûbox
->
CAN_MB_MAM
;

3198 
	}
}

3204 
__ölöe
 
	$AT91F_CAN_GëFamûyID
 (

3205 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3207  
CAN_Maûbox
->
CAN_MB_MFID
;

3208 
	}
}

3214 
__ölöe
 
	$AT91F_CAN_CfgMesßgeCålReg
 (

3215 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3216 
mesßge_˘æ_cmd
)

3218 
CAN_Maûbox
->
CAN_MB_MCR
 = 
mesßge_˘æ_cmd
;

3219 
	}
}

3225 
__ölöe
 
	$AT91F_CAN_GëMesßgeSètus
 (

3226 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3228  
CAN_Maûbox
->
CAN_MB_MSR
;

3229 
	}
}

3235 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aLow
 (

3236 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3237 
d©a
)

3239 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a
;

3240 
	}
}

3246 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aLow
 (

3247 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3249  
CAN_Maûbox
->
CAN_MB_MDL
;

3250 
	}
}

3256 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aHigh
 (

3257 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3258 
d©a
)

3260 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a
;

3261 
	}
}

3267 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aHigh
 (

3268 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3270  
CAN_Maûbox
->
CAN_MB_MDH
;

3271 
	}
}

3277 
__ölöe
 
	$AT91F_CAN_O≥n
 (

3278 c⁄° 
nuŒ
)

3282 
	}
}

3290 
__ölöe
 
	$AT91F_ADC_E«bÀIt
 (

3291 
AT91PS_ADC
 
pADC
,

3292 
Êag
)

3295 
pADC
->
ADC_IER
 = 
Êag
;

3296 
	}
}

3302 
__ölöe
 
	$AT91F_ADC_DißbÀIt
 (

3303 
AT91PS_ADC
 
pADC
,

3304 
Êag
)

3307 
pADC
->
ADC_IDR
 = 
Êag
;

3308 
	}
}

3314 
__ölöe
 
	$AT91F_ADC_GëSètus
(

3315 
AT91PS_ADC
 
pADC
)

3317  
pADC
->
ADC_SR
;

3318 
	}
}

3324 
__ölöe
 
	$AT91F_ADC_GëI¡îru±MaskSètus
(

3325 
AT91PS_ADC
 
pADC
)

3327  
pADC
->
ADC_IMR
;

3328 
	}
}

3334 
__ölöe
 
	$AT91F_ADC_IsI¡îru±Masked
(

3335 
AT91PS_ADC
 
pADC
,

3336 
Êag
)

3338  (
	`AT91F_ADC_GëI¡îru±MaskSètus
(
pADC
Ë& 
Êag
);

3339 
	}
}

3345 
__ölöe
 
	$AT91F_ADC_IsSètusSë
(

3346 
AT91PS_ADC
 
pADC
,

3347 
Êag
)

3349  (
	`AT91F_ADC_GëSètus
(
pADC
Ë& 
Êag
);

3350 
	}
}

3356 
__ölöe
 
	$AT91F_ADC_CfgModeReg
 (

3357 
AT91PS_ADC
 
pADC
,

3358 
mode
)

3361 
pADC
->
ADC_MR
 = 
mode
;

3362 
	}
}

3368 
__ölöe
 
	$AT91F_ADC_GëModeReg
 (

3369 
AT91PS_ADC
 
pADC


3372  
pADC
->
ADC_MR
;

3373 
	}
}

3379 
__ölöe
 
	$AT91F_ADC_CfgTimögs
 (

3380 
AT91PS_ADC
 
pADC
,

3381 
mck_˛ock
,

3382 
adc_˛ock
,

3383 
°¨tup_time
,

3384 
ßm∂e_™d_hﬁd_time
)

3386 
¥esˇl
,
°¨tup
,
shtim
;

3388 
¥esˇl
 = 
mck_˛ock
/(2*
adc_˛ock
) - 1;

3389 
°¨tup
 = 
adc_˛ock
*
°¨tup_time
/8 - 1;

3390 
shtim
 = 
adc_˛ock
*
ßm∂e_™d_hﬁd_time
/1000 - 1;

3393 
pADC
->
ADC_MR
 = ( (
¥esˇl
<<8Ë& 
AT91C_ADC_PRESCAL
Ë| ( (
°¨tup
<<16Ë& 
AT91C_ADC_STARTUP
Ë| ( (
shtim
<<24Ë& 
AT91C_ADC_SHTIM
);

3394 
	}
}

3400 
__ölöe
 
	$AT91F_ADC_E«bÀCh™√l
 (

3401 
AT91PS_ADC
 
pADC
,

3402 
ch™√l
)

3405 
pADC
->
ADC_CHER
 = 
ch™√l
;

3406 
	}
}

3412 
__ölöe
 
	$AT91F_ADC_DißbÀCh™√l
 (

3413 
AT91PS_ADC
 
pADC
,

3414 
ch™√l
)

3417 
pADC
->
ADC_CHDR
 = 
ch™√l
;

3418 
	}
}

3424 
__ölöe
 
	$AT91F_ADC_GëCh™√lSètus
 (

3425 
AT91PS_ADC
 
pADC


3428  
pADC
->
ADC_CHSR
;

3429 
	}
}

3435 
__ölöe
 
	$AT91F_ADC_SèπC⁄vîsi⁄
 (

3436 
AT91PS_ADC
 
pADC


3439 
pADC
->
ADC_CR
 = 
AT91C_ADC_START
;

3440 
	}
}

3446 
__ölöe
 
	$AT91F_ADC_So·Re£t
 (

3447 
AT91PS_ADC
 
pADC


3450 
pADC
->
ADC_CR
 = 
AT91C_ADC_SWRST
;

3451 
	}
}

3457 
__ölöe
 
	$AT91F_ADC_GëLa°C⁄vîãdD©a
 (

3458 
AT91PS_ADC
 
pADC


3461  
pADC
->
ADC_LCDR
;

3462 
	}
}

3468 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH0
 (

3469 
AT91PS_ADC
 
pADC


3472  
pADC
->
ADC_CDR0
;

3473 
	}
}

3479 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH1
 (

3480 
AT91PS_ADC
 
pADC


3483  
pADC
->
ADC_CDR1
;

3484 
	}
}

3490 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH2
 (

3491 
AT91PS_ADC
 
pADC


3494  
pADC
->
ADC_CDR2
;

3495 
	}
}

3501 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH3
 (

3502 
AT91PS_ADC
 
pADC


3505  
pADC
->
ADC_CDR3
;

3506 
	}
}

3512 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH4
 (

3513 
AT91PS_ADC
 
pADC


3516  
pADC
->
ADC_CDR4
;

3517 
	}
}

3523 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH5
 (

3524 
AT91PS_ADC
 
pADC


3527  
pADC
->
ADC_CDR5
;

3528 
	}
}

3534 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH6
 (

3535 
AT91PS_ADC
 
pADC


3538  
pADC
->
ADC_CDR6
;

3539 
	}
}

3545 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH7
 (

3546 
AT91PS_ADC
 
pADC


3549  
pADC
->
ADC_CDR7
;

3550 
	}
}

3559 
__ölöe
 
	$AT91F_AES_E«bÀIt
 (

3560 
AT91PS_AES
 
pAES
,

3561 
Êag
)

3564 
pAES
->
AES_IER
 = 
Êag
;

3565 
	}
}

3571 
__ölöe
 
	$AT91F_AES_DißbÀIt
 (

3572 
AT91PS_AES
 
pAES
,

3573 
Êag
)

3576 
pAES
->
AES_IDR
 = 
Êag
;

3577 
	}
}

3583 
__ölöe
 
	$AT91F_AES_GëSètus
(

3584 
AT91PS_AES
 
pAES
)

3586  
pAES
->
AES_ISR
;

3587 
	}
}

3593 
__ölöe
 
	$AT91F_AES_GëI¡îru±MaskSètus
(

3594 
AT91PS_AES
 
pAES
)

3596  
pAES
->
AES_IMR
;

3597 
	}
}

3603 
__ölöe
 
	$AT91F_AES_IsI¡îru±Masked
(

3604 
AT91PS_AES
 
pAES
,

3605 
Êag
)

3607  (
	`AT91F_AES_GëI¡îru±MaskSètus
(
pAES
Ë& 
Êag
);

3608 
	}
}

3614 
__ölöe
 
	$AT91F_AES_IsSètusSë
(

3615 
AT91PS_AES
 
pAES
,

3616 
Êag
)

3618  (
	`AT91F_AES_GëSètus
(
pAES
Ë& 
Êag
);

3619 
	}
}

3625 
__ölöe
 
	$AT91F_AES_CfgModeReg
 (

3626 
AT91PS_AES
 
pAES
,

3627 
mode
)

3630 
pAES
->
AES_MR
 = 
mode
;

3631 
	}
}

3637 
__ölöe
 
	$AT91F_AES_GëModeReg
 (

3638 
AT91PS_AES
 
pAES


3641  
pAES
->
AES_MR
;

3642 
	}
}

3648 
__ölöe
 
	$AT91F_AES_SèπPro˚ssög
 (

3649 
AT91PS_AES
 
pAES


3652 
pAES
->
AES_CR
 = 
AT91C_AES_START
;

3653 
	}
}

3659 
__ölöe
 
	$AT91F_AES_So·Re£t
 (

3660 
AT91PS_AES
 
pAES


3663 
pAES
->
AES_CR
 = 
AT91C_AES_SWRST
;

3664 
	}
}

3670 
__ölöe
 
	$AT91F_AES_LﬂdNewSìd
 (

3671 
AT91PS_AES
 
pAES


3674 
pAES
->
AES_CR
 = 
AT91C_AES_LOADSEED
;

3675 
	}
}

3681 
__ölöe
 
	$AT91F_AES_SëCry±oKey
 (

3682 
AT91PS_AES
 
pAES
,

3683 
ödex
,

3684 
keyw‹d


3687 
pAES
->
AES_KEYWxR
[
ödex
] = 
keyw‹d
;

3688 
	}
}

3694 
__ölöe
 
	$AT91F_AES_I≈utD©a
 (

3695 
AT91PS_AES
 
pAES
,

3696 
ödex
,

3697 
öd©a


3700 
pAES
->
AES_IDATAxR
[
ödex
] = 
öd©a
;

3701 
	}
}

3707 
__ölöe
 
	$AT91F_AES_GëOuçutD©a
 (

3708 
AT91PS_AES
 
pAES
,

3709 
ödex


3712  
pAES
->
AES_ODATAxR
[
ödex
];

3713 
	}
}

3719 
__ölöe
 
	$AT91F_AES_SëInôüliz©i⁄Ve˘‹
 (

3720 
AT91PS_AES
 
pAES
,

3721 
ödex
,

3722 
öôve˘‹


3725 
pAES
->
AES_IVxR
[
ödex
] = 
öôve˘‹
;

3726 
	}
}

3735 
__ölöe
 
	$AT91F_TDES_E«bÀIt
 (

3736 
AT91PS_TDES
 
pTDES
,

3737 
Êag
)

3740 
pTDES
->
TDES_IER
 = 
Êag
;

3741 
	}
}

3747 
__ölöe
 
	$AT91F_TDES_DißbÀIt
 (

3748 
AT91PS_TDES
 
pTDES
,

3749 
Êag
)

3752 
pTDES
->
TDES_IDR
 = 
Êag
;

3753 
	}
}

3759 
__ölöe
 
	$AT91F_TDES_GëSètus
(

3760 
AT91PS_TDES
 
pTDES
)

3762  
pTDES
->
TDES_ISR
;

3763 
	}
}

3769 
__ölöe
 
	$AT91F_TDES_GëI¡îru±MaskSètus
(

3770 
AT91PS_TDES
 
pTDES
)

3772  
pTDES
->
TDES_IMR
;

3773 
	}
}

3779 
__ölöe
 
	$AT91F_TDES_IsI¡îru±Masked
(

3780 
AT91PS_TDES
 
pTDES
,

3781 
Êag
)

3783  (
	`AT91F_TDES_GëI¡îru±MaskSètus
(
pTDES
Ë& 
Êag
);

3784 
	}
}

3790 
__ölöe
 
	$AT91F_TDES_IsSètusSë
(

3791 
AT91PS_TDES
 
pTDES
,

3792 
Êag
)

3794  (
	`AT91F_TDES_GëSètus
(
pTDES
Ë& 
Êag
);

3795 
	}
}

3801 
__ölöe
 
	$AT91F_TDES_CfgModeReg
 (

3802 
AT91PS_TDES
 
pTDES
,

3803 
mode
)

3806 
pTDES
->
TDES_MR
 = 
mode
;

3807 
	}
}

3813 
__ölöe
 
	$AT91F_TDES_GëModeReg
 (

3814 
AT91PS_TDES
 
pTDES


3817  
pTDES
->
TDES_MR
;

3818 
	}
}

3824 
__ölöe
 
	$AT91F_TDES_SèπPro˚ssög
 (

3825 
AT91PS_TDES
 
pTDES


3828 
pTDES
->
TDES_CR
 = 
AT91C_TDES_START
;

3829 
	}
}

3835 
__ölöe
 
	$AT91F_TDES_So·Re£t
 (

3836 
AT91PS_TDES
 
pTDES


3839 
pTDES
->
TDES_CR
 = 
AT91C_TDES_SWRST
;

3840 
	}
}

3846 
__ölöe
 
	$AT91F_TDES_SëCry±oKey1
 (

3847 
AT91PS_TDES
 
pTDES
,

3848 
ödex
,

3849 
keyw‹d


3852 
pTDES
->
TDES_KEY1WxR
[
ödex
] = 
keyw‹d
;

3853 
	}
}

3859 
__ölöe
 
	$AT91F_TDES_SëCry±oKey2
 (

3860 
AT91PS_TDES
 
pTDES
,

3861 
ödex
,

3862 
keyw‹d


3865 
pTDES
->
TDES_KEY2WxR
[
ödex
] = 
keyw‹d
;

3866 
	}
}

3872 
__ölöe
 
	$AT91F_TDES_SëCry±oKey3
 (

3873 
AT91PS_TDES
 
pTDES
,

3874 
ödex
,

3875 
keyw‹d


3878 
pTDES
->
TDES_KEY3WxR
[
ödex
] = 
keyw‹d
;

3879 
	}
}

3885 
__ölöe
 
	$AT91F_TDES_I≈utD©a
 (

3886 
AT91PS_TDES
 
pTDES
,

3887 
ödex
,

3888 
öd©a


3891 
pTDES
->
TDES_IDATAxR
[
ödex
] = 
öd©a
;

3892 
	}
}

3898 
__ölöe
 
	$AT91F_TDES_GëOuçutD©a
 (

3899 
AT91PS_TDES
 
pTDES
,

3900 
ödex


3903  
pTDES
->
TDES_ODATAxR
[
ödex
];

3904 
	}
}

3910 
__ölöe
 
	$AT91F_TDES_SëInôüliz©i⁄Ve˘‹
 (

3911 
AT91PS_TDES
 
pTDES
,

3912 
ödex
,

3913 
öôve˘‹


3916 
pTDES
->
TDES_IVxR
[
ödex
] = 
öôve˘‹
;

3917 
	}
}

3923 
__ölöe
 
	$AT91F_DBGU_CfgPMC
 ()

3925 
	`AT91F_PMC_E«bÀPîùhClock
(

3926 
AT91C_BASE_PMC
,

3927 ((Ë1 << 
AT91C_ID_SYS
));

3928 
	}
}

3934 
__ölöe
 
	$AT91F_DBGU_CfgPIO
 ()

3937 
	`AT91F_PIO_CfgPîùh
(

3938 
AT91C_BASE_PIOA
,

3939 ((Ë
AT91C_PA27_DRXD
 ) |

3940 ((Ë
AT91C_PA28_DTXD
 ),

3942 
	}
}

3948 
__ölöe
 
	$AT91F_PMC_CfgPMC
 ()

3950 
	`AT91F_PMC_E«bÀPîùhClock
(

3951 
AT91C_BASE_PMC
,

3952 ((Ë1 << 
AT91C_ID_SYS
));

3953 
	}
}

3959 
__ölöe
 
	$AT91F_PMC_CfgPIO
 ()

3962 
	`AT91F_PIO_CfgPîùh
(

3963 
AT91C_BASE_PIOB
,

3964 ((Ë
AT91C_PB30_PCK2
 ) |

3965 ((Ë
AT91C_PB29_PCK1
 ),

3966 ((Ë
AT91C_PB20_PCK0
 ) |

3967 ((Ë
AT91C_PB0_PCK0
 ) |

3968 ((Ë
AT91C_PB22_PCK2
 ) |

3969 ((Ë
AT91C_PB21_PCK1
 ));

3971 
	`AT91F_PIO_CfgPîùh
(

3972 
AT91C_BASE_PIOA
,

3974 ((Ë
AT91C_PA30_PCK2
 ) |

3975 ((Ë
AT91C_PA13_PCK1
 ) |

3976 ((Ë
AT91C_PA27_PCK3
 ));

3977 
	}
}

3983 
__ölöe
 
	$AT91F_VREG_CfgPMC
 ()

3985 
	`AT91F_PMC_E«bÀPîùhClock
(

3986 
AT91C_BASE_PMC
,

3987 ((Ë1 << 
AT91C_ID_SYS
));

3988 
	}
}

3994 
__ölöe
 
	$AT91F_RSTC_CfgPMC
 ()

3996 
	`AT91F_PMC_E«bÀPîùhClock
(

3997 
AT91C_BASE_PMC
,

3998 ((Ë1 << 
AT91C_ID_SYS
));

3999 
	}
}

4005 
__ölöe
 
	$AT91F_SSC_CfgPMC
 ()

4007 
	`AT91F_PMC_E«bÀPîùhClock
(

4008 
AT91C_BASE_PMC
,

4009 ((Ë1 << 
AT91C_ID_SSC
));

4010 
	}
}

4016 
__ölöe
 
	$AT91F_SSC_CfgPIO
 ()

4019 
	`AT91F_PIO_CfgPîùh
(

4020 
AT91C_BASE_PIOA
,

4021 ((Ë
AT91C_PA25_RK
 ) |

4022 ((Ë
AT91C_PA22_TK
 ) |

4023 ((Ë
AT91C_PA21_TF
 ) |

4024 ((Ë
AT91C_PA24_RD
 ) |

4025 ((Ë
AT91C_PA26_RF
 ) |

4026 ((Ë
AT91C_PA23_TD
 ),

4028 
	}
}

4034 
__ölöe
 
	$AT91F_WDTC_CfgPMC
 ()

4036 
	`AT91F_PMC_E«bÀPîùhClock
(

4037 
AT91C_BASE_PMC
,

4038 ((Ë1 << 
AT91C_ID_SYS
));

4039 
	}
}

4045 
__ölöe
 
	$AT91F_US1_CfgPMC
 ()

4047 
	`AT91F_PMC_E«bÀPîùhClock
(

4048 
AT91C_BASE_PMC
,

4049 ((Ë1 << 
AT91C_ID_US1
));

4050 
	}
}

4056 
__ölöe
 
	$AT91F_US1_CfgPIO
 ()

4059 
	`AT91F_PIO_CfgPîùh
(

4060 
AT91C_BASE_PIOB
,

4062 ((Ë
AT91C_PB26_RI1
 ) |

4063 ((Ë
AT91C_PB24_DSR1
 ) |

4064 ((Ë
AT91C_PB23_DCD1
 ) |

4065 ((Ë
AT91C_PB25_DTR1
 ));

4067 
	`AT91F_PIO_CfgPîùh
(

4068 
AT91C_BASE_PIOA
,

4069 ((Ë
AT91C_PA7_SCK1
 ) |

4070 ((Ë
AT91C_PA8_RTS1
 ) |

4071 ((Ë
AT91C_PA6_TXD1
 ) |

4072 ((Ë
AT91C_PA5_RXD1
 ) |

4073 ((Ë
AT91C_PA9_CTS1
 ),

4075 
	}
}

4081 
__ölöe
 
	$AT91F_US0_CfgPMC
 ()

4083 
	`AT91F_PMC_E«bÀPîùhClock
(

4084 
AT91C_BASE_PMC
,

4085 ((Ë1 << 
AT91C_ID_US0
));

4086 
	}
}

4092 
__ölöe
 
	$AT91F_US0_CfgPIO
 ()

4095 
	`AT91F_PIO_CfgPîùh
(

4096 
AT91C_BASE_PIOA
,

4097 ((Ë
AT91C_PA0_RXD0
 ) |

4098 ((Ë
AT91C_PA4_CTS0
 ) |

4099 ((Ë
AT91C_PA3_RTS0
 ) |

4100 ((Ë
AT91C_PA2_SCK0
 ) |

4101 ((Ë
AT91C_PA1_TXD0
 ),

4103 
	}
}

4109 
__ölöe
 
	$AT91F_SPI1_CfgPMC
 ()

4111 
	`AT91F_PMC_E«bÀPîùhClock
(

4112 
AT91C_BASE_PMC
,

4113 ((Ë1 << 
AT91C_ID_SPI1
));

4114 
	}
}

4120 
__ölöe
 
	$AT91F_SPI1_CfgPIO
 ()

4123 
	`AT91F_PIO_CfgPîùh
(

4124 
AT91C_BASE_PIOB
,

4126 ((Ë
AT91C_PB16_NPCS13
 ) |

4127 ((Ë
AT91C_PB10_NPCS11
 ) |

4128 ((Ë
AT91C_PB11_NPCS12
 ));

4130 
	`AT91F_PIO_CfgPîùh
(

4131 
AT91C_BASE_PIOA
,

4133 ((Ë
AT91C_PA4_NPCS13
 ) |

4134 ((Ë
AT91C_PA29_NPCS13
 ) |

4135 ((Ë
AT91C_PA21_NPCS10
 ) |

4136 ((Ë
AT91C_PA22_SPCK1
 ) |

4137 ((Ë
AT91C_PA25_NPCS11
 ) |

4138 ((Ë
AT91C_PA2_NPCS11
 ) |

4139 ((Ë
AT91C_PA24_MISO1
 ) |

4140 ((Ë
AT91C_PA3_NPCS12
 ) |

4141 ((Ë
AT91C_PA26_NPCS12
 ) |

4142 ((Ë
AT91C_PA23_MOSI1
 ));

4143 
	}
}

4149 
__ölöe
 
	$AT91F_SPI0_CfgPMC
 ()

4151 
	`AT91F_PMC_E«bÀPîùhClock
(

4152 
AT91C_BASE_PMC
,

4153 ((Ë1 << 
AT91C_ID_SPI0
));

4154 
	}
}

4160 
__ölöe
 
	$AT91F_SPI0_CfgPIO
 ()

4163 
	`AT91F_PIO_CfgPîùh
(

4164 
AT91C_BASE_PIOB
,

4166 ((Ë
AT91C_PB13_NPCS01
 ) |

4167 ((Ë
AT91C_PB17_NPCS03
 ) |

4168 ((Ë
AT91C_PB14_NPCS02
 ));

4170 
	`AT91F_PIO_CfgPîùh
(

4171 
AT91C_BASE_PIOA
,

4172 ((Ë
AT91C_PA16_MISO0
 ) |

4173 ((Ë
AT91C_PA13_NPCS01
 ) |

4174 ((Ë
AT91C_PA15_NPCS03
 ) |

4175 ((Ë
AT91C_PA17_MOSI0
 ) |

4176 ((Ë
AT91C_PA18_SPCK0
 ) |

4177 ((Ë
AT91C_PA14_NPCS02
 ) |

4178 ((Ë
AT91C_PA12_NPCS00
 ),

4179 ((Ë
AT91C_PA7_NPCS01
 ) |

4180 ((Ë
AT91C_PA9_NPCS03
 ) |

4181 ((Ë
AT91C_PA8_NPCS02
 ));

4182 
	}
}

4188 
__ölöe
 
	$AT91F_PITC_CfgPMC
 ()

4190 
	`AT91F_PMC_E«bÀPîùhClock
(

4191 
AT91C_BASE_PMC
,

4192 ((Ë1 << 
AT91C_ID_SYS
));

4193 
	}
}

4199 
__ölöe
 
	$AT91F_AIC_CfgPMC
 ()

4201 
	`AT91F_PMC_E«bÀPîùhClock
(

4202 
AT91C_BASE_PMC
,

4203 ((Ë1 << 
AT91C_ID_FIQ
) |

4204 ((Ë1 << 
AT91C_ID_IRQ0
) |

4205 ((Ë1 << 
AT91C_ID_IRQ1
));

4206 
	}
}

4212 
__ölöe
 
	$AT91F_AIC_CfgPIO
 ()

4215 
	`AT91F_PIO_CfgPîùh
(

4216 
AT91C_BASE_PIOA
,

4217 ((Ë
AT91C_PA30_IRQ0
 ) |

4218 ((Ë
AT91C_PA29_FIQ
 ),

4219 ((Ë
AT91C_PA14_IRQ1
 ));

4220 
	}
}

4226 
__ölöe
 
	$AT91F_AES_CfgPMC
 ()

4228 
	`AT91F_PMC_E«bÀPîùhClock
(

4229 
AT91C_BASE_PMC
,

4230 ((Ë1 << 
AT91C_ID_AES
));

4231 
	}
}

4237 
__ölöe
 
	$AT91F_TWI_CfgPMC
 ()

4239 
	`AT91F_PMC_E«bÀPîùhClock
(

4240 
AT91C_BASE_PMC
,

4241 ((Ë1 << 
AT91C_ID_TWI
));

4242 
	}
}

4248 
__ölöe
 
	$AT91F_TWI_CfgPIO
 ()

4251 
	`AT91F_PIO_CfgPîùh
(

4252 
AT91C_BASE_PIOA
,

4253 ((Ë
AT91C_PA11_TWCK
 ) |

4254 ((Ë
AT91C_PA10_TWD
 ),

4256 
	}
}

4262 
__ölöe
 
	$AT91F_ADC_CfgPMC
 ()

4264 
	`AT91F_PMC_E«bÀPîùhClock
(

4265 
AT91C_BASE_PMC
,

4266 ((Ë1 << 
AT91C_ID_ADC
));

4267 
	}
}

4273 
__ölöe
 
	$AT91F_ADC_CfgPIO
 ()

4276 
	`AT91F_PIO_CfgPîùh
(

4277 
AT91C_BASE_PIOB
,

4279 ((Ë
AT91C_PB18_ADTRG
 ));

4280 
	}
}

4286 
__ölöe
 
	$AT91F_PWMC_CH3_CfgPIO
 ()

4289 
	`AT91F_PIO_CfgPîùh
(

4290 
AT91C_BASE_PIOB
,

4291 ((Ë
AT91C_PB22_PWM3
 ),

4292 ((Ë
AT91C_PB30_PWM3
 ));

4293 
	}
}

4299 
__ölöe
 
	$AT91F_PWMC_CH2_CfgPIO
 ()

4302 
	`AT91F_PIO_CfgPîùh
(

4303 
AT91C_BASE_PIOB
,

4304 ((Ë
AT91C_PB21_PWM2
 ),

4305 ((Ë
AT91C_PB29_PWM2
 ));

4306 
	}
}

4312 
__ölöe
 
	$AT91F_PWMC_CH1_CfgPIO
 ()

4315 
	`AT91F_PIO_CfgPîùh
(

4316 
AT91C_BASE_PIOB
,

4317 ((Ë
AT91C_PB20_PWM1
 ),

4318 ((Ë
AT91C_PB28_PWM1
 ));

4319 
	}
}

4325 
__ölöe
 
	$AT91F_PWMC_CH0_CfgPIO
 ()

4328 
	`AT91F_PIO_CfgPîùh
(

4329 
AT91C_BASE_PIOB
,

4330 ((Ë
AT91C_PB19_PWM0
 ),

4331 ((Ë
AT91C_PB27_PWM0
 ));

4332 
	}
}

4338 
__ölöe
 
	$AT91F_RTTC_CfgPMC
 ()

4340 
	`AT91F_PMC_E«bÀPîùhClock
(

4341 
AT91C_BASE_PMC
,

4342 ((Ë1 << 
AT91C_ID_SYS
));

4343 
	}
}

4349 
__ölöe
 
	$AT91F_UDP_CfgPMC
 ()

4351 
	`AT91F_PMC_E«bÀPîùhClock
(

4352 
AT91C_BASE_PMC
,

4353 ((Ë1 << 
AT91C_ID_UDP
));

4354 
	}
}

4360 
__ölöe
 
	$AT91F_TDES_CfgPMC
 ()

4362 
	`AT91F_PMC_E«bÀPîùhClock
(

4363 
AT91C_BASE_PMC
,

4364 ((Ë1 << 
AT91C_ID_TDES
));

4365 
	}
}

4371 
__ölöe
 
	$AT91F_EMAC_CfgPMC
 ()

4373 
	`AT91F_PMC_E«bÀPîùhClock
(

4374 
AT91C_BASE_PMC
,

4375 ((Ë1 << 
AT91C_ID_EMAC
));

4376 
	}
}

4382 
__ölöe
 
	$AT91F_EMAC_CfgPIO
 ()

4385 
	`AT91F_PIO_CfgPîùh
(

4386 
AT91C_BASE_PIOB
,

4387 ((Ë
AT91C_PB2_ETX0
 ) |

4388 ((Ë
AT91C_PB12_ETXER
 ) |

4389 ((Ë
AT91C_PB16_ECOL
 ) |

4390 ((Ë
AT91C_PB11_ETX3
 ) |

4391 ((Ë
AT91C_PB6_ERX1
 ) |

4392 ((Ë
AT91C_PB15_ERXDV
 ) |

4393 ((Ë
AT91C_PB13_ERX2
 ) |

4394 ((Ë
AT91C_PB3_ETX1
 ) |

4395 ((Ë
AT91C_PB8_EMDC
 ) |

4396 ((Ë
AT91C_PB5_ERX0
 ) |

4398 ((Ë
AT91C_PB14_ERX3
 ) |

4399 ((Ë
AT91C_PB4_ECRS_ECRSDV
) |

4400 ((Ë
AT91C_PB1_ETXEN
 ) |

4401 ((Ë
AT91C_PB10_ETX2
 ) |

4402 ((Ë
AT91C_PB0_ETXCK_EREFCK
) |

4403 ((Ë
AT91C_PB9_EMDIO
 ) |

4404 ((Ë
AT91C_PB7_ERXER
 ) |

4405 ((Ë
AT91C_PB17_ERXCK
 ),

4407 
	}
}

4413 
__ölöe
 
	$AT91F_TC0_CfgPMC
 ()

4415 
	`AT91F_PMC_E«bÀPîùhClock
(

4416 
AT91C_BASE_PMC
,

4417 ((Ë1 << 
AT91C_ID_TC0
));

4418 
	}
}

4424 
__ölöe
 
	$AT91F_TC0_CfgPIO
 ()

4427 
	`AT91F_PIO_CfgPîùh
(

4428 
AT91C_BASE_PIOB
,

4429 ((Ë
AT91C_PB23_TIOA0
 ) |

4430 ((Ë
AT91C_PB24_TIOB0
 ),

4431 ((Ë
AT91C_PB12_TCLK0
 ));

4432 
	}
}

4438 
__ölöe
 
	$AT91F_TC1_CfgPMC
 ()

4440 
	`AT91F_PMC_E«bÀPîùhClock
(

4441 
AT91C_BASE_PMC
,

4442 ((Ë1 << 
AT91C_ID_TC1
));

4443 
	}
}

4449 
__ölöe
 
	$AT91F_TC1_CfgPIO
 ()

4452 
	`AT91F_PIO_CfgPîùh
(

4453 
AT91C_BASE_PIOB
,

4454 ((Ë
AT91C_PB25_TIOA1
 ) |

4455 ((Ë
AT91C_PB26_TIOB1
 ),

4456 ((Ë
AT91C_PB19_TCLK1
 ));

4457 
	}
}

4463 
__ölöe
 
	$AT91F_TC2_CfgPMC
 ()

4465 
	`AT91F_PMC_E«bÀPîùhClock
(

4466 
AT91C_BASE_PMC
,

4467 ((Ë1 << 
AT91C_ID_TC2
));

4468 
	}
}

4474 
__ölöe
 
	$AT91F_TC2_CfgPIO
 ()

4477 
	`AT91F_PIO_CfgPîùh
(

4478 
AT91C_BASE_PIOB
,

4479 ((Ë
AT91C_PB28_TIOB2
 ) |

4480 ((Ë
AT91C_PB27_TIOA2
 ),

4483 
	`AT91F_PIO_CfgPîùh
(

4484 
AT91C_BASE_PIOA
,

4486 ((Ë
AT91C_PA15_TCLK2
 ));

4487 
	}
}

4493 
__ölöe
 
	$AT91F_MC_CfgPMC
 ()

4495 
	`AT91F_PMC_E«bÀPîùhClock
(

4496 
AT91C_BASE_PMC
,

4497 ((Ë1 << 
AT91C_ID_SYS
));

4498 
	}
}

4504 
__ölöe
 
	$AT91F_PIOA_CfgPMC
 ()

4506 
	`AT91F_PMC_E«bÀPîùhClock
(

4507 
AT91C_BASE_PMC
,

4508 ((Ë1 << 
AT91C_ID_PIOA
));

4509 
	}
}

4515 
__ölöe
 
	$AT91F_PIOB_CfgPMC
 ()

4517 
	`AT91F_PMC_E«bÀPîùhClock
(

4518 
AT91C_BASE_PMC
,

4519 ((Ë1 << 
AT91C_ID_PIOB
));

4520 
	}
}

4526 
__ölöe
 
	$AT91F_CAN_CfgPMC
 ()

4528 
	`AT91F_PMC_E«bÀPîùhClock
(

4529 
AT91C_BASE_PMC
,

4530 ((Ë1 << 
AT91C_ID_CAN
));

4531 
	}
}

4537 
__ölöe
 
	$AT91F_CAN_CfgPIO
 ()

4540 
	`AT91F_PIO_CfgPîùh
(

4541 
AT91C_BASE_PIOA
,

4542 ((Ë
AT91C_PA20_CANTX
 ) |

4543 ((Ë
AT91C_PA19_CANRX
 ),

4545 
	}
}

4551 
__ölöe
 
	$AT91F_PWMC_CfgPMC
 ()

4553 
	`AT91F_PMC_E«bÀPîùhClock
(

4554 
AT91C_BASE_PMC
,

4555 ((Ë1 << 
AT91C_ID_PWMC
));

4556 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/port.c

73 
	~<°dlib.h
>

76 
	~"FªeRTOS.h
"

77 
	~"èsk.h
"

80 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

81 
	#p‹tTHUMB_MODE_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x20 )

	)

82 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

85 
	#p‹tPIT_CLOCK_DIVISOR
 ( ( Ë16 )

	)

86 
	#p‹tPIT_COUNTER_VALUE
 ( ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tPIT_CLOCK_DIVISOR
 ) / 1000UL ) * 
p‹tTICK_RATE_MS
 )

	)

89 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

92 
	#p‹tINT_LEVEL_SENSITIVE
 0

	)

93 
	#p‹tPIT_ENABLE
 ( ( Ë0x1 << 24 )

	)

94 
	#p‹tPIT_INT_ENABLE
 ( ( Ë0x1 << 25 )

	)

98 
¥vSëupTimîI¡îru±
( );

103 
	gulCrôiˇlNe°ög
 = ( ) 9999;

113 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

115 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

117 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

121 
pxT›OfSèck
--;

129 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

130 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaaaaaa;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

159 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

164 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

169 if–––Ë
pxCode
 & 0x01UL ) != 0x00UL )

172 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

175 
pxT›OfSèck
--;

180 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

182  
pxT›OfSèck
;

183 
	}
}

186 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

188 
	`vP‹tSèπFú°Task
( );

192 
	`¥vSëupTimîI¡îru±
();

195 
	`vP‹tSèπFú°Task
();

199 
	}
}

202 
	$vP‹tEndScheduÀr
( )

206 
	}
}

209 #i‡
c⁄figUSE_PREEMPTION
 == 0

213 
__¨m
 
__úq
 
vP‹tN⁄Pªem±iveTick
( );

214 
__¨m
 
__úq
 
	$vP‹tN⁄Pªem±iveTick
( )

216 
ulDummy
;

221 
	`vTaskIn¸emítTick
();

224 
ulDummy
 = 
AT91C_BASE_PITC
->
PITC_PIVR
;

227 
AT91C_BASE_AIC
->
AIC_EOICR
 = 
ulDummy
;

228 
	}
}

239 
	$¥vSëupTimîI¡îru±
( )

241 
AT91PS_PITC
 
pxPIT
 = 
AT91C_BASE_PITC
;

245 #i‡
c⁄figUSE_PREEMPTION
 == 0

247 
	`AT91F_AIC_C⁄figuªIt
–
AT91C_BASE_AIC
, 
AT91C_ID_SYS
, 
AT91C_AIC_PRIOR_HIGHEST
, 
p‹tINT_LEVEL_SENSITIVE
, ( (*)(ËË
vP‹tN⁄Pªem±iveTick
 );

251 –
vP‹tPªem±iveTick
 )( );

252 
	`AT91F_AIC_C⁄figuªIt
–
AT91C_BASE_AIC
, 
AT91C_ID_SYS
, 
AT91C_AIC_PRIOR_HIGHEST
, 
p‹tINT_LEVEL_SENSITIVE
, ( (*)(ËË
vP‹tPªem±iveTick
 );

257 
pxPIT
->
PITC_PIMR
 = 
p‹tPIT_ENABLE
 | 
p‹tPIT_INT_ENABLE
 | 
p‹tPIT_COUNTER_VALUE
;

261 
	`AT91F_AIC_E«bÀIt
–
AT91C_BASE_AIC
, 
AT91C_ID_SYS
 );

262 
	}
}

265 
	$vP‹tE¡îCrôiˇl
( )

268 
	`__dißbÀ_öãºu±
();

273 
ulCrôiˇlNe°ög
++;

274 
	}
}

277 
	$vP‹tExôCrôiˇl
( )

279 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

282 
ulCrôiˇlNe°ög
--;

286 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

288 
	`__íabÀ_öãºu±
();

291 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

107 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

108 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

112 
__¨m
 
__öãrw‹k
 
vP‹tDißbÀI¡îru±sFromThumb
( );

113 
__¨m
 
__öãrw‹k
 
vP‹tE«bÀI¡îru±sFromThumb
( );

114 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

115 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

117 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_öãºu±
()

	)

118 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_öãºu±
()

	)

119 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

120 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

124 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

126 
	`vTaskSwôchC⁄ãxt
( ); \

128 if–
xSwôchRequúed
 ) \

130 
	`vTaskSwôchC⁄ãxt
(); \

132 }

	)

137 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

138 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

140 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM9XE/ISR_Support.h

1 
EXTERN
 
pxCuºítTCB


2 
EXTERN
 
	gulCrôiˇlNe°ög


5 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


8 
p‹tSAVE_CONTEXT
 
	gMACRO


10 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

11 
STMDB
 
	gSP
!, {
	gR0
}

13 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

14 
STMDB
 
	gSP
, {SP}^

15 
NOP


16 
SUB
 
	gSP
, SP, #4

17 
LDMIA
 
	gSP
!, {
	gR0
}

19 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

20 
STMDB
 
	gR0
!, {
	gLR
}

22 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

23 
MOV
 
	gLR
, 
	gR0


25 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

26 
LDMIA
 
	gSP
!, {
	gR0
}

28 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

29 
STMDB
 
	gLR
, {
	gR0
-LR}^

30 
NOP


31 
SUB
 
	gLR
, LR, #60

33 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

34 
MRS
 
	gR0
, 
SPSR


35 
STMDB
 
	gLR
!, {
	gR0
}

37 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


38 
LDR
 
R0
, [R0]

39 
STMDB
 
	gLR
!, {
	gR0
}

41 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

42 
LDR
 
	gR1
, =
pxCuºítTCB


43 
LDR
 
R0
, [
R1
]

44 
STR
 
	gLR
, [
R0
]

46 
ENDM


49 
p‹tRESTORE_CONTEXT
 
	gMACRO


51 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

52 
LDR
 
	gR1
, =
pxCuºítTCB


53 
LDR
 
R0
, [
R1
]

54 
LDR
 
	gLR
, [
R0
]

56 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

57 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

58 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


59 
LDMFD
 
LR
!, {
	gR1
}

60 
STR
 
	gR1
, [
R0
]

62 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

63 
LDMFD
 
	gLR
!, {
	gR0
}

64 
MSR
 
	gSPSR_cxsf
, 
	gR0


66 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

67 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

68 
	gNOP


70 ; 
Re°‹e
 
the
  
	gaddªss
.

71 
LDR
 
	gLR
, [
LR
, #+60]

73 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


74 ; 
c‹ª˘
 
	gaddªss
.

75 
SUBS
 
	gPC
, 
	gLR
, #4

77 
	gENDM


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM9XE/port.c

73 
	~<°dlib.h
>

76 
	~"FªeRTOS.h
"

77 
	~"èsk.h
"

80 
	~<bﬂrd.h
>

81 
	~<pio/pio.h
>

82 
	~<pio/pio_ô.h
>

83 
	~<pô/pô.h
>

84 
	~<aic/aic.h
>

85 
	~<tc/tc.h
>

86 
	~<utûôy/Àd.h
>

87 
	~<utûôy/åa˚.h
>

92 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

93 
	#p‹tTHUMB_MODE_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x20 )

	)

94 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

97 
	#p‹t1MHz_IN_Hz
 ( 1000000u»)

	)

98 
	#p‹t1SECOND_IN_uS
 ( 1000000.0 )

	)

101 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

104 
	#p‹tINT_LEVEL_SENSITIVE
 0

	)

105 
	#p‹tPIT_ENABLE
 ( ( Ë0x1 << 24 )

	)

106 
	#p‹tPIT_INT_ENABLE
 ( ( Ë0x1 << 25 )

	)

110 
¥vSëupTimîI¡îru±
( );

113 
vP‹tTickISR
( );

118 
	gulCrôiˇlNe°ög
 = ( ) 9999;

128 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

130 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

132 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

136 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

145 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaaaaaa;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

172 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

174 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

179 
pxT›OfSèck
--;

182 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

184 #ifde‡
THUMB_INTERWORK


187 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

191 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

198  
pxT›OfSèck
;

199 
	}
}

202 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

204 
	`vP‹tSèπFú°Task
( );

208 
	`¥vSëupTimîI¡îru±
();

211 
	`vP‹tSèπFú°Task
();

215 
	}
}

218 
	$vP‹tEndScheduÀr
( )

222 
	}
}

225 
__¨m
 
	$vP‹tTickISR
( )

227 vﬁ©ûê
ulDummy
;

232 
	`vTaskIn¸emítTick
();

234 #i‡
c⁄figUSE_PREEMPTION
 == 1

235 
	`vTaskSwôchC⁄ãxt
();

239 
ulDummy
 = 
AT91C_BASE_PITC
->
PITC_PIVR
;

242 –Ë
ulDummy
;

245 
	}
}

248 
	$¥vSëupTimîI¡îru±
( )

250 c⁄° 
ulPîiodIn_uS
 = ( 1.0 / ( Ë
c⁄figTICK_RATE_HZ
 ) * 
p‹t1SECOND_IN_uS
;

253 
	`PIT_Inô
–
ulPîiodIn_uS
, 
BOARD_MCK
 / 
p‹t1MHz_IN_Hz
 );

256 
	`AIC_DißbÀIT
–
AT91C_ID_SYS
 );

257 
	`AIC_C⁄figuªIT
–
AT91C_ID_SYS
, 
AT91C_AIC_PRIOR_LOWEST
, 
vP‹tTickISR
 );

258 
	`AIC_E«bÀIT
–
AT91C_ID_SYS
 );

259 
	`PIT_E«bÀIT
();

260 
	}
}

263 
	$vP‹tE¡îCrôiˇl
( )

266 
	`__dißbÀ_úq
();

271 
ulCrôiˇlNe°ög
++;

272 
	}
}

275 
	$vP‹tExôCrôiˇl
( )

277 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

280 
ulCrôiˇlNe°ög
--;

284 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

286 
	`__íabÀ_úq
();

289 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM9XE/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 
	~<öåösics.h
>

73 #ifde‡
__˝lu•lus


88 
	#p‹tCHAR
 

	)

89 
	#p‹tFLOAT
 

	)

90 
	#p‹tDOUBLE
 

	)

91 
	#p‹tLONG
 

	)

92 
	#p‹tSHORT
 

	)

93 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

94 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

100 
	tp‹tLONG
 
	tp‹tTickTy≥
;

101 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

106 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

107 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

108 
	#p‹tBYTE_ALIGNMENT
 8

	)

109 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

110 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

114 
__¨m
 
__öãrw‹k
 
vP‹tDißbÀI¡îru±sFromThumb
( );

115 
__¨m
 
__öãrw‹k
 
vP‹tE«bÀI¡îru±sFromThumb
( );

116 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

117 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

119 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_úq
()

	)

120 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_úq
()

	)

121 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

122 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

126 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

128 
	`vTaskSwôchC⁄ãxt
( ); \

130 if–
xSwôchRequúed
 ) \

132 
	`vTaskSwôchC⁄ãxt
(); \

134 }

	)

139 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

140 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

142 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/LPC2000/ISR_Support.h

53 
EXTERN
 
pxCuºítTCB


54 
EXTERN
 
	gulCrôiˇlNe°ög


57 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


60 
p‹tSAVE_CONTEXT
 
	gMACRO


62 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

63 
STMDB
 
	gSP
!, {
	gR0
}

65 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

66 
STMDB
 
	gSP
, {SP}^

67 
NOP


68 
SUB
 
	gSP
, SP, #4

69 
LDMIA
 
	gSP
!, {
	gR0
}

71 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

72 
STMDB
 
	gR0
!, {
	gLR
}

74 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

75 
MOV
 
	gLR
, 
	gR0


77 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

78 
LDMIA
 
	gSP
!, {
	gR0
}

80 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

81 
STMDB
 
	gLR
, {
	gR0
-LR}^

82 
NOP


83 
SUB
 
	gLR
, LR, #60

85 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

86 
MRS
 
	gR0
, 
SPSR


87 
STMDB
 
	gLR
!, {
	gR0
}

89 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


90 
LDR
 
R0
, [R0]

91 
STMDB
 
	gLR
!, {
	gR0
}

93 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

94 
LDR
 
	gR1
, =
pxCuºítTCB


95 
LDR
 
R0
, [
R1
]

96 
STR
 
	gLR
, [
R0
]

98 
ENDM


101 
p‹tRESTORE_CONTEXT
 
	gMACRO


103 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

104 
LDR
 
	gR1
, =
pxCuºítTCB


105 
LDR
 
R0
, [
R1
]

106 
LDR
 
	gLR
, [
R0
]

108 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

109 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

110 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


111 
LDMFD
 
LR
!, {
	gR1
}

112 
STR
 
	gR1
, [
R0
]

114 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

115 
LDMFD
 
	gLR
!, {
	gR0
}

116 
MSR
 
	gSPSR_cxsf
, 
	gR0


118 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

119 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

120 
	gNOP


122 ; 
Re°‹e
 
the
  
	gaddªss
.

123 
LDR
 
	gLR
, [
LR
, #+60]

125 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


126 ; 
c‹ª˘
 
	gaddªss
.

127 
SUBS
 
	gPC
, 
	gLR
, #4

129 
	gENDM


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/LPC2000/port.c

80 
	~<°dlib.h
>

81 
	~<öåösics.h
>

84 
	~"FªeRTOS.h
"

85 
	~"èsk.h
"

88 
	#p‹tENABLE_TIMER
 ( ( Ë0x01 )

	)

89 
	#p‹tPRESCALE_VALUE
 0x00

	)

90 
	#p‹tINTERRUPT_ON_MATCH
 ( ( Ë0x01 )

	)

91 
	#p‹tRESET_COUNT_ON_MATCH
 ( ( Ë0x02 )

	)

94 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

95 
	#p‹tTHUMB_MODE_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x20 )

	)

96 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

99 
	#p‹tPIT_CLOCK_DIVISOR
 ( ( Ë16 )

	)

100 
	#p‹tPIT_COUNTER_VALUE
 ( ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tPIT_CLOCK_DIVISOR
 ) / 1000UL ) * 
p‹tTICK_RATE_MS
 )

	)

103 
	#p‹tTIMER_MATCH_ISR_BIT
 ( ( Ë0x01 )

	)

104 
	#p‹tCLEAR_VIC_INTERRUPT
 ( ( Ë0 )

	)

107 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

110 
	#p‹tINT_LEVEL_SENSITIVE
 0

	)

111 
	#p‹tPIT_ENABLE
 ( ( Ë0x1 << 24 )

	)

112 
	#p‹tPIT_INT_ENABLE
 ( ( Ë0x1 << 25 )

	)

115 
	#p‹tTIMER_VIC_CHANNEL
 ( ( Ë0x0004 )

	)

116 
	#p‹tTIMER_VIC_CHANNEL_BIT
 ( ( Ë0x0010 )

	)

117 
	#p‹tTIMER_VIC_ENABLE
 ( ( Ë0x0020 )

	)

122 
¥vSëupTimîI¡îru±
( );

127 
	gulCrôiˇlNe°ög
 = ( ) 9999;

137 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

139 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

141 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

149 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

150 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaaaaaa;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

173 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

175 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

177 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

179 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

184 
pxT›OfSèck
--;

187 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

189 if–––Ë
pxCode
 & 0x01UL ) != 0x00UL )

192 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

195 
pxT›OfSèck
--;

200 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

202  
pxT›OfSèck
;

203 
	}
}

206 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

208 
	`vP‹tSèπFú°Task
( );

212 
	`¥vSëupTimîI¡îru±
();

215 
	`vP‹tSèπFú°Task
();

219 
	}
}

222 
	$vP‹tEndScheduÀr
( )

226 
	}
}

229 #i‡
c⁄figUSE_PREEMPTION
 == 0

233 
__¨m
 
__úq
 
vP‹tN⁄Pªem±iveTick
( );

234 
__¨m
 
__úq
 
	$vP‹tN⁄Pªem±iveTick
( )

239 
	`vTaskIn¸emítTick
();

242 
T0IR
 = 
p‹tTIMER_MATCH_ISR_BIT
;

243 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

244 
	}
}

250 
vP‹tPªem±iveTick
( );

251 
	$vP‹tPªem±iveTick
( )

254 
	`vTaskIn¸emítTick
();

259 
	`vTaskSwôchC⁄ãxt
();

262 
T0IR
 = 
p‹tTIMER_MATCH_ISR_BIT
;

263 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

264 
	}
}

270 
	$¥vSëupTimîI¡îru±
( )

272 
ulCom∑ªM©ch
;

276 
T0PR
 = 
p‹tPRESCALE_VALUE
;

279 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

283 #i‡
p‹tPRESCALE_VALUE
 != 0

285 
ulCom∑ªM©ch
 /–
p‹tPRESCALE_VALUE
 + 1 );

289 
T0MR0
 = 
ulCom∑ªM©ch
;

292 
T0MCR
 = 
p‹tRESET_COUNT_ON_MATCH
 | 
p‹tINTERRUPT_ON_MATCH
;

295 
VICI¡Sñe˘
 &~–
p‹tTIMER_VIC_CHANNEL_BIT
 );

296 
VICI¡E«bÀ
 |
p‹tTIMER_VIC_CHANNEL_BIT
;

300 #i‡
c⁄figUSE_PREEMPTION
 == 1

302 –
vP‹tPªem±iveTickE¡ry
 )( );

304 
VICVe˘Addr0
 = ( Ë
vP‹tPªem±iveTickE¡ry
;

308 –
vN⁄Pªem±iveTick
 )( );

310 
VICVe˘Addr0
 = ( Ë
vP‹tN⁄Pªem±iveTick
;

314 
VICVe˘C¡l0
 = 
p‹tTIMER_VIC_CHANNEL
 | 
p‹tTIMER_VIC_ENABLE
;

318 
T0TCR
 = 
p‹tENABLE_TIMER
;

319 
	}
}

322 
	$vP‹tE¡îCrôiˇl
( )

325 
	`__dißbÀ_öãºu±
();

330 
ulCrôiˇlNe°ög
++;

331 
	}
}

334 
	$vP‹tExôCrôiˇl
( )

336 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

339 
ulCrôiˇlNe°ög
--;

343 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

345 
	`__íabÀ_öãºu±
();

348 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/LPC2000/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 
	~<öåösics.h
>

73 #ifde‡
__˝lu•lus


88 
	#p‹tCHAR
 

	)

89 
	#p‹tFLOAT
 

	)

90 
	#p‹tDOUBLE
 

	)

91 
	#p‹tLONG
 

	)

92 
	#p‹tSHORT
 

	)

93 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

94 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

100 
	tp‹tLONG
 
	tp‹tTickTy≥
;

101 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

106 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

107 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

108 
	#p‹tBYTE_ALIGNMENT
 8

	)

109 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

110 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

114 
__¨m
 
__öãrw‹k
 
vP‹tDißbÀI¡îru±sFromThumb
( );

115 
__¨m
 
__öãrw‹k
 
vP‹tE«bÀI¡îru±sFromThumb
( );

116 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

117 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

119 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_öãºu±
()

	)

120 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_öãºu±
()

	)

121 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

122 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

126 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

128 
	`vTaskSwôchC⁄ãxt
( ); \

130 if–
xSwôchRequúed
 ) \

132 
	`vTaskSwôchC⁄ãxt
(); \

134 }

	)

138 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

139 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

141 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

77 
	#p‹tACLK_FREQUENCY_HZ
 ( ( 
p‹tTickTy≥
 ) 32768 )

	)

78 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( Ë10 )

	)

79 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
p‹tSTACK_TYPE
 ) 0x08 )

	)

83 
	ttskTCB
;

84 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

94 vﬁ©ûê
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

102 
vP‹tSëupTimîI¡îru±
( );

111 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

129 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

130 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

132 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x4444;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x5555;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x6666;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x7777;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x8888;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x9999;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaa;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xbbbb;

150 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

155 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xdddd;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xeeee;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xffff;

162 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

171  
pxT›OfSèck
;

172 
	}
}

175 
	$vP‹tEndScheduÀr
( )

179 
	}
}

186 
	$vP‹tSëupTimîI¡îru±
( )

189 
TACTL
 = 0;

192 
TACTL
 = 
TASSEL_1
;

195 
TACTL
 |
TACLR
;

198 
TACCR0
 = 
p‹tACLK_FREQUENCY_HZ
 / 
c⁄figTICK_RATE_HZ
;

201 
TACCTL0
 = 
CCIE
;

204 
TACTL
 |
TACLR
;

207 
TACTL
 |
MC_1
;

208 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430/portasm.h

67 #i‚de‡
PORTASM_H


68 
	#PORTASM_H


	)

70 
p‹tSAVE_CONTEXT
 
ma¸o


72 
IMPORT
 
pxCuºítTCB


73 
IMPORT
 
usCrôiˇlNe°ög


76 
push
 
r4


77 
push
 
r5


78 
push
 
r6


79 
push
 
r7


80 
push
 
r8


81 
push
 
r9


82 
push
 
r10


83 
push
 
r11


84 
push
 
r12


85 
push
 
r13


86 
push
 
r14


87 
push
 
r15


88 
	gmov
.
	gw
 &
	gusCrôiˇlNe°ög
, 
r14


89 
push
 
r14


90 
	gmov
.
	gw
 &
	gpxCuºítTCB
, 
r12


91 
	gmov
.
w
 
	gr1
, 0(
	gr12
)

92 
ídm


95 
p‹tRESTORE_CONTEXT
 
ma¸o


96 
	gmov
.
	gw
 &
	gpxCuºítTCB
, 
r12


97 
	gmov
.
	gw
 @
	gr12
, 
r1


98 
p›
 
r15


99 
	gmov
.
w
 
	gr15
, &
usCrôiˇlNe°ög


100 
p›
 
r15


101 
p›
 
r14


102 
p›
 
r13


103 
p›
 
r12


104 
p›
 
r11


105 
p›
 
r10


106 
p›
 
r9


107 
p›
 
r8


108 
p›
 
r7


109 
p›
 
r6


110 
p›
 
r5


111 
p›
 
r4


116 
	gbic
.
	gw
 #0
	gxf0
,0(
	gSP
)

118 
ªti


119 
	gídm


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

81 
	#p‹tCHAR
 

	)

82 
	#p‹tFLOAT
 

	)

83 
	#p‹tDOUBLE
 

	)

84 
	#p‹tLONG
 

	)

85 
	#p‹tSHORT
 

	)

86 
	#p‹tSTACK_TYPE
 
p‹tSHORT


	)

87 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

89 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

90 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

91 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

93 
	tp‹tLONG
 
	tp‹tTickTy≥
;

94 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

100 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`_DINT
(); 
	`_NOP
()

	)

101 
	#p‹tENABLE_INTERRUPTS
(Ë
	`_EINT
();

	)

105 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSHORT
 ) 0 )

	)

107 
	#p‹tENTER_CRITICAL
() \

109 vﬁ©ûê
p‹tSHORT
 
usCrôiˇlNe°ög
; \

111 
	`p‹tDISABLE_INTERRUPTS
(); \

116 
usCrôiˇlNe°ög
++; \

117 }

	)

119 
	#p‹tEXIT_CRITICAL
() \

121 vﬁ©ûê
p‹tSHORT
 
usCrôiˇlNe°ög
; \

123 if–
usCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

126 
usCrôiˇlNe°ög
--; \

130 if–
usCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

132 
	`p‹tENABLE_INTERRUPTS
(); \

135 }

	)

143 
vP‹tYõld
( );

144 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

148 
	#p‹tBYTE_ALIGNMENT
 2

	)

149 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

150 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

151 
	#p‹tNOP
()

	)

155 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

156 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

158 #i‡
c⁄figINTERRUPT_EXAMPLE_METHOD
 == 2

160 
vTaskSwôchC⁄ãxt
( );

161 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x ) 
	`vTaskSwôchC⁄ãxt
()

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430X/data_model.h

67 #i‚de‡
DATA_MODEL_H


68 
	#DATA_MODEL_H


	)

70 #ifde‡
__DATA_MODEL_SMALL__


71 
	#pushm_x
 
pushm
.
w


	)

72 
	#p›m_x
 
p›m
.
w


	)

73 
	#push_x
 
push
.
w


	)

74 
	#p›_x
 
p›
.
w


	)

75 
	#mov_x
 
mov
.
w


	)

76 
	#cmp_x
 
cmp
.
w


	)

79 #ifde‡
__DATA_MODEL_MEDIUM__


80 
	#pushm_x
 
pushm
.
a


	)

81 
	#p›m_x
 
p›m
.
a


	)

82 
	#push_x
 
pushx
.
a


	)

83 
	#p›_x
 
p›x
.
a


	)

84 
	#mov_x
 
mov
.
w


	)

85 
	#cmp_x
 
cmp
.
w


	)

88 #ifde‡
__DATA_MODEL_LARGE__


89 
	#pushm_x
 
pushm
.
a


	)

90 
	#p›m_x
 
p›m
.
a


	)

91 
	#push_x
 
pushx
.
a


	)

92 
	#p›_x
 
p›x
.
a


	)

93 
	#mov_x
 
movx
.
a


	)

94 
	#cmp_x
 
cmpx
.
a


	)

97 #i‚de‡
pushm_x


98 #îr‹ 
The
 
as£mbÀr
 
›ti⁄s
 
mu°
 
deföe
 
⁄e
 
of
 
the
 
fﬁlowög
 
symbﬁs
: 
__DATA_MODEL_SMALL__
, 
__DATA_MODEL_MEDIUM__
, 
‹
 
__DATA_MODEL_LARGE__


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430X/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

77 
	#p‹tACLK_FREQUENCY_HZ
 ( ( 
p‹tTickTy≥
 ) 32768 )

	)

78 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( Ë10 )

	)

79 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
p‹tSTACK_TYPE
 ) 0x08 )

	)

83 
	ttskTCB
;

84 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

94 vﬁ©ûê
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

102 
vP‹tSëupTimîI¡îru±
( );

111 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

113 *
pusT›OfSèck
;

114 *
pulT›OfSèck
;

131 if––
p‹tSTACK_TYPE
 ) == ( ) )

134 
pusT›OfSèck
 = ( * ) 
pxT›OfSèck
;

135 
pusT›OfSèck
--;

136 
pulT›OfSèck
 = ( * ) 
pusT›OfSèck
;

140 
pulT›OfSèck
 = ( * ) 
pxT›OfSèck
;

142 *
pulT›OfSèck
 = ( Ë
pxCode
;

144 
pusT›OfSèck
 = ( * ) 
pulT›OfSèck
;

145 
pusT›OfSèck
--;

146 *
pusT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

147 
pusT›OfSèck
 -––
p‹tSTACK_TYPE
 ) / 2 );

150 
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 * ) 
pusT›OfSèck
;

153 #ifde‡
PRELOAD_REGISTER_VALUES


154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xffff;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xeeee;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xdddd;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xbbbb;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaa;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x9999;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x8888;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x5555;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x6666;

173 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x5555;

175 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x4444;

177 
pxT›OfSèck
--;

179 
pxT›OfSèck
 -= 3;

180 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

181 
pxT›OfSèck
 -= 9;

188 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

192  
pxT›OfSèck
;

193 
	}
}

196 
	$vP‹tEndScheduÀr
( )

200 
	}
}

206 
	$vP‹tSëupTimîI¡îru±
( )

208 
	`vAµliˇti⁄SëupTimîI¡îru±
();

209 
	}
}

212 #¥agm®
ve˘‹
=
c⁄figTICK_VECTOR


213 
__öãºu±
 
__øw
 
	$vTickISRE¡ry
( )

215 
	`vP‹tTickISR
( );

217 
	`vP‹tTickISR
();

218 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430X/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

81 
	~"m•430.h
"

84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

92 #if–
__DATA_MODEL__
 =
__DATA_MODEL_SMALL__
 )

93 
	#p‹tSTACK_TYPE
 

	)

95 
	#p‹tSTACK_TYPE
 

	)

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

102 
	tp‹tLONG
 
	tp‹tTickTy≥
;

103 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

109 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`_DINT
();
	`_NOP
()

	)

110 
	#p‹tENABLE_INTERRUPTS
(Ë
	`_EINT
()

	)

114 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSHORT
 ) 0 )

	)

116 
	#p‹tENTER_CRITICAL
() \

118 vﬁ©ûê
usCrôiˇlNe°ög
; \

120 
	`p‹tDISABLE_INTERRUPTS
(); \

125 
usCrôiˇlNe°ög
++; \

126 }

	)

128 
	#p‹tEXIT_CRITICAL
() \

130 vﬁ©ûê
usCrôiˇlNe°ög
; \

132 if–
usCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

135 
usCrôiˇlNe°ög
--; \

139 if–
usCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

141 
	`p‹tENABLE_INTERRUPTS
(); \

144 }

	)

152 
vP‹tYõld
( );

153 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

157 
	#p‹tBYTE_ALIGNMENT
 2

	)

158 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

159 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

160 
	#p‹tNOP
(Ë
	`__no_›î©i⁄
()

	)

164 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

165 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

167 
vTaskSwôchC⁄ãxt
( );

168 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x ) 
	`vP‹tYõld
()

	)

170 
vAµliˇti⁄SëupTimîI¡îru±
( );

174 
	#p‹tLU_PRINTF_SPECIFIER_REQUIRED


	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/RL78/ISR_Support.h

55 
	~"FªeRTOSC⁄fig.h
"

57 ; 
V¨übÀs
 
u£d
 
by
 
	gscheduÀr


59 
EXTERN
 
pxCuºítTCB


60 
EXTERN
 
	gusCrôiˇlNe°ög


63 ; 
p‹tSAVE_CONTEXT
 
	gMACRO


64 ; 
Saves
 
the
 
c⁄ãxt
 
of
Åhê
gíîÆ
 
puΩo£
 
	gªgi°îs
, 
CS
 
™d
 
ES
 (
⁄ly
 
ö
 
Ár


65 ; 
mem‹y
 
mode
Ë
ªgi°îs
 
the
 
usCrôiˇlNe°ög
 
VÆue
 
™d
Åhê
Sèck
 
	gPoöãr


66 ; 
of
 
the
 
a˘ive
 
Task
 
⁄to
Åhê
èsk
 
	g°ack


68 
p‹tSAVE_CONTEXT
 
MACRO


70 
PUSH
 
	gAX
 ; 
Save
 
AX
 
Regi°î
 
to
 
	g°ack
.

71 
PUSH
 
	gHL


72 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_FAR__


73 
MOV
 
	gA
, 
	gCS
 ; 
Save
 
CS
 .

74 
XCH
 
	gA
, 
X


75 
MOV
 
	gA
, 
	gES
 ; 
Save
 
ES
 .

76 
PUSH
 
	gAX


78 
MOV
 
	gA
, 
	gCS
 ; 
Save
 
CS
 .

79 
PUSH
 
	gAX


81 
PUSH
 
	gDE
 ; 
Save
 
the
 
ªmaöög
 
gíîÆ
 
puΩo£
 
	gªgi°îs
.

82 
PUSH
 
BC


83 
MOVW
 
	gAX
, 
	gusCrôiˇlNe°ög
 ; 
Save
 
the
 
usCrôiˇlNe°ög
 
	gvÆue
.

84 
PUSH
 
AX


85 
MOVW
 
	gAX
, 
	gpxCuºítTCB
 ; 
Save
 
the
 
Sèck
 
	gpoöãr
.

86 
MOVW
 
	gHL
, 
AX


87 
MOVW
 
	gAX
, 
SP


88 
	gMOVW
 [
HL
], 
AX


89 
	gENDM


93 ; 
p‹tRESTORE_CONTEXT
 
	gMACRO


94 ; 
Re°‹es
 
the
 
èsk
 
Sèck
 
Poöãr
 
thí
 
u£
 
this
 
to
 
ª°‹e
 
	gusCrôiˇlNe°ög
,

95 ; 
gíîÆ
 
puΩo£
 
ªgi°îs
 
™d
 
the
 
CS
ánd 
ES
 (
⁄ly
 
ö
 
Ár
 
mem‹y
 
mode
)

96 ; 
of
 
the
 
£À˘ed
 
èsk
 
‰om
Åhêèsk 
	g°ack


98 
p‹tRESTORE_CONTEXT
 
MACRO


99 
MOVW
 
	gAX
, 
	gpxCuºítTCB
 ; 
Re°‹e
 
the
 
Sèck
 
	gpoöãr
.

100 
MOVW
 
	gHL
, 
AX


101 
MOVW
 
	gAX
, [
HL
]

102 
MOVW
 
	gSP
, 
AX


103 
POP
 
	gAX
 ; 
Re°‹e
 
usCrôiˇlNe°ög
 
	gvÆue
.

104 
MOVW
 
	gusCrôiˇlNe°ög
, 
AX


105 
POP
 
	gBC
 ; 
Re°‹e
 
the
 
√˚sßry
 
gíîÆ
 
puΩo£
 
	gªgi°îs
.

106 
POP
 
	gDE


107 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_FAR__


108 
POP
 
	gAX
 ; 
Re°‹e
 
the
 
ES
 .

109 
MOV
 
	gES
, 
A


110 
XCH
 
	gA
, 
	gX
 ; 
Re°‹e
 
the
 
CS
 .

111 
MOV
 
	gCS
, 
	gA


113 
POP
 
AX


114 
MOV
 
	gCS
, 
	gA
 ; 
Re°‹e
 
CS
 .

116 
POP
 
	gHL
 ; 
Re°‹e
 
gíîÆ
 
puΩo£
 HL.

117 
POP
 
	gAX
 ; 
Re°‹e
 AX.

118 
	gENDM


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/RL78/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

73 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( Ë10 )

	)

86 
	#p‹tPSW
 ( 0xc6UL )

	)

90 
	ttskTCB
;

91 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

101 vﬁ©ûê
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

108 
¥vSëupTimîI¡îru±
( );

114 
vP‹tSèπFú°Task
( );

124 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

126 *
pulLoˇl
;

128 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_FAR__


132 
pxT›OfSèck
--;

135 
pulLoˇl
 = ( * ) 
pxT›OfSèck
;

136 *
pulLoˇl
 = ( Ë
pvP¨amëîs
;

137 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xcdcd;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xcdcd;

144 
pxT›OfSèck
--;

148 
pxT›OfSèck
--;

151 
pulLoˇl
 = ( * ) 
pxT›OfSèck
;

152 *
pulLoˇl
 = ( ( ( Ë
pxCode
 ) | ( 
p‹tPSW
 << 24UL ) );

153 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1111;

157 
pxT›OfSèck
--;

164 
pxT›OfSèck
--;

167 
pulLoˇl
 = ( * ) 
pxT›OfSèck
;

168 *
pulLoˇl
 = ( ( ( Ë
pxCode
 ) | ( 
p‹tPSW
 << 24UL ) );

169 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

173 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x2222;

179 
pxT›OfSèck
--;

182 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0F00;

183 
pxT›OfSèck
--;

186 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xDEDE;

187 
pxT›OfSèck
--;

188 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xBCBC;

189 
pxT›OfSèck
--;

193 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

197  
pxT›OfSèck
;

198 
	}
}

201 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

205 
	`¥vSëupTimîI¡îru±
();

208 
	`vP‹tSèπFú°Task
();

211  
pdTRUE
;

212 
	}
}

215 
	$vP‹tEndScheduÀr
( )

219 
	}
}

222 
	$¥vSëupTimîI¡îru±
( )

224 c⁄° 
usClockHz
 = 15000UL;

225 c⁄° 
usCom∑ªM©ch
 = ( 
usClockHz
 / 
c⁄figTICK_RATE_HZ
 ) + 1UL;

228 
OSMC
 = 0x16U;

231 
RTCEN
 = 1U;

234 
ITMC
 = 0x0000;

237 
ITMK
 = 1U;

240 
ITPR1
 = 1U;

241 
ITPR0
 = 1U;

244 
ITMC
 = 
usCom∑ªM©ch
;

247 
ITIF
 = 0U;

250 
ITMK
 = 0U;

253 
ITMC
 |= 0x8000;

254 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/RL78/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


84 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_FAR__
 && 
__CODE_MODEL__
 =
__CODE_MODEL_NEAR__


85 #w¨nög 
This
 
p‹t
 
has
 
nŸ
 
bìn
 
ã°ed
 
wôh
 
your
 
£À˘ed
 
mem‹y
 
modñ
 
combö©i⁄
. 
If
 
a
 
Ár
 
d©a
 modñ 
is
 
ªquúed
 
ô
 i†
ªcommíded
 
to
 
Æso
 
u£
á f¨ 
code
 model.

88 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_NEAR__
 && 
__CODE_MODEL__
 =
__CODE_MODEL_FAR__


89 #w¨nög 
This
 
p‹t
 
has
 
nŸ
 
bìn
 
ã°ed
 
wôh
 
your
 
£À˘ed
 
mem‹y
 
modñ
 
combö©i⁄
. 
If
 
a
 
Ár
 
code
 modñ 
is
 
ªquúed
 
ô
 i†
ªcommíded
 
to
 
Æso
 
u£
á f¨ 
d©a
 model.

94 
	#p‹tCHAR
 

	)

95 
	#p‹tFLOAT
 

	)

96 
	#p‹tDOUBLE
 

	)

97 
	#p‹tLONG
 

	)

98 
	#p‹tSHORT
 

	)

99 
	#p‹tSTACK_TYPE
 

	)

100 
	#p‹tBASE_TYPE
 

	)

102 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_FAR__


103 
	#p‹tPOINTER_SIZE_TYPE
 

	)

105 
	#p‹tPOINTER_SIZE_TYPE
 

	)

109 #i‡–
c⁄figUSE_16_BIT_TICKS
 == 1 )

110 
	tp‹tTickTy≥
;

111 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

113 
	tp‹tTickTy≥
;

114 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

119 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
 ( "DI" )

	)

120 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
 ( "EI" )

	)

124 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSHORT
 ) 0 )

	)

126 
	#p‹tENTER_CRITICAL
() \

128 vﬁ©ûê
usCrôiˇlNe°ög
; \

130 
	`p‹tDISABLE_INTERRUPTS
(); \

135 
usCrôiˇlNe°ög
++; \

136 }

	)

138 
	#p‹tEXIT_CRITICAL
() \

140 vﬁ©ûê
usCrôiˇlNe°ög
; \

142 if–
usCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

145 
usCrôiˇlNe°ög
--; \

149 if–
usCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

151 
	`p‹tENABLE_INTERRUPTS
(); \

154 }

	)

158 
	#p‹tYIELD
(Ë
	`__asm
–"BRK" )

	)

159 
	#p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 ) if–xHighîPri‹ôyTaskWokí ) 
	`vTaskSwôchC⁄ãxt
()

	)

160 
	#p‹tNOP
(Ë
	`__asm
–"NOP" )

	)

164 
	#p‹tBYTE_ALIGNMENT
 2

	)

165 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

166 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

170 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

171 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

176 
	#OPT_BYTES_SIZE
 4

	)

177 
	#SECU_ID_SIZE
 10

	)

178 
	#WATCHDOG_DISABLED
 0x00

	)

179 
	#LVI_ENABLED
 0xFE

	)

180 
	#LVI_DISABLED
 0xFF

	)

181 
	#RESERVED_FF
 0xFF

	)

182 
	#OCD_DISABLED
 0x04

	)

183 
	#OCD_ENABLED
 0x81

	)

184 
	#OCD_ENABLED_ERASE
 0x80

	)

186 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/RX600/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	~"°rög.h
"

79 
	~<i‹x62n.h
>

85 
	#p‹tINITIAL_PSW
 ( ( 
p‹tSTACK_TYPE
 ) 0x00030000 )

	)

86 
	#p‹tINITIAL_FPSW
 ( ( 
p‹tSTACK_TYPE
 ) 0x00000100 )

	)

94 
¥vSèπFú°Task
( );

100 
__öãºu±
 
vTickISR
( );

104 *
pxCuºítTCB
;

111 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

115 *
pxT›OfSèck
 = 0x00;

116 
pxT›OfSèck
--;

117 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

118 
pxT›OfSèck
--;

119 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

124 #ifde‡
USE_FULL_REGISTER_INITIALISATION


126 
pxT›OfSèck
--;

127 *
pxT›OfSèck
 = 0xffffffff;

128 
pxT›OfSèck
--;

129 *
pxT›OfSèck
 = 0xeeeeeeee;

130 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = 0xdddddddd;

132 
pxT›OfSèck
--;

133 *
pxT›OfSèck
 = 0xcccccccc;

134 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = 0xbbbbbbbb;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = 0xaaaaaaaa;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = 0x99999999;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = 0x88888888;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = 0x77777777;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = 0x66666666;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = 0x55555555;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = 0x44444444;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = 0x33333333;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = 0x22222222;

154 
pxT›OfSèck
--;

158 
pxT›OfSèck
 -= 15;

162 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = 
p‹tINITIAL_FPSW
;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = 0x12345678;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = 0x87654321;

170  
pxT›OfSèck
;

171 
	}
}

174 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

176 
	`vAµliˇti⁄SëupTimîI¡îru±
( );

179 if–
pxCuºítTCB
 !
NULL
 )

184 
	`vAµliˇti⁄SëupTimîI¡îru±
();

187 
	`_IEN
–
_ICU_SWINT
 ) = 1;

190 
	`_IR
–
_ICU_SWINT
 ) = 0;

193 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

196 
	`¥vSèπFú°Task
();

200  
pdFAIL
;

201 
	}
}

204 #¥agm®
ve˘‹
 = 
c⁄figTICK_VECTOR


205 
__öãºu±
 
	$vTickISR
( )

208 
	`__íabÀ_öãºu±
();

212 
	`__£t_öãºu±_Àvñ
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

214 
	`vTaskIn¸emítTick
();

216 
	`__£t_öãºu±_Àvñ
–
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

219 #if–
c⁄figUSE_PREEMPTION
 == 1 )

220 
	`èskYIELD
();

222 
	}
}

225 
	$vP‹tEndScheduÀr
( )

228 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/RX600/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 
	~<öåösics.h
>

73 #ifde‡
__˝lu•lus


89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

95 
	#p‹tBASE_TYPE
 

	)

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

101 
	tp‹tLONG
 
	tp‹tTickTy≥
;

102 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

107 
	#p‹tBYTE_ALIGNMENT
 8

	)

108 
	#p‹tSTACK_GROWTH
 -1

	)

109 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

110 
	#p‹tNOP
(Ë
	`__no_›î©i⁄
()

	)

114 
	#p‹tITU_SWINTR
 ( ( * ) 0x000872E0 )

	)

115 
	#p‹tYIELD
(Ë*
p‹tITU_SWINTR
 = ( Ë0x01; 
	`p‹tNOP
();Ö‹tNOP();Ö‹tNOP();Ö‹tNOP();Ö‹tNOP()

	)

116 
	#p‹tYIELD_FROM_ISR
–
x
 ) if––x ) !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

122 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__£t_öãºu±_Àvñ
––Ë0 )

	)

123 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__£t_öãºu±_Àvñ
––Ë
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

126 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

129 
vTaskE¡îCrôiˇl
( );

130 
vTaskExôCrôiˇl
( );

131 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

132 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

135 
ulP‹tGëIPL
( );

136 
vP‹tSëIPL
–
ulNewIPL
 );

137 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`__gë_öãºu±_Àvñ
(); 
	`p‹tDISABLE_INTERRUPTS
()

	)

138 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`__£t_öãºu±_Àvñ
––Ë–uxSavedI¡îru±Sètu†Ë)

	)

143 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

144 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

146 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR71x/ISR_Support.h

53 
EXTERN
 
pxCuºítTCB


54 
EXTERN
 
	gulCrôiˇlNe°ög


57 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


60 
p‹tSAVE_CONTEXT
 
	gMACRO


62 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

63 
STMDB
 
	gSP
!, {
	gR0
}

65 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

66 
STMDB
 
	gSP
, {SP}^

67 
NOP


68 
SUB
 
	gSP
, SP, #4

69 
LDMIA
 
	gSP
!, {
	gR0
}

71 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

72 
STMDB
 
	gR0
!, {
	gLR
}

74 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

75 
MOV
 
	gLR
, 
	gR0


77 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

78 
LDMIA
 
	gSP
!, {
	gR0
}

80 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

81 
STMDB
 
	gLR
, {
	gR0
-LR}^

82 
NOP


83 
SUB
 
	gLR
, LR, #60

85 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

86 
MRS
 
	gR0
, 
SPSR


87 
STMDB
 
	gLR
!, {
	gR0
}

89 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


90 
LDR
 
R0
, [R0]

91 
STMDB
 
	gLR
!, {
	gR0
}

93 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

94 
LDR
 
	gR1
, =
pxCuºítTCB


95 
LDR
 
R0
, [
R1
]

96 
STR
 
	gLR
, [
R0
]

98 
ENDM


101 
p‹tRESTORE_CONTEXT
 
	gMACRO


103 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

104 
LDR
 
	gR1
, =
pxCuºítTCB


105 
LDR
 
R0
, [
R1
]

106 
LDR
 
	gLR
, [
R0
]

108 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

109 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

110 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


111 
LDMFD
 
LR
!, {
	gR1
}

112 
STR
 
	gR1
, [
R0
]

114 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

115 
LDMFD
 
	gLR
!, {
	gR0
}

116 
MSR
 
	gSPSR_cxsf
, 
	gR0


118 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

119 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

120 
	gNOP


122 ; 
Re°‹e
 
the
  
	gaddªss
.

123 
LDR
 
	gLR
, [
LR
, #+60]

125 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


126 ; 
c‹ª˘
 
	gaddªss
.

127 
SUBS
 
	gPC
, 
	gLR
, #4

129 
	gENDM


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR71x/port.c

73 
	~"wdg.h
"

74 
	~"eic.h
"

77 
	~<°dlib.h
>

80 
	~"FªeRTOS.h
"

81 
	~"èsk.h
"

84 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

85 
	#p‹tTHUMB_MODE_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x20 )

	)

86 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

89 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

91 
	#p‹tMICROS_PER_SECOND
 1000000

	)

96 
¥vSëupTimîI¡îru±
( );

101 
	gulCrôiˇlNe°ög
 = ( ) 9999;

106 
__¨m
 
__úq
 
vP‹tN⁄Pªem±iveTick
( );

107 
vP‹tPªem±iveTick
( );

117 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

119 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

121 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

125 
pxT›OfSèck
--;

133 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

134 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaaaaaa;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

163 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

168 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

173 if–––Ë
pxCode
 & 0x01UL ) != 0x00UL )

176 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

179 
pxT›OfSèck
--;

184 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

186  
pxT›OfSèck
;

187 
	}
}

190 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

192 
	`vP‹tSèπFú°Task
( );

196 
	`¥vSëupTimîI¡îru±
();

199 
	`vP‹tSèπFú°Task
();

203 
	}
}

206 
	$vP‹tEndScheduÀr
( )

210 
	}
}

215 
__¨m
 
__úq
 
	$vP‹tN⁄Pªem±iveTick
( )

220 
	`vTaskIn¸emítTick
();

223 
WDG
->
SR
 = 0x0000;

224 
	`p‹tCLEAR_EIC
();

225 
	}
}

230 
	$vP‹tPªem±iveTick
( )

233 
	`vTaskIn¸emítTick
();

238 
	`vTaskSwôchC⁄ãxt
();

241 
WDG
->
SR
 = 0x0000;

242 
	`p‹tCLEAR_EIC
();

243 
	}
}

246 
	$¥vSëupTimîI¡îru±
( )

249 
	`WDG_ECITC⁄fig
–
DISABLE
 );

250 
	`WDG_C¡OnOffC⁄fig
–
DISABLE
 );

251 
	`WDG_PîiodVÆueC⁄fig
–
p‹tMICROS_PER_SECOND
 / 
c⁄figTICK_RATE_HZ
 );

254 
	`EIC_IRQCh™√lPri‹ôyC⁄fig
–
WDG_IRQCh™√l
, 1 );

255 
	`EIC_IRQCh™√lC⁄fig
–
WDG_IRQCh™√l
, 
ENABLE
 );

256 
	`EIC_IRQC⁄fig
–
ENABLE
 );

257 
	`WDG_ECITC⁄fig
–
ENABLE
 );

261 
	`WDG_C¡OnOffC⁄fig
–
ENABLE
 );

262 
	}
}

265 
__¨m
 
__öãrw‹k
 
	$vP‹tE¡îCrôiˇl
( )

268 
	`__dißbÀ_öãºu±
();

273 
ulCrôiˇlNe°ög
++;

274 
	}
}

277 
__¨m
 
__öãrw‹k
 
	$vP‹tExôCrôiˇl
( )

279 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

282 
ulCrôiˇlNe°ög
--;

286 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

288 
	`__íabÀ_öãºu±
();

291 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR71x/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

81 
	~<öåösics.h
>

83 #ifde‡
__˝lu•lus


89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

95 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

101 
	tp‹tLONG
 
	tp‹tTickTy≥
;

102 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

110 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

111 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

115 
__¨m
 
__öãrw‹k
 
vP‹tDißbÀI¡îru±sFromThumb
( );

116 
__¨m
 
__öãrw‹k
 
vP‹tE«bÀI¡îru±sFromThumb
( );

117 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

118 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

120 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_öãºu±
()

	)

121 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_öãºu±
()

	)

122 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

123 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

127 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

129 
	`vTaskSwôchC⁄ãxt
( ); \

131 if–
xSwôchRequúed
 ) \

133 
	`vTaskSwôchC⁄ãxt
(); \

135 }

	)

139 
	#p‹tEIC_CICR_ADDR
 *––
p‹tLONG
 * ) 0xFFFFF804 )

	)

140 
	#p‹tEIC_IPR_ADDR
 *––
p‹tLONG
 * ) 0xFFFFF840 )

	)

141 
	#p‹tCLEAR_EIC
(Ë
p‹tEIC_IPR_ADDR
 = 0x01 << 
p‹tEIC_CICR_ADDR


	)

146 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

147 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

149 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR75x/ISR_Support.h

54 
EXTERN
 
pxCuºítTCB


55 
EXTERN
 
	gulCrôiˇlNe°ög


58 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


61 
p‹tSAVE_CONTEXT
 
	gMACRO


63 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

64 
STMDB
 
	gSP
!, {
	gR0
}

66 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

67 
STMDB
 
	gSP
, {SP}^

68 
NOP


69 
SUB
 
	gSP
, SP, #4

70 
LDMIA
 
	gSP
!, {
	gR0
}

72 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

73 
STMDB
 
	gR0
!, {
	gLR
}

75 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

76 
MOV
 
	gLR
, 
	gR0


78 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

79 
LDMIA
 
	gSP
!, {
	gR0
}

81 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

82 
STMDB
 
	gLR
, {
	gR0
-LR}^

83 
NOP


84 
SUB
 
	gLR
, LR, #60

86 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

87 
MRS
 
	gR0
, 
SPSR


88 
STMDB
 
	gLR
!, {
	gR0
}

90 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


91 
LDR
 
R0
, [R0]

92 
STMDB
 
	gLR
!, {
	gR0
}

94 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

95 
LDR
 
	gR1
, =
pxCuºítTCB


96 
LDR
 
R0
, [
R1
]

97 
STR
 
	gLR
, [
R0
]

99 
ENDM


102 
p‹tRESTORE_CONTEXT
 
	gMACRO


104 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

105 
LDR
 
	gR1
, =
pxCuºítTCB


106 
LDR
 
R0
, [
R1
]

107 
LDR
 
	gLR
, [
R0
]

109 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

110 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

111 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


112 
LDMFD
 
LR
!, {
	gR1
}

113 
STR
 
	gR1
, [
R0
]

115 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

116 
LDMFD
 
	gLR
!, {
	gR0
}

117 
MSR
 
	gSPSR_cxsf
, 
	gR0


119 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

120 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

121 
	gNOP


123 ; 
Re°‹e
 
the
  
	gaddªss
.

124 
LDR
 
	gLR
, [
LR
, #+60]

126 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


127 ; 
c‹ª˘
 
	gaddªss
.

128 
SUBS
 
	gPC
, 
	gLR
, #4

130 
	gENDM


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR75x/port.c

73 
	~"75x_tb.h
"

74 
	~"75x_eic.h
"

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

81 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x3‡Ë

	)

82 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

85 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

88 
	#p‹tPRESCALE
 20

	)

94 
¥vSëupTimîI¡îru±
( );

99 
	gulCrôiˇlNe°ög
 = ( ) 9999;

102 
__¨m
 
vP‹tPªem±iveTick
( );

112 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

114 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

116 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

120 
pxT›OfSèck
--;

128 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

129 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaaaaaa;

132 
pxT›OfSèck
--;

133 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

134 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

158 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

163 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

167 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

174  
pxT›OfSèck
;

175 
	}
}

178 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

180 
	`vP‹tSèπFú°Task
( );

184 
	`¥vSëupTimîI¡îru±
();

187 
	`vP‹tSèπFú°Task
();

191 
	}
}

194 
	$vP‹tEndScheduÀr
( )

198 
	}
}

201 
__¨m
 
	$vP‹tPªem±iveTick
( )

204 
	`vTaskIn¸emítTick
();

209 #i‡
c⁄figUSE_PREEMPTION
 == 1

210 
	`vTaskSwôchC⁄ãxt
();

213 
	`TB_CÀ¨ITPídögBô
–
TB_IT_Upd©e
 );

214 
	}
}

217 
	$¥vSëupTimîI¡îru±
( )

219 
EIC_IRQInôTy≥Def
 
EIC_IRQInôSåu˘uª
;

220 
TB_InôTy≥Def
 
TB_InôSåu˘uª
;

223 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√lCmd
 = 
ENABLE
;

224 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√l
 = 
TB_IRQCh™√l
;

225 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√lPri‹ôy
 = 1;

226 
	`EIC_IRQInô
(&
EIC_IRQInôSåu˘uª
);

229 
TB_InôSåu˘uª
.
TB_Mode
 = 
TB_Mode_Timög
;

230 
TB_InôSåu˘uª
.
TB_Cou¡îMode
 = 
TB_Cou¡îMode_Down
;

231 
TB_InôSåu˘uª
.
TB_PªsˇÀr
 = 
p‹tPRESCALE
 - 1;

232 
TB_InôSåu˘uª
.
TB_AutoRñﬂd
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tPRESCALE
 ) / 
c⁄figTICK_RATE_HZ
 );

233 
	`TB_Inô
(&
TB_InôSåu˘uª
);

236 
	`TB_ITC⁄fig
(
TB_IT_Upd©e
, 
ENABLE
);

239 
	`TB_CÀ¨ITPídögBô
(
TB_IT_Upd©e
);

242 
	`TB_Cmd
(
ENABLE
);

243 
	}
}

246 
__¨m
 
__öãrw‹k
 
	$vP‹tE¡îCrôiˇl
( )

249 
	`__dißbÀ_öãºu±
();

254 
ulCrôiˇlNe°ög
++;

255 
	}
}

258 
__¨m
 
__öãrw‹k
 
	$vP‹tExôCrôiˇl
( )

260 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

263 
ulCrôiˇlNe°ög
--;

267 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

269 
	`__íabÀ_öãºu±
();

272 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR75x/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

81 
	~<öåösics.h
>

83 #ifde‡
__˝lu•lus


88 
	#p‹tCHAR
 

	)

89 
	#p‹tFLOAT
 

	)

90 
	#p‹tDOUBLE
 

	)

91 
	#p‹tLONG
 

	)

92 
	#p‹tSHORT
 

	)

93 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

94 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

100 
	tp‹tLONG
 
	tp‹tTickTy≥
;

101 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

106 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

107 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

108 
	#p‹tBYTE_ALIGNMENT
 8

	)

109 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

110 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

114 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

115 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

117 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_öãºu±
()

	)

118 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_öãºu±
()

	)

119 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

120 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

124 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

126 
	`vTaskSwôchC⁄ãxt
( ); \

128 if–
xSwôchRequúed
 ) \

130 
	`vTaskSwôchC⁄ãxt
(); \

132 }

	)

137 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

138 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

140 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR91x/ISR_Support.h

67 
EXTERN
 
pxCuºítTCB


68 
EXTERN
 
	gulCrôiˇlNe°ög


71 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


74 
p‹tSAVE_CONTEXT
 
	gMACRO


76 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

77 
STMDB
 
	gSP
!, {
	gR0
}

79 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

80 
STMDB
 
	gSP
, {SP}^

81 
NOP


82 
SUB
 
	gSP
, SP, #4

83 
LDMIA
 
	gSP
!, {
	gR0
}

85 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

86 
STMDB
 
	gR0
!, {
	gLR
}

88 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

89 
MOV
 
	gLR
, 
	gR0


91 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

92 
LDMIA
 
	gSP
!, {
	gR0
}

94 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

95 
STMDB
 
	gLR
, {
	gR0
-LR}^

96 
NOP


97 
SUB
 
	gLR
, LR, #60

99 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

100 
MRS
 
	gR0
, 
SPSR


101 
STMDB
 
	gLR
!, {
	gR0
}

103 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


104 
LDR
 
R0
, [R0]

105 
STMDB
 
	gLR
!, {
	gR0
}

107 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

108 
LDR
 
	gR1
, =
pxCuºítTCB


109 
LDR
 
R0
, [
R1
]

110 
STR
 
	gLR
, [
R0
]

112 
ENDM


115 
p‹tRESTORE_CONTEXT
 
	gMACRO


117 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

118 
LDR
 
	gR1
, =
pxCuºítTCB


119 
LDR
 
R0
, [
R1
]

120 
LDR
 
	gLR
, [
R0
]

122 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

123 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

124 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


125 
LDMFD
 
LR
!, {
	gR1
}

126 
STR
 
	gR1
, [
R0
]

128 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

129 
LDMFD
 
	gLR
!, {
	gR0
}

130 
MSR
 
	gSPSR_cxsf
, 
	gR0


132 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

133 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

134 
	gNOP


136 ; 
Re°‹e
 
the
  
	gaddªss
.

137 
LDR
 
	gLR
, [
LR
, #+60]

139 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


140 ; 
c‹ª˘
 
	gaddªss
.

141 
SUBS
 
	gPC
, 
	gLR
, #4

143 
	gENDM


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR91x/port.c

73 
	~"91x_lib.h
"

76 
	~<°dlib.h
>

77 
	~<as£π.h
>

80 
	~"FªeRTOS.h
"

81 
	~"èsk.h
"

83 #i‚de‡
c⁄figUSE_WATCHDOG_TICK


84 #îr‹ 
c⁄figUSE_WATCHDOG_TICK
 
mu°
 
be
 
£t
 
to
 
eôhî
 1 
‹
 0 
ö
 
FªeRTOSC⁄fig
.
h
Åÿ
u£
Éôhî 
the
 
W©chdog
 o∏
timî
 2Åÿ
gíî©e
Åhê
tick
 
öãºu±
 
ª•e˘ivñy
.

88 #i‚de‡
_RUN_TASK_IN_ARM_MODE_


89 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x3‡Ë

	)

91 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

94 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

97 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

99 #i‚de‡
abs


100 
	#abs
(
x
Ë((x)>0 ? (xË: -(x))

	)

115 
	#TOGGLE_LED
(
p‹t
,
pö
) \

116 i‡–((((
p‹t
)->
DR
[(
pö
)<<2])Ë& (pö)Ë!
Bô_RESET
 ) \

118 (
p‹t
)->
DR
[(
pö
) <<2] = 0x00; \

122 (
p‹t
)->
DR
[(
pö
) <<2] = (pin); \

123 }

	)

129 
¥vSëupTimîI¡îru±
( );

134 
	gulCrôiˇlNe°ög
 = ( ) 9999;

139 
WDG_IRQH™dÀr
( );

142 
¥vDeÁu…H™dÀr
( );

144 #i‡
c⁄figUSE_WATCHDOG_TICK
 == 0

146 
u16
 
	gs_nPul£Lígth
;

157 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

159 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

161 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

165 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

174 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaaaaaa;

177 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

179 
pxT›OfSèck
--;

180 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

181 
pxT›OfSèck
--;

182 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

183 
pxT›OfSèck
--;

184 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

185 
pxT›OfSèck
--;

186 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

187 
pxT›OfSèck
--;

188 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

189 
pxT›OfSèck
--;

190 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

191 
pxT›OfSèck
--;

192 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

193 
pxT›OfSèck
--;

194 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

195 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

197 
pxT›OfSèck
--;

198 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

199 
pxT›OfSèck
--;

200 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

201 
pxT›OfSèck
--;

202 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

203 
pxT›OfSèck
--;

207 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

208 
pxT›OfSèck
--;

211 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

212 
pxT›OfSèck
--;

217 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

219  
pxT›OfSèck
;

220 
	}
}

223 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

225 
	`vP‹tSèπFú°Task
( );

229 
	`¥vSëupTimîI¡îru±
();

232 
	`vP‹tSèπFú°Task
();

236 
	}
}

239 
	$vP‹tEndScheduÀr
( )

243 
	}
}

248 #i‡
c⁄figUSE_WATCHDOG_TICK
 == 1

250 
	$¥vFödFa˘‹s
(
u32
 
n
, 
u16
 *
a
, u32 *
b
)

255 
u32
 
b0
;

256 
u16
 
a0
;

257 
îr
, 
îr_mö
=
n
;

259 *
a
 = 
a0
 = ((
n
-1)/65536ul) + 1;

260 *
b
 = 
b0
 = 
n
 / *
a
;

262 ; *
a
 <= 256; (*a)++)

264 *
b
 = 
n
 / *
a
;

265 
îr
 = ()*
a
 * ()*
b
 - ()
n
;

266 i‡(
	`abs
(
îr
Ë> (*
a
 / 2))

268 (*
b
)++;

269 
îr
 = ()*
a
 * ()*
b
 - ()
n
;

271 i‡(
	`abs
(
îr
Ë<ábs(
îr_mö
))

273 
îr_mö
 = 
îr
;

274 
a0
 = *
a
;

275 
b0
 = *
b
;

276 i‡(
îr
 == 0) ;

280 *
a
 = 
a0
;

281 *
b
 = 
b0
;

282 
	}
}

285 
	$¥vSëupTimîI¡îru±
( )

287 
WDG_InôTy≥Def
 
xWdg
;

288 
a
;

289 
n
 = 
c⁄figCPU_PERIPH_HZ
 / 
c⁄figTICK_RATE_HZ
, 
b
;

294 
	`SCU_APBPîùhClockC⁄fig
–
__WDG
, 
ENABLE
 );

295 
	`WDG_DeInô
();

296 
	`WDG_Såu˘Inô
(&
xWdg
);

297 
	`¥vFödFa˘‹s
–
n
, &
a
, &
b
 );

298 
xWdg
.
WDG_PªsˇÀr
 = 
a
 - 1;

299 
xWdg
.
WDG_Pªlﬂd
 = 
b
 - 1;

300 
	`WDG_Inô
–&
xWdg
 );

301 
	`WDG_ITC⁄fig
(
ENABLE
);

304 
	`VIC_C⁄fig
–
WDG_ITLöe
, 
VIC_IRQ
, 10 );

305 
	`VIC_ITCmd
–
WDG_ITLöe
, 
ENABLE
 );

308 
VIC0
->
DVAR
 = ( Ë
¥vDeÁu…H™dÀr
;

309 
VIC1
->
DVAR
 = ( Ë
¥vDeÁu…H™dÀr
;

311 
	`WDG_Cmd
(
ENABLE
);

312 
	}
}

315 
	$WDG_IRQH™dÀr
( )

319 
	`vTaskIn¸emítTick
();

321 #i‡
c⁄figUSE_PREEMPTION
 == 1

326 
	`vTaskSwôchC⁄ãxt
();

331 
WDG
->
SR
 &= ~0x0001;

333 
	}
}

337 
	$¥vFödFa˘‹s
(
u32
 
n
, 
u8
 *
a
, 
u16
 *
b
)

342 
u16
 
b0
;

343 
u8
 
a0
;

344 
îr
, 
îr_mö
=
n
;

347 *
a
 = 
a0
 = ((
n
-1)/256) + 1;

348 *
b
 = 
b0
 = 
n
 / *
a
;

350 ; *
a
 <= 256; (*a)++)

352 *
b
 = 
n
 / *
a
;

353 
îr
 = ()*
a
 * ()*
b
 - ()
n
;

354 i‡(
	`abs
(
îr
Ë> (*
a
 / 2))

356 (*
b
)++;

357 
îr
 = ()*
a
 * ()*
b
 - ()
n
;

359 i‡(
	`abs
(
îr
Ë<ábs(
îr_mö
))

361 
îr_mö
 = 
îr
;

362 
a0
 = *
a
;

363 
b0
 = *
b
;

364 i‡(
îr
 == 0) ;

368 *
a
 = 
a0
;

369 *
b
 = 
b0
;

370 
	}
}

373 
	$¥vSëupTimîI¡îru±
( )

375 
a
;

376 
b
;

377 
n
 = 
c⁄figCPU_PERIPH_HZ
 / 
c⁄figTICK_RATE_HZ
;

379 
TIM_InôTy≥Def
 
timî
;

381 
	`SCU_APBPîùhClockC⁄fig
–
__TIM23
, 
ENABLE
 );

382 
	`TIM_DeInô
(
TIM2
);

383 
	`TIM_Såu˘Inô
(&
timî
);

384 
	`¥vFödFa˘‹s
–
n
, &
a
, &
b
 );

386 
timî
.
TIM_Mode
 = 
TIM_OCM_CHANNEL_1
;

387 
timî
.
TIM_OC1_Modes
 = 
TIM_TIMING
;

388 
timî
.
TIM_Clock_Sour˚
 = 
TIM_CLK_APB
;

389 
timî
.
TIM_Clock_Edge
 = 
TIM_CLK_EDGE_RISING
;

390 
timî
.
TIM_PªsˇÀr
 = 
a
-1;

391 
timî
.
TIM_Pul£_Levñ_1
 = 
TIM_HIGH
;

392 
timî
.
TIM_Pul£_Lígth_1
 = 
s_nPul£Lígth
 = 
b
-1;

394 
	`TIM_Inô
 (
TIM2
, &
timî
);

395 
	`TIM_ITC⁄fig
(
TIM2
, 
TIM_IT_OC1
, 
ENABLE
);

397 
	`VIC_C⁄fig
–
TIM2_ITLöe
, 
VIC_IRQ
, 10 );

398 
	`VIC_ITCmd
–
TIM2_ITLöe
, 
ENABLE
 );

401 
VIC0
->
DVAR
 = ( Ë
¥vDeÁu…H™dÀr
;

402 
VIC1
->
DVAR
 = ( Ë
¥vDeÁu…H™dÀr
;

404 
	`TIM_Cou¡îCmd
(
TIM2
, 
TIM_CLEAR
);

405 
	`TIM_Cou¡îCmd
(
TIM2
, 
TIM_START
);

406 
	}
}

409 
	$TIM2_IRQH™dÀr
( )

412 
TIM2
->
OC1R
 +
s_nPul£Lígth
;

415 
	`vTaskIn¸emítTick
();

417 #i‡
c⁄figUSE_PREEMPTION
 == 1

422 
	`vTaskSwôchC⁄ãxt
();

427 
TIM2
->
SR
 &~
TIM_FLAG_OC1
;

428 
	}
}

434 
__¨m
 
__öãrw‹k
 
	$vP‹tE¡îCrôiˇl
( )

437 
	`p‹tDISABLE_INTERRUPTS
();

442 
ulCrôiˇlNe°ög
++;

443 
	}
}

446 
__¨m
 
__öãrw‹k
 
	$vP‹tExôCrôiˇl
( )

448 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

451 
ulCrôiˇlNe°ög
--;

455 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

457 
	`p‹tENABLE_INTERRUPTS
();

460 
	}
}

463 
	$¥vDeÁu…H™dÀr
( )

465 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR91x/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

81 
	~<öåösics.h
>

83 #ifde‡
__˝lu•lus


88 
	#p‹tCHAR
 

	)

89 
	#p‹tFLOAT
 

	)

90 
	#p‹tDOUBLE
 

	)

91 
	#p‹tLONG
 

	)

92 
	#p‹tSHORT
 

	)

93 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

94 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

100 
	tp‹tLONG
 
	tp‹tTickTy≥
;

101 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

106 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

107 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

108 
	#p‹tBYTE_ALIGNMENT
 8

	)

109 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

110 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

114 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

115 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

116 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

117 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

119 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_öãºu±
()

	)

120 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_öãºu±
()

	)

126 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

128 
	`vTaskSwôchC⁄ãxt
( ); \

130 if–
xSwôchRequúed
 ) \

132 
	`vTaskSwôchC⁄ãxt
(); \

134 }

	)

139 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

140 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

142 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/V850ES/ISR_Support.h

67 
EXTERN
 
pxCuºítTCB


68 
EXTERN
 
	gusCrôiˇlNe°ög


70 
	~"FªeRTOSC⁄fig.h
"

73 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


76 
p‹tSAVE_CONTEXT
 
MACRO


78 
	gadd
 -0x0C,
	g•
 ; 
¥ï¨e
 
°ack
 
to
 
ßve
 
√˚sßry
 
vÆues


79 
	g°
.
w
 
	gÕ
,8[
•
] ; 
°‹e
 
LP
 
to
 
°ack


80 
	g°§
 0,
r31


81 
	g°
.
w
 
	gÕ
,4[
•
] ; 
°‹e
 
EIPC
 
to
 
°ack


82 
	g°§
 1,
Õ


83 
	g°
.
w
 
	gÕ
,0[
•
] ; 
°‹e
 
EIPSW
 
to
 
	g°ack


84 #i‡
c⁄figDATA_MODE
 =1 ; 
Usög
 
the
 
Töy
 
d©a
 
modñ


85 
	g¥ï¨e
 {
	gr20
,
	gr21
,
	gr22
,
	gr23
,
	gr24
,
	gr25
,
	gr26
,
	gr27
,
	gr28
,
	gr29
,
	gr30
},76,
	g•
 ; 
ßve
 
gíîÆ
 
puΩo£
 
ªgi°îs


86 
	gs°
.
w
 
	gr19
,72[
ï
]

87 
	gs°
.
w
 
	gr18
,68[
ï
]

88 
	gs°
.
w
 
	gr17
,64[
ï
]

89 
	gs°
.
w
 
	gr16
,60[
ï
]

90 
	gs°
.
w
 
	gr15
,56[
ï
]

91 
	gs°
.
w
 
	gr14
,52[
ï
]

92 
	gs°
.
w
 
	gr13
,48[
ï
]

93 
	gs°
.
w
 
	gr12
,44[
ï
]

94 
	gs°
.
w
 
	gr11
,40[
ï
]

95 
	gs°
.
w
 
	gr10
,36[
ï
]

96 
	gs°
.
w
 
	gr9
,32[
ï
]

97 
	gs°
.
w
 
	gr8
,28[
ï
]

98 
	gs°
.
w
 
	gr7
,24[
ï
]

99 
	gs°
.
w
 
	gr6
,20[
ï
]

100 
	gs°
.
w
 
	gr5
,16[
ï
]

101 
	gs°
.
w
 
	gr4
,12[
ï
]

103 
	g¥ï¨e
 {
	gr20
,
	gr21
,
	gr22
,
	gr23
,
	gr24
,
	gr26
,
	gr27
,
	gr28
,
	gr29
,
	gr30
},72,
	g•
 ; 
ßve
 
gíîÆ
 
puΩo£
 
ªgi°îs


104 
	gs°
.
w
 
	gr19
,68[
ï
]

105 
	gs°
.
w
 
	gr18
,64[
ï
]

106 
	gs°
.
w
 
	gr17
,60[
ï
]

107 
	gs°
.
w
 
	gr16
,56[
ï
]

108 
	gs°
.
w
 
	gr15
,52[
ï
]

109 
	gs°
.
w
 
	gr14
,48[
ï
]

110 
	gs°
.
w
 
	gr13
,44[
ï
]

111 
	gs°
.
w
 
	gr12
,40[
ï
]

112 
	gs°
.
w
 
	gr11
,36[
ï
]

113 
	gs°
.
w
 
	gr10
,32[
ï
]

114 
	gs°
.
w
 
	gr9
,28[
ï
]

115 
	gs°
.
w
 
	gr8
,24[
ï
]

116 
	gs°
.
w
 
	gr7
,20[
ï
]

117 
	gs°
.
w
 
	gr6
,16[
ï
]

118 
	gs°
.
w
 
	gr5
,12[
ï
]

120 
	gs°
.
w
 
	gr2
,8[
ï
]

121 
	gs°
.
w
 
	gr1
,4[
ï
]

122 
MOVHI
 
hi1
(
usCrôiˇlNe°ög
),
	gr0
,
	gr1
 ; 
ßve
 usCrôiˇlNe°ög 
vÆue
 
to
 
°ack


123 
	gld
.
w
 
lw1
(
usCrôiˇlNe°ög
)[
r1
],
r2


124 
	gs°
.
w
 
	gr2
,0[
ï
]

125 
MOVHI
 
hi1
(
pxCuºítTCB
),
	gr0
,
	gr1
 ; 
ßve
 
SP
 
to
 
t›
 
of
 
cuºít
 
TCB


126 
	gld
.
w
 
lw1
(
pxCuºítTCB
)[
r1
],
r2


127 
	g°
.
w
 
	g•
,0[
r2
]

128 
ENDM


131 
p‹tRESTORE_CONTEXT
 
MACRO


133 
MOVHI
 
hi1
(
pxCuºítTCB
),
	gr0
,
	gr1
 ; 
gë
 
Sèckpoöãr
 
addªss


134 
	gld
.
w
 
lw1
(
pxCuºítTCB
)[
r1
],
•


135 
MOV
 
	g•
,
r1


136 
	gld
.
	gw
 0[
r1
],
	g•
 ; 
lﬂd
 
°ackpoöãr


137 
MOV
 
	g•
,
	gï
 ; 
£t
 
°ack
 
poöãr
 
to
 
ñemít
Öointer

138 
	g¶d
.
	gw
 0[
ï
],
	gr1
 ; 
lﬂd
 
usCrôiˇlNe°ög
 
vÆue
 
‰om
 
°ack


139 
MOVHI
 
hi1
(
usCrôiˇlNe°ög
),
	gr0
,
r2


140 
	g°
.
w
 
	gr1
,
lw1
(
usCrôiˇlNe°ög
)[
r2
]

141 
	g¶d
.
	gw
 4[
ï
],
	gr1
 ; 
ª°‹e
 
gíîÆ
 
puΩo£
 
ªgi°îs


142 
	g¶d
.
	gw
 8[
ï
],
	gr2


143 #i‡
c⁄figDATA_MODE
 =1 ; 
Usög
 
Töy
 
d©a
 
modñ


144 
	g¶d
.
	gw
 12[
ï
],
r4


145 
	g¶d
.
	gw
 16[
ï
],
r5


146 
	g¶d
.
	gw
 20[
ï
],
r6


147 
	g¶d
.
	gw
 24[
ï
],
r7


148 
	g¶d
.
	gw
 28[
ï
],
r8


149 
	g¶d
.
	gw
 32[
ï
],
r9


150 
	g¶d
.
	gw
 36[
ï
],
r10


151 
	g¶d
.
	gw
 40[
ï
],
r11


152 
	g¶d
.
	gw
 44[
ï
],
r12


153 
	g¶d
.
	gw
 48[
ï
],
r13


154 
	g¶d
.
	gw
 52[
ï
],
r14


155 
	g¶d
.
	gw
 56[
ï
],
r15


156 
	g¶d
.
	gw
 60[
ï
],
r16


157 
	g¶d
.
	gw
 64[
ï
],
r17


158 
	g¶d
.
	gw
 68[
ï
],
r18


159 
	g¶d
.
	gw
 72[
ï
],
r19


160 
	gdi•o£
 76,{
	gr20
,
	gr21
,
	gr22
,
	gr23
,
	gr24
,
	gr25
,
	gr26
,
	gr27
,
	gr28
,
	gr29
,
	gr30
}

162 
	g¶d
.
	gw
 12[
ï
],
r5


163 
	g¶d
.
	gw
 16[
ï
],
r6


164 
	g¶d
.
	gw
 20[
ï
],
r7


165 
	g¶d
.
	gw
 24[
ï
],
r8


166 
	g¶d
.
	gw
 28[
ï
],
r9


167 
	g¶d
.
	gw
 32[
ï
],
r10


168 
	g¶d
.
	gw
 36[
ï
],
r11


169 
	g¶d
.
	gw
 40[
ï
],
r12


170 
	g¶d
.
	gw
 44[
ï
],
r13


171 
	g¶d
.
	gw
 48[
ï
],
r14


172 
	g¶d
.
	gw
 52[
ï
],
r15


173 
	g¶d
.
	gw
 56[
ï
],
r16


174 
	g¶d
.
	gw
 60[
ï
],
r17


175 
	g¶d
.
	gw
 64[
ï
],
r18


176 
	g¶d
.
	gw
 68[
ï
],
r19


177 
	gdi•o£
 72,{
	gr20
,
	gr21
,
	gr22
,
	gr23
,
	gr24
,
	gr26
,
	gr27
,
	gr28
,
	gr29
,
	gr30
}

179 
	gld
.
	gw
 0[
•
],
	gÕ
 ; 
ª°‹e
 
EIPSW
 
‰om
 
°ack


180 
ld§
 
	gÕ
,1

181 
	gld
.
	gw
 4[
•
],
	gÕ
 ; 
ª°‹e
 
EIPC
 
‰om
 
°ack


182 
ld§
 
	gÕ
,0

183 
	gld
.
	gw
 8[
•
],
	gÕ
 ; 
ª°‹e
 
LP
 
‰om
 
°ack


184 
	gadd
 0x0C,
	g•
 ; 
£t
 
SP
 
to
 
right
 
posôi⁄


186 
RETI


188 
	gENDM


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/V850ES/port.c

68 
	~<°dlib.h
>

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

76 
	#p‹tINITIAL_CRITICAL_NESTING
 (–
p‹tSTACK_TYPE
 ) 10)

	)

79 
	#p‹tPSW
 (–
p‹tSTACK_TYPE
 ) 0x00000000)

	)

83 
	ttskTCB
;

84 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

87 vﬁ©ûê
p‹tSTACK_TYPE
 
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

91 
¥vSëupTimîI¡îru±
( );

94 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

96 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

97 
pxT›OfSèck
--;

98 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

99 
pxT›OfSèck
--;

100 *
pxT›OfSèck
 = 
p‹tPSW
;

101 
pxT›OfSèck
--;

102 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x20202020;

103 
pxT›OfSèck
--;

104 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x21212121;

105 
pxT›OfSèck
--;

106 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x22222222;

107 
pxT›OfSèck
--;

108 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x23232323;

109 
pxT›OfSèck
--;

110 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x24242424;

111 
pxT›OfSèck
--;

112 #i‡(
__DATA_MODEL__
 == 0) || (__DATA_MODEL__ == 1)

113 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x25252525;

114 
pxT›OfSèck
--;

116 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x26262626;

117 
pxT›OfSèck
--;

118 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x27272727;

119 
pxT›OfSèck
--;

120 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x28282828;

121 
pxT›OfSèck
--;

122 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x29292929;

123 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x30303030;

125 
pxT›OfSèck
--;

126 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x19191919;

127 
pxT›OfSèck
--;

128 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x18181818;

129 
pxT›OfSèck
--;

130 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x17171717;

131 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x16161616;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x15151515;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x14141414;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x13131313;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x99999999;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x88888888;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x77777777;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x66666666;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x55555555;

155 
pxT›OfSèck
--;

156 #i‡
__DATA_MODEL__
 == 0 || __DATA_MODEL__ == 1

157 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x44444444;

158 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x22222222;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

170  
pxT›OfSèck
;

171 
	}
}

174 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

178 
	`¥vSëupTimîI¡îru±
();

181 
	`vP‹tSèπ
();

184  
pdTRUE
;

185 
	}
}

188 
	$vP‹tEndScheduÀr
( )

192 
	}
}

198 
	$¥vSëupTimîI¡îru±
( )

200 
TM0CE
 = 0;

201 
TM0EQMK0
 = 1;

202 
TM0EQIF0
 = 0;

204 #ifde‡
__IAR_V850ES_Fx3__


206 
TM0CMP0
 = (((
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
) / 2)-1);

210 
TM0CMP0
 = (
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
);

214 
TM0EQIC0
 &= 0xF8;

215 
TM0CTL0
 = 0x00;

216 
TM0EQIF0
 = 0;

217 
TM0EQMK0
 = 0;

218 
TM0CE
 = 1;

219 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/V850ES/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 

	)

91 
	#p‹tBASE_TYPE
 

	)

94 #i‡(
c⁄figUSE_16_BIT_TICKS
==1)

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
 ( "DI" )

	)

105 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
 ( "EI" )

	)

109 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tBASE_TYPE
 ) 0 )

	)

111 
	#p‹tENTER_CRITICAL
() \

113 vﬁ©ûê 
p‹tSTACK_TYPE
 
usCrôiˇlNe°ög
; \

115 
	`p‹tDISABLE_INTERRUPTS
(); \

120 
usCrôiˇlNe°ög
++; \

121 }

	)

123 
	#p‹tEXIT_CRITICAL
() \

125 vﬁ©ûê 
p‹tSTACK_TYPE
 
usCrôiˇlNe°ög
; \

127 if–
usCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

130 
usCrôiˇlNe°ög
--; \

134 if–
usCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

136 
	`p‹tENABLE_INTERRUPTS
(); \

139 }

	)

143 
vP‹tYõld
( );

144 
vP‹tSèπ
( );

145 
p‹tSAVE_CONTEXT
( );

146 
p‹tRESTORE_CONTEXT
( );

147 
	#p‹tYIELD
(Ë
	`__asm
 ( "å≠ 0" )

	)

148 
	#p‹tNOP
(Ë
	`__asm
 ( "NOP" )

	)

149 
vTaskSwôchC⁄ãxt
( );

150 
	#p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 ) if–xHighîPri‹ôyTaskWokí ) 
	`vTaskSwôchC⁄ãxt
()

	)

155 
	#p‹tBYTE_ALIGNMENT
 4

	)

156 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

157 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

161 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

162 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

165 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC18F/port.c

97 
	~"FªeRTOS.h
"

98 
	~"èsk.h
"

101 
	~"timîs.h
"

108 
	#p‹tTIMER_FOSC_SCALE
 ( ( Ë4 )

	)

112 
	#p‹tINITAL_INTERRUPT_STATE
 0xc0

	)

115 
	#p‹tGLOBAL_INTERRUPT_FLAG
 0x80

	)

119 
	#p‹tINTERRUPTS_UNCHANGED
 0x00

	)

125 
	#p‹tCOMPILER_MANAGED_MEMORY_SIZE
 ( ( Ë0x13 )

	)

129 
	ttskTCB
;

130 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

133 
	#p‹tBIT_SET
 ( ( Ë1 )

	)

134 
	#p‹tBIT_CLEAR
 ( ( Ë0 )

	)

140 
vSîülTxISR
( );

141 
vSîülRxISR
( );

146 
¥vSëupTimîI¡îru±
( );

152 
¥vTickISR
( );

158 
¥vLowI¡îru±
( );

185 
	#p‹tSAVE_CONTEXT
–
ucF‹˚dI¡îru±Fœgs
 ) \

187 
_asm
 \

190 
MOVFF
 
WREG
, 
PREINC1
 \

191 
MOVFF
 
STATUS
, 
PREINC1
 \

194 
MOVFF
 
INTCON
, 
WREG
 \

195 
IORLW
 
ucF‹˚dI¡îru±Fœgs
 \

196 
MOVFF
 
WREG
, 
PREINC1
 \

197 
_ídasm
 \

199 
	`p‹tDISABLE_INTERRUPTS
(); \

201 
_asm
 \

203 
MOVFF
 
BSR
, 
PREINC1
 \

204 
MOVFF
 
FSR2L
, 
PREINC1
 \

205 
MOVFF
 
FSR2H
, 
PREINC1
 \

206 
MOVFF
 
FSR0L
, 
PREINC1
 \

207 
MOVFF
 
FSR0H
, 
PREINC1
 \

208 
MOVFF
 
TABLAT
, 
PREINC1
 \

209 
MOVFF
 
TBLPTRU
, 
PREINC1
 \

210 
MOVFF
 
TBLPTRH
, 
PREINC1
 \

211 
MOVFF
 
TBLPTRL
, 
PREINC1
 \

212 
MOVFF
 
PRODH
, 
PREINC1
 \

213 
MOVFF
 
PRODL
, 
PREINC1
 \

214 
MOVFF
 
PCLATU
, 
PREINC1
 \

215 
MOVFF
 
PCLATH
, 
PREINC1
 \

217 
CLRF
 
FSR0L
, 0 \

218 
CLRF
 
FSR0H
, 0 \

219 
MOVFF
 
POSTINC0
, 
PREINC1
 \

220 
MOVFF
 
POSTINC0
, 
PREINC1
 \

221 
MOVFF
 
POSTINC0
, 
PREINC1
 \

222 
MOVFF
 
POSTINC0
, 
PREINC1
 \

223 
MOVFF
 
POSTINC0
, 
PREINC1
 \

224 
MOVFF
 
POSTINC0
, 
PREINC1
 \

225 
MOVFF
 
POSTINC0
, 
PREINC1
 \

226 
MOVFF
 
POSTINC0
, 
PREINC1
 \

227 
MOVFF
 
POSTINC0
, 
PREINC1
 \

228 
MOVFF
 
POSTINC0
, 
PREINC1
 \

229 
MOVFF
 
POSTINC0
, 
PREINC1
 \

230 
MOVFF
 
POSTINC0
, 
PREINC1
 \

231 
MOVFF
 
POSTINC0
, 
PREINC1
 \

232 
MOVFF
 
POSTINC0
, 
PREINC1
 \

233 
MOVFF
 
POSTINC0
, 
PREINC1
 \

234 
MOVFF
 
POSTINC0
, 
PREINC1
 \

235 
MOVFF
 
POSTINC0
, 
PREINC1
 \

236 
MOVFF
 
POSTINC0
, 
PREINC1
 \

237 
MOVFF
 
POSTINC0
, 
PREINC1
 \

238 
MOVFF
 
INDF0
, 
PREINC1
 \

239 
MOVFF
 
FSR0L
, 
PREINC1
 \

240 
MOVFF
 
FSR0H
, 
PREINC1
 \

243 
MOVFF
 
STKPTR
, 
FSR0L
 \

244 
_ídasm
 \

247  
STKPTR
 > ( ) 0 ) \

249 
_asm
 \

250 
MOVFF
 
TOSL
, 
PREINC1
 \

251 
MOVFF
 
TOSH
, 
PREINC1
 \

252 
MOVFF
 
TOSU
, 
PREINC1
 \

253 
POP
 \

254 
_ídasm
 \

257 
_asm
 \

260 
MOVFF
 
FSR0L
, 
PREINC1
 \

261 
MOVF
 
PREINC1
, 1, 0 \

262 
_ídasm
 \

265 
_asm
 \

266 
MOVFF
 
pxCuºítTCB
, 
FSR0L
 \

267 
MOVFF
 
pxCuºítTCB
 + 1, 
FSR0H
 \

268 
MOVFF
 
FSR1L
, 
POSTINC0
 \

269 
MOVFF
 
FSR1H
, 
POSTINC0
 \

270 
_ídasm
 \

271 }

	)

278 
	#p‹tRESTORE_CONTEXT
() \

280 
_asm
 \

282 
MOVFF
 
pxCuºítTCB
, 
FSR0L
 \

283 
MOVFF
 
pxCuºítTCB
 + 1, 
FSR0H
 \

287 
MOVFF
 
POSTINC0
, 
FSR1L
 \

288 
MOVFF
 
POSTINC0
, 
FSR1H
 \

292 
MOVFF
 
POSTDEC1
, 
FSR0L
 \

293 
MOVFF
 
POSTDEC1
, 
FSR0L
 \

294 
_ídasm
 \

297 
STKPTR
 = 0; \

299  
STKPTR
 < 
FSR0L
 ) \

301 
_asm
 \

302 
PUSH
 \

303 
MOVF
 
POSTDEC1
, 0, 0 \

304 
MOVWF
 
TOSU
, 0 \

305 
MOVF
 
POSTDEC1
, 0, 0 \

306 
MOVWF
 
TOSH
, 0 \

307 
MOVF
 
POSTDEC1
, 0, 0 \

308 
MOVWF
 
TOSL
, 0 \

309 
_ídasm
 \

312 
_asm
 \

314 
MOVFF
 
POSTDEC1
, 
FSR0H
 \

315 
MOVFF
 
POSTDEC1
, 
FSR0L
 \

316 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

317 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

318 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

319 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

320 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

321 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

322 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

323 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

324 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

325 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

326 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

327 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

328 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

329 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

330 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

331 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

332 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

333 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

334 
MOVFF
 
POSTDEC1
, 
POSTDEC0
 \

335 
MOVFF
 
POSTDEC1
, 
INDF0
 \

337 
MOVFF
 
POSTDEC1
, 
PCLATH
 \

338 
MOVFF
 
POSTDEC1
, 
PCLATU
 \

339 
MOVFF
 
POSTDEC1
, 
PRODL
 \

340 
MOVFF
 
POSTDEC1
, 
PRODH
 \

341 
MOVFF
 
POSTDEC1
, 
TBLPTRL
 \

342 
MOVFF
 
POSTDEC1
, 
TBLPTRH
 \

343 
MOVFF
 
POSTDEC1
, 
TBLPTRU
 \

344 
MOVFF
 
POSTDEC1
, 
TABLAT
 \

345 
MOVFF
 
POSTDEC1
, 
FSR0H
 \

346 
MOVFF
 
POSTDEC1
, 
FSR0L
 \

347 
MOVFF
 
POSTDEC1
, 
FSR2H
 \

348 
MOVFF
 
POSTDEC1
, 
FSR2L
 \

349 
MOVFF
 
POSTDEC1
, 
BSR
 \

352 
MOVFF
 
POSTDEC1
, 
WREG
 \

353 
_ídasm
 \

359 if–
WREG
 & 
p‹tGLOBAL_INTERRUPT_FLAG
 ) \

361 
_asm
 \

362 
MOVFF
 
POSTDEC1
, 
STATUS
 \

363 
MOVFF
 
POSTDEC1
, 
WREG
 \

365 
RETFIE
 0 \

366 
_ídasm
 \

370 
_asm
 \

371 
MOVFF
 
POSTDEC1
, 
STATUS
 \

372 
MOVFF
 
POSTDEC1
, 
WREG
 \

375 
RETURN
 0 \

376 
_ídasm
 \

378 }

	)

384 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

386 
ulAddªss
;

387 
ucBlock
;

392 *
pxT›OfSèck
 = 0x11;

393 
pxT›OfSèck
++;

394 *
pxT›OfSèck
 = 0x22;

395 
pxT›OfSèck
++;

396 *
pxT›OfSèck
 = 0x33;

397 
pxT›OfSèck
++;

405 
ulAddªss
 = ( Ë
pvP¨amëîs
;

406 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulAddªss
 & ( ) 0x00ff );

407 
pxT›OfSèck
++;

409 
ulAddªss
 >>= 8;

410 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulAddªss
 & ( ) 0x00ff );

411 
pxT›OfSèck
++;

417 *
pxT›OfSèck
 = 0x44;

418 
pxT›OfSèck
++;

422 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x66;

423 
pxT›OfSèck
++;

425 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xcc;

426 
pxT›OfSèck
++;

429 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITAL_INTERRUPT_STATE
;

430 
pxT›OfSèck
++;

432 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11;

433 
pxT›OfSèck
++;

435 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x22;

436 
pxT›OfSèck
++;

438 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x33;

439 
pxT›OfSèck
++;

441 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x44;

442 
pxT›OfSèck
++;

444 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x55;

445 
pxT›OfSèck
++;

447 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x66;

448 
pxT›OfSèck
++;

450 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

451 
pxT›OfSèck
++;

453 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x88;

454 
pxT›OfSèck
++;

456 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x99;

457 
pxT›OfSèck
++;

459 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaa;

460 
pxT›OfSèck
++;

462 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xbb;

463 
pxT›OfSèck
++;

465 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

466 
pxT›OfSèck
++;

468 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

469 
pxT›OfSèck
++;

472  
ucBlock
 = 0; ucBlock <
p‹tCOMPILER_MANAGED_MEMORY_SIZE
; ucBlock++ )

474 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
ucBlock
;

475 *
pxT›OfSèck
++;

479 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tCOMPILER_MANAGED_MEMORY_SIZE
;

480 
pxT›OfSèck
++;

482 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00;

483 
pxT›OfSèck
++;

487 
ulAddªss
 = ( Ë
pxCode
;

490 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulAddªss
 & ( ) 0x00ff );

491 
pxT›OfSèck
++;

492 
ulAddªss
 >>= 8;

495 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulAddªss
 & ( ) 0x00ff );

496 
pxT›OfSèck
++;

497 
ulAddªss
 >>= 8;

500 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulAddªss
 & ( ) 0x00ff );

501 
pxT›OfSèck
++;

505 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 1;

506 
pxT›OfSèck
++;

508  
pxT›OfSèck
;

509 
	}
}

512 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

515 
	`¥vSëupTimîI¡îru±
();

518 
	`p‹tRESTORE_CONTEXT
();

521 –Ë
¥vLowI¡îru±
;

522 –Ë
¥vTickISR
;

524  
pdTRUE
;

525 
	}
}

528 
	$vP‹tEndScheduÀr
( )

533 
	}
}

541 
	$vP‹tYõld
( )

545 
	`p‹tSAVE_CONTEXT
–
p‹tINTERRUPTS_UNCHANGED
 );

548 
	`vTaskSwôchC⁄ãxt
();

551 
	`p‹tRESTORE_CONTEXT
();

552 
	}
}

558 #¥agm®
code
 
high_ve˘‹
=0x08

559 
	$¥vLowI¡îru±
( )

562 if–
PIR1bôs
.
CCP1IF
 )

564 
_asm


565 
¥vTickISR


566 
_ídasm


570 if–
PIR1bôs
.
RCIF
 )

572 
_asm


573 
vSîülRxISR


574 
_ídasm


578 if–
PIR1bôs
.
TXIF
 )

580 if–
PIE1bôs
.
TXIE
 )

582 
_asm


583 
vSîülTxISR


584 
_ídasm


587 
	}
}

588 #¥agm®
code


598 
	$¥vTickISR
( )

602 
	`p‹tSAVE_CONTEXT
–
p‹tGLOBAL_INTERRUPT_FLAG
 );

603 
PIR1bôs
.
CCP1IF
 = 0;

606 
	`vTaskIn¸emítTick
();

608 #i‡
c⁄figUSE_PREEMPTION
 == 1

611 
	`vTaskSwôchC⁄ãxt
();

615 
	`p‹tRESTORE_CONTEXT
();

616 
	}
}

622 
	$¥vSëupTimîI¡îru±
( )

624 c⁄° 
ulC⁄°Com∑ªVÆue
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tTIMER_FOSC_SCALE
 ) / 
c⁄figTICK_RATE_HZ
 );

625 
ulCom∑ªVÆue
;

626 
ucByã
;

634 
TMR1H
 = ( ) 0x00;

635 
TMR1L
 = ( ) 0x00;

638 
ulCom∑ªVÆue
 = 
ulC⁄°Com∑ªVÆue
;

639 
CCPR1L
 = ( Ë–
ulCom∑ªVÆue
 & ( ) 0xff );

640 
ulCom∑ªVÆue
 >>= ( ) 8;

641 
CCPR1H
 = ( Ë–
ulCom∑ªVÆue
 & ( ) 0xff );

643 
CCP1CONbôs
.
CCP1M0
 = 
p‹tBIT_SET
;

644 
CCP1CONbôs
.
CCP1M1
 = 
p‹tBIT_SET
;

645 
CCP1CONbôs
.
CCP1M2
 = 
p‹tBIT_CLEAR
;

646 
CCP1CONbôs
.
CCP1M3
 = 
p‹tBIT_SET
;

647 
PIE1bôs
.
CCP1IE
 = 
p‹tBIT_SET
;

651 
INTCONbôs
.
GIEL
 = 
p‹tBIT_SET
;

655 
	`O≥nTimî1
–
T1_16BIT_RW
 & 
T1_SOURCE_INT
 & 
T1_PS_1_1
 & 
T1_CCP1_T3_CCP2
 );

656 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC18F/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

81 
	#p‹tCHAR
 

	)

82 
	#p‹tFLOAT
 

	)

83 
	#p‹tDOUBLE
 

	)

84 
	#p‹tLONG
 

	)

85 
	#p‹tSHORT
 

	)

86 
	#p‹tSTACK_TYPE
 

	)

87 
	#p‹tBASE_TYPE
 

	)

89 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

90 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

91 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

93 
	tp‹tLONG
 
	tp‹tTickTy≥
;

94 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

99 
	#p‹tBYTE_ALIGNMENT
 1

	)

100 
	#p‹tGLOBAL_INT_ENABLE_BIT
 0x80

	)

101 
	#p‹tSTACK_GROWTH
 1

	)

102 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tDISABLE_INTERRUPTS
(Ë
INTCONbôs
.
GIEH
 = 0;

	)

107 
	#p‹tENABLE_INTERRUPTS
(Ë
INTCONbôs
.
GIEH
 = 1;

	)

110 
	#p‹tENTER_CRITICAL
(Ë
POSTINC1
 = 
INTCON
; \

111 
INTCONbôs
.
GIEH
 = 0;

	)

117 
	#p‹tEXIT_CRITICAL
(Ë
_asm
 \

118 
MOVF
 
POSTDEC1
, 1, 0 \

119 
_ídasm
 \

120 if–
INDF1
 & 
p‹tGLOBAL_INT_ENABLE_BIT
 ) \

122 
	`p‹tENABLE_INTERRUPTS
(); \

123 }

	)

127 
vP‹tYõld
( );

128 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

132 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

133 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

137 #ifde‡
__DEBUG


138 
	#p‹tREMOVE_STATIC_QUALIFIER


	)

142 
	#p‹tNOP
(Ë
_asm
 \

143 
NOP
 \

144 
_ídasm


	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC18F/stdio.h

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC24_dsPIC/port.c

78 
	~"FªeRTOS.h
"

79 
	~"èsk.h
"

82 
	#p‹tBIT_SET
 1

	)

83 
	#p‹tTIMER_PRESCALE
 8

	)

84 
	#p‹tINITIAL_SR
 0

	)

88 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


89 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 1

	)

93 
	#p‹tUNUSED_PR_BITS
 0x7f

	)

96 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xef;

98 #i‡
c⁄figKERNEL_INTERRUPT_PRIORITY
 != 1

99 #îr‹ 
If
 
c⁄figKERNEL_INTERRUPT_PRIORITY
 
is
 
nŸ
 1 
thí
 
the
 #32 
ö
Åhê
fﬁlowög
 
ma¸os
 
√eds
 
ch™gög
 
to
 
equÆ
Åhê
p‹tINTERRUPT_BITS
 
vÆue
, 
which
 is ( configKERNEL_INTERRUPT_PRIORITY << 5 )

102 #ifde‡
MPLAB_PIC24_PORT


104 
	#p‹tRESTORE_CONTEXT
() \

105 
asm
 volatile( "MOV _pxCurrentTCB, W0 \n" \

121 "POP SR " );

	)

125 #ifde‡
MPLAB_DSPIC_PORT


127 
	#p‹tRESTORE_CONTEXT
() \

128 
asm
 volatile( "MOV _pxCurrentTCB, W0 \n" \

155 "POP SR " );

	)

162 
¥vSëupTimîI¡îru±
( );

167 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

169 
usCode
;

170 
p‹tBASE_TYPE
 
i
;

172 c⁄° 
p‹tSTACK_TYPE
 
xInôülSèck
[] =

192 #ifde‡
MPLAB_DSPIC_PORT


210 
usCode
 = ( Ë
pxCode
;

211 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
usCode
;

212 
pxT›OfSèck
++;

217 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0;

218 
pxT›OfSèck
++;

221 *
pxT›OfSèck
 = 
p‹tINITIAL_SR
;

222 
pxT›OfSèck
++;

225 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

226 
pxT›OfSèck
++;

228  
i
 = 0; i < ( –
xInôülSèck
 ) / –
p‹tSTACK_TYPE
 ) ); i++ )

230 *
pxT›OfSèck
 = 
xInôülSèck
[ 
i
 ];

231 
pxT›OfSèck
++;

234 *
pxT›OfSèck
 = 
CORCON
;

235 
pxT›OfSèck
++;

236 *
pxT›OfSèck
 = 
PSVPAG
;

237 
pxT›OfSèck
++;

240 *
pxT›OfSèck
 = 0x00;

241 
pxT›OfSèck
++;

243  
pxT›OfSèck
;

244 
	}
}

247 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

250 
	`¥vSëupTimîI¡îru±
();

253 
	`p‹tRESTORE_CONTEXT
();

256 
asm
 volatile ( "return" );

259  
pdTRUE
;

260 
	}
}

263 
	$vP‹tEndScheduÀr
( )

268 
	}
}

274 
	$¥vSëupTimîI¡îru±
( )

276 c⁄° 
ulCom∑ªM©ch
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tTIMER_PRESCALE
 ) / 
c⁄figTICK_RATE_HZ
 ) - 1;

279 
T1CON
 = 0;

280 
TMR1
 = 0;

282 
PR1
 = ( Ë
ulCom∑ªM©ch
;

285 
IPC0bôs
.
T1IP
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

288 
IFS0bôs
.
T1IF
 = 0;

291 
IEC0bôs
.
T1IE
 = 1;

294 
T1CONbôs
.
TCKPS0
 = 1;

295 
T1CONbôs
.
TCKPS1
 = 0;

298 
T1CONbôs
.
TON
 = 1;

299 
	}
}

302 
	$vP‹tE¡îCrôiˇl
( )

304 
	`p‹tDISABLE_INTERRUPTS
();

305 
uxCrôiˇlNe°ög
++;

306 
	}
}

309 
	$vP‹tExôCrôiˇl
( )

311 
uxCrôiˇlNe°ög
--;

312 if–
uxCrôiˇlNe°ög
 == 0 )

314 
	`p‹tENABLE_INTERRUPTS
();

316 
	}
}

319 
__©åibuã__
((
__öãºu±__
, 
auto_psv
)Ë
	$_T1I¡îru±
( )

322 
IFS0bôs
.
T1IF
 = 0;

324 
	`vTaskIn¸emítTick
();

326 #i‡
c⁄figUSE_PREEMPTION
 == 1

327 
	`p‹tYIELD
();

329 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC24_dsPIC/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 

	)

91 
	#p‹tBASE_TYPE
 

	)

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

95 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

97 
	tp‹tLONG
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

103 
	#p‹tBYTE_ALIGNMENT
 2

	)

104 
	#p‹tSTACK_GROWTH
 1

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tINTERRUPT_BITS
 ( ( 
p‹tSHORT
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 << ( p‹tSHORT ) 5 )

	)

111 
	#p‹tDISABLE_INTERRUPTS
(Ë
SR
 |
p‹tINTERRUPT_BITS


	)

112 
	#p‹tENABLE_INTERRUPTS
(Ë
SR
 &~
p‹tINTERRUPT_BITS


	)

116 
vP‹tE¡îCrôiˇl
( );

117 
vP‹tExôCrôiˇl
( );

118 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

119 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

123 
vP‹tYõld
( );

124 
	#p‹tYIELD
(Ë
asm
 volatile ( "CALL _vPortYield \n" \

125 "NOP " );

	)

129 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

130 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

134 #ifde‡
__DEBUG


135 
	#p‹tREMOVE_STATIC_QUALIFIER


	)

138 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

140 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC32MX/ISR_Support.h

67 
	~"FªeRTOSC⁄fig.h
"

69 
	#p‹tCONTEXT_SIZE
 132

	)

70 
	#p‹tEPC_STACK_LOCATION
 124

	)

71 
	#p‹tSTATUS_STACK_LOCATION
 128

	)

74 .
ma¸o
 
p‹tSAVE_CONTEXT


79 
mfc0
 
	gk0
, 
_CP0_CAUSE


80 
addiu
 
	g•
, sp, -
p‹tCONTEXT_SIZE


81 
mfc0
 
	gk1
, 
_CP0_STATUS


86 
sw
 
	gs6
, 44(
	g•
)

87 
sw
 
	gs5
, 40(
	g•
)

88 
sw
 
	gk1
, 
	$p‹tSTATUS_STACK_LOCATION
(
•
)

91 
§l
 
k0
, k0, 0xa

92 
ös
 
k1
, 
k0
, 10, 6

93 
ös
 
k1
, 
zîo
, 1, 4

96 
add
 
s5
, 
zîo
, 
•


99 
œ
 
k0
, 
uxI¡îru±Ne°ög


100 
lw
 
s6
, (
k0
)

104 
b√
 
s6
, 
zîo
, .+20

105 
n›


108 
œ
 
•
, 
xISRSèckT›


109 
lw
 
•
, (sp)

112 
addiu
 
s6
, s6, 1

113 
sw
 
s6
, 0(
k0
)

116 
mfc0
 
s6
, 
_CP0_EPC


119 
mtc0
 
k1
, 
_CP0_STATUS


124 
sw
 
ø
, 120(
s5
)

125 
sw
 
s8
, 116(
s5
)

126 
sw
 
t9
, 112(
s5
)

127 
sw
 
t8
, 108(
s5
)

128 
sw
 
t7
, 104(
s5
)

129 
sw
 
t6
, 100(
s5
)

130 
sw
 
t5
, 96(
s5
)

131 
sw
 
t4
, 92(
s5
)

132 
sw
 
t3
, 88(
s5
)

133 
sw
 
t2
, 84(
s5
)

134 
sw
 
t1
, 80(
s5
)

135 
sw
 
t0
, 76(
s5
)

136 
sw
 
a3
, 72(
s5
)

137 
sw
 
a2
, 68(
s5
)

138 
sw
 
a1
, 64(
s5
)

139 
sw
 
a0
, 60(
s5
)

140 
sw
 
v1
, 56(
s5
)

141 
sw
 
v0
, 52(
s5
)

142 
sw
 
s6
, 
	$p‹tEPC_STACK_LOCATION
(
s5
)

143 
sw
 
$1
, 16(
s5
)

146 
mfhi
 
s6


147 
sw
 
s6
, 12(
s5
)

148 
mÊo
 
s6


149 
sw
 
s6
, 8(
s5
)

152 
œ
 
s6
, 
uxI¡îru±Ne°ög


153 
lw
 
s6
, (s6)

154 
addiu
 
s6
, s6, -1

155 
b√
 
s6
, 
zîo
, .+20

156 
n›


159 
œ
 
s6
, 
uxSavedTaskSèckPoöãr


160 
sw
 
s5
, (
s6
)

162 .
ídm


165 .
ma¸o
 
p‹tRESTORE_CONTEXT


169 
œ
 
s6
, 
uxI¡îru±Ne°ög


170 
lw
 
s6
, (s6)

171 
addiu
 
s6
, s6, -1

172 
b√
 
s6
, 
zîo
, .+20

173 
n›


174 
œ
 
s6
, 
uxSavedTaskSèckPoöãr


175 
lw
 
s5
, (
s6
)

178 
lw
 
s6
, 8(
s5
)

179 
méo
 
s6


180 
lw
 
s6
, 12(
s5
)

181 
mthi
 
s6


182 
lw
 
$1
, 16(
s5
)

185 
lw
 
s6
, 44(
s5
)

186 
lw
 
v0
, 52(
s5
)

187 
lw
 
v1
, 56(
s5
)

188 
lw
 
a0
, 60(
s5
)

189 
lw
 
a1
, 64(
s5
)

190 
lw
 
a2
, 68(
s5
)

191 
lw
 
a3
, 72(
s5
)

192 
lw
 
t0
, 76(
s5
)

193 
lw
 
t1
, 80(
s5
)

194 
lw
 
t2
, 84(
s5
)

195 
lw
 
t3
, 88(
s5
)

196 
lw
 
t4
, 92(
s5
)

197 
lw
 
t5
, 96(
s5
)

198 
lw
 
t6
, 100(
s5
)

199 
lw
 
t7
, 104(
s5
)

200 
lw
 
t8
, 108(
s5
)

201 
lw
 
t9
, 112(
s5
)

202 
lw
 
s8
, 116(
s5
)

203 
lw
 
ø
, 120(
s5
)

206 
di


209 
œ
 
k0
, 
uxI¡îru±Ne°ög


210 
lw
 
k1
, (
k0
)

211 
addiu
 
k1
, k1, -1

212 
sw
 
k1
, 0(
k0
)

214 
lw
 
k0
, 
	$p‹tSTATUS_STACK_LOCATION
(
s5
)

215 
lw
 
k1
, 
	$p‹tEPC_STACK_LOCATION
(
s5
)

219 
add
 
•
, 
zîo
, 
s5


220 
lw
 
s5
, 40(
•
)

221 
addiu
 
•
, sp, 
p‹tCONTEXT_SIZE


223 
mtc0
 
k0
, 
_CP0_STATUS


224 
mtc0
 
k1
, 
_CP0_EPC


225 
ehb


226 
îë


227 
n›


229 .
ídm


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC32MX/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	#p‹tTIMER_PRESCALE
 8

	)

79 
	#p‹tIE_BIT
 ( 0x00000001 )

	)

80 
	#p‹tEXL_BIT
 ( 0x00000002 )

	)

84 
	#p‹tINITIAL_SR
 ( 
p‹tIE_BIT
 | 
p‹tEXL_BIT
 )

	)

88 vﬁ©ûê
p‹tBASE_TYPE
 
	guxI¡îru±Ne°ög
 = 0x01;

91 
p‹tBASE_TYPE
 
	guxSavedTaskSèckPoöãr
 = 0;

94 
p‹tSTACK_TYPE
 
	gxISRSèck
[ 
c⁄figISR_STACK_SIZE
 ] = { 0 };

98 c⁄° 
p‹tSTACK_TYPE
 * c⁄° 
	gxISRSèckT›
 = &–
xISRSèck
[ 
c⁄figISR_STACK_SIZE
 - 7 ] );

106 
__©åibuã__
–(
öãºu±
(
ùl1
), 
	$ve˘‹
(
_TIMER_1_VECTOR
))Ë
	`vT1I¡îru±H™dÀr
( );

114 
	`__©åibuã__
–(
	`öãºu±
(
ùl1
), 
	$ve˘‹
(
_CORE_SOFTWARE_0_VECTOR
))Ë
	`vP‹tYõldISR
( );

121 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

124 
pxT›OfSèck
--;

126 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
) 0xDEADBEEF;

127 
pxT›OfSèck
--;

129 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
) 0x12345678;

130 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
Ë
	`_CP0_GET_CAUSE
();

133 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
Ë
p‹tINITIAL_SR
;

136 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
Ë
pxCode
;

139 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
Ë
NULL
;

142 
pxT›OfSèck
 -= 15;

144 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
Ë
pvP¨amëîs
;

145 
pxT›OfSèck
 -= 14;

147 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
) 0x00000000;

148 
pxT›OfSèck
--;

150  
pxT›OfSèck
;

151 
	}
}

157 
	$¥vSëupTimîI¡îru±
( )

159 c⁄° 
ulCom∑ªM©ch
 = ( (
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tTIMER_PRESCALE
Ë/ 
c⁄figTICK_RATE_HZ
 ) - 1;

161 
	`O≥nTimî1
––
T1_ON
 | 
T1_PS_1_8
 | 
T1_SOURCE_INT
 ), 
ulCom∑ªM©ch
 );

162 
	`C⁄figI¡Timî1
–
T1_INT_ON
 | 
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

163 
	}
}

166 
	$vP‹tEndScheduÀr
()

172 
	}
}

175 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

177 
	`vP‹tSèπFú°Task
( );

178 *
pxCuºítTCB
;

181 
	`mC⁄figI¡C‹eSW0
–
CSW_INT_ON
 | 
c⁄figKERNEL_INTERRUPT_PRIORITY
 | 
CSW_INT_SUB_PRIOR_0
 );

185 
	`¥vSëupTimîI¡îru±
();

189 
uxSavedTaskSèckPoöãr
 = *–
p‹tBASE_TYPE
 * ) 
pxCuºítTCB
;

190 
	`vP‹tSèπFú°Task
();

193  
pdFALSE
;

194 
	}
}

197 
	$vP‹tIn¸emítTick
( )

199 
p‹tBASE_TYPE
 
uxSavedSètus
;

201 
uxSavedSètus
 = 
	`uxP‹tSëI¡îru±MaskFromISR
();

202 
	`vTaskIn¸emítTick
();

203 
	`vP‹tCÀ¨I¡îru±MaskFromISR
–
uxSavedSètus
 );

207 #i‡
c⁄figUSE_PREEMPTION
 == 1

208 
	`SëC‹eSW0
();

212 
	`mT1CÀ¨I¡Fœg
();

213 
	}
}

216 
p‹tBASE_TYPE
 
	$uxP‹tSëI¡îru±MaskFromISR
( )

218 
p‹tBASE_TYPE
 
uxSavedSètusRegi°î
;

220 
asm
 volatile ( "di" );

221 
uxSavedSètusRegi°î
 = 
	`_CP0_GET_STATUS
() | 0x01;

228 
	`_CP0_SET_STATUS
–––
uxSavedSètusRegi°î
 & ( ~
p‹tALL_IPL_BITS
 ) ) ) | ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
p‹tIPL_SHIFT
 ) );

230  
uxSavedSètusRegi°î
;

231 
	}
}

234 
	$vP‹tCÀ¨I¡îru±MaskFromISR
–
p‹tBASE_TYPE
 
uxSavedSètusRegi°î
 )

236 
	`_CP0_SET_STATUS
–
uxSavedSètusRegi°î
 );

237 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC32MX/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

71 
	~<∂ib.h
>

73 #ifde‡
__˝lu•lus


88 
	#p‹tCHAR
 

	)

89 
	#p‹tFLOAT
 

	)

90 
	#p‹tDOUBLE
 

	)

91 
	#p‹tLONG
 

	)

92 
	#p‹tSHORT
 

	)

93 
	#p‹tSTACK_TYPE
 

	)

94 
	#p‹tBASE_TYPE
 

	)

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

100 
	tp‹tTickTy≥
;

101 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

107 
	#p‹tSTACK_GROWTH
 -1

	)

108 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

112 
	#p‹tIPL_SHIFT
 ( 10UL )

	)

113 
	#p‹tALL_IPL_BITS
 ( 0x3fUL << 
p‹tIPL_SHIFT
 )

	)

114 
	#p‹tSW0_BIT
 ( 0x01 << 8 )

	)

122 
	#p‹tDISABLE_INTERRUPTS
() \

124 
ulSètus
; \

127 
ulSètus
 = 
	`_CP0_GET_STATUS
(); \

128 
ulSètus
 &~
p‹tALL_IPL_BITS
; \

129 
	`_CP0_SET_STATUS
––
ulSètus
 | ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
p‹tIPL_SHIFT
 ) ) ); \

130 }

	)

132 
	#p‹tENABLE_INTERRUPTS
() \

134 
ulSètus
; \

137 
ulSètus
 = 
	`_CP0_GET_STATUS
(); \

138 
ulSètus
 &~
p‹tALL_IPL_BITS
; \

139 
	`_CP0_SET_STATUS
–
ulSètus
 ); \

140 }

	)

143 
vTaskE¡îCrôiˇl
( );

144 
vTaskExôCrôiˇl
( );

145 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

146 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

147 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

149 
p‹tBASE_TYPE
 
uxP‹tSëI¡îru±MaskFromISR
();

150 
vP‹tCÀ¨I¡îru±MaskFromISR
–
p‹tBASE_TYPE
 );

151 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`uxP‹tSëI¡îru±MaskFromISR
()

	)

152 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusRegi°î
 ) 
	`vP‹tCÀ¨I¡îru±MaskFromISR
–uxSavedSètusRegi°î )

	)

158 
	#p‹tYIELD
() \

160 
ulSètus
; \

163 
ulSètus
 = 
	`_CP0_GET_CAUSE
(); \

164 
ulSètus
 |
p‹tSW0_BIT
; \

165 
	`_CP0_SET_CAUSE
–
ulSètus
 ); \

166 }

	)

169 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"n›" )

	)

174 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
	`__©åibuã__
((
n‹ëu∫
))

	)

175 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

178 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if( xSwitchRequired ) \

180 
	`p‹tYIELD
(); \

181 }

	)

184 #ifde‡
__DEBUG


185 
	#p‹tREMOVE_STATIC_QUALIFIER


	)

188 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MSVC-MingW/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

70 
	~<°dio.h
>

72 
	#p‹tMAX_INTERRUPTS
 ( ( Ë–Ë* 8UL )

	)

73 
	#p‹tNO_CRITICAL_NESTING
 ( ( Ë0 )

	)

81 
DWORD
 
WINAPI
 
¥vSimuœãdPîùhîÆTimî
–
LPVOID
 
ÕP¨amëî
 );

87 
¥vPro˚ssSimuœãdI¡îru±s
( );

93 
¥vPro˚ssYõldI¡îru±
( );

94 
¥vPro˚ssTickI¡îru±
( );

106 *
	mpvThªad
;

108 } 
	txThªadSèã
;

112 vﬁ©ûê
	gulPídögI¡îru±s
 = 0UL;

117 *
	gpvI¡îru±Evít
 = 
NULL
;

121 *
	gpvI¡îru±EvítMuãx
 = 
NULL
;

130 
	gulCrôiˇlNe°ög
 = 9999UL;

135 (*
ulI§H™dÀr
[ 
p‹tMAX_INTERRUPTS
 ])–Ë{ 0 
	}
};

138 *
pxCuºítTCB
;

142 
DWORD
 
WINAPI
 
	$¥vSimuœãdPîùhîÆTimî
–
LPVOID
 
ÕP¨amëî
 )

144 
p‹tTickTy≥
 
xMöimumWödowsBlockTime
 = (ÖortTickType ) 20;

147 –Ë
ÕP¨amëî
;

157 if–
p‹tTICK_RATE_MS
 < 
xMöimumWödowsBlockTime
 )

159 
	`SÀï
–
xMöimumWödowsBlockTime
 );

163 
	`SÀï
–
p‹tTICK_RATE_MS
 );

166 
	`WaôF‹SögÀObje˘
–
pvI¡îru±EvítMuãx
, 
INFINITE
 );

169 
ulPídögI¡îru±s
 |–1 << 
p‹tINTERRUPT_TICK
 );

173 
	`SëEvít
–
pvI¡îru±Evít
 );

177 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

180 #ifde‡
__GNUC__


185 
	}
}

188 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

190 
xThªadSèã
 *
pxThªadSèã
 = 
NULL
;

198 
pxThªadSèã
 = ( 
xThªadSèã
 * ) ( 
pxT›OfSèck
 - ( xThreadState ) );

201 
pxThªadSèã
->
pvThªad
 = 
	`Cª©eThªad
–
NULL
, 0, ( 
LPTHREAD_START_ROUTINE
 ) 
pxCode
, 
pvP¨amëîs
, 
CREATE_SUSPENDED
, NULL );

202 
	`SëThªadAfföôyMask
–
pxThªadSèã
->
pvThªad
, 0x01 );

203 
	`SëThªadPri‹ôyBoo°
–
pxThªadSèã
->
pvThªad
, 
TRUE
 );

204 
	`SëThªadPri‹ôy
–
pxThªadSèã
->
pvThªad
, 
THREAD_PRIORITY_IDLE
 );

206  ( 
p‹tSTACK_TYPE
 * ) 
pxThªadSèã
;

207 
	}
}

210 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

212 *
pvH™dÀ
;

213 
lSuc˚ss
 = 
pdPASS
;

214 
xThªadSèã
 *
pxThªadSèã
;

217 
	`vP‹tSëI¡îru±H™dÀr
–
p‹tINTERRUPT_YIELD
, 
¥vPro˚ssYõldI¡îru±
 );

218 
	`vP‹tSëI¡îru±H™dÀr
–
p‹tINTERRUPT_TICK
, 
¥vPro˚ssTickI¡îru±
 );

222 
pvI¡îru±EvítMuãx
 = 
	`Cª©eMuãx
–
NULL
, 
FALSE
, NULL );

223 
pvI¡îru±Evít
 = 
	`Cª©eEvít
–
NULL
, 
FALSE
, FALSE, NULL );

225 if––
pvI¡îru±EvítMuãx
 =
NULL
 ) || ( 
pvI¡îru±Evít
 == NULL ) )

227 
lSuc˚ss
 = 
pdFAIL
;

233 
pvH™dÀ
 = 
	`GëCuºítThªad
();

234 if–
pvH™dÀ
 =
NULL
 )

236 
lSuc˚ss
 = 
pdFAIL
;

239 if–
lSuc˚ss
 =
pdPASS
 )

241 if–
	`SëThªadPri‹ôy
–
pvH™dÀ
, 
THREAD_PRIORITY_NORMAL
 ) == 0 )

243 
lSuc˚ss
 = 
pdFAIL
;

245 
	`SëThªadPri‹ôyBoo°
–
pvH™dÀ
, 
TRUE
 );

246 
	`SëThªadAfföôyMask
–
pvH™dÀ
, 0x01 );

249 if–
lSuc˚ss
 =
pdPASS
 )

255 
pvH™dÀ
 = 
	`Cª©eThªad
–
NULL
, 0, 
¥vSimuœãdPîùhîÆTimî
, NULL, 0, NULL );

256 if–
pvH™dÀ
 !
NULL
 )

258 
	`SëThªadPri‹ôy
–
pvH™dÀ
, 
THREAD_PRIORITY_BELOW_NORMAL
 );

259 
	`SëThªadPri‹ôyBoo°
–
pvH™dÀ
, 
TRUE
 );

260 
	`SëThªadAfföôyMask
–
pvH™dÀ
, 0x01 );

265 
pxThªadSèã
 = ( 
xThªadSèã
 * ) *––* ) 
pxCuºítTCB
 );

266 
ulCrôiˇlNe°ög
 = 
p‹tNO_CRITICAL_NESTING
;

271 
	`ResumeThªad
–
pxThªadSèã
->
pvThªad
 );

275 
	`¥vPro˚ssSimuœãdI¡îru±s
();

281 
	}
}

284 
	$¥vPro˚ssYõldI¡îru±
( )

286  
pdTRUE
;

287 
	}
}

290 
	$¥vPro˚ssTickI¡îru±
( )

292 
ulSwôchRequúed
;

295 
	`vTaskIn¸emítTick
();

296 #if–
c⁄figUSE_PREEMPTION
 != 0 )

300 
ulSwôchRequúed
 = 
pdTRUE
;

304 
ulSwôchRequúed
 = 
pdFALSE
;

308  
ulSwôchRequúed
;

309 
	}
}

312 
	$¥vPro˚ssSimuœãdI¡îru±s
( )

314 
ulSwôchRequúed
, 
i
;

315 
xThªadSèã
 *
pxThªadSèã
;

316 *
pvObje˘Li°
[ 2 ];

321 
pvObje˘Li°
[ 0 ] = 
pvI¡îru±EvítMuãx
;

322 
pvObje˘Li°
[ 1 ] = 
pvI¡îru±Evít
;

326 
	`WaôF‹Mu…ùÀObje˘s
––
pvObje˘Li°
 ) / –* ),ÖvObje˘Li°, 
TRUE
, 
INFINITE
 );

330 
ulSwôchRequúed
 = 
pdFALSE
;

334  
i
 = 0; i < 
p‹tMAX_INTERRUPTS
; i++ )

337 if–
ulPídögI¡îru±s
 & ( 1UL << 
i
 ) )

340 if–
ulI§H™dÀr
[ 
i
 ] !
NULL
 )

343 if–
ulI§H™dÀr
[ 
i
 ](Ë!
pdFALSE
 )

345 
ulSwôchRequúed
 |–1 << 
i
 );

350 
ulPídögI¡îru±s
 &~–1UL << 
i
 );

354 if–
ulSwôchRequúed
 !
pdFALSE
 )

356 *
pvOldCuºítTCB
;

358 
pvOldCuºítTCB
 = 
pxCuºítTCB
;

361 
	`vTaskSwôchC⁄ãxt
();

365 if–
pvOldCuºítTCB
 !
pxCuºítTCB
 )

368 
pxThªadSèã
 = ( 
xThªadSèã
 *Ë*––* ) 
pvOldCuºítTCB
 );

369 
	`Su•ídThªad
–
pxThªadSèã
->
pvThªad
 );

373 
pxThªadSèã
 = ( 
xThªadSèã
 * ) ( *–*Ë
pxCuºítTCB
 );

374 
	`ResumeThªad
–
pxThªadSèã
->
pvThªad
 );

378 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

380 
	}
}

383 
	$vP‹tDñëeThªad
–*
pvTaskToDñëe
 )

385 
xThªadSèã
 *
pxThªadSèã
;

387 
	`WaôF‹SögÀObje˘
–
pvI¡îru±EvítMuãx
, 
INFINITE
 );

390 
pxThªadSèã
 = ( 
xThªadSèã
 * ) ( *–*Ë
pvTaskToDñëe
 );

391 
	`Tîmö©eThªad
–
pxThªadSèã
->
pvThªad
, 0 );

393 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

394 
	}
}

397 
	$vP‹tEndScheduÀr
( )

400 
	`Tîmö©ePro˚ss
–
	`GëCuºítPro˚ss
(), 0 );

401 
	}
}

404 
	$vP‹tGíî©eSimuœãdI¡îru±
–
ulI¡îru±Numbî
 )

406 
xThªadSèã
 *
pxThªadSèã
;

408 if––
ulI¡îru±Numbî
 < 
p‹tMAX_INTERRUPTS
 ) && ( 
pvI¡îru±EvítMuãx
 !
NULL
 ) )

411 
	`WaôF‹SögÀObje˘
–
pvI¡îru±EvítMuãx
, 
INFINITE
 );

412 
ulPídögI¡îru±s
 |–1 << 
ulI¡îru±Numbî
 );

417 if–
ulCrôiˇlNe°ög
 == 0 )

421 
pxThªadSèã
 = ( 
xThªadSèã
 * ) *––* ) 
pxCuºítTCB
 );

422 
	`SëEvít
–
pvI¡îru±Evít
 );

425 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

427 
	}
}

430 
vP‹tSëI¡îru±H™dÀr
–
ulI¡îru±Numbî
, (*
pvH™dÀr
)( ) )

432 if–
ulI¡îru±Numbî
 < 
p‹tMAX_INTERRUPTS
 )

434 if–
pvI¡îru±EvítMuãx
 !
NULL
 )

436 
	`WaôF‹SögÀObje˘
–
pvI¡îru±EvítMuãx
, 
INFINITE
 );

437 
ulI§H™dÀr
[ 
ulI¡îru±Numbî
 ] = 
pvH™dÀr
;

438 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

442 
ulI§H™dÀr
[ 
ulI¡îru±Numbî
 ] = 
pvH™dÀr
;

445 
	}
}

448 
	$vP‹tE¡îCrôiˇl
( )

450 if–
	`xTaskGëScheduÀrSèã
(Ë!
èskSCHEDULER_NOT_STARTED
 )

454 
	`WaôF‹SögÀObje˘
–
pvI¡îru±EvítMuãx
, 
INFINITE
 );

455 
ulCrôiˇlNe°ög
++;

459 
ulCrôiˇlNe°ög
++;

461 
	}
}

464 
	$vP‹tExôCrôiˇl
( )

466 
xThªadSèã
 *
pxThªadSèã
;

467 
lMuãxNìdsRñósög
;

472 
lMuãxNìdsRñósög
 = 
pdTRUE
;

474 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

476 if–
ulCrôiˇlNe°ög
 =–
p‹tNO_CRITICAL_NESTING
 + 1 ) )

478 
ulCrôiˇlNe°ög
--;

482 if–
ulPídögI¡îru±s
 != 0UL )

484 
	`SëEvít
–
pvI¡îru±Evít
 );

488 
pxThªadSèã
 = ( 
xThªadSèã
 * ) *––* ) 
pxCuºítTCB
 );

492 
lMuãxNìdsRñósög
 = 
pdFALSE
;

493 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

500 
ulCrôiˇlNe°ög
--;

504 if–
lMuãxNìdsRñósög
 =
pdTRUE
 )

506 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

508 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MSVC-MingW/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 
	~<Wödows.h
>

76 
	#p‹tCHAR
 

	)

77 
	#p‹tFLOAT
 

	)

78 
	#p‹tDOUBLE
 

	)

79 
	#p‹tLONG
 

	)

80 
	#p‹tSHORT
 

	)

81 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

82 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

84 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

85 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

86 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

88 
	tp‹tLONG
 
	tp‹tTickTy≥
;

89 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

93 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

94 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

95 
	#p‹tBYTE_ALIGNMENT
 4

	)

97 
	#p‹tYIELD
(Ë
	`vP‹tGíî©eSimuœãdI¡îru±
–
p‹tINTERRUPT_YIELD
 )

	)

99 
vP‹tDñëeThªad
–*
pvThªadToDñëe
 );

100 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) 
	`vP‹tDñëeThªad
–pxTCB )

	)

101 
	#p‹tDISABLE_INTERRUPTS
()

	)

102 
	#p‹tENABLE_INTERRUPTS
()

	)

105 
vP‹tE¡îCrôiˇl
( );

106 
vP‹tExôCrôiˇl
( );

108 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

109 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

112 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

113 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

116 
	#p‹tINTERRUPT_YIELD
 ( 0UL )

	)

117 
	#p‹tINTERRUPT_TICK
 ( 1UL )

	)

124 
vP‹tGíî©eSimuœãdI¡îru±
–
ulI¡îru±Numbî
 );

135 
vP‹tSëI¡îru±H™dÀr
–
ulI¡îru±Numbî
, (*
pvH™dÀr
)( ) );

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MemMang/heap_1.c

75 
	~<°dlib.h
>

80 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

82 
	~"FªeRTOS.h
"

83 
	~"èsk.h
"

85 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


89 
	uxRTOS_HEAP


91 #i‡
p‹tBYTE_ALIGNMENT
 == 8

92 vﬁ©ûê
p‹tDOUBLE
 
	mdDummy
;

94 vﬁ©ûê
	mulDummy
;

96 
	mucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

97 } 
	gxHóp
;

99 
size_t
 
	gxNextFªeByã
 = ( size_t ) 0;

102 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

104 *
pvRëu∫
 = 
NULL
;

107 #i‡
p‹tBYTE_ALIGNMENT
 != 1

108 if–
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 )

111 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

115 
	`vTaskSu•ídAŒ
();

118 if–––
xNextFªeByã
 + 
xW™ãdSize
 ) < 
c⁄figTOTAL_HEAP_SIZE
 ) &&

119 ––
xNextFªeByã
 + 
xW™ãdSize
 ) > xNextFreeByte ) )

123 
pvRëu∫
 = &–
xHóp
.
ucHóp
[ 
xNextFªeByã
 ] );

124 
xNextFªeByã
 +
xW™ãdSize
;

127 
	`xTaskResumeAŒ
();

129 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

131 if–
pvRëu∫
 =
NULL
 )

133 
	`vAµliˇti⁄MÆlocFaûedHook
( );

134 
	`vAµliˇti⁄MÆlocFaûedHook
();

139  
pvRëu∫
;

140 
	}
}

143 
	$vP‹tFªe
–*
pv
 )

148 –Ë
pv
;

149 
	}
}

152 
	$vP‹tInôüli£Blocks
( )

155 
xNextFªeByã
 = ( 
size_t
 ) 0;

156 
	}
}

159 
size_t
 
	$xP‹tGëFªeHópSize
( )

161  ( 
c⁄figTOTAL_HEAP_SIZE
 - 
xNextFªeByã
 );

162 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MemMang/heap_2.c

75 
	~<°dlib.h
>

76 
	~<°dio.h
>

81 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

83 
	~"FªeRTOS.h
"

84 
	~"èsk.h
"

86 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


90 
	uxRTOS_HEAP


92 #i‡
p‹tBYTE_ALIGNMENT
 == 8

93 vﬁ©ûê
p‹tDOUBLE
 
	mdDummy
;

95 vﬁ©ûê
	mulDummy
;

97 
	mucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

98 } 
	gxHóp
;

102 
	sA_BLOCK_LINK


104 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

105 
size_t
 
	mxBlockSize
;

106 } 
	txBlockLök
;

109 c⁄° 
	ghópSTRUCT_SIZE
 = ( –
xBlockLök
 ) + 
p‹tBYTE_ALIGNMENT
 - ( ( xBlockLink ) %ÖortBYTE_ALIGNMENT ) );

110 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
hópSTRUCT_SIZE
 * 2 ) )

	)

113 
xBlockLök
 
	gxSèπ
, 
	gxEnd
;

117 
size_t
 
	gxFªeByãsRemaöög
 = 
c⁄figTOTAL_HEAP_SIZE
;

126 
	#¥vIn£πBlockI¡oFªeLi°
–
pxBlockToIn£π
 ) \

128 
xBlockLök
 *
pxIãøt‹
; \

129 
size_t
 
xBlockSize
; \

131 
xBlockSize
 = 
pxBlockToIn£π
->xBlockSize; \

135  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
->
xBlockSize
 < xBlockSize;ÖxIterator =ÖxIterator->pxNextFreeBlock ) \

142 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock; \

143 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
; \

144 }

	)

147 
	#¥vHópInô
() \

149 
xBlockLök
 *
pxFú°FªeBlock
; \

153 
xSèπ
.
pxNextFªeBlock
 = ( * ) 
xHóp
.
ucHóp
; \

154 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0; \

157 
xEnd
.
xBlockSize
 = 
c⁄figTOTAL_HEAP_SIZE
; \

158 
xEnd
.
pxNextFªeBlock
 = 
NULL
; \

162 
pxFú°FªeBlock
 = ( * ) 
xHóp
.
ucHóp
; \

163 
pxFú°FªeBlock
->
xBlockSize
 = 
c⁄figTOTAL_HEAP_SIZE
; \

164 
pxFú°FªeBlock
->
pxNextFªeBlock
 = &
xEnd
; \

165 }

	)

168 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

170 
xBlockLök
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

171 
p‹tBASE_TYPE
 
xHópHasBìnInôüli£d
 = 
pdFALSE
;

172 *
pvRëu∫
 = 
NULL
;

174 
	`vTaskSu•ídAŒ
();

178 if–
xHópHasBìnInôüli£d
 =
pdFALSE
 )

180 
	`¥vHópInô
();

181 
xHópHasBìnInôüli£d
 = 
pdTRUE
;

186 if–
xW™ãdSize
 > 0 )

188 
xW™ãdSize
 +
hópSTRUCT_SIZE
;

191 if–
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 )

194 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

198 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê< 
c⁄figTOTAL_HEAP_SIZE
 ) )

202 
pxPªviousBlock
 = &
xSèπ
;

203 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

204  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 ) )

206 
pxPªviousBlock
 = 
pxBlock
;

207 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

211 if–
pxBlock
 !&
xEnd
 )

215 
pvRëu∫
 = ( * ) ( ( ( * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
hópSTRUCT_SIZE
 );

219 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

222 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

227 
pxNewBlockLök
 = ( * ) ( ( ( * ) 
pxBlock
 ) + 
xW™ãdSize
 );

231 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

232 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

235 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

238 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

242 
	`xTaskResumeAŒ
();

244 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

246 if–
pvRëu∫
 =
NULL
 )

248 
	`vAµliˇti⁄MÆlocFaûedHook
( );

249 
	`vAµliˇti⁄MÆlocFaûedHook
();

254  
pvRëu∫
;

255 
	}
}

258 
	$vP‹tFªe
–*
pv
 )

260 *
puc
 = ( * ) 
pv
;

261 
xBlockLök
 *
pxLök
;

263 if–
pv
 )

267 
puc
 -
hópSTRUCT_SIZE
;

270 
pxLök
 = ( * ) 
puc
;

272 
	`vTaskSu•ídAŒ
();

275 
	`¥vIn£πBlockI¡oFªeLi°
–––
xBlockLök
 * ) 
pxLök
 ) );

276 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

278 
	`xTaskResumeAŒ
();

280 
	}
}

283 
size_t
 
	$xP‹tGëFªeHópSize
( )

285  
xFªeByãsRemaöög
;

286 
	}
}

289 
	$vP‹tInôüli£Blocks
( )

292 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MemMang/heap_3.c

79 
	~<°dlib.h
>

84 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

86 
	~"FªeRTOS.h
"

87 
	~"èsk.h
"

89 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


93 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

95 *
pvRëu∫
;

97 
	`vTaskSu•ídAŒ
();

99 
pvRëu∫
 = 
	`mÆloc
–
xW™ãdSize
 );

101 
	`xTaskResumeAŒ
();

103 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

105 if–
pvRëu∫
 =
NULL
 )

107 
	`vAµliˇti⁄MÆlocFaûedHook
( );

108 
	`vAµliˇti⁄MÆlocFaûedHook
();

113  
pvRëu∫
;

114 
	}
}

117 
	$vP‹tFªe
–*
pv
 )

119 if–
pv
 )

121 
	`vTaskSu•ídAŒ
();

123 
	`‰ì
–
pv
 );

125 
	`xTaskResumeAŒ
();

127 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/large_untested/port.c

74 
	~<embedded.h
>

75 
	~<´.h
>

78 
	~"FªeRTOS.h
"

79 
	~"èsk.h
"

80 
	~"p‹èsm.h
"

83 
	#p‹tTIMER_COMPARE
 ( Ë––
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) / ( Ë4 )

	)

86 
	#p‹tENABLE_TIMER_AND_INTERRUPT
 ( Ë0xe001

	)

89 
	#p‹tEIO_REGISTER
 0xff22

	)

90 
	#p‹tCLEAR_INTERRUPT
 0x0008

	)

93 
¥vSëupTimîI¡îru±
( );

97 #if–
c⁄figUSE_PREEMPTION
 == 1 )

100 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

104 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

108 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

113 
__öãºu±
 
__Ár
 
¥vDummyISR
( );

117 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

119 
p‹tSTACK_TYPE
 
DS_Reg
 = 0;

124 *
pxT›OfSèck
 = 0x1111;

125 
pxT›OfSèck
--;

126 *
pxT›OfSèck
 = 0x2222;

127 
pxT›OfSèck
--;

128 *
pxT›OfSèck
 = 0x3333;

129 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = 
	`FP_SEG
–
pvP¨amëîs
 );

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

142 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = 
p‹tINITIAL_SW
;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

150 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xAAAA;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xBBBB;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xCCCC;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xDDDD;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xEEEE;

164 
pxT›OfSèck
--;

167 
__asm
{ 
MOV
 
DS_Reg
, 
DS
 };

169 *
pxT›OfSèck
 = 
DS_Reg
;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0123;

172 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xDDDD;

174 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xBBBB;

177  
pxT›OfSèck
;

178 
	}
}

181 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

187 
	`£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

190 
	`¥vSëupTimîI¡îru±
();

193 
	`p‹tFIRST_CONTEXT
();

196  
pdFALSE
;

197 
	}
}

200 
__öãºu±
 
__Ár
 
	$¥vDummyISR
( )

205 
	`ouç‹t
–
p‹tEIO_REGISTER
, 
p‹tCLEAR_INTERRUPT
 );

206 
	}
}

211 #if–
c⁄figUSE_PREEMPTION
 == 1 )

212 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

215 
	`vTaskIn¸emítTick
();

218 
	`p‹tSWITCH_CONTEXT
();

221 
	`ouç‹t
–
p‹tEIO_REGISTER
, 
p‹tCLEAR_INTERRUPT
 );

222 
	}
}

224 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

228 
	`vTaskIn¸emítTick
();

230 
	`ouç‹t
–
p‹tEIO_REGISTER
, 
p‹tCLEAR_INTERRUPT
 );

231 
	}
}

235 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

238 
	`p‹tSWITCH_CONTEXT
();

239 
	}
}

242 
	$vP‹tEndScheduÀr
( )

245 
	}
}

248 
	$¥vSëupTimîI¡îru±
( )

250 c⁄° 
usTimîACom∑ª
 = 
p‹tTIMER_COMPARE
, 
usTimîAMode
 = 
p‹tENABLE_TIMER_AND_INTERRUPT
;

251 c⁄° 
usT2_IRQ
 = 0x13;

255 
	`t2_öô
–
usTimîAMode
, 
usTimîACom∑ª
, 
¥vDummyISR
 );

258 
	`p‹tDISABLE_INTERRUPTS
();

260 #if–
c⁄figUSE_PREEMPTION
 == 1 )

263 
	`£tve˘
–
usT2_IRQ
, 
¥vPªem±iveTick
 );

267 
	`£tve˘
–
usT2_IRQ
, 
¥vN⁄Pªem±iveTick
 );

269 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/large_untested/portasm.h

67 
	ttskTCB
;

68 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

69 
vTaskSwôchC⁄ãxt
( );

76 
p‹tSWITCH_CONTEXT
( );

83 
p‹tFIRST_CONTEXT
( );

85 
	#p‹tSWITCH_CONTEXT
() \

86 
asm
 { 
mov
 
ax
, 
£g
 
pxCuºítTCB
 } \

87 
asm
 { 
mov
 
ds
, 
ax
 } \

88 
asm
 { 
Às
 
bx
, 
pxCuºítTCB
 } \

89 
asm
 { 
mov
 
es
:0x2[ 
bx
 ], 
ss
 } \

90 
asm
 { 
mov
 
es
:[ 
bx
 ], 
•
 } \

91 
asm
 { 
ˇŒ
 
Ár
 
±r
 
vTaskSwôchC⁄ãxt
 } \

92 
asm
 { 
mov
 
ax
, 
£g
 
pxCuºítTCB
 } \

93 
asm
 { 
mov
 
ds
, 
ax
 } \

94 
asm
 { 
Às
 
bx
, 
dw‹d
 
±r
 
pxCuºítTCB
 } \

95 
asm
 { 
mov
 
ss
, 
es
:[ 
bx
 + 2 ] } \

96 
asm
 { 
mov
 
•
, 
es
:[ 
bx
 ] }

	)

98 
	#p‹tFIRST_CONTEXT
() \

99 
asm
 { 
mov
 
ax
, 
£g
 
pxCuºítTCB
 } \

100 
asm
 { 
mov
 
ds
, 
ax
 } \

101 
asm
 { 
Às
 
bx
, 
dw‹d
 
±r
 
pxCuºítTCB
 } \

102 
asm
 { 
mov
 
ss
, 
es
:[ 
bx
 + 2 ] } \

103 
asm
 { 
mov
 
•
, 
es
:[ 
bx
 ] } \

104 
asm
 { 
p›
 
bp
 } \

105 
asm
 { 
p›
 
di
 } \

106 
asm
 { 
p›
 
si
 } \

107 
asm
 { 
p›
 
ds
 } \

108 
asm
 { 
p›
 
es
 } \

109 
asm
 { 
p›
 
dx
 } \

110 
asm
 { 
p›
 
cx
 } \

111 
asm
 { 
p›
 
bx
 } \

112 
asm
 { 
p›
 
ax
 } \

113 
asm
 { 
úë
 }

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/large_untested/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
p‹tSHORT


	)

91 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

95 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

97 
	tp‹tLONG
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

103 
	#p‹tENTER_CRITICAL
(Ë
__asm
{ 
pushf
 } \

104 
__asm
{ 
˛i
 } \

105 

	)

106 
	#p‹tEXIT_CRITICAL
(Ë
__asm
{ 
p›f
 }

	)

108 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
{ 
˛i
 }

	)

110 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
{ 
°i
 }

	)

114 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

115 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

116 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

117 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

118 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

119 
	#p‹tBYTE_ALIGNMENT
 2

	)

120 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

124 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

125 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

126 
	#p‹tINPUT_WORD
–
xAddr
 ) 
	`öpw
–xAdd∏)

	)

127 
	#p‹tOUTPUT_WORD
–
xAddr
, 
usVÆue
 ) 
	`ouçw
–xAddr, usVÆuê)

	)

131 
	#p‹tTASK_FUNCTION_PROTO
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

132 
	#p‹tTASK_FUNCTION
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

134 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/small/port.c

74 
	~<embedded.h
>

75 
	~<´.h
>

78 
	~"FªeRTOS.h
"

79 
	~"èsk.h
"

80 
	~"p‹èsm.h
"

83 
	#p‹tPRESCALE_VALUE
 ( 16 )

	)

84 
	#p‹tTIMER_COMPARE
 ( 
c⁄figCPU_CLOCK_HZ
 / ( 
c⁄figTICK_RATE_HZ
 * 4UL ) )

	)

87 
	#p‹tENABLE_TIMER_AND_INTERRUPT
 ( Ë0xe00b

	)

88 
	#p‹tENABLE_TIMER
 ( Ë0xC001

	)

91 
	#p‹tEIO_REGISTER
 0xff22

	)

92 
	#p‹tCLEAR_INTERRUPT
 0x0008

	)

95 
¥vSëupTimîI¡îru±
( );

99 #if–
c⁄figUSE_PREEMPTION
 == 1 )

102 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

106 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

110 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

114 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

116 
p‹tSTACK_TYPE
 
DS_Reg
 = 0;

119 
__asm
{ 
MOV
 
DS_Reg
, 
DS
 };

124 *
pxT›OfSèck
 = 0x1111;

125 
pxT›OfSèck
--;

126 *
pxT›OfSèck
 = 0x2222;

127 
pxT›OfSèck
--;

128 *
pxT›OfSèck
 = 0x3333;

129 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

138 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = 
p‹tINITIAL_SW
;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

146 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xAAAA;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xBBBB;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xCCCC;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xDDDD;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xEEEE;

160 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = 
DS_Reg
;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0123;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xDDDD;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xBBBB;

170  
pxT›OfSèck
;

171 
	}
}

174 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

180 
	`£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

183 
	`¥vSëupTimîI¡îru±
();

186 
	`p‹tFIRST_CONTEXT
();

189  
pdFALSE
;

190 
	}
}

195 #if–
c⁄figUSE_PREEMPTION
 == 1 )

196 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

199 
	`vTaskIn¸emítTick
();

202 
	`p‹tEND_SWITCHING_ISR
();

205 
	`ouç‹t
–
p‹tEIO_REGISTER
, 
p‹tCLEAR_INTERRUPT
 );

206 
	}
}

208 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

212 
	`vTaskIn¸emítTick
();

214 
	`ouç‹t
–
p‹tEIO_REGISTER
, 
p‹tCLEAR_INTERRUPT
 );

215 
	}
}

219 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

222 
	`p‹tEND_SWITCHING_ISR
();

223 
	}
}

226 
	$vP‹tEndScheduÀr
( )

229 
	}
}

232 
	$¥vSëupTimîI¡îru±
( )

234 c⁄° 
ulCom∑ªVÆue
 = 
p‹tTIMER_COMPARE
;

235 
usTimîCom∑ª
;

237 
usTimîCom∑ª
 = ( Ë–
ulCom∑ªVÆue
 >> 4 );

238 
	`t2_öô
–
p‹tENABLE_TIMER
, 
p‹tPRESCALE_VALUE
, 
NULL
 );

240 #if–
c⁄figUSE_PREEMPTION
 == 1 )

243 
	`t1_öô
–
p‹tENABLE_TIMER_AND_INTERRUPT
, 
usTimîCom∑ª
, usTimîCom∑ª, 
¥vPªem±iveTick
 );

247 
	`t1_öô
–
p‹tENABLE_TIMER_AND_INTERRUPT
, 
usTimîCom∑ª
, usTimîCom∑ª, 
¥vN⁄Pªem±iveTick
 );

249 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/small/portasm.h

67 #i‚de‡
PORT_ASM_H


68 
	#PORT_ASM_H


	)

70 
	ttskTCB
;

71 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

72 
vTaskSwôchC⁄ãxt
( );

79 
p‹tEND_SWITCHING_ISR
( );

86 
p‹tFIRST_CONTEXT
( );

88 
	#p‹tEND_SWITCHING_ISR
() \

89 
asm
 { 
mov
 
bx
, [
pxCuºítTCB
] } \

90 
asm
 { 
mov
 
w‹d
 
±r
 [
bx
], 
•
 } \

91 
asm
 { 
ˇŒ
 
Ár
 
±r
 
vTaskSwôchC⁄ãxt
 } \

92 
asm
 { 
mov
 
bx
, [
pxCuºítTCB
] } \

93 
asm
 { 
mov
 
•
, [
bx
] }

	)

95 
	#p‹tFIRST_CONTEXT
() \

96 
asm
 { 
mov
 
bx
, [
pxCuºítTCB
] } \

97 
asm
 { 
mov
 
•
, [
bx
] } \

98 
asm
 { 
p›
 
bp
 } \

99 
asm
 { 
p›
 
di
 } \

100 
asm
 { 
p›
 
si
 } \

101 
asm
 { 
p›
 
ds
 } \

102 
asm
 { 
p›
 
es
 } \

103 
asm
 { 
p›
 
dx
 } \

104 
asm
 { 
p›
 
cx
 } \

105 
asm
 { 
p›
 
bx
 } \

106 
asm
 { 
p›
 
ax
 } \

107 
asm
 { 
úë
 }

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/small/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
p‹tSHORT


	)

91 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

93 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

95 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

96 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

97 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

99 
	tp‹tLONG
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

105 
	#p‹tENTER_CRITICAL
(Ë
__asm
{ 
pushf
 } \

106 
__asm
{ 
˛i
 } \

107 

	)

108 
	#p‹tEXIT_CRITICAL
(Ë
__asm
{ 
p›f
 }

	)

110 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
{ 
˛i
 }

	)

112 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
{ 
°i
 }

	)

116 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

117 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

118 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

119 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

120 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

121 
	#p‹tBYTE_ALIGNMENT
 2

	)

122 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

126 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

127 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

128 
	#p‹tINPUT_WORD
–
xAddr
 ) 
	`öpw
–xAdd∏)

	)

129 
	#p‹tOUTPUT_WORD
–
xAddr
, 
usVÆue
 ) 
	`ouçw
–xAddr, usVÆuê)

	)

133 
	#p‹tTASK_FUNCTION_PROTO
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

134 
	#p‹tTASK_FUNCTION
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

136 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM7_LPC21xx/port.c

69 
	~<°dlib.h
>

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	#p‹tINITIAL_SPSR
 ( ( 
p‹tSTACK_TYPE
 ) 0x1‡Ë

	)

77 
	#p‹tTHUMB_MODE_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x20 )

	)

78 
	#p‹tINSTRUCTION_SIZE
 ( ( 
p‹tSTACK_TYPE
 ) 4 )

	)

79 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSTACK_TYPE
 ) 0 )

	)

82 
	#p‹tENABLE_TIMER
 ( ( 
p‹tCHAR
 ) 0x01 )

	)

83 
	#p‹tPRESCALE_VALUE
 0x00

	)

84 
	#p‹tINTERRUPT_ON_MATCH
 ( ( 
p‹tLONG
 ) 0x01 )

	)

85 
	#p‹tRESET_COUNT_ON_MATCH
 ( ( 
p‹tLONG
 ) 0x02 )

	)

88 
	#p‹tTIMER_VIC_CHANNEL
 ( ( 
p‹tLONG
 ) 0x0004 )

	)

89 
	#p‹tTIMER_VIC_CHANNEL_BIT
 ( ( 
p‹tLONG
 ) 0x0010 )

	)

90 
	#p‹tTIMER_VIC_ENABLE
 ( ( 
p‹tLONG
 ) 0x0020 )

	)

93 
	#p‹tTIMER_MATCH_ISR_BIT
 ( ( 
p‹tCHAR
 ) 0x01 )

	)

94 
	#p‹tCLEAR_VIC_INTERRUPT
 ( ( 
p‹tLONG
 ) 0 )

	)

104 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
p‹tLONG
 ) 0 )

	)

105 vﬁ©ûê
p‹tLONG
 
	gulCrôiˇlNe°ög
 = 9999UL;

110 
¥vSëupTimîI¡îru±
( );

116 
__asm
 
vP‹tSèπFú°Task
( );

123 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

125 
p‹tSTACK_TYPE
 *
pxOrigöÆTOS
;

132 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

136 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

142 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaaaaaa;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆTOS
;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x12121212;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11111111;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x10101010;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x09090909;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x08080808;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x07070707;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x06060606;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x05050505;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x04040404;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x03030303;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x02020202;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x01010101;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

173 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tINITIAL_SPSR
;

179 if–––Ë
pxCode
 & 0x01UL ) != 0x00UL )

182 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

185 
pxT›OfSèck
--;

192 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_SECTION_NESTING
;

194  
pxT›OfSèck
;

195 
	}
}

198 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

201 
	`¥vSëupTimîI¡îru±
();

205 
	`vP‹tSèπFú°Task
();

209 
	}
}

212 
	$vP‹tEndScheduÀr
( )

217 
	}
}

220 #i‡
c⁄figUSE_PREEMPTION
 == 0

226 
	$vN⁄Pªem±iveTick
–Ë
__úq
;

227 
	$vN⁄Pªem±iveTick
–Ë
__úq


231 
	`vTaskIn¸emítTick
();

233 
T0IR
 = 
p‹tTIMER_MATCH_ISR_BIT
;

234 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

235 
	}
}

247 
vPªem±iveTick
( );

252 
	$¥vSëupTimîI¡îru±
( )

254 
p‹tLONG
 
ulCom∑ªM©ch
;

258 
T0PR
 = 
p‹tPRESCALE_VALUE
;

261 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

265 #i‡
p‹tPRESCALE_VALUE
 != 0

267 
ulCom∑ªM©ch
 /–
p‹tPRESCALE_VALUE
 + 1 );

271 
T0MR0
 = 
ulCom∑ªM©ch
;

274 
T0MCR
 = 
p‹tRESET_COUNT_ON_MATCH
 | 
p‹tINTERRUPT_ON_MATCH
;

277 
VICI¡Sñe˘
 &~–
p‹tTIMER_VIC_CHANNEL_BIT
 );

278 
VICI¡E«bÀ
 |
p‹tTIMER_VIC_CHANNEL_BIT
;

282 #i‡
c⁄figUSE_PREEMPTION
 == 1

284 
VICVe˘Addr0
 = ( 
p‹tLONG
 ) 
vPªem±iveTick
;

288 
VICVe˘Addr0
 = ( 
p‹tLONG
 ) 
vN⁄Pªem±iveTick
;

292 
VICVe˘C¡l0
 = 
p‹tTIMER_VIC_CHANNEL
 | 
p‹tTIMER_VIC_ENABLE
;

296 
T0TCR
 = 
p‹tENABLE_TIMER
;

297 
	}
}

300 
	$vP‹tE¡îCrôiˇl
( )

303 
	`__dißbÀ_úq
();

308 
ulCrôiˇlNe°ög
++;

309 
	}
}

312 
	$vP‹tExôCrôiˇl
( )

314 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

317 
ulCrôiˇlNe°ög
--;

321 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

324 
	`__íabÀ_úq
();

327 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM7_LPC21xx/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

120 
	#p‹tEXIT_SWITCHING_ISR
(
SwôchRequúed
) \

122 
	`vTaskSwôchC⁄ãxt
(); \

124 if(
SwôchRequúed
) \

126 
	`vTaskSwôchC⁄ãxt
(); \

129 

	)

130 
vP‹tYõld
( );

131 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

144 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_úq
()

	)

145 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_úq
()

	)

158 
vP‹tE¡îCrôiˇl
( );

159 
vP‹tExôCrôiˇl
( );

161 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

162 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

166 
	#ölöe


	)

167 

	)

168 
	#p‹tNOP
(Ë
__asm
{ 
NOP
 }

	)

172 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

173 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

175 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM_CM3/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

75 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


76 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

80 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê*Ë0xe000e010 )

	)

81 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê*Ë0xe000e014 )

	)

82 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê*Ë0xe000ed04 )

	)

83 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê*Ë0xe000ed20 )

	)

84 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

85 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

86 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

87 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

88 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16 )

	)

89 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24 )

	)

92 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

96 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

101 
¥vSëupTimîI¡îru±
( );

106 
xP‹tPídSVH™dÀr
( );

107 
xP‹tSysTickH™dÀr
( );

108 
vP‹tSVCH™dÀr
( );

113 
vP‹tSèπFú°Task
( );

120 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

124 
pxT›OfSèck
--;

125 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

126 
pxT›OfSèck
--;

127 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

128 
pxT›OfSèck
--;

129 *
pxT›OfSèck
 = 0;

130 
pxT›OfSèck
 -= 5;

131 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

132 
pxT›OfSèck
 -= 8;

134  
pxT›OfSèck
;

135 
	}
}

138 
__asm
 
	$vP‹tSVCH™dÀr
( )

140 
PRESERVE8


142 
ldr
 
r3
, =
pxCuºítTCB


143 
ldr
 
r1
, [
r3
]

144 
ldr
 
r0
, [
r1
]

145 
ldmü
 
r0
!, {
r4
-
r11
}

146 
m§
 
p•
, 
r0


147 
mov
 
r0
, #0

148 
m§
 
ba£¥i
, 
r0


149 
‹r
 
r14
, #0
xd


150 
bx
 
r14


151 
	}
}

154 
__asm
 
	$vP‹tSèπFú°Task
( )

156 
PRESERVE8


159 
ldr
 
r0
, =0xE000ED08

160 
ldr
 
r0
, [r0]

161 
ldr
 
r0
, [r0]

163 
m§
 
m•
, 
r0


165 
˝sõ
 
i


167 
svc
 0

168 
n›


169 
	}
}

175 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

178 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

179 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

183 
	`¥vSëupTimîI¡îru±
();

186 
uxCrôiˇlNe°ög
 = 0;

189 
	`vP‹tSèπFú°Task
();

193 
	}
}

196 
	$vP‹tEndScheduÀr
( )

200 
	}
}

203 
	$vP‹tYõldFromISR
( )

206 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

207 
	}
}

210 
	$vP‹tE¡îCrôiˇl
( )

212 
	`p‹tDISABLE_INTERRUPTS
();

213 
uxCrôiˇlNe°ög
++;

214 
	}
}

217 
	$vP‹tExôCrôiˇl
( )

219 
uxCrôiˇlNe°ög
--;

220 if–
uxCrôiˇlNe°ög
 == 0 )

222 
	`p‹tENABLE_INTERRUPTS
();

224 
	}
}

227 
__asm
 
	$xP‹tPídSVH™dÀr
( )

229 
uxCrôiˇlNe°ög
;

230 
pxCuºítTCB
;

231 
vTaskSwôchC⁄ãxt
;

233 
PRESERVE8


235 
mrs
 
r0
, 
p•


237 
ldr
 
r3
, =
pxCuºítTCB


238 
ldr
 
r2
, [
r3
]

240 
°mdb
 
r0
!, {
r4
-
r11
}

241 
°r
 
r0
, [
r2
]

243 
°mdb
 
•
!, {
r3
, 
r14
}

244 
mov
 
r0
, #configMAX_SYSCALL_INTERRUPT_PRIORITY

245 
m§
 
ba£¥i
, 
r0


246 
bl
 
vTaskSwôchC⁄ãxt


247 
mov
 
r0
, #0

248 
m§
 
ba£¥i
, 
r0


249 
ldmü
 
•
!, {
r3
, 
r14
}

251 
ldr
 
r1
, [
r3
]

252 
ldr
 
r0
, [
r1
]

253 
ldmü
 
r0
!, {
r4
-
r11
}

254 
m§
 
p•
, 
r0


255 
bx
 
r14


256 
n›


257 
	}
}

260 
	$xP‹tSysTickH™dÀr
( )

262 
ulDummy
;

265 #i‡
c⁄figUSE_PREEMPTION
 == 1

266 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

269 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

271 
	`vTaskIn¸emítTick
();

273 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

274 
	}
}

281 
	$¥vSëupTimîI¡îru±
( )

284 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

285 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

286 
	}
}

289 
__asm
 
	$vP‹tSëI¡îru±Mask
( )

291 
PRESERVE8


293 
push
 { 
r0
 }

294 
mov
 
r0
, #configMAX_SYSCALL_INTERRUPT_PRIORITY

295 
m§
 
ba£¥i
, 
r0


296 
p›
 { 
r0
 }

297 
bx
 
r14


298 
	}
}

302 
__asm
 
	$vP‹tCÀ¨I¡îru±Mask
( )

304 
PRESERVE8


306 
push
 { 
r0
 }

307 
mov
 
r0
, #0

308 
m§
 
ba£¥i
, 
r0


309 
p›
 { 
r0
 }

310 
bx
 
r14


311 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM_CM3/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
vP‹tYõld
( );

112 
vP‹tYõldFromISR
( );

114 
	#p‹tYIELD
(Ë
	`vP‹tYõldFromISR
()

	)

115 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vP‹tYõldFromISR
()

	)

121 
vP‹tSëI¡îru±Mask
( );

122 
vP‹tCÀ¨I¡îru±Mask
( );

123 
vP‹tE¡îCrôiˇl
( );

124 
vP‹tExôCrôiˇl
( );

126 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tSëI¡îru±Mask
()

	)

127 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
()

	)

128 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

129 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

130 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`vP‹tSëI¡îru±Mask
()

	)

131 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
();()
	)
x

136 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

137 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

139 
	#p‹tNOP
()

	)

141 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM_CM4F/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

75 #i‚de‡
__TARGET_FPU_VFP


76 #îr‹ 
This
 
p‹t
 
ˇn
 
⁄ly
 
be
 
u£d
 
whí
 
the
 
¥oje˘
 
›ti⁄s
 
¨e
 
c⁄figuªd
 
to
 
íabÀ
 
h¨dw¨e
 
Êﬂtög
 
poöt
 
suµ‹t
.

80 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê*Ë0xe000e010 )

	)

81 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê*Ë0xe000e014 )

	)

82 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê*Ë0xe000ed04 )

	)

83 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê*Ë0xe000ed20 )

	)

84 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

85 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

86 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

87 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

88 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16 )

	)

89 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24 )

	)

92 
	#p‹tFPCCR
 ( ( vﬁ©ûê* ) 0xe000ef34 )

	)

93 
	#p‹tASPEN_AND_LSPEN_BITS
 ( 0x3UL << 30UL )

	)

96 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

97 
	#p‹tINITIAL_EXEC_RETURN
 ( 0xfffffffd )

	)

101 
p‹tBASE_TYPE
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

106 
¥vSëupTimîI¡îru±
( );

111 
xP‹tPídSVH™dÀr
( );

112 
xP‹tSysTickH™dÀr
( );

113 
vP‹tSVCH™dÀr
( );

118 
¥vSèπFú°Task
( );

123 
¥vE«bÀVFP
( );

130 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

137 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = 0;

146 
pxT›OfSèck
 -= 5;

147 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = 
p‹tINITIAL_EXEC_RETURN
;

154 
pxT›OfSèck
 -= 8;

156  
pxT›OfSèck
;

157 
	}
}

160 
__asm
 
	$vP‹tSVCH™dÀr
( )

162 
PRESERVE8


165 
ldr
 
r3
, =
pxCuºítTCB


166 
ldr
 
r1
, [
r3
]

167 
ldr
 
r0
, [
r1
]

169 
ldmü
 
r0
!, {
r4
-
r11
, 
r14
}

170 
m§
 
p•
, 
r0


171 
mov
 
r0
, #0

172 
m§
 
ba£¥i
, 
r0


173 
bx
 
r14


174 
	}
}

177 
__asm
 
	$¥vSèπFú°Task
( )

179 
PRESERVE8


182 
ldr
 
r0
, =0xE000ED08

183 
ldr
 
r0
, [r0]

184 
ldr
 
r0
, [r0]

186 
m§
 
m•
, 
r0


188 
˝sõ
 
i


190 
svc
 0

191 
n›


192 
	}
}

195 
__asm
 
	$¥vE«bÀVFP
( )

197 
PRESERVE8


200 
ldr
.
w
 
r0
, =0xE000ED88

201 
ldr
 
r1
, [
r0
]

204 
‹r
 
r1
,Ñ1, #( 0xf << 20 )

205 
°r
 
r1
, [
r0
]

206 
bx
 
r14


207 
n›


208 
	}
}

214 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

217 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

218 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

222 
	`¥vSëupTimîI¡îru±
();

225 
uxCrôiˇlNe°ög
 = 0;

228 
	`¥vE«bÀVFP
();

231 *–
p‹tFPCCR
 ) |
p‹tASPEN_AND_LSPEN_BITS
;

234 
	`¥vSèπFú°Task
();

238 
	}
}

241 
	$vP‹tEndScheduÀr
( )

245 
	}
}

248 
	$vP‹tYõldFromISR
( )

251 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

252 
	}
}

255 
	$vP‹tE¡îCrôiˇl
( )

257 
	`p‹tDISABLE_INTERRUPTS
();

258 
uxCrôiˇlNe°ög
++;

259 
	}
}

262 
	$vP‹tExôCrôiˇl
( )

264 
uxCrôiˇlNe°ög
--;

265 if–
uxCrôiˇlNe°ög
 == 0 )

267 
	`p‹tENABLE_INTERRUPTS
();

269 
	}
}

272 
__asm
 
	$xP‹tPídSVH™dÀr
( )

274 
uxCrôiˇlNe°ög
;

275 
pxCuºítTCB
;

276 
vTaskSwôchC⁄ãxt
;

278 
PRESERVE8


280 
mrs
 
r0
, 
p•


283 
ldr
 
r3
, =
pxCuºítTCB


284 
ldr
 
r2
, [
r3
]

287 
t°
 
r14
, #0
x10


288 
ô
 
eq


289 
v°mdbeq
 
r0
!, {
s16
-
s31
}

292 
°mdb
 
r0
!, {
r4
-
r11
, 
r14
}

295 
°r
 
r0
, [
r2
]

297 
°mdb
 
•
!, {
r3
, 
r14
}

298 
mov
 
r0
, #configMAX_SYSCALL_INTERRUPT_PRIORITY

299 
m§
 
ba£¥i
, 
r0


300 
bl
 
vTaskSwôchC⁄ãxt


301 
mov
 
r0
, #0

302 
m§
 
ba£¥i
, 
r0


303 
ldmü
 
•
!, {
r3
, 
r14
}

306 
ldr
 
r1
, [
r3
]

307 
ldr
 
r0
, [
r1
]

310 
ldmü
 
r0
!, {
r4
-
r11
, 
r14
}

314 
t°
 
r14
, #0
x10


315 
ô
 
eq


316 
vldmüeq
 
r0
!, {
s16
-
s31
}

318 
m§
 
p•
, 
r0


319 
bx
 
r14


320 
n›


321 
	}
}

324 
	$xP‹tSysTickH™dÀr
( )

326 
ulDummy
;

329 #i‡
c⁄figUSE_PREEMPTION
 == 1

330 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

333 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

335 
	`vTaskIn¸emítTick
();

337 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

338 
	}
}

345 
	$¥vSëupTimîI¡îru±
( )

348 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

349 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

350 
	}
}

353 
__asm
 
	$vP‹tSëI¡îru±Mask
( )

355 
PRESERVE8


357 
mov
 
r0
, #configMAX_SYSCALL_INTERRUPT_PRIORITY

358 
m§
 
ba£¥i
, 
r0


359 
bx
 
r14


360 
	}
}

364 
__asm
 
	$vP‹tCÀ¨I¡îru±Mask
( )

366 
PRESERVE8


368 
mov
 
r0
, #0

369 
m§
 
ba£¥i
, 
r0


370 
bx
 
r14


371 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM_CM4F/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
vP‹tYõld
( );

112 
vP‹tYõldFromISR
( );

114 
	#p‹tYIELD
(Ë
	`vP‹tYõldFromISR
()

	)

115 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vP‹tYõldFromISR
()

	)

121 
vP‹tSëI¡îru±Mask
( );

122 
vP‹tCÀ¨I¡îru±Mask
( );

123 
vP‹tE¡îCrôiˇl
( );

124 
vP‹tExôCrôiˇl
( );

126 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tSëI¡îru±Mask
()

	)

127 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
()

	)

128 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

129 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

130 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`vP‹tSëI¡îru±Mask
()

	)

131 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
();()
	)
x

135 
	#p‹tALIGNMENT_ASSERT_pxCuºítTCB
 ( )

	)

140 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

141 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

143 
	#p‹tNOP
()

	)

145 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/RX200/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	~"°rög.h
"

79 
	~"iodeföe.h
"

85 
	#p‹tINITIAL_PSW
 ( ( 
p‹tSTACK_TYPE
 ) 0x00030000 )

	)

92 
p‹tBASE_TYPE
 
vSo·w¨eI¡îru±E¡ry
;

93 c⁄° 
p‹tBASE_TYPE
 * 
	gp_vSo·w¨eI¡îru±E¡ry
 = &
vSo·w¨eI¡îru±E¡ry
;

101 
¥vSèπFú°Task
( );

108 
¥vYõldH™dÀr
( );

116 
vSo·w¨eI¡îru±ISR
( );

122 *
pxCuºítTCB
;

123 
vTaskSwôchC⁄ãxt
( );

130 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

134 *
pxT›OfSèck
 = 0x00;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = 0x00;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

145 #ifde‡
USE_FULL_REGISTER_INITIALISATION


147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = 0xffffffff;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = 0xeeeeeeee;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = 0xdddddddd;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = 0xcccccccc;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = 0xbbbbbbbb;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = 0xaaaaaaaa;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = 0x99999999;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = 0x88888888;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = 0x77777777;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = 0x66666666;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = 0x55555555;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = 0x44444444;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = 0x33333333;

173 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = 0x22222222;

175 
pxT›OfSèck
--;

179 
pxT›OfSèck
 -= 15;

183 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

184 
pxT›OfSèck
--;

185 *
pxT›OfSèck
 = 0x12345678;

186 
pxT›OfSèck
--;

187 *
pxT›OfSèck
 = 0x87654321;

189  
pxT›OfSèck
;

190 
	}
}

193 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

195 
	`vAµliˇti⁄SëupTimîI¡îru±
( );

198 if–
pxCuºítTCB
 !
NULL
 )

203 
	`vAµliˇti⁄SëupTimîI¡îru±
();

206 
	`_IEN
–
_ICU_SWINT
 ) = 1;

209 
	`_IR
–
_ICU_SWINT
 ) = 0;

212 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

215 
	`¥vSèπFú°Task
();

219 –Ë
	`vSo·w¨eI¡îru±ISR
();

222  
pdFAIL
;

223 
	}
}

226 #¥agm®
ölöe_asm
 
¥vSèπFú°Task


227 
	$¥vSèπFú°Task
( )

232 
SETPSW
 
U


236 
MOV
.
L
 #_pxCuºítTCB, 
R15


237 
MOV
.
L
 [
R15
], R15

238 
MOV
.
L
 [
R15
], 
R0


242 
POP
 
R15


243 
MVTACLO
 
R15


244 
POP
 
R15


245 
MVTACHI
 
R15


246 
POPM
 
R1
-
R15


247 
RTE


248 
NOP


249 
NOP


250 
	}
}

253 #¥agm®
öãºu±
 ( 
vTickISR
–
ve˘
 = 
_VECT
–
c⁄figTICK_VECTOR
 ), 
íabÀ
 ) )

254 
	$vTickISR
( )

258 
	`£t_ùl
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

260 
	`vTaskIn¸emítTick
();

262 
	`£t_ùl
–
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

265 #if–
c⁄figUSE_PREEMPTION
 == 1 )

266 
	`èskYIELD
();

268 
	}
}

271 
	$vSo·w¨eI¡îru±ISR
( )

273 
	`¥vYõldH™dÀr
();

274 
	}
}

277 #¥agm®
ölöe_asm
 
¥vYõldH™dÀr


278 
	$¥vYõldH™dÀr
( )

281 
SETPSW
 
I


287 
PUSH
.
L
 
R15


290 
MVFC
 
USP
, 
R15


293 
SUB
 #12, 
R15


294 
MVTC
 
R15
, 
USP


297 
MOV
.
L
 [ 
R0
 ], [ 
R15
 ] ; R15

298 
MOV
.
L
 4[ 
R0
 ], 4[ 
R15
 ] ; 
PC


299 
MOV
.
L
 8[ 
R0
 ], 8[ 
R15
 ] ; 
PSW


302 
ADD
 #12, 
R0


305 
SETPSW
 
U


308 
PUSHM
 
R1
-
R14


311 
MVFACHI
 
R15


312 
PUSH
.
L
 
R15


313 
MVFACMI
 
R15
 ; 
MiddÀ
 
‹dî
 
w‹d
.

314 
SHLL
 #16, 
R15
 ; 
Shi·ed
 
À·
 
as
 
ô
 
is
 
ª°‹ed
 
to
 
the
 
low
 
‹dî
 
w‹d
.

315 
PUSH
.
L
 
R15


318 
MOV
.
L
 #_pxCuºítTCB, 
R15


319 
MOV
.
L
 [ 
R15
 ], R15

320 
MOV
.
L
 
R0
, [ 
R15
 ]

324 
MVTIPL
 #configMAX_SYSCALL_INTERRUPT_PRIORITY

327 
BSR
.
A
 
_vTaskSwôchC⁄ãxt


330 
MVTIPL
 #configKERNEL_INTERRUPT_PRIORITY

334 
MOV
.
L
 #_pxCuºítTCB,
R15


335 
MOV
.
L
 [ 
R15
 ], R15

336 
MOV
.
L
 [ 
R15
 ], 
R0


340 
POP
 
R15


341 
MVTACLO
 
R15


342 
POP
 
R15


343 
MVTACHI
 
R15


344 
POPM
 
R1
-
R15


345 
RTE


346 
NOP


347 
NOP


348 
	}
}

351 
	$vP‹tEndScheduÀr
( )

356 –Ë
	`vTaskSwôchC⁄ãxt
();

357 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/RX200/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


76 
	~"machöe.h
"

90 
	#p‹tCHAR
 

	)

91 
	#p‹tFLOAT
 

	)

92 
	#p‹tDOUBLE
 

	)

93 
	#p‹tLONG
 

	)

94 
	#p‹tSHORT
 

	)

95 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

96 
	#p‹tBASE_TYPE
 

	)

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

102 
	tp‹tLONG
 
	tp‹tTickTy≥
;

103 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

108 
	#p‹tBYTE_ALIGNMENT
 8

	)

109 
	#p‹tSTACK_GROWTH
 -1

	)

110 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

111 
	#p‹tNOP
(Ë
	`n›
()

	)

115 
	#p‹tITU_SWINTR
 ( ( * ) 0x000872E0 )

	)

116 
	#p‹tYIELD
(Ë*
p‹tITU_SWINTR
 = 0x01; 
	`n›
();Ç›();Ç›();Ç›();Ç›()

	)

117 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

123 
	#p‹tENABLE_INTERRUPTS
(Ë
	`£t_ùl
–0 )

	)

124 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`£t_ùl
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

127 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

130 
vTaskE¡îCrôiˇl
( );

131 
vTaskExôCrôiˇl
( );

132 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
();

	)

133 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
();

	)

136 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`gë_ùl
(); 
	`£t_ùl
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

137 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`£t_ùl
–uxSavedI¡îru±Sètu†)

	)

142 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

143 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

145 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/RX600/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	~"°rög.h
"

79 
	~"iodeföe.h
"

85 
	#p‹tINITIAL_PSW
 ( ( 
p‹tSTACK_TYPE
 ) 0x00030000 )

	)

86 
	#p‹tINITIAL_FPSW
 ( ( 
p‹tSTACK_TYPE
 ) 0x00000100 )

	)

93 
p‹tBASE_TYPE
 
vSo·w¨eI¡îru±E¡ry
;

94 c⁄° 
p‹tBASE_TYPE
 * 
	gp_vSo·w¨eI¡îru±E¡ry
 = &
vSo·w¨eI¡îru±E¡ry
;

102 
¥vSèπFú°Task
( );

109 
¥vYõldH™dÀr
( );

117 
vSo·w¨eI¡îru±ISR
( );

123 *
pxCuºítTCB
;

124 
vTaskSwôchC⁄ãxt
( );

131 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

135 *
pxT›OfSèck
 = 0x00;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

144 #ifde‡
USE_FULL_REGISTER_INITIALISATION


146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = 0xffffffff;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = 0xeeeeeeee;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = 0xdddddddd;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = 0xcccccccc;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = 0xbbbbbbbb;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = 0xaaaaaaaa;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = 0x99999999;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = 0x88888888;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = 0x77777777;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = 0x66666666;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = 0x55555555;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = 0x44444444;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = 0x33333333;

172 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = 0x22222222;

174 
pxT›OfSèck
--;

178 
pxT›OfSèck
 -= 15;

182 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

183 
pxT›OfSèck
--;

184 *
pxT›OfSèck
 = 
p‹tINITIAL_FPSW
;

185 
pxT›OfSèck
--;

186 *
pxT›OfSèck
 = 0x12345678;

187 
pxT›OfSèck
--;

188 *
pxT›OfSèck
 = 0x87654321;

190  
pxT›OfSèck
;

191 
	}
}

194 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

196 
	`vAµliˇti⁄SëupTimîI¡îru±
( );

199 if–
pxCuºítTCB
 !
NULL
 )

204 
	`vAµliˇti⁄SëupTimîI¡îru±
();

207 
	`_IEN
–
_ICU_SWINT
 ) = 1;

210 
	`_IR
–
_ICU_SWINT
 ) = 0;

213 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

216 
	`¥vSèπFú°Task
();

220 –Ë
	`vSo·w¨eI¡îru±ISR
();

223  
pdFAIL
;

224 
	}
}

227 #¥agm®
ölöe_asm
 
¥vSèπFú°Task


228 
	$¥vSèπFú°Task
( )

233 
SETPSW
 
U


237 
MOV
.
L
 #_pxCuºítTCB, 
R15


238 
MOV
.
L
 [
R15
], R15

239 
MOV
.
L
 [
R15
], 
R0


243 
POP
 
R15


244 
MVTACLO
 
R15


245 
POP
 
R15


246 
MVTACHI
 
R15


247 
POP
 
R15


248 
MVTC
 
R15
,
FPSW


249 
POPM
 
R1
-
R15


250 
RTE


251 
NOP


252 
NOP


253 
	}
}

256 #¥agm®
öãºu±
 ( 
vTickISR
–
ve˘
 = 
_VECT
–
c⁄figTICK_VECTOR
 ), 
íabÀ
 ) )

257 
	$vTickISR
( )

261 
	`£t_ùl
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

263 
	`vTaskIn¸emítTick
();

265 
	`£t_ùl
–
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

268 #if–
c⁄figUSE_PREEMPTION
 == 1 )

269 
	`èskYIELD
();

271 
	}
}

274 
	$vSo·w¨eI¡îru±ISR
( )

276 
	`¥vYõldH™dÀr
();

277 
	}
}

280 #¥agm®
ölöe_asm
 
¥vYõldH™dÀr


281 
	$¥vYõldH™dÀr
( )

284 
SETPSW
 
I


290 
PUSH
.
L
 
R15


293 
MVFC
 
USP
, 
R15


296 
SUB
 #12, 
R15


297 
MVTC
 
R15
, 
USP


300 
MOV
.
L
 [ 
R0
 ], [ 
R15
 ] ; R15

301 
MOV
.
L
 4[ 
R0
 ], 4[ 
R15
 ] ; 
PC


302 
MOV
.
L
 8[ 
R0
 ], 8[ 
R15
 ] ; 
PSW


305 
ADD
 #12, 
R0


308 
SETPSW
 
U


311 
PUSHM
 
R1
-
R14


314 
MVFC
 
FPSW
, 
R15


315 
PUSH
.
L
 
R15


316 
MVFACHI
 
R15


317 
PUSH
.
L
 
R15


318 
MVFACMI
 
R15
 ; 
MiddÀ
 
‹dî
 
w‹d
.

319 
SHLL
 #16, 
R15
 ; 
Shi·ed
 
À·
 
as
 
ô
 
is
 
ª°‹ed
 
to
 
the
 
low
 
‹dî
 
w‹d
.

320 
PUSH
.
L
 
R15


323 
MOV
.
L
 #_pxCuºítTCB, 
R15


324 
MOV
.
L
 [ 
R15
 ], R15

325 
MOV
.
L
 
R0
, [ 
R15
 ]

329 
MVTIPL
 #configMAX_SYSCALL_INTERRUPT_PRIORITY

332 
BSR
.
A
 
_vTaskSwôchC⁄ãxt


335 
MVTIPL
 #configKERNEL_INTERRUPT_PRIORITY

339 
MOV
.
L
 #_pxCuºítTCB,
R15


340 
MOV
.
L
 [ 
R15
 ], R15

341 
MOV
.
L
 [ 
R15
 ], 
R0


345 
POP
 
R15


346 
MVTACLO
 
R15


347 
POP
 
R15


348 
MVTACHI
 
R15


349 
POP
 
R15


350 
MVTC
 
R15
,
FPSW


351 
POPM
 
R1
-
R15


352 
RTE


353 
NOP


354 
NOP


355 
	}
}

358 
	$vP‹tEndScheduÀr
( )

363 –Ë
	`vTaskSwôchC⁄ãxt
();

364 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/RX600/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


76 
	~"machöe.h
"

90 
	#p‹tCHAR
 

	)

91 
	#p‹tFLOAT
 

	)

92 
	#p‹tDOUBLE
 

	)

93 
	#p‹tLONG
 

	)

94 
	#p‹tSHORT
 

	)

95 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

96 
	#p‹tBASE_TYPE
 

	)

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

102 
	tp‹tLONG
 
	tp‹tTickTy≥
;

103 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

108 
	#p‹tBYTE_ALIGNMENT
 8

	)

109 
	#p‹tSTACK_GROWTH
 -1

	)

110 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

111 
	#p‹tNOP
(Ë
	`n›
()

	)

115 
	#p‹tITU_SWINTR
 ( ( * ) 0x000872E0 )

	)

116 
	#p‹tYIELD
(Ë*
p‹tITU_SWINTR
 = 0x01; 
	`n›
();Ç›();Ç›();Ç›();Ç›()

	)

117 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

123 
	#p‹tENABLE_INTERRUPTS
(Ë
	`£t_ùl
–0 )

	)

124 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`£t_ùl
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

127 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

130 
vTaskE¡îCrôiˇl
( );

131 
vTaskExôCrôiˇl
( );

132 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
();

	)

133 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
();

	)

136 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`gë_ùl
(); 
	`£t_ùl
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

137 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`£t_ùl
–uxSavedI¡îru±Sètu†)

	)

142 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

143 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

145 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/SH2A_FPU/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	~"°rög.h
"

82 
	#p‹tINITIAL_SR
 ( 0UL )

	)

88 
	#p‹tFLOP_REGISTERS_TO_STORE
 ( 18 )

	)

89 
	#p‹tFLOP_STORAGE_SIZE
 ( 
p‹tFLOP_REGISTERS_TO_STORE
 * 4 )

	)

96 
vP‹tYõld
( );

101 
vP‹tSèπFú°Task
( );

106 
ulP‹tGëGBR
( );

113 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

116 *
pxT›OfSèck
 = 0x11111111UL;

117 
pxT›OfSèck
--;

118 *
pxT›OfSèck
 = 0x22222222UL;

119 
pxT›OfSèck
--;

120 *
pxT›OfSèck
 = 0x33333333UL;

121 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = 
p‹tINITIAL_SR
;

125 
pxT›OfSèck
--;

128 *
pxT›OfSèck
 = ( Ë
pxCode
;

129 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = 15;

133 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = 14;

137 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = 13;

141 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = 12;

145 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = 11;

149 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = 10;

153 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = 9;

157 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = 8;

161 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = 7;

165 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = 6;

169 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = 5;

173 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( Ë
pvP¨amëîs
;

177 
pxT›OfSèck
--;

180 *
pxT›OfSèck
 = 3;

181 
pxT›OfSèck
--;

184 *
pxT›OfSèck
 = 2;

185 
pxT›OfSèck
--;

188 *
pxT›OfSèck
 = 1;

189 
pxT›OfSèck
--;

192 *
pxT›OfSèck
 = 0;

193 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = 16;

197 
pxT›OfSèck
--;

200 *
pxT›OfSèck
 = 17;

201 
pxT›OfSèck
--;

204 *
pxT›OfSèck
 = 
	`ulP‹tGëGBR
();

211  
pxT›OfSèck
;

212 
	}
}

215 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

217 
	`vAµliˇti⁄SëupTimîI¡îru±
( );

222 
	`vAµliˇti⁄SëupTimîI¡îru±
();

229 
	`å≠a
–
p‹tSTART_SCHEDULER_TRAP_NO
 );

232  
pdFAIL
;

233 
	}
}

236 
	$vP‹tEndScheduÀr
( )

239 
	}
}

242 
	$vP‹tYõld
( )

244 
lI¡îru±Mask
;

248 
lI¡îru±Mask
 = 
	`gë_imask
();

253 
	`£t_imask
–
p‹tKERNEL_INTERRUPT_PRIORITY
 );

255 
	`å≠a
–
p‹tYIELD_TRAP_NO
 );

259 
	`£t_imask
––Ë
lI¡îru±Mask
 );

260 
	}
}

263 
p‹tBASE_TYPE
 
	$xP‹tU£sFlﬂtögPoöt
–
xTaskH™dÀ
 
xTask
 )

265 *
pulFl›Buf„r
;

266 
p‹tBASE_TYPE
 
xRëu∫
;

267 * vﬁ©ûê
pxCuºítTCB
;

275 if–
xTask
 =
NULL
 )

277 
xTask
 = ( 
xTaskH™dÀ
 ) 
pxCuºítTCB
;

281 
pulFl›Buf„r
 = ( * ) 
	`pvP‹tMÆloc
–
p‹tFLOP_STORAGE_SIZE
 );

283 if–
pulFl›Buf„r
 !
NULL
 )

286 
	`mem£t
––* ) 
pulFl›Buf„r
, 0x00, 
p‹tFLOP_STORAGE_SIZE
 );

290 *
pulFl›Buf„r
 = 
	`gë_Âs¸
();

294 
	`vTaskSëAµliˇti⁄TaskTag
–
xTask
, ( * ) ( 
pulFl›Buf„r
 + 
p‹tFLOP_REGISTERS_TO_STORE
 ) );

295 
xRëu∫
 = 
pdPASS
;

299 
xRëu∫
 = 
pdFAIL
;

302  
xRëu∫
;

303 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/SH2A_FPU/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 
	~<machöe.h
>

73 #ifde‡
__˝lu•lus


89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

95 
	#p‹tBASE_TYPE
 

	)

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

101 
	tp‹tLONG
 
	tp‹tTickTy≥
;

102 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

107 
	#p‹tBYTE_ALIGNMENT
 8

	)

108 
	#p‹tSTACK_GROWTH
 -1

	)

109 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

110 
	#p‹tNOP
(Ë
	`n›
()

	)

111 
	#p‹tSTART_SCHEDULER_TRAP_NO
 ( 32 )

	)

112 
	#p‹tYIELD_TRAP_NO
 ( 33 )

	)

113 
	#p‹tKERNEL_INTERRUPT_PRIORITY
 ( 1 )

	)

115 
vP‹tYõld
( );

116 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

118 
vTaskSwôchC⁄ãxt
( );

119 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) 
	`vTaskSwôchC⁄ãxt
()

	)

126 
p‹tBASE_TYPE
 
xP‹tU£sFlﬂtögPoöt
–* 
xTask
 );

132 
vP‹tSaveFl›Regi°îs
–*
pulBuf„r
 );

133 
vP‹tRe°‹eFl›Regi°îs
–*
pulBuf„r
 );

140 
	#åa˚TASK_SWITCHED_OUT
(Ëif–
pxCuºítTCB
->
pxTaskTag
 !
NULL
 ) 
	`vP‹tSaveFl›Regi°îs
–pxCuºítTCB->pxTaskTag )

	)

141 
	#åa˚TASK_SWITCHED_IN
(Ëif–
pxCuºítTCB
->
pxTaskTag
 !
NULL
 ) 
	`vP‹tRe°‹eFl›Regi°îs
–pxCuºítTCB->pxTaskTag )

	)

147 
	#p‹tENABLE_INTERRUPTS
(Ë
	`£t_imask
–0x00 )

	)

148 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`£t_imask
–
p‹tKERNEL_INTERRUPT_PRIORITY
 )

	)

151 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

154 
vTaskE¡îCrôiˇl
( );

155 
vTaskExôCrôiˇl
( );

156 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
();

	)

157 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
();

	)

162 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

163 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

165 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Rowley/MSP430F449/port.c

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

77 
	#p‹tACLK_FREQUENCY_HZ
 ( ( 
p‹tTickTy≥
 ) 32768 )

	)

78 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( Ë10 )

	)

79 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
p‹tSTACK_TYPE
 ) 0x08 )

	)

83 
	ttskTCB
;

84 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

94 vﬁ©ûê
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

102 
¥vSëupTimîI¡îru±
( );

111 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

129 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

130 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

132 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x4444;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x5555;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x6666;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x7777;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x8888;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x9999;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xaaaa;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xbbbb;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xcccc;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xdddd;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xeeee;

156 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

161 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

170  
pxT›OfSèck
;

171 
	}
}

174 
	$vP‹tEndScheduÀr
( )

178 
	}
}

185 
	$¥vSëupTimîI¡îru±
( )

188 
TACTL
 = 0;

191 
TACTL
 = 
TASSEL_1
;

194 
TACTL
 |
TACLR
;

197 
TACCR0
 = 
p‹tACLK_FREQUENCY_HZ
 / 
c⁄figTICK_RATE_HZ
;

200 
TACCTL0
 = 
CCIE
;

203 
TACTL
 |
TACLR
;

206 
TACTL
 |
MC_1
;

207 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Rowley/MSP430F449/portasm.h

67 #i‚de‡
PORT_ASM_H


68 
	#PORT_ASM_H


	)

70 
p‹tSAVE_CONTEXT
 
ma¸o


72 
push
 
r4


73 
push
 
r5


74 
push
 
r6


75 
push
 
r7


76 
push
 
r8


77 
push
 
r9


78 
push
 
r10


79 
push
 
r11


80 
push
 
r12


81 
push
 
r13


82 
push
 
r14


83 
push
 
r15


84 
	gmov
.
	gw
 &
	g_usCrôiˇlNe°ög
, 
r14


85 
push
 
r14


86 
	gmov
.
	gw
 &
	g_pxCuºítTCB
, 
r12


87 
	gmov
.
w
 
	gr1
, @
r12


88 
ídm


91 
p‹tRESTORE_CONTEXT
 
ma¸o


92 
	gmov
.
	gw
 &
	g_pxCuºítTCB
, 
r12


93 
	gmov
.
	gw
 @
	gr12
, 
r1


94 
p›
 
r15


95 
	gmov
.
w
 
	gr15
, &
_usCrôiˇlNe°ög


96 
p›
 
r15


97 
p›
 
r14


98 
p›
 
r13


99 
p›
 
r12


100 
p›
 
r11


101 
p›
 
r10


102 
p›
 
r9


103 
p›
 
r8


104 
p›
 
r7


105 
p›
 
r6


106 
p›
 
r5


107 
p›
 
r4


112 
	gbic
.
	gw
 #0
	gxf0
,0(
	gSP
)

114 
ªti


115 
	gídm


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Rowley/MSP430F449/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

81 
	#p‹tCHAR
 

	)

82 
	#p‹tFLOAT
 

	)

83 
	#p‹tDOUBLE
 

	)

84 
	#p‹tLONG
 

	)

85 
	#p‹tSHORT
 

	)

86 
	#p‹tSTACK_TYPE
 
p‹tSHORT


	)

87 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

89 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

90 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

91 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

93 
	tp‹tLONG
 
	tp‹tTickTy≥
;

94 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

100 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`_DINT
(); 
	`_NOP
()

	)

101 
	#p‹tENABLE_INTERRUPTS
(Ë
	`_EINT
();

	)

105 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tSHORT
 ) 0 )

	)

107 
	#p‹tENTER_CRITICAL
() \

109 vﬁ©ûê
p‹tSHORT
 
usCrôiˇlNe°ög
; \

111 
	`p‹tDISABLE_INTERRUPTS
(); \

116 
usCrôiˇlNe°ög
++; \

117 }

	)

119 
	#p‹tEXIT_CRITICAL
() \

121 vﬁ©ûê
p‹tSHORT
 
usCrôiˇlNe°ög
; \

123 if–
usCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

126 
usCrôiˇlNe°ög
--; \

130 if–
usCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

132 
	`p‹tENABLE_INTERRUPTS
(); \

135 }

	)

143 
vP‹tYõld
( );

144 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

148 
	#p‹tBYTE_ALIGNMENT
 2

	)

149 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

150 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

151 
	#p‹tNOP
()

	)

155 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

156 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
__t›Àvñ


	)

158 #i‡
c⁄figINTERRUPT_EXAMPLE_METHOD
 == 2

160 
vTaskSwôchC⁄ãxt
( );

161 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x ) 
	`vTaskSwôchC⁄ãxt
()

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/SDCC/Cygnal/port.c

72 
	~<°rög.h
>

75 
	~"FªeRTOS.h
"

76 
	~"èsk.h
"

79 
	#p‹tCLOCK_DIVISOR
 ( ( Ë12 )

	)

80 
	#p‹tMAX_TIMER_VALUE
 ( ( Ë0xfff‡)

	)

81 
	#p‹tENABLE_TIMER
 ( ( Ë0x04 )

	)

82 
	#p‹tTIMER_2_INTERRUPT_ENABLE
 ( ( Ë0x20 )

	)

85 
	#p‹tGLOBAL_INTERRUPT_BIT
 ( ( 
p‹tSTACK_TYPE
 ) 0x80 )

	)

88 
	#p‹tINITIAL_PSW
 ( ( 
p‹tSTACK_TYPE
 ) 0x00 )

	)

91 
	#p‹tCLEAR_INTERRUPT_FLAG
(Ë
TMR2CN
 &~0x80;

	)

95 
d©a
 
	gucSèckByãs
;

99 
xd©a
 
p‹tSTACK_TYPE
 * 
d©a
 
	gpxXRAMSèck
;

103 
d©a
 
p‹tSTACK_TYPE
 * d©®
	gpxRAMSèck
;

107 
	ttskTCB
;

108 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

114 
¥vSëupTimîI¡îru±
( );

122 
	#p‹tCOPY_STACK_TO_XRAM
() \

127 
pxXRAMSèck
 = ( 
xd©a
 
p‹tSTACK_TYPE
 * ) *––xd©®p‹tSTACK_TYPE ** ) 
pxCuºítTCB
 ); \

130 
pxRAMSèck
 = ( 
d©a
 
p‹tSTACK_TYPE
 * d©®Ë
c⁄figSTACK_START
; \

134 
ucSèckByãs
 = 
SP
 - ( 
c⁄figSTACK_START
 - 1 ); \

138 *
pxXRAMSèck
 = 
ucSèckByãs
; \

142  
ucSèckByãs
 ) \

144 
pxXRAMSèck
++; \

145 *
pxXRAMSèck
 = *
pxRAMSèck
; \

146 
pxRAMSèck
++; \

147 
ucSèckByãs
--; \

149 }

	)

156 
	#p‹tCOPY_XRAM_TO_STACK
() \

160 
pxXRAMSèck
 = ( 
xd©a
 
p‹tSTACK_TYPE
 * ) *––xd©®p‹tSTACK_TYPE ** ) 
pxCuºítTCB
 ); \

161 
pxRAMSèck
 = ( 
d©a
 
p‹tSTACK_TYPE
 * d©®Ë–
c⁄figSTACK_START
 - 1 ); \

165 
ucSèckByãs
 = 
pxXRAMSèck
[ 0 ]; \

170 
pxXRAMSèck
++; \

171 
pxRAMSèck
++; \

172 *
pxRAMSèck
 = *
pxXRAMSèck
; \

173 
ucSèckByãs
--; \

174 }  
ucSèckByãs
 ); \

177 
SP
 = ( Ë
pxRAMSèck
; \

178 }

	)

185 
	#p‹tSAVE_CONTEXT
() \

187 
_asm
 \

190 
push
 
ACC
 \

192 
push
 
IE
 \

193 
˛r
 
_EA
 \

194 
push
 
DPL
 \

195 
push
 
DPH
 \

196 
push
 
b
 \

197 
push
 
¨2
 \

198 
push
 
¨3
 \

199 
push
 
¨4
 \

200 
push
 
¨5
 \

201 
push
 
¨6
 \

202 
push
 
¨7
 \

203 
push
 
¨0
 \

204 
push
 
¨1
 \

205 
push
 
PSW
 \

206 
_ídasm
; \

207 
PSW
 = 0; \

208 
_asm
 \

209 
push
 
_bp
 \

210 
_ídasm
; \

211 }

	)

218 
	#p‹tRESTORE_CONTEXT
() \

220 
_asm
 \

221 
p›
 
_bp
 \

222 
p›
 
PSW
 \

223 
p›
 
¨1
 \

224 
p›
 
¨0
 \

225 
p›
 
¨7
 \

226 
p›
 
¨6
 \

227 
p›
 
¨5
 \

228 
p›
 
¨4
 \

229 
p›
 
¨3
 \

230 
p›
 
¨2
 \

231 
p›
 
b
 \

232 
p›
 
DPH
 \

233 
p›
 
DPL
 \

237 
p›
 
ACC
 \

238 
JB
 
ACC
.7,0098
$
 \

239 
CLR
 
IE
.7 \

240 
LJMP
 0099
$
 \

241 0098
$
: \

242 
SETB
 
IE
.7 \

243 0099
$
: \

245 
p›
 
ACC
 \

246 
ªti
 \

247 
_ídasm
; \

248 }

	)

254 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

256 
ulAddªss
;

257 
p‹tSTACK_TYPE
 *
pxSèπOfSèck
;

260 
pxSèπOfSèck
 = 
pxT›OfSèck
;

261 
pxT›OfSèck
++;

277 
ulAddªss
 = ( Ë
pxCode
;

278 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
ulAddªss
;

279 
ulAddªss
 >>= 8;

280 
pxT›OfSèck
++;

281 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
ulAddªss
 );

282 
pxT›OfSèck
++;

285 *
pxT›OfSèck
 = 0xaa;

286 
pxT›OfSèck
++;

289 *
pxT›OfSèck
 = 
p‹tGLOBAL_INTERRUPT_BIT
;

290 
pxT›OfSèck
++;

294 
ulAddªss
 = ( Ë
pvP¨amëîs
;

295 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
ulAddªss
;

296 
ulAddªss
 >>= 8;

297 *
pxT›OfSèck
++;

298 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
ulAddªss
;

299 
ulAddªss
 >>= 8;

300 
pxT›OfSèck
++;

301 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
ulAddªss
;

302 
pxT›OfSèck
++;

305 *
pxT›OfSèck
 = 0x02;

306 
pxT›OfSèck
++;

307 *
pxT›OfSèck
 = 0x03;

308 
pxT›OfSèck
++;

309 *
pxT›OfSèck
 = 0x04;

310 
pxT›OfSèck
++;

311 *
pxT›OfSèck
 = 0x05;

312 
pxT›OfSèck
++;

313 *
pxT›OfSèck
 = 0x06;

314 
pxT›OfSèck
++;

315 *
pxT›OfSèck
 = 0x07;

316 
pxT›OfSèck
++;

317 *
pxT›OfSèck
 = 0x00;

318 
pxT›OfSèck
++;

319 *
pxT›OfSèck
 = 0x01;

320 
pxT›OfSèck
++;

321 *
pxT›OfSèck
 = 0x00;

322 
pxT›OfSèck
++;

323 *
pxT›OfSèck
 = 0xbb;

329 *
pxSèπOfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
pxT›OfSèck
 -ÖxStartOfStack );

333  
pxSèπOfSèck
;

334 
	}
}

340 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

343 
	`¥vSëupTimîI¡îru±
();

347 
SFRPAGE
 = 0;

351 
	`p‹tCOPY_XRAM_TO_STACK
();

352 
	`p‹tRESTORE_CONTEXT
();

355  
pdTRUE
;

356 
	}
}

359 
	$vP‹tEndScheduÀr
( )

362 
	}
}

369 
	$vP‹tYõld
–Ë
_«ked


377 
	`p‹tSAVE_CONTEXT
();

378 
	`p‹tCOPY_STACK_TO_XRAM
();

381 
	`vTaskSwôchC⁄ãxt
();

385 
	`p‹tCOPY_XRAM_TO_STACK
();

386 
	`p‹tRESTORE_CONTEXT
();

387 
	}
}

390 #i‡
c⁄figUSE_PREEMPTION
 == 1

391 
	$vTimî2ISR
–Ë
öãºu±
 5 
_«ked


397 
	`p‹tSAVE_CONTEXT
();

398 
	`p‹tCOPY_STACK_TO_XRAM
();

400 
	`vTaskIn¸emítTick
();

401 
	`vTaskSwôchC⁄ãxt
();

403 
	`p‹tCLEAR_INTERRUPT_FLAG
();

404 
	`p‹tCOPY_XRAM_TO_STACK
();

405 
	`p‹tRESTORE_CONTEXT
();

406 
	}
}

408 
	$vTimî2ISR
–Ë
öãºu±
 5

413 
	`vTaskIn¸emítTick
();

414 
	`p‹tCLEAR_INTERRUPT_FLAG
();

415 
	}
}

419 
	$¥vSëupTimîI¡îru±
( )

421 
ucOrigöÆSFRPage
;

424 c⁄° 
ulTicksPîSec⁄d
 = 
c⁄figCPU_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
;

425 c⁄° 
ulC≠tuªTime
 = 
ulTicksPîSec⁄d
 / 
c⁄figTICK_RATE_HZ
;

426 c⁄° 
ulC≠tuªVÆue
 = 
p‹tMAX_TIMER_VALUE
 - 
ulC≠tuªTime
;

427 c⁄° 
ucLowC≠tuªByã
 = ( Ë–
ulC≠tuªVÆue
 & ( ) 0xff );

428 c⁄° 
ucHighC≠tuªByã
 = ( Ë–
ulC≠tuªVÆue
 >> ( ) 8 );

434 
ucOrigöÆSFRPage
 = 
SFRPAGE
;

435 
SFRPAGE
 = 0;

438 
TMR2CF
 = ( ) 0;

441 
RCAP2L
 = 
ucLowC≠tuªByã
;

442 
RCAP2H
 = 
ucHighC≠tuªByã
;

445 
TMR2L
 = 
ucLowC≠tuªByã
;

446 
TMR2H
 = 
ucHighC≠tuªByã
;

449 
IE
 |
p‹tTIMER_2_INTERRUPT_ENABLE
;

453 
TMR2CN
 = 
p‹tENABLE_TIMER
;

456 
SFRPAGE
 = 
ucOrigöÆSFRPage
;

457 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/SDCC/Cygnal/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #i‡
c⁄figUSE_PREEMPTION
 == 0

71 
	$vTimî2ISR
–Ë
öãºu±
 5;

73 
	$vTimî2ISR
–Ë
öãºu±
 5 
_«ked
;

76 
	$vSîülISR
–Ë
öãºu±
 4;

90 
	#p‹tCHAR
 

	)

91 
	#p‹tFLOAT
 

	)

92 
	#p‹tDOUBLE
 

	)

93 
	#p‹tLONG
 

	)

94 
	#p‹tSHORT
 

	)

95 
	#p‹tSTACK_TYPE
 
p‹tCHAR


	)

96 
	#p‹tBASE_TYPE
 

	)

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

102 
	tp‹tLONG
 
	tp‹tTickTy≥
;

103 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

108 
	#p‹tENTER_CRITICAL
(Ë
_asm
 \

109 
push
 
ACC
 \

110 
push
 
IE
 \

111 
_ídasm
; \

112 
EA
 = 0;

	)

114 
	#p‹tEXIT_CRITICAL
(Ë
_asm
 \

115 
p›
 
ACC
 \

116 
_ídasm
; \

117 
ACC
 &= 0x80; \

118 
IE
 |
ACC
; \

119 
_asm
 \

120 
p›
 
ACC
 \

121 
_ídasm
;

	)

123 
	#p‹tDISABLE_INTERRUPTS
(Ë
EA
 = 0;

	)

124 
	#p‹tENABLE_INTERRUPTS
(Ë
EA
 = 1;

	)

128 
	#p‹tBYTE_ALIGNMENT
 1

	)

129 
	#p‹tSTACK_GROWTH
 ( 1 )

	)

130 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tLONG
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

134 
	$vP‹tYõld
–Ë
_«ked
;

135 
	#p‹tYIELD
(Ë
	`vP‹tYõld
();

	)

138 
	#p‹tNOP
(Ë
_asm
 \

139 
n›
 \

140 
_ídasm
;

	)

145 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

146 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB91460/__STD_LIB_sbrk.c

1 
	~"FªeRTOSC⁄fig.h
"

2 
	~<°dlib.h
>

4 
	gbrk_siz
 = 0;

6 
	t_hìp_t
;

7 
	#ROUNDUP
(
s
Ë(((s)+(
_hìp_t
)-1)&~((_hìp_t)-1))

	)

8 
_hìp_t
 
	g_hìp
[
ROUNDUP
(
c⁄figTOTAL_HEAP_SIZE
)/(_heep_t)];

9 
	#_hìp_size
 
	`ROUNDUP
(
c⁄figTOTAL_HEAP_SIZE
)

	)

15 *
	$sbrk
(
size
)

17 i‡(
brk_siz
 + 
size
 > 
_hìp_size
 || brk_siz + size < 0)

20 
brk_siz
 +
size
;

21 –(*)
_hìp
 + 
brk_siz
 - 
size
);

22 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB91460/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

69 
	~"mb91467d.h
"

75 
	ttskTCB
;

76 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

80 #¥agm®
asm


81 #ma¸ÿ
SaveC⁄ãxt


82 
	gORCCR
 #0
	gx20
 ;
Swôch
 
to
 
u£r
 
°ack


83 
ST
 
	gRP
,@-
	gR15
 ;
St‹e
 
RP


84 
STM0
 (
R7
,
R6
,
R5
,
R4
,
R3
,
R2
,
R1
,
R0
Ë;
St‹e
 
	gR7
-R0

85 
STM1
 (
R14
,
R13
,
R12
,
R11
,
R10
,
R9
,
R8
Ë;
St‹e
 
	gR14
-R8

86 
ST
 
	gMDH
, @-
	gR15
 ;
St‹e
 
MDH


87 
ST
 
	gMDL
, @-
	gR15
 ;
St‹e
 
MDL


89 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
back
 
to
 
sy°em
 
°ack


90 
	gLD
 @
	gR15
+,
	gR0
 ;
St‹e
 
PC
 
to
 
R0


91 
	gORCCR
 #0
	gx20
 ;
Swôch
 
to
 
u£r
 
°ack


92 
ST
 
	gR0
,@-
	gR15
 ;
St‹e
 
PC
 
to
 
U£r
 
°ack


94 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
back
 
to
 
sy°em
 
°ack


95 
	gLD
 @
	gR15
+,
	gR0
 ;
St‹e
 
PS
 
to
 
R0


96 
	gORCCR
 #0
	gx20
 ;
Swôch
 
to
 
u£r
 
°ack


97 
ST
 
	gR0
,@-
	gR15
 ;
St‹e
 
PS
 
to
 
U£r
 
°ack


99 
	gLDI
 #_pxCuºítTCB, 
	gR0
 ;
Gë
 
pxCuºítTCB
 
addªss


100 
	gLD
 @
	gR0
, R0 ;
Gë
 
the
 
	gpxCuºítTCB
->
pxT›OfSèck
 
addªss


101 
ST
 
	gR15
,@
	gR0
 ;
St‹e
 
USP
 
to
 
	gpxCuºítTCB
->
pxT›OfSèck


103 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
back
 
to
 
sy°em
 
°ack
 
the
 
ª°
 
of
 
tick
 
	gISR


106 #ma¸ÿ
Re°‹eC⁄ãxt


107 
	gLDI
 #_pxCuºítTCB, 
	gR0
 ;
Gë
 
pxCuºítTCB
 
addªss


108 
	gLD
 @
	gR0
, R0 ;
Gë
 
the
 
	gpxCuºítTCB
->
pxT›OfSèck
 
addªss


109 
	gORCCR
 #0
	gx20
 ;
Swôch
 
to
 
u£r
 
°ack


110 
	gLD
 @
	gR0
, 
	gR15
 ;
Re°‹e
 
USP
 
‰om
 
	gpxCuºítTCB
->
pxT›OfSèck


112 
	gLD
 @
	gR15
+,
	gR0
 ;
St‹e
 
PS
 
to
 
R0


113 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
to
 
sy°em
 
°ack


114 
ST
 
	gR0
,@-
	gR15
 ;
St‹e
 
PS
 
to
 
sy°em
 
°ack


116 
	gORCCR
 #0
	gx20
 ;
Swôch
 
to
 
u£r
 
°ack


117 
	gLD
 @
	gR15
+,
	gR0
 ;
St‹e
 
PC
 
to
 
R0


118 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
to
 
sy°em
 
°ack


119 
ST
 
	gR0
,@-
	gR15
 ;
St‹e
 
PC
 
to
 
sy°em
 
°ack


121 
	gORCCR
 #0
	gx20
 ;
Swôch
 
back
 
to
 
ªåõve
 
the
 
ªmaöög
 
c⁄ãxt


123 
	gLD
 @
	gR15
+, 
	gMDL
 ;
Re°‹e
 
MDL


124 
	gLD
 @
	gR15
+, 
	gMDH
 ;
Re°‹e
 
MDH


125 
LDM1
 (
R14
,
R13
,
R12
,
R11
,
R10
,
R9
,
R8
Ë;
Re°‹e
 
	gR14
-R8

126 
LDM0
 (
R7
,
R6
,
R5
,
R4
,
R3
,
R2
,
R1
,
R0
Ë;
Re°‹e
 
	gR7
-R0

127 
	gLD
 @
	gR15
+, 
	gRP
 ;
Re°‹e
 
RP


129 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
back
 
to
 
sy°em
 
°ack
 
the
 
ª°
 
of
 
tick
 
	gISR


131 #¥agm®
ídasm


138 
¥vSëupTimîI¡îru±
( );

147 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

152 *
pxT›OfSèck
 = 0x11111111;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = 0x22222222;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = 0x33333333;

157 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = (
p‹tSTACK_TYPE
)(
pvP¨amëîs
);

163 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00000000;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00007777;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00006666;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00005555;

172 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) (
pvP¨amëîs
);

179 
pxT›OfSèck
--;

180 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00003333;

181 
pxT›OfSèck
--;

182 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00002222;

183 
pxT›OfSèck
--;

184 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00001111;

185 
pxT›OfSèck
--;

186 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00000001;

187 
pxT›OfSèck
--;

188 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0000EEEE;

189 
pxT›OfSèck
--;

190 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0000DDDD;

191 
pxT›OfSèck
--;

192 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0000CCCC;

193 
pxT›OfSèck
--;

194 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0000BBBB;

195 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0000AAAA;

197 
pxT›OfSèck
--;

198 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00009999;

199 
pxT›OfSèck
--;

200 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x00008888;

201 
pxT›OfSèck
--;

202 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x11110000;

203 
pxT›OfSèck
--;

204 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x22220000;

205 
pxT›OfSèck
--;

208 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

209 
pxT›OfSèck
--;

212 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x001F0030;

214  
pxT›OfSèck
;

215 
	}
}

218 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

221 
	`¥vSëupTimîI¡îru±
();

224 #¥agm®
asm


225 
Re°‹eC⁄ãxt


226 #¥agm®
ídasm


230 
	`__asm
("Ñeti ");

233  
pdFAIL
;

234 
	}
}

237 
	$vP‹tEndScheduÀr
( )

241 
	}
}

244 
	$¥vSëupTimîI¡îru±
( )

247 c⁄° 
usRñﬂdVÆue
 = ( Ë–––
c⁄figPER_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) / 32UL ) - 1UL );

251 
TMCSR0_CNTE
 = 0;

252 
TMCSR0_CSL
 = 0x2;

253 
TMCSR0_MOD
 = 0;

254 
TMCSR0_RELD
 = 1;

256 
TMCSR0_UF
 = 0;

257 
TMRLR0
 = 
usRñﬂdVÆue
;

258 
TMCSR0_INTE
 = 1;

259 
TMCSR0_CNTE
 = 1;

260 
TMCSR0_TRG
 = 1;

262 
PORTEN
 = 0x3;

263 
	}
}

266 #i‡
c⁄figUSE_PREEMPTION
 == 1

274 #¥agm®
asm


276 .
globÆ
 
_RñﬂdTimî0_IRQH™dÀr


277 
	g_RñﬂdTimî0_IRQH™dÀr
:

279 
ANDCCR
 #0
xEF
 ;
DißbÀ
 
I¡îru±s


280 
	gSaveC⁄ãxt
 ;
Save
 
c⁄ãxt


281 
	gORCCR
 #0
	gx10
 ;
	gRe
-
íabÀ
 
I¡îru±s


283 
	gLDI
 #0
	gxFFFB
,
R1


284 
	gLDI
 #_tmc§0, 
R0


285 
AND
 
	gR1
,@
	gR0
 ;
CÀ¨
 
RLT0
 
öãºu±
 
Êag


287 
CALL32
 
	g_vTaskIn¸emítTick
,
	gR12
 ;
In¸emít
 
Tick


288 
CALL32
 
	g_vTaskSwôchC⁄ãxt
,
	gR12
 ;
Swôch
 
c⁄ãxt
 
ªquúed


290 
	gANDCCR
 #0
	gxEF
 ;
DißbÀ
 
I¡îru±s


291 
	gRe°‹eC⁄ãxt
 ;
Re°‹e
 
c⁄ãxt


292 
	gORCCR
 #0
	gx10
 ;
	gRe
-
íabÀ
 
I¡îru±s


294 
	gRETI


296 #¥agm®
ídasm


305 
__öãºu±
 
	$RñﬂdTimî0_IRQH™dÀr
( )

308 
TMCSR0_UF
 = 0;

309 
	`vTaskIn¸emítTick
();

310 
	}
}

319 #¥agm®
asm


321 .
globÆ
 
_vP‹tYõldDñayed


322 
	g_vP‹tYõldDñayed
:

324 
ANDCCR
 #0
xEF
 ;
DißbÀ
 
I¡îru±s


325 
	gSaveC⁄ãxt
 ;
Save
 
c⁄ãxt


326 
	gORCCR
 #0
	gx10
 ;
	gRe
-
íabÀ
 
I¡îru±s


328 
	gLDI
 #_di¸, 
R0


329 
	gBANDL
 #0
	gx0E
, @
	gR0
 ;
CÀ¨
 
Dñayed
 
öãºu±
 
Êag


331 
CALL32
 
	g_vTaskSwôchC⁄ãxt
,
	gR12
 ;
Swôch
 
c⁄ãxt
 
ªquúed


333 
	gANDCCR
 #0
	gxEF
 ;
DißbÀ
 
I¡îru±s


334 
	gRe°‹eC⁄ãxt
 ;
Re°‹e
 
c⁄ãxt


335 
	gORCCR
 #0
	gx10
 ;
	gRe
-
íabÀ
 
I¡îru±s


337 
	gRETI


339 #¥agm®
ídasm


347 #¥agm®
asm


349 .
globÆ
 
_vP‹tYõld


350 
	g_vP‹tYõld
:

352 
SaveC⁄ãxt
 ;
Save
 
c⁄ãxt


353 
CALL32
 
	g_vTaskSwôchC⁄ãxt
,
	gR12
 ;
Swôch
 
c⁄ãxt
 
ªquúed


354 
	gRe°‹eC⁄ãxt
 ;
Re°‹e
 
c⁄ãxt


356 
	gRETI


358 #¥agm®
ídasm


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB91460/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

71 
	~"mb91467d.h
"

74 
	~<°ddef.h
>

87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

93 
	#p‹tBASE_TYPE
 

	)

95 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

96 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

97 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

99 
	tp‹tLONG
 
	tp‹tTickTy≥
;

100 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

105 #i‡
c⁄figKERNEL_INTERRUPT_PRIORITY
 != 30

106 #îr‹ 
c⁄figKERNEL_INTERRUPT_PRIORITY
 (
£t
 
ö
 
FªeRTOSC⁄fig
.
h
Ë
mu°
 
m©ch
 
the
 
ILM
 
vÆue
 së i¿thê
fﬁlowög
 
löe
 - 30 (1EhË
beög
Åhe .

108 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
(" STILM #1Eh ")

	)

109 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
(" STILM #1Fh ")

	)

111 
	#p‹tENTER_CRITICAL
() \

112 
	`__asm
(" ST PS,@-R15 "); \

113 
	`__asm
(" ANDCCR #0xef "); \

114 

	)

116 
	#p‹tEXIT_CRITICAL
() \

117 
	`__asm
(" LD @R15+,PS "); \

118 

	)

122 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

123 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

124 
	#p‹tBYTE_ALIGNMENT
 4

	)

125 
	#p‹tNOP
(Ë
	`__asm
–"Ç› " );

	)

129 
	#p‹tYIELD
(Ë
	`__asm
–" INT #40H " );

	)

132 
	#p‹tYIELD_FROM_ISR
(Ë
DICR_DLYI
 = 1

	)

136 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

137 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

139 
	#p‹tMINIMAL_STACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB96340/__STD_LIB_sbrk.c

11 
	~"FªeRTOSC⁄fig.h
"

12 
	~<°dlib.h
>

14 
	gbrk_siz
 = 0;

15 
	t_hìp_t
;

16 
	#ROUNDUP
(
s
Ë(((s)+(
_hìp_t
)-1)&~((_hìp_t)-1))

	)

17 
_hìp_t
 
	g_hìp
[
ROUNDUP
(
c⁄figTOTAL_HEAP_SIZE
)/(_heep_t)];

18 
	#_hìp_size
 
	`ROUNDUP
(
c⁄figTOTAL_HEAP_SIZE
)

	)

20 *
	$sbrk
(
size
)

22 i‡(
brk_siz
 + 
size
 > 
_hìp_size
 || brk_siz + size < 0)

25 
brk_siz
 +
size
;

26 –(*)
_hìp
 + 
brk_siz
 - 
size
);

27 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB96340/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

77 
p‹tSTACK_TYPE
 
xGë_DPR_ADB_b™k
( );

82 
p‹tSTACK_TYPE
 
xGë_DTB_PCB_b™k
( );

88 
¥vSëupRLT0I¡îru±
( );

96 
	ttskTCB
;

97 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

111 #if––
c⁄figMEMMODEL
 =
p‹tSMALL
 ) || ( c⁄figMEMMODEL =
p‹tMEDIUM
 ) )

113 
	#p‹tSAVE_CONTEXT
() \

114 { 
	`__asm
(" POPW A "); \

115 
	`__asm
(" AND CCR,#H'DF "); \

116 
	`__asm
(" PUSHW A "); \

117 
	`__asm
(" OR CCR,#H'20 "); \

118 
	`__asm
(" POPW A "); \

119 
	`__asm
(" AND CCR,#H'DF "); \

120 
	`__asm
(" PUSHW A "); \

121 
	`__asm
(" OR CCR,#H'20 "); \

122 
	`__asm
(" POPW A "); \

123 
	`__asm
(" AND CCR,#H'DF "); \

124 
	`__asm
(" PUSHW A "); \

125 
	`__asm
(" OR CCR,#H'20 "); \

126 
	`__asm
(" POPW A "); \

127 
	`__asm
(" AND CCR,#H'DF "); \

128 
	`__asm
(" PUSHW A "); \

129 
	`__asm
(" OR CCR,#H'20 "); \

130 
	`__asm
(" POPW A "); \

131 
	`__asm
(" AND CCR,#H'DF "); \

132 
	`__asm
(" PUSHW A "); \

133 
	`__asm
(" OR CCR,#H'20 "); \

134 
	`__asm
(" POPW A "); \

135 
	`__asm
(" AND CCR,#H'DF "); \

136 
	`__asm
(" PUSHW A "); \

137 
	`__asm
(" PUSHW (RW0,RW1,RW2,RW3,RW4,RW5,RW6,RW7) "); \

138 
	`__asm
(" MOVW A, _pxCurrentTCB "); \

139 
	`__asm
(" MOVW A, SP "); \

140 
	`__asm
(" SWAPW "); \

141 
	`__asm
(" MOVW @AL, AH "); \

142 
	`__asm
(" OR CCR,#H'20 "); \

143 }

	)

155 
	#p‹tRESTORE_CONTEXT
() \

156 { 
	`__asm
(" MOVW A, _pxCurrentTCB "); \

157 
	`__asm
(" MOVW A, @A "); \

158 
	`__asm
(" AND CCR,#H'DF "); \

159 
	`__asm
(" MOVW SP, A "); \

160 
	`__asm
(" POPW (RW0,RW1,RW2,RW3,RW4,RW5,RW6,RW7) "); \

161 
	`__asm
(" POPW A "); \

162 
	`__asm
(" OR CCR,#H'20 "); \

163 
	`__asm
(" PUSHW A "); \

164 
	`__asm
(" AND CCR,#H'DF "); \

165 
	`__asm
(" POPW A "); \

166 
	`__asm
(" OR CCR,#H'20 "); \

167 
	`__asm
(" PUSHW A "); \

168 
	`__asm
(" AND CCR,#H'DF "); \

169 
	`__asm
(" POPW A "); \

170 
	`__asm
(" OR CCR,#H'20 "); \

171 
	`__asm
(" PUSHW A "); \

172 
	`__asm
(" AND CCR,#H'DF "); \

173 
	`__asm
(" POPW A "); \

174 
	`__asm
(" OR CCR,#H'20 "); \

175 
	`__asm
(" PUSHW A "); \

176 
	`__asm
(" AND CCR,#H'DF "); \

177 
	`__asm
(" POPW A "); \

178 
	`__asm
(" OR CCR,#H'20 "); \

179 
	`__asm
(" PUSHW A "); \

180 
	`__asm
(" AND CCR,#H'DF "); \

181 
	`__asm
(" POPW A "); \

182 
	`__asm
(" OR CCR,#H'20 "); \

183 
	`__asm
(" PUSHW A "); \

184 }

	)

186 #ñif––
c⁄figMEMMODEL
 =
p‹tCOMPACT
 ) || ( c⁄figMEMMODEL =
p‹tLARGE
 ) )

188 
	#p‹tSAVE_CONTEXT
() \

189 { 
	`__asm
(" POPW A "); \

190 
	`__asm
(" AND CCR,#H'DF "); \

191 
	`__asm
(" PUSHW A "); \

192 
	`__asm
(" OR CCR,#H'20 "); \

193 
	`__asm
(" POPW A "); \

194 
	`__asm
(" AND CCR,#H'DF "); \

195 
	`__asm
(" PUSHW A "); \

196 
	`__asm
(" OR CCR,#H'20 "); \

197 
	`__asm
(" POPW A "); \

198 
	`__asm
(" AND CCR,#H'DF "); \

199 
	`__asm
(" PUSHW A "); \

200 
	`__asm
(" OR CCR,#H'20 "); \

201 
	`__asm
(" POPW A "); \

202 
	`__asm
(" AND CCR,#H'DF "); \

203 
	`__asm
(" PUSHW A "); \

204 
	`__asm
(" OR CCR,#H'20 "); \

205 
	`__asm
(" POPW A "); \

206 
	`__asm
(" AND CCR,#H'DF "); \

207 
	`__asm
(" PUSHW A "); \

208 
	`__asm
(" OR CCR,#H'20 "); \

209 
	`__asm
(" POPW A "); \

210 
	`__asm
(" AND CCR,#H'DF "); \

211 
	`__asm
(" PUSHW A "); \

212 
	`__asm
(" PUSHW (RW0,RW1,RW2,RW3,RW4,RW5,RW6,RW7) "); \

213 
	`__asm
(" MOVL A, _pxCurrentTCB "); \

214 
	`__asm
(" MOVL RL2, A "); \

215 
	`__asm
(" MOVW A, SP "); \

216 
	`__asm
(" MOVW @RL2+0, A "); \

217 
	`__asm
(" MOV A, USB "); \

218 
	`__asm
(" MOV @RL2+2, A "); \

219 }

	)

221 
	#p‹tRESTORE_CONTEXT
() \

222 { 
	`__asm
(" MOVL A, _pxCurrentTCB "); \

223 
	`__asm
(" MOVL RL2, A "); \

224 
	`__asm
(" MOVW A, @RL2+0 "); \

225 
	`__asm
(" AND CCR,#H'DF "); \

226 
	`__asm
(" MOVW SP, A "); \

227 
	`__asm
(" MOV A, @RL2+2 "); \

228 
	`__asm
(" MOV USB, A "); \

229 
	`__asm
(" POPW (RW0,RW1,RW2,RW3,RW4,RW5,RW6,RW7) "); \

230 
	`__asm
(" POPW A "); \

231 
	`__asm
(" OR CCR,#H'20 "); \

232 
	`__asm
(" PUSHW A "); \

233 
	`__asm
(" AND CCR,#H'DF "); \

234 
	`__asm
(" POPW A "); \

235 
	`__asm
(" OR CCR,#H'20 "); \

236 
	`__asm
(" PUSHW A "); \

237 
	`__asm
(" AND CCR,#H'DF "); \

238 
	`__asm
(" POPW A "); \

239 
	`__asm
(" OR CCR,#H'20 "); \

240 
	`__asm
(" PUSHW A "); \

241 
	`__asm
(" AND CCR,#H'DF "); \

242 
	`__asm
(" POPW A "); \

243 
	`__asm
(" OR CCR,#H'20 "); \

244 
	`__asm
(" PUSHW A "); \

245 
	`__asm
(" AND CCR,#H'DF "); \

246 
	`__asm
(" POPW A "); \

247 
	`__asm
(" OR CCR,#H'20 "); \

248 
	`__asm
(" PUSHW A "); \

249 
	`__asm
(" AND CCR,#H'DF "); \

250 
	`__asm
(" POPW A "); \

251 
	`__asm
(" OR CCR,#H'20 "); \

252 
	`__asm
(" PUSHW A "); \

253 }

	)

262 #¥agm®
asm


264 .
GLOBAL
 
	g_xGë_DPR_ADB_b™k


265 .
GLOBAL
 
	g_xGë_DTB_PCB_b™k


266 .
SECTION
 
	gCODE
, CODE, 
	gALIGN
=1

268 
_xGë_DPR_ADB_b™k
:

270 
MOV
 
A
, 
DPR


271 
SWAP


272 
MOV
 
	gA
, 
ADB


273 
ORW
 
	gA


274 #i‡
c⁄figMEMMODEL
 =
p‹tMEDIUM
 || c⁄figMEMMODEL =
p‹tLARGE


275 
	gRETP


276 #ñi‡
c⁄figMEMMODEL
 =
p‹tSMALL
 || c⁄figMEMMODEL =
p‹tCOMPACT


277 
	gRET


281 
	g_xGë_DTB_PCB_b™k
:

283 
MOV
 
A
, 
DTB


284 
SWAP


285 
MOV
 
	gA
, 
PCB


286 
ORW
 
	gA


287 #i‡
c⁄figMEMMODEL
 =
p‹tMEDIUM
 || c⁄figMEMMODEL =
p‹tLARGE


288 
	gRETP


289 #ñi‡
c⁄figMEMMODEL
 =
p‹tSMALL
 || c⁄figMEMMODEL =
p‹tCOMPACT


290 
	gRET


293 #¥agm®
ídasm


302 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

306 *
pxT›OfSèck
 = 0x1111;

307 
pxT›OfSèck
--;

308 *
pxT›OfSèck
 = 0x2222;

309 
pxT›OfSèck
--;

310 *
pxT›OfSèck
 = 0x3333;

311 
pxT›OfSèck
--;

318 #if––
c⁄figMEMMODEL
 =
p‹tCOMPACT
 ) || ( c⁄figMEMMODEL =
p‹tLARGE
 ) )

320 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( ( Ë–
pvP¨amëîs
 ) >> 16 );

321 
pxT›OfSèck
--;

325 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
pvP¨amëîs
 );

326 
pxT›OfSèck
--;

331 #if––
c⁄figMEMMODEL
 =
p‹tMEDIUM
 ) || ( c⁄figMEMMODEL =
p‹tLARGE
 ) )

333 *
pxT›OfSèck
 = ( 
	`xGë_DTB_PCB_b™k
(Ë& 0xff00 ) | ( ( ( Ë–
pxCode
 ) >> 16 ) & 0xff );

334 
pxT›OfSèck
--;

340 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
pxCode
 );

341 
pxT›OfSèck
--;

344 *
pxT›OfSèck
 = 0xE0C0;

345 
pxT›OfSèck
--;

348 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) ( 
pxCode
 );

349 
pxT›OfSèck
--;

352 #i‡
c⁄figMEMMODEL
 =
p‹tSMALL
 || c⁄figMEMMODEL =
p‹tCOMPACT


354 *
pxT›OfSèck
 = 
	`xGë_DTB_PCB_b™k
();

355 
pxT›OfSèck
--;

361 #if––
c⁄figMEMMODEL
 =
p‹tMEDIUM
 ) || ( c⁄figMEMMODEL =
p‹tLARGE
 ) )

363 *
pxT›OfSèck
 = ( 
	`xGë_DTB_PCB_b™k
(Ë& 0xff00 ) | ( ( ( Ë–
pxCode
 ) >> 16 ) & 0xff );

364 
pxT›OfSèck
--;

369 *
pxT›OfSèck
 = 
	`xGë_DPR_ADB_b™k
();

370 
pxT›OfSèck
--;

373 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x9999;

374 
pxT›OfSèck
--;

377 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xAAAA;

378 
pxT›OfSèck
--;

381 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x7777;

382 
pxT›OfSèck
--;

383 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x6666;

384 
pxT›OfSèck
--;

385 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x5555;

386 
pxT›OfSèck
--;

387 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x4444;

388 
pxT›OfSèck
--;

389 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x3333;

390 
pxT›OfSèck
--;

391 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x2222;

392 
pxT›OfSèck
--;

393 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x1111;

394 
pxT›OfSèck
--;

395 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x8888;

397  
pxT›OfSèck
;

398 
	}
}

401 
	$¥vSëupRLT0I¡îru±
( )

404 c⁄° 
usRñﬂdVÆue
 = ( Ë–––
c⁄figCLKP1_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) / 16UL ) - 1UL );

407 
TMRLR0
 = 
usRñﬂdVÆue
;

410 
TMCSR0
 = 0x041B;

411 
	}
}

414 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

417 
	`¥vSëupRLT0I¡îru±
();

420 
	`p‹tRESTORE_CONTEXT
();

424 
	`__asm
("Ñeti ");

428  
pdTRUE
;

429 
	}
}

432 
	$vP‹tEndScheduÀr
( )

436 
	}
}

445 #i‡
c⁄figUSE_PREEMPTION
 == 1

453 
__noßvîeg
 
__öãºu±
 
	$¥vRLT0_TICKISR
( )

456 
	`__DI
();

459 
	`p‹tSAVE_CONTEXT
();

462 
	`__EI
();

465 
TMCSR0_UF
 = 0;

469 
	`vTaskIn¸emítTick
();

470 
	`vTaskSwôchC⁄ãxt
();

473 
	`__DI
();

476 
	`p‹tRESTORE_CONTEXT
();

479 
	`__EI
();

480 
	}
}

489 
__öãºu±
 
	$¥vRLT0_TICKISR
( )

492 
TMCSR0_UF
 = 0;

494 
	`vTaskIn¸emítTick
();

495 
	}
}

506 
__noßvîeg
 
__öãºu±
 
	$vP‹tYõld
( )

509 
	`p‹tSAVE_CONTEXT
();

512 
	`vTaskSwôchC⁄ãxt
();

515 
	`p‹tRESTORE_CONTEXT
();

516 
	}
}

519 
__noßvîeg
 
__öãºu±
 
	$vP‹tYõldDñayed
( )

522 
	`__DI
();

525 
	`p‹tSAVE_CONTEXT
();

528 
	`__EI
();

531 
	`__asm
 (" CLRB 03A4H:0 ");

534 
	`vTaskSwôchC⁄ãxt
();

537 
	`__DI
();

540 
	`p‹tRESTORE_CONTEXT
();

543 
	`__EI
();

544 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB96340/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

72 
	~<°ddef.h
>

76 
	#p‹tSMALL
 0

	)

77 
	#p‹tMEDIUM
 1

	)

78 
	#p‹tCOMPACT
 2

	)

79 
	#p‹tLARGE
 3

	)

93 
	#p‹tCHAR
 

	)

94 
	#p‹tFLOAT
 

	)

95 
	#p‹tDOUBLE
 

	)

96 
	#p‹tLONG
 

	)

97 
	#p‹tSHORT
 

	)

98 
	#p‹tSTACK_TYPE
 
p‹tSHORT


	)

99 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

103 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

105 
	tp‹tLONG
 
	tp‹tTickTy≥
;

106 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

111 #i‡
c⁄figKERNEL_INTERRUPT_PRIORITY
 != 6

112 #îr‹ 
c⁄figKERNEL_INTERRUPT_PRIORITY
 (
£t
 
ö
 
FªeRTOSC⁄fig
.
h
Ë
mu°
 
m©ch
 
the
 
ILM
 
vÆue
 së i¿thê
fﬁlowög
 
löe
 - #06
H
 
beög
Åhe .

114 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
(" MOV ILM, #06h ")

	)

115 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
(" MOV ILM, #07h ")

	)

117 
	#p‹tENTER_CRITICAL
() \

118 { 
	`__asm
(" PUSHW PS "); \

119 
	`p‹tDISABLE_INTERRUPTS
(); \

120 }

	)

122 
	#p‹tEXIT_CRITICAL
() \

123 { 
	`__asm
(" POPW PS "); \

124 }

	)

129 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

130 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

131 
	#p‹tBYTE_ALIGNMENT
 2

	)

132 
	#p‹tNOP
(Ë
	`__asm
–" NOP " );

	)

136 
	#p‹tYIELD
(Ë
	`__asm
–" INT #122 " );

	)

139 
	#p‹tYIELD_FROM_ISR
(Ë
	`__asm
–" SETB 03A4H:0 " );

	)

143 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

144 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

146 
	#p‹tMINIMAL_STACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Tasking/ARM_CM4F/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê* ) 0xe000e010 )

	)

77 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê* ) 0xe000e014 )

	)

78 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê* ) 0xe000ed04 )

	)

79 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê* ) 0xe000ed20 )

	)

80 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

81 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

82 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

83 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

84 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16 )

	)

85 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( Ë
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24 )

	)

88 
	#p‹tFPCCR
 ( ( vﬁ©ûê* ) 0xe000ef34 )

	)

89 
	#p‹tASPEN_AND_LSPEN_BITS
 ( 0x3UL << 30UL )

	)

92 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

93 
	#p‹tINITIAL_EXEC_RETURN
 ( 0xfffffffd )

	)

97 c⁄° 
	gulKî√lPri‹ôy
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

101 
	gulCrôiˇlNe°ög
 = 0xaaaaaaaaUL;

106 
¥vSëupTimîI¡îru±
( );

111 
SysTick_H™dÀr
( );

116 
vP‹tE«bÀVFP
( );

117 
vP‹tSèπFú°Task
( );

121 c⁄° 
	gulMaxSysˇŒI¡îru±Pri‹ôyC⁄°
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
;

128 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

135 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = 0;

144 
pxT›OfSèck
 -= 5;

145 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = 
p‹tINITIAL_EXEC_RETURN
;

152 
pxT›OfSèck
 -= 8;

154  
pxT›OfSèck
;

155 
	}
}

161 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

164 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

165 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

169 
	`¥vSëupTimîI¡îru±
();

172 
ulCrôiˇlNe°ög
 = 0;

175 
	`vP‹tE«bÀVFP
();

178 *–
p‹tFPCCR
 ) |
p‹tASPEN_AND_LSPEN_BITS
;

181 
	`vP‹tSèπFú°Task
();

185 
	}
}

188 
	$vP‹tEndScheduÀr
( )

192 
	}
}

195 
	$vP‹tYõldFromISR
( )

198 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

199 
	}
}

202 
	$vP‹tE¡îCrôiˇl
( )

204 
	`p‹tDISABLE_INTERRUPTS
();

205 
ulCrôiˇlNe°ög
++;

206 
	}
}

209 
	$vP‹tExôCrôiˇl
( )

211 
ulCrôiˇlNe°ög
--;

212 if–
ulCrôiˇlNe°ög
 == 0 )

214 
	`p‹tENABLE_INTERRUPTS
();

216 
	}
}

219 
	$SysTick_H™dÀr
( )

221 
ulDummy
;

224 #i‡
c⁄figUSE_PREEMPTION
 == 1

225 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

228 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

230 
	`vTaskIn¸emítTick
();

232 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

233 
	}
}

240 
	$¥vSëupTimîI¡îru±
( )

243 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

244 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

245 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Tasking/ARM_CM4F/portmacro.h

68 #i‚de‡
PORTMACRO_H


69 
	#PORTMACRO_H


	)

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
vP‹tYõldFromISR
( );

113 
	#p‹tYIELD
(Ë
	`vP‹tYõldFromISR
()

	)

115 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vP‹tYõldFromISR
()

	)

125 
	#p‹tSET_INTERRUPT_MASK
(Ë
	`__£t_BASEPRI
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

131 
	#p‹tCLEAR_INTERRUPT_MASK
(Ë
	`__£t_BASEPRI
–0 )

	)

133 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`p‹tSET_INTERRUPT_MASK
()

	)

134 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`p‹tCLEAR_INTERRUPT_MASK
();()
	)
x

137 
vP‹tE¡îCrôiˇl
( );

138 
vP‹tExôCrôiˇl
( );

140 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`p‹tSET_INTERRUPT_MASK
()

	)

141 
	#p‹tENABLE_INTERRUPTS
(Ë
	`p‹tCLEAR_INTERRUPT_MASK
()

	)

142 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

143 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

147 
	#p‹tALIGNMENT_ASSERT_pxCuºítTCB
 ( )

	)

152 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

153 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

155 
	#p‹tNOP
()

	)

157 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/WizC/PIC18/Drivers/Tick/Tick.c

78 
	~<FªeRTOS.h
>

79 
	~<èsk.h
>

82 
	#p‹tBIT_SET
 (1)

	)

83 
	#p‹tBIT_CLEAR
 (0)

	)

91 
	#p‹tTIMER_COMPARE_BASE
 ((
APROCFREQ
/4)/
c⁄figTICK_RATE_HZ
)

	)

93 #i‡
p‹tTIMER_COMPARE_BASE
 < 0x10000

94 
	#p‹tTIMER_COMPARE_VALUE
 (
p‹tTIMER_COMPARE_BASE
)

	)

95 
	#p‹tTIMER_COMPARE_PS1
 (
p‹tBIT_CLEAR
)

	)

96 
	#p‹tTIMER_COMPARE_PS0
 (
p‹tBIT_CLEAR
)

	)

97 #ñi‡
p‹tTIMER_COMPARE_BASE
 < 0x20000

98 
	#p‹tTIMER_COMPARE_VALUE
 (
p‹tTIMER_COMPARE_BASE
 / 2)

	)

99 
	#p‹tTIMER_COMPARE_PS1
 (
p‹tBIT_CLEAR
)

	)

100 
	#p‹tTIMER_COMPARE_PS0
 (
p‹tBIT_SET
)

	)

101 #ñi‡
p‹tTIMER_COMPARE_BASE
 < 0x40000

102 
	#p‹tTIMER_COMPARE_VALUE
 (
p‹tTIMER_COMPARE_BASE
 / 4)

	)

103 
	#p‹tTIMER_COMPARE_PS1
 (
p‹tBIT_SET
)

	)

104 
	#p‹tTIMER_COMPARE_PS0
 (
p‹tBIT_CLEAR
)

	)

105 #ñi‡
p‹tTIMER_COMPARE_BASE
 < 0x80000

106 
	#p‹tTIMER_COMPARE_VALUE
 (
p‹tTIMER_COMPARE_BASE
 / 8)

	)

107 
	#p‹tTIMER_COMPARE_PS1
 (
p‹tBIT_SET
)

	)

108 
	#p‹tTIMER_COMPARE_PS0
 (
p‹tBIT_SET
)

	)

118 
	$p‹tSëupTick
( )

132 
CCPR1H
 = ( Ë––
p‹tTIMER_COMPARE_VALUE
 >> 8 ) & 0xff );

133 
CCPR1L
 = ( Ë–
p‹tTIMER_COMPARE_VALUE
 & 0xff );

138 
bCCP1M3
 = 
p‹tBIT_SET
;

139 
bCCP1M2
 = 
p‹tBIT_CLEAR
;

140 
bCCP1M1
 = 
p‹tBIT_SET
;

141 
bCCP1M0
 = 
p‹tBIT_SET
;

146 
bCCP1IE
 = 
p‹tBIT_SET
;

152 
bIPEN
 = 
p‹tBIT_CLEAR
;

153 
bPEIE
 = 
p‹tBIT_SET
;

163 
TMR1H
 = ( ) 0x00;

164 
TMR1L
 = ( ) 0x00;

169 
bRD16
 = 
p‹tBIT_SET
;

170 
bT1CKPS1
 = 
p‹tTIMER_COMPARE_PS1
;

171 
bT1CKPS0
 = 
p‹tTIMER_COMPARE_PS0
;

172 
bT1OSCEN
 = 
p‹tBIT_SET
;

173 
bT1SYNC
 = 
p‹tBIT_SET
;

174 
bTMR1CS
 = 
p‹tBIT_CLEAR
;

176 
bTMR1ON
 = 
p‹tBIT_SET
;

177 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/WizC/PIC18/Drivers/Tick/isrTick.c

87 #i‚de‡
_FREERTOS_DRIVERS_TICK_ISRTICK_C


88 
	#_FREERTOS_DRIVERS_TICK_ISRTICK_C


	)

94 if–
	gbCCP1IF
 && 
	gbCCP1IE
 )

99 
	gbCCP1IF
 = 0;

104 
vTaskIn¸emítTick
();

106 #i‡
c⁄figUSE_PREEMPTION
 == 1

112 
	guxSwôchReque°ed
 = 
pdTRUE
;

118 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/Tick.c"

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/WizC/PIC18/addFreeRTOS.h

80 #i‚de‡
WIZC_FREERTOS_H


81 
	#WIZC_FREERTOS_H


	)

83 #¥agm®
nohóp


84 #¥agm®
wiz˝p
 
ex∑nd∆
 
⁄


85 #¥agm®
wiz˝p
 
£¨ch∑th
 "$__PATHNAME__/libFreeRTOS/Include/"

86 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/libFreeRTOS/Modules/Croutine.c"

87 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/libFreeRTOS/Modules/Tasks.c"

88 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/libFreeRTOS/Modules/Queue.c"

89 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/libFreeRTOS/Modules/List.c"

90 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/libFreeRTOS/Modules/Port.c"

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/WizC/PIC18/port.c

83 
	~<FªeRTOS.h
>

84 
	~<èsk.h
>

86 
	~<mÆloc.h
>

96 
	ttskTCB
;

97 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

118 #i‡
_ROMSIZE
 > 0x8000

119 
	#p‹tSTACK_FSR_BYTES
 ( 15 )

	)

120 
	#p‹tSTACK_CALLRETURN_ENTRY_SIZE
 ( 3 )

	)

122 
	#p‹tSTACK_FSR_BYTES
 ( 13 )

	)

123 
	#p‹tSTACK_CALLRETURN_ENTRY_SIZE
 ( 2 )

	)

126 
	#p‹tSTACK_MINIMAL_CALLRETURN_DEPTH
 ( 10 )

	)

127 
	#p‹tSTACK_OTHER_BYTES
 ( 20 )

	)

129 
	gusCÆcMöSèckSize
 = 0;

139 
	gucCrôiˇlNe°ög
 = 0x7F;

147 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

149 
ucS¸©ch
;

154 
	`_Pøgma
("asm")

155 
movlw
 
OVERHEADPAGE0
-
LOCOPTSIZE
+
MAXLOCOPTSIZE


156 
movwf
 
PRODL
,
ACCESS
 ; PRODL 
is
 
u£d
 
as
 
ãmp
 

157 
	`_Pøgma
("asmend")

158 
ucS¸©ch
 = 
PRODL
;

177 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) ( (–Ë
pvP¨amëîs
 >> 8) & 0x00ff );

178 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) ( ( Ë
pvP¨amëîs
 & 0x00ff );

183 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x11;

184 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x22;

185 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x33;

186 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x44;

187 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x55;

188 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x66;

189 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x77;

190 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x88;

191 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x99;

192 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0xAA;

193 #i‡
_ROMSIZE
 > 0x8000

194 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0x00;

196 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0xCC;

197 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0xDD;

198 #i‡
_ROMSIZE
 > 0x8000

199 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0xEE;

201 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0xFF;

206 
ucS¸©ch
-- > 0)

208 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0;

217 #i‡
_ROMSIZE
 > 0x8000

218 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 0;

220 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) ( ( ( Ë
pxCode
 >> 8 ) & 0x00ff );

221 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) ( ( Ë
pxCode
 & 0x00ff );

227 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 1;

236 *
pxT›OfSèck
-- = ( 
p‹tSTACK_TYPE
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

238  
pxT›OfSèck
;

239 
	}
}

242 
	$usP‹tCALCULATE_MINIMAL_STACK_SIZE
( )

247 
	`_Pøgma
("asm")

248 
movlw
 
OVERHEADPAGE0
-
LOCOPTSIZE
+
MAXLOCOPTSIZE


249 
movlb
 
usCÆcMöSèckSize
>>8

250 
movwf
 
usCÆcMöSèckSize
,
BANKED


251 
	`_Pøgma
("asmend")

256 
usCÆcMöSèckSize
 +–
p‹tSTACK_FSR_BYTES
 )

257 + ( 
p‹tSTACK_MINIMAL_CALLRETURN_DEPTH
 * 
p‹tSTACK_CALLRETURN_ENTRY_SIZE
 )

258 + ( 
p‹tSTACK_OTHER_BYTES
 );

260 (
usCÆcMöSèckSize
);

261 
	}
}

265 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

267 
	`p‹tSëupTick
( );

272 
	`p‹tSëupTick
();

277 
	`p‹tRESTORE_CONTEXT
();

282  
pdTRUE
;

283 
	}
}

287 
	$vP‹tEndScheduÀr
( )

294 
	`_Pøgma
(
asmlöe
 
ª£t
);

295 
	}
}

304 
	$vP‹tYõld
( )

309 
	`p‹tSAVE_CONTEXT
–
p‹tINTERRUPTS_UNCHANGED
 );

314 
	`vTaskSwôchC⁄ãxt
();

319 
	`p‹tRESTORE_CONTEXT
();

320 
	}
}

324 *
	$pvP‹tMÆloc
–
usW™ãdSize
 )

326 *
pvRëu∫
;

328 
	`vTaskSu•ídAŒ
();

330 
pvRëu∫
 = 
	`mÆloc
––
mÆloc_t
 ) 
usW™ãdSize
 );

332 
	`xTaskResumeAŒ
();

334  
pvRëu∫
;

335 
	}
}

337 
	$vP‹tFªe
–*
pv
 )

339 if–
pv
 )

341 
	`vTaskSu•ídAŒ
();

343 
	`‰ì
–
pv
 );

345 
	`xTaskResumeAŒ
();

347 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/WizC/PIC18/portmacro.h

72 #i‚de‡
PORTMACRO_H


73 
	#PORTMACRO_H


	)

75 #i‡!
deföed
(
_SERIES
) || _SERIES != 18

79 #i‡!
deföed
(
QUICKCALL
) || QUICKCALL != 1

83 
	~<°ddef.h
>

84 
	~<pic.h
>

86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 
p‹tFLOAT


	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 

	)

92 
	#p‹tBASE_TYPE
 

	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) ( 0xFFFF )

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) ( 0xFFFFFFFF )

	)

102 
	#p‹tBYTE_ALIGNMENT
 1

	)

110 
	#p‹tINTERRUPTS_FORCED
 (0x01)

	)

116 
	#p‹tINTERRUPTS_UNCHANGED
 (0x00)

	)

121 
	#p‹tINTERRUPTS_INITIAL_STATE
 (
p‹tINTERRUPTS_FORCED
)

	)

126 
	#p‹tDISABLE_INTERRUPTS
() \

129 
bGIE
=0; \

130 } 
bGIE
)

131 

	)

132 
	#p‹tENABLE_INTERRUPTS
() \

135 
bGIE
=1; \

136 } 0)

	)

143 
p‹tCHAR
 
ucCrôiˇlNe°ög
;

145 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
p‹tCHAR
 ) 0 )

	)

147 
	#p‹tENTER_CRITICAL
() \

150 
	`p‹tDISABLE_INTERRUPTS
(); \

158 
ucCrôiˇlNe°ög
++; \

159 } 0)

	)

161 
	#p‹tEXIT_CRITICAL
() \

164 if(
ucCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_SECTION_NESTING
) \

170 
ucCrôiˇlNe°ög
--; \

177 if–
ucCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

179 
	`p‹tENABLE_INTERRUPTS
(); \

181 } 0)

	)

190 
p‹tSHORT
 
usP‹tCALCULATE_MINIMAL_STACK_SIZE
( );

191 
p‹tSHORT
 
usCÆcMöSèckSize
;

193 
	#p‹tMINIMAL_STACK_SIZE
 \

194 ((
usCÆcMöSèckSize
 == 0) \

195 ? 
	`usP‹tCALCULATE_MINIMAL_STACK_SIZE
() \

196 : 
usCÆcMöSèckSize
 )

	)

201 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

237 
	#p‹tSAVE_CONTEXT
–
ucI¡îru±F‹˚d
 ) \

240 
	`p‹tDISABLE_INTERRUPTS
(); \

242 
	`_Pøgma
("asm") \

244 ; 
Push
 
the
 
ªÀv™t
 
SFR
'†⁄tÿthêèsk'
s
 
°ack
 \

246 
movff
 
STATUS
,
POSTDEC2
 \

247 
movff
 
WREG
,
POSTDEC2
 \

248 
movff
 
BSR
,
POSTDEC2
 \

249 
movff
 
PRODH
,
POSTDEC2
 \

250 
movff
 
PRODL
,
POSTDEC2
 \

251 
movff
 
FSR0H
,
POSTDEC2
 \

252 
movff
 
FSR0L
,
POSTDEC2
 \

253 
movff
 
FSR1H
,
POSTDEC2
 \

254 
movff
 
FSR1L
,
POSTDEC2
 \

255 
movff
 
TABLAT
,
POSTDEC2
 \

256 
__ROMSIZE
 > 0x8000 \

257 
movff
 
TBLPTRU
,
POSTDEC2
 \

258 
ídif
 \

259 
movff
 
TBLPTRH
,
POSTDEC2
 \

260 
movff
 
TBLPTRL
,
POSTDEC2
 \

261 
__ROMSIZE
 > 0x8000 \

262 
movff
 
PCLATU
,
POSTDEC2
 \

263 
ídif
 \

264 
movff
 
PCLATH
,
POSTDEC2
 \

266 ; 
St‹e
 
the
 
compûî
-
s¸©ch
-
¨ó
 
as
 
des¸ibed
 
above
. \

268 
movlw
 
OVERHEADPAGE0
-
LOCOPTSIZE
+
MAXLOCOPTSIZE
 \

269 
˛rf
 
FSR0L
,
ACCESS
 \

270 
˛rf
 
FSR0H
,
ACCESS
 \

271 
_πos_S1
: \

272 
movff
 
POSTINC0
,
POSTDEC2
 \

273 
decfsz
 
WREG
,
W
,
ACCESS
 \

274 
SMARTJUMP
 
_πos_S1
 \

276 ; 
Save
 
the
 
pic
 
ˇŒ
/-
°ack
 
bñ⁄gög
 
to
Åhe \

277 ; 
cuºít
 
èsk
 
by
 
c›yög
 
ô
 
to
 
the
Åask'†so·w¨e- \
; sèck. Wêßvêthêh¨dw¨ê°ackÖoöã∏(which \
; i†thênumbî o‡addªs£†⁄Åhê°ackËöÅhe \
; W-ªgi°î fú° beˇu£ wê√ed iàœã∏™d it \
; i†modifõd i¿thêßve-lo› byÉxecutögÖ›'
s
. \

282 ; 
A·î
 
the
 
lo›
Åhê
W
-
is
 
°‹ed
 
⁄
Åhe \

283 ; 
°ack
, 
too
. \

285 
movf
 
STKPTR
,
W
,
ACCESS
 \

286 
bz
 
_πos_s3
 \

287 
_πos_S2
: \

288 
__ROMSIZE
 > 0x8000 \

289 
movff
 
TOSU
,
POSTDEC2
 \

290 
ídif
 \

291 
movff
 
TOSH
,
POSTDEC2
 \

292 
movff
 
TOSL
,
POSTDEC2
 \

293 
p›
 \

294 
t°fsz
 
STKPTR
,
ACCESS
 \

295 
SMARTJUMP
 
_πos_S2
 \

296 
_πos_s3
: \

297 
movwf
 
POSTDEC2
,
ACCESS
 \

299 ; 
Next
 
the
 
vÆue
 
ucCrôiˇlNe°ög
 
u£d
 
by
Åhe \

300 ; 
èsk
 
is
 
°‹ed
 
⁄
 
the
 
°ack
. 
Whí
 \

301 ; (
ucI¡îru±F‹˚d
 =
p‹tINTERRUPTS_FORCED
), 
we
 
ßve
 \

302 ; 
ô
 
as
 0 (
p‹tNO_CRITICAL_SECTION_NESTING
). \

304 
ucI¡îru±F‹˚d
 =
p‹tINTERRUPTS_FORCED
 \

305 
˛rf
 
POSTDEC2
,
ACCESS
 \

307 
movff
 
ucCrôiˇlNe°ög
,
POSTDEC2
 \

308 
ídif
 \

310 ; 
Save
 
the
 
√w
 
t›
 
of
Åhê
so·w¨e
 
°ack
 
ö
Åhê
TCB
. \

312 
movff
 
pxCuºítTCB
,
FSR0L
 \

313 
movff
 
pxCuºítTCB
+1,
FSR0H
 \

314 
movff
 
FSR2L
,
POSTINC0
 \

315 
movff
 
FSR2H
,
POSTINC0
 \

316 
	`_Pøgma
("asmend") \

317 } 0)

	)

324 
	#p‹tRESTORE_CONTEXT
() \

327 
	`_Pøgma
("asm") \

329 ; 
Së
 
FSR0
 
to
 
poöt
Åÿ
pxCuºítTCB
->
pxT›OfSèck
. \

331 
movff
 
pxCuºítTCB
,
FSR0L
 \

332 
movff
 
pxCuºítTCB
+1,
FSR0H
 \

334 ; 
De
-
ª„ªn˚
 
FSR0
 
to
 
£t
 
the
 
addªss
 
ô
 
hﬁds
 
öto
 \

335 ; 
	`FSR2
 (
i
.
e
. *–
pxCuºítTCB
->
pxT›OfSèck
 ) ). 
FSR2
 \

336 ; 
is
 
u£d
 
by
 
wizC
 
as
 
°ackpoöãr
. \

338 
movff
 
POSTINC0
,
FSR2L
 \

339 
movff
 
POSTINC0
,
FSR2H
 \

341 ; 
Next
, 
the
 
vÆue
 
ucCrôiˇlNe°ög
 
u£d
 
by
Åhe \

342 ; 
èsk
 
is
 
ªåõved
 
‰om
 
the
 
°ack
. \

344 
movff
 
PREINC2
,
ucCrôiˇlNe°ög
 \

346 ; 
Rebuûd
 
the
 
pic
 
ˇŒ
/-
°ack
. 
The
 
numbî
 
of
 \

347 ;  
addªs£s
 
is
 
the
 
√xt
 
ôem
 
⁄
Åhê
èsk
 
°ack
. \

348 ; 
Save
 
this
 
numbî
 
ö
 
PRODL
. 
Thí
 
„tch
 
the
 
addªs£s
 \

349 ; 
™d
 
°‹e
 
them
 
⁄
 
the
 
h¨dw¨e°ack
. \

350 ; 
The
 
d©ashìts
 
ßy
 
we
 
ˇn
'àu£ movf‡hîe... \
; \
 PREINC2,PRODL // U£ PRODLá†ãm¥egi°î \
 STKPTR,ACCESS \
_πos_R1: \
 \
 PREINC2,W,ACCESS \
 TOSL,ACCESS \
 PREINC2,W,ACCESS \
 TOSH,ACCESS \
 __ROMSIZE > 0x8000 \
 PREINC2,W,ACCESS \
 TOSU,ACCESS \
 \
 TOSU,ACCESS \
 \
 PRODL,F,ACCESS \
 _πos_R1 \
; \
; Re°‹êthêcompûî'
s
 
w‹kög
 
°‹age
 
¨ó
 
to
 
∑ge
 0 \

371 
movlw
 
OVERHEADPAGE0
-
LOCOPTSIZE
+
MAXLOCOPTSIZE
 \

372 
movwf
 
FSR0L
,
ACCESS
 \

373 
˛rf
 
FSR0H
,
ACCESS
 \

374 
_πos_R2
: \

375 
decf
 
FSR0L
,
F
,
ACCESS
 \

376 
movff
 
PREINC2
,
INDF0
 \

377 
t°fsz
 
FSR0L
,
ACCESS
 \

378 
SMARTJUMP
 
_πos_R2
 \

380 ; 
Re°‹e
 
the
 
s‰
's formingÅheÅasks context. \
; We cannot yetÑestore bsr, wánd status because \
; weÇeedÅheseÑegisters forá finalÅest. \
; \
 PREINC2,PCLATH \
 __ROMSIZE > 0x8000 \
 PREINC2,PCLATU \
 \
 PCLATU,ACCESS \
 \
 PREINC2,TBLPTRL \
 PREINC2,TBLPTRH \
 __ROMSIZE > 0x8000 \
 PREINC2,TBLPTRU \
 \
 TBLPTRU,ACCESS \
 \
 PREINC2,TABLAT \
 PREINC2,FSR1L \
 PREINC2,FSR1H \
 PREINC2,FSR0L \
 PREINC2,FSR0H \
 PREINC2,PRODL \
 PREINC2,PRODH \
; \
; TheÑeturn fromÖortRESTORE_CONTEXT() depends on \
;Åhe value of ucCriticalNesting. When it is zero, \
; interruptsÇeedÅo beÉnabled. This is done viaá \
;Ñetfie instruction because weÇeedÅhe \
; interrupt-enablingándÅheÑeturnÅoÅheÑestored \
;ÅaskÅo be uninterruptable. \
; Because bsr, statusánd Wáreáffected byÅheÅest \
;ÅheyáreÑestoredáfterÅheÅest. \
; \
 ucCriticalNesting>>8 \
 ucCriticalNesting,BANKED \
 _rtos_R4 \
_rtos_R3: \
 PREINC2,BSR \
 PREINC2,WREG \
 PREINC2,STATUS \
 0 ; ReturnÉnabling interrupts \
_rtos_R4: \
 PREINC2,BSR \
 PREINC2,WREG \
 PREINC2,STATUS \
 0 ; Return withoutáffecting interrupts \
_Pragma("asmend") \
} while(0)

429 

	)

432 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

436 
vP‹tYõld
( );

437 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

439 
	#p‹tNOP
(Ë
	`_Pøgma
("asm") \

440 
n›
 \

441 
	`_Pøgma
("asmíd")

	)

445 
	#p‹tTASK_FUNCTION
–
xFun˘i⁄
, 
pvP¨amëîs
 ) \

446 
poöãd
 
	`xFun˘i⁄
–*
pvP¨amëîs
 ) \

447 
	`_Pøgma
(
asmfunc
 
xFun˘i⁄
)

	)

449 
	#p‹tTASK_FUNCTION_PROTO
 
p‹tTASK_FUNCTION


	)

453 vﬁ©ûe

	)

454 

	)

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/Flsh186/port.c

90 
	~<°dlib.h
>

91 
	~<i86.h
>

92 
	~<dos.h
>

93 
	~<£tjmp.h
>

95 
	~"FªeRTOS.h
"

96 
	~"èsk.h
"

97 
	~"p‹èsm.h
"

101 
	#p‹tTIMER_EOI_TYPE
 ( 8 )

	)

102 
	#p‹tRESET_PIC
(Ë
	`p‹tOUTPUT_WORD
––Ë0xff22, 
p‹tTIMER_EOI_TYPE
 )

	)

103 
	#p‹tTIMER_INT_NUMBER
 0x12

	)

105 
	#p‹tTIMER_1_CONTROL_REGISTER
 ( ( Ë0xff5ê)

	)

106 
	#p‹tTIMER_0_CONTROL_REGISTER
 ( ( Ë0xff56 )

	)

107 
	#p‹tTIMER_INTERRUPT_ENABLE
 ( ( Ë0x2000 )

	)

110 
¥vSëTickFªquícy
–
ulTickR©eHz
 );

113 
¥vExôFun˘i⁄
( );

115 #i‡
c⁄figUSE_PREEMPTION
 == 1

118 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

122 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

126 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

131 
	gsScheduÀrRu¬ög
 = 
pdFALSE
;

134 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISR
 )();

137 
jmp_buf
 
	gxJumpBuf
;

142 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

148 
pxOldSwôchISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 );

152 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

154 #i‡
c⁄figUSE_PREEMPTION
 == 1

157 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vPªem±iveTick
 );

162 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vN⁄Pªem±iveTick
 );

166 
	`¥vSëTickFªquícy
–
c⁄figTICK_RATE_HZ
 );

169 if–
	`£tjmp
–
xJumpBuf
 ) != 0 )

171 
	`¥vExôFun˘i⁄
();

172 
sScheduÀrRu¬ög
 = 
pdFALSE
;

176 
sScheduÀrRu¬ög
 = 
pdTRUE
;

179 
	`p‹tFIRST_CONTEXT
();

182  
sScheduÀrRu¬ög
;

183 
	}
}

188 #i‡
c⁄figUSE_PREEMPTION
 == 1

189 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

192 
	`vTaskIn¸emítTick
();

195 
	`p‹tSWITCH_CONTEXT
();

198 
	`p‹tRESET_PIC
();

199 
	}
}

201 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

205 
	`vTaskIn¸emítTick
();

206 
	`p‹tRESET_PIC
();

207 
	}
}

211 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

214 
	`p‹tSWITCH_CONTEXT
();

215 
	}
}

218 
	$vP‹tEndScheduÀr
( )

223 
	`l⁄gjmp
–
xJumpBuf
, 1 );

224 
	}
}

227 
	$¥vExôFun˘i⁄
( )

229 c⁄° 
usTimîDißbÀ
 = 0x0000;

230 
usTimî0C⁄åﬁ
;

234 
	`p‹tDISABLE_INTERRUPTS
();

235 if–
sScheduÀrRu¬ög
 =
pdTRUE
 )

239 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
pxOldSwôchISR
 );

245 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_1_CONTROL_REGISTER
, 
usTimîDißbÀ
 );

248 
usTimî0C⁄åﬁ
 = 
	`p‹tINPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
 );

249 
usTimî0C⁄åﬁ
 |
p‹tTIMER_INTERRUPT_ENABLE
;

250 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
, 
usTimî0C⁄åﬁ
 );

253 
	`p‹tENABLE_INTERRUPTS
();

254 
	}
}

257 
	$¥vSëTickFªquícy
–
ulTickR©eHz
 )

259 c⁄° 
usMaxCou¡Regi°î
 = 0xff5a;

260 c⁄° 
usTimîPri‹ôyRegi°î
 = 0xff32;

261 c⁄° 
usTimîE«bÀ
 = 0xC000;

262 c⁄° 
usRëriggî
 = 0x0001;

263 c⁄° 
usTimîHighPri‹ôy
 = 0x0000;

264 
usTimî0C⁄åﬁ
;

268 c⁄° 
ulClockFªquícy
 = 0x7f31a0;

270 
ulTimîCou¡
 = 
ulClockFªquícy
 / 
ulTickR©eHz
;

272 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_1_CONTROL_REGISTER
, 
usTimîE«bÀ
 | 
p‹tTIMER_INTERRUPT_ENABLE
 | 
usRëriggî
 );

273 
	`p‹tOUTPUT_WORD
–
usMaxCou¡Regi°î
, ( Ë
ulTimîCou¡
 );

274 
	`p‹tOUTPUT_WORD
–
usTimîPri‹ôyRegi°î
, 
usTimîHighPri‹ôy
 );

277 
usTimî0C⁄åﬁ
 = 
	`p‹tINPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
 );

278 
usTimî0C⁄åﬁ
 &~
p‹tTIMER_INTERRUPT_ENABLE
;

279 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
, 
usTimî0C⁄åﬁ
 );

280 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/Flsh186/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
p‹tSHORT


	)

92 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

94 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

95 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

96 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

98 
	tp‹tLONG
 
	tp‹tTickTy≥
;

99 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
p‹tENTER_CRITICAL
( );

105 #¥agm®
aux
 
p‹tENTER_CRITICAL
 = "pushf" \

108 
p‹tEXIT_CRITICAL
( );

109 #¥agm®
aux
 
p‹tEXIT_CRITICAL
 = "popf";

111 
p‹tDISABLE_INTERRUPTS
( );

112 #¥agm®
aux
 
p‹tDISABLE_INTERRUPTS
 = "cli";

114 
p‹tENABLE_INTERRUPTS
( );

115 #¥agm®
aux
 
p‹tENABLE_INTERRUPTS
 = "sti";

119 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

120 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

121 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

122 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

123 
	#p‹tBYTE_ALIGNMENT
 2

	)

124 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

125 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

129 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

130 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

131 
	#p‹tINPUT_WORD
–
xAddr
 ) 
	`öpw
–xAdd∏)

	)

132 
	#p‹tOUTPUT_WORD
–
xAddr
, 
usVÆue
 ) 
	`ouçw
–xAddr, usVÆuê)

	)

136 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

137 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

139 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/PC/port.c

90 
	~<°dlib.h
>

91 
	~<°dio.h
>

92 
	~<i86.h
>

93 
	~<dos.h
>

94 
	~<£tjmp.h
>

96 
	~"FªeRTOS.h
"

97 
	~"èsk.h
"

98 
	~"p‹èsm.h
"

107 
	#p‹tTIMER_INT_NUMBER
 0x08

	)

110 
¥vSëTickFªquícy
–
ulTickR©eHz
 );

113 
¥vExôFun˘i⁄
( );

118 
¥vP‹tRe£tPIC
( );

122 #i‡
c⁄figUSE_PREEMPTION
 == 1

125 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

129 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

132 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

136 
¥vSëTickFªquícyDeÁu…
( );

141 
	gsDOSTickCou¡î
;

144 
	gsScheduÀrRu¬ög
 = 
pdFALSE
;

147 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISR
 )();

150 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISRPlus1
 )();

153 
jmp_buf
 
	gxJumpBuf
;

158 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

160 
pxISR
 
pxOrigöÆTickISR
;

166 
pxOldSwôchISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 );

167 
pxOrigöÆTickISR
 = 
	`_dos_gëve˘
–
p‹tTIMER_INT_NUMBER
 );

168 
pxOldSwôchISRPlus1
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 + 1 );

170 
	`¥vSëTickFªquícy
–
c⁄figTICK_RATE_HZ
 );

174 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

178 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
 + 1, 
pxOrigöÆTickISR
 );

180 #i‡
c⁄figUSE_PREEMPTION
 == 1

183 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vPªem±iveTick
 );

188 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vN⁄Pªem±iveTick
 );

195 
sDOSTickCou¡î
 = 
p‹tTICKS_PER_DOS_TICK
;

198 if–
	`£tjmp
–
xJumpBuf
 ) != 0 )

200 
	`¥vExôFun˘i⁄
();

201 
sScheduÀrRu¬ög
 = 
pdFALSE
;

205 
sScheduÀrRu¬ög
 = 
pdTRUE
;

208 
	`p‹tFIRST_CONTEXT
();

211  
sScheduÀrRu¬ög
;

212 
	}
}

217 #i‡
c⁄figUSE_PREEMPTION
 == 1

220 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

223 
	`vTaskIn¸emítTick
();

226 
	`p‹tSWITCH_CONTEXT
();

229 
	`¥vP‹tRe£tPIC
();

230 
	}
}

232 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

236 
	`vTaskIn¸emítTick
();

237 
	`¥vP‹tRe£tPIC
();

238 
	}
}

243 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

246 
	`p‹tSWITCH_CONTEXT
();

247 
	}
}

250 
	$¥vP‹tRe£tPIC
( )

256 --
sDOSTickCou¡î
;

257 if–
sDOSTickCou¡î
 <= 0 )

259 
sDOSTickCou¡î
 = ( Ë
p‹tTICKS_PER_DOS_TICK
;

260 
__asm
{ 
p‹tSWITCH_INT_NUMBER
 + 1 };

266 
__asm


268 
mov
 
Æ
, 20
H


269 
out
 20
H
, 
Æ


272 
	}
}

275 
	$vP‹tEndScheduÀr
( )

280 
	`l⁄gjmp
–
xJumpBuf
, 1 );

281 
	}
}

284 
	$¥vExôFun˘i⁄
( )

286 –
__öãºu±
 
__Ár
 *
pxOrigöÆTickISR
 )();

290 
	`p‹tDISABLE_INTERRUPTS
();

291 if–
sScheduÀrRu¬ög
 =
pdTRUE
 )

294 
pxOrigöÆTickISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 + 1 );

295 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
pxOrigöÆTickISR
 );

296 
	`¥vSëTickFªquícyDeÁu…
();

300 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
pxOldSwôchISR
 );

301 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
 + 1, 
pxOldSwôchISRPlus1
 );

305 
	`p‹tENABLE_INTERRUPTS
();

306 
	}
}

309 
	$¥vSëTickFªquícy
–
ulTickR©eHz
 )

311 c⁄° 
usPIT_MODE
 = ( ) 0x43;

312 c⁄° 
usPIT0
 = ( ) 0x40;

313 c⁄° 
ulPIT_CONST
 = ( ) 1193180;

314 c⁄° 
us8254_CTR0_MODE3
 = ( ) 0x36;

315 
ulOuçut
;

318 
	`p‹tOUTPUT_BYTE
–
usPIT_MODE
, 
us8254_CTR0_MODE3
 );

319 
ulOuçut
 = 
ulPIT_CONST
 / 
ulTickR©eHz
;

321 
	`p‹tOUTPUT_BYTE
–
usPIT0
, ( )–
ulOuçut
 & ( ) 0xff ) );

322 
ulOuçut
 >>= 8;

323 
	`p‹tOUTPUT_BYTE
–
usPIT0
, ( Ë–
ulOuçut
 & ( ) 0xff ) );

324 
	}
}

327 
	$¥vSëTickFªquícyDeÁu…
( )

329 c⁄° 
usPIT_MODE
 = ( ) 0x43;

330 c⁄° 
usPIT0
 = ( ) 0x40;

331 c⁄° 
us8254_CTR0_MODE3
 = ( ) 0x36;

333 
	`p‹tOUTPUT_BYTE
–
usPIT_MODE
, 
us8254_CTR0_MODE3
 );

334 
	`p‹tOUTPUT_BYTE
–
usPIT0
,0 );

335 
	`p‹tOUTPUT_BYTE
–
usPIT0
,0 );

336 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/PC/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
p‹tSHORT


	)

91 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

95 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

97 
	tp‹tLONG
 
	tp‹tTickTy≥
;

98 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

104 
p‹tLOCAL_ENTER_CRITICAL
( );

105 #¥agm®
aux
 
p‹tLOCAL_ENTER_CRITICAL
 = "pushf" \

107 
	#p‹tENTER_CRITICAL
(Ë
	`p‹tLOCAL_ENTER_CRITICAL
()

	)

109 
p‹tEXIT_CRITICAL
( );

110 #¥agm®
aux
 
p‹tEXIT_CRITICAL
 = "popf";

112 
p‹tDISABLE_INTERRUPTS
( );

113 #¥agm®
aux
 
p‹tDISABLE_INTERRUPTS
 = "cli";

115 
p‹tENABLE_INTERRUPTS
( );

116 #¥agm®
aux
 
p‹tENABLE_INTERRUPTS
 = "sti";

120 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

121 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

122 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

123 
	#p‹tDOS_TICK_RATE
 ( 18.20648 )

	)

124 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

125 
	#p‹tTICKS_PER_DOS_TICK
 ( ( 
p‹tSHORT
 ) ( ( ( 
p‹tDOUBLE
 ) 
c⁄figTICK_RATE_HZ
 / 
p‹tDOS_TICK_RATE
 ) + 0.5 ) )

	)

126 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

127 
	#p‹tBYTE_ALIGNMENT
 ( 2 )

	)

131 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

132 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

133 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

137 
	#p‹tTASK_FUNCTION_PROTO
–
vTaskFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*pvP¨amëî†)

	)

138 
	#p‹tTASK_FUNCTION
–
vTaskFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*pvP¨amëî†)

	)

140 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/common/portasm.h

67 
	ttskTCB
;

68 vﬁ©ûê
tskTCB
 * vﬁ©ûê
pxCuºítTCB
;

69 
vTaskSwôchC⁄ãxt
( );

76 
p‹tSWITCH_CONTEXT
( );

83 
p‹tFIRST_CONTEXT
( );

91 #ifde‡
DEBUG_BUILD


93 #¥agm®
aux
 
p‹tSWITCH_CONTEXT
 = "mováx, segÖxCurrentTCB" \

109 #¥agm®
aux
 
p‹tFIRST_CONTEXT
 = "mováx, segÖxCurrentTCB" \

123 #¥agm®
aux
 
p‹tSWITCH_CONTEXT
 = "mováx, segÖxCurrentTCB" \

136 #¥agm®
aux
 
p‹tFIRST_CONTEXT
 = "mováx, segÖxCurrentTCB" \

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/common/portcomn.c

86 
	~<°dlib.h
>

87 
	~"FªeRTOS.h
"

92 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

94 
p‹tSTACK_TYPE
 
DS_Reg
 = 0, *
pxOrigöÆSP
;

99 *
pxT›OfSèck
 = 0x1111;

100 
pxT›OfSèck
--;

101 *
pxT›OfSèck
 = 0x2222;

102 
pxT›OfSèck
--;

103 *
pxT›OfSèck
 = 0x3333;

104 
pxT›OfSèck
--;

105 *
pxT›OfSèck
 = 0x4444;

106 
pxT›OfSèck
--;

107 *
pxT›OfSèck
 = 0x5555;

108 
pxT›OfSèck
--;

117 *
pxT›OfSèck
 = 
p‹tINITIAL_SW
;

118 
pxT›OfSèck
--;

119 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

120 
pxT›OfSèck
--;

121 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

122 
pxT›OfSèck
--;

129 
pxOrigöÆSP
 = 
pxT›OfSèck
;

134 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xCCCC;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = 
	`FP_SEG
–
pvP¨amëîs
 );

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xBBBB;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxOrigöÆSP
 );

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xBBBB;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0x0123;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xDDDD;

151 
__asm
{ 
MOV
 
DS_Reg
, 
DS
 };

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = 
DS_Reg
;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0xEEEE;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

166 #ifde‡
DEBUG_BUILD


171 
pxT›OfSèck
--;

176  
pxT›OfSèck
;

177 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/queue.c

67 
	~<°dlib.h
>

68 
	~<°rög.h
>

73 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

75 
	~"FªeRTOS.h
"

76 
	~"èsk.h
"

78 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

79 
	~"¸outöe.h
"

82 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


89 
	#queueUNLOCKED
 ( ( sig√d 
p‹tBASE_TYPE
 ) -1 )

	)

90 
	#queueLOCKED_UNMODIFIED
 ( ( sig√d 
p‹tBASE_TYPE
 ) 0 )

	)

92 
	#queueERRONEOUS_UNBLOCK
 ( -1 )

	)

95 
	#queueSEND_TO_BACK
 ( 0 )

	)

96 
	#queueSEND_TO_FRONT
 ( 1 )

	)

99 
	#pxMuãxHﬁdî
 
pcTaû


	)

100 
	#uxQueueTy≥
 
pcHód


	)

101 
	#uxRecursiveCÆlCou¡
 
pcRódFrom


	)

102 
	#queueQUEUE_IS_MUTEX
 
NULL


	)

106 
	#queueSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
p‹tBASE_TYPE
 ) 0 )

	)

107 
	#queueDONT_BLOCK
 ( ( 
p‹tTickTy≥
 ) 0U )

	)

108 
	#queueMUTEX_GIVE_BLOCK_TIME
 ( ( 
p‹tTickTy≥
 ) 0U )

	)

111 
	#queueQUEUE_TYPE_BASE
 ( 0U )

	)

112 
	#queueQUEUE_TYPE_MUTEX
 ( 1U )

	)

113 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( 2U )

	)

114 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( 3U )

	)

115 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( 4U )

	)

121 
	sQueueDeföôi⁄


123 sig√d *
	mpcHód
;

124 sig√d *
	mpcTaû
;

126 sig√d *
	mpcWrôeTo
;

127 sig√d *
	mpcRódFrom
;

129 
xLi°
 
	mxTasksWaôögToSíd
;

130 
xLi°
 
	mxTasksWaôögToRe˚ive
;

132 vﬁ©ûê
p‹tBASE_TYPE
 
	muxMesßgesWaôög
;

133 
p‹tBASE_TYPE
 
	muxLígth
;

134 
p‹tBASE_TYPE
 
	muxIãmSize
;

136 sig√d 
p‹tBASE_TYPE
 
	mxRxLock
;

137 sig√d 
p‹tBASE_TYPE
 
	mxTxLock
;

139 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

140 
	mucQueueNumbî
;

141 
	mucQueueTy≥
;

144 } 
	txQUEUE
;

152 
xQUEUE
 * 
	txQueueH™dÀ
;

159 
xQueueH™dÀ
 
	$xQueueGíîicCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
, 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

160 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSíd
–
xQueueH™dÀ
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

161 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

162 
	$vQueueDñëe
–
xQueueH™dÀ
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

163 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 *
pxHighîPri‹ôyTaskWokí
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

164 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 ) 
PRIVILEGED_FUNCTION
;

165 sig√d 
p‹tBASE_TYPE
 
	$xQueueRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

166 
xQueueH™dÀ
 
	$xQueueCª©eMuãx
–
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

167 
xQueueH™dÀ
 
	$xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 ) 
PRIVILEGED_FUNCTION
;

168 
p‹tBASE_TYPE
 
	$xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
xMuãx
, 
p‹tTickTy≥
 
xBlockTime
 ) 
PRIVILEGED_FUNCTION
;

169 
p‹tBASE_TYPE
 
	$xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
xMuãx
 ) 
PRIVILEGED_FUNCTION
;

170 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

171 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 ) 
PRIVILEGED_FUNCTION
;

172 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

173 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

174 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

175 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
xQueueH™dÀ
 
pxQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

176 
	$ucQueueGëQueueNumbî
–
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

177 
	$vQueueSëQueueNumbî
–
xQueueH™dÀ
 
pxQueue
, 
ucQueueNumbî
 ) 
PRIVILEGED_FUNCTION
;

178 
	$ucQueueGëQueueTy≥
–
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

179 
p‹tBASE_TYPE
 
	$xQueueGíîicRe£t
–
xQueueH™dÀ
 
pxQueue
, 
p‹tBASE_TYPE
 
xNewQueue
 ) 
PRIVILEGED_FUNCTION
;

180 
xTaskH™dÀ
 
	$xQueueGëMuãxHﬁdî
–
xQueueH™dÀ
 
xSem≠h‹e
 ) 
PRIVILEGED_FUNCTION
;

186 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

187 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 
xCoRoutöePªviou¶yWokí
 ) 
PRIVILEGED_FUNCTION
;

188 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

189 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

190 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚ive
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

197 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

202 
	sQUEUE_REGISTRY_ITEM


204 sig√d *
pcQueueName
;

205 
xQueueH™dÀ
 
xH™dÀ
;

206 } 
	txQueueRegi°ryIãm
;

211 
xQueueRegi°ryIãm
 
xQueueRegi°ry
[ 
c⁄figQUEUE_REGISTRY_SIZE
 ];

215 
	$vQueueUƒegi°îQueue
–
xQueueH™dÀ
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

216 
	$vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcQueueName
 ) 
PRIVILEGED_FUNCTION
;

227 
	$¥vU∆ockQueue
–
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

234 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueEm±y
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

241 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueFuŒ
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

247 
	$¥vC›yD©aToQueue
–
xQUEUE
 *
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tBASE_TYPE
 
xPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

252 
	$¥vC›yD©aFromQueue
–
xQUEUE
 * c⁄° 
pxQueue
, c⁄° *
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

259 
	#¥vLockQueue
–
pxQueue
 ) \

260 
	`èskENTER_CRITICAL
(); \

262 if––
pxQueue
 )->
xRxLock
 =
queueUNLOCKED
 ) \

264 –
pxQueue
 )->
xRxLock
 = 
queueLOCKED_UNMODIFIED
; \

266 if––
pxQueue
 )->
xTxLock
 =
queueUNLOCKED
 ) \

268 –
pxQueue
 )->
xTxLock
 = 
queueLOCKED_UNMODIFIED
; \

270 
	}
} \

271 
	`èskEXIT_CRITICAL
()

	)

279 
p‹tBASE_TYPE
 
	$xQueueGíîicRe£t
–
xQueueH™dÀ
 
pxQueue
, 
p‹tBASE_TYPE
 
xNewQueue
 )

281 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdPASS
;

283 
	`c⁄figASSERT
–
pxQueue
 );

287 if–
xNewQueue
 !
pdTRUE
 )

289 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

291 
xRëu∫
 = 
pdFAIL
;

294 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

296 
xRëu∫
 = 
pdFAIL
;

300 if–
xRëu∫
 =
pdPASS
 )

302 
pxQueue
->
pcTaû
 =ÖxQueue->
pcHód
 + (ÖxQueue->
uxLígth
 *ÖxQueue->
uxIãmSize
 );

303 
pxQueue
->
uxMesßgesWaôög
 = ( 
p‹tBASE_TYPE
 ) 0U;

304 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

305 
pxQueue
->
pcRódFrom
 =ÖxQueue->
pcHód
 + ( (ÖxQueue->
uxLígth
 - ( 
p‹tBASE_TYPE
 ) 1U ) *ÖxQueue->
uxIãmSize
 );

306 
pxQueue
->
xRxLock
 = 
queueUNLOCKED
;

307 
pxQueue
->
xTxLock
 = 
queueUNLOCKED
;

310 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToSíd
 ) );

311 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

314  
xRëu∫
;

315 
	}
}

318 
xQueueH™dÀ
 
	$xQueueGíîicCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
, 
ucQueueTy≥
 )

320 
xQUEUE
 *
pxNewQueue
;

321 
size_t
 
xQueueSizeInByãs
;

322 
xQueueH™dÀ
 
xRëu∫
 = 
NULL
;

326 –Ë
ucQueueTy≥
;

329 if–
uxQueueLígth
 > ( 
p‹tBASE_TYPE
 ) 0 )

331 
pxNewQueue
 = ( 
xQUEUE
 * ) 
	`pvP‹tMÆloc
( ( xQUEUE ) );

332 if–
pxNewQueue
 !
NULL
 )

336 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 ) + ( size_t ) 1;

338 
pxNewQueue
->
pcHód
 = ( sig√d * ) 
	`pvP‹tMÆloc
–
xQueueSizeInByãs
 );

339 if–
pxNewQueue
->
pcHód
 !
NULL
 )

343 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

344 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

345 
	`xQueueGíîicRe£t
–
pxNewQueue
, 
pdTRUE
 );

346 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

348 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

352 
	`åa˚QUEUE_CREATE
–
pxNewQueue
 );

353 
xRëu∫
 = 
pxNewQueue
;

357 
	`åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 );

358 
	`vP‹tFªe
–
pxNewQueue
 );

363 
	`c⁄figASSERT
–
xRëu∫
 );

365  
xRëu∫
;

366 
	}
}

369 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

371 
xQueueH™dÀ
 
	$xQueueCª©eMuãx
–
ucQueueTy≥
 )

373 
xQUEUE
 *
pxNewQueue
;

377 –Ë
ucQueueTy≥
;

380 
pxNewQueue
 = ( 
xQUEUE
 * ) 
	`pvP‹tMÆloc
( ( xQUEUE ) );

381 if–
pxNewQueue
 !
NULL
 )

384 
pxNewQueue
->
pxMuãxHﬁdî
 = 
NULL
;

385 
pxNewQueue
->
uxQueueTy≥
 = 
queueQUEUE_IS_MUTEX
;

389 
pxNewQueue
->
pcWrôeTo
 = 
NULL
;

390 
pxNewQueue
->
pcRódFrom
 = 
NULL
;

395 
pxNewQueue
->
uxMesßgesWaôög
 = ( 
p‹tBASE_TYPE
 ) 0U;

396 
pxNewQueue
->
uxLígth
 = ( 
p‹tBASE_TYPE
 ) 1U;

397 
pxNewQueue
->
uxIãmSize
 = ( 
p‹tBASE_TYPE
 ) 0U;

398 
pxNewQueue
->
xRxLock
 = 
queueUNLOCKED
;

399 
pxNewQueue
->
xTxLock
 = 
queueUNLOCKED
;

401 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

403 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

408 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToSíd
 ) );

409 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToRe˚ive
 ) );

411 
	`åa˚CREATE_MUTEX
–
pxNewQueue
 );

414 
	`xQueueGíîicSíd
–
pxNewQueue
, 
NULL
, ( 
p‹tTickTy≥
 ) 0U, 
queueSEND_TO_BACK
 );

418 
	`åa˚CREATE_MUTEX_FAILED
();

421 
	`c⁄figASSERT
–
pxNewQueue
 );

422  
pxNewQueue
;

423 
	}
}

428 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

430 * 
	$xQueueGëMuãxHﬁdî
–
xQueueH™dÀ
 
xSem≠h‹e
 )

432 *
pxRëu∫
;

439 
	`èskENTER_CRITICAL
();

441 if–
xSem≠h‹e
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

443 
pxRëu∫
 = ( * ) 
xSem≠h‹e
->
pxMuãxHﬁdî
;

447 
pxRëu∫
 = 
NULL
;

450 
	`èskEXIT_CRITICAL
();

452  
pxRëu∫
;

453 
	}
}

458 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

460 
p‹tBASE_TYPE
 
	$xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
 )

462 
p‹tBASE_TYPE
 
xRëu∫
;

464 
	`c⁄figASSERT
–
pxMuãx
 );

472 if–
pxMuãx
->
pxMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

474 
	`åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 );

481 –
pxMuãx
->
uxRecursiveCÆlCou¡
 )--;

484 if–
pxMuãx
->
uxRecursiveCÆlCou¡
 == 0 )

488 
	`xQueueGíîicSíd
–
pxMuãx
, 
NULL
, 
queueMUTEX_GIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 );

491 
xRëu∫
 = 
pdPASS
;

496 
xRëu∫
 = 
pdFAIL
;

498 
	`åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

501  
xRëu∫
;

502 
	}
}

507 #i‡
c⁄figUSE_RECURSIVE_MUTEXES
 == 1

509 
p‹tBASE_TYPE
 
	$xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
, 
p‹tTickTy≥
 
xBlockTime
 )

511 
p‹tBASE_TYPE
 
xRëu∫
;

513 
	`c⁄figASSERT
–
pxMuãx
 );

518 
	`åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 );

520 if–
pxMuãx
->
pxMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

522 –
pxMuãx
->
uxRecursiveCÆlCou¡
 )++;

523 
xRëu∫
 = 
pdPASS
;

527 
xRëu∫
 = 
	`xQueueGíîicRe˚ive
–
pxMuãx
, 
NULL
, 
xBlockTime
, 
pdFALSE
 );

531 if–
xRëu∫
 =
pdPASS
 )

533 –
pxMuãx
->
uxRecursiveCÆlCou¡
 )++;

537 
	`åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

541  
xRëu∫
;

542 
	}
}

547 #i‡
c⁄figUSE_COUNTING_SEMAPHORES
 == 1

549 
xQueueH™dÀ
 
	$xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 )

551 
xQueueH™dÀ
 
pxH™dÀ
;

553 
pxH™dÀ
 = 
	`xQueueGíîicCª©e
––
p‹tBASE_TYPE
 ) 
uxCou¡VÆue
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

555 if–
pxH™dÀ
 !
NULL
 )

557 
pxH™dÀ
->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

559 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

563 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

566 
	`c⁄figASSERT
–
pxH™dÀ
 );

567  
pxH™dÀ
;

568 
	}
}

573 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 )

575 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

576 
xTimeOutTy≥
 
xTimeOut
;

578 
	`c⁄figASSERT
–
pxQueue
 );

579 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

586 
	`èskENTER_CRITICAL
();

590 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

592 
	`åa˚QUEUE_SEND
–
pxQueue
 );

593 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

597 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

599 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

605 
	`p‹tYIELD_WITHIN_API
();

609 
	`èskEXIT_CRITICAL
();

613  
pdPASS
;

617 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

621 
	`èskEXIT_CRITICAL
();

625 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

626  
îrQUEUE_FULL
;

628 if–
xE¡ryTimeSë
 =
pdFALSE
 )

632 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

633 
xE¡ryTimeSë
 = 
pdTRUE
;

637 
	`èskEXIT_CRITICAL
();

642 
	`vTaskSu•ídAŒ
();

643 
	`¥vLockQueue
–
pxQueue
 );

646 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

648 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

650 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

651 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

658 
	`¥vU∆ockQueue
–
pxQueue
 );

665 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

667 
	`p‹tYIELD_WITHIN_API
();

673 
	`¥vU∆ockQueue
–
pxQueue
 );

674 –Ë
	`xTaskResumeAŒ
();

680 
	`¥vU∆ockQueue
–
pxQueue
 );

681 –Ë
	`xTaskResumeAŒ
();

685 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

686  
îrQUEUE_FULL
;

689 
	}
}

692 #i‡
c⁄figUSE_ALTERNATIVE_API
 == 1

694 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 )

696 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

697 
xTimeOutTy≥
 
xTimeOut
;

699 
	`c⁄figASSERT
–
pxQueue
 );

700 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

704 
	`èskENTER_CRITICAL
();

708 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

710 
	`åa˚QUEUE_SEND
–
pxQueue
 );

711 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

715 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

717 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

721 
	`p‹tYIELD_WITHIN_API
();

725 
	`èskEXIT_CRITICAL
();

726  
pdPASS
;

730 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

732 
	`èskEXIT_CRITICAL
();

733  
îrQUEUE_FULL
;

735 if–
xE¡ryTimeSë
 =
pdFALSE
 )

737 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

738 
xE¡ryTimeSë
 = 
pdTRUE
;

742 
	`èskEXIT_CRITICAL
();

744 
	`èskENTER_CRITICAL
();

746 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

748 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

750 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

751 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

752 
	`p‹tYIELD_WITHIN_API
();

757 
	`èskEXIT_CRITICAL
();

758 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

759  
îrQUEUE_FULL
;

762 
	`èskEXIT_CRITICAL
();

764 
	}
}

769 #i‡
c⁄figUSE_ALTERNATIVE_API
 == 1

771 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 )

773 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

774 
xTimeOutTy≥
 
xTimeOut
;

775 sig√d *
pcOrigöÆRódPosôi⁄
;

777 
	`c⁄figASSERT
–
pxQueue
 );

778 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

782 
	`èskENTER_CRITICAL
();

784 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

787 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
pcRódFrom
;

789 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

791 if–
xJu°Pìkög
 =
pdFALSE
 )

793 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

796 --–
pxQueue
->
uxMesßgesWaôög
 );

798 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

800 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

804 
pxQueue
->
pxMuãxHﬁdî
 = 
	`xTaskGëCuºítTaskH™dÀ
();

809 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

811 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

813 
	`p‹tYIELD_WITHIN_API
();

819 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

823 
pxQueue
->
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

827 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

831 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

834 
	`p‹tYIELD_WITHIN_API
();

840 
	`èskEXIT_CRITICAL
();

841  
pdPASS
;

845 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

847 
	`èskEXIT_CRITICAL
();

848 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

849  
îrQUEUE_EMPTY
;

851 if–
xE¡ryTimeSë
 =
pdFALSE
 )

853 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

854 
xE¡ryTimeSë
 = 
pdTRUE
;

858 
	`èskEXIT_CRITICAL
();

860 
	`èskENTER_CRITICAL
();

862 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

864 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

866 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

868 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

870 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

872 
	`p‹tENTER_CRITICAL
();

873 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

874 
	`p‹tEXIT_CRITICAL
();

879 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

880 
	`p‹tYIELD_WITHIN_API
();

885 
	`èskEXIT_CRITICAL
();

886 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

887  
îrQUEUE_EMPTY
;

890 
	`èskEXIT_CRITICAL
();

892 
	}
}

898 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 *
pxHighîPri‹ôyTaskWokí
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 )

900 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

901 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

903 
	`c⁄figASSERT
–
pxQueue
 );

904 
	`c⁄figASSERT
–
pxHighîPri‹ôyTaskWokí
 );

905 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

912 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

914 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

916 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

918 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

922 if–
pxQueue
->
xTxLock
 =
queueUNLOCKED
 )

924 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

926 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

930 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

938 ++–
pxQueue
->
xTxLock
 );

941 
xRëu∫
 = 
pdPASS
;

945 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

946 
xRëu∫
 = 
îrQUEUE_FULL
;

949 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

951  
xRëu∫
;

952 
	}
}

955 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 )

957 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

958 
xTimeOutTy≥
 
xTimeOut
;

959 sig√d *
pcOrigöÆRódPosôi⁄
;

961 
	`c⁄figASSERT
–
pxQueue
 );

962 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

970 
	`èskENTER_CRITICAL
();

974 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

977 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
pcRódFrom
;

979 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

981 if–
xJu°Pìkög
 =
pdFALSE
 )

983 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

986 --–
pxQueue
->
uxMesßgesWaôög
 );

988 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

990 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

994 
pxQueue
->
pxMuãxHﬁdî
 = 
	`xTaskGëCuºítTaskH™dÀ
();

999 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1001 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

1003 
	`p‹tYIELD_WITHIN_API
();

1009 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

1013 
pxQueue
->
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1017 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1021 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1024 
	`p‹tYIELD_WITHIN_API
();

1030 
	`èskEXIT_CRITICAL
();

1031  
pdPASS
;

1035 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

1039 
	`èskEXIT_CRITICAL
();

1040 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1041  
îrQUEUE_EMPTY
;

1043 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1047 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

1048 
xE¡ryTimeSë
 = 
pdTRUE
;

1052 
	`èskEXIT_CRITICAL
();

1057 
	`vTaskSu•ídAŒ
();

1058 
	`¥vLockQueue
–
pxQueue
 );

1061 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1063 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1065 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1067 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1069 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1071 
	`p‹tENTER_CRITICAL
();

1073 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1075 
	`p‹tEXIT_CRITICAL
();

1080 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1081 
	`¥vU∆ockQueue
–
pxQueue
 );

1082 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1084 
	`p‹tYIELD_WITHIN_API
();

1090 
	`¥vU∆ockQueue
–
pxQueue
 );

1091 –Ë
	`xTaskResumeAŒ
();

1096 
	`¥vU∆ockQueue
–
pxQueue
 );

1097 –Ë
	`xTaskResumeAŒ
();

1098 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1099  
îrQUEUE_EMPTY
;

1102 
	}
}

1105 sig√d 
p‹tBASE_TYPE
 
	$xQueueRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxTaskWokí
 )

1107 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1108 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

1110 
	`c⁄figASSERT
–
pxQueue
 );

1111 
	`c⁄figASSERT
–
pxTaskWokí
 );

1112 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

1114 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1117 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

1119 
	`åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 );

1121 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1122 --–
pxQueue
->
uxMesßgesWaôög
 );

1127 if–
pxQueue
->
xRxLock
 =
queueUNLOCKED
 )

1129 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1131 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1135 *
pxTaskWokí
 = 
pdTRUE
;

1143 ++–
pxQueue
->
xRxLock
 );

1146 
xRëu∫
 = 
pdPASS
;

1150 
xRëu∫
 = 
pdFAIL
;

1151 
	`åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 );

1154 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1156  
xRëu∫
;

1157 
	}
}

1160 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1162 
p‹tBASE_TYPE
 
uxRëu∫
;

1164 
	`c⁄figASSERT
–
pxQueue
 );

1166 
	`èskENTER_CRITICAL
();

1167 
uxRëu∫
 = 
pxQueue
->
uxMesßgesWaôög
;

1168 
	`èskEXIT_CRITICAL
();

1170  
uxRëu∫
;

1171 
	}
}

1174 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1176 
p‹tBASE_TYPE
 
uxRëu∫
;

1178 
	`c⁄figASSERT
–
pxQueue
 );

1180 
uxRëu∫
 = 
pxQueue
->
uxMesßgesWaôög
;

1182  
uxRëu∫
;

1183 
	}
}

1186 
	$vQueueDñëe
–
xQueueH™dÀ
 
pxQueue
 )

1188 
	`c⁄figASSERT
–
pxQueue
 );

1190 
	`åa˚QUEUE_DELETE
–
pxQueue
 );

1191 
	`vQueueUƒegi°îQueue
–
pxQueue
 );

1192 
	`vP‹tFªe
–
pxQueue
->
pcHód
 );

1193 
	`vP‹tFªe
–
pxQueue
 );

1194 
	}
}

1197 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1199 
	$ucQueueGëQueueNumbî
–
xQueueH™dÀ
 
pxQueue
 )

1201  
pxQueue
->
ucQueueNumbî
;

1202 
	}
}

1207 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1209 
	$vQueueSëQueueNumbî
–
xQueueH™dÀ
 
pxQueue
, 
ucQueueNumbî
 )

1211 
pxQueue
->
ucQueueNumbî
 = ucQueueNumber;

1212 
	}
}

1217 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1219 
	$ucQueueGëQueueTy≥
–
xQueueH™dÀ
 
pxQueue
 )

1221  
pxQueue
->
ucQueueTy≥
;

1222 
	}
}

1227 
	$¥vC›yD©aToQueue
–
xQUEUE
 *
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tBASE_TYPE
 
xPosôi⁄
 )

1229 if–
pxQueue
->
uxIãmSize
 =–
p‹tBASE_TYPE
 ) 0 )

1231 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1233 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1236 
	`vTaskPri‹ôyDisöhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1237 
pxQueue
->
pxMuãxHﬁdî
 = 
NULL
;

1242 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

1244 
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( ËpxQueue->
uxIãmSize
 );

1245 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

1246 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
pcTaû
 )

1248 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

1253 
	`mem˝y
––* ) 
pxQueue
->
pcRódFrom
, 
pvIãmToQueue
, ( ËpxQueue->
uxIãmSize
 );

1254 
pxQueue
->
pcRódFrom
 -pxQueue->
uxIãmSize
;

1255 if–
pxQueue
->
pcRódFrom
 <ÖxQueue->
pcHód
 )

1257 
pxQueue
->
pcRódFrom
 = (ÖxQueue->
pcTaû
 -ÖxQueue->
uxIãmSize
 );

1261 ++–
pxQueue
->
uxMesßgesWaôög
 );

1262 
	}
}

1265 
	$¥vC›yD©aFromQueue
–
xQUEUE
 * c⁄° 
pxQueue
, c⁄° *
pvBuf„r
 )

1267 if–
pxQueue
->
uxQueueTy≥
 !
queueQUEUE_IS_MUTEX
 )

1269 
pxQueue
->
pcRódFrom
 +pxQueue->
uxIãmSize
;

1270 if–
pxQueue
->
pcRódFrom
 >pxQueue->
pcTaû
 )

1272 
pxQueue
->
pcRódFrom
 =ÖxQueue->
pcHód
;

1274 
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

1276 
	}
}

1279 
	$¥vU∆ockQueue
–
xQueueH™dÀ
 
pxQueue
 )

1287 
	`èskENTER_CRITICAL
();

1290  
pxQueue
->
xTxLock
 > 
queueLOCKED_UNMODIFIED
 )

1294 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1298 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1302 
	`vTaskMis£dYõld
();

1305 --–
pxQueue
->
xTxLock
 );

1313 
pxQueue
->
xTxLock
 = 
queueUNLOCKED
;

1315 
	`èskEXIT_CRITICAL
();

1318 
	`èskENTER_CRITICAL
();

1320  
pxQueue
->
xRxLock
 > 
queueLOCKED_UNMODIFIED
 )

1322 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1324 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1326 
	`vTaskMis£dYõld
();

1329 --–
pxQueue
->
xRxLock
 );

1337 
pxQueue
->
xRxLock
 = 
queueUNLOCKED
;

1339 
	`èskEXIT_CRITICAL
();

1340 
	}
}

1343 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueEm±y
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1345 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1347 
	`èskENTER_CRITICAL
();

1348 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0 );

1349 
	`èskEXIT_CRITICAL
();

1351  
xRëu∫
;

1352 
	}
}

1355 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1357 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1359 
	`c⁄figASSERT
–
pxQueue
 );

1360 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0 );

1362  
xRëu∫
;

1363 
	}
}

1366 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueFuŒ
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1368 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1370 
	`èskENTER_CRITICAL
();

1371 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 );

1372 
	`èskEXIT_CRITICAL
();

1374  
xRëu∫
;

1375 
	}
}

1378 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1380 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1382 
	`c⁄figASSERT
–
pxQueue
 );

1383 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 );

1385  
xRëu∫
;

1386 
	}
}

1389 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1390 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1392 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1397 
	`p‹tDISABLE_INTERRUPTS
();

1399 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

1403 if–
xTicksToWaô
 > ( 
p‹tTickTy≥
 ) 0 )

1407 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToSíd
 ) );

1408 
	`p‹tENABLE_INTERRUPTS
();

1409  
îrQUEUE_BLOCKED
;

1413 
	`p‹tENABLE_INTERRUPTS
();

1414  
îrQUEUE_FULL
;

1418 
	`p‹tENABLE_INTERRUPTS
();

1420 
	`p‹tNOP
();

1422 
	`p‹tDISABLE_INTERRUPTS
();

1424 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

1427 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

1428 
xRëu∫
 = 
pdPASS
;

1431 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1437 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1441 
xRëu∫
 = 
îrQUEUE_YIELD
;

1447 
xRëu∫
 = 
îrQUEUE_FULL
;

1450 
	`p‹tENABLE_INTERRUPTS
();

1452  
xRëu∫
;

1453 
	}
}

1457 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1458 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚ive
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1460 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1465 
	`p‹tDISABLE_INTERRUPTS
();

1467 if–
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0 )

1471 if–
xTicksToWaô
 > ( 
p‹tTickTy≥
 ) 0 )

1475 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

1476 
	`p‹tENABLE_INTERRUPTS
();

1477  
îrQUEUE_BLOCKED
;

1481 
	`p‹tENABLE_INTERRUPTS
();

1482  
îrQUEUE_FULL
;

1486 
	`p‹tENABLE_INTERRUPTS
();

1488 
	`p‹tNOP
();

1490 
	`p‹tDISABLE_INTERRUPTS
();

1492 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

1495 
pxQueue
->
pcRódFrom
 +pxQueue->
uxIãmSize
;

1496 if–
pxQueue
->
pcRódFrom
 >pxQueue->
pcTaû
 )

1498 
pxQueue
->
pcRódFrom
 =ÖxQueue->
pcHód
;

1500 --–
pxQueue
->
uxMesßgesWaôög
 );

1501 
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

1503 
xRëu∫
 = 
pdPASS
;

1506 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1512 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1514 
xRëu∫
 = 
îrQUEUE_YIELD
;

1520 
xRëu∫
 = 
pdFAIL
;

1523 
	`p‹tENABLE_INTERRUPTS
();

1525  
xRëu∫
;

1526 
	}
}

1532 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1533 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 
xCoRoutöePªviou¶yWokí
 )

1537 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

1539 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

1543 if–
xCoRoutöePªviou¶yWokí
 =
pdFALSE
 )

1545 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1547 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1549  
pdTRUE
;

1555  
xCoRoutöePªviou¶yWokí
;

1556 
	}
}

1560 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1561 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxCoRoutöeWokí
 )

1563 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1567 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

1570 
pxQueue
->
pcRódFrom
 +pxQueue->
uxIãmSize
;

1571 if–
pxQueue
->
pcRódFrom
 >pxQueue->
pcTaû
 )

1573 
pxQueue
->
pcRódFrom
 =ÖxQueue->
pcHód
;

1575 --–
pxQueue
->
uxMesßgesWaôög
 );

1576 
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

1578 if––*
pxCoRoutöeWokí
 ) =
pdFALSE
 )

1580 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1582 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1584 *
pxCoRoutöeWokí
 = 
pdTRUE
;

1589 
xRëu∫
 = 
pdPASS
;

1593 
xRëu∫
 = 
pdFAIL
;

1596  
xRëu∫
;

1597 
	}
}

1601 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

1603 
	$vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcQueueName
 )

1605 
p‹tBASE_TYPE
 
ux
;

1609  
ux
 = ( 
p‹tBASE_TYPE
 ) 0U; ux < ( p‹tBASE_TYPE ) 
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

1611 if–
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =
NULL
 )

1614 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =ÖcQueueName;

1615 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = 
xQueue
;

1619 
	}
}

1624 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

1626 
	$vQueueUƒegi°îQueue
–
xQueueH™dÀ
 
xQueue
 )

1628 
p‹tBASE_TYPE
 
ux
;

1632  
ux
 = ( 
p‹tBASE_TYPE
 ) 0U; ux < ( p‹tBASE_TYPE ) 
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

1634 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

1637 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 = 
NULL
;

1642 
	}
}

1647 #i‡
c⁄figUSE_TIMERS
 == 1

1649 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
xQueueH™dÀ
 
pxQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1665 
	`¥vLockQueue
–
pxQueue
 );

1666 if–
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0U )

1669 
	`vTaskPœ˚OnEvítLi°Re°ri˘ed
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1671 
	`¥vU∆ockQueue
–
pxQueue
 );

1672 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/tasks.c

68 
	~<°dio.h
>

69 
	~<°dlib.h
>

70 
	~<°rög.h
>

75 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

79 
	~"timîs.h
"

80 
	~"SèckMa¸os.h
"

82 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


87 
	#tskIDLE_STACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

93 
	stskTaskC⁄åﬁBlock


95 vﬁ©ûê
p‹tSTACK_TYPE
 *
	mpxT›OfSèck
;

97 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

98 
xMPU_SETTINGS
 
	mxMPUSëtögs
;

101 
xLi°Iãm
 
	mxGíîicLi°Iãm
;

102 
xLi°Iãm
 
	mxEvítLi°Iãm
;

103 
p‹tBASE_TYPE
 
	muxPri‹ôy
;

104 
p‹tSTACK_TYPE
 *
	mpxSèck
;

105 sig√d 
	mpcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

107 #i‡–
p‹tSTACK_GROWTH
 > 0 )

108 
p‹tSTACK_TYPE
 *
	mpxEndOfSèck
;

111 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

112 
p‹tBASE_TYPE
 
	muxCrôiˇlNe°ög
;

115 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

116 
p‹tBASE_TYPE
 
	muxTCBNumbî
;

117 
p‹tBASE_TYPE
 
	muxTaskNumbî
;

120 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

121 
p‹tBASE_TYPE
 
	muxBa£Pri‹ôy
;

124 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

125 
pdTASK_HOOK_CODE
 
	mpxTaskTag
;

128 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

129 
	mulRunTimeCou¡î
;

132 } 
	ttskTCB
;

139 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


140 

	)

144 
PRIVILEGED_DATA
 
tskTCB
 * vﬁ©ûê
	gpxCuºítTCB
 = 
NULL
;

148 
PRIVILEGED_DATA
 
xLi°
 
	gpxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

149 
PRIVILEGED_DATA
 
xLi°
 
	gxDñayedTaskLi°1
;

150 
PRIVILEGED_DATA
 
xLi°
 
	gxDñayedTaskLi°2
;

151 
PRIVILEGED_DATA
 
xLi°
 * vﬁ©ûê
	gpxDñayedTaskLi°
 ;

152 
PRIVILEGED_DATA
 
xLi°
 * vﬁ©ûê
	gpxOvîÊowDñayedTaskLi°
;

153 
PRIVILEGED_DATA
 
xLi°
 
	gxPídögRódyLi°
;

155 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

157 
PRIVILEGED_DATA
 
xLi°
 
	gxTasksWaôögTîmö©i⁄
;

158 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxTasksDñëed
 = ( portBASE_TYPE ) 0U;

162 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

164 
PRIVILEGED_DATA
 
xLi°
 
	gxSu•ídedTaskLi°
;

168 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

170 
PRIVILEGED_DATA
 
xTaskH™dÀ
 
	gxIdÀTaskH™dÀ
 = 
NULL
;

175 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxCuºítNumbîOfTasks
 = ( portBASE_TYPE ) 0U;

176 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tTickTy≥
 
	gxTickCou¡
 = (ÖortTickType ) 0U;

177 
PRIVILEGED_DATA
 
p‹tBASE_TYPE
 
	guxT›U£dPri‹ôy
 = 
tskIDLE_PRIORITY
;

178 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

179 
PRIVILEGED_DATA
 vﬁ©ûêsig√d 
p‹tBASE_TYPE
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

180 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxScheduÀrSu•íded
 = ( p‹tBASE_TYPE ) 
pdFALSE
;

181 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxMis£dTicks
 = ( portBASE_TYPE ) 0U;

182 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	gxMis£dYõld
 = (Ö‹tBASE_TYPE ) 
pdFALSE
;

183 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	gxNumOfOvîÊows
 = (ÖortBASE_TYPE ) 0;

184 
PRIVILEGED_DATA
 
p‹tBASE_TYPE
 
	guxTaskNumbî
 = ( portBASE_TYPE ) 0U;

185 
PRIVILEGED_DATA
 
p‹tTickTy≥
 
	gxNextTaskUnblockTime
 = (Ö‹tTickTy≥ ) 
p‹tMAX_DELAY
;

187 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

189 
PRIVILEGED_DATA
 
	gpcSètsSåög
[ 50 ] ;

190 
PRIVILEGED_DATA
 
	gulTaskSwôchedInTime
 = 0UL;

191 
	$¥vGíî©eRunTimeSètsF‹TasksInLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, 
ulTŸÆRunTime
 ) 
PRIVILEGED_FUNCTION
;

201 
	#tskSTACK_FILL_BYTE
 ( 0xa5U )

	)

206 
	#tskBLOCKED_CHAR
 ( ( sig√d Ë'B' )

	)

207 
	#tskREADY_CHAR
 ( ( sig√d Ë'R' )

	)

208 
	#tskDELETED_CHAR
 ( ( sig√d Ë'D' )

	)

209 
	#tskSUSPENDED_CHAR
 ( ( sig√d Ë'S' )

	)

220 
	#¥vAddTaskToRódyQueue
–
pxTCB
 ) \

221 
	`åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 ) \

222 if––
pxTCB
 )->
uxPri‹ôy
 > 
uxT›RódyPri‹ôy
 ) \

224 
uxT›RódyPri‹ôy
 = ( 
pxTCB
 )->
uxPri‹ôy
; \

225 
	}
} \

226 
	`vLi°In£πEnd
––
xLi°
 * ) &–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xGíîicLi°Iãm
 ) )

	)

237 
	#¥vCheckDñayedTasks
() \

239 
p‹tTickTy≥
 
xIãmVÆue
; \

243 if–
xTickCou¡
 >
xNextTaskUnblockTime
 ) \

247 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 ) \

253 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
; \

262 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 ); \

263 
xIãmVÆue
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ); \

265 if–
xTickCou¡
 < 
xIãmVÆue
 ) \

271 
xNextTaskUnblockTime
 = 
xIãmVÆue
; \

276 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ); \

279 if–
pxTCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 !
NULL
 ) \

281 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) ); \

283 
	`¥vAddTaskToRódyQueue
–
pxTCB
 ); \

287 }

	)

296 
	#¥vGëTCBFromH™dÀ
–
pxH™dÀ
 ) ( ( (ÖxH™dÀ ) =
NULL
 ) ? ( 
tskTCB
 * ) 
pxCuºítTCB
 : (ÅskTCB * ) (ÖxH™dÀ ) )

	)

299 
vAµliˇti⁄SèckOvîÊowHook
–
xTaskH™dÀ
 *
pxTask
, sig√d *
pcTaskName
 );

300 
vAµliˇti⁄TickHook
( );

308 
	$¥vInôüli£TCBV¨übÀs
–
tskTCB
 *
pxTCB
, c⁄° sig√d * c⁄° 
pcName
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
, 
usSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

314 
	$¥vInôüli£TaskLi°s
–Ë
PRIVILEGED_FUNCTION
;

327 
	`p‹tTASK_FUNCTION_PROTO
–
¥vIdÀTask
, 
pvP¨amëîs
 );

336 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

338 
	$¥vDñëeTCB
–
tskTCB
 *
pxTCB
 ) 
PRIVILEGED_FUNCTION
;

347 
	$¥vCheckTasksWaôögTîmö©i⁄
–Ë
PRIVILEGED_FUNCTION
;

353 
	$¥vAddCuºítTaskToDñayedLi°
–
p‹tTickTy≥
 
xTimeToWake
 ) 
PRIVILEGED_FUNCTION
;

359 
tskTCB
 *
	$¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
 ) 
PRIVILEGED_FUNCTION
;

370 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

372 
	$¥vLi°TaskWôhöSögÀLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, sig√d 
cSètus
 ) 
PRIVILEGED_FUNCTION
;

381 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

383 
	$usTaskCheckFªeSèckS∑˚
–c⁄° * 
pucSèckByã
 ) 
PRIVILEGED_FUNCTION
;

396 sig√d 
p‹tBASE_TYPE
 
	$xTaskGíîicCª©e
–
pdTASK_CODE
 
pxTaskCode
, c⁄° sig√d * c⁄° 
pcName
, 
usSèckDïth
, *
pvP¨amëîs
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, 
xTaskH™dÀ
 *
pxCª©edTask
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 )

398 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

399 
tskTCB
 * 
pxNewTCB
;

401 
	`c⁄figASSERT
–
pxTaskCode
 );

402 
	`c⁄figASSERT
––
uxPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

406 
pxNewTCB
 = 
	`¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
puxSèckBuf„r
 );

408 if–
pxNewTCB
 !
NULL
 )

410 
p‹tSTACK_TYPE
 *
pxT›OfSèck
;

412 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

414 
p‹tBASE_TYPE
 
xRunPrivûeged
;

415 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0U )

417 
xRunPrivûeged
 = 
pdTRUE
;

421 
xRunPrivûeged
 = 
pdFALSE
;

423 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

430 #if–
p‹tSTACK_GROWTH
 < 0 )

432 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
 + ( 
usSèckDïth
 - ( ) 1 );

433 
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 )ÖxT›OfSèck ) & ( (Ö‹tPOINTER_SIZE_TYPE ) ~
p‹tBYTE_ALIGNMENT_MASK
 ) );

436 
	`c⁄figASSERT
––––Ë
pxT›OfSèck
 & ( Ë
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

440 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

443 
	`c⁄figASSERT
––––Ë
pxNewTCB
->
pxSèck
 & ( Ë
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

448 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
usSèckDïth
 - 1 );

453 
	`¥vInôüli£TCBV¨übÀs
–
pxNewTCB
, 
pcName
, 
uxPri‹ôy
, 
xRegi⁄s
, 
usSèckDïth
 );

459 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

461 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

465 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

470 
	`p‹tALIGNMENT_ASSERT_pxCuºítTCB
––––Ë
pxNewTCB
->
pxT›OfSèck
 & ( Ë
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

472 if––* ) 
pxCª©edTask
 !
NULL
 )

477 *
pxCª©edTask
 = ( 
xTaskH™dÀ
 ) 
pxNewTCB
;

482 
	`èskENTER_CRITICAL
();

484 
uxCuºítNumbîOfTasks
++;

485 if–
pxCuºítTCB
 =
NULL
 )

489 
pxCuºítTCB
 = 
pxNewTCB
;

491 if–
uxCuºítNumbîOfTasks
 =–
p‹tBASE_TYPE
 ) 1 )

496 
	`¥vInôüli£TaskLi°s
();

504 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

506 if–
pxCuºítTCB
->
uxPri‹ôy
 <= uxPriority )

508 
pxCuºítTCB
 = 
pxNewTCB
;

515 if–
pxNewTCB
->
uxPri‹ôy
 > 
uxT›U£dPri‹ôy
 )

517 
uxT›U£dPri‹ôy
 = 
pxNewTCB
->
uxPri‹ôy
;

520 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

523 
pxNewTCB
->
uxTCBNumbî
 = 
uxTaskNumbî
;

526 
uxTaskNumbî
++;

528 
	`¥vAddTaskToRódyQueue
–
pxNewTCB
 );

530 
xRëu∫
 = 
pdPASS
;

531 
	`p‹tSETUP_TCB
–
pxNewTCB
 );

532 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

534 
	`èskEXIT_CRITICAL
();

538 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

539 
	`åa˚TASK_CREATE_FAILED
();

542 if–
xRëu∫
 =
pdPASS
 )

544 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

548 if–
pxCuºítTCB
->
uxPri‹ôy
 < uxPriority )

550 
	`p‹tYIELD_WITHIN_API
();

555  
xRëu∫
;

556 
	}
}

559 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

561 
	$vTaskDñëe
–
xTaskH™dÀ
 
pxTaskToDñëe
 )

563 
tskTCB
 *
pxTCB
;

565 
	`èskENTER_CRITICAL
();

569 if–
pxTaskToDñëe
 =
pxCuºítTCB
 )

571 
pxTaskToDñëe
 = 
NULL
;

575 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTaskToDñëe
 );

581 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

584 if–
pxTCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 !
NULL
 )

586 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

589 
	`vLi°In£πEnd
––
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
, &–
pxTCB
->
xGíîicLi°Iãm
 ) );

594 ++
uxTasksDñëed
;

598 
uxTaskNumbî
++;

600 
	`åa˚TASK_DELETE
–
pxTCB
 );

602 
	`èskEXIT_CRITICAL
();

605 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

607 if––* ) 
pxTaskToDñëe
 =
NULL
 )

609 
	`p‹tYIELD_WITHIN_API
();

612 
	}
}

625 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

627 
	$vTaskDñayU¡û
–
p‹tTickTy≥
 * c⁄° 
pxPªviousWakeTime
,Ö‹tTickTy≥ 
xTimeIn¸emít
 )

629 
p‹tTickTy≥
 
xTimeToWake
;

630 
p‹tBASE_TYPE
 
xAÃódyYõlded
, 
xShouldDñay
 = 
pdFALSE
;

632 
	`c⁄figASSERT
–
pxPªviousWakeTime
 );

633 
	`c⁄figASSERT
––
xTimeIn¸emít
 > 0U ) );

635 
	`vTaskSu•ídAŒ
();

638 
xTimeToWake
 = *
pxPªviousWakeTime
 + 
xTimeIn¸emít
;

640 if–
xTickCou¡
 < *
pxPªviousWakeTime
 )

647 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) && ( xTimeToWakê> 
xTickCou¡
 ) )

649 
xShouldDñay
 = 
pdTRUE
;

657 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) || ( xTimeToWakê> 
xTickCou¡
 ) )

659 
xShouldDñay
 = 
pdTRUE
;

664 *
pxPªviousWakeTime
 = 
xTimeToWake
;

666 if–
xShouldDñay
 !
pdFALSE
 )

668 
	`åa˚TASK_DELAY_UNTIL
();

673 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

674 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

677 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

681 if–
xAÃódyYõlded
 =
pdFALSE
 )

683 
	`p‹tYIELD_WITHIN_API
();

685 
	}
}

690 #i‡–
INCLUDE_vTaskDñay
 == 1 )

692 
	$vTaskDñay
–
p‹tTickTy≥
 
xTicksToDñay
 )

694 
p‹tTickTy≥
 
xTimeToWake
;

695 sig√d 
p‹tBASE_TYPE
 
xAÃódyYõlded
 = 
pdFALSE
;

698 if–
xTicksToDñay
 > ( 
p‹tTickTy≥
 ) 0U )

700 
	`vTaskSu•ídAŒ
();

702 
	`åa˚TASK_DELAY
();

714 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToDñay
;

719 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

720 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

722 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

727 if–
xAÃódyYõlded
 =
pdFALSE
 )

729 
	`p‹tYIELD_WITHIN_API
();

731 
	}
}

736 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

738 
p‹tBASE_TYPE
 
	$uxTaskPri‹ôyGë
–
xTaskH™dÀ
 
pxTask
 )

740 
tskTCB
 *
pxTCB
;

741 
p‹tBASE_TYPE
 
uxRëu∫
;

743 
	`èskENTER_CRITICAL
();

747 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTask
 );

748 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

750 
	`èskEXIT_CRITICAL
();

752  
uxRëu∫
;

753 
	}
}

758 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

760 
	$vTaskPri‹ôySë
–
xTaskH™dÀ
 
pxTask
, 
p‹tBASE_TYPE
 
uxNewPri‹ôy
 )

762 
tskTCB
 *
pxTCB
;

763 
p‹tBASE_TYPE
 
uxCuºítPri‹ôy
;

764 
p‹tBASE_TYPE
 
xYõldRequúed
 = 
pdFALSE
;

766 
	`c⁄figASSERT
––
uxNewPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

769 if–
uxNewPri‹ôy
 >
c⁄figMAX_PRIORITIES
 )

771 
uxNewPri‹ôy
 = 
c⁄figMAX_PRIORITIES
 - ( 
p‹tBASE_TYPE
 ) 1U;

774 
	`èskENTER_CRITICAL
();

776 if–
pxTask
 =
pxCuºítTCB
 )

778 
pxTask
 = 
NULL
;

783 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTask
 );

785 
	`åa˚TASK_PRIORITY_SET
–
pxTCB
, 
uxNewPri‹ôy
 );

787 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

789 
uxCuºítPri‹ôy
 = 
pxTCB
->
uxBa£Pri‹ôy
;

793 
uxCuºítPri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

797 if–
uxCuºítPri‹ôy
 !
uxNewPri‹ôy
 )

801 if–
uxNewPri‹ôy
 > 
uxCuºítPri‹ôy
 )

803 if–
pxTask
 !
NULL
 )

809 
xYõldRequúed
 = 
pdTRUE
;

812 if–
pxTask
 =
NULL
 )

816 
xYõldRequúed
 = 
pdTRUE
;

821 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

825 if–
pxTCB
->
uxBa£Pri‹ôy
 =pxTCB->
uxPri‹ôy
 )

827 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

831 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxNewPri‹ôy
;

835 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

839 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
uxNewPri‹ôy
 ) );

845 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxCuºítPri‹ôy
 ] ), &–
pxTCB
->
xGíîicLi°Iãm
 ) ) )

850 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

851 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

854 if–
xYõldRequúed
 =
pdTRUE
 )

856 
	`p‹tYIELD_WITHIN_API
();

860 
	`èskEXIT_CRITICAL
();

861 
	}
}

866 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

868 
	$vTaskSu•íd
–
xTaskH™dÀ
 
pxTaskToSu•íd
 )

870 
tskTCB
 *
pxTCB
;

872 
	`èskENTER_CRITICAL
();

876 if–
pxTaskToSu•íd
 =
pxCuºítTCB
 )

878 
pxTaskToSu•íd
 = 
NULL
;

882 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTaskToSu•íd
 );

884 
	`åa˚TASK_SUSPEND
–
pxTCB
 );

887 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

890 if–
pxTCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 !
NULL
 )

892 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

895 
	`vLi°In£πEnd
––
xLi°
 * ) &
xSu•ídedTaskLi°
, &–
pxTCB
->
xGíîicLi°Iãm
 ) );

897 
	`èskEXIT_CRITICAL
();

899 if––* ) 
pxTaskToSu•íd
 =
NULL
 )

901 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

904 
	`p‹tYIELD_WITHIN_API
();

911 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =
uxCuºítNumbîOfTasks
 )

917 
pxCuºítTCB
 = 
NULL
;

921 
	`vTaskSwôchC⁄ãxt
();

925 
	}
}

930 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

932 sig√d 
p‹tBASE_TYPE
 
	$xTaskIsTaskSu•íded
–
xTaskH™dÀ
 
xTask
 )

934 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFALSE
;

935 c⁄° 
tskTCB
 * c⁄° 
pxTCB
 = (ÅskTCB * ) 
xTask
;

938 
	`c⁄figASSERT
–
xTask
 );

942 if–
	`li°IS_CONTAINED_WITHIN
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

945 if–
	`li°IS_CONTAINED_WITHIN
–&
xPídögRódyLi°
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) !
pdTRUE
 )

951 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) =
pdTRUE
 )

953 
xRëu∫
 = 
pdTRUE
;

958  
xRëu∫
;

959 
	}
}

964 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

966 
	$vTaskResume
–
xTaskH™dÀ
 
pxTaskToResume
 )

968 
tskTCB
 *
pxTCB
;

971 
	`c⁄figASSERT
–
pxTaskToResume
 );

975 
pxTCB
 = ( 
tskTCB
 * ) 
pxTaskToResume
;

979 if––
pxTCB
 !
NULL
 ) && (ÖxTCB !
pxCuºítTCB
 ) )

981 
	`èskENTER_CRITICAL
();

983 if–
	`xTaskIsTaskSu•íded
–
pxTCB
 ) =
pdTRUE
 )

985 
	`åa˚TASK_RESUME
–
pxTCB
 );

989 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

990 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

993 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

997 
	`p‹tYIELD_WITHIN_API
();

1001 
	`èskEXIT_CRITICAL
();

1003 
	}
}

1009 #i‡––
INCLUDE_xTaskResumeFromISR
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

1011 
p‹tBASE_TYPE
 
	$xTaskResumeFromISR
–
xTaskH™dÀ
 
pxTaskToResume
 )

1013 
p‹tBASE_TYPE
 
xYõldRequúed
 = 
pdFALSE
;

1014 
tskTCB
 *
pxTCB
;

1015 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

1017 
	`c⁄figASSERT
–
pxTaskToResume
 );

1019 
pxTCB
 = ( 
tskTCB
 * ) 
pxTaskToResume
;

1021 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1023 if–
	`xTaskIsTaskSu•íded
–
pxTCB
 ) =
pdTRUE
 )

1025 
	`åa˚TASK_RESUME_FROM_ISR
–
pxTCB
 );

1027 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1029 
xYõldRequúed
 = ( 
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority );

1030 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1031 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

1038 
	`vLi°In£πEnd
––
xLi°
 * ) &–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

1042 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1044  
xYõldRequúed
;

1045 
	}
}

1057 
	$vTaskSèπScheduÀr
( )

1059 
p‹tBASE_TYPE
 
xRëu∫
;

1062 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

1066 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
, ( sig√d * ) "IDLE", 
tskIDLE_STACK_SIZE
, ( * ) 
NULL
, ( 
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ), &
xIdÀTaskH™dÀ
 );

1071 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
, ( sig√d * ) "IDLE", 
tskIDLE_STACK_SIZE
, ( * ) 
NULL
, ( 
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ), NULL );

1075 #i‡–
c⁄figUSE_TIMERS
 == 1 )

1077 if–
xRëu∫
 =
pdPASS
 )

1079 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

1084 if–
xRëu∫
 =
pdPASS
 )

1094 
	`p‹tDISABLE_INTERRUPTS
();

1096 
xScheduÀrRu¬ög
 = 
pdTRUE
;

1097 
xTickCou¡
 = ( 
p‹tTickTy≥
 ) 0U;

1102 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

1106 if–
	`xP‹tSèπScheduÀr
(Ë!
pdFALSE
 )

1118 
	`c⁄figASSERT
–
xRëu∫
 );

1119 
	}
}

1122 
	$vTaskEndScheduÀr
( )

1127 
	`p‹tDISABLE_INTERRUPTS
();

1128 
xScheduÀrRu¬ög
 = 
pdFALSE
;

1129 
	`vP‹tEndScheduÀr
();

1130 
	}
}

1133 
	$vTaskSu•ídAŒ
( )

1137 ++
uxScheduÀrSu•íded
;

1138 
	}
}

1141 sig√d 
p‹tBASE_TYPE
 
	$xTaskResumeAŒ
( )

1143 
tskTCB
 *
pxTCB
;

1144 sig√d 
p‹tBASE_TYPE
 
xAÃódyYõlded
 = 
pdFALSE
;

1148 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 );

1155 
	`èskENTER_CRITICAL
();

1157 --
uxScheduÀrSu•íded
;

1159 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1161 if–
uxCuºítNumbîOfTasks
 > ( 
p‹tBASE_TYPE
 ) 0U )

1163 
p‹tBASE_TYPE
 
xYõldRequúed
 = 
pdFALSE
;

1167  
	`li°LIST_IS_EMPTY
––
xLi°
 * ) &
xPídögRódyLi°
 ) =
pdFALSE
 )

1169 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–––
xLi°
 * ) &
xPídögRódyLi°
 ) );

1170 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1171 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1172 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

1176 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1178 
xYõldRequúed
 = 
pdTRUE
;

1185 if–
uxMis£dTicks
 > ( 
p‹tBASE_TYPE
 ) 0U )

1187  
uxMis£dTicks
 > ( 
p‹tBASE_TYPE
 ) 0U )

1189 
	`vTaskIn¸emítTick
();

1190 --
uxMis£dTicks
;

1196 #i‡
c⁄figUSE_PREEMPTION
 == 1

1198 
xYõldRequúed
 = 
pdTRUE
;

1203 if––
xYõldRequúed
 =
pdTRUE
 ) || ( 
xMis£dYõld
 ==ÖdTRUE ) )

1205 
xAÃódyYõlded
 = 
pdTRUE
;

1206 
xMis£dYõld
 = 
pdFALSE
;

1207 
	`p‹tYIELD_WITHIN_API
();

1212 
	`èskEXIT_CRITICAL
();

1214  
xAÃódyYõlded
;

1215 
	}
}

1228 
p‹tTickTy≥
 
	$xTaskGëTickCou¡
( )

1230 
p‹tTickTy≥
 
xTicks
;

1233 
	`èskENTER_CRITICAL
();

1235 
xTicks
 = 
xTickCou¡
;

1237 
	`èskEXIT_CRITICAL
();

1239  
xTicks
;

1240 
	}
}

1243 
p‹tTickTy≥
 
	$xTaskGëTickCou¡FromISR
( )

1245 
p‹tTickTy≥
 
xRëu∫
;

1246 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

1248 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1249 
xRëu∫
 = 
xTickCou¡
;

1250 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1252  
xRëu∫
;

1253 
	}
}

1256 
p‹tBASE_TYPE
 
	$uxTaskGëNumbîOfTasks
( )

1260  
uxCuºítNumbîOfTasks
;

1261 
	}
}

1264 #i‡–
INCLUDE_pcTaskGëTaskName
 == 1 )

1266 sig√d *
	$pcTaskGëTaskName
–
xTaskH™dÀ
 
xTaskToQuîy
 )

1268 
tskTCB
 *
pxTCB
;

1271 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

1272 
	`c⁄figASSERT
–
pxTCB
 );

1273  &–
pxTCB
->
pcTaskName
[ 0 ] );

1274 
	}
}

1279 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1281 
	$vTaskLi°
–sig√d *
pcWrôeBuf„r
 )

1283 
p‹tBASE_TYPE
 
uxQueue
;

1288 
	`vTaskSu•ídAŒ
();

1293 *
pcWrôeBuf„r
 = ( signed ) 0x00;

1294 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( const * ) "\r\n" );

1296 
uxQueue
 = 
uxT›U£dPri‹ôy
 + ( 
p‹tBASE_TYPE
 ) 1U;

1300 
uxQueue
--;

1302 if–
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxQueue
 ] ) ) =
pdFALSE
 )

1304 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
tskREADY_CHAR
 );

1306 } 
uxQueue
 > ( Ë
tskIDLE_PRIORITY
 );

1308 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) =
pdFALSE
 )

1310 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxDñayedTaskLi°
, 
tskBLOCKED_CHAR
 );

1313 if–
	`li°LIST_IS_EMPTY
–
pxOvîÊowDñayedTaskLi°
 ) =
pdFALSE
 )

1315 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxOvîÊowDñayedTaskLi°
, 
tskBLOCKED_CHAR
 );

1318 #if–
INCLUDE_vTaskDñëe
 == 1 )

1320 if–
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 ) =
pdFALSE
 )

1322 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, &
xTasksWaôögTîmö©i⁄
, 
tskDELETED_CHAR
 );

1327 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1329 if–
	`li°LIST_IS_EMPTY
–&
xSu•ídedTaskLi°
 ) =
pdFALSE
 )

1331 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, &
xSu•ídedTaskLi°
, 
tskSUSPENDED_CHAR
 );

1333 
	}
}

1336 
xTaskResumeAŒ
();

1342 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

1344 
	$vTaskGëRunTimeSèts
–sig√d *
pcWrôeBuf„r
 )

1346 
p‹tBASE_TYPE
 
uxQueue
;

1347 
ulTŸÆRunTime
;

1352 
	`vTaskSu•ídAŒ
();

1354 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


1355 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

1357 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

1362 
ulTŸÆRunTime
 /= 100UL;

1368 *
pcWrôeBuf„r
 = ( signed ) 0x00;

1369 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( const * ) "\r\n" );

1371 
uxQueue
 = 
uxT›U£dPri‹ôy
 + ( 
p‹tBASE_TYPE
 ) 1U;

1375 
uxQueue
--;

1377 if–
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxQueue
 ] ) ) =
pdFALSE
 )

1379 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
ulTŸÆRunTime
 );

1381 } 
uxQueue
 > ( Ë
tskIDLE_PRIORITY
 );

1383 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) =
pdFALSE
 )

1385 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxDñayedTaskLi°
, 
ulTŸÆRunTime
 );

1388 if–
	`li°LIST_IS_EMPTY
–
pxOvîÊowDñayedTaskLi°
 ) =
pdFALSE
 )

1390 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxOvîÊowDñayedTaskLi°
, 
ulTŸÆRunTime
 );

1393 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1395 if–
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 ) =
pdFALSE
 )

1397 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, &
xTasksWaôögTîmö©i⁄
, 
ulTŸÆRunTime
 );

1402 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1404 if–
	`li°LIST_IS_EMPTY
–&
xSu•ídedTaskLi°
 ) =
pdFALSE
 )

1406 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, &
xSu•ídedTaskLi°
, 
ulTŸÆRunTime
 );

1411 
	`xTaskResumeAŒ
();

1412 
	}
}

1417 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

1419 
xTaskH™dÀ
 
	$xTaskGëIdÀTaskH™dÀ
( )

1423 
	`c⁄figASSERT
––
xIdÀTaskH™dÀ
 !
NULL
 ) );

1424  
xIdÀTaskH™dÀ
;

1425 
	}
}

1434 
	$vTaskIn¸emítTick
( )

1436 
tskTCB
 * 
pxTCB
;

1441 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1443 ++
xTickCou¡
;

1444 if–
xTickCou¡
 =–
p‹tTickTy≥
 ) 0U )

1446 
xLi°
 *
pxTemp
;

1451 
	`c⁄figASSERT
––
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) ) );

1453 
pxTemp
 = 
pxDñayedTaskLi°
;

1454 
pxDñayedTaskLi°
 = 
pxOvîÊowDñayedTaskLi°
;

1455 
pxOvîÊowDñayedTaskLi°
 = 
pxTemp
;

1456 
xNumOfOvîÊows
++;

1458 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

1465 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

1473 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

1474 
xNextTaskUnblockTime
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1479 
	`¥vCheckDñayedTasks
();

1483 ++
uxMis£dTicks
;

1487 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

1489 
	`vAµliˇti⁄TickHook
();

1494 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

1498 if–
uxMis£dTicks
 =–
p‹tBASE_TYPE
 ) 0U )

1500 
	`vAµliˇti⁄TickHook
();

1505 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

1506 
	}
}

1509 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1511 
	$vTaskSëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
, 
pdTASK_HOOK_CODE
 
pxHookFun˘i⁄
 )

1513 
tskTCB
 *
xTCB
;

1516 if–
xTask
 =
NULL
 )

1518 
xTCB
 = ( 
tskTCB
 * ) 
pxCuºítTCB
;

1522 
xTCB
 = ( 
tskTCB
 * ) 
xTask
;

1527 
	`èskENTER_CRITICAL
();

1528 
xTCB
->
pxTaskTag
 = 
pxHookFun˘i⁄
;

1529 
	`èskEXIT_CRITICAL
();

1530 
	}
}

1535 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1537 
pdTASK_HOOK_CODE
 
	$xTaskGëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
 )

1539 
tskTCB
 *
xTCB
;

1540 
pdTASK_HOOK_CODE
 
xRëu∫
;

1543 if–
xTask
 =
NULL
 )

1545 
xTCB
 = ( 
tskTCB
 * ) 
pxCuºítTCB
;

1549 
xTCB
 = ( 
tskTCB
 * ) 
xTask
;

1554 
	`èskENTER_CRITICAL
();

1555 
xRëu∫
 = 
xTCB
->
pxTaskTag
;

1556 
	`èskEXIT_CRITICAL
();

1558  
xRëu∫
;

1559 
	}
}

1564 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1566 
p‹tBASE_TYPE
 
	$xTaskCÆlAµliˇti⁄TaskHook
–
xTaskH™dÀ
 
xTask
, *
pvP¨amëî
 )

1568 
tskTCB
 *
xTCB
;

1569 
p‹tBASE_TYPE
 
xRëu∫
;

1572 if–
xTask
 =
NULL
 )

1574 
xTCB
 = ( 
tskTCB
 * ) 
pxCuºítTCB
;

1578 
xTCB
 = ( 
tskTCB
 * ) 
xTask
;

1581 if–
xTCB
->
pxTaskTag
 !
NULL
 )

1583 
xRëu∫
 = 
xTCB
->
	`pxTaskTag
–
pvP¨amëî
 );

1587 
xRëu∫
 = 
pdFAIL
;

1590  
xRëu∫
;

1591 
	}
}

1596 
	$vTaskSwôchC⁄ãxt
( )

1598 if–
uxScheduÀrSu•íded
 !–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1602 
xMis£dYõld
 = 
pdTRUE
;

1606 
	`åa˚TASK_SWITCHED_OUT
();

1608 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

1610 
ulTempCou¡î
;

1612 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


1613 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTempCou¡î
 );

1615 
ulTempCou¡î
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

1623 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTempCou¡î
 - 
ulTaskSwôchedInTime
 );

1624 
ulTaskSwôchedInTime
 = 
ulTempCou¡î
;

1628 
	`èskFIRST_CHECK_FOR_STACK_OVERFLOW
();

1629 
	`èskSECOND_CHECK_FOR_STACK_OVERFLOW
();

1632  
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›RódyPri‹ôy
 ] ) ) )

1634 
	`c⁄figASSERT
–
uxT›RódyPri‹ôy
 );

1635 --
uxT›RódyPri‹ôy
;

1640 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›RódyPri‹ôy
 ] ) );

1642 
	`åa˚TASK_SWITCHED_IN
();

1644 
	}
}

1647 
	$vTaskPœ˚OnEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1649 
p‹tTickTy≥
 
xTimeToWake
;

1651 
	`c⁄figASSERT
–
pxEvítLi°
 );

1659 
	`vLi°In£π
––
xLi°
 * ) 
pxEvítLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

1664 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

1667 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1669 if–
xTicksToWaô
 =
p‹tMAX_DELAY
 )

1674 
	`vLi°In£πEnd
––
xLi°
 * ) &
xSu•ídedTaskLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

1680 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

1681 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

1688 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

1689 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

1692 
	}
}

1695 #i‡
c⁄figUSE_TIMERS
 == 1

1697 
	$vTaskPœ˚OnEvítLi°Re°ri˘ed
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1699 
p‹tTickTy≥
 
xTimeToWake
;

1701 
	`c⁄figASSERT
–
pxEvítLi°
 );

1713 
	`vLi°In£πEnd
––
xLi°
 * ) 
pxEvítLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

1718 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

1722 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

1723 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

1724 
	}
}

1729 sig√d 
p‹tBASE_TYPE
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
 )

1731 
tskTCB
 *
pxUnblockedTCB
;

1732 
p‹tBASE_TYPE
 
xRëu∫
;

1747 
pxUnblockedTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

1748 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

1749 
	`vLi°Remove
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

1751 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1753 
	`vLi°Remove
–&–
pxUnblockedTCB
->
xGíîicLi°Iãm
 ) );

1754 
	`¥vAddTaskToRódyQueue
–
pxUnblockedTCB
 );

1760 
	`vLi°In£πEnd
––
xLi°
 * ) &–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

1763 if–
pxUnblockedTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1769 
xRëu∫
 = 
pdTRUE
;

1773 
xRëu∫
 = 
pdFALSE
;

1776  
xRëu∫
;

1777 
	}
}

1780 
	$vTaskSëTimeOutSèã
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
 )

1782 
	`c⁄figASSERT
–
pxTimeOut
 );

1783 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

1784 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

1785 
	}
}

1788 
p‹tBASE_TYPE
 
	$xTaskCheckF‹TimeOut
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
, 
p‹tTickTy≥
 * c⁄° 
pxTicksToWaô
 )

1790 
p‹tBASE_TYPE
 
xRëu∫
;

1792 
	`c⁄figASSERT
–
pxTimeOut
 );

1793 
	`c⁄figASSERT
–
pxTicksToWaô
 );

1795 
	`èskENTER_CRITICAL
();

1797 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1801 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

1803 
xRëu∫
 = 
pdFALSE
;

1808 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( ( 
p‹tTickTy≥
 ) 
xTickCou¡
 >–p‹tTickTy≥ )ÖxTimeOut->
xTimeOnE¡îög
 ) )

1814 
xRëu∫
 = 
pdTRUE
;

1816 if–––
p‹tTickTy≥
 ) ( (Ö‹tTickTy≥ ) 
xTickCou¡
 - (Ö‹tTickTy≥ ) 
pxTimeOut
->
xTimeOnE¡îög
 ) ) < (Ö‹tTickTy≥ ) *
pxTicksToWaô
 )

1819 *
pxTicksToWaô
 -––
p‹tTickTy≥
 ) 
xTickCou¡
 - (Ö‹tTickTy≥ ) 
pxTimeOut
->
xTimeOnE¡îög
 );

1820 
	`vTaskSëTimeOutSèã
–
pxTimeOut
 );

1821 
xRëu∫
 = 
pdFALSE
;

1825 
xRëu∫
 = 
pdTRUE
;

1828 
	`èskEXIT_CRITICAL
();

1830  
xRëu∫
;

1831 
	}
}

1834 
	$vTaskMis£dYõld
( )

1836 
xMis£dYõld
 = 
pdTRUE
;

1837 
	}
}

1840 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1841 
p‹tBASE_TYPE
 
	$uxTaskGëTaskNumbî
–
xTaskH™dÀ
 
xTask
 )

1843 
p‹tBASE_TYPE
 
uxRëu∫
;

1844 
tskTCB
 *
pxTCB
;

1846 if–
xTask
 !
NULL
 )

1848 
pxTCB
 = ( 
tskTCB
 * ) 
xTask
;

1849 
uxRëu∫
 = 
pxTCB
->
uxTaskNumbî
;

1853 
uxRëu∫
 = 0U;

1856  
uxRëu∫
;

1857 
	}
}

1861 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1862 
	$vTaskSëTaskNumbî
–
xTaskH™dÀ
 
xTask
, 
p‹tBASE_TYPE
 
uxH™dÀ
 )

1864 
tskTCB
 *
pxTCB
;

1866 if–
xTask
 !
NULL
 )

1868 
pxTCB
 = ( 
tskTCB
 * ) 
xTask
;

1869 
pxTCB
->
uxTaskNumbî
 = 
uxH™dÀ
;

1871 
	}
}

1886 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

1889 –Ë
pvP¨amëîs
;

1894 
	`¥vCheckTasksWaôögTîmö©i⁄
();

1896 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

1902 
	`èskYIELD
();

1906 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figIDLE_SHOULD_YIELD
 == 1 ) )

1917 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
p‹tBASE_TYPE
 ) 1 )

1919 
	`èskYIELD
();

1924 #i‡–
c⁄figUSE_IDLE_HOOK
 == 1 )

1926 
	`vAµliˇti⁄IdÀHook
( );

1933 
	`vAµliˇti⁄IdÀHook
();

1937 
	}
}

1951 
	$¥vInôüli£TCBV¨übÀs
–
tskTCB
 *
pxTCB
, c⁄° sig√d * c⁄° 
pcName
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
, 
usSèckDïth
 )

1954 #i‡
c⁄figMAX_TASK_NAME_LEN
 > 1

1957 
	`°∫˝y
––* ) 
pxTCB
->
pcTaskName
, ( c⁄° * ) 
pcName
, ( Ë
c⁄figMAX_TASK_NAME_LEN
 );

1960 
pxTCB
->
pcTaskName
[ ( Ë
c⁄figMAX_TASK_NAME_LEN
 - ( ) 1 ] = ( signed ) '\0';

1964 if–
uxPri‹ôy
 >
c⁄figMAX_PRIORITIES
 )

1966 
uxPri‹ôy
 = 
c⁄figMAX_PRIORITIES
 - ( 
p‹tBASE_TYPE
 ) 1U;

1969 
pxTCB
->
uxPri‹ôy
 = uxPriority;

1970 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1972 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

1976 
	`vLi°Inôüli£Iãm
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1977 
	`vLi°Inôüli£Iãm
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1981 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTCB
->
xGíîicLi°Iãm
 ),ÖxTCB );

1984 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
uxPri‹ôy
 );

1985 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTCB
->
xEvítLi°Iãm
 ),ÖxTCB );

1987 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

1989 
pxTCB
->
uxCrôiˇlNe°ög
 = ( 
p‹tBASE_TYPE
 ) 0U;

1993 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1995 
pxTCB
->
pxTaskTag
 = 
NULL
;

1999 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2001 
pxTCB
->
ulRunTimeCou¡î
 = 0UL;

2005 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

2007 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxTCB->
pxSèck
, 
usSèckDïth
 );

2011 –Ë
xRegi⁄s
;

2012 –Ë
usSèckDïth
;

2015 
	}
}

2018 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

2020 
	$vTaskAŒoˇãMPURegi⁄s
–
xTaskH™dÀ
 
xTaskToModify
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 )

2022 
tskTCB
 *
pxTCB
;

2024 if–
xTaskToModify
 =
pxCuºítTCB
 )

2026 
xTaskToModify
 = 
NULL
;

2030 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToModify
 );

2032 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
, 
NULL
, 0 );

2033 
	}
}

2037 
	$¥vInôüli£TaskLi°s
( )

2039 
p‹tBASE_TYPE
 
uxPri‹ôy
;

2041  
uxPri‹ôy
 = ( 
p‹tBASE_TYPE
 ) 0U; uxPri‹ôy < 
c⁄figMAX_PRIORITIES
; uxPriority++ )

2043 
	`vLi°Inôüli£
––
xLi°
 * ) &–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

2046 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedTaskLi°1
 );

2047 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedTaskLi°2
 );

2048 
	`vLi°Inôüli£
––
xLi°
 * ) &
xPídögRódyLi°
 );

2050 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2052 
	`vLi°Inôüli£
––
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
 );

2056 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2058 
	`vLi°Inôüli£
––
xLi°
 * ) &
xSu•ídedTaskLi°
 );

2064 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

2065 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

2066 
	}
}

2069 
	$¥vCheckTasksWaôögTîmö©i⁄
( )

2071 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2073 
p‹tBASE_TYPE
 
xLi°IsEm±y
;

2077 if–
uxTasksDñëed
 > ( 
p‹tBASE_TYPE
 ) 0U )

2079 
	`vTaskSu•ídAŒ
();

2080 
xLi°IsEm±y
 = 
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 );

2081 
	`xTaskResumeAŒ
();

2083 if–
xLi°IsEm±y
 =
pdFALSE
 )

2085 
tskTCB
 *
pxTCB
;

2087 
	`èskENTER_CRITICAL
();

2089 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–––
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
 ) );

2090 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2091 --
uxCuºítNumbîOfTasks
;

2092 --
uxTasksDñëed
;

2094 
	`èskEXIT_CRITICAL
();

2096 
	`¥vDñëeTCB
–
pxTCB
 );

2101 
	}
}

2104 
	$¥vAddCuºítTaskToDñayedLi°
–
p‹tTickTy≥
 
xTimeToWake
 )

2107 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

2109 if–
xTimeToWake
 < 
xTickCou¡
 )

2112 
	`vLi°In£π
––
xLi°
 * ) 
pxOvîÊowDñayedTaskLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2117 
	`vLi°In£π
––
xLi°
 * ) 
pxDñayedTaskLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2122 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

2124 
xNextTaskUnblockTime
 = 
xTimeToWake
;

2127 
	}
}

2130 
tskTCB
 *
	$¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
 )

2132 
tskTCB
 *
pxNewTCB
;

2136 
pxNewTCB
 = ( 
tskTCB
 * ) 
	`pvP‹tMÆloc
( (ÅskTCB ) );

2138 if–
pxNewTCB
 !
NULL
 )

2143 
pxNewTCB
->
pxSèck
 = ( 
p‹tSTACK_TYPE
 * ) 
	`pvP‹tMÆlocAlig√d
––––
size_t
 )
usSèckDïth
 ) * –p‹tSTACK_TYPE ) ), 
puxSèckBuf„r
 );

2145 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

2148 
	`vP‹tFªe
–
pxNewTCB
 );

2149 
pxNewTCB
 = 
NULL
;

2154 
	`mem£t
–
pxNewTCB
->
pxSèck
, ( Ë
tskSTACK_FILL_BYTE
, ( 
size_t
 ) 
usSèckDïth
 * –
p‹tSTACK_TYPE
 ) );

2158  
pxNewTCB
;

2159 
	}
}

2162 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2164 
	$¥vLi°TaskWôhöSögÀLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, sig√d 
cSètus
 )

2166 vﬁ©ûê
tskTCB
 *
pxNextTCB
, *
pxFú°TCB
;

2167 
usSèckRemaöög
;

2168 
PRIVILEGED_DATA
 
pcSètusSåög
[ 50 ];

2171 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2174 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2175 #i‡–
p‹tSTACK_GROWTH
 > 0 )

2177 
usSèckRemaöög
 = 
	`usTaskCheckFªeSèckS∑˚
––* ) 
pxNextTCB
->
pxEndOfSèck
 );

2181 
usSèckRemaöög
 = 
	`usTaskCheckFªeSèckS∑˚
––* ) 
pxNextTCB
->
pxSèck
 );

2185 
	`•rötf
–
pcSètusSåög
, ( * ) "%s\t\t%c\t%u\t%u\t%u\r\n", 
pxNextTCB
->
pcTaskName
, 
cSètus
, ( ËpxNextTCB->
uxPri‹ôy
, 
usSèckRemaöög
, ( ËpxNextTCB->
uxTCBNumbî
 );

2186 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( * ) 
pcSètusSåög
 );

2188 }  
pxNextTCB
 !
pxFú°TCB
 );

2189 
	}
}

2194 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2196 
	$¥vGíî©eRunTimeSètsF‹TasksInLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, 
ulTŸÆRunTime
 )

2198 vﬁ©ûê
tskTCB
 *
pxNextTCB
, *
pxFú°TCB
;

2199 
ulSètsAsPî˚¡age
;

2202 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2206 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2209 if–
ulTŸÆRunTime
 > 0UL )

2212 if–
pxNextTCB
->
ulRunTimeCou¡î
 == 0UL )

2215 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t0\t\t0%%\r\n", 
pxNextTCB
->
pcTaskName
 );

2222 
ulSètsAsPî˚¡age
 = 
pxNextTCB
->
ulRunTimeCou¡î
 / 
ulTŸÆRunTime
;

2224 if–
ulSètsAsPî˚¡age
 > 0UL )

2226 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


2228 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%lu\t\t%lu%%\r\n", 
pxNextTCB
->
pcTaskName
,ÖxNextTCB->
ulRunTimeCou¡î
, 
ulSètsAsPî˚¡age
 );

2234 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%u\t\t%u%%\r\n", 
pxNextTCB
->
pcTaskName
, ( ËpxNextTCB->
ulRunTimeCou¡î
, ( Ë
ulSètsAsPî˚¡age
 );

2242 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


2244 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%lu\t\t<1%%\r\n", 
pxNextTCB
->
pcTaskName
,ÖxNextTCB->
ulRunTimeCou¡î
 );

2250 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%u\t\t<1%%\r\n", 
pxNextTCB
->
pcTaskName
, ( ËpxNextTCB->
ulRunTimeCou¡î
 );

2256 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( * ) 
pcSètsSåög
 );

2259 }  
pxNextTCB
 !
pxFú°TCB
 );

2260 
	}
}

2265 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

2267 
	$usTaskCheckFªeSèckS∑˚
–c⁄° * 
pucSèckByã
 )

2269 
usCou¡
 = 0U;

2271  *
pucSèckByã
 =
tskSTACK_FILL_BYTE
 )

2273 
pucSèckByã
 -
p‹tSTACK_GROWTH
;

2274 
usCou¡
++;

2277 
usCou¡
 /–
p‹tSTACK_TYPE
 );

2279  
usCou¡
;

2280 
	}
}

2285 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

2287 
p‹tBASE_TYPE
 
	$uxTaskGëSèckHighW©îM¨k
–
xTaskH™dÀ
 
xTask
 )

2289 
tskTCB
 *
pxTCB
;

2290 *
pcEndOfSèck
;

2291 
p‹tBASE_TYPE
 
uxRëu∫
;

2293 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

2295 #i‡
p‹tSTACK_GROWTH
 < 0

2297 
pcEndOfSèck
 = ( * ) 
pxTCB
->
pxSèck
;

2301 
pcEndOfSèck
 = ( * ) 
pxTCB
->
pxEndOfSèck
;

2305 
uxRëu∫
 = ( 
p‹tBASE_TYPE
 ) 
	`usTaskCheckFªeSèckS∑˚
–
pcEndOfSèck
 );

2307  
uxRëu∫
;

2308 
	}
}

2313 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2315 
	$¥vDñëeTCB
–
tskTCB
 *
pxTCB
 )

2320 
	`p‹tCLEAN_UP_TCB
–
pxTCB
 );

2324 
	`vP‹tFªeAlig√d
–
pxTCB
->
pxSèck
 );

2325 
	`vP‹tFªe
–
pxTCB
 );

2326 
	}
}

2333 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

2335 
xTaskH™dÀ
 
	$xTaskGëCuºítTaskH™dÀ
( )

2337 
xTaskH™dÀ
 
xRëu∫
;

2342 
xRëu∫
 = 
pxCuºítTCB
;

2344  
xRëu∫
;

2345 
	}
}

2351 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

2353 
p‹tBASE_TYPE
 
	$xTaskGëScheduÀrSèã
( )

2355 
p‹tBASE_TYPE
 
xRëu∫
;

2357 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

2359 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

2363 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

2365 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

2369 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

2373  
xRëu∫
;

2374 
	}
}

2379 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2381 
	$vTaskPri‹ôyInhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 )

2383 
tskTCB
 * c⁄° 
pxTCB
 = (ÅskTCB * ) 
pxMuãxHﬁdî
;

2385 
	`c⁄figASSERT
–
pxMuãxHﬁdî
 );

2387 if–
pxTCB
->
uxPri‹ôy
 < 
pxCuºítTCB
->uxPriority )

2390 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
pxCuºítTCB
->
uxPri‹ôy
 );

2394 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
pxTCB
->
uxPri‹ôy
 ] ), &–pxTCB->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

2396 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2399 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

2400 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

2405 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

2408 
	`åa˚TASK_PRIORITY_INHERIT
–
pxTCB
, 
pxCuºítTCB
->
uxPri‹ôy
 );

2410 
	}
}

2415 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2417 
	$vTaskPri‹ôyDisöhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 )

2419 
tskTCB
 * c⁄° 
pxTCB
 = (ÅskTCB * ) 
pxMuãxHﬁdî
;

2421 if–
pxMuãxHﬁdî
 !
NULL
 )

2423 if–
pxTCB
->
uxPri‹ôy
 !pxTCB->
uxBa£Pri‹ôy
 )

2427 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2431 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

2432 
pxTCB
->
uxPri‹ôy
 =ÖxTCB->
uxBa£Pri‹ôy
;

2433 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 )ÖxTCB->
uxPri‹ôy
 );

2434 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

2437 
	}
}

2442 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

2444 
	$vTaskE¡îCrôiˇl
( )

2446 
	`p‹tDISABLE_INTERRUPTS
();

2448 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

2450 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )++;

2452 
	}
}

2457 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

2459 
	$vTaskExôCrôiˇl
( )

2461 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

2463 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 > 0U )

2465 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )--;

2467 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 0U )

2469 
	`p‹tENABLE_INTERRUPTS
();

2473 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/timers.c

70 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

74 
	~"queue.h
"

75 
	~"timîs.h
"

77 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


83 #i‡–
c⁄figUSE_TIMERS
 == 1 )

86 
	#tmrNO_DELAY
 ( 
p‹tTickTy≥
 ) 0U

	)

89 
	stmrTimîC⁄åﬁ


91 c⁄° sig√d *
	mpcTimîName
;

92 
xLi°Iãm
 
	mxTimîLi°Iãm
;

93 
p‹tTickTy≥
 
	mxTimîPîiodInTicks
;

94 
p‹tBASE_TYPE
 
	muxAutoRñﬂd
;

95 *
	mpvTimîID
;

96 
tmrTIMER_CALLBACK
 
	mpxCÆlbackFun˘i⁄
;

97 } 
	txTIMER
;

101 
	stmrTimîQueueMesßge


103 
p‹tBASE_TYPE
 
	mxMesßgeID
;

104 
p‹tTickTy≥
 
	mxMesßgeVÆue
;

105 
xTIMER
 * 
	mpxTimî
;

106 } 
	txTIMER_MESSAGE
;

112 
PRIVILEGED_DATA
 
xLi°
 
	gxA˘iveTimîLi°1
;

113 
PRIVILEGED_DATA
 
xLi°
 
	gxA˘iveTimîLi°2
;

114 
PRIVILEGED_DATA
 
xLi°
 *
	gpxCuºítTimîLi°
;

115 
PRIVILEGED_DATA
 
xLi°
 *
	gpxOvîÊowTimîLi°
;

118 
PRIVILEGED_DATA
 
xQueueH™dÀ
 
	gxTimîQueue
 = 
NULL
;

120 #i‡–
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 == 1 )

122 
PRIVILEGED_DATA
 
xTaskH™dÀ
 
	gxTimîTaskH™dÀ
 = 
NULL
;

132 
	$¥vCheckF‹VÆidLi°AndQueue
–Ë
PRIVILEGED_FUNCTION
;

139 
	$¥vTimîTask
–*
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

145 
	$¥vPro˚ssRe˚ivedComm™ds
–Ë
PRIVILEGED_FUNCTION
;

151 
p‹tBASE_TYPE
 
	$¥vIn£πTimîInA˘iveLi°
–
xTIMER
 *
pxTimî
, 
p‹tTickTy≥
 
xNextExpúyTime
,Ö‹tTickTy≥ 
xTimeNow
,Ö‹tTickTy≥ 
xComm™dTime
 ) 
PRIVILEGED_FUNCTION
;

157 
	$¥vPro˚ssExpúedTimî
–
p‹tTickTy≥
 
xNextExpúeTime
,Ö‹tTickTy≥ 
xTimeNow
 ) 
PRIVILEGED_FUNCTION
;

163 
	$¥vSwôchTimîLi°s
–
p‹tTickTy≥
 
xLa°Time
 ) 
PRIVILEGED_FUNCTION
;

169 
p‹tTickTy≥
 
	$¥vSam∂eTimeNow
–
p‹tBASE_TYPE
 *
pxTimîLi°sWîeSwôched
 ) 
PRIVILEGED_FUNCTION
;

177 
p‹tTickTy≥
 
	$¥vGëNextExpúeTime
–
p‹tBASE_TYPE
 *
pxLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

183 
	$¥vPro˚ssTimîOrBlockTask
–
p‹tTickTy≥
 
xNextExpúeTime
, 
p‹tBASE_TYPE
 
xLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

187 
p‹tBASE_TYPE
 
	$xTimîCª©eTimîTask
( )

189 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFAIL
;

195 
	`¥vCheckF‹VÆidLi°AndQueue
();

197 if–
xTimîQueue
 !
NULL
 )

199 #i‡–
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 == 1 )

203 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
, ( c⁄° sig√d * ) "Tm∏Svc", ( Ë
c⁄figTIMER_TASK_STACK_DEPTH
, 
NULL
, ( 
p‹tBASE_TYPE
 ) 
c⁄figTIMER_TASK_PRIORITY
, &
xTimîTaskH™dÀ
 );

208 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
, ( c⁄° sig√d * ) "Tm∏Svc", ( Ë
c⁄figTIMER_TASK_STACK_DEPTH
, 
NULL
, ( 
p‹tBASE_TYPE
 ) 
c⁄figTIMER_TASK_PRIORITY
, NULL);

213 
	`c⁄figASSERT
–
xRëu∫
 );

214  
xRëu∫
;

215 
	}
}

218 
xTimîH™dÀ
 
	$xTimîCª©e
–c⁄° sig√d *
pcTimîName
, 
p‹tTickTy≥
 
xTimîPîiodInTicks
, 
p‹tBASE_TYPE
 
uxAutoRñﬂd
, *
pvTimîID
, 
tmrTIMER_CALLBACK
 
pxCÆlbackFun˘i⁄
 )

220 
xTIMER
 *
pxNewTimî
;

223 if–
xTimîPîiodInTicks
 =–
p‹tTickTy≥
 ) 0U )

225 
pxNewTimî
 = 
NULL
;

226 
	`c⁄figASSERT
––
xTimîPîiodInTicks
 > 0 ) );

230 
pxNewTimî
 = ( 
xTIMER
 * ) 
	`pvP‹tMÆloc
( ( xTIMER ) );

231 if–
pxNewTimî
 !
NULL
 )

235 
	`¥vCheckF‹VÆidLi°AndQueue
();

238 
pxNewTimî
->
pcTimîName
 =ÖcTimerName;

239 
pxNewTimî
->
xTimîPîiodInTicks
 = xTimerPeriodInTicks;

240 
pxNewTimî
->
uxAutoRñﬂd
 = uxAutoReload;

241 
pxNewTimî
->
pvTimîID
 =ÖvTimerID;

242 
pxNewTimî
->
pxCÆlbackFun˘i⁄
 =ÖxCallbackFunction;

243 
	`vLi°Inôüli£Iãm
–&–
pxNewTimî
->
xTimîLi°Iãm
 ) );

245 
	`åa˚TIMER_CREATE
–
pxNewTimî
 );

249 
	`åa˚TIMER_CREATE_FAILED
();

253  ( 
xTimîH™dÀ
 ) 
pxNewTimî
;

254 
	}
}

257 
p‹tBASE_TYPE
 
	$xTimîGíîicComm™d
–
xTimîH™dÀ
 
xTimî
, 
p‹tBASE_TYPE
 
xComm™dID
, 
p‹tTickTy≥
 
xO±i⁄ÆVÆue
, sig√dÖ‹tBASE_TYPE *
pxHighîPri‹ôyTaskWokí
,Ö‹tTickTy≥ 
xBlockTime
 )

259 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFAIL
;

260 
xTIMER_MESSAGE
 
xMesßge
;

264 if–
xTimîQueue
 !
NULL
 )

267 
xMesßge
.
xMesßgeID
 = 
xComm™dID
;

268 
xMesßge
.
xMesßgeVÆue
 = 
xO±i⁄ÆVÆue
;

269 
xMesßge
.
pxTimî
 = ( 
xTIMER
 * ) 
xTimî
;

271 if–
pxHighîPri‹ôyTaskWokí
 =
NULL
 )

273 if–
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_RUNNING
 )

275 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xBlockTime
 );

279 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 );

284 
xRëu∫
 = 
	`xQueueSídToBackFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

287 
	`åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xComm™dID
, 
xO±i⁄ÆVÆue
, 
xRëu∫
 );

290  
xRëu∫
;

291 
	}
}

294 #i‡–
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 == 1 )

296 
xTaskH™dÀ
 
	$xTimîGëTimîD´m⁄TaskH™dÀ
( )

300 
	`c⁄figASSERT
––
xTimîTaskH™dÀ
 !
NULL
 ) );

301  
xTimîTaskH™dÀ
;

302 
	}
}

307 
	$¥vPro˚ssExpúedTimî
–
p‹tTickTy≥
 
xNextExpúeTime
,Ö‹tTickTy≥ 
xTimeNow
 )

309 
xTIMER
 *
pxTimî
;

310 
p‹tBASE_TYPE
 
xResu…
;

314 
pxTimî
 = ( 
xTIMER
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

315 
	`vLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

316 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

320 if–
pxTimî
->
uxAutoRñﬂd
 =–
p‹tBASE_TYPE
 ) 
pdTRUE
 )

328 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xNextExpúeTime
 +ÖxTimî->
xTimîPîiodInTicks
 ), 
xTimeNow
, xNextExpúeTimêË=
pdTRUE
 )

332 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

333 
	`c⁄figASSERT
–
xResu…
 );

334 –Ë
xResu…
;

339 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
xTimîH™dÀ
 )ÖxTimer );

340 
	}
}

343 
	$¥vTimîTask
–*
pvP¨amëîs
 )

345 
p‹tTickTy≥
 
xNextExpúeTime
;

346 
p‹tBASE_TYPE
 
xLi°WasEm±y
;

349 –Ë
pvP¨amëîs
;

355 
xNextExpúeTime
 = 
	`¥vGëNextExpúeTime
–&
xLi°WasEm±y
 );

359 
	`¥vPro˚ssTimîOrBlockTask
–
xNextExpúeTime
, 
xLi°WasEm±y
 );

362 
	`¥vPro˚ssRe˚ivedComm™ds
();

364 
	}
}

367 
	$¥vPro˚ssTimîOrBlockTask
–
p‹tTickTy≥
 
xNextExpúeTime
, 
p‹tBASE_TYPE
 
xLi°WasEm±y
 )

369 
p‹tTickTy≥
 
xTimeNow
;

370 
p‹tBASE_TYPE
 
xTimîLi°sWîeSwôched
;

372 
	`vTaskSu•ídAŒ
();

379 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

380 if–
xTimîLi°sWîeSwôched
 =
pdFALSE
 )

383 if––
xLi°WasEm±y
 =
pdFALSE
 ) && ( 
xNextExpúeTime
 <
xTimeNow
 ) )

385 
	`xTaskResumeAŒ
();

386 
	`¥vPro˚ssExpúedTimî
–
xNextExpúeTime
, 
xTimeNow
 );

396 
	`vQueueWaôF‹MesßgeRe°ri˘ed
–
xTimîQueue
, ( 
xNextExpúeTime
 - 
xTimeNow
 ) );

398 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

404 
	`p‹tYIELD_WITHIN_API
();

410 
	`xTaskResumeAŒ
();

413 
	}
}

416 
p‹tTickTy≥
 
	$¥vGëNextExpúeTime
–
p‹tBASE_TYPE
 *
pxLi°WasEm±y
 )

418 
p‹tTickTy≥
 
xNextExpúeTime
;

427 *
pxLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 );

428 if–*
pxLi°WasEm±y
 =
pdFALSE
 )

430 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

435 
xNextExpúeTime
 = ( 
p‹tTickTy≥
 ) 0U;

438  
xNextExpúeTime
;

439 
	}
}

442 
p‹tTickTy≥
 
	$¥vSam∂eTimeNow
–
p‹tBASE_TYPE
 *
pxTimîLi°sWîeSwôched
 )

444 
p‹tTickTy≥
 
xTimeNow
;

445 
p‹tTickTy≥
 
xLa°Time
 = (ÖortTickType ) 0U;

447 
xTimeNow
 = 
	`xTaskGëTickCou¡
();

449 if–
xTimeNow
 < 
xLa°Time
 )

451 
	`¥vSwôchTimîLi°s
–
xLa°Time
 );

452 *
pxTimîLi°sWîeSwôched
 = 
pdTRUE
;

456 *
pxTimîLi°sWîeSwôched
 = 
pdFALSE
;

459 
xLa°Time
 = 
xTimeNow
;

461  
xTimeNow
;

462 
	}
}

465 
p‹tBASE_TYPE
 
	$¥vIn£πTimîInA˘iveLi°
–
xTIMER
 *
pxTimî
, 
p‹tTickTy≥
 
xNextExpúyTime
,Ö‹tTickTy≥ 
xTimeNow
,Ö‹tTickTy≥ 
xComm™dTime
 )

467 
p‹tBASE_TYPE
 
xPro˚ssTimîNow
 = 
pdFALSE
;

469 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xNextExpúyTime
 );

470 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

472 if–
xNextExpúyTime
 <
xTimeNow
 )

476 if–––
p‹tTickTy≥
 ) ( 
xTimeNow
 - 
xComm™dTime
 ) ) >
pxTimî
->
xTimîPîiodInTicks
 )

480 
xPro˚ssTimîNow
 = 
pdTRUE
;

484 
	`vLi°In£π
–
pxOvîÊowTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

489 if––
xTimeNow
 < 
xComm™dTime
 ) && ( 
xNextExpúyTime
 >= xCommandTime ) )

494 
xPro˚ssTimîNow
 = 
pdTRUE
;

498 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

502  
xPro˚ssTimîNow
;

503 
	}
}

506 
	$¥vPro˚ssRe˚ivedComm™ds
( )

508 
xTIMER_MESSAGE
 
xMesßge
;

509 
xTIMER
 *
pxTimî
;

510 
p‹tBASE_TYPE
 
xTimîLi°sWîeSwôched
, 
xResu…
;

511 
p‹tTickTy≥
 
xTimeNow
;

515 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

517  
	`xQueueRe˚ive
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 ) !
pdFAIL
 )

519 
pxTimî
 = 
xMesßge
.pxTimer;

524 if–
pxTimî
 !
NULL
 )

526 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) =
pdFALSE
 )

529 
	`vLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

533 
	`åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßge
.
xMesßgeID
, xMesßge.
xMesßgeVÆue
 );

535  
xMesßge
.
xMesßgeID
 )

537 
tmrCOMMAND_START
 :

539 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, 
xMesßge
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
xTimeNow
, xMesßge.xMesßgeVÆuêË=
pdTRUE
 )

543 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
xTimîH™dÀ
 )ÖxTimer );

545 if–
pxTimî
->
uxAutoRñﬂd
 =–
p‹tBASE_TYPE
 ) 
pdTRUE
 )

547 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START
, 
xMesßge
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
NULL
, 
tmrNO_DELAY
 );

548 
	`c⁄figASSERT
–
xResu…
 );

549 –Ë
xResu…
;

554 
tmrCOMMAND_STOP
 :

559 
tmrCOMMAND_CHANGE_PERIOD
 :

560 
pxTimî
->
xTimîPîiodInTicks
 = 
xMesßge
.
xMesßgeVÆue
;

561 
	`c⁄figASSERT
––
pxTimî
->
xTimîPîiodInTicks
 > 0 ) );

562 
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xTimeNow
 +ÖxTimî->
xTimîPîiodInTicks
 ), xTimeNow, xTimeNow );

565 
tmrCOMMAND_DELETE
 :

568 
	`vP‹tFªe
–
pxTimî
 );

576 
	}
}

579 
	$¥vSwôchTimîLi°s
–
p‹tTickTy≥
 
xLa°Time
 )

581 
p‹tTickTy≥
 
xNextExpúeTime
, 
xRñﬂdTime
;

582 
xLi°
 *
pxTemp
;

583 
xTIMER
 *
pxTimî
;

584 
p‹tBASE_TYPE
 
xResu…
;

587 –Ë
xLa°Time
;

593  
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 ) =
pdFALSE
 )

595 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

598 
pxTimî
 = ( 
xTIMER
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

599 
	`vLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

604 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
xTimîH™dÀ
 )ÖxTimer );

606 if–
pxTimî
->
uxAutoRñﬂd
 =–
p‹tBASE_TYPE
 ) 
pdTRUE
 )

614 
xRñﬂdTime
 = ( 
xNextExpúeTime
 + 
pxTimî
->
xTimîPîiodInTicks
 );

615 if–
xRñﬂdTime
 > 
xNextExpúeTime
 )

617 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xRñﬂdTime
 );

618 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

619 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

623 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

624 
	`c⁄figASSERT
–
xResu…
 );

625 –Ë
xResu…
;

630 
pxTemp
 = 
pxCuºítTimîLi°
;

631 
pxCuºítTimîLi°
 = 
pxOvîÊowTimîLi°
;

632 
pxOvîÊowTimîLi°
 = 
pxTemp
;

633 
	}
}

636 
	$¥vCheckF‹VÆidLi°AndQueue
( )

641 
	`èskENTER_CRITICAL
();

643 if–
xTimîQueue
 =
NULL
 )

645 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°1
 );

646 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°2
 );

647 
pxCuºítTimîLi°
 = &
xA˘iveTimîLi°1
;

648 
pxOvîÊowTimîLi°
 = &
xA˘iveTimîLi°2
;

649 
xTimîQueue
 = 
	`xQueueCª©e
––
p‹tBASE_TYPE
 ) 
c⁄figTIMER_QUEUE_LENGTH
, –
xTIMER_MESSAGE
 ) );

652 
	`èskEXIT_CRITICAL
();

653 
	}
}

656 
p‹tBASE_TYPE
 
	$xTimîIsTimîA˘ive
–
xTimîH™dÀ
 
xTimî
 )

658 
p‹tBASE_TYPE
 
xTimîIsInA˘iveLi°
;

659 
xTIMER
 *
pxTimî
 = ( xTIMER * ) 
xTimî
;

662 
	`èskENTER_CRITICAL
();

667 
xTimîIsInA˘iveLi°
 = !–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) );

669 
	`èskEXIT_CRITICAL
();

671  
xTimîIsInA˘iveLi°
;

672 
	}
}

675 *
	$pvTimîGëTimîID
–
xTimîH™dÀ
 
xTimî
 )

677 
xTIMER
 *
pxTimî
 = ( xTIMER * ) 
xTimî
;

679  
pxTimî
->
pvTimîID
;

680 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/misc.h

24 #i‚de‡
__MISC_H


25 
	#__MISC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt8_t
 
NVIC_IRQCh™√l
;

57 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

61 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

65 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

68 } 
	tNVIC_InôTy≥Def
;

115 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

116 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

117 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
) || \

118 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

	)

127 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

128 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

129 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

130 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
) || \

131 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

132 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

	)

141 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

143 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

145 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

147 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

149 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

152 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
) || \

153 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

154 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

155 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

156 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

	)

158 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

160 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

162 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

172 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

173 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

174 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
) || \

175 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

	)

196 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

197 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

198 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

199 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

200 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

202 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h

24 #i‚de‡
__STM32F10x_ADC_H


25 
	#__STM32F10x_ADC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
ADC_Mode
;

56 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

60 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

68 
uöt32_t
 
ADC_D©aAlign
;

71 
uöt8_t
 
ADC_NbrOfCh™√l
;

74 }
	tADC_InôTy≥Def
;

83 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

84 ((
PERIPH
Ë=
ADC2
) || \

85 ((
PERIPH
Ë=
ADC3
))

	)

87 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

88 ((
PERIPH
Ë=
ADC3
))

	)

94 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

95 
	#ADC_Mode_RegInjecSimu…
 ((
uöt32_t
)0x00010000)

	)

96 
	#ADC_Mode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00020000)

	)

97 
	#ADC_Mode_InjecSimu…_Fa°I¡îl
 ((
uöt32_t
)0x00030000)

	)

98 
	#ADC_Mode_InjecSimu…_SlowI¡îl
 ((
uöt32_t
)0x00040000)

	)

99 
	#ADC_Mode_InjecSimu…
 ((
uöt32_t
)0x00050000)

	)

100 
	#ADC_Mode_RegSimu…
 ((
uöt32_t
)0x00060000)

	)

101 
	#ADC_Mode_Fa°I¡îl
 ((
uöt32_t
)0x00070000)

	)

102 
	#ADC_Mode_SlowI¡îl
 ((
uöt32_t
)0x00080000)

	)

103 
	#ADC_Mode_A…îTrig
 ((
uöt32_t
)0x00090000)

	)

105 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
) || \

106 ((
MODE
Ë=
ADC_Mode_RegInjecSimu…
) || \

107 ((
MODE
Ë=
ADC_Mode_RegSimu…_A…îTrig
) || \

108 ((
MODE
Ë=
ADC_Mode_InjecSimu…_Fa°I¡îl
) || \

109 ((
MODE
Ë=
ADC_Mode_InjecSimu…_SlowI¡îl
) || \

110 ((
MODE
Ë=
ADC_Mode_InjecSimu…
) || \

111 ((
MODE
Ë=
ADC_Mode_RegSimu…
) || \

112 ((
MODE
Ë=
ADC_Mode_Fa°I¡îl
) || \

113 ((
MODE
Ë=
ADC_Mode_SlowI¡îl
) || \

114 ((
MODE
Ë=
ADC_Mode_A…îTrig
))

	)

123 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000Ë

	)

124 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x00020000Ë

	)

125 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x00060000Ë

	)

126 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

127 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x000A0000Ë

	)

128 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
 ((
uöt32_t
)0x000C0000Ë

	)

130 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x00040000Ë

	)

131 
	#ADC_Exã∫ÆTrigC⁄v_N⁄e
 ((
uöt32_t
)0x000E0000Ë

	)

133 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x00000000Ë

	)

134 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x00020000Ë

	)

135 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x00060000Ë

	)

136 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x00080000Ë

	)

137 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x000A0000Ë

	)

138 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x000C0000Ë

	)

140 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
) || \

141 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

142 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

143 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

144 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

145 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

146 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11_TIM8_TRGO
) || \

147 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_N⁄e
) || \

148 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

149 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

150 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

151 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

152 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

153 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
))

	)

162 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

163 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

164 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
) || \

165 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

	)

174 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

175 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

176 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

177 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

178 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

179 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

180 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

181 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

182 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

183 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

184 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

185 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

186 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

187 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

188 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

189 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

190 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

191 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

193 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

194 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

196 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
) || \

197 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

198 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

199 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

200 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

201 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

202 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

203 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

204 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
))

	)

213 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00)

	)

214 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x01)

	)

215 
	#ADC_Sam∂eTime_13Cy˛es5
 ((
uöt8_t
)0x02)

	)

216 
	#ADC_Sam∂eTime_28Cy˛es5
 ((
uöt8_t
)0x03)

	)

217 
	#ADC_Sam∂eTime_41Cy˛es5
 ((
uöt8_t
)0x04)

	)

218 
	#ADC_Sam∂eTime_55Cy˛es5
 ((
uöt8_t
)0x05)

	)

219 
	#ADC_Sam∂eTime_71Cy˛es5
 ((
uöt8_t
)0x06)

	)

220 
	#ADC_Sam∂eTime_239Cy˛es5
 ((
uöt8_t
)0x07)

	)

221 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
) || \

222 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

223 ((
TIME
Ë=
ADC_Sam∂eTime_13Cy˛es5
) || \

224 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es5
) || \

225 ((
TIME
Ë=
ADC_Sam∂eTime_41Cy˛es5
) || \

226 ((
TIME
Ë=
ADC_Sam∂eTime_55Cy˛es5
) || \

227 ((
TIME
Ë=
ADC_Sam∂eTime_71Cy˛es5
) || \

228 ((
TIME
Ë=
ADC_Sam∂eTime_239Cy˛es5
))

	)

237 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00002000Ë

	)

238 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00003000Ë

	)

239 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00004000Ë

	)

240 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

241 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
 ((
uöt32_t
)0x00006000Ë

	)

243 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00000000Ë

	)

244 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00001000Ë

	)

245 
	#ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
 ((
uöt32_t
)0x00007000Ë

	)

247 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00002000Ë

	)

248 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x00003000Ë

	)

249 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x00004000Ë

	)

250 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x00005000Ë

	)

251 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x00006000Ë

	)

253 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

254 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

255 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

256 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

257 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

258 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

259 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15_TIM8_CC4
) || \

260 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_N⁄e
) || \

261 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

262 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

263 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

264 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

265 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
))

	)

274 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

275 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

276 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

277 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

278 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
) || \

279 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

280 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

281 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

	)

290 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

291 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

292 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

293 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

294 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

295 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

296 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

298 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
) || \

299 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

300 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

301 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

302 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

303 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

304 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

	)

313 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0220)

	)

314 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0140)

	)

315 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0480)

	)

317 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF81FË=0x00Ë&& ((ITË!0x00))

	)

319 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
) || \

320 ((
IT
Ë=
ADC_IT_JEOC
))

	)

329 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

330 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

331 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

332 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

333 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

334 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((FLAGË!0x00))

	)

335 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
) || \

336 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

337 ((
FLAG
Ë=
ADC_FLAG_STRT
))

	)

346 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

356 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

366 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

376 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

387 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

396 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

406 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

428 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

429 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

430 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

431 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

435 
FœgSètus
 
ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

436 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

437 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

438 
ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

440 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

441 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

442 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

443 
ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

445 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
();

446 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

448 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

449 
ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

452 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

453 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

454 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

455 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

456 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

457 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

458 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

459 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

461 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

462 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

463 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

465 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h

24 #i‚de‡
__STM32F10x_BKP_H


25 
	#__STM32F10x_BKP_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#BKP_Tam≥rPöLevñ_High
 ((
uöt16_t
)0x0000)

	)

59 
	#BKP_Tam≥rPöLevñ_Low
 ((
uöt16_t
)0x0001)

	)

60 
	#IS_BKP_TAMPER_PIN_LEVEL
(
LEVEL
Ë(((LEVELË=
BKP_Tam≥rPöLevñ_High
) || \

61 ((
LEVEL
Ë=
BKP_Tam≥rPöLevñ_Low
))

	)

70 
	#BKP_RTCOuçutSour˚_N⁄e
 ((
uöt16_t
)0x0000)

	)

71 
	#BKP_RTCOuçutSour˚_CÆibClock
 ((
uöt16_t
)0x0080)

	)

72 
	#BKP_RTCOuçutSour˚_Aœrm
 ((
uöt16_t
)0x0100)

	)

73 
	#BKP_RTCOuçutSour˚_Sec⁄d
 ((
uöt16_t
)0x0300)

	)

74 
	#IS_BKP_RTC_OUTPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
BKP_RTCOuçutSour˚_N⁄e
) || \

75 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_CÆibClock
) || \

76 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Aœrm
) || \

77 ((
SOURCE
Ë=
BKP_RTCOuçutSour˚_Sec⁄d
))

	)

86 
	#BKP_DR1
 ((
uöt16_t
)0x0004)

	)

87 
	#BKP_DR2
 ((
uöt16_t
)0x0008)

	)

88 
	#BKP_DR3
 ((
uöt16_t
)0x000C)

	)

89 
	#BKP_DR4
 ((
uöt16_t
)0x0010)

	)

90 
	#BKP_DR5
 ((
uöt16_t
)0x0014)

	)

91 
	#BKP_DR6
 ((
uöt16_t
)0x0018)

	)

92 
	#BKP_DR7
 ((
uöt16_t
)0x001C)

	)

93 
	#BKP_DR8
 ((
uöt16_t
)0x0020)

	)

94 
	#BKP_DR9
 ((
uöt16_t
)0x0024)

	)

95 
	#BKP_DR10
 ((
uöt16_t
)0x0028)

	)

96 
	#BKP_DR11
 ((
uöt16_t
)0x0040)

	)

97 
	#BKP_DR12
 ((
uöt16_t
)0x0044)

	)

98 
	#BKP_DR13
 ((
uöt16_t
)0x0048)

	)

99 
	#BKP_DR14
 ((
uöt16_t
)0x004C)

	)

100 
	#BKP_DR15
 ((
uöt16_t
)0x0050)

	)

101 
	#BKP_DR16
 ((
uöt16_t
)0x0054)

	)

102 
	#BKP_DR17
 ((
uöt16_t
)0x0058)

	)

103 
	#BKP_DR18
 ((
uöt16_t
)0x005C)

	)

104 
	#BKP_DR19
 ((
uöt16_t
)0x0060)

	)

105 
	#BKP_DR20
 ((
uöt16_t
)0x0064)

	)

106 
	#BKP_DR21
 ((
uöt16_t
)0x0068)

	)

107 
	#BKP_DR22
 ((
uöt16_t
)0x006C)

	)

108 
	#BKP_DR23
 ((
uöt16_t
)0x0070)

	)

109 
	#BKP_DR24
 ((
uöt16_t
)0x0074)

	)

110 
	#BKP_DR25
 ((
uöt16_t
)0x0078)

	)

111 
	#BKP_DR26
 ((
uöt16_t
)0x007C)

	)

112 
	#BKP_DR27
 ((
uöt16_t
)0x0080)

	)

113 
	#BKP_DR28
 ((
uöt16_t
)0x0084)

	)

114 
	#BKP_DR29
 ((
uöt16_t
)0x0088)

	)

115 
	#BKP_DR30
 ((
uöt16_t
)0x008C)

	)

116 
	#BKP_DR31
 ((
uöt16_t
)0x0090)

	)

117 
	#BKP_DR32
 ((
uöt16_t
)0x0094)

	)

118 
	#BKP_DR33
 ((
uöt16_t
)0x0098)

	)

119 
	#BKP_DR34
 ((
uöt16_t
)0x009C)

	)

120 
	#BKP_DR35
 ((
uöt16_t
)0x00A0)

	)

121 
	#BKP_DR36
 ((
uöt16_t
)0x00A4)

	)

122 
	#BKP_DR37
 ((
uöt16_t
)0x00A8)

	)

123 
	#BKP_DR38
 ((
uöt16_t
)0x00AC)

	)

124 
	#BKP_DR39
 ((
uöt16_t
)0x00B0)

	)

125 
	#BKP_DR40
 ((
uöt16_t
)0x00B4)

	)

126 
	#BKP_DR41
 ((
uöt16_t
)0x00B8)

	)

127 
	#BKP_DR42
 ((
uöt16_t
)0x00BC)

	)

129 
	#IS_BKP_DR
(
DR
Ë(((DRË=
BKP_DR1
Ë|| ((DRË=
BKP_DR2
Ë|| ((DRË=
BKP_DR3
) || \

130 ((
DR
Ë=
BKP_DR4
Ë|| ((DRË=
BKP_DR5
Ë|| ((DRË=
BKP_DR6
) || \

131 ((
DR
Ë=
BKP_DR7
Ë|| ((DRË=
BKP_DR8
Ë|| ((DRË=
BKP_DR9
) || \

132 ((
DR
Ë=
BKP_DR10
Ë|| ((DRË=
BKP_DR11
Ë|| ((DRË=
BKP_DR12
) || \

133 ((
DR
Ë=
BKP_DR13
Ë|| ((DRË=
BKP_DR14
Ë|| ((DRË=
BKP_DR15
) || \

134 ((
DR
Ë=
BKP_DR16
Ë|| ((DRË=
BKP_DR17
Ë|| ((DRË=
BKP_DR18
) || \

135 ((
DR
Ë=
BKP_DR19
Ë|| ((DRË=
BKP_DR20
Ë|| ((DRË=
BKP_DR21
) || \

136 ((
DR
Ë=
BKP_DR22
Ë|| ((DRË=
BKP_DR23
Ë|| ((DRË=
BKP_DR24
) || \

137 ((
DR
Ë=
BKP_DR25
Ë|| ((DRË=
BKP_DR26
Ë|| ((DRË=
BKP_DR27
) || \

138 ((
DR
Ë=
BKP_DR28
Ë|| ((DRË=
BKP_DR29
Ë|| ((DRË=
BKP_DR30
) || \

139 ((
DR
Ë=
BKP_DR31
Ë|| ((DRË=
BKP_DR32
Ë|| ((DRË=
BKP_DR33
) || \

140 ((
DR
Ë=
BKP_DR34
Ë|| ((DRË=
BKP_DR35
Ë|| ((DRË=
BKP_DR36
) || \

141 ((
DR
Ë=
BKP_DR37
Ë|| ((DRË=
BKP_DR38
Ë|| ((DRË=
BKP_DR39
) || \

142 ((
DR
Ë=
BKP_DR40
Ë|| ((DRË=
BKP_DR41
Ë|| ((DRË=
BKP_DR42
))

	)

144 
	#IS_BKP_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

165 
BKP_DeInô
();

166 
BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
);

167 
BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

168 
BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

169 
BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
);

170 
BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
);

171 
BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
);

172 
uöt16_t
 
BKP_RódBackupRegi°î
(uöt16_à
BKP_DR
);

173 
FœgSètus
 
BKP_GëFœgSètus
();

174 
BKP_CÀ¨Fœg
();

175 
ITSètus
 
BKP_GëITSètus
();

176 
BKP_CÀ¨ITPídögBô
();

178 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h

24 #i‚de‡
__STM32F10x_CAN_H


25 
	#__STM32F10x_CAN_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

46 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
) || \

47 ((
PERIPH
Ë=
CAN2
))

	)

55 
uöt16_t
 
CAN_PªsˇÀr
;

58 
uöt8_t
 
CAN_Mode
;

62 
uöt8_t
 
CAN_SJW
;

68 
uöt8_t
 
CAN_BS1
;

72 
uöt8_t
 
CAN_BS2
;

77 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

81 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

85 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

89 
Fun˘i⁄ÆSèã
 
CAN_NART
;

93 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

97 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

100 } 
	tCAN_InôTy≥Def
;

108 
uöt16_t
 
CAN_FûãrIdHigh
;

112 
uöt16_t
 
CAN_FûãrIdLow
;

116 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

121 
uöt16_t
 
CAN_FûãrMaskIdLow
;

126 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

129 
uöt8_t
 
CAN_FûãrNumbî
;

131 
uöt8_t
 
CAN_FûãrMode
;

134 
uöt8_t
 
CAN_FûãrSˇÀ
;

137 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

139 } 
	tCAN_FûãrInôTy≥Def
;

147 
uöt32_t
 
StdId
;

150 
uöt32_t
 
ExtId
;

153 
uöt8_t
 
IDE
;

157 
uöt8_t
 
RTR
;

161 
uöt8_t
 
DLC
;

165 
uöt8_t
 
D©a
[8];

167 } 
	tC™TxMsg
;

175 
uöt32_t
 
StdId
;

178 
uöt32_t
 
ExtId
;

181 
uöt8_t
 
IDE
;

185 
uöt8_t
 
RTR
;

189 
uöt8_t
 
DLC
;

192 
uöt8_t
 
D©a
[8];

195 
uöt8_t
 
FMI
;

198 } 
	tC™RxMsg
;

212 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

213 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

223 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

224 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

225 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

226 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

228 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
) || \

229 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

230 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

231 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

	)

241 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

242 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

243 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

246 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
) ||\

247 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

248 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

	)

258 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

259 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

270 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

271 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

272 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

273 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

275 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

276 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

	)

285 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

286 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

287 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

288 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

289 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

290 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

291 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

292 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

293 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

294 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

295 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

296 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

297 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

298 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

299 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

300 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

302 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

311 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

312 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

313 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

314 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

315 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

316 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

317 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

318 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

320 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

330 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

339 #i‚de‡
STM32F10X_CL


340 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<13)

	)

342 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

352 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

353 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

355 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
) || \

356 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

	)

365 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

366 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

368 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
) || \

369 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

	)

379 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

380 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

381 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
) || \

382 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

	)

390 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

399 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

400 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

401 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

402 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

412 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

413 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

414 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
) || \

415 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

	)

424 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

425 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

426 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

436 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

437 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

438 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

439 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

449 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

450 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

452 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

462 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

463 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

473 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

474 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

485 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

486 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

487 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

488 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

489 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

490 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

491 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

492 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

507 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

508 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

509 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

512 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

513 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

514 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

515 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

516 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

517 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

520 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

521 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

526 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

527 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

528 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

529 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

531 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
) || \

532 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

533 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

534 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

535 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

536 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

537 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

538 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

	)

540 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

541 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

542 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

543 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

544 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

	)

556 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

559 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

560 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

561 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

562 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

563 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

564 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

567 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

568 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

571 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

572 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

573 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

574 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

575 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

578 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

579 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

580 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

583 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
) ||\

584 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

585 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

586 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

587 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

588 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

589 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

591 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
) ||\

592 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

593 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

594 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

595 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

596 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

605 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

606 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

607 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

608 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

609 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

610 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

611 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

612 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

613 
	#CANTXFAILE
 
CAN_TxSètus_Faûed


	)

614 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

615 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

616 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

617 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

618 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

619 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

620 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

642 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

645 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

646 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

647 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

648 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

649 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

650 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

653 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

654 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

655 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

658 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

659 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

660 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

664 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

665 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

666 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

669 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

670 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

671 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

674 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

675 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

676 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

677 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

678 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

680 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h

24 #i‚de‡
__STM32F10x_CEC_H


25 
	#__STM32F10x_CEC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt16_t
 
CEC_BôTimögMode
;

54 
uöt16_t
 
CEC_BôPîiodMode
;

56 }
	tCEC_InôTy≥Def
;

69 
	#CEC_BôTimögStdMode
 ((
uöt16_t
)0x00Ë

	)

70 
	#CEC_BôTimögEºFªeMode
 
CEC_CFGR_BTEM


	)

72 
	#IS_CEC_BIT_TIMING_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôTimögStdMode
) || \

73 ((
MODE
Ë=
CEC_BôTimögEºFªeMode
))

	)

81 
	#CEC_BôPîiodStdMode
 ((
uöt16_t
)0x00Ë

	)

82 
	#CEC_BôPîiodFÀxibÀMode
 
CEC_CFGR_BPEM


	)

84 
	#IS_CEC_BIT_PERIOD_ERROR_MODE
(
MODE
Ë(((MODEË=
CEC_BôPîiodStdMode
) || \

85 ((
MODE
Ë=
CEC_BôPîiodFÀxibÀMode
))

	)

94 
	#CEC_IT_TERR
 
CEC_CSR_TERR


	)

95 
	#CEC_IT_TBTRF
 
CEC_CSR_TBTRF


	)

96 
	#CEC_IT_RERR
 
CEC_CSR_RERR


	)

97 
	#CEC_IT_RBTF
 
CEC_CSR_RBTF


	)

98 
	#IS_CEC_GET_IT
(
IT
Ë(((ITË=
CEC_IT_TERR
Ë|| ((ITË=
CEC_IT_TBTRF
) || \

99 ((
IT
Ë=
CEC_IT_RERR
Ë|| ((ITË=
CEC_IT_RBTF
))

	)

108 
	#IS_CEC_ADDRESS
(
ADDRESS
Ë((ADDRESSË< 0x10)

	)

116 
	#IS_CEC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0x3FFF)

	)

129 
	#CEC_FLAG_BTE
 ((
uöt32_t
)0x10010000)

	)

130 
	#CEC_FLAG_BPE
 ((
uöt32_t
)0x10020000)

	)

131 
	#CEC_FLAG_RBTFE
 ((
uöt32_t
)0x10040000)

	)

132 
	#CEC_FLAG_SBE
 ((
uöt32_t
)0x10080000)

	)

133 
	#CEC_FLAG_ACKE
 ((
uöt32_t
)0x10100000)

	)

134 
	#CEC_FLAG_LINE
 ((
uöt32_t
)0x10200000)

	)

135 
	#CEC_FLAG_TBTFE
 ((
uöt32_t
)0x10400000)

	)

140 
	#CEC_FLAG_TEOM
 ((
uöt32_t
)0x00000002)

	)

141 
	#CEC_FLAG_TERR
 ((
uöt32_t
)0x00000004)

	)

142 
	#CEC_FLAG_TBTRF
 ((
uöt32_t
)0x00000008)

	)

143 
	#CEC_FLAG_RSOM
 ((
uöt32_t
)0x00000010)

	)

144 
	#CEC_FLAG_REOM
 ((
uöt32_t
)0x00000020)

	)

145 
	#CEC_FLAG_RERR
 ((
uöt32_t
)0x00000040)

	)

146 
	#CEC_FLAG_RBTF
 ((
uöt32_t
)0x00000080)

	)

148 
	#IS_CEC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFF03Ë=0x00Ë&& ((FLAGË!0x00))

	)

150 
	#IS_CEC_GET_FLAG
(
FLAG
Ë(((FLAGË=
CEC_FLAG_BTE
Ë|| ((FLAGË=
CEC_FLAG_BPE
) || \

151 ((
FLAG
Ë=
CEC_FLAG_RBTFE
Ë|| ((FLAG)=
CEC_FLAG_SBE
) || \

152 ((
FLAG
Ë=
CEC_FLAG_ACKE
Ë|| ((FLAGË=
CEC_FLAG_LINE
) || \

153 ((
FLAG
Ë=
CEC_FLAG_TBTFE
Ë|| ((FLAGË=
CEC_FLAG_TEOM
) || \

154 ((
FLAG
Ë=
CEC_FLAG_TERR
Ë|| ((FLAGË=
CEC_FLAG_TBTRF
) || \

155 ((
FLAG
Ë=
CEC_FLAG_RSOM
Ë|| ((FLAGË=
CEC_FLAG_REOM
) || \

156 ((
FLAG
Ë=
CEC_FLAG_RERR
Ë|| ((FLAGË=
CEC_FLAG_RBTF
))

	)

177 
CEC_DeInô
();

178 
CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
);

179 
CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

180 
CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

181 
CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
);

182 
CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
);

183 
CEC_SídD©aByã
(
uöt8_t
 
D©a
);

184 
uöt8_t
 
CEC_Re˚iveD©aByã
();

185 
CEC_SèπOfMesßge
();

186 
CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

187 
FœgSètus
 
CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
);

188 
CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
);

189 
ITSètus
 
CEC_GëITSètus
(
uöt8_t
 
CEC_IT
);

190 
CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
);

192 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h

24 #i‚de‡
__STM32F10x_CRC_H


25 
	#__STM32F10x_CRC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

70 
CRC_Re£tDR
();

71 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

72 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

73 
uöt32_t
 
CRC_GëCRC
();

74 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

75 
uöt8_t
 
CRC_GëIDRegi°î
();

77 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h

24 #i‚de‡
__STM32F10x_DAC_H


25 
	#__STM32F10x_DAC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
DAC_Triggî
;

55 
uöt32_t
 
DAC_WaveGíî©i⁄
;

59 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

63 
uöt32_t
 
DAC_OuçutBuf„r
;

65 }
	tDAC_InôTy≥Def
;

79 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

81 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

82 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

84 
	#DAC_Triggî_T3_TRGO
 ((
uöt32_t
)0x0000000CË

	)

86 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

87 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

88 
	#DAC_Triggî_T15_TRGO
 ((
uöt32_t
)0x0000001CË

	)

90 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

91 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

92 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

93 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

95 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

102 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

103 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

	)

113 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

114 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

115 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

116 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
) || \

117 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

118 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

	)

127 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

128 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

129 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

130 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

131 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

132 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

133 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

134 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

135 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

136 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

137 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

138 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

149 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

150 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

152 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

162 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

163 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

174 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

175 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

	)

184 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

185 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

186 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
) || \

187 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

	)

196 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

197 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

198 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
) || \

199 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

	)

208 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

209 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

210 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

211 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
) || \

212 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

213 ((
ALIGN
Ë=
DAC_Align_8b_R
))

	)

222 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

223 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

224 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
) || \

225 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

	)

234 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

238 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

243 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

244 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

254 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

255 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

278 
DAC_DeInô
();

279 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

280 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

281 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

282 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

283 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

289 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

290 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

291 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

292 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

293 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

294 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

295 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

296 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

297 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

300 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h

24 #i‚de‡
__STM32F10x_DBGMCU_H


25 
	#__STM32F10x_DBGMCU_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

54 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

55 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

56 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

57 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00000100)

	)

58 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000200)

	)

59 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000400)

	)

60 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000800)

	)

61 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00001000)

	)

62 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00002000)

	)

63 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x00004000)

	)

64 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000)

	)

65 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

66 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00020000)

	)

67 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00040000)

	)

68 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00080000)

	)

69 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00100000)

	)

70 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x00200000)

	)

71 
	#DBGMCU_TIM15_STOP
 ((
uöt32_t
)0x00400000)

	)

72 
	#DBGMCU_TIM16_STOP
 ((
uöt32_t
)0x00800000)

	)

73 
	#DBGMCU_TIM17_STOP
 ((
uöt32_t
)0x01000000)

	)

74 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x02000000)

	)

75 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x04000000)

	)

76 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x08000000)

	)

77 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x10000000)

	)

78 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x20000000)

	)

79 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x40000000)

	)

81 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x800000F8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

98 
uöt32_t
 
DBGMCU_GëREVID
();

99 
uöt32_t
 
DBGMCU_GëDEVID
();

100 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

102 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h

24 #i‚de‡
__STM32F10x_DMA_H


25 
	#__STM32F10x_DMA_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

54 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

56 
uöt32_t
 
DMA_DIR
;

59 
uöt32_t
 
DMA_Buf„rSize
;

63 
uöt32_t
 
DMA_PîùhîÆInc
;

66 
uöt32_t
 
DMA_Mem‹yInc
;

69 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

72 
uöt32_t
 
DMA_Mem‹yD©aSize
;

75 
uöt32_t
 
DMA_Mode
;

80 
uöt32_t
 
DMA_Pri‹ôy
;

83 
uöt32_t
 
DMA_M2M
;

85 }
	tDMA_InôTy≥Def
;

95 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
) || \

96 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

97 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

101 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

102 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

103 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

106 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

	)

112 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

113 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

114 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
) || \

115 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

	)

124 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

125 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

126 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
) || \

127 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

	)

136 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

137 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

138 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
) || \

139 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

	)

148 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

149 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

150 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

151 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
) || \

152 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

153 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

	)

162 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

163 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

164 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

165 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
) || \

166 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

167 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

	)

176 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

177 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

178 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

187 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

188 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

189 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

190 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

191 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
) || \

192 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

193 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

194 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

	)

203 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

204 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

205 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

215 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

216 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

217 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

218 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

220 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

221 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

222 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

223 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

224 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

225 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

226 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

227 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

228 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

229 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

230 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

231 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

232 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

233 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

234 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

235 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

236 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

237 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

238 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

239 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

240 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

241 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

242 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

243 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

244 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

245 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

246 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

247 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

249 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

250 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

251 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

252 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

253 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

254 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

255 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

256 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

257 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

258 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

259 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

260 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

261 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

262 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

263 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

264 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

265 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

266 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

267 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

268 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

270 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

272 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
) || \

273 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

274 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

275 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

276 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

277 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

278 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

279 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

280 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

281 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

282 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

283 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

284 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

285 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

286 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

287 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

288 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

289 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

290 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

291 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

292 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

293 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

294 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

295 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

	)

304 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

305 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

306 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

307 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

308 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

309 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

310 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

311 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

312 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

313 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

314 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

315 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

316 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

317 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

318 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

319 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

320 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

321 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

322 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

323 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

324 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

325 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

326 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

327 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

328 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

329 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

330 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

331 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

333 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

334 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

335 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

336 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

337 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

338 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

339 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

340 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

341 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

342 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

343 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

344 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

345 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

346 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

347 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

348 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

349 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

350 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

351 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

352 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

354 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

356 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
) || \

357 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

360 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

361 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

362 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

363 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

364 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

365 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

366 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

367 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

368 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

369 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

370 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

371 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

372 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

373 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

374 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

375 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

376 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

377 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

378 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

379 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

	)

388 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

410 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

411 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

412 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

413 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
);

416 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

417 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
);

418 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
);

419 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
);

420 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
);

422 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h

24 #i‚de‡
__STM32F10x_EXTI_H


25 
	#__STM32F10x_EXTI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
EXTI_Mode_I¡îru±
 = 0x00,

53 
EXTI_Mode_Evít
 = 0x04

54 }
	tEXTIMode_Ty≥Def
;

56 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

64 
EXTI_Triggî_Risög
 = 0x08,

65 
EXTI_Triggî_FÆlög
 = 0x0C,

66 
EXTI_Triggî_Risög_FÆlög
 = 0x10

67 }
	tEXTITriggî_Ty≥Def
;

69 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
) || \

70 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

71 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

	)

78 
uöt32_t
 
EXTI_Löe
;

81 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

84 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

87 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

89 }
	tEXTI_InôTy≥Def
;

103 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

104 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

105 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

106 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

107 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

108 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

109 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

110 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

111 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

112 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

113 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

114 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

115 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

116 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

117 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

118 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

119 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

120 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

121 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

123 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

125 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFFF00000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

126 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
) || \

127 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

128 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

129 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

130 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

131 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

132 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

133 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

134 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

135 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
))

	)

158 
EXTI_DeInô
();

159 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

161 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

162 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

163 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

164 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

165 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

167 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h

24 #i‚de‡
__STM32F10x_FLASH_H


25 
	#__STM32F10x_FLASH_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
FLASH_BUSY
 = 1,

53 
FLASH_ERROR_PG
,

54 
FLASH_ERROR_WRP
,

55 
FLASH_COMPLETE
,

56 
FLASH_TIMEOUT


57 }
	tFLASH_Sètus
;

71 
	#FLASH_L©ícy_0
 ((
uöt32_t
)0x00000000Ë

	)

72 
	#FLASH_L©ícy_1
 ((
uöt32_t
)0x00000001Ë

	)

73 
	#FLASH_L©ícy_2
 ((
uöt32_t
)0x00000002Ë

	)

74 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
) || \

75 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

76 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

	)

85 
	#FLASH_HÆfCy˛eAc˚ss_E«bÀ
 ((
uöt32_t
)0x00000008Ë

	)

86 
	#FLASH_HÆfCy˛eAc˚ss_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

87 
	#IS_FLASH_HALFCYCLEACCESS_STATE
(
STATE
Ë(((STATEË=
FLASH_HÆfCy˛eAc˚ss_E«bÀ
) || \

88 ((
STATE
Ë=
FLASH_HÆfCy˛eAc˚ss_DißbÀ
))

	)

97 
	#FLASH_Pª„tchBuf„r_E«bÀ
 ((
uöt32_t
)0x00000010Ë

	)

98 
	#FLASH_Pª„tchBuf„r_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

99 
	#IS_FLASH_PREFETCHBUFFER_STATE
(
STATE
Ë(((STATEË=
FLASH_Pª„tchBuf„r_E«bÀ
) || \

100 ((
STATE
Ë=
FLASH_Pª„tchBuf„r_DißbÀ
))

	)

110 
	#FLASH_WRPrŸ_Pages0to3
 ((
uöt32_t
)0x00000001Ë

	)

111 
	#FLASH_WRPrŸ_Pages4to7
 ((
uöt32_t
)0x00000002Ë

	)

112 
	#FLASH_WRPrŸ_Pages8to11
 ((
uöt32_t
)0x00000004Ë

	)

113 
	#FLASH_WRPrŸ_Pages12to15
 ((
uöt32_t
)0x00000008Ë

	)

114 
	#FLASH_WRPrŸ_Pages16to19
 ((
uöt32_t
)0x00000010Ë

	)

115 
	#FLASH_WRPrŸ_Pages20to23
 ((
uöt32_t
)0x00000020Ë

	)

116 
	#FLASH_WRPrŸ_Pages24to27
 ((
uöt32_t
)0x00000040Ë

	)

117 
	#FLASH_WRPrŸ_Pages28to31
 ((
uöt32_t
)0x00000080Ë

	)

120 
	#FLASH_WRPrŸ_Pages32to35
 ((
uöt32_t
)0x00000100Ë

	)

121 
	#FLASH_WRPrŸ_Pages36to39
 ((
uöt32_t
)0x00000200Ë

	)

122 
	#FLASH_WRPrŸ_Pages40to43
 ((
uöt32_t
)0x00000400Ë

	)

123 
	#FLASH_WRPrŸ_Pages44to47
 ((
uöt32_t
)0x00000800Ë

	)

124 
	#FLASH_WRPrŸ_Pages48to51
 ((
uöt32_t
)0x00001000Ë

	)

125 
	#FLASH_WRPrŸ_Pages52to55
 ((
uöt32_t
)0x00002000Ë

	)

126 
	#FLASH_WRPrŸ_Pages56to59
 ((
uöt32_t
)0x00004000Ë

	)

127 
	#FLASH_WRPrŸ_Pages60to63
 ((
uöt32_t
)0x00008000Ë

	)

128 
	#FLASH_WRPrŸ_Pages64to67
 ((
uöt32_t
)0x00010000Ë

	)

129 
	#FLASH_WRPrŸ_Pages68to71
 ((
uöt32_t
)0x00020000Ë

	)

130 
	#FLASH_WRPrŸ_Pages72to75
 ((
uöt32_t
)0x00040000Ë

	)

131 
	#FLASH_WRPrŸ_Pages76to79
 ((
uöt32_t
)0x00080000Ë

	)

132 
	#FLASH_WRPrŸ_Pages80to83
 ((
uöt32_t
)0x00100000Ë

	)

133 
	#FLASH_WRPrŸ_Pages84to87
 ((
uöt32_t
)0x00200000Ë

	)

134 
	#FLASH_WRPrŸ_Pages88to91
 ((
uöt32_t
)0x00400000Ë

	)

135 
	#FLASH_WRPrŸ_Pages92to95
 ((
uöt32_t
)0x00800000Ë

	)

136 
	#FLASH_WRPrŸ_Pages96to99
 ((
uöt32_t
)0x01000000Ë

	)

137 
	#FLASH_WRPrŸ_Pages100to103
 ((
uöt32_t
)0x02000000Ë

	)

138 
	#FLASH_WRPrŸ_Pages104to107
 ((
uöt32_t
)0x04000000Ë

	)

139 
	#FLASH_WRPrŸ_Pages108to111
 ((
uöt32_t
)0x08000000Ë

	)

140 
	#FLASH_WRPrŸ_Pages112to115
 ((
uöt32_t
)0x10000000Ë

	)

141 
	#FLASH_WRPrŸ_Pages116to119
 ((
uöt32_t
)0x20000000Ë

	)

142 
	#FLASH_WRPrŸ_Pages120to123
 ((
uöt32_t
)0x40000000Ë

	)

143 
	#FLASH_WRPrŸ_Pages124to127
 ((
uöt32_t
)0x80000000Ë

	)

146 
	#FLASH_WRPrŸ_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

148 
	#FLASH_WRPrŸ_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

150 
	#FLASH_WRPrŸ_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

152 
	#FLASH_WRPrŸ_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

154 
	#FLASH_WRPrŸ_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

156 
	#FLASH_WRPrŸ_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

158 
	#FLASH_WRPrŸ_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

160 
	#FLASH_WRPrŸ_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

162 
	#FLASH_WRPrŸ_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

164 
	#FLASH_WRPrŸ_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

166 
	#FLASH_WRPrŸ_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

168 
	#FLASH_WRPrŸ_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

170 
	#FLASH_WRPrŸ_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

172 
	#FLASH_WRPrŸ_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

174 
	#FLASH_WRPrŸ_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

176 
	#FLASH_WRPrŸ_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

178 
	#FLASH_WRPrŸ_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

180 
	#FLASH_WRPrŸ_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

182 
	#FLASH_WRPrŸ_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

184 
	#FLASH_WRPrŸ_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

186 
	#FLASH_WRPrŸ_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

188 
	#FLASH_WRPrŸ_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

190 
	#FLASH_WRPrŸ_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

192 
	#FLASH_WRPrŸ_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

194 
	#FLASH_WRPrŸ_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

196 
	#FLASH_WRPrŸ_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

198 
	#FLASH_WRPrŸ_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

200 
	#FLASH_WRPrŸ_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

202 
	#FLASH_WRPrŸ_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

204 
	#FLASH_WRPrŸ_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

206 
	#FLASH_WRPrŸ_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

208 
	#FLASH_WRPrŸ_Pages62to127
 ((
uöt32_t
)0x80000000Ë

	)

209 
	#FLASH_WRPrŸ_Pages62to255
 ((
uöt32_t
)0x80000000Ë

	)

210 
	#FLASH_WRPrŸ_Pages62to511
 ((
uöt32_t
)0x80000000Ë

	)

212 
	#FLASH_WRPrŸ_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

214 
	#IS_FLASH_WRPROT_PAGE
(
PAGE
Ë(((PAGEË!0x00000000))

	)

216 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË< 0x080FFFFF))

	)

218 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

228 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

229 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

230 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

240 
	#OB_STOP_NoRST
 ((
uöt16_t
)0x0002Ë

	)

241 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

242 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

252 
	#OB_STDBY_NoRST
 ((
uöt16_t
)0x0004Ë

	)

253 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

254 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

256 #ifde‡
STM32F10X_XL


263 
	#FLASH_BOOT_B™k1
 ((
uöt16_t
)0x0000Ë

	)

265 
	#FLASH_BOOT_B™k2
 ((
uöt16_t
)0x0001Ë

	)

268 
	#IS_FLASH_BOOT
(
BOOT
Ë(((BOOTË=
FLASH_BOOT_B™k1
Ë|| ((BOOTË=
FLASH_BOOT_B™k2
))

	)

276 #ifde‡
STM32F10X_XL


277 
	#FLASH_IT_BANK2_ERROR
 ((
uöt32_t
)0x80000400Ë

	)

278 
	#FLASH_IT_BANK2_EOP
 ((
uöt32_t
)0x80001000Ë

	)

280 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

281 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

283 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

284 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

285 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0x7FFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

287 
	#FLASH_IT_ERROR
 ((
uöt32_t
)0x00000400Ë

	)

288 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x00001000Ë

	)

289 
	#FLASH_IT_BANK1_ERROR
 
FLASH_IT_ERROR


	)

290 
	#FLASH_IT_BANK1_EOP
 
FLASH_IT_EOP


	)

292 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

302 #ifde‡
STM32F10X_XL


303 
	#FLASH_FLAG_BANK2_BSY
 ((
uöt32_t
)0x80000001Ë

	)

304 
	#FLASH_FLAG_BANK2_EOP
 ((
uöt32_t
)0x80000020Ë

	)

305 
	#FLASH_FLAG_BANK2_PGERR
 ((
uöt32_t
)0x80000004Ë

	)

306 
	#FLASH_FLAG_BANK2_WRPRTERR
 ((
uöt32_t
)0x80000010Ë

	)

308 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

309 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

310 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

311 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

313 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

314 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

315 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

316 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

317 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

319 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0x7FFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

320 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
) || \

321 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

322 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
)|| \

323 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

324 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

325 ((
FLAG
Ë=
FLASH_FLAG_BANK2_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_EOP
) || \

326 ((
FLAG
Ë=
FLASH_FLAG_BANK2_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK2_WRPRTERR
))

	)

328 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00000001Ë

	)

329 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000020Ë

	)

330 
	#FLASH_FLAG_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

331 
	#FLASH_FLAG_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

332 
	#FLASH_FLAG_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

334 
	#FLASH_FLAG_BANK1_BSY
 
FLASH_FLAG_BSY


	)

335 
	#FLASH_FLAG_BANK1_EOP
 
FLASH_FLAG_EOP


	)

336 
	#FLASH_FLAG_BANK1_PGERR
 
FLASH_FLAG_PGERR


	)

337 
	#FLASH_FLAG_BANK1_WRPRTERR
 
FLASH_FLAG_WRPRTERR


	)

339 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFCAË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

340 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
) || \

341 ((
FLAG
Ë=
FLASH_FLAG_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_WRPRTERR
) || \

342 ((
FLAG
Ë=
FLASH_FLAG_BANK1_BSY
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_EOP
) || \

343 ((
FLAG
Ë=
FLASH_FLAG_BANK1_PGERR
Ë|| ((FLAGË=
FLASH_FLAG_BANK1_WRPRTERR
) || \

344 ((
FLAG
Ë=
FLASH_FLAG_OPTERR
))

	)

368 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

369 
FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
);

370 
FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
);

371 
FLASH_U∆ock
();

372 
FLASH_Lock
();

373 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

374 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

375 
FLASH_Sètus
 
FLASH_Eø£O±i⁄Byãs
();

376 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

377 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

378 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

379 
FLASH_Sètus
 
FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
);

380 
FLASH_Sètus
 
FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

381 
FLASH_Sètus
 
FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
);

382 
uöt32_t
 
FLASH_GëU£rO±i⁄Byã
();

383 
uöt32_t
 
FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
();

384 
FœgSètus
 
FLASH_GëRódOutPrŸe˘i⁄Sètus
();

385 
FœgSètus
 
FLASH_GëPª„tchBuf„rSètus
();

386 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

388 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

389 
FLASH_Sètus
 
FLASH_GëSètus
();

390 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

393 
FLASH_U∆ockB™k1
();

394 
FLASH_LockB™k1
();

395 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Pages
();

396 
FLASH_Sètus
 
FLASH_GëB™k1Sètus
();

397 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
);

399 #ifde‡
STM32F10X_XL


401 
FLASH_U∆ockB™k2
();

402 
FLASH_LockB™k2
();

403 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Pages
();

404 
FLASH_Sètus
 
FLASH_GëB™k2Sètus
();

405 
FLASH_Sètus
 
FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
);

406 
FLASH_Sètus
 
FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
);

409 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h

24 #i‚de‡
__STM32F10x_FSMC_H


25 
	#__STM32F10x_FSMC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
FSMC_AddªssSëupTime
;

57 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

62 
uöt32_t
 
FSMC_D©aSëupTime
;

67 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

72 
uöt32_t
 
FSMC_CLKDivisi⁄
;

76 
uöt32_t
 
FSMC_D©aL©ícy
;

84 
uöt32_t
 
FSMC_Ac˚ssMode
;

86 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

94 
uöt32_t
 
FSMC_B™k
;

97 
uöt32_t
 
FSMC_D©aAddªssMux
;

101 
uöt32_t
 
FSMC_Mem‹yTy≥
;

105 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

108 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

112 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

116 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

120 
uöt32_t
 
FSMC_WøpMode
;

124 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

129 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

132 
uöt32_t
 
FSMC_WaôSig«l
;

136 
uöt32_t
 
FSMC_ExãndedMode
;

139 
uöt32_t
 
FSMC_WrôeBur°
;

142 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

144 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

145 }
	tFSMC_NORSRAMInôTy≥Def
;

153 
uöt32_t
 
FSMC_SëupTime
;

159 
uöt32_t
 
FSMC_WaôSëupTime
;

165 
uöt32_t
 
FSMC_HﬁdSëupTime
;

172 
uöt32_t
 
FSMC_HiZSëupTime
;

177 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

185 
uöt32_t
 
FSMC_B™k
;

188 
uöt32_t
 
FSMC_Waô„©uª
;

191 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

194 
uöt32_t
 
FSMC_ECC
;

197 
uöt32_t
 
FSMC_ECCPageSize
;

200 
uöt32_t
 
FSMC_TCLRSëupTime
;

204 
uöt32_t
 
FSMC_TARSëupTime
;

208 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

210 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

211 }
	tFSMC_NANDInôTy≥Def
;

219 
uöt32_t
 
FSMC_Waô„©uª
;

222 
uöt32_t
 
FSMC_TCLRSëupTime
;

226 
uöt32_t
 
FSMC_TARSëupTime
;

231 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

233 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

235 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

236 }
	tFSMC_PCCARDInôTy≥Def
;

249 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

250 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

251 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

252 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

260 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

261 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

269 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

274 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
) || \

275 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

276 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

277 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

	)

279 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

280 ((
BANK
Ë=
FSMC_B™k3_NAND
))

	)

282 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

283 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

284 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

286 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

287 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

288 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

298 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

299 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

300 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
) || \

301 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

	)

311 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

312 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

313 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

314 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
) || \

315 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

316 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

	)

326 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

327 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

328 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
) || \

329 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

	)

339 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

340 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

341 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
) || \

342 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

	)

350 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

351 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

352 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
) || \

353 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

	)

363 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

364 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

365 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
) || \

366 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

	)

376 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

377 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

378 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
) || \

379 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

	)

389 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

390 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

391 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
) || \

392 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

	)

402 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

403 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

404 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
) || \

405 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

	)

415 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

416 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

417 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
) || \

418 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

	)

427 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

428 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

430 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
) || \

431 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

	)

441 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

442 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

443 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
) || \

444 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

	)

453 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

463 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

473 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

483 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

493 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

503 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

513 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

514 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

515 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

516 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

517 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
) || \

518 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

519 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

520 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

	)

538 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

539 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

540 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
) || \

541 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

	)

552 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

553 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

554 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
) || \

555 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

	)

565 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

566 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

567 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

568 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

569 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

570 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

571 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
) || \

572 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

573 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

574 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

575 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

576 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

	)

586 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

596 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

606 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

616 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

626 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

636 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

646 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

647 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

648 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

649 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

650 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
) || \

651 ((
IT
Ë=
FSMC_IT_Levñ
) || \

652 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

	)

661 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

662 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

663 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

664 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

665 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
) || \

666 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

667 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

668 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

	)

670 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

696 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

697 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

698 
FSMC_PCCARDDeInô
();

699 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

700 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

701 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

702 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

703 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

704 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

705 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

706 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

707 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

708 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

709 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

710 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

711 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

712 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

713 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

714 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

716 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h

24 #i‚de‡
__STM32F10x_GPIO_H


25 
	#__STM32F10x_GPIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

46 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
) || \

47 ((
PERIPH
Ë=
GPIOB
) || \

48 ((
PERIPH
Ë=
GPIOC
) || \

49 ((
PERIPH
Ë=
GPIOD
) || \

50 ((
PERIPH
Ë=
GPIOE
) || \

51 ((
PERIPH
Ë=
GPIOF
) || \

52 ((
PERIPH
Ë=
GPIOG
))

	)

60 
GPIO_S≥ed_10MHz
 = 1,

61 
GPIO_S≥ed_2MHz
,

62 
GPIO_S≥ed_50MHz


63 }
	tGPIOS≥ed_Ty≥Def
;

64 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_10MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
) || \

65 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
))

	)

72 { 
GPIO_Mode_AIN
 = 0x0,

73 
GPIO_Mode_IN_FLOATING
 = 0x04,

74 
GPIO_Mode_IPD
 = 0x28,

75 
GPIO_Mode_IPU
 = 0x48,

76 
GPIO_Mode_Out_OD
 = 0x14,

77 
GPIO_Mode_Out_PP
 = 0x10,

78 
GPIO_Mode_AF_OD
 = 0x1C,

79 
GPIO_Mode_AF_PP
 = 0x18

80 }
	tGPIOMode_Ty≥Def
;

82 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_AIN
Ë|| ((MODEË=
GPIO_Mode_IN_FLOATING
) || \

83 ((
MODE
Ë=
GPIO_Mode_IPD
Ë|| ((MODEË=
GPIO_Mode_IPU
) || \

84 ((
MODE
Ë=
GPIO_Mode_Out_OD
Ë|| ((MODEË=
GPIO_Mode_Out_PP
) || \

85 ((
MODE
Ë=
GPIO_Mode_AF_OD
Ë|| ((MODEË=
GPIO_Mode_AF_PP
))

	)

93 
uöt16_t
 
GPIO_Pö
;

96 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

99 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

101 }
	tGPIO_InôTy≥Def
;

109 { 
Bô_RESET
 = 0,

110 
Bô_SET


111 }
	tBôA˘i⁄
;

113 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

127 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

128 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

129 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

130 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

131 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

132 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

133 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

134 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

135 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

136 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

137 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

138 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

139 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

140 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

141 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

142 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

143 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

145 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

147 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
) || \

148 ((
PIN
Ë=
GPIO_Pö_1
) || \

149 ((
PIN
Ë=
GPIO_Pö_2
) || \

150 ((
PIN
Ë=
GPIO_Pö_3
) || \

151 ((
PIN
Ë=
GPIO_Pö_4
) || \

152 ((
PIN
Ë=
GPIO_Pö_5
) || \

153 ((
PIN
Ë=
GPIO_Pö_6
) || \

154 ((
PIN
Ë=
GPIO_Pö_7
) || \

155 ((
PIN
Ë=
GPIO_Pö_8
) || \

156 ((
PIN
Ë=
GPIO_Pö_9
) || \

157 ((
PIN
Ë=
GPIO_Pö_10
) || \

158 ((
PIN
Ë=
GPIO_Pö_11
) || \

159 ((
PIN
Ë=
GPIO_Pö_12
) || \

160 ((
PIN
Ë=
GPIO_Pö_13
) || \

161 ((
PIN
Ë=
GPIO_Pö_14
) || \

162 ((
PIN
Ë=
GPIO_Pö_15
))

	)

172 
	#GPIO_Rem≠_SPI1
 ((
uöt32_t
)0x00000001Ë

	)

173 
	#GPIO_Rem≠_I2C1
 ((
uöt32_t
)0x00000002Ë

	)

174 
	#GPIO_Rem≠_USART1
 ((
uöt32_t
)0x00000004Ë

	)

175 
	#GPIO_Rem≠_USART2
 ((
uöt32_t
)0x00000008Ë

	)

176 
	#GPIO_P¨tülRem≠_USART3
 ((
uöt32_t
)0x00140010Ë

	)

177 
	#GPIO_FuŒRem≠_USART3
 ((
uöt32_t
)0x00140030Ë

	)

178 
	#GPIO_P¨tülRem≠_TIM1
 ((
uöt32_t
)0x00160040Ë

	)

179 
	#GPIO_FuŒRem≠_TIM1
 ((
uöt32_t
)0x001600C0Ë

	)

180 
	#GPIO_P¨tülRem≠1_TIM2
 ((
uöt32_t
)0x00180100Ë

	)

181 
	#GPIO_P¨tülRem≠2_TIM2
 ((
uöt32_t
)0x00180200Ë

	)

182 
	#GPIO_FuŒRem≠_TIM2
 ((
uöt32_t
)0x00180300Ë

	)

183 
	#GPIO_P¨tülRem≠_TIM3
 ((
uöt32_t
)0x001A0800Ë

	)

184 
	#GPIO_FuŒRem≠_TIM3
 ((
uöt32_t
)0x001A0C00Ë

	)

185 
	#GPIO_Rem≠_TIM4
 ((
uöt32_t
)0x00001000Ë

	)

186 
	#GPIO_Rem≠1_CAN1
 ((
uöt32_t
)0x001D4000Ë

	)

187 
	#GPIO_Rem≠2_CAN1
 ((
uöt32_t
)0x001D6000Ë

	)

188 
	#GPIO_Rem≠_PD01
 ((
uöt32_t
)0x00008000Ë

	)

189 
	#GPIO_Rem≠_TIM5CH4_LSI
 ((
uöt32_t
)0x00200001Ë

	)

190 
	#GPIO_Rem≠_ADC1_ETRGINJ
 ((
uöt32_t
)0x00200002Ë

	)

191 
	#GPIO_Rem≠_ADC1_ETRGREG
 ((
uöt32_t
)0x00200004Ë

	)

192 
	#GPIO_Rem≠_ADC2_ETRGINJ
 ((
uöt32_t
)0x00200008Ë

	)

193 
	#GPIO_Rem≠_ADC2_ETRGREG
 ((
uöt32_t
)0x00200010Ë

	)

194 
	#GPIO_Rem≠_ETH
 ((
uöt32_t
)0x00200020Ë

	)

195 
	#GPIO_Rem≠_CAN2
 ((
uöt32_t
)0x00200040Ë

	)

196 
	#GPIO_Rem≠_SWJ_NoJTRST
 ((
uöt32_t
)0x00300100Ë

	)

197 
	#GPIO_Rem≠_SWJ_JTAGDißbÀ
 ((
uöt32_t
)0x00300200Ë

	)

198 
	#GPIO_Rem≠_SWJ_DißbÀ
 ((
uöt32_t
)0x00300400Ë

	)

199 
	#GPIO_Rem≠_SPI3
 ((
uöt32_t
)0x00201100Ë

	)

200 
	#GPIO_Rem≠_TIM2ITR1_PTP_SOF
 ((
uöt32_t
)0x00202000Ë

	)

203 
	#GPIO_Rem≠_PTP_PPS
 ((
uöt32_t
)0x00204000Ë

	)

205 
	#GPIO_Rem≠_TIM15
 ((
uöt32_t
)0x80000001Ë

	)

206 
	#GPIO_Rem≠_TIM16
 ((
uöt32_t
)0x80000002Ë

	)

207 
	#GPIO_Rem≠_TIM17
 ((
uöt32_t
)0x80000004Ë

	)

208 
	#GPIO_Rem≠_CEC
 ((
uöt32_t
)0x80000008Ë

	)

209 
	#GPIO_Rem≠_TIM1_DMA
 ((
uöt32_t
)0x80000010Ë

	)

211 
	#GPIO_Rem≠_TIM9
 ((
uöt32_t
)0x80000020Ë

	)

212 
	#GPIO_Rem≠_TIM10
 ((
uöt32_t
)0x80000040Ë

	)

213 
	#GPIO_Rem≠_TIM11
 ((
uöt32_t
)0x80000080Ë

	)

214 
	#GPIO_Rem≠_TIM13
 ((
uöt32_t
)0x80000100Ë

	)

215 
	#GPIO_Rem≠_TIM14
 ((
uöt32_t
)0x80000200Ë

	)

216 
	#GPIO_Rem≠_FSMC_NADV
 ((
uöt32_t
)0x80000400Ë

	)

218 
	#GPIO_Rem≠_TIM67_DAC_DMA
 ((
uöt32_t
)0x80000800Ë

	)

219 
	#GPIO_Rem≠_TIM12
 ((
uöt32_t
)0x80001000Ë

	)

220 
	#GPIO_Rem≠_MISC
 ((
uöt32_t
)0x80002000Ë

	)

223 
	#IS_GPIO_REMAP
(
REMAP
Ë(((REMAPË=
GPIO_Rem≠_SPI1
Ë|| ((REMAPË=
GPIO_Rem≠_I2C1
) || \

224 ((
REMAP
Ë=
GPIO_Rem≠_USART1
Ë|| ((REMAPË=
GPIO_Rem≠_USART2
) || \

225 ((
REMAP
Ë=
GPIO_P¨tülRem≠_USART3
Ë|| ((REMAPË=
GPIO_FuŒRem≠_USART3
) || \

226 ((
REMAP
Ë=
GPIO_P¨tülRem≠_TIM1
Ë|| ((REMAPË=
GPIO_FuŒRem≠_TIM1
) || \

227 ((
REMAP
Ë=
GPIO_P¨tülRem≠1_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠2_TIM2
) || \

228 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM2
Ë|| ((REMAPË=
GPIO_P¨tülRem≠_TIM3
) || \

229 ((
REMAP
Ë=
GPIO_FuŒRem≠_TIM3
Ë|| ((REMAPË=
GPIO_Rem≠_TIM4
) || \

230 ((
REMAP
Ë=
GPIO_Rem≠1_CAN1
Ë|| ((REMAPË=
GPIO_Rem≠2_CAN1
) || \

231 ((
REMAP
Ë=
GPIO_Rem≠_PD01
Ë|| ((REMAPË=
GPIO_Rem≠_TIM5CH4_LSI
) || \

232 ((
REMAP
Ë=
GPIO_Rem≠_ADC1_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC1_ETRGREG
) || \

233 ((
REMAP
Ë=
GPIO_Rem≠_ADC2_ETRGINJ
Ë||((REMAPË=
GPIO_Rem≠_ADC2_ETRGREG
) || \

234 ((
REMAP
Ë=
GPIO_Rem≠_ETH
Ë||((REMAPË=
GPIO_Rem≠_CAN2
) || \

235 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_NoJTRST
Ë|| ((REMAPË=
GPIO_Rem≠_SWJ_JTAGDißbÀ
) || \

236 ((
REMAP
Ë=
GPIO_Rem≠_SWJ_DißbÀ
)|| ((REMAPË=
GPIO_Rem≠_SPI3
) || \

237 ((
REMAP
Ë=
GPIO_Rem≠_TIM2ITR1_PTP_SOF
Ë|| ((REMAPË=
GPIO_Rem≠_PTP_PPS
) || \

238 ((
REMAP
Ë=
GPIO_Rem≠_TIM15
Ë|| ((REMAPË=
GPIO_Rem≠_TIM16
) || \

239 ((
REMAP
Ë=
GPIO_Rem≠_TIM17
Ë|| ((REMAPË=
GPIO_Rem≠_CEC
) || \

240 ((
REMAP
Ë=
GPIO_Rem≠_TIM1_DMA
Ë|| ((REMAPË=
GPIO_Rem≠_TIM9
) || \

241 ((
REMAP
Ë=
GPIO_Rem≠_TIM10
Ë|| ((REMAPË=
GPIO_Rem≠_TIM11
) || \

242 ((
REMAP
Ë=
GPIO_Rem≠_TIM13
Ë|| ((REMAPË=
GPIO_Rem≠_TIM14
) || \

243 ((
REMAP
Ë=
GPIO_Rem≠_FSMC_NADV
Ë|| ((REMAPË=
GPIO_Rem≠_TIM67_DAC_DMA
) || \

244 ((
REMAP
Ë=
GPIO_Rem≠_TIM12
Ë|| ((REMAPË=
GPIO_Rem≠_MISC
))

	)

254 
	#GPIO_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

255 
	#GPIO_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

256 
	#GPIO_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

257 
	#GPIO_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

258 
	#GPIO_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

259 
	#GPIO_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

260 
	#GPIO_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

261 
	#IS_GPIO_EVENTOUT_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
) || \

262 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

263 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

264 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

265 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
))

	)

267 
	#IS_GPIO_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
GPIO_P‹tSour˚GPIOA
) || \

268 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOB
) || \

269 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOC
) || \

270 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOD
) || \

271 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOE
) || \

272 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOF
) || \

273 ((
PORTSOURCE
Ë=
GPIO_P‹tSour˚GPIOG
))

	)

283 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

284 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

285 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

286 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

287 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

288 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

289 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

290 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

291 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

292 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

293 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

294 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

295 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

296 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

297 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

298 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

300 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
) || \

301 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

302 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

303 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

304 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

305 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

306 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

307 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

308 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

309 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

310 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

311 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

312 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

313 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

314 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

315 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

	)

324 
	#GPIO_ETH_MedüI¡îÁ˚_MII
 ((
u32
)0x00000000)

	)

325 
	#GPIO_ETH_MedüI¡îÁ˚_RMII
 ((
u32
)0x00000001)

	)

327 
	#IS_GPIO_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
GPIO_ETH_MedüI¡îÁ˚_MII
) || \

328 ((
INTERFACE
Ë=
GPIO_ETH_MedüI¡îÁ˚_RMII
))

	)

349 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

350 
GPIO_AFIODeInô
();

351 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

352 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

353 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

354 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

355 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

356 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

357 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

358 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

359 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

360 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

361 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

362 
GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

363 
GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

364 
GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

365 
GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
);

366 
GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
);

368 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h

24 #i‚de‡
__STM32F10x_I2C_H


25 
	#__STM32F10x_I2C_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
I2C_ClockS≥ed
;

55 
uöt16_t
 
I2C_Mode
;

58 
uöt16_t
 
I2C_DutyCy˛e
;

61 
uöt16_t
 
I2C_OwnAddªss1
;

64 
uöt16_t
 
I2C_Ack
;

67 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

69 }
	tI2C_InôTy≥Def
;

80 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
) || \

81 ((
PERIPH
Ë=
I2C2
))

	)

86 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

87 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

88 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

89 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
) || \

90 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

91 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

	)

100 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

101 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

102 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
) || \

103 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

	)

112 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

113 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

114 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
) || \

115 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

	)

124 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

125 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

126 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
) || \

127 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

	)

136 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

137 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

138 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
) || \

139 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

	)

148 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

149 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

150 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

151 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

152 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

153 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

154 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

155 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

156 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

157 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
) || \

158 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

163 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

164 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

165 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

	)

174 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

175 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

176 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
) || \

177 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

	)

186 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

187 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

188 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
) || \

189 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

	)

198 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

199 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

200 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
) || \

201 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

	)

210 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

211 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

212 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

213 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

222 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

223 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

224 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

225 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

226 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

227 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

228 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

229 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

230 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

231 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

232 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

233 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

234 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

235 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

237 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

239 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
) || \

240 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

241 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

242 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

243 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

244 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

245 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

	)

258 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

259 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

260 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

261 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

262 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

263 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

264 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

270 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

271 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

272 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

273 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

274 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

275 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

276 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

277 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

278 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

279 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

280 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

281 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

282 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

283 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

285 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

287 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
) || \

288 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

289 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

290 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

291 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

292 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

293 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

294 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

295 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

296 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

297 ((
FLAG
Ë=
I2C_FLAG_SB
))

	)

319 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

347 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

348 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

350 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

383 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

387 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

389 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

424 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

425 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

428 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

429 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

432 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

463 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

465 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

469 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

470 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

472 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

476 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
) || \

477 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

478 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

479 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

480 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

481 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

482 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

483 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

484 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

485 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

486 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

487 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

488 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

489 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

490 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

491 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

492 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

493 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

494 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

495 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

	)

504 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

513 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

534 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

535 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

536 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

537 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

538 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

539 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

540 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

542 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

544 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

546 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

547 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

548 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

549 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

550 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

551 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

552 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

553 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

554 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

555 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

556 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

558 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

559 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

560 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

645 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

651 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

657 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

663 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

664 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

665 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

667 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h

24 #i‚de‡
__STM32F10x_IWDG_H


25 
	#__STM32F10x_IWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

59 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

60 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
) || \

61 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

	)

70 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

71 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

72 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

73 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

74 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

75 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

76 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

77 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

83 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

	)

92 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

93 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

94 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

95 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

116 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

117 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

118 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

119 
IWDG_RñﬂdCou¡î
();

120 
IWDG_E«bÀ
();

121 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

123 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h

24 #i‚de‡
__STM32F10x_PWR_H


25 
	#__STM32F10x_PWR_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#PWR_PVDLevñ_2V2
 ((
uöt32_t
)0x00000000)

	)

59 
	#PWR_PVDLevñ_2V3
 ((
uöt32_t
)0x00000020)

	)

60 
	#PWR_PVDLevñ_2V4
 ((
uöt32_t
)0x00000040)

	)

61 
	#PWR_PVDLevñ_2V5
 ((
uöt32_t
)0x00000060)

	)

62 
	#PWR_PVDLevñ_2V6
 ((
uöt32_t
)0x00000080)

	)

63 
	#PWR_PVDLevñ_2V7
 ((
uöt32_t
)0x000000A0)

	)

64 
	#PWR_PVDLevñ_2V8
 ((
uöt32_t
)0x000000C0)

	)

65 
	#PWR_PVDLevñ_2V9
 ((
uöt32_t
)0x000000E0)

	)

66 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_2V2
Ë|| ((LEVELË=
PWR_PVDLevñ_2V3
)|| \

67 ((
LEVEL
Ë=
PWR_PVDLevñ_2V4
Ë|| ((LEVELË=
PWR_PVDLevñ_2V5
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2V6
Ë|| ((LEVELË=
PWR_PVDLevñ_2V7
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_2V8
Ë|| ((LEVELË=
PWR_PVDLevñ_2V9
))

	)

78 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

79 
	#PWR_Reguœt‹_LowPowî
 ((
uöt32_t
)0x00000001)

	)

80 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
) || \

81 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

	)

90 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

91 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

92 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

102 
	#PWR_FLAG_WU
 ((
uöt32_t
)0x00000001)

	)

103 
	#PWR_FLAG_SB
 ((
uöt32_t
)0x00000002)

	)

104 
	#PWR_FLAG_PVDO
 ((
uöt32_t
)0x00000004)

	)

105 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

106 ((
FLAG
Ë=
PWR_FLAG_PVDO
))

	)

108 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

129 
PWR_DeInô
();

130 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

131 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

132 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

133 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

134 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

135 
PWR_E¡îSTANDBYMode
();

136 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

137 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

139 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h

24 #i‚de‡
__STM32F10x_RCC_H


25 
	#__STM32F10x_RCC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

48 
uöt32_t
 
SYSCLK_Fªquícy
;

49 
uöt32_t
 
HCLK_Fªquícy
;

50 
uöt32_t
 
PCLK1_Fªquícy
;

51 
uöt32_t
 
PCLK2_Fªquícy
;

52 
uöt32_t
 
ADCCLK_Fªquícy
;

53 }
	tRCC_ClocksTy≥Def
;

67 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000)

	)

68 
	#RCC_HSE_ON
 ((
uöt32_t
)0x00010000)

	)

69 
	#RCC_HSE_By∑ss
 ((
uöt32_t
)0x00040000)

	)

70 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

71 ((
HSE
Ë=
RCC_HSE_By∑ss
))

	)

81 
	#RCC_PLLSour˚_HSI_Div2
 ((
uöt32_t
)0x00000000)

	)

83 #i‡!
deföed
 (
STM32F10X_LD_VL
Ë&& !deföed (
STM32F10X_MD_VL
Ë&& !deföed (
STM32F10X_HD_VL
Ë&& !deföed (
STM32F10X_CL
)

84 
	#RCC_PLLSour˚_HSE_Div1
 ((
uöt32_t
)0x00010000)

	)

85 
	#RCC_PLLSour˚_HSE_Div2
 ((
uöt32_t
)0x00030000)

	)

86 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
) || \

87 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div1
) || \

88 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE_Div2
))

	)

90 
	#RCC_PLLSour˚_PREDIV1
 ((
uöt32_t
)0x00010000)

	)

91 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
) || \

92 ((
SOURCE
Ë=
RCC_PLLSour˚_PREDIV1
))

	)

102 #i‚de‡
STM32F10X_CL


103 
	#RCC_PLLMul_2
 ((
uöt32_t
)0x00000000)

	)

104 
	#RCC_PLLMul_3
 ((
uöt32_t
)0x00040000)

	)

105 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

106 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

107 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

108 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

109 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

110 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

111 
	#RCC_PLLMul_10
 ((
uöt32_t
)0x00200000)

	)

112 
	#RCC_PLLMul_11
 ((
uöt32_t
)0x00240000)

	)

113 
	#RCC_PLLMul_12
 ((
uöt32_t
)0x00280000)

	)

114 
	#RCC_PLLMul_13
 ((
uöt32_t
)0x002C0000)

	)

115 
	#RCC_PLLMul_14
 ((
uöt32_t
)0x00300000)

	)

116 
	#RCC_PLLMul_15
 ((
uöt32_t
)0x00340000)

	)

117 
	#RCC_PLLMul_16
 ((
uöt32_t
)0x00380000)

	)

118 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
) || \

119 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

120 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

121 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

122 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

123 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

124 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

125 ((
MUL
Ë=
RCC_PLLMul_16
))

	)

128 
	#RCC_PLLMul_4
 ((
uöt32_t
)0x00080000)

	)

129 
	#RCC_PLLMul_5
 ((
uöt32_t
)0x000C0000)

	)

130 
	#RCC_PLLMul_6
 ((
uöt32_t
)0x00100000)

	)

131 
	#RCC_PLLMul_7
 ((
uöt32_t
)0x00140000)

	)

132 
	#RCC_PLLMul_8
 ((
uöt32_t
)0x00180000)

	)

133 
	#RCC_PLLMul_9
 ((
uöt32_t
)0x001C0000)

	)

134 
	#RCC_PLLMul_6_5
 ((
uöt32_t
)0x00340000)

	)

136 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

137 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

138 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

139 ((
MUL
Ë=
RCC_PLLMul_6_5
))

	)

148 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

149 
	#RCC_PREDIV1_Div1
 ((
uöt32_t
)0x00000000)

	)

150 
	#RCC_PREDIV1_Div2
 ((
uöt32_t
)0x00000001)

	)

151 
	#RCC_PREDIV1_Div3
 ((
uöt32_t
)0x00000002)

	)

152 
	#RCC_PREDIV1_Div4
 ((
uöt32_t
)0x00000003)

	)

153 
	#RCC_PREDIV1_Div5
 ((
uöt32_t
)0x00000004)

	)

154 
	#RCC_PREDIV1_Div6
 ((
uöt32_t
)0x00000005)

	)

155 
	#RCC_PREDIV1_Div7
 ((
uöt32_t
)0x00000006)

	)

156 
	#RCC_PREDIV1_Div8
 ((
uöt32_t
)0x00000007)

	)

157 
	#RCC_PREDIV1_Div9
 ((
uöt32_t
)0x00000008)

	)

158 
	#RCC_PREDIV1_Div10
 ((
uöt32_t
)0x00000009)

	)

159 
	#RCC_PREDIV1_Div11
 ((
uöt32_t
)0x0000000A)

	)

160 
	#RCC_PREDIV1_Div12
 ((
uöt32_t
)0x0000000B)

	)

161 
	#RCC_PREDIV1_Div13
 ((
uöt32_t
)0x0000000C)

	)

162 
	#RCC_PREDIV1_Div14
 ((
uöt32_t
)0x0000000D)

	)

163 
	#RCC_PREDIV1_Div15
 ((
uöt32_t
)0x0000000E)

	)

164 
	#RCC_PREDIV1_Div16
 ((
uöt32_t
)0x0000000F)

	)

166 
	#IS_RCC_PREDIV1
(
PREDIV1
Ë(((PREDIV1Ë=
RCC_PREDIV1_Div1
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div2
) || \

167 ((
PREDIV1
Ë=
RCC_PREDIV1_Div3
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div4
) || \

168 ((
PREDIV1
Ë=
RCC_PREDIV1_Div5
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div6
) || \

169 ((
PREDIV1
Ë=
RCC_PREDIV1_Div7
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div8
) || \

170 ((
PREDIV1
Ë=
RCC_PREDIV1_Div9
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div10
) || \

171 ((
PREDIV1
Ë=
RCC_PREDIV1_Div11
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div12
) || \

172 ((
PREDIV1
Ë=
RCC_PREDIV1_Div13
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div14
) || \

173 ((
PREDIV1
Ë=
RCC_PREDIV1_Div15
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div16
))

	)

183 #ifde‡
STM32F10X_CL


185 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

186 
	#RCC_PREDIV1_Sour˚_PLL2
 ((
uöt32_t
)0x00010000)

	)

188 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
) || \

189 ((
SOURCE
Ë=
RCC_PREDIV1_Sour˚_PLL2
))

	)

190 #ñi‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

192 
	#RCC_PREDIV1_Sour˚_HSE
 ((
uöt32_t
)0x00000000)

	)

194 
	#IS_RCC_PREDIV1_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PREDIV1_Sour˚_HSE
))

	)

200 #ifde‡
STM32F10X_CL


205 
	#RCC_PREDIV2_Div1
 ((
uöt32_t
)0x00000000)

	)

206 
	#RCC_PREDIV2_Div2
 ((
uöt32_t
)0x00000010)

	)

207 
	#RCC_PREDIV2_Div3
 ((
uöt32_t
)0x00000020)

	)

208 
	#RCC_PREDIV2_Div4
 ((
uöt32_t
)0x00000030)

	)

209 
	#RCC_PREDIV2_Div5
 ((
uöt32_t
)0x00000040)

	)

210 
	#RCC_PREDIV2_Div6
 ((
uöt32_t
)0x00000050)

	)

211 
	#RCC_PREDIV2_Div7
 ((
uöt32_t
)0x00000060)

	)

212 
	#RCC_PREDIV2_Div8
 ((
uöt32_t
)0x00000070)

	)

213 
	#RCC_PREDIV2_Div9
 ((
uöt32_t
)0x00000080)

	)

214 
	#RCC_PREDIV2_Div10
 ((
uöt32_t
)0x00000090)

	)

215 
	#RCC_PREDIV2_Div11
 ((
uöt32_t
)0x000000A0)

	)

216 
	#RCC_PREDIV2_Div12
 ((
uöt32_t
)0x000000B0)

	)

217 
	#RCC_PREDIV2_Div13
 ((
uöt32_t
)0x000000C0)

	)

218 
	#RCC_PREDIV2_Div14
 ((
uöt32_t
)0x000000D0)

	)

219 
	#RCC_PREDIV2_Div15
 ((
uöt32_t
)0x000000E0)

	)

220 
	#RCC_PREDIV2_Div16
 ((
uöt32_t
)0x000000F0)

	)

222 
	#IS_RCC_PREDIV2
(
PREDIV2
Ë(((PREDIV2Ë=
RCC_PREDIV2_Div1
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div2
) || \

223 ((
PREDIV2
Ë=
RCC_PREDIV2_Div3
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div4
) || \

224 ((
PREDIV2
Ë=
RCC_PREDIV2_Div5
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div6
) || \

225 ((
PREDIV2
Ë=
RCC_PREDIV2_Div7
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div8
) || \

226 ((
PREDIV2
Ë=
RCC_PREDIV2_Div9
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div10
) || \

227 ((
PREDIV2
Ë=
RCC_PREDIV2_Div11
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div12
) || \

228 ((
PREDIV2
Ë=
RCC_PREDIV2_Div13
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div14
) || \

229 ((
PREDIV2
Ë=
RCC_PREDIV2_Div15
Ë|| ((PREDIV2Ë=
RCC_PREDIV2_Div16
))

	)

239 
	#RCC_PLL2Mul_8
 ((
uöt32_t
)0x00000600)

	)

240 
	#RCC_PLL2Mul_9
 ((
uöt32_t
)0x00000700)

	)

241 
	#RCC_PLL2Mul_10
 ((
uöt32_t
)0x00000800)

	)

242 
	#RCC_PLL2Mul_11
 ((
uöt32_t
)0x00000900)

	)

243 
	#RCC_PLL2Mul_12
 ((
uöt32_t
)0x00000A00)

	)

244 
	#RCC_PLL2Mul_13
 ((
uöt32_t
)0x00000B00)

	)

245 
	#RCC_PLL2Mul_14
 ((
uöt32_t
)0x00000C00)

	)

246 
	#RCC_PLL2Mul_16
 ((
uöt32_t
)0x00000E00)

	)

247 
	#RCC_PLL2Mul_20
 ((
uöt32_t
)0x00000F00)

	)

249 
	#IS_RCC_PLL2_MUL
(
MUL
Ë(((MULË=
RCC_PLL2Mul_8
Ë|| ((MULË=
RCC_PLL2Mul_9
) || \

250 ((
MUL
Ë=
RCC_PLL2Mul_10
Ë|| ((MULË=
RCC_PLL2Mul_11
) || \

251 ((
MUL
Ë=
RCC_PLL2Mul_12
Ë|| ((MULË=
RCC_PLL2Mul_13
) || \

252 ((
MUL
Ë=
RCC_PLL2Mul_14
Ë|| ((MULË=
RCC_PLL2Mul_16
) || \

253 ((
MUL
Ë=
RCC_PLL2Mul_20
))

	)

263 
	#RCC_PLL3Mul_8
 ((
uöt32_t
)0x00006000)

	)

264 
	#RCC_PLL3Mul_9
 ((
uöt32_t
)0x00007000)

	)

265 
	#RCC_PLL3Mul_10
 ((
uöt32_t
)0x00008000)

	)

266 
	#RCC_PLL3Mul_11
 ((
uöt32_t
)0x00009000)

	)

267 
	#RCC_PLL3Mul_12
 ((
uöt32_t
)0x0000A000)

	)

268 
	#RCC_PLL3Mul_13
 ((
uöt32_t
)0x0000B000)

	)

269 
	#RCC_PLL3Mul_14
 ((
uöt32_t
)0x0000C000)

	)

270 
	#RCC_PLL3Mul_16
 ((
uöt32_t
)0x0000E000)

	)

271 
	#RCC_PLL3Mul_20
 ((
uöt32_t
)0x0000F000)

	)

273 
	#IS_RCC_PLL3_MUL
(
MUL
Ë(((MULË=
RCC_PLL3Mul_8
Ë|| ((MULË=
RCC_PLL3Mul_9
) || \

274 ((
MUL
Ë=
RCC_PLL3Mul_10
Ë|| ((MULË=
RCC_PLL3Mul_11
) || \

275 ((
MUL
Ë=
RCC_PLL3Mul_12
Ë|| ((MULË=
RCC_PLL3Mul_13
) || \

276 ((
MUL
Ë=
RCC_PLL3Mul_14
Ë|| ((MULË=
RCC_PLL3Mul_16
) || \

277 ((
MUL
Ë=
RCC_PLL3Mul_20
))

	)

289 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

290 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

291 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

292 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
) || \

293 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

294 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

	)

303 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

304 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

305 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

306 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

307 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

308 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

309 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

310 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

311 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

312 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
) || \

313 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

314 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

315 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

316 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

	)

325 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

326 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

327 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

328 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

329 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

330 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
) || \

331 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

332 ((
PCLK
Ë=
RCC_HCLK_Div16
))

	)

341 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

342 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

343 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

344 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

345 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

346 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

348 #i‚de‡
STM32F10X_CL


349 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xE0Ë=0x00Ë&& ((ITË!0x00))

	)

350 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

351 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

352 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

	)

353 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x60Ë=0x00Ë&& ((ITË!0x00))

	)

355 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)0x20)

	)

356 
	#RCC_IT_PLL3RDY
 ((
uöt8_t
)0x40)

	)

357 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

358 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

359 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

360 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

361 ((
IT
Ë=
RCC_IT_PLL2RDY
Ë|| ((ITË=
RCC_IT_PLL3RDY
))

	)

362 
	#IS_RCC_CLEAR_IT
(
IT
Ë((ITË!0x00)

	)

370 #i‚de‡
STM32F10X_CL


375 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

376 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

378 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
) || \

379 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

	)

387 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div3
 ((
uöt8_t
)0x00)

	)

388 
	#RCC_OTGFSCLKSour˚_PLLVCO_Div2
 ((
uöt8_t
)0x01)

	)

390 
	#IS_RCC_OTGFSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_OTGFSCLKSour˚_PLLVCO_Div3
) || \

391 ((
SOURCE
Ë=
RCC_OTGFSCLKSour˚_PLLVCO_Div2
))

	)

398 #ifde‡
STM32F10X_CL


402 
	#RCC_I2S2CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

403 
	#RCC_I2S2CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

405 
	#IS_RCC_I2S2CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_SYSCLK
) || \

406 ((
SOURCE
Ë=
RCC_I2S2CLKSour˚_PLL3_VCO
))

	)

414 
	#RCC_I2S3CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

415 
	#RCC_I2S3CLKSour˚_PLL3_VCO
 ((
uöt8_t
)0x01)

	)

417 
	#IS_RCC_I2S3CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S3CLKSour˚_SYSCLK
) || \

418 ((
SOURCE
Ë=
RCC_I2S3CLKSour˚_PLL3_VCO
))

	)

429 
	#RCC_PCLK2_Div2
 ((
uöt32_t
)0x00000000)

	)

430 
	#RCC_PCLK2_Div4
 ((
uöt32_t
)0x00004000)

	)

431 
	#RCC_PCLK2_Div6
 ((
uöt32_t
)0x00008000)

	)

432 
	#RCC_PCLK2_Div8
 ((
uöt32_t
)0x0000C000)

	)

433 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_PCLK2_Div2
Ë|| ((ADCCLKË=
RCC_PCLK2_Div4
) || \

434 ((
ADCCLK
Ë=
RCC_PCLK2_Div6
Ë|| ((ADCCLKË=
RCC_PCLK2_Div8
))

	)

443 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

444 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

445 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

446 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

447 ((
LSE
Ë=
RCC_LSE_By∑ss
))

	)

456 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

457 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

458 
	#RCC_RTCCLKSour˚_HSE_Div128
 ((
uöt32_t
)0x00000300)

	)

459 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
) || \

460 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

461 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div128
))

	)

470 
	#RCC_AHBPîùh_DMA1
 ((
uöt32_t
)0x00000001)

	)

471 
	#RCC_AHBPîùh_DMA2
 ((
uöt32_t
)0x00000002)

	)

472 
	#RCC_AHBPîùh_SRAM
 ((
uöt32_t
)0x00000004)

	)

473 
	#RCC_AHBPîùh_FLITF
 ((
uöt32_t
)0x00000010)

	)

474 
	#RCC_AHBPîùh_CRC
 ((
uöt32_t
)0x00000040)

	)

476 #i‚de‡
STM32F10X_CL


477 
	#RCC_AHBPîùh_FSMC
 ((
uöt32_t
)0x00000100)

	)

478 
	#RCC_AHBPîùh_SDIO
 ((
uöt32_t
)0x00000400)

	)

479 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFAA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

481 
	#RCC_AHBPîùh_OTG_FS
 ((
uöt32_t
)0x00001000)

	)

482 
	#RCC_AHBPîùh_ETH_MAC
 ((
uöt32_t
)0x00004000)

	)

483 
	#RCC_AHBPîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x00008000)

	)

484 
	#RCC_AHBPîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x00010000)

	)

486 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFE2FA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

487 
	#IS_RCC_AHB_PERIPH_RESET
(
PERIPH
Ë((((PERIPHË& 0xFFFFAFFFË=0x00Ë&& ((PERIPHË!0x00))

	)

497 
	#RCC_APB2Pîùh_AFIO
 ((
uöt32_t
)0x00000001)

	)

498 
	#RCC_APB2Pîùh_GPIOA
 ((
uöt32_t
)0x00000004)

	)

499 
	#RCC_APB2Pîùh_GPIOB
 ((
uöt32_t
)0x00000008)

	)

500 
	#RCC_APB2Pîùh_GPIOC
 ((
uöt32_t
)0x00000010)

	)

501 
	#RCC_APB2Pîùh_GPIOD
 ((
uöt32_t
)0x00000020)

	)

502 
	#RCC_APB2Pîùh_GPIOE
 ((
uöt32_t
)0x00000040)

	)

503 
	#RCC_APB2Pîùh_GPIOF
 ((
uöt32_t
)0x00000080)

	)

504 
	#RCC_APB2Pîùh_GPIOG
 ((
uöt32_t
)0x00000100)

	)

505 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000200)

	)

506 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000400)

	)

507 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

508 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

509 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

510 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

511 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00008000)

	)

512 
	#RCC_APB2Pîùh_TIM15
 ((
uöt32_t
)0x00010000)

	)

513 
	#RCC_APB2Pîùh_TIM16
 ((
uöt32_t
)0x00020000)

	)

514 
	#RCC_APB2Pîùh_TIM17
 ((
uöt32_t
)0x00040000)

	)

515 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00080000)

	)

516 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00100000)

	)

517 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00200000)

	)

519 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFC00002Ë=0x00Ë&& ((PERIPHË!0x00))

	)

528 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

529 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

530 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

531 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

532 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

533 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

534 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

535 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

536 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

537 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

538 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

539 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

540 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

541 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

542 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

543 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

544 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

545 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

546 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

547 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

548 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

549 
	#RCC_APB1Pîùh_BKP
 ((
uöt32_t
)0x08000000)

	)

550 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

551 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

552 
	#RCC_APB1Pîùh_CEC
 ((
uöt32_t
)0x40000000)

	)

554 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

564 
	#RCC_MCO_NoClock
 ((
uöt8_t
)0x00)

	)

565 
	#RCC_MCO_SYSCLK
 ((
uöt8_t
)0x04)

	)

566 
	#RCC_MCO_HSI
 ((
uöt8_t
)0x05)

	)

567 
	#RCC_MCO_HSE
 ((
uöt8_t
)0x06)

	)

568 
	#RCC_MCO_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

570 #i‚de‡
STM32F10X_CL


571 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
) || \

572 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

573 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
))

	)

575 
	#RCC_MCO_PLL2CLK
 ((
uöt8_t
)0x08)

	)

576 
	#RCC_MCO_PLL3CLK_Div2
 ((
uöt8_t
)0x09)

	)

577 
	#RCC_MCO_XT1
 ((
uöt8_t
)0x0A)

	)

578 
	#RCC_MCO_PLL3CLK
 ((
uöt8_t
)0x0B)

	)

580 
	#IS_RCC_MCO
(
MCO
Ë(((MCOË=
RCC_MCO_NoClock
Ë|| ((MCOË=
RCC_MCO_HSI
) || \

581 ((
MCO
Ë=
RCC_MCO_SYSCLK
Ë|| ((MCOË=
RCC_MCO_HSE
) || \

582 ((
MCO
Ë=
RCC_MCO_PLLCLK_Div2
Ë|| ((MCOË=
RCC_MCO_PLL2CLK
) || \

583 ((
MCO
Ë=
RCC_MCO_PLL3CLK_Div2
Ë|| ((MCOË=
RCC_MCO_XT1
) || \

584 ((
MCO
Ë=
RCC_MCO_PLL3CLK
))

	)

595 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

596 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

597 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

598 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

599 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

600 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

601 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

602 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

603 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

604 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

605 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

607 #i‚de‡
STM32F10X_CL


608 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

609 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

610 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

611 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

612 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

613 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

	)

615 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)0x3B)

	)

616 
	#RCC_FLAG_PLL3RDY
 ((
uöt8_t
)0x3D)

	)

617 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

618 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

619 ((
FLAG
Ë=
RCC_FLAG_PLL2RDY
Ë|| ((FLAGË=
RCC_FLAG_PLL3RDY
) || \

620 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PINRST
) || \

621 ((
FLAG
Ë=
RCC_FLAG_PORRST
Ë|| ((FLAGË=
RCC_FLAG_SFTRST
) || \

622 ((
FLAG
Ë=
RCC_FLAG_IWDGRST
)|| ((FLAGË=
RCC_FLAG_WWDGRST
)|| \

623 ((
FLAG
Ë=
RCC_FLAG_LPWRRST
))

	)

626 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

647 
RCC_DeInô
();

648 
RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
);

649 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

650 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

651 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

652 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

653 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

655 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

656 
RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
);

659 #ifde‡ 
STM32F10X_CL


660 
RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
);

661 
RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
);

662 
RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

663 
RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
);

664 
RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

667 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

668 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

669 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

670 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

671 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

672 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

674 #i‚de‡
STM32F10X_CL


675 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

677 
RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
);

680 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
);

682 #ifde‡
STM32F10X_CL


683 
RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
);

684 
RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
);

687 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

688 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

689 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

690 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

691 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

692 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

693 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

694 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

696 #ifde‡
STM32F10X_CL


697 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

700 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

701 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

702 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

703 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

704 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
);

705 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

706 
RCC_CÀ¨Fœg
();

707 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

708 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

710 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h

24 #i‚de‡
__STM32F10x_RTC_H


25 
	#__STM32F10x_RTC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#RTC_IT_OW
 ((
uöt16_t
)0x0004Ë

	)

59 
	#RTC_IT_ALR
 ((
uöt16_t
)0x0002Ë

	)

60 
	#RTC_IT_SEC
 ((
uöt16_t
)0x0001Ë

	)

61 
	#IS_RTC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFF8Ë=0x00Ë&& ((ITË!0x00))

	)

62 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_OW
Ë|| ((ITË=
RTC_IT_ALR
) || \

63 ((
IT
Ë=
RTC_IT_SEC
))

	)

72 
	#RTC_FLAG_RTOFF
 ((
uöt16_t
)0x0020Ë

	)

73 
	#RTC_FLAG_RSF
 ((
uöt16_t
)0x0008Ë

	)

74 
	#RTC_FLAG_OW
 ((
uöt16_t
)0x0004Ë

	)

75 
	#RTC_FLAG_ALR
 ((
uöt16_t
)0x0002Ë

	)

76 
	#RTC_FLAG_SEC
 ((
uöt16_t
)0x0001Ë

	)

77 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFF0Ë=0x00Ë&& ((FLAGË!0x00))

	)

78 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_RTOFF
Ë|| ((FLAGË=
RTC_FLAG_RSF
) || \

79 ((
FLAG
Ë=
RTC_FLAG_OW
Ë|| ((FLAGË=
RTC_FLAG_ALR
) || \

80 ((
FLAG
Ë=
RTC_FLAG_SEC
))

	)

81 
	#IS_RTC_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFFFFF)

	)

103 
RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

104 
RTC_E¡îC⁄figMode
();

105 
RTC_ExôC⁄figMode
();

106 
uöt32_t
 
RTC_GëCou¡î
();

107 
RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
);

108 
RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
);

109 
RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
);

110 
uöt32_t
 
RTC_GëDividî
();

111 
RTC_WaôF‹La°Task
();

112 
RTC_WaôF‹Synchro
();

113 
FœgSètus
 
RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
);

114 
RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
);

115 
ITSètus
 
RTC_GëITSètus
(
uöt16_t
 
RTC_IT
);

116 
RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
);

118 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h

24 #i‚de‡
__STM32F10x_SDIO_H


25 
	#__STM32F10x_SDIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

48 
uöt32_t
 
SDIO_ClockEdge
;

51 
uöt32_t
 
SDIO_ClockBy∑ss
;

55 
uöt32_t
 
SDIO_ClockPowîSave
;

59 
uöt32_t
 
SDIO_BusWide
;

62 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

65 
uöt8_t
 
SDIO_ClockDiv
;

68 } 
	tSDIO_InôTy≥Def
;

72 
uöt32_t
 
SDIO_Argumít
;

77 
uöt32_t
 
SDIO_CmdIndex
;

79 
uöt32_t
 
SDIO_Re•⁄£
;

82 
uöt32_t
 
SDIO_Waô
;

85 
uöt32_t
 
SDIO_CPSM
;

88 } 
	tSDIO_CmdInôTy≥Def
;

92 
uöt32_t
 
SDIO_D©aTimeOut
;

94 
uöt32_t
 
SDIO_D©aLígth
;

96 
uöt32_t
 
SDIO_D©aBlockSize
;

99 
uöt32_t
 
SDIO_Tøns„rDú
;

103 
uöt32_t
 
SDIO_Tøns„rMode
;

106 
uöt32_t
 
SDIO_DPSM
;

109 } 
	tSDIO_D©aInôTy≥Def
;

123 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

124 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

125 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
) || \

126 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

	)

135 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

136 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

137 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
) || \

138 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

	)

147 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

148 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

149 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
) || \

150 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

	)

159 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

160 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

161 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

162 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
) || \

163 ((
WIDE
Ë=
SDIO_BusWide_8b
))

	)

173 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

174 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

175 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
) || \

176 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

	)

185 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

186 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

187 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

197 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

198 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

199 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

200 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

201 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

202 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

203 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

204 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

205 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

206 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

207 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

208 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

209 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

210 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

211 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

212 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

213 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

214 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

215 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

216 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

217 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

218 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

219 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

220 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

221 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

230 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

239 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

240 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

241 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

242 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
) || \

243 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

244 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

	)

253 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

254 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

255 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

256 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
) || \

257 ((
WAIT
Ë=
SDIO_Waô_Píd
))

	)

266 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

267 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

268 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

277 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

278 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

279 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

280 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

281 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
) || \

282 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

	)

291 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

300 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

301 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

302 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

303 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

304 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

305 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

306 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

307 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

308 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

309 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

310 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

311 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

312 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

313 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

314 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

315 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
) || \

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

329 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

	)

338 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

339 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

340 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
) || \

341 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

	)

350 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

351 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

352 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
) || \

353 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

	)

362 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

363 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

364 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

373 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

374 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

375 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

376 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

377 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

378 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

379 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

380 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

381 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

382 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

383 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

384 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

385 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

386 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

387 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

388 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

389 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

390 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

391 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

392 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

393 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

394 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

395 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

396 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

397 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
) || \

398 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

420 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

	)

422 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

424 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
) || \

425 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

426 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

427 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

428 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

429 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

430 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

431 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

432 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

433 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

434 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

435 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

436 ((
IT
Ë=
SDIO_IT_TXACT
) || \

437 ((
IT
Ë=
SDIO_IT_RXACT
) || \

438 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

439 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

440 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

441 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

442 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

443 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

444 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

445 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

446 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

447 ((
IT
Ë=
SDIO_IT_CEATAEND
))

	)

449 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

459 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

460 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

461 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
) || \

462 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

	)

483 
SDIO_DeInô
();

484 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

485 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

486 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

487 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

488 
uöt32_t
 
SDIO_GëPowîSèã
();

489 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

491 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

492 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

493 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

494 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

495 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

496 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

497 
uöt32_t
 
SDIO_GëD©aCou¡î
();

498 
uöt32_t
 
SDIO_RódD©a
();

499 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

500 
uöt32_t
 
SDIO_GëFIFOCou¡
();

501 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

504 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

510 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

511 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

512 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

514 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h

24 #i‚de‡
__STM32F10x_SPI_H


25 
	#__STM32F10x_SPI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt16_t
 
SPI_Dúe˘i⁄
;

55 
uöt16_t
 
SPI_Mode
;

58 
uöt16_t
 
SPI_D©aSize
;

61 
uöt16_t
 
SPI_CPOL
;

64 
uöt16_t
 
SPI_CPHA
;

67 
uöt16_t
 
SPI_NSS
;

71 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

77 
uöt16_t
 
SPI_Fú°Bô
;

80 
uöt16_t
 
SPI_CRCPﬁynomül
;

81 }
	tSPI_InôTy≥Def
;

90 
uöt16_t
 
I2S_Mode
;

93 
uöt16_t
 
I2S_Sènd¨d
;

96 
uöt16_t
 
I2S_D©aF‹m©
;

99 
uöt16_t
 
I2S_MCLKOuçut
;

102 
uöt32_t
 
I2S_AudioFªq
;

105 
uöt16_t
 
I2S_CPOL
;

107 }
	tI2S_InôTy≥Def
;

117 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

118 ((
PERIPH
Ë=
SPI2
) || \

119 ((
PERIPH
Ë=
SPI3
))

	)

121 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

122 ((
PERIPH
Ë=
SPI3
))

	)

128 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

129 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

130 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

131 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

132 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
) || \

133 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

134 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

135 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

	)

144 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

145 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

146 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
) || \

147 ((
MODE
Ë=
SPI_Mode_Sœve
))

	)

156 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

157 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

158 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
) || \

159 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

	)

168 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

169 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

170 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
) || \

171 ((
CPOL
Ë=
SPI_CPOL_High
))

	)

180 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

181 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

182 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
) || \

183 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

	)

192 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

193 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

194 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
) || \

195 ((
NSS
Ë=
SPI_NSS_H¨d
))

	)

204 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

205 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

206 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

207 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

208 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

209 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

210 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

211 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

212 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
) || \

213 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

214 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

215 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

216 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

217 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

218 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

219 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

	)

228 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

229 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

230 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
) || \

231 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

	)

240 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

241 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

242 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

243 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

244 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
) || \

245 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

246 ((
MODE
Ë=
I2S_Mode_Ma°îTx
) || \

247 ((
MODE
Ë=
I2S_Mode_Ma°îRx
Ë)

	)

256 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

257 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

258 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

259 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

260 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

261 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
) || \

262 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

263 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

264 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

265 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

	)

274 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

275 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

276 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

277 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

278 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
) || \

279 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

280 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

281 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

	)

290 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

291 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

292 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
) || \

293 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

	)

302 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

303 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

304 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

305 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

306 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

307 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

308 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

309 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

310 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

311 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

313 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
) && \

314 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

315 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

	)

324 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

325 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

326 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
) || \

327 ((
CPOL
Ë=
I2S_CPOL_High
))

	)

336 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

337 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

338 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

347 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

348 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

349 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
) || \

350 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

	)

359 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

360 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

361 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

370 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

371 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

372 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
) || \

373 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

	)

382 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

383 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

384 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

385 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
) || \

386 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

387 ((
IT
Ë=
SPI_I2S_IT_ERR
))

	)

388 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

389 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

390 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

391 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

392 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

393 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
) || \

394 ((
IT
Ë=
I2S_IT_UDR
Ë|| ((ITË=
SPI_IT_CRCERR
) || \

395 ((
IT
Ë=
SPI_IT_MODF
Ë|| ((ITË=
SPI_I2S_IT_OVR
))

	)

404 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

405 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

406 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

407 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

408 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

409 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

410 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

411 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

412 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

413 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
) || \

414 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

415 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

416 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
))

	)

425 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

446 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

447 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

448 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

449 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

450 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

451 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

452 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

454 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

456 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

457 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

458 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

460 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

461 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

463 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

464 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

465 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

466 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

467 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

468 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

470 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h

24 #i‚de‡
__STM32F10x_TIM_H


25 
	#__STM32F10x_TIM_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

53 
uöt16_t
 
TIM_PªsˇÀr
;

56 
uöt16_t
 
TIM_Cou¡îMode
;

59 
uöt16_t
 
TIM_Pîiod
;

63 
uöt16_t
 
TIM_ClockDivisi⁄
;

66 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

74 } 
	tTIM_TimeBa£InôTy≥Def
;

82 
uöt16_t
 
TIM_OCMode
;

85 
uöt16_t
 
TIM_OuçutSèã
;

88 
uöt16_t
 
TIM_OuçutNSèã
;

92 
uöt16_t
 
TIM_Pul£
;

95 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

98 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCIdÀSèã
;

106 
uöt16_t
 
TIM_OCNIdÀSèã
;

109 } 
	tTIM_OCInôTy≥Def
;

118 
uöt16_t
 
TIM_Ch™√l
;

121 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

124 
uöt16_t
 
TIM_ICSñe˘i⁄
;

127 
uöt16_t
 
TIM_ICPªsˇÀr
;

130 
uöt16_t
 
TIM_ICFûãr
;

132 } 
	tTIM_ICInôTy≥Def
;

142 
uöt16_t
 
TIM_OSSRSèã
;

145 
uöt16_t
 
TIM_OSSISèã
;

148 
uöt16_t
 
TIM_LOCKLevñ
;

151 
uöt16_t
 
TIM_DódTime
;

155 
uöt16_t
 
TIM_Bªak
;

158 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

161 
uöt16_t
 
TIM_Autom©icOuçut
;

163 } 
	tTIM_BDTRInôTy≥Def
;

169 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

170 ((
PERIPH
Ë=
TIM2
) || \

171 ((
PERIPH
Ë=
TIM3
) || \

172 ((
PERIPH
Ë=
TIM4
) || \

173 ((
PERIPH
Ë=
TIM5
) || \

174 ((
PERIPH
Ë=
TIM6
) || \

175 ((
PERIPH
Ë=
TIM7
) || \

176 ((
PERIPH
Ë=
TIM8
) || \

177 ((
PERIPH
Ë=
TIM9
) || \

178 ((
PERIPH
Ë=
TIM10
)|| \

179 ((
PERIPH
Ë=
TIM11
)|| \

180 ((
PERIPH
Ë=
TIM12
)|| \

181 ((
PERIPH
Ë=
TIM13
)|| \

182 ((
PERIPH
Ë=
TIM14
)|| \

183 ((
PERIPH
Ë=
TIM15
)|| \

184 ((
PERIPH
Ë=
TIM16
)|| \

185 ((
PERIPH
Ë=
TIM17
))

	)

188 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

189 ((
PERIPH
Ë=
TIM8
))

	)

192 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

193 ((
PERIPH
Ë=
TIM8
) || \

194 ((
PERIPH
Ë=
TIM15
)|| \

195 ((
PERIPH
Ë=
TIM16
)|| \

196 ((
PERIPH
Ë=
TIM17
))

	)

199 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

200 ((
PERIPH
Ë=
TIM2
) || \

201 ((
PERIPH
Ë=
TIM3
) || \

202 ((
PERIPH
Ë=
TIM4
) || \

203 ((
PERIPH
Ë=
TIM5
) || \

204 ((
PERIPH
Ë=
TIM8
))

	)

207 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

208 ((
PERIPH
Ë=
TIM2
) || \

209 ((
PERIPH
Ë=
TIM3
) || \

210 ((
PERIPH
Ë=
TIM4
) || \

211 ((
PERIPH
Ë=
TIM5
) || \

212 ((
PERIPH
Ë=
TIM8
) || \

213 ((
PERIPH
Ë=
TIM15
)|| \

214 ((
PERIPH
Ë=
TIM16
)|| \

215 ((
PERIPH
Ë=
TIM17
))

	)

218 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

219 ((
PERIPH
Ë=
TIM2
) || \

220 ((
PERIPH
Ë=
TIM3
) || \

221 ((
PERIPH
Ë=
TIM4
) || \

222 ((
PERIPH
Ë=
TIM5
) || \

223 ((
PERIPH
Ë=
TIM8
) || \

224 ((
PERIPH
Ë=
TIM15
))

	)

227 
	#IS_TIM_LIST6_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

228 ((
PERIPH
Ë=
TIM2
) || \

229 ((
PERIPH
Ë=
TIM3
) || \

230 ((
PERIPH
Ë=
TIM4
) || \

231 ((
PERIPH
Ë=
TIM5
) || \

232 ((
PERIPH
Ë=
TIM8
) || \

233 ((
PERIPH
Ë=
TIM9
) || \

234 ((
PERIPH
Ë=
TIM12
)|| \

235 ((
PERIPH
Ë=
TIM15
))

	)

238 
	#IS_TIM_LIST7_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

239 ((
PERIPH
Ë=
TIM2
) || \

240 ((
PERIPH
Ë=
TIM3
) || \

241 ((
PERIPH
Ë=
TIM4
) || \

242 ((
PERIPH
Ë=
TIM5
) || \

243 ((
PERIPH
Ë=
TIM6
) || \

244 ((
PERIPH
Ë=
TIM7
) || \

245 ((
PERIPH
Ë=
TIM8
) || \

246 ((
PERIPH
Ë=
TIM9
) || \

247 ((
PERIPH
Ë=
TIM12
)|| \

248 ((
PERIPH
Ë=
TIM15
))

	)

251 
	#IS_TIM_LIST8_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

252 ((
PERIPH
Ë=
TIM2
) || \

253 ((
PERIPH
Ë=
TIM3
) || \

254 ((
PERIPH
Ë=
TIM4
) || \

255 ((
PERIPH
Ë=
TIM5
) || \

256 ((
PERIPH
Ë=
TIM8
) || \

257 ((
PERIPH
Ë=
TIM9
) || \

258 ((
PERIPH
Ë=
TIM10
)|| \

259 ((
PERIPH
Ë=
TIM11
)|| \

260 ((
PERIPH
Ë=
TIM12
)|| \

261 ((
PERIPH
Ë=
TIM13
)|| \

262 ((
PERIPH
Ë=
TIM14
)|| \

263 ((
PERIPH
Ë=
TIM15
)|| \

264 ((
PERIPH
Ë=
TIM16
)|| \

265 ((
PERIPH
Ë=
TIM17
))

	)

268 
	#IS_TIM_LIST9_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

269 ((
PERIPH
Ë=
TIM2
) || \

270 ((
PERIPH
Ë=
TIM3
) || \

271 ((
PERIPH
Ë=
TIM4
) || \

272 ((
PERIPH
Ë=
TIM5
) || \

273 ((
PERIPH
Ë=
TIM6
) || \

274 ((
PERIPH
Ë=
TIM7
) || \

275 ((
PERIPH
Ë=
TIM8
) || \

276 ((
PERIPH
Ë=
TIM15
)|| \

277 ((
PERIPH
Ë=
TIM16
)|| \

278 ((
PERIPH
Ë=
TIM17
))

	)

288 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

289 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

290 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

291 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

292 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

293 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

294 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

295 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

296 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

297 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

298 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

299 ((
MODE
Ë=
TIM_OCMode_PWM2
))

	)

300 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

301 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

302 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

303 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

304 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

305 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

306 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

307 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

316 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

317 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

318 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
) || \

319 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

	)

328 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

329 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

330 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

331 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

332 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

333 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

334 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

335 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

	)

336 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

337 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

	)

338 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

339 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

340 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

	)

349 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

350 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

351 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

352 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
) || \

353 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

354 ((
DIV
Ë=
TIM_CKD_DIV4
))

	)

363 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

364 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

365 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

366 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

367 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

368 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
) || \

369 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

370 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

371 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

372 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

	)

381 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

382 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

383 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
) || \

384 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

	)

393 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

394 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

395 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
) || \

396 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

	)

405 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

406 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

407 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
) || \

408 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

	)

417 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

418 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

419 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
) || \

420 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

	)

429 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

430 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

431 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
) || \

432 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

	)

441 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

442 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

443 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
) || \

444 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

	)

453 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

454 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

455 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
) || \

456 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

	)

465 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

466 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

467 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
) || \

468 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

	)

477 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

478 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

479 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
) || \

480 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

	)

489 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

490 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

491 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

492 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

493 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
) || \

494 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

495 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

496 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

	)

505 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

506 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

507 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
) || \

508 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

	)

517 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

518 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

519 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
) || \

520 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

	)

529 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

530 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

531 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
) || \

532 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

	)

541 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

542 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

543 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
) || \

544 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

	)

553 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

554 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

555 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

556 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

557 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
))

	)

558 
	#IS_TIM_IC_POLARITY_LITE
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

559 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

560 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

	)

569 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

571 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

573 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

574 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
) || \

575 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

576 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

	)

585 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

586 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

587 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

588 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

589 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

590 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

591 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

592 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

601 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

602 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

603 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

604 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

605 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

606 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

607 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

608 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

609 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

611 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
) || \

612 ((
IT
Ë=
TIM_IT_CC1
) || \

613 ((
IT
Ë=
TIM_IT_CC2
) || \

614 ((
IT
Ë=
TIM_IT_CC3
) || \

615 ((
IT
Ë=
TIM_IT_CC4
) || \

616 ((
IT
Ë=
TIM_IT_COM
) || \

617 ((
IT
Ë=
TIM_IT_Triggî
) || \

618 ((
IT
Ë=
TIM_IT_Bªak
))

	)

627 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

628 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

629 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

630 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

631 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

632 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

633 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

634 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

635 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

636 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

637 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

638 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

639 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

640 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

641 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

642 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

643 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

644 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

645 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

646 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
) || \

647 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

648 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

649 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

650 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

651 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

652 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

653 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

654 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

655 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

656 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

657 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

658 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

659 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

660 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

661 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

662 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

663 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

664 ((
BASE
Ë=
TIM_DMABa£_DCR
))

	)

673 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

674 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

675 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

676 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

677 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

678 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

679 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

680 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

681 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

682 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

683 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

684 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

685 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

686 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

687 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

688 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

689 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

690 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

691 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
) || \

692 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

693 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

694 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

695 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

696 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

697 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

698 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

699 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

700 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

701 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

702 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

703 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

704 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

705 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

706 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

707 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

708 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

	)

717 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

718 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

719 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

720 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

721 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

722 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

723 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

724 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

734 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

735 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

736 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

737 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

738 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
) || \

739 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

740 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

741 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

	)

750 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

751 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

752 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

753 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

754 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

755 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

756 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

757 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

758 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

759 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

760 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

761 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

762 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

763 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

764 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

765 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

766 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

767 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

768 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

769 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

778 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

779 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

780 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

781 
	#IS_TIM_TIXCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TIxExã∫ÆCLK1Sour˚_TI1
) || \

782 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI2
) || \

783 ((
SOURCE
Ë=
TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
))

	)

791 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

792 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

793 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
) || \

794 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

	)

803 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

804 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

805 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
) || \

806 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

	)

815 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

816 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

817 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

818 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

827 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

828 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

829 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

830 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
) || \

831 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

832 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

	)

842 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

843 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

844 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

845 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

846 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

847 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

848 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

849 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

850 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

860 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

863 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

864 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
) || \

865 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

	)

874 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

875 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

876 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
) || \

877 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

	)

886 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

887 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

888 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
) || \

889 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

	)

899 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

900 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

901 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
) || \

902 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

	)

911 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

912 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

913 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

914 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

915 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

916 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

917 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

918 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

919 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
) || \

920 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

921 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

922 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

923 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

924 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

925 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

926 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

	)

935 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

936 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

937 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

938 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

939 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
) || \

940 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

941 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

942 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

	)

951 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

952 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

953 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
) || \

954 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

	)

963 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

964 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

965 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

966 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

967 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

968 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

969 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

970 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

971 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

972 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

973 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

974 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

975 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
) || \

976 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

977 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

978 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

979 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

980 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

981 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

982 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

983 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

984 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

985 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

986 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

	)

989 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt16_t
)0xE100Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

998 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1007 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

1016 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

1017 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

1018 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

1019 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1020 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1021 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1022 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1023 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1024 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1025 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1026 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1027 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1028 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1029 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1030 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1031 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1032 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1033 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1054 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1055 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1056 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1057 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1058 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1059 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1060 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1061 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1062 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1063 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1064 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1065 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1066 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1067 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1068 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1069 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1070 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1071 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1072 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1073 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1074 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1075 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1076 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1077 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1078 
uöt16_t
 
ExtTRGFûãr
);

1079 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1080 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1081 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1082 
uöt16_t
 
ExtTRGFûãr
);

1083 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1084 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1085 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1086 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1087 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1088 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1089 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1090 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1091 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1092 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1093 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1094 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1095 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1096 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1097 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1098 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1099 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1100 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1101 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1102 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1103 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1104 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1105 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1106 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1107 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1108 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1109 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1110 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1111 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1112 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1113 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1114 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1115 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1116 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1117 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1118 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1119 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1120 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1121 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1122 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1123 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1124 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1125 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
);

1126 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
);

1127 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
);

1128 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
);

1129 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
);

1130 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
);

1131 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1132 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1133 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1134 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1135 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1136 
uöt16_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1137 
uöt16_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1138 
uöt16_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1139 
uöt16_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1140 
uöt16_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1141 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1142 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1143 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1144 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1145 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1147 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h

24 #i‚de‡
__STM32F10x_USART_H


25 
	#__STM32F10x_USART_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

52 
uöt32_t
 
USART_BaudR©e
;

57 
uöt16_t
 
USART_W‹dLígth
;

60 
uöt16_t
 
USART_St›Bôs
;

63 
uöt16_t
 
USART_P¨ôy
;

70 
uöt16_t
 
USART_Mode
;

73 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

76 } 
	tUSART_InôTy≥Def
;

85 
uöt16_t
 
USART_Clock
;

88 
uöt16_t
 
USART_CPOL
;

91 
uöt16_t
 
USART_CPHA
;

94 
uöt16_t
 
USART_La°Bô
;

97 } 
	tUSART_ClockInôTy≥Def
;

107 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

108 ((
PERIPH
Ë=
USART2
) || \

109 ((
PERIPH
Ë=
USART3
) || \

110 ((
PERIPH
Ë=
UART4
) || \

111 ((
PERIPH
Ë=
UART5
))

	)

113 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

114 ((
PERIPH
Ë=
USART2
) || \

115 ((
PERIPH
Ë=
USART3
))

	)

117 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

118 ((
PERIPH
Ë=
USART2
) || \

119 ((
PERIPH
Ë=
USART3
) || \

120 ((
PERIPH
Ë=
UART4
))

	)

125 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

126 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

128 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
) || \

129 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

	)

138 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

139 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

140 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

141 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

142 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
) || \

143 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

144 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

145 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

	)

154 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

155 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

156 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

157 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
) || \

158 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

159 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

	)

168 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

169 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

170 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

178 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

179 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

180 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

181 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

182 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

183 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

184 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

185 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

186 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

	)

194 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

195 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

196 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
) || \

197 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

	)

206 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

207 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

208 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

218 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

219 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

220 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

230 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

231 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

232 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
) || \

233 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

	)

242 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

243 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

244 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

245 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

246 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

247 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

248 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

249 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

250 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

251 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

252 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

253 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

254 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

255 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

256 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

	)

257 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

258 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

259 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

260 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

261 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

	)

262 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

263 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

	)

272 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

273 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

274 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

284 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

285 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

286 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
) || \

287 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

	)

296 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

297 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

298 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
) \

299 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

300 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

	)

309 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

310 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

311 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
) || \

312 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

	)

321 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

322 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

323 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

324 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

325 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

326 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

327 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

328 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

329 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

330 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

331 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
) || \

332 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

333 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

334 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

335 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

	)

337 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

338 
	#IS_USART_PERIPH_FLAG
(
PERIPH
, 
USART_FLAG
Ë((((*(
uöt32_t
*)&(PERIPH)Ë!
UART4_BASE
) &&\

339 ((*(
uöt32_t
*)&(
PERIPH
)Ë!
UART5_BASE
)) \

340 || ((
USART_FLAG
Ë!
USART_FLAG_CTS
))

	)

341 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x0044AA21))

	)

342 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

343 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

365 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

366 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

367 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

368 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

369 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

370 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

371 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

372 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

373 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

374 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

375 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

376 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

377 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

378 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

379 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

380 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

381 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

382 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

383 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

385 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

386 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

388 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

389 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

390 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

391 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

392 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

393 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

395 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h

24 #i‚de‡
__STM32F10x_WWDG_H


25 
	#__STM32F10x_WWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f10x.h
"

58 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

59 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

60 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

61 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

62 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
) || \

63 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

	)

66 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

67 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

88 
WWDG_DeInô
();

89 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

90 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

91 
WWDG_E«bÀIT
();

92 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

93 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

94 
FœgSètus
 
WWDG_GëFœgSètus
();

95 
WWDG_CÀ¨Fœg
();

97 #ifde‡
__˝lu•lus


	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/misc.c

24 
	~"misc.h
"

47 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

96 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

99 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

102 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

103 
	}
}

112 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

114 
uöt32_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

117 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

118 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

119 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

121 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

124 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

125 
tmµª
 = (0x4 - 
tmµri‹ôy
);

126 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

128 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

129 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

130 
tmµri‹ôy
 =Åmppriority << 0x04;

132 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

135 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

136 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

141 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

142 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

144 
	}
}

156 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

159 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

160 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

162 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

163 
	}
}

175 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

178 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

179 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

181 i‡(
NewSèã
 !
DISABLE
)

183 
SCB
->
SCR
 |
LowPowîMode
;

187 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

189 
	}
}

199 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

202 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

203 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

205 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

209 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

211 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c

23 
	~"°m32f10x_adc.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#CR1_DISCNUM_Re£t
 ((
uöt32_t
)0xFFFF1FFF)

	)

51 
	#CR1_DISCEN_Së
 ((
uöt32_t
)0x00000800)

	)

52 
	#CR1_DISCEN_Re£t
 ((
uöt32_t
)0xFFFFF7FF)

	)

55 
	#CR1_JAUTO_Së
 ((
uöt32_t
)0x00000400)

	)

56 
	#CR1_JAUTO_Re£t
 ((
uöt32_t
)0xFFFFFBFF)

	)

59 
	#CR1_JDISCEN_Së
 ((
uöt32_t
)0x00001000)

	)

60 
	#CR1_JDISCEN_Re£t
 ((
uöt32_t
)0xFFFFEFFF)

	)

63 
	#CR1_AWDCH_Re£t
 ((
uöt32_t
)0xFFFFFFE0)

	)

66 
	#CR1_AWDMode_Re£t
 ((
uöt32_t
)0xFF3FFDFF)

	)

69 
	#CR1_CLEAR_Mask
 ((
uöt32_t
)0xFFF0FEFF)

	)

72 
	#CR2_ADON_Së
 ((
uöt32_t
)0x00000001)

	)

73 
	#CR2_ADON_Re£t
 ((
uöt32_t
)0xFFFFFFFE)

	)

76 
	#CR2_DMA_Së
 ((
uöt32_t
)0x00000100)

	)

77 
	#CR2_DMA_Re£t
 ((
uöt32_t
)0xFFFFFEFF)

	)

80 
	#CR2_RSTCAL_Së
 ((
uöt32_t
)0x00000008)

	)

83 
	#CR2_CAL_Së
 ((
uöt32_t
)0x00000004)

	)

86 
	#CR2_SWSTART_Së
 ((
uöt32_t
)0x00400000)

	)

89 
	#CR2_EXTTRIG_Së
 ((
uöt32_t
)0x00100000)

	)

90 
	#CR2_EXTTRIG_Re£t
 ((
uöt32_t
)0xFFEFFFFF)

	)

93 
	#CR2_EXTTRIG_SWSTART_Së
 ((
uöt32_t
)0x00500000)

	)

94 
	#CR2_EXTTRIG_SWSTART_Re£t
 ((
uöt32_t
)0xFFAFFFFF)

	)

97 
	#CR2_JEXTSEL_Re£t
 ((
uöt32_t
)0xFFFF8FFF)

	)

100 
	#CR2_JEXTTRIG_Së
 ((
uöt32_t
)0x00008000)

	)

101 
	#CR2_JEXTTRIG_Re£t
 ((
uöt32_t
)0xFFFF7FFF)

	)

104 
	#CR2_JSWSTART_Së
 ((
uöt32_t
)0x00200000)

	)

107 
	#CR2_JEXTTRIG_JSWSTART_Së
 ((
uöt32_t
)0x00208000)

	)

108 
	#CR2_JEXTTRIG_JSWSTART_Re£t
 ((
uöt32_t
)0xFFDF7FFF)

	)

111 
	#CR2_TSVREFE_Së
 ((
uöt32_t
)0x00800000)

	)

112 
	#CR2_TSVREFE_Re£t
 ((
uöt32_t
)0xFF7FFFFF)

	)

115 
	#CR2_CLEAR_Mask
 ((
uöt32_t
)0xFFF1F7FD)

	)

118 
	#SQR3_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

119 
	#SQR2_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

120 
	#SQR1_SQ_Së
 ((
uöt32_t
)0x0000001F)

	)

123 
	#SQR1_CLEAR_Mask
 ((
uöt32_t
)0xFF0FFFFF)

	)

126 
	#JSQR_JSQ_Së
 ((
uöt32_t
)0x0000001F)

	)

129 
	#JSQR_JL_Së
 ((
uöt32_t
)0x00300000)

	)

130 
	#JSQR_JL_Re£t
 ((
uöt32_t
)0xFFCFFFFF)

	)

133 
	#SMPR1_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

134 
	#SMPR2_SMP_Së
 ((
uöt32_t
)0x00000007)

	)

137 
	#JDR_Off£t
 ((
uöt8_t
)0x28)

	)

140 
	#DR_ADDRESS
 ((
uöt32_t
)0x4001244C)

	)

179 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

182 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

184 i‡(
ADCx
 =
ADC1
)

187 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

189 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
DISABLE
);

191 i‡(
ADCx
 =
ADC2
)

194 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
ENABLE
);

196 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC2
, 
DISABLE
);

200 i‡(
ADCx
 =
ADC3
)

203 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
ENABLE
);

205 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC3
, 
DISABLE
);

208 
	}
}

218 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

220 
uöt32_t
 
tm¥eg1
 = 0;

221 
uöt8_t
 
tm¥eg2
 = 0;

223 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

224 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_InôSåu˘
->
ADC_Mode
));

225 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

227 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

228 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

229 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
));

233 
tm¥eg1
 = 
ADCx
->
CR1
;

235 
tm¥eg1
 &
CR1_CLEAR_Mask
;

239 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_Mode
 | ((uöt32_t)ADC_InôSåu˘->
ADC_SˇnC⁄vMode
 << 8));

241 
ADCx
->
CR1
 = 
tm¥eg1
;

245 
tm¥eg1
 = 
ADCx
->
CR2
;

247 
tm¥eg1
 &
CR2_CLEAR_Mask
;

252 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | ADC_InôSåu˘->
ADC_Exã∫ÆTrigC⁄v
 |

253 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

255 
ADCx
->
CR2
 = 
tm¥eg1
;

259 
tm¥eg1
 = 
ADCx
->
SQR1
;

261 
tm¥eg1
 &
SQR1_CLEAR_Mask
;

264 
tm¥eg2
 |(
uöt8_t
Ë(
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 - (uint8_t)1);

265 
tm¥eg1
 |(
uöt32_t
)
tm¥eg2
 << 20;

267 
ADCx
->
SQR1
 = 
tm¥eg1
;

268 
	}
}

275 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

279 
ADC_InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

281 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

283 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

285 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

287 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

289 
ADC_InôSåu˘
->
ADC_NbrOfCh™√l
 = 1;

290 
	}
}

299 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

302 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

303 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

304 i‡(
NewSèã
 !
DISABLE
)

307 
ADCx
->
CR2
 |
CR2_ADON_Së
;

312 
ADCx
->
CR2
 &
CR2_ADON_Re£t
;

314 
	}
}

324 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

327 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

328 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

329 i‡(
NewSèã
 !
DISABLE
)

332 
ADCx
->
CR2
 |
CR2_DMA_Së
;

337 
ADCx
->
CR2
 &
CR2_DMA_Re£t
;

339 
	}
}

353 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

355 
uöt8_t
 
ômask
 = 0;

357 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

358 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

359 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

361 
ômask
 = (
uöt8_t
)
ADC_IT
;

362 i‡(
NewSèã
 !
DISABLE
)

365 
ADCx
->
CR1
 |
ômask
;

370 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

372 
	}
}

379 
	$ADC_Re£tCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

382 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

384 
ADCx
->
CR2
 |
CR2_RSTCAL_Së
;

385 
	}
}

392 
FœgSètus
 
	$ADC_GëRe£tCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

394 
FœgSètus
 
bô°©us
 = 
RESET
;

396 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

398 i‡((
ADCx
->
CR2
 & 
CR2_RSTCAL_Së
Ë!(
uöt32_t
)
RESET
)

401 
bô°©us
 = 
SET
;

406 
bô°©us
 = 
RESET
;

409  
bô°©us
;

410 
	}
}

417 
	$ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

420 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

422 
ADCx
->
CR2
 |
CR2_CAL_Së
;

423 
	}
}

430 
FœgSètus
 
	$ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

432 
FœgSètus
 
bô°©us
 = 
RESET
;

434 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

436 i‡((
ADCx
->
CR2
 & 
CR2_CAL_Së
Ë!(
uöt32_t
)
RESET
)

439 
bô°©us
 = 
SET
;

444 
bô°©us
 = 
RESET
;

447  
bô°©us
;

448 
	}
}

457 
	$ADC_So·w¨eSèπC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

460 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

461 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

462 i‡(
NewSèã
 !
DISABLE
)

466 
ADCx
->
CR2
 |
CR2_EXTTRIG_SWSTART_Së
;

472 
ADCx
->
CR2
 &
CR2_EXTTRIG_SWSTART_Re£t
;

474 
	}
}

481 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

483 
FœgSètus
 
bô°©us
 = 
RESET
;

485 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

487 i‡((
ADCx
->
CR2
 & 
CR2_SWSTART_Së
Ë!(
uöt32_t
)
RESET
)

490 
bô°©us
 = 
SET
;

495 
bô°©us
 = 
RESET
;

498  
bô°©us
;

499 
	}
}

509 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

511 
uöt32_t
 
tm¥eg1
 = 0;

512 
uöt32_t
 
tm¥eg2
 = 0;

514 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

515 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

517 
tm¥eg1
 = 
ADCx
->
CR1
;

519 
tm¥eg1
 &
CR1_DISCNUM_Re£t
;

521 
tm¥eg2
 = 
Numbî
 - 1;

522 
tm¥eg1
 |
tm¥eg2
 << 13;

524 
ADCx
->
CR1
 = 
tm¥eg1
;

525 
	}
}

536 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

539 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

541 i‡(
NewSèã
 !
DISABLE
)

544 
ADCx
->
CR1
 |
CR1_DISCEN_Së
;

549 
ADCx
->
CR1
 &
CR1_DISCEN_Re£t
;

551 
	}
}

590 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

592 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

594 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

595 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

596 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

597 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

599 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

602 
tm¥eg1
 = 
ADCx
->
SMPR1
;

604 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3 * (
ADC_Ch™√l
 - 10));

606 
tm¥eg1
 &~
tm¥eg2
;

608 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

610 
tm¥eg1
 |
tm¥eg2
;

612 
ADCx
->
SMPR1
 = 
tm¥eg1
;

617 
tm¥eg1
 = 
ADCx
->
SMPR2
;

619 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

621 
tm¥eg1
 &~
tm¥eg2
;

623 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

625 
tm¥eg1
 |
tm¥eg2
;

627 
ADCx
->
SMPR2
 = 
tm¥eg1
;

630 i‡(
R™k
 < 7)

633 
tm¥eg1
 = 
ADCx
->
SQR3
;

635 
tm¥eg2
 = 
SQR3_SQ_Së
 << (5 * (
R™k
 - 1));

637 
tm¥eg1
 &~
tm¥eg2
;

639 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

641 
tm¥eg1
 |
tm¥eg2
;

643 
ADCx
->
SQR3
 = 
tm¥eg1
;

646 i‡(
R™k
 < 13)

649 
tm¥eg1
 = 
ADCx
->
SQR2
;

651 
tm¥eg2
 = 
SQR2_SQ_Së
 << (5 * (
R™k
 - 7));

653 
tm¥eg1
 &~
tm¥eg2
;

655 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

657 
tm¥eg1
 |
tm¥eg2
;

659 
ADCx
->
SQR2
 = 
tm¥eg1
;

665 
tm¥eg1
 = 
ADCx
->
SQR1
;

667 
tm¥eg2
 = 
SQR1_SQ_Së
 << (5 * (
R™k
 - 13));

669 
tm¥eg1
 &~
tm¥eg2
;

671 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

673 
tm¥eg1
 |
tm¥eg2
;

675 
ADCx
->
SQR1
 = 
tm¥eg1
;

677 
	}
}

686 
	$ADC_Exã∫ÆTrigC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

689 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

690 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

691 i‡(
NewSèã
 !
DISABLE
)

694 
ADCx
->
CR2
 |
CR2_EXTTRIG_Së
;

699 
ADCx
->
CR2
 &
CR2_EXTTRIG_Re£t
;

701 
	}
}

708 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

711 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

713  (
uöt16_t
Ë
ADCx
->
DR
;

714 
	}
}

720 
uöt32_t
 
	$ADC_GëDuÆModeC⁄vîsi⁄VÆue
()

723  (*(
__IO
 
uöt32_t
 *Ë
DR_ADDRESS
);

724 
	}
}

734 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

737 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

738 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

739 i‡(
NewSèã
 !
DISABLE
)

742 
ADCx
->
CR1
 |
CR1_JAUTO_Së
;

747 
ADCx
->
CR1
 &
CR1_JAUTO_Re£t
;

749 
	}
}

760 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

763 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

764 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

765 i‡(
NewSèã
 !
DISABLE
)

768 
ADCx
->
CR1
 |
CR1_JDISCEN_Së
;

773 
ADCx
->
CR1
 &
CR1_JDISCEN_Re£t
;

775 
	}
}

799 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

801 
uöt32_t
 
tm¥eg
 = 0;

803 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

804 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

806 
tm¥eg
 = 
ADCx
->
CR2
;

808 
tm¥eg
 &
CR2_JEXTSEL_Re£t
;

810 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

812 
ADCx
->
CR2
 = 
tm¥eg
;

813 
	}
}

824 
	$ADC_Exã∫ÆTrigInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

827 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

828 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

829 i‡(
NewSèã
 !
DISABLE
)

832 
ADCx
->
CR2
 |
CR2_JEXTTRIG_Së
;

837 
ADCx
->
CR2
 &
CR2_JEXTTRIG_Re£t
;

839 
	}
}

849 
	$ADC_So·w¨eSèπInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

852 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

853 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

854 i‡(
NewSèã
 !
DISABLE
)

858 
ADCx
->
CR2
 |
CR2_JEXTTRIG_JSWSTART_Së
;

864 
ADCx
->
CR2
 &
CR2_JEXTTRIG_JSWSTART_Re£t
;

866 
	}
}

873 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

875 
FœgSètus
 
bô°©us
 = 
RESET
;

877 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

879 i‡((
ADCx
->
CR2
 & 
CR2_JSWSTART_Së
Ë!(
uöt32_t
)
RESET
)

882 
bô°©us
 = 
SET
;

887 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

930 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

932 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

934 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

935 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

936 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

937 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

939 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

942 
tm¥eg1
 = 
ADCx
->
SMPR1
;

944 
tm¥eg2
 = 
SMPR1_SMP_Së
 << (3*(
ADC_Ch™√l
 - 10));

946 
tm¥eg1
 &~
tm¥eg2
;

948 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

950 
tm¥eg1
 |
tm¥eg2
;

952 
ADCx
->
SMPR1
 = 
tm¥eg1
;

957 
tm¥eg1
 = 
ADCx
->
SMPR2
;

959 
tm¥eg2
 = 
SMPR2_SMP_Së
 << (3 * 
ADC_Ch™√l
);

961 
tm¥eg1
 &~
tm¥eg2
;

963 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

965 
tm¥eg1
 |
tm¥eg2
;

967 
ADCx
->
SMPR2
 = 
tm¥eg1
;

971 
tm¥eg1
 = 
ADCx
->
JSQR
;

973 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_Së
)>> 20;

975 
tm¥eg2
 = 
JSQR_JSQ_Së
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

977 
tm¥eg1
 &~
tm¥eg2
;

979 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

981 
tm¥eg1
 |
tm¥eg2
;

983 
ADCx
->
JSQR
 = 
tm¥eg1
;

984 
	}
}

993 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

995 
uöt32_t
 
tm¥eg1
 = 0;

996 
uöt32_t
 
tm¥eg2
 = 0;

998 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

999 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1002 
tm¥eg1
 = 
ADCx
->
JSQR
;

1004 
tm¥eg1
 &
JSQR_JL_Re£t
;

1006 
tm¥eg2
 = 
Lígth
 - 1;

1007 
tm¥eg1
 |
tm¥eg2
 << 20;

1009 
ADCx
->
JSQR
 = 
tm¥eg1
;

1010 
	}
}

1025 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1027 
__IO
 
uöt32_t
 
tmp
 = 0;

1030 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1031 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1032 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1034 
tmp
 = (
uöt32_t
)
ADCx
;

1035 
tmp
 +
ADC_Inje˘edCh™√l
;

1038 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1039 
	}
}

1052 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1054 
__IO
 
uöt32_t
 
tmp
 = 0;

1057 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1058 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1060 
tmp
 = (
uöt32_t
)
ADCx
;

1061 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_Off£t
;

1064  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1065 
	}
}

1082 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

1084 
uöt32_t
 
tm¥eg
 = 0;

1086 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1087 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

1089 
tm¥eg
 = 
ADCx
->
CR1
;

1091 
tm¥eg
 &
CR1_AWDMode_Re£t
;

1093 
tm¥eg
 |
ADC_A«logW©chdog
;

1095 
ADCx
->
CR1
 = 
tm¥eg
;

1096 
	}
}

1107 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

1108 
uöt16_t
 
LowThªshﬁd
)

1111 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1112 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

1113 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

1115 
ADCx
->
HTR
 = 
HighThªshﬁd
;

1117 
ADCx
->
LTR
 = 
LowThªshﬁd
;

1118 
	}
}

1145 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

1147 
uöt32_t
 
tm¥eg
 = 0;

1149 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1150 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1152 
tm¥eg
 = 
ADCx
->
CR1
;

1154 
tm¥eg
 &
CR1_AWDCH_Re£t
;

1156 
tm¥eg
 |
ADC_Ch™√l
;

1158 
ADCx
->
CR1
 = 
tm¥eg
;

1159 
	}
}

1167 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1170 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1171 i‡(
NewSèã
 !
DISABLE
)

1174 
ADC1
->
CR2
 |
CR2_TSVREFE_Së
;

1179 
ADC1
->
CR2
 &
CR2_TSVREFE_Re£t
;

1181 
	}
}

1195 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1197 
FœgSètus
 
bô°©us
 = 
RESET
;

1199 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1200 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1202 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1205 
bô°©us
 = 
SET
;

1210 
bô°©us
 = 
RESET
;

1213  
bô°©us
;

1214 
	}
}

1228 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1231 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1232 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1234 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1235 
	}
}

1247 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1249 
ITSètus
 
bô°©us
 = 
RESET
;

1250 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1252 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1253 
	`as£π_∑øm
(
	`IS_ADC_GET_IT
(
ADC_IT
));

1255 
ômask
 = 
ADC_IT
 >> 8;

1257 
íabÀ°©us
 = (
ADCx
->
CR1
 & (
uöt8_t
)
ADC_IT
) ;

1259 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1262 
bô°©us
 = 
SET
;

1267 
bô°©us
 = 
RESET
;

1270  
bô°©us
;

1271 
	}
}

1283 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1285 
uöt8_t
 
ômask
 = 0;

1287 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1288 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1290 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1292 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1293 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c

23 
	~"°m32f10x_bkp.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#BKP_OFFSET
 (
BKP_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CR_OFFSET
 (
BKP_OFFSET
 + 0x30)

	)

54 
	#TPAL_BôNumbî
 0x01

	)

55 
	#CR_TPAL_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPAL_BôNumbî
 * 4))

	)

58 
	#TPE_BôNumbî
 0x00

	)

59 
	#CR_TPE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
TPE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
BKP_OFFSET
 + 0x34)

	)

65 
	#TPIE_BôNumbî
 0x02

	)

66 
	#CSR_TPIE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TPIE_BôNumbî
 * 4))

	)

69 
	#TIF_BôNumbî
 0x09

	)

70 
	#CSR_TIF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TIF_BôNumbî
 * 4))

	)

73 
	#TEF_BôNumbî
 0x08

	)

74 
	#CSR_TEF_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEF_BôNumbî
 * 4))

	)

79 
	#RTCCR_CAL_MASK
 ((
uöt16_t
)0xFF80)

	)

80 
	#RTCCR_MASK
 ((
uöt16_t
)0xFC7F)

	)

120 
	$BKP_DeInô
()

122 
	`RCC_BackupRe£tCmd
(
ENABLE
);

123 
	`RCC_BackupRe£tCmd
(
DISABLE
);

124 
	}
}

134 
	$BKP_Tam≥rPöLevñC⁄fig
(
uöt16_t
 
BKP_Tam≥rPöLevñ
)

137 
	`as£π_∑øm
(
	`IS_BKP_TAMPER_PIN_LEVEL
(
BKP_Tam≥rPöLevñ
));

138 *(
__IO
 
uöt32_t
 *Ë
CR_TPAL_BB
 = 
BKP_Tam≥rPöLevñ
;

139 
	}
}

147 
	$BKP_Tam≥rPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

150 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

151 *(
__IO
 
uöt32_t
 *Ë
CR_TPE_BB
 = (uöt32_t)
NewSèã
;

152 
	}
}

160 
	$BKP_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

163 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

164 *(
__IO
 
uöt32_t
 *Ë
CSR_TPIE_BB
 = (uöt32_t)
NewSèã
;

165 
	}
}

180 
	$BKP_RTCOuçutC⁄fig
(
uöt16_t
 
BKP_RTCOuçutSour˚
)

182 
uöt16_t
 
tm¥eg
 = 0;

184 
	`as£π_∑øm
(
	`IS_BKP_RTC_OUTPUT_SOURCE
(
BKP_RTCOuçutSour˚
));

185 
tm¥eg
 = 
BKP
->
RTCCR
;

187 
tm¥eg
 &
RTCCR_MASK
;

190 
tm¥eg
 |
BKP_RTCOuçutSour˚
;

192 
BKP
->
RTCCR
 = 
tm¥eg
;

193 
	}
}

201 
	$BKP_SëRTCCÆibøti⁄VÆue
(
uöt8_t
 
CÆibøti⁄VÆue
)

203 
uöt16_t
 
tm¥eg
 = 0;

205 
	`as£π_∑øm
(
	`IS_BKP_CALIBRATION_VALUE
(
CÆibøti⁄VÆue
));

206 
tm¥eg
 = 
BKP
->
RTCCR
;

208 
tm¥eg
 &
RTCCR_CAL_MASK
;

210 
tm¥eg
 |
CÆibøti⁄VÆue
;

212 
BKP
->
RTCCR
 = 
tm¥eg
;

213 
	}
}

222 
	$BKP_WrôeBackupRegi°î
(
uöt16_t
 
BKP_DR
, uöt16_à
D©a
)

224 
__IO
 
uöt32_t
 
tmp
 = 0;

227 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

229 
tmp
 = (
uöt32_t
)
BKP_BASE
;

230 
tmp
 +
BKP_DR
;

232 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

233 
	}
}

241 
uöt16_t
 
	$BKP_RódBackupRegi°î
(
uöt16_t
 
BKP_DR
)

243 
__IO
 
uöt32_t
 
tmp
 = 0;

246 
	`as£π_∑øm
(
	`IS_BKP_DR
(
BKP_DR
));

248 
tmp
 = (
uöt32_t
)
BKP_BASE
;

249 
tmp
 +
BKP_DR
;

251  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

252 
	}
}

259 
FœgSètus
 
	$BKP_GëFœgSètus
()

261  (
FœgSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TEF_BB
);

262 
	}
}

269 
	$BKP_CÀ¨Fœg
()

272 
BKP
->
CSR
 |
BKP_CSR_CTE
;

273 
	}
}

280 
ITSètus
 
	$BKP_GëITSètus
()

282  (
ITSètus
)(*(
__IO
 
uöt32_t
 *Ë
CSR_TIF_BB
);

283 
	}
}

290 
	$BKP_CÀ¨ITPídögBô
()

293 
BKP
->
CSR
 |
BKP_CSR_CTI
;

294 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c

23 
	~"°m32f10x_ˇn.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

52 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

55 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

58 
	#INAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

60 
	#SLAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

65 
	#CAN_FLAGS_TSR
 ((
uöt32_t
)0x08000000)

	)

67 
	#CAN_FLAGS_RF1R
 ((
uöt32_t
)0x04000000)

	)

69 
	#CAN_FLAGS_RF0R
 ((
uöt32_t
)0x02000000)

	)

71 
	#CAN_FLAGS_MSR
 ((
uöt32_t
)0x01000000)

	)

73 
	#CAN_FLAGS_ESR
 ((
uöt32_t
)0x00F00000)

	)

76 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

77 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

78 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

82 
	#CAN_MODE_MASK
 ((
uöt32_t
Ë0x00000003)

	)

107 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

122 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

125 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

127 i‡(
CANx
 =
CAN1
)

130 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

132 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

137 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

141 
	}
}

154 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

156 
uöt8_t
 
InôSètus
 = 
CAN_InôSètus_Faûed
;

157 
uöt32_t
 
waô_ack
 = 0x00000000;

159 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

160 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

161 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

162 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

163 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

164 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

165 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

166 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

167 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

168 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

169 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

170 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

173 
CANx
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

176 
CANx
->
MCR
 |
CAN_MCR_INRQ
 ;

179 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë!CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

181 
waô_ack
++;

185 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

187 
InôSètus
 = 
CAN_InôSètus_Faûed
;

192 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

194 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

198 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

202 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

204 
CANx
->
MCR
 |
CAN_MCR_ABOM
;

208 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

212 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

214 
CANx
->
MCR
 |
CAN_MCR_AWUM
;

218 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

222 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

224 
CANx
->
MCR
 |
CAN_MCR_NART
;

228 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

232 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

234 
CANx
->
MCR
 |
CAN_MCR_RFLM
;

238 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

242 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

244 
CANx
->
MCR
 |
CAN_MCR_TXFP
;

248 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

252 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30) | \

253 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_SJW
 << 24) | \

254 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16) | \

255 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS2
 << 20) | \

256 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

259 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

262 
waô_ack
 = 0;

264 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë=CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

266 
waô_ack
++;

270 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

272 
InôSètus
 = 
CAN_InôSètus_Faûed
;

276 
InôSètus
 = 
CAN_InôSètus_Suc˚ss
 ;

281  
InôSètus
;

282 
	}
}

292 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

294 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

296 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

297 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

298 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

299 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

300 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

302 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

305 
CAN1
->
FMR
 |
FMR_FINIT
;

308 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

311 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

314 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

318 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

319 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

320 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

324 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

325 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

326 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

329 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

332 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

334 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

335 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

336 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

338 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

339 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

340 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

344 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

347 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

352 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

356 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

359 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

362 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

365 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

369 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

371 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

375 
CAN1
->
FMR
 &~
FMR_FINIT
;

376 
	}
}

384 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

389 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

392 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

395 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

398 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

401 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

404 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

407 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

410 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

413 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

416 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

419 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

420 
	}
}

428 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

431 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

434 
CAN1
->
FMR
 |
FMR_FINIT
;

437 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

438 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

441 
CAN1
->
FMR
 &~
FMR_FINIT
;

442 
	}
}

451 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

454 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

455 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

457 i‡(
NewSèã
 !
DISABLE
)

460 
CANx
->
MCR
 |
MCR_DBF
;

465 
CANx
->
MCR
 &~
MCR_DBF
;

467 
	}
}

481 
	$CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

486 i‡(
NewSèã
 !
DISABLE
)

489 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

492 
CANx
->
sTxMaûBox
[0].
TDTR
 |((
uöt32_t
)
CAN_TDT0R_TGT
);

493 
CANx
->
sTxMaûBox
[1].
TDTR
 |((
uöt32_t
)
CAN_TDT1R_TGT
);

494 
CANx
->
sTxMaûBox
[2].
TDTR
 |((
uöt32_t
)
CAN_TDT2R_TGT
);

499 
CANx
->
MCR
 &(
uöt32_t
)(~(uöt32_t)
CAN_MCR_TTCM
);

502 
CANx
->
sTxMaûBox
[0].
TDTR
 &((
uöt32_t
)~
CAN_TDT0R_TGT
);

503 
CANx
->
sTxMaûBox
[1].
TDTR
 &((
uöt32_t
)~
CAN_TDT1R_TGT
);

504 
CANx
->
sTxMaûBox
[2].
TDTR
 &((
uöt32_t
)~
CAN_TDT2R_TGT
);

506 
	}
}

515 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

517 
uöt8_t
 
å™smô_maûbox
 = 0;

519 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

520 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

521 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

522 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

525 i‡((
CANx
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

527 
å™smô_maûbox
 = 0;

529 i‡((
CANx
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

531 
å™smô_maûbox
 = 1;

533 i‡((
CANx
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

535 
å™smô_maûbox
 = 2;

539 
å™smô_maûbox
 = 
CAN_TxSètus_NoMaûBox
;

542 i‡(
å™smô_maûbox
 !
CAN_TxSètus_NoMaûBox
)

545 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

546 i‡(
TxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

548 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

549 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21) | \

550 
TxMesßge
->
RTR
);

554 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

555 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
 << 3) | \

556 
TxMesßge
->
IDE
 | \

557 
TxMesßge
->
RTR
);

561 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

562 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

563 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

566 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

567 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

568 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

569 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

570 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

571 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

572 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

573 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

575 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

577  
å™smô_maûbox
;

578 
	}
}

589 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

591 
uöt32_t
 
°©e
 = 0;

594 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

595 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

597 
TønsmôMaûbox
)

599 (
CAN_TXMAILBOX_0
):

600 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
);

602 (
CAN_TXMAILBOX_1
):

603 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
);

605 (
CAN_TXMAILBOX_2
):

606 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
);

609 
°©e
 = 
CAN_TxSètus_Faûed
;

612 
°©e
)

615 (0x0): 
°©e
 = 
CAN_TxSètus_Pídög
;

618 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
): 
°©e
 = 
CAN_TxSètus_Faûed
;

620 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
): 
°©e
 = 
CAN_TxSètus_Faûed
;

622 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
): 
°©e
 = 
CAN_TxSètus_Faûed
;

625 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
):
°©e
 = 
CAN_TxSètus_Ok
;

627 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
):
°©e
 = 
CAN_TxSètus_Ok
;

629 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
):
°©e
 = 
CAN_TxSètus_Ok
;

631 : 
°©e
 = 
CAN_TxSètus_Faûed
;

634  (
uöt8_t
Ë
°©e
;

635 
	}
}

643 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

646 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

647 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

649 
Maûbox
)

651 (
CAN_TXMAILBOX_0
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ0
;

653 (
CAN_TXMAILBOX_1
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ1
;

655 (
CAN_TXMAILBOX_2
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ2
;

660 
	}
}

671 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

674 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

675 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

677 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

678 i‡(
RxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

680 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

684 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

687 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

689 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

691 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

693 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

694 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

695 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

696 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

697 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

698 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

699 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

700 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

703 i‡(
FIFONumbî
 =
CAN_FIFO0
)

705 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

710 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

712 
	}
}

720 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

723 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

724 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

726 i‡(
FIFONumbî
 =
CAN_FIFO0
)

728 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

733 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

735 
	}
}

743 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

745 
uöt8_t
 
mesßge_≥ndög
=0;

747 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

748 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

749 i‡(
FIFONumbî
 =
CAN_FIFO0
)

751 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

753 i‡(
FIFONumbî
 =
CAN_FIFO1
)

755 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

759 
mesßge_≥ndög
 = 0;

761  
mesßge_≥ndög
;

762 
	}
}

774 
uöt8_t
 
	$CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_O≥øtögMode
)

776 
uöt8_t
 
°©us
 = 
CAN_ModeSètus_Faûed
;

779 
uöt32_t
 
timeout
 = 
INAK_TIMEOUT
;

782 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

783 
	`as£π_∑øm
(
	`IS_CAN_OPERATING_MODE
(
CAN_O≥øtögMode
));

785 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_Inôüliz©i⁄
)

788 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_SLEEP
)Ë| 
CAN_MCR_INRQ
);

791 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
Ë&& (
timeout
 != 0))

793 
timeout
--;

795 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
)

797 
°©us
 = 
CAN_ModeSètus_Faûed
;

801 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

804 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_N‹mÆ
)

807 
CANx
->
MCR
 &(
uöt32_t
)(~(
CAN_MCR_SLEEP
|
CAN_MCR_INRQ
));

810 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!0Ë&& (
timeout
!=0))

812 
timeout
--;

814 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
) != 0)

816 
°©us
 = 
CAN_ModeSètus_Faûed
;

820 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

823 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_SÀï
)

826 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

829 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
Ë&& (
timeout
!=0))

831 
timeout
--;

833 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
)

835 
°©us
 = 
CAN_ModeSètus_Faûed
;

839 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

844 
°©us
 = 
CAN_ModeSètus_Faûed
;

847  (
uöt8_t
Ë
°©us
;

848 
	}
}

856 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

858 
uöt8_t
 
¶ìp°©us
 = 
CAN_SÀï_Faûed
;

861 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

864 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

867 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

870 
¶ìp°©us
 = 
CAN_SÀï_Ok
;

873  (
uöt8_t
)
¶ìp°©us
;

874 
	}
}

882 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

884 
uöt32_t
 
waô_¶ak
 = 
SLAK_TIMEOUT
;

885 
uöt8_t
 
wakeup°©us
 = 
CAN_WakeUp_Faûed
;

888 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

891 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

894 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

896 
waô_¶ak
--;

898 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

901 
wakeup°©us
 = 
CAN_WakeUp_Ok
;

904  (
uöt8_t
)
wakeup°©us
;

905 
	}
}

922 
uöt8_t
 
	$CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
)

924 
uöt8_t
 
îr‹code
=0;

927 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

930 
îr‹code
 = (((
uöt8_t
)
CANx
->
ESR
Ë& (uöt8_t)
CAN_ESR_LEC
);

933  
îr‹code
;

934 
	}
}

946 
uöt8_t
 
	$CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

948 
uöt8_t
 
cou¡î
=0;

951 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

954 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_REC
)>> 24);

957  
cou¡î
;

958 
	}
}

966 
uöt8_t
 
	$CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

968 
uöt8_t
 
cou¡î
=0;

971 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

974 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_TEC
)>> 16);

977  
cou¡î
;

978 
	}
}

1003 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1006 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1007 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1008 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1010 i‡(
NewSèã
 !
DISABLE
)

1013 
CANx
->
IER
 |
CAN_IT
;

1018 
CANx
->
IER
 &~
CAN_IT
;

1020 
	}
}

1043 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1045 
FœgSètus
 
bô°©us
 = 
RESET
;

1048 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1049 
	`as£π_∑øm
(
	`IS_CAN_GET_FLAG
(
CAN_FLAG
));

1052 if((
CAN_FLAG
 & 
CAN_FLAGS_ESR
Ë!(
uöt32_t
)
RESET
)

1055 i‡((
CANx
->
ESR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1058 
bô°©us
 = 
SET
;

1063 
bô°©us
 = 
RESET
;

1066 if((
CAN_FLAG
 & 
CAN_FLAGS_MSR
Ë!(
uöt32_t
)
RESET
)

1069 i‡((
CANx
->
MSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1072 
bô°©us
 = 
SET
;

1077 
bô°©us
 = 
RESET
;

1080 if((
CAN_FLAG
 & 
CAN_FLAGS_TSR
Ë!(
uöt32_t
)
RESET
)

1083 i‡((
CANx
->
TSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1086 
bô°©us
 = 
SET
;

1091 
bô°©us
 = 
RESET
;

1094 if((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
Ë!(
uöt32_t
)
RESET
)

1097 i‡((
CANx
->
RF0R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1100 
bô°©us
 = 
SET
;

1105 
bô°©us
 = 
RESET
;

1111 i‡((
uöt32_t
)(
CANx
->
RF1R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(uöt32_t)
RESET
)

1114 
bô°©us
 = 
SET
;

1119 
bô°©us
 = 
RESET
;

1123  
bô°©us
;

1124 
	}
}

1143 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1145 
uöt32_t
 
Êagtmp
=0;

1147 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1148 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_FLAG
(
CAN_FLAG
));

1150 i‡(
CAN_FLAG
 =
CAN_FLAG_LEC
)

1153 
CANx
->
ESR
 = (
uöt32_t
)
RESET
;

1157 
Êagtmp
 = 
CAN_FLAG
 & 0x000FFFFF;

1159 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
)!=(
uöt32_t
)
RESET
)

1162 
CANx
->
RF0R
 = (
uöt32_t
)(
Êagtmp
);

1164 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF1R
)!=(
uöt32_t
)
RESET
)

1167 
CANx
->
RF1R
 = (
uöt32_t
)(
Êagtmp
);

1169 i‡((
CAN_FLAG
 & 
CAN_FLAGS_TSR
)!=(
uöt32_t
)
RESET
)

1172 
CANx
->
TSR
 = (
uöt32_t
)(
Êagtmp
);

1177 
CANx
->
MSR
 = (
uöt32_t
)(
Êagtmp
);

1180 
	}
}

1203 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1205 
ITSètus
 
ô°©us
 = 
RESET
;

1207 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1208 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1211 if((
CANx
->
IER
 & 
CAN_IT
Ë!
RESET
)

1214 
CAN_IT
)

1216 
CAN_IT_TME
:

1218 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
);

1220 
CAN_IT_FMP0
:

1222 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FMP0
);

1224 
CAN_IT_FF0
:

1226 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FULL0
);

1228 
CAN_IT_FOV0
:

1230 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FOVR0
);

1232 
CAN_IT_FMP1
:

1234 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FMP1
);

1236 
CAN_IT_FF1
:

1238 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FULL1
);

1240 
CAN_IT_FOV1
:

1242 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FOVR1
);

1244 
CAN_IT_WKU
:

1246 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_WKUI
);

1248 
CAN_IT_SLK
:

1250 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_SLAKI
);

1252 
CAN_IT_EWG
:

1254 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EWGF
);

1256 
CAN_IT_EPV
:

1258 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EPVF
);

1260 
CAN_IT_BOF
:

1262 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_BOFF
);

1264 
CAN_IT_LEC
:

1266 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_LEC
);

1268 
CAN_IT_ERR
:

1270 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_ERRI
);

1274 
ô°©us
 = 
RESET
;

1281 
ô°©us
 = 
RESET
;

1285  
ô°©us
;

1286 
	}
}

1306 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1309 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1310 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_IT
(
CAN_IT
));

1312 
CAN_IT
)

1314 
CAN_IT_TME
:

1316 
CANx
->
TSR
 = 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
;

1318 
CAN_IT_FF0
:

1320 
CANx
->
RF0R
 = 
CAN_RF0R_FULL0
;

1322 
CAN_IT_FOV0
:

1324 
CANx
->
RF0R
 = 
CAN_RF0R_FOVR0
;

1326 
CAN_IT_FF1
:

1328 
CANx
->
RF1R
 = 
CAN_RF1R_FULL1
;

1330 
CAN_IT_FOV1
:

1332 
CANx
->
RF1R
 = 
CAN_RF1R_FOVR1
;

1334 
CAN_IT_WKU
:

1336 
CANx
->
MSR
 = 
CAN_MSR_WKUI
;

1338 
CAN_IT_SLK
:

1340 
CANx
->
MSR
 = 
CAN_MSR_SLAKI
;

1342 
CAN_IT_EWG
:

1344 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1348 
CAN_IT_EPV
:

1350 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1354 
CAN_IT_BOF
:

1356 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1360 
CAN_IT_LEC
:

1362 
CANx
->
ESR
 = 
RESET
;

1364 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1366 
CAN_IT_ERR
:

1368 
CANx
->
ESR
 = 
RESET
;

1370 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1377 
	}
}

1385 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

1387 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

1389 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

1392 
≥ndögbô°©us
 = 
SET
;

1397 
≥ndögbô°©us
 = 
RESET
;

1399  
≥ndögbô°©us
;

1400 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_cec.c

23 
	~"°m32f10x_˚c.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CEC_OFFSET
 (
CEC_BASE
 - 
PERIPH_BASE
)

	)

54 
	#CFGR_OFFSET
 (
CEC_OFFSET
 + 0x00)

	)

55 
	#PE_BôNumbî
 0x00

	)

56 
	#CFGR_PE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
PE_BôNumbî
 * 4))

	)

59 
	#IE_BôNumbî
 0x01

	)

60 
	#CFGR_IE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
IE_BôNumbî
 * 4))

	)

65 
	#CSR_OFFSET
 (
CEC_OFFSET
 + 0x10)

	)

66 
	#TSOM_BôNumbî
 0x00

	)

67 
	#CSR_TSOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TSOM_BôNumbî
 * 4))

	)

70 
	#TEOM_BôNumbî
 0x01

	)

71 
	#CSR_TEOM_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
TEOM_BôNumbî
 * 4))

	)

73 
	#CFGR_CLEAR_Mask
 (
uöt8_t
)(0xF3Ë

	)

74 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFFË

	)

118 
	$CEC_DeInô
()

121 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
ENABLE
);

123 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
DISABLE
);

124 
	}
}

135 
	$CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
)

137 
uöt16_t
 
tm¥eg
 = 0;

140 
	`as£π_∑øm
(
	`IS_CEC_BIT_TIMING_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôTimögMode
));

141 
	`as£π_∑øm
(
	`IS_CEC_BIT_PERIOD_ERROR_MODE
(
CEC_InôSåu˘
->
CEC_BôPîiodMode
));

145 
tm¥eg
 = 
CEC
->
CFGR
;

148 
tm¥eg
 &
CFGR_CLEAR_Mask
;

151 
tm¥eg
 |(
uöt16_t
)(
CEC_InôSåu˘
->
CEC_BôTimögMode
 | CEC_InôSåu˘->
CEC_BôPîiodMode
);

154 
CEC
->
CFGR
 = 
tm¥eg
;

156 
	}
}

164 
	$CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

167 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

169 *(
__IO
 
uöt32_t
 *Ë
CFGR_PE_BB
 = (uöt32_t)
NewSèã
;

171 if(
NewSèã
 =
DISABLE
)

174 (
CEC
->
CFGR
 & 
CEC_CFGR_PE
Ë!(
uöt32_t
)
RESET
)

178 
	}
}

186 
	$CEC_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

189 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

191 *(
__IO
 
uöt32_t
 *Ë
CFGR_IE_BB
 = (uöt32_t)
NewSèã
;

192 
	}
}

199 
	$CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
)

202 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
CEC_OwnAddªss
));

205 
CEC
->
OAR
 = 
CEC_OwnAddªss
;

206 
	}
}

213 
	$CEC_SëPªsˇÀr
(
uöt16_t
 
CEC_PªsˇÀr
)

216 
	`as£π_∑øm
(
	`IS_CEC_PRESCALER
(
CEC_PªsˇÀr
));

219 
CEC
->
PRES
 = 
CEC_PªsˇÀr
;

220 
	}
}

227 
	$CEC_SídD©aByã
(
uöt8_t
 
D©a
)

230 
CEC
->
TXD
 = 
D©a
 ;

231 
	}
}

239 
uöt8_t
 
	$CEC_Re˚iveD©aByã
()

242  (
uöt8_t
)(
CEC
->
RXD
);

243 
	}
}

250 
	$CEC_SèπOfMesßge
()

253 *(
__IO
 
uöt32_t
 *Ë
CSR_TSOM_BB
 = (uint32_t)0x1;

254 
	}
}

262 
	$CEC_EndOfMesßgeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

265 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

268 *(
__IO
 
uöt32_t
 *Ë
CSR_TEOM_BB
 = (uöt32_t)
NewSèã
;

269 
	}
}

291 
FœgSètus
 
	$CEC_GëFœgSètus
(
uöt32_t
 
CEC_FLAG
)

293 
FœgSètus
 
bô°©us
 = 
RESET
;

294 
uöt32_t
 
˚¸eg
 = 0, 
˚cba£
 = 0;

297 
	`as£π_∑øm
(
	`IS_CEC_GET_FLAG
(
CEC_FLAG
));

300 
˚cba£
 = (
uöt32_t
)(
CEC_BASE
);

303 
˚¸eg
 = 
CEC_FLAG
 >> 28;

306 
CEC_FLAG
 &
FLAG_Mask
;

308 if(
˚¸eg
 != 0)

311 
CEC_FLAG
 = (
uöt32_t
)(CEC_FLAG >> 16);

314 
˚cba£
 += 0xC;

319 
˚cba£
 += 0x10;

322 if(((*(
__IO
 
uöt32_t
 *)
˚cba£
Ë& 
CEC_FLAG
Ë!(uöt32_t)
RESET
)

325 
bô°©us
 = 
SET
;

330 
bô°©us
 = 
RESET
;

334  
bô°©us
;

335 
	}
}

349 
	$CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
)

351 
uöt32_t
 
tmp
 = 0x0;

354 
	`as£π_∑øm
(
	`IS_CEC_CLEAR_FLAG
(
CEC_FLAG
));

356 
tmp
 = 
CEC
->
CSR
 & 0x2;

359 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_FLAG
Ë& 0xFFFFFFFCË| 
tmp
);

360 
	}
}

372 
ITSètus
 
	$CEC_GëITSètus
(
uöt8_t
 
CEC_IT
)

374 
ITSètus
 
bô°©us
 = 
RESET
;

375 
uöt32_t
 
íabÀ°©us
 = 0;

378 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

381 
íabÀ°©us
 = (
CEC
->
CFGR
 & (
uöt8_t
)
CEC_CFGR_IE
) ;

384 i‡(((
CEC
->
CSR
 & 
CEC_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

387 
bô°©us
 = 
SET
;

392 
bô°©us
 = 
RESET
;

395  
bô°©us
;

396 
	}
}

408 
	$CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
)

410 
uöt32_t
 
tmp
 = 0x0;

413 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

415 
tmp
 = 
CEC
->
CSR
 & 0x2;

418 
CEC
->
CSR
 &(
uöt32_t
)(((~(uöt32_t)
CEC_IT
Ë& 0xFFFFFFFCË| 
tmp
);

419 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c

23 
	~"°m32f10x_¸c.h
"

83 
	$CRC_Re£tDR
()

86 
CRC
->
CR
 = 
CRC_CR_RESET
;

87 
	}
}

94 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

96 
CRC
->
DR
 = 
D©a
;

98  (
CRC
->
DR
);

99 
	}
}

107 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

109 
uöt32_t
 
ödex
 = 0;

111 
ödex
 = 0; index < 
Buf„rLígth
; index++)

113 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

115  (
CRC
->
DR
);

116 
	}
}

123 
uöt32_t
 
	$CRC_GëCRC
()

125  (
CRC
->
DR
);

126 
	}
}

133 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

135 
CRC
->
IDR
 = 
IDVÆue
;

136 
	}
}

143 
uöt8_t
 
	$CRC_GëIDRegi°î
()

145  (
CRC
->
IDR
);

146 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c

23 
	~"°m32f10x_dac.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

51 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

52 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

55 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

56 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

57 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

60 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

98 
	$DAC_DeInô
()

101 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

103 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

104 
	}
}

117 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

119 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

121 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

122 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

123 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

124 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

127 
tm¥eg1
 = 
DAC
->
CR
;

129 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

136 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

137 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | DAC_InôSåu˘->
DAC_OuçutBuf„r
);

139 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

141 
DAC
->
CR
 = 
tm¥eg1
;

142 
	}
}

150 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

154 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

156 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

158 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

160 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

161 
	}
}

173 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

176 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

177 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

178 i‡(
NewSèã
 !
DISABLE
)

181 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

186 
DAC
->
CR
 &~(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

188 
	}
}

189 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

203 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

206 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

207 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

208 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

210 i‡(
NewSèã
 !
DISABLE
)

213 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

218 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

220 
	}
}

233 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

236 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

237 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

238 i‡(
NewSèã
 !
DISABLE
)

241 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

246 
DAC
->
CR
 &~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

248 
	}
}

260 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

263 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

265 i‡(
NewSèã
 !
DISABLE
)

268 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

273 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

275 
	}
}

284 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

287 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

288 i‡(
NewSèã
 !
DISABLE
)

291 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
 ;

296 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

298 
	}
}

314 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

317 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

318 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

319 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

320 i‡(
NewSèã
 !
DISABLE
)

323 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

328 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

330 
	}
}

342 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

344 
__IO
 
uöt32_t
 
tmp
 = 0;

347 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

348 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

350 
tmp
 = (
uöt32_t
)
DAC_BASE
;

351 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

354 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

355 
	}
}

367 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

369 
__IO
 
uöt32_t
 
tmp
 = 0;

372 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

373 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

375 
tmp
 = (
uöt32_t
)
DAC_BASE
;

376 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

379 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

380 
	}
}

396 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

398 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

401 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

402 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

403 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

406 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

408 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

412 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

415 
tmp
 = (
uöt32_t
)
DAC_BASE
;

416 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

419 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

420 
	}
}

430 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

432 
__IO
 
uöt32_t
 
tmp
 = 0;

435 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

437 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

438 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

441  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

442 
	}
}

444 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

456 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

458 
FœgSètus
 
bô°©us
 = 
RESET
;

460 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

461 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

464 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

467 
bô°©us
 = 
SET
;

472 
bô°©us
 = 
RESET
;

475  
bô°©us
;

476 
	}
}

489 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

492 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

493 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

496 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

497 
	}
}

510 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

512 
ITSètus
 
bô°©us
 = 
RESET
;

513 
uöt32_t
 
íabÀ°©us
 = 0;

516 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

517 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

520 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

523 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

526 
bô°©us
 = 
SET
;

531 
bô°©us
 = 
RESET
;

534  
bô°©us
;

535 
	}
}

548 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

551 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

552 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

555 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

556 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c

23 
	~"°m32f10x_dbgmcu.h
"

46 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

84 
uöt32_t
 
	$DBGMCU_GëREVID
()

86 (
DBGMCU
->
IDCODE
 >> 16);

87 
	}
}

94 
uöt32_t
 
	$DBGMCU_GëDEVID
()

96 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

97 
	}
}

134 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

137 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

138 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

140 i‡(
NewSèã
 !
DISABLE
)

142 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

146 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

148 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c

23 
	~"°m32f10x_dma.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#DMA1_Ch™√l1_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

49 
	#DMA1_Ch™√l2_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

50 
	#DMA1_Ch™√l3_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

51 
	#DMA1_Ch™√l4_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

52 
	#DMA1_Ch™√l5_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

53 
	#DMA1_Ch™√l6_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF6
 | 
DMA_ISR_TCIF6
 | 
DMA_ISR_HTIF6
 | 
DMA_ISR_TEIF6
))

	)

54 
	#DMA1_Ch™√l7_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF7
 | 
DMA_ISR_TCIF7
 | 
DMA_ISR_HTIF7
 | 
DMA_ISR_TEIF7
))

	)

57 
	#DMA2_Ch™√l1_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

58 
	#DMA2_Ch™√l2_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

59 
	#DMA2_Ch™√l3_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

60 
	#DMA2_Ch™√l4_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

61 
	#DMA2_Ch™√l5_IT_Mask
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

64 
	#FLAG_Mask
 ((
uöt32_t
)0x10000000)

	)

67 
	#CCR_CLEAR_Mask
 ((
uöt32_t
)0xFFFF800F)

	)

108 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

111 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

114 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR1_EN
);

117 
DMAy_Ch™√lx
->
CCR
 = 0;

120 
DMAy_Ch™√lx
->
CNDTR
 = 0;

123 
DMAy_Ch™√lx
->
CPAR
 = 0;

126 
DMAy_Ch™√lx
->
CMAR
 = 0;

128 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l1
)

131 
DMA1
->
IFCR
 |
DMA1_Ch™√l1_IT_Mask
;

133 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l2
)

136 
DMA1
->
IFCR
 |
DMA1_Ch™√l2_IT_Mask
;

138 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l3
)

141 
DMA1
->
IFCR
 |
DMA1_Ch™√l3_IT_Mask
;

143 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l4
)

146 
DMA1
->
IFCR
 |
DMA1_Ch™√l4_IT_Mask
;

148 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l5
)

151 
DMA1
->
IFCR
 |
DMA1_Ch™√l5_IT_Mask
;

153 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l6
)

156 
DMA1
->
IFCR
 |
DMA1_Ch™√l6_IT_Mask
;

158 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l7
)

161 
DMA1
->
IFCR
 |
DMA1_Ch™√l7_IT_Mask
;

163 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l1
)

166 
DMA2
->
IFCR
 |
DMA2_Ch™√l1_IT_Mask
;

168 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l2
)

171 
DMA2
->
IFCR
 |
DMA2_Ch™√l2_IT_Mask
;

173 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l3
)

176 
DMA2
->
IFCR
 |
DMA2_Ch™√l3_IT_Mask
;

178 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l4
)

181 
DMA2
->
IFCR
 |
DMA2_Ch™√l4_IT_Mask
;

185 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l5
)

188 
DMA2
->
IFCR
 |
DMA2_Ch™√l5_IT_Mask
;

191 
	}
}

202 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

204 
uöt32_t
 
tm¥eg
 = 0;

207 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

208 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

209 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

210 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

211 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

212 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

213 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

214 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

215 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

216 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

220 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

222 
tm¥eg
 &
CCR_CLEAR_Mask
;

232 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

233 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

234 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

235 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

238 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

242 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

246 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

250 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

251 
	}
}

259 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

263 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

265 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

267 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

269 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

271 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

273 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

275 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

277 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

279 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

281 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

283 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

284 
	}
}

294 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DMAy_Ch™√lx
->
CCR
 |
DMA_CCR1_EN
;

308 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR1_EN
);

310 
	}
}

326 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

329 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

330 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

332 i‡(
NewSèã
 !
DISABLE
)

335 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

340 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

342 
	}
}

353 
	$DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
)

356 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

360 
DMAy_Ch™√lx
->
CNDTR
 = 
D©aNumbî
;

361 
	}
}

371 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

374 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

376  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

377 
	}
}

433 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
)

435 
FœgSètus
 
bô°©us
 = 
RESET
;

436 
uöt32_t
 
tm¥eg
 = 0;

439 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMAy_FLAG
));

442 i‡((
DMAy_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

445 
tm¥eg
 = 
DMA2
->
ISR
 ;

450 
tm¥eg
 = 
DMA1
->
ISR
 ;

454 i‡((
tm¥eg
 & 
DMAy_FLAG
Ë!(
uöt32_t
)
RESET
)

457 
bô°©us
 = 
SET
;

462 
bô°©us
 = 
RESET
;

466  
bô°©us
;

467 
	}
}

523 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
)

526 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMAy_FLAG
));

529 i‡((
DMAy_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

532 
DMA2
->
IFCR
 = 
DMAy_FLAG
;

537 
DMA1
->
IFCR
 = 
DMAy_FLAG
;

539 
	}
}

595 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
)

597 
ITSètus
 
bô°©us
 = 
RESET
;

598 
uöt32_t
 
tm¥eg
 = 0;

601 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMAy_IT
));

604 i‡((
DMAy_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

607 
tm¥eg
 = 
DMA2
->
ISR
;

612 
tm¥eg
 = 
DMA1
->
ISR
;

616 i‡((
tm¥eg
 & 
DMAy_IT
Ë!(
uöt32_t
)
RESET
)

619 
bô°©us
 = 
SET
;

624 
bô°©us
 = 
RESET
;

627  
bô°©us
;

628 
	}
}

684 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
)

687 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMAy_IT
));

690 i‡((
DMAy_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

693 
DMA2
->
IFCR
 = 
DMAy_IT
;

698 
DMA1
->
IFCR
 = 
DMAy_IT
;

700 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c

23 
	~"°m32f10x_exti.h
"

46 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

85 
	$EXTI_DeInô
()

87 
EXTI
->
IMR
 = 0x00000000;

88 
EXTI
->
EMR
 = 0x00000000;

89 
EXTI
->
RTSR
 = 0x00000000;

90 
EXTI
->
FTSR
 = 0x00000000;

91 
EXTI
->
PR
 = 0x000FFFFF;

92 
	}
}

101 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

103 
uöt32_t
 
tmp
 = 0;

106 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

107 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

108 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

109 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

111 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

113 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

116 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

117 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

119 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

121 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

124 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

125 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

128 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

131 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

132 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

136 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

137 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

139 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

144 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

147 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

149 
	}
}

157 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

159 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

160 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

161 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

162 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

163 
	}
}

171 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

174 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

176 
EXTI
->
SWIER
 |
EXTI_Löe
;

177 
	}
}

186 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

188 
FœgSètus
 
bô°©us
 = 
RESET
;

190 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

192 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

194 
bô°©us
 = 
SET
;

198 
bô°©us
 = 
RESET
;

200  
bô°©us
;

201 
	}
}

209 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

212 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

214 
EXTI
->
PR
 = 
EXTI_Löe
;

215 
	}
}

224 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

226 
ITSètus
 
bô°©us
 = 
RESET
;

227 
uöt32_t
 
íabÀ°©us
 = 0;

229 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

231 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

232 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

234 
bô°©us
 = 
SET
;

238 
bô°©us
 = 
RESET
;

240  
bô°©us
;

241 
	}
}

249 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

252 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

254 
EXTI
->
PR
 = 
EXTI_Löe
;

255 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c

23 
	~"°m32f10x_Êash.h
"

47 
	#ACR_LATENCY_Mask
 ((
uöt32_t
)0x00000038)

	)

48 
	#ACR_HLFCYA_Mask
 ((
uöt32_t
)0xFFFFFFF7)

	)

49 
	#ACR_PRFTBE_Mask
 ((
uöt32_t
)0xFFFFFFEF)

	)

52 
	#ACR_PRFTBS_Mask
 ((
uöt32_t
)0x00000020)

	)

55 
	#CR_PG_Së
 ((
uöt32_t
)0x00000001)

	)

56 
	#CR_PG_Re£t
 ((
uöt32_t
)0x00001FFE)

	)

57 
	#CR_PER_Së
 ((
uöt32_t
)0x00000002)

	)

58 
	#CR_PER_Re£t
 ((
uöt32_t
)0x00001FFD)

	)

59 
	#CR_MER_Së
 ((
uöt32_t
)0x00000004)

	)

60 
	#CR_MER_Re£t
 ((
uöt32_t
)0x00001FFB)

	)

61 
	#CR_OPTPG_Së
 ((
uöt32_t
)0x00000010)

	)

62 
	#CR_OPTPG_Re£t
 ((
uöt32_t
)0x00001FEF)

	)

63 
	#CR_OPTER_Së
 ((
uöt32_t
)0x00000020)

	)

64 
	#CR_OPTER_Re£t
 ((
uöt32_t
)0x00001FDF)

	)

65 
	#CR_STRT_Së
 ((
uöt32_t
)0x00000040)

	)

66 
	#CR_LOCK_Së
 ((
uöt32_t
)0x00000080)

	)

69 
	#RDPRT_Mask
 ((
uöt32_t
)0x00000002)

	)

70 
	#WRP0_Mask
 ((
uöt32_t
)0x000000FF)

	)

71 
	#WRP1_Mask
 ((
uöt32_t
)0x0000FF00)

	)

72 
	#WRP2_Mask
 ((
uöt32_t
)0x00FF0000)

	)

73 
	#WRP3_Mask
 ((
uöt32_t
)0xFF000000)

	)

74 
	#OB_USER_BFB2
 ((
uöt16_t
)0x0008)

	)

77 
	#RDP_Key
 ((
uöt16_t
)0x00A5)

	)

78 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

79 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

82 
	#FLASH_BANK1_END_ADDRESS
 ((
uöt32_t
)0x807FFFF)

	)

85 
	#Eø£Timeout
 ((
uöt32_t
)0x000B0000)

	)

86 
	#ProgømTimeout
 ((
uöt32_t
)0x00002000)

	)

254 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

256 
uöt32_t
 
tm¥eg
 = 0;

259 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

262 
tm¥eg
 = 
FLASH
->
ACR
;

265 
tm¥eg
 &
ACR_LATENCY_Mask
;

266 
tm¥eg
 |
FLASH_L©ícy
;

269 
FLASH
->
ACR
 = 
tm¥eg
;

270 
	}
}

281 
	$FLASH_HÆfCy˛eAc˚ssCmd
(
uöt32_t
 
FLASH_HÆfCy˛eAc˚ss
)

284 
	`as£π_∑øm
(
	`IS_FLASH_HALFCYCLEACCESS_STATE
(
FLASH_HÆfCy˛eAc˚ss
));

287 
FLASH
->
ACR
 &
ACR_HLFCYA_Mask
;

288 
FLASH
->
ACR
 |
FLASH_HÆfCy˛eAc˚ss
;

289 
	}
}

300 
	$FLASH_Pª„tchBuf„rCmd
(
uöt32_t
 
FLASH_Pª„tchBuf„r
)

303 
	`as£π_∑øm
(
	`IS_FLASH_PREFETCHBUFFER_STATE
(
FLASH_Pª„tchBuf„r
));

306 
FLASH
->
ACR
 &
ACR_PRFTBE_Mask
;

307 
FLASH
->
ACR
 |
FLASH_Pª„tchBuf„r
;

308 
	}
}

319 
	$FLASH_U∆ock
()

322 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

323 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

325 #ifde‡
STM32F10X_XL


327 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

328 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

330 
	}
}

340 
	$FLASH_U∆ockB™k1
()

343 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

344 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

345 
	}
}

347 #ifde‡
STM32F10X_XL


354 
	$FLASH_U∆ockB™k2
()

357 
FLASH
->
KEYR2
 = 
FLASH_KEY1
;

358 
FLASH
->
KEYR2
 = 
FLASH_KEY2
;

360 
	}
}

372 
	$FLASH_Lock
()

375 
FLASH
->
CR
 |
CR_LOCK_Së
;

377 #ifde‡
STM32F10X_XL


379 
FLASH
->
CR2
 |
CR_LOCK_Së
;

381 
	}
}

392 
	$FLASH_LockB™k1
()

395 
FLASH
->
CR
 |
CR_LOCK_Së
;

396 
	}
}

398 #ifde‡
STM32F10X_XL


405 
	$FLASH_LockB™k2
()

408 
FLASH
->
CR2
 |
CR_LOCK_Së
;

409 
	}
}

419 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

421 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

423 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Page_Addªss
));

425 #ifde‡
STM32F10X_XL


426 if(
Page_Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

429 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

430 if(
°©us
 =
FLASH_COMPLETE
)

433 
FLASH
->
CR
|
CR_PER_Së
;

434 
FLASH
->
AR
 = 
Page_Addªss
;

435 
FLASH
->
CR
|
CR_STRT_Së
;

438 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

441 
FLASH
->
CR
 &
CR_PER_Re£t
;

447 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

448 if(
°©us
 =
FLASH_COMPLETE
)

451 
FLASH
->
CR2
|
CR_PER_Së
;

452 
FLASH
->
AR2
 = 
Page_Addªss
;

453 
FLASH
->
CR2
|
CR_STRT_Së
;

456 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

459 
FLASH
->
CR2
 &
CR_PER_Re£t
;

464 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

466 if(
°©us
 =
FLASH_COMPLETE
)

469 
FLASH
->
CR
|
CR_PER_Së
;

470 
FLASH
->
AR
 = 
Page_Addªss
;

471 
FLASH
->
CR
|
CR_STRT_Së
;

474 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

477 
FLASH
->
CR
 &
CR_PER_Re£t
;

482  
°©us
;

483 
	}
}

492 
FLASH_Sètus
 
	$FLASH_Eø£AŒPages
()

494 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

496 #ifde‡
STM32F10X_XL


498 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

500 if(
°©us
 =
FLASH_COMPLETE
)

503 
FLASH
->
CR
 |
CR_MER_Së
;

504 
FLASH
->
CR
 |
CR_STRT_Së
;

507 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

510 
FLASH
->
CR
 &
CR_MER_Re£t
;

512 if(
°©us
 =
FLASH_COMPLETE
)

515 
FLASH
->
CR2
 |
CR_MER_Së
;

516 
FLASH
->
CR2
 |
CR_STRT_Së
;

519 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

522 
FLASH
->
CR2
 &
CR_MER_Re£t
;

526 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

527 if(
°©us
 =
FLASH_COMPLETE
)

530 
FLASH
->
CR
 |
CR_MER_Së
;

531 
FLASH
->
CR
 |
CR_STRT_Së
;

534 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

537 
FLASH
->
CR
 &
CR_MER_Re£t
;

542  
°©us
;

543 
	}
}

555 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Pages
()

557 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

559 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

561 if(
°©us
 =
FLASH_COMPLETE
)

564 
FLASH
->
CR
 |
CR_MER_Së
;

565 
FLASH
->
CR
 |
CR_STRT_Së
;

568 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
Eø£Timeout
);

571 
FLASH
->
CR
 &
CR_MER_Re£t
;

574  
°©us
;

575 
	}
}

577 #ifde‡
STM32F10X_XL


585 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Pages
()

587 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

589 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

591 if(
°©us
 =
FLASH_COMPLETE
)

594 
FLASH
->
CR2
 |
CR_MER_Së
;

595 
FLASH
->
CR2
 |
CR_STRT_Së
;

598 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
Eø£Timeout
);

601 
FLASH
->
CR2
 &
CR_MER_Re£t
;

604  
°©us
;

605 
	}
}

616 
FLASH_Sètus
 
	$FLASH_Eø£O±i⁄Byãs
()

618 
uöt16_t
 
rd±mp
 = 
RDP_Key
;

620 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

623 if(
	`FLASH_GëRódOutPrŸe˘i⁄Sètus
(Ë!
RESET
)

625 
rd±mp
 = 0x00;

629 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

630 if(
°©us
 =
FLASH_COMPLETE
)

633 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

634 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

637 
FLASH
->
CR
 |
CR_OPTER_Së
;

638 
FLASH
->
CR
 |
CR_STRT_Së
;

640 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

642 if(
°©us
 =
FLASH_COMPLETE
)

645 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

648 
FLASH
->
CR
 |
CR_OPTPG_Së
;

650 
OB
->
RDP
 = (
uöt16_t
)
rd±mp
;

652 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

654 if(
°©us
 !
FLASH_TIMEOUT
)

657 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

662 i‡(
°©us
 !
FLASH_TIMEOUT
)

665 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

670  
°©us
;

671 
	}
}

681 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

683 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

684 
__IO
 
uöt32_t
 
tmp
 = 0;

687 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

689 #ifde‡
STM32F10X_XL


690 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
 - 2)

693 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

694 if(
°©us
 =
FLASH_COMPLETE
)

698 
FLASH
->
CR
 |
CR_PG_Së
;

700 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

702 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

704 if(
°©us
 =
FLASH_COMPLETE
)

708 
tmp
 = 
Addªss
 + 2;

710 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

713 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

716 
FLASH
->
CR
 &
CR_PG_Re£t
;

721 
FLASH
->
CR
 &
CR_PG_Re£t
;

725 if(
Addªss
 =(
FLASH_BANK1_END_ADDRESS
 - 1))

728 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

730 if(
°©us
 =
FLASH_COMPLETE
)

734 
FLASH
->
CR
 |
CR_PG_Së
;

736 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

739 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

742 
FLASH
->
CR
 &
CR_PG_Re£t
;

747 
FLASH
->
CR
 &
CR_PG_Re£t
;

751 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

753 if(
°©us
 =
FLASH_COMPLETE
)

757 
FLASH
->
CR2
 |
CR_PG_Së
;

758 
tmp
 = 
Addªss
 + 2;

760 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

763 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

766 
FLASH
->
CR2
 &
CR_PG_Re£t
;

771 
FLASH
->
CR2
 &
CR_PG_Re£t
;

777 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

779 if(
°©us
 =
FLASH_COMPLETE
)

783 
FLASH
->
CR2
 |
CR_PG_Së
;

785 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

787 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

789 if(
°©us
 =
FLASH_COMPLETE
)

793 
tmp
 = 
Addªss
 + 2;

795 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

798 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

801 
FLASH
->
CR2
 &
CR_PG_Re£t
;

806 
FLASH
->
CR2
 &
CR_PG_Re£t
;

812 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

814 if(
°©us
 =
FLASH_COMPLETE
)

818 
FLASH
->
CR
 |
CR_PG_Së
;

820 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

822 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

824 if(
°©us
 =
FLASH_COMPLETE
)

828 
tmp
 = 
Addªss
 + 2;

830 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

833 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

836 
FLASH
->
CR
 &
CR_PG_Re£t
;

841 
FLASH
->
CR
 &
CR_PG_Re£t
;

847  
°©us
;

848 
	}
}

858 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

860 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

862 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

864 #ifde‡
STM32F10X_XL


866 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

868 if(
Addªss
 < 
FLASH_BANK1_END_ADDRESS
)

870 if(
°©us
 =
FLASH_COMPLETE
)

873 
FLASH
->
CR
 |
CR_PG_Së
;

875 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

877 
°©us
 = 
	`FLASH_WaôF‹La°B™k1O≥øti⁄
(
ProgømTimeout
);

880 
FLASH
->
CR
 &
CR_PG_Re£t
;

885 if(
°©us
 =
FLASH_COMPLETE
)

888 
FLASH
->
CR2
 |
CR_PG_Së
;

890 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

892 
°©us
 = 
	`FLASH_WaôF‹La°B™k2O≥øti⁄
(
ProgømTimeout
);

895 
FLASH
->
CR2
 &
CR_PG_Re£t
;

900 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

902 if(
°©us
 =
FLASH_COMPLETE
)

905 
FLASH
->
CR
 |
CR_PG_Së
;

907 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

909 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

912 
FLASH
->
CR
 &
CR_PG_Re£t
;

917  
°©us
;

918 
	}
}

929 
FLASH_Sètus
 
	$FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

931 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

933 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

934 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

936 if(
°©us
 =
FLASH_COMPLETE
)

939 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

940 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

942 
FLASH
->
CR
 |
CR_OPTPG_Së
;

943 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

946 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

947 if(
°©us
 !
FLASH_TIMEOUT
)

950 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

954  
°©us
;

955 
	}
}

975 
FLASH_Sètus
 
	$FLASH_E«bÀWrôePrŸe˘i⁄
(
uöt32_t
 
FLASH_Pages
)

977 
uöt16_t
 
WRP0_D©a
 = 0xFFFF, 
WRP1_D©a
 = 0xFFFF, 
WRP2_D©a
 = 0xFFFF, 
WRP3_D©a
 = 0xFFFF;

979 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

982 
	`as£π_∑øm
(
	`IS_FLASH_WRPROT_PAGE
(
FLASH_Pages
));

984 
FLASH_Pages
 = (
uöt32_t
)(~FLASH_Pages);

985 
WRP0_D©a
 = (
uöt16_t
)(
FLASH_Pages
 & 
WRP0_Mask
);

986 
WRP1_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP1_Mask
) >> 8);

987 
WRP2_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP2_Mask
) >> 16);

988 
WRP3_D©a
 = (
uöt16_t
)((
FLASH_Pages
 & 
WRP3_Mask
) >> 24);

991 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

993 if(
°©us
 =
FLASH_COMPLETE
)

996 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

997 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

998 
FLASH
->
CR
 |
CR_OPTPG_Së
;

999 if(
WRP0_D©a
 != 0xFF)

1001 
OB
->
WRP0
 = 
WRP0_D©a
;

1004 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1006 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP1_D©a
 != 0xFF))

1008 
OB
->
WRP1
 = 
WRP1_D©a
;

1011 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1013 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP2_D©a
 != 0xFF))

1015 
OB
->
WRP2
 = 
WRP2_D©a
;

1018 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1021 if((
°©us
 =
FLASH_COMPLETE
)&& (
WRP3_D©a
 != 0xFF))

1023 
OB
->
WRP3
 = 
WRP3_D©a
;

1026 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1029 if(
°©us
 !
FLASH_TIMEOUT
)

1032 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1036  
°©us
;

1037 
	}
}

1049 
FLASH_Sètus
 
	$FLASH_RódOutPrŸe˘i⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1051 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1053 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1054 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1055 if(
°©us
 =
FLASH_COMPLETE
)

1058 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1059 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1060 
FLASH
->
CR
 |
CR_OPTER_Së
;

1061 
FLASH
->
CR
 |
CR_STRT_Së
;

1063 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1064 if(
°©us
 =
FLASH_COMPLETE
)

1067 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1069 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1070 if(
NewSèã
 !
DISABLE
)

1072 
OB
->
RDP
 = 0x00;

1076 
OB
->
RDP
 = 
RDP_Key
;

1079 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
Eø£Timeout
);

1081 if(
°©us
 !
FLASH_TIMEOUT
)

1084 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1089 if(
°©us
 !
FLASH_TIMEOUT
)

1092 
FLASH
->
CR
 &
CR_OPTER_Re£t
;

1097  
°©us
;

1098 
	}
}

1118 
FLASH_Sètus
 
	$FLASH_U£rO±i⁄ByãC⁄fig
(
uöt16_t
 
OB_IWDG
, uöt16_à
OB_STOP
, uöt16_à
OB_STDBY
)

1120 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1123 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1124 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1125 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1128 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1129 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1132 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1134 if(
°©us
 =
FLASH_COMPLETE
)

1137 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1139 
OB
->
USER
 = 
OB_IWDG
 | (
uöt16_t
)(
OB_STOP
 | (uöt16_t)(
OB_STDBY
 | ((uint16_t)0xF8)));

1142 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1143 if(
°©us
 !
FLASH_TIMEOUT
)

1146 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1150  
°©us
;

1151 
	}
}

1153 #ifde‡
STM32F10X_XL


1172 
FLASH_Sètus
 
	$FLASH_BoŸC⁄fig
(
uöt16_t
 
FLASH_BOOT
)

1174 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1175 
	`as£π_∑øm
(
	`IS_FLASH_BOOT
(
FLASH_BOOT
));

1177 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

1178 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

1181 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1183 if(
°©us
 =
FLASH_COMPLETE
)

1186 
FLASH
->
CR
 |
CR_OPTPG_Së
;

1188 if(
FLASH_BOOT
 =
FLASH_BOOT_B™k1
)

1190 
OB
->
USER
 |
OB_USER_BFB2
;

1194 
OB
->
USER
 &(
uöt16_t
)(~(uöt16_t)(
OB_USER_BFB2
));

1197 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
ProgømTimeout
);

1198 if(
°©us
 !
FLASH_TIMEOUT
)

1201 
FLASH
->
CR
 &
CR_OPTPG_Re£t
;

1205  
°©us
;

1206 
	}
}

1216 
uöt32_t
 
	$FLASH_GëU£rO±i⁄Byã
()

1219  (
uöt32_t
)(
FLASH
->
OBR
 >> 2);

1220 
	}
}

1228 
uöt32_t
 
	$FLASH_GëWrôePrŸe˘i⁄O±i⁄Byã
()

1231  (
uöt32_t
)(
FLASH
->
WRPR
);

1232 
	}
}

1240 
FœgSètus
 
	$FLASH_GëRódOutPrŸe˘i⁄Sètus
()

1242 
FœgSètus
 
ªadout°©us
 = 
RESET
;

1243 i‡((
FLASH
->
OBR
 & 
RDPRT_Mask
Ë!(
uöt32_t
)
RESET
)

1245 
ªadout°©us
 = 
SET
;

1249 
ªadout°©us
 = 
RESET
;

1251  
ªadout°©us
;

1252 
	}
}

1260 
FœgSètus
 
	$FLASH_GëPª„tchBuf„rSètus
()

1262 
FœgSètus
 
bô°©us
 = 
RESET
;

1264 i‡((
FLASH
->
ACR
 & 
ACR_PRFTBS_Mask
Ë!(
uöt32_t
)
RESET
)

1266 
bô°©us
 = 
SET
;

1270 
bô°©us
 = 
RESET
;

1273  
bô°©us
;

1274 
	}
}

1290 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1292 #ifde‡
STM32F10X_XL


1294 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1297 if((
FLASH_IT
 & 0x80000000) != 0x0)

1299 if(
NewSèã
 !
DISABLE
)

1302 
FLASH
->
CR2
 |(
FLASH_IT
 & 0x7FFFFFFF);

1307 
FLASH
->
CR2
 &~(
uöt32_t
)(
FLASH_IT
 & 0x7FFFFFFF);

1312 if(
NewSèã
 !
DISABLE
)

1315 
FLASH
->
CR
 |
FLASH_IT
;

1320 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1325 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1326 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1328 if(
NewSèã
 !
DISABLE
)

1331 
FLASH
->
CR
 |
FLASH_IT
;

1336 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1339 
	}
}

1357 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1359 
FœgSètus
 
bô°©us
 = 
RESET
;

1361 #ifde‡
STM32F10X_XL


1363 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1364 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1366 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1368 
bô°©us
 = 
SET
;

1372 
bô°©us
 = 
RESET
;

1377 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1379 if((
FLASH
->
SR2
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1381 
bô°©us
 = 
SET
;

1385 
bô°©us
 = 
RESET
;

1390 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1392 
bô°©us
 = 
SET
;

1396 
bô°©us
 = 
RESET
;

1402 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
)) ;

1403 if(
FLASH_FLAG
 =
FLASH_FLAG_OPTERR
)

1405 if((
FLASH
->
OBR
 & 
FLASH_FLAG_OPTERR
Ë!(
uöt32_t
)
RESET
)

1407 
bô°©us
 = 
SET
;

1411 
bô°©us
 = 
RESET
;

1416 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1418 
bô°©us
 = 
SET
;

1422 
bô°©us
 = 
RESET
;

1428  
bô°©us
;

1429 
	}
}

1443 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1445 #ifde‡
STM32F10X_XL


1447 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1449 if((
FLASH_FLAG
 & 0x80000000) != 0x0)

1452 
FLASH
->
SR2
 = 
FLASH_FLAG
;

1457 
FLASH
->
SR
 = 
FLASH_FLAG
;

1462 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
)) ;

1465 
FLASH
->
SR
 = 
FLASH_FLAG
;

1467 
	}
}

1477 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1479 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1481 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1483 
Êash°©us
 = 
FLASH_BUSY
;

1487 if((
FLASH
->
SR
 & 
FLASH_FLAG_PGERR
) != 0)

1489 
Êash°©us
 = 
FLASH_ERROR_PG
;

1493 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPRTERR
) != 0 )

1495 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1499 
Êash°©us
 = 
FLASH_COMPLETE
;

1504  
Êash°©us
;

1505 
	}
}

1515 
FLASH_Sètus
 
	$FLASH_GëB™k1Sètus
()

1517 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1519 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_BSY
Ë=
FLASH_FLAG_BSY
)

1521 
Êash°©us
 = 
FLASH_BUSY
;

1525 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_PGERR
) != 0)

1527 
Êash°©us
 = 
FLASH_ERROR_PG
;

1531 if((
FLASH
->
SR
 & 
FLASH_FLAG_BANK1_WRPRTERR
) != 0 )

1533 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1537 
Êash°©us
 = 
FLASH_COMPLETE
;

1542  
Êash°©us
;

1543 
	}
}

1545 #ifde‡
STM32F10X_XL


1553 
FLASH_Sètus
 
	$FLASH_GëB™k2Sètus
()

1555 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1557 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)) == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF))

1559 
Êash°©us
 = 
FLASH_BUSY
;

1563 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_PGERR
 & 0x7FFFFFFF)) != 0)

1565 
Êash°©us
 = 
FLASH_ERROR_PG
;

1569 if((
FLASH
->
SR2
 & (
FLASH_FLAG_BANK2_WRPRTERR
 & 0x7FFFFFFF)) != 0 )

1571 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1575 
Êash°©us
 = 
FLASH_COMPLETE
;

1580  
Êash°©us
;

1581 
	}
}

1595 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

1597 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1600 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1602 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

1604 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1605 
Timeout
--;

1607 if(
Timeout
 == 0x00 )

1609 
°©us
 = 
FLASH_TIMEOUT
;

1612  
°©us
;

1613 
	}
}

1623 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k1O≥øti⁄
(
uöt32_t
 
Timeout
)

1625 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1628 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1630 (
°©us
 =
FLASH_FLAG_BANK1_BSY
Ë&& (
Timeout
 != 0x00))

1632 
°©us
 = 
	`FLASH_GëB™k1Sètus
();

1633 
Timeout
--;

1635 if(
Timeout
 == 0x00 )

1637 
°©us
 = 
FLASH_TIMEOUT
;

1640  
°©us
;

1641 
	}
}

1643 #ifde‡
STM32F10X_XL


1651 
FLASH_Sètus
 
	$FLASH_WaôF‹La°B™k2O≥øti⁄
(
uöt32_t
 
Timeout
)

1653 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1656 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1658 (
°©us
 =(
FLASH_FLAG_BANK2_BSY
 & 0x7FFFFFFF)Ë&& (
Timeout
 != 0x00))

1660 
°©us
 = 
	`FLASH_GëB™k2Sètus
();

1661 
Timeout
--;

1663 if(
Timeout
 == 0x00 )

1665 
°©us
 = 
FLASH_TIMEOUT
;

1668  
°©us
;

1669 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c

23 
	~"°m32f10x_fsmc.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#BCR_MBKEN_Së
 ((
uöt32_t
)0x00000001)

	)

50 
	#BCR_MBKEN_Re£t
 ((
uöt32_t
)0x000FFFFE)

	)

51 
	#BCR_FACCEN_Së
 ((
uöt32_t
)0x00000040)

	)

54 
	#PCR_PBKEN_Së
 ((
uöt32_t
)0x00000004)

	)

55 
	#PCR_PBKEN_Re£t
 ((
uöt32_t
)0x000FFFFB)

	)

56 
	#PCR_ECCEN_Së
 ((
uöt32_t
)0x00000040)

	)

57 
	#PCR_ECCEN_Re£t
 ((
uöt32_t
)0x000FFFBF)

	)

58 
	#PCR_Mem‹yTy≥_NAND
 ((
uöt32_t
)0x00000008)

	)

102 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

105 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

108 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

110 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

115 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

117 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

118 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

119 
	}
}

129 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

132 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

134 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

137 
FSMC_B™k2
->
PCR2
 = 0x00000018;

138 
FSMC_B™k2
->
SR2
 = 0x00000040;

139 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

140 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

146 
FSMC_B™k3
->
PCR3
 = 0x00000018;

147 
FSMC_B™k3
->
SR3
 = 0x00000040;

148 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

149 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

151 
	}
}

158 
	$FSMC_PCCARDDeInô
()

161 
FSMC_B™k4
->
PCR4
 = 0x00000018;

162 
FSMC_B™k4
->
SR4
 = 0x00000000;

163 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

164 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

165 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

166 
	}
}

176 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

179 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

180 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

181 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

182 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

183 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

184 
	`as£π_∑øm
(
	`IS_FSMC_ASYNWAIT
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
));

185 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

186 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

187 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

188 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

189 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

190 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

191 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

192 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

193 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

194 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

195 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

196 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

197 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

198 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

201 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

202 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

203 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

204 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

205 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

206 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 |

207 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

208 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

209 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

210 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

211 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

212 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

213 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

215 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

217 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_Së
;

221 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

222 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

223 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

224 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

225 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

226 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

227 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

228 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

232 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

234 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

235 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

236 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

237 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

238 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

239 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

240 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

241 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

242 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

243 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

244 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

245 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

246 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

250 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

252 
	}
}

262 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

264 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

267 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

268 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

269 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

270 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

271 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

272 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

273 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

274 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

275 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

276 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

277 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

278 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

279 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

280 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

281 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

284 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

285 
PCR_Mem‹yTy≥_NAND
 |

286 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

287 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

288 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

289 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

290 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

293 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

294 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

295 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

296 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

299 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

300 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

301 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

302 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

304 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

307 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

308 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

309 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

314 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

315 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

316 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

318 
	}
}

328 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

331 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

332 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

333 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

335 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

336 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

337 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

338 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

340 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

341 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

342 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

343 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

344 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

345 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

346 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

347 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

350 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

351 
FSMC_Mem‹yD©aWidth_16b
 |

352 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

353 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

356 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

357 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

358 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

359 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

362 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

363 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

364 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

365 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

368 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

369 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

370 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

371 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

372 
	}
}

380 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

383 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

384 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

385 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

386 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

387 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

388 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 = 
FSMC_Asynchr⁄ousWaô_DißbÀ
;

389 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

390 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

391 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

392 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

393 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

394 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

395 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

396 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

397 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

398 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

399 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

400 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

401 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

402 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

403 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

404 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

405 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

406 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

407 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

408 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

409 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

410 
	}
}

418 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

421 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

422 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

423 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

424 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

425 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

426 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

427 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

428 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

429 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

430 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

431 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

432 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

433 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

434 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

435 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

436 
	}
}

444 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

447 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

448 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

449 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

450 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

451 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

452 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

453 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

454 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

455 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

456 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

457 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

458 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

459 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

460 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

461 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

462 
	}
}

475 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

477 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

478 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

480 i‡(
NewSèã
 !
DISABLE
)

483 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_Së
;

488 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_Re£t
;

490 
	}
}

501 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

503 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

504 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

506 i‡(
NewSèã
 !
DISABLE
)

509 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

511 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_Së
;

515 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_Së
;

521 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

523 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_Re£t
;

527 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_Re£t
;

530 
	}
}

538 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

542 i‡(
NewSèã
 !
DISABLE
)

545 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_Së
;

550 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_Re£t
;

552 
	}
}

564 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

566 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

567 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

569 i‡(
NewSèã
 !
DISABLE
)

572 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

574 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_Së
;

578 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_Së
;

584 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

586 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_Re£t
;

590 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_Re£t
;

593 
	}
}

603 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

605 
uöt32_t
 
eccvÆ
 = 0x00000000;

607 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

610 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

615 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

618 (
eccvÆ
);

619 
	}
}

637 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

639 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

640 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

641 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

643 i‡(
NewSèã
 !
DISABLE
)

646 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

648 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

651 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

653 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

658 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

664 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

667 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

670 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

672 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

677 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

680 
	}
}

697 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

699 
FœgSètus
 
bô°©us
 = 
RESET
;

700 
uöt32_t
 
tmp§
 = 0x00000000;

703 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

704 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

706 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

708 
tmp§
 = 
FSMC_B™k2
->
SR2
;

710 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

712 
tmp§
 = 
FSMC_B™k3
->
SR3
;

717 
tmp§
 = 
FSMC_B™k4
->
SR4
;

721 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

723 
bô°©us
 = 
SET
;

727 
bô°©us
 = 
RESET
;

730  
bô°©us
;

731 
	}
}

747 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

750 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

751 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

753 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

755 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

757 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

759 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

764 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

766 
	}
}

782 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

784 
ITSètus
 
bô°©us
 = 
RESET
;

785 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

788 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

789 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

791 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

793 
tmp§
 = 
FSMC_B™k2
->
SR2
;

795 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

797 
tmp§
 = 
FSMC_B™k3
->
SR3
;

802 
tmp§
 = 
FSMC_B™k4
->
SR4
;

805 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

807 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

808 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

810 
bô°©us
 = 
SET
;

814 
bô°©us
 = 
RESET
;

816  
bô°©us
;

817 
	}
}

833 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

836 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

837 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

839 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

841 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

843 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

845 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

850 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

852 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c

23 
	~"°m32f10x_gpio.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#AFIO_OFFSET
 (
AFIO_BASE
 - 
PERIPH_BASE
)

	)

53 
	#EVCR_OFFSET
 (
AFIO_OFFSET
 + 0x00)

	)

54 
	#EVOE_BôNumbî
 ((
uöt8_t
)0x07)

	)

55 
	#EVCR_EVOE_BB
 (
PERIPH_BB_BASE
 + (
EVCR_OFFSET
 * 32Ë+ (
EVOE_BôNumbî
 * 4))

	)

60 
	#MAPR_OFFSET
 (
AFIO_OFFSET
 + 0x04)

	)

61 
	#MII_RMII_SEL_BôNumbî
 ((
u8
)0x17)

	)

62 
	#MAPR_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
MAPR_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

65 
	#EVCR_PORTPINCONFIG_MASK
 ((
uöt16_t
)0xFF80)

	)

66 
	#LSB_MASK
 ((
uöt16_t
)0xFFFF)

	)

67 
	#DBGAFR_POSITION_MASK
 ((
uöt32_t
)0x000F0000)

	)

68 
	#DBGAFR_SWJCFG_MASK
 ((
uöt32_t
)0xF0FFFFFF)

	)

69 
	#DBGAFR_LOCATION_MASK
 ((
uöt32_t
)0x00200000)

	)

70 
	#DBGAFR_NUMBITS_MASK
 ((
uöt32_t
)0x00100000)

	)

108 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

111 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

113 i‡(
GPIOx
 =
GPIOA
)

115 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
ENABLE
);

116 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOA
, 
DISABLE
);

118 i‡(
GPIOx
 =
GPIOB
)

120 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
ENABLE
);

121 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOB
, 
DISABLE
);

123 i‡(
GPIOx
 =
GPIOC
)

125 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
ENABLE
);

126 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOC
, 
DISABLE
);

128 i‡(
GPIOx
 =
GPIOD
)

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
ENABLE
);

131 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOD
, 
DISABLE
);

133 i‡(
GPIOx
 =
GPIOE
)

135 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
ENABLE
);

136 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOE
, 
DISABLE
);

138 i‡(
GPIOx
 =
GPIOF
)

140 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
ENABLE
);

141 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOF
, 
DISABLE
);

145 i‡(
GPIOx
 =
GPIOG
)

147 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
ENABLE
);

148 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_GPIOG
, 
DISABLE
);

151 
	}
}

159 
	$GPIO_AFIODeInô
()

161 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
ENABLE
);

162 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_AFIO
, 
DISABLE
);

163 
	}
}

173 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

175 
uöt32_t
 
cuºítmode
 = 0x00, 
cuºíçö
 = 0x00, 
pöpos
 = 0x00, 
pos
 = 0x00;

176 
uöt32_t
 
tm¥eg
 = 0x00, 
pömask
 = 0x00;

178 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

179 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

180 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

183 
cuºítmode
 = ((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x0F);

184 i‡((((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
) & ((uint32_t)0x10)) != 0x00)

187 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

189 
cuºítmode
 |(
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_S≥ed
;

193 i‡(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Pö
 & ((uint32_t)0x00FF)) != 0x00)

195 
tm¥eg
 = 
GPIOx
->
CRL
;

196 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

198 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

200 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

201 i‡(
cuºíçö
 =
pos
)

203 
pos
 = 
pöpos
 << 2;

205 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

206 
tm¥eg
 &~
pömask
;

208 
tm¥eg
 |(
cuºítmode
 << 
pos
);

210 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

212 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

217 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

219 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< 
pöpos
);

224 
GPIOx
->
CRL
 = 
tm¥eg
;

228 i‡(
GPIO_InôSåu˘
->
GPIO_Pö
 > 0x00FF)

230 
tm¥eg
 = 
GPIOx
->
CRH
;

231 
pöpos
 = 0x00;Öinpos < 0x08;Öinpos++)

233 
pos
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

235 
cuºíçö
 = ((
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
);

236 i‡(
cuºíçö
 =
pos
)

238 
pos
 = 
pöpos
 << 2;

240 
pömask
 = ((
uöt32_t
)0x0FË<< 
pos
;

241 
tm¥eg
 &~
pömask
;

243 
tm¥eg
 |(
cuºítmode
 << 
pos
);

245 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPD
)

247 
GPIOx
->
BRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

250 i‡(
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_IPU
)

252 
GPIOx
->
BSRR
 = (((
uöt32_t
)0x01Ë<< (
pöpos
 + 0x08));

256 
GPIOx
->
CRH
 = 
tm¥eg
;

258 
	}
}

266 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

269 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

270 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

271 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN_FLOATING
;

272 
	}
}

281 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

283 
uöt8_t
 
bô°©us
 = 0x00;

286 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

287 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

289 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

291 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

295 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

297  
bô°©us
;

298 
	}
}

305 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

308 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

310  ((
uöt16_t
)
GPIOx
->
IDR
);

311 
	}
}

320 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

322 
uöt8_t
 
bô°©us
 = 0x00;

324 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

325 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

327 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

329 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

333 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

335  
bô°©us
;

336 
	}
}

343 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

346 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

348  ((
uöt16_t
)
GPIOx
->
ODR
);

349 
	}
}

358 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

361 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

362 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

364 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

365 
	}
}

374 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

377 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

378 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

380 
GPIOx
->
BRR
 = 
GPIO_Pö
;

381 
	}
}

394 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

397 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

398 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

399 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

401 i‡(
BôVÆ
 !
Bô_RESET
)

403 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

407 
GPIOx
->
BRR
 = 
GPIO_Pö
;

409 
	}
}

417 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

420 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

422 
GPIOx
->
ODR
 = 
P‹tVÆ
;

423 
	}
}

432 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

434 
uöt32_t
 
tmp
 = 0x00010000;

437 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

438 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

440 
tmp
 |
GPIO_Pö
;

442 
GPIOx
->
LCKR
 = 
tmp
;

444 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

446 
GPIOx
->
LCKR
 = 
tmp
;

448 
tmp
 = 
GPIOx
->
LCKR
;

450 
tmp
 = 
GPIOx
->
LCKR
;

451 
	}
}

462 
	$GPIO_EvítOuçutC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

464 
uöt32_t
 
tm¥eg
 = 0x00;

466 
	`as£π_∑øm
(
	`IS_GPIO_EVENTOUT_PORT_SOURCE
(
GPIO_P‹tSour˚
));

467 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

469 
tm¥eg
 = 
AFIO
->
EVCR
;

471 
tm¥eg
 &
EVCR_PORTPINCONFIG_MASK
;

472 
tm¥eg
 |(
uöt32_t
)
GPIO_P‹tSour˚
 << 0x04;

473 
tm¥eg
 |
GPIO_PöSour˚
;

474 
AFIO
->
EVCR
 = 
tm¥eg
;

475 
	}
}

483 
	$GPIO_EvítOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

488 *(
__IO
 
uöt32_t
 *Ë
EVCR_EVOE_BB
 = (uöt32_t)
NewSèã
;

489 
	}
}

549 
	$GPIO_PöRem≠C⁄fig
(
uöt32_t
 
GPIO_Rem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

551 
uöt32_t
 
tmp
 = 0x00, 
tmp1
 = 0x00, 
tm¥eg
 = 0x00, 
tmpmask
 = 0x00;

554 
	`as£π_∑øm
(
	`IS_GPIO_REMAP
(
GPIO_Rem≠
));

555 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

557 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

559 
tm¥eg
 = 
AFIO
->
MAPR2
;

563 
tm¥eg
 = 
AFIO
->
MAPR
;

566 
tmpmask
 = (
GPIO_Rem≠
 & 
DBGAFR_POSITION_MASK
) >> 0x10;

567 
tmp
 = 
GPIO_Rem≠
 & 
LSB_MASK
;

569 i‡((
GPIO_Rem≠
 & (
DBGAFR_LOCATION_MASK
 | 
DBGAFR_NUMBITS_MASK
)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))

571 
tm¥eg
 &
DBGAFR_SWJCFG_MASK
;

572 
AFIO
->
MAPR
 &
DBGAFR_SWJCFG_MASK
;

574 i‡((
GPIO_Rem≠
 & 
DBGAFR_NUMBITS_MASK
) == DBGAFR_NUMBITS_MASK)

576 
tmp1
 = ((
uöt32_t
)0x03Ë<< 
tmpmask
;

577 
tm¥eg
 &~
tmp1
;

578 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

582 
tm¥eg
 &~(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

583 
tm¥eg
 |~
DBGAFR_SWJCFG_MASK
;

586 i‡(
NewSèã
 !
DISABLE
)

588 
tm¥eg
 |(
tmp
 << ((
GPIO_Rem≠
 >> 0x15)*0x10));

591 if((
GPIO_Rem≠
 & 0x80000000) == 0x80000000)

593 
AFIO
->
MAPR2
 = 
tm¥eg
;

597 
AFIO
->
MAPR
 = 
tm¥eg
;

599 
	}
}

609 
	$GPIO_EXTILöeC⁄fig
(
uöt8_t
 
GPIO_P‹tSour˚
, uöt8_à
GPIO_PöSour˚
)

611 
uöt32_t
 
tmp
 = 0x00;

613 
	`as£π_∑øm
(
	`IS_GPIO_EXTI_PORT_SOURCE
(
GPIO_P‹tSour˚
));

614 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

616 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
GPIO_PöSour˚
 & (
uöt8_t
)0x03));

617 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] &~
tmp
;

618 
AFIO
->
EXTICR
[
GPIO_PöSour˚
 >> 0x02] |(((
uöt32_t
)
GPIO_P‹tSour˚
Ë<< (0x04 * (GPIO_PöSour˚ & (
uöt8_t
)0x03)));

619 
	}
}

630 
	$GPIO_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
GPIO_ETH_MedüI¡îÁ˚
)

632 
	`as£π_∑øm
(
	`IS_GPIO_ETH_MEDIA_INTERFACE
(
GPIO_ETH_MedüI¡îÁ˚
));

635 *(
__IO
 
uöt32_t
 *Ë
MAPR_MII_RMII_SEL_BB
 = 
GPIO_ETH_MedüI¡îÁ˚
;

636 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c

23 
	~"°m32f10x_i2c.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CR1_PE_Së
 ((
uöt16_t
)0x0001)

	)

50 
	#CR1_PE_Re£t
 ((
uöt16_t
)0xFFFE)

	)

53 
	#CR1_START_Së
 ((
uöt16_t
)0x0100)

	)

54 
	#CR1_START_Re£t
 ((
uöt16_t
)0xFEFF)

	)

57 
	#CR1_STOP_Së
 ((
uöt16_t
)0x0200)

	)

58 
	#CR1_STOP_Re£t
 ((
uöt16_t
)0xFDFF)

	)

61 
	#CR1_ACK_Së
 ((
uöt16_t
)0x0400)

	)

62 
	#CR1_ACK_Re£t
 ((
uöt16_t
)0xFBFF)

	)

65 
	#CR1_ENGC_Së
 ((
uöt16_t
)0x0040)

	)

66 
	#CR1_ENGC_Re£t
 ((
uöt16_t
)0xFFBF)

	)

69 
	#CR1_SWRST_Së
 ((
uöt16_t
)0x8000)

	)

70 
	#CR1_SWRST_Re£t
 ((
uöt16_t
)0x7FFF)

	)

73 
	#CR1_PEC_Së
 ((
uöt16_t
)0x1000)

	)

74 
	#CR1_PEC_Re£t
 ((
uöt16_t
)0xEFFF)

	)

77 
	#CR1_ENPEC_Së
 ((
uöt16_t
)0x0020)

	)

78 
	#CR1_ENPEC_Re£t
 ((
uöt16_t
)0xFFDF)

	)

81 
	#CR1_ENARP_Së
 ((
uöt16_t
)0x0010)

	)

82 
	#CR1_ENARP_Re£t
 ((
uöt16_t
)0xFFEF)

	)

85 
	#CR1_NOSTRETCH_Së
 ((
uöt16_t
)0x0080)

	)

86 
	#CR1_NOSTRETCH_Re£t
 ((
uöt16_t
)0xFF7F)

	)

89 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xFBF5)

	)

92 
	#CR2_DMAEN_Së
 ((
uöt16_t
)0x0800)

	)

93 
	#CR2_DMAEN_Re£t
 ((
uöt16_t
)0xF7FF)

	)

96 
	#CR2_LAST_Së
 ((
uöt16_t
)0x1000)

	)

97 
	#CR2_LAST_Re£t
 ((
uöt16_t
)0xEFFF)

	)

100 
	#CR2_FREQ_Re£t
 ((
uöt16_t
)0xFFC0)

	)

103 
	#OAR1_ADD0_Së
 ((
uöt16_t
)0x0001)

	)

104 
	#OAR1_ADD0_Re£t
 ((
uöt16_t
)0xFFFE)

	)

107 
	#OAR2_ENDUAL_Së
 ((
uöt16_t
)0x0001)

	)

108 
	#OAR2_ENDUAL_Re£t
 ((
uöt16_t
)0xFFFE)

	)

111 
	#OAR2_ADD2_Re£t
 ((
uöt16_t
)0xFF01)

	)

114 
	#CCR_FS_Së
 ((
uöt16_t
)0x8000)

	)

117 
	#CCR_CCR_Së
 ((
uöt16_t
)0x0FFF)

	)

120 
	#FLAG_Mask
 ((
uöt32_t
)0x00FFFFFF)

	)

123 
	#ITEN_Mask
 ((
uöt32_t
)0x07000000)

	)

162 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

165 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

167 i‡(
I2Cx
 =
I2C1
)

170 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

172 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

177 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

179 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

181 
	}
}

191 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

193 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

194 
uöt16_t
 
ªsu…
 = 0x04;

195 
uöt32_t
 
p˛k1
 = 8000000;

196 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

198 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

199 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

200 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

201 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

202 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

203 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

204 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

208 
tm¥eg
 = 
I2Cx
->
CR2
;

210 
tm¥eg
 &
CR2_FREQ_Re£t
;

212 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

213 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

215 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

216 
tm¥eg
 |
‰eqønge
;

218 
I2Cx
->
CR2
 = 
tm¥eg
;

222 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

225 
tm¥eg
 = 0;

228 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

231 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

233 i‡(
ªsu…
 < 0x04)

236 
ªsu…
 = 0x04;

239 
tm¥eg
 |
ªsu…
;

241 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

246 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

249 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

254 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

256 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

260 i‡((
ªsu…
 & 
CCR_CCR_Së
) == 0)

263 
ªsu…
 |(
uöt16_t
)0x0001;

266 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
CCR_FS_Së
);

268 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

272 
I2Cx
->
CCR
 = 
tm¥eg
;

274 
I2Cx
->
CR1
 |
CR1_PE_Së
;

278 
tm¥eg
 = 
I2Cx
->
CR1
;

280 
tm¥eg
 &
CR1_CLEAR_Mask
;

284 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

286 
I2Cx
->
CR1
 = 
tm¥eg
;

290 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

291 
	}
}

298 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

302 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

304 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

306 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

308 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

310 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

312 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

313 
	}
}

322 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

325 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

326 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

327 i‡(
NewSèã
 !
DISABLE
)

330 
I2Cx
->
CR1
 |
CR1_PE_Së
;

335 
I2Cx
->
CR1
 &
CR1_PE_Re£t
;

337 
	}
}

346 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

349 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

350 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

351 i‡(
NewSèã
 !
DISABLE
)

354 
I2Cx
->
CR2
 |
CR2_DMAEN_Së
;

359 
I2Cx
->
CR2
 &
CR2_DMAEN_Re£t
;

361 
	}
}

370 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

373 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

374 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

375 i‡(
NewSèã
 !
DISABLE
)

378 
I2Cx
->
CR2
 |
CR2_LAST_Së
;

383 
I2Cx
->
CR2
 &
CR2_LAST_Re£t
;

385 
	}
}

394 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

397 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

398 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

399 i‡(
NewSèã
 !
DISABLE
)

402 
I2Cx
->
CR1
 |
CR1_START_Së
;

407 
I2Cx
->
CR1
 &
CR1_START_Re£t
;

409 
	}
}

418 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

421 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

422 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

423 i‡(
NewSèã
 !
DISABLE
)

426 
I2Cx
->
CR1
 |
CR1_STOP_Së
;

431 
I2Cx
->
CR1
 &
CR1_STOP_Re£t
;

433 
	}
}

442 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

445 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

446 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

447 i‡(
NewSèã
 !
DISABLE
)

450 
I2Cx
->
CR1
 |
CR1_ACK_Së
;

455 
I2Cx
->
CR1
 &
CR1_ACK_Re£t
;

457 
	}
}

465 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

467 
uöt16_t
 
tm¥eg
 = 0;

470 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

473 
tm¥eg
 = 
I2Cx
->
OAR2
;

476 
tm¥eg
 &
OAR2_ADD2_Re£t
;

479 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

482 
I2Cx
->
OAR2
 = 
tm¥eg
;

483 
	}
}

492 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

495 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

497 i‡(
NewSèã
 !
DISABLE
)

500 
I2Cx
->
OAR2
 |
OAR2_ENDUAL_Së
;

505 
I2Cx
->
OAR2
 &
OAR2_ENDUAL_Re£t
;

507 
	}
}

516 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

519 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

520 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

521 i‡(
NewSèã
 !
DISABLE
)

524 
I2Cx
->
CR1
 |
CR1_ENGC_Së
;

529 
I2Cx
->
CR1
 &
CR1_ENGC_Re£t
;

531 
	}
}

545 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

548 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

549 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

550 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

552 i‡(
NewSèã
 !
DISABLE
)

555 
I2Cx
->
CR2
 |
I2C_IT
;

560 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

562 
	}
}

570 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

573 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

575 
I2Cx
->
DR
 = 
D©a
;

576 
	}
}

583 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

586 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

588  (
uöt8_t
)
I2Cx
->
DR
;

589 
	}
}

601 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

604 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

605 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

607 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

610 
Addªss
 |
OAR1_ADD0_Së
;

615 
Addªss
 &
OAR1_ADD0_Re£t
;

618 
I2Cx
->
DR
 = 
Addªss
;

619 
	}
}

636 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

638 
__IO
 
uöt32_t
 
tmp
 = 0;

641 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

642 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

644 
tmp
 = (
uöt32_t
Ë
I2Cx
;

645 
tmp
 +
I2C_Regi°î
;

648  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

649 
	}
}

658 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

661 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

662 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

663 i‡(
NewSèã
 !
DISABLE
)

666 
I2Cx
->
CR1
 |
CR1_SWRST_Së
;

671 
I2Cx
->
CR1
 &
CR1_SWRST_Re£t
;

673 
	}
}

696 
	$I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
)

699 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

700 
	`as£π_∑øm
(
	`IS_I2C_NACK_POSITION
(
I2C_NACKPosôi⁄
));

703 i‡(
I2C_NACKPosôi⁄
 =
I2C_NACKPosôi⁄_Next
)

706 
I2Cx
->
CR1
 |
I2C_NACKPosôi⁄_Next
;

711 
I2Cx
->
CR1
 &
I2C_NACKPosôi⁄_Cuºít
;

713 
	}
}

724 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

727 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

728 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

729 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

732 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

737 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

739 
	}
}

748 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

751 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

752 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

753 i‡(
NewSèã
 !
DISABLE
)

756 
I2Cx
->
CR1
 |
CR1_PEC_Së
;

761 
I2Cx
->
CR1
 &
CR1_PEC_Re£t
;

763 
	}
}

779 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

782 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

783 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

784 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

787 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

792 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

794 
	}
}

803 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

806 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

807 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

808 i‡(
NewSèã
 !
DISABLE
)

811 
I2Cx
->
CR1
 |
CR1_ENPEC_Së
;

816 
I2Cx
->
CR1
 &
CR1_ENPEC_Re£t
;

818 
	}
}

825 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

828 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

830  ((
I2Cx
->
SR2
) >> 8);

831 
	}
}

840 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

843 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

844 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

845 i‡(
NewSèã
 !
DISABLE
)

848 
I2Cx
->
CR1
 |
CR1_ENARP_Së
;

853 
I2Cx
->
CR1
 &
CR1_ENARP_Re£t
;

855 
	}
}

864 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

867 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

868 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

869 i‡(
NewSèã
 =
DISABLE
)

872 
I2Cx
->
CR1
 |
CR1_NOSTRETCH_Së
;

877 
I2Cx
->
CR1
 &
CR1_NOSTRETCH_Re£t
;

879 
	}
}

890 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

893 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

894 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

895 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

898 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

903 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

905 
	}
}

1030 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

1032 
uöt32_t
 
œ°evít
 = 0;

1033 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1034 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1037 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1038 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

1041 
Êag1
 = 
I2Cx
->
SR1
;

1042 
Êag2
 = 
I2Cx
->
SR2
;

1043 
Êag2
 = flag2 << 16;

1046 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1049 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1052 
°©us
 = 
SUCCESS
;

1057 
°©us
 = 
ERROR
;

1060  
°©us
;

1061 
	}
}

1078 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1080 
uöt32_t
 
œ°evít
 = 0;

1081 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1084 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1087 
Êag1
 = 
I2Cx
->
SR1
;

1088 
Êag2
 = 
I2Cx
->
SR2
;

1089 
Êag2
 = flag2 << 16;

1092 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_Mask
;

1095  
œ°evít
;

1096 
	}
}

1133 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1135 
FœgSètus
 
bô°©us
 = 
RESET
;

1136 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1139 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1140 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1143 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1146 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1149 
I2C_FLAG
 &
FLAG_Mask
;

1151 if(
i2¸eg
 != 0)

1154 
i2cxba£
 += 0x14;

1159 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1161 
i2cxba£
 += 0x18;

1164 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1167 
bô°©us
 = 
SET
;

1172 
bô°©us
 = 
RESET
;

1176  
bô°©us
;

1177 
	}
}

1212 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1214 
uöt32_t
 
Êagpos
 = 0;

1216 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1217 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1219 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_Mask
;

1221 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1222 
	}
}

1246 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1248 
ITSètus
 
bô°©us
 = 
RESET
;

1249 
uöt32_t
 
íabÀ°©us
 = 0;

1252 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1253 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1256 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_Mask
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1259 
I2C_IT
 &
FLAG_Mask
;

1262 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1265 
bô°©us
 = 
SET
;

1270 
bô°©us
 = 
RESET
;

1273  
bô°©us
;

1274 
	}
}

1307 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1309 
uöt32_t
 
Êagpos
 = 0;

1311 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1312 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1314 
Êagpos
 = 
I2C_IT
 & 
FLAG_Mask
;

1316 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1317 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c

23 
	~"°m32f10x_iwdg.h
"

49 
	#KR_KEY_Rñﬂd
 ((
uöt16_t
)0xAAAA)

	)

50 
	#KR_KEY_E«bÀ
 ((
uöt16_t
)0xCCCC)

	)

92 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

95 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

96 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

97 
	}
}

112 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

115 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

116 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

117 
	}
}

125 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

128 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

129 
IWDG
->
RLR
 = 
Rñﬂd
;

130 
	}
}

138 
	$IWDG_RñﬂdCou¡î
()

140 
IWDG
->
KR
 = 
KR_KEY_Rñﬂd
;

141 
	}
}

148 
	$IWDG_E«bÀ
()

150 
IWDG
->
KR
 = 
KR_KEY_E«bÀ
;

151 
	}
}

161 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

163 
FœgSètus
 
bô°©us
 = 
RESET
;

165 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

166 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

168 
bô°©us
 = 
SET
;

172 
bô°©us
 = 
RESET
;

175  
bô°©us
;

176 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c

23 
	~"°m32f10x_pwr.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

53 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

54 
	#DBP_BôNumbî
 0x08

	)

55 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

58 
	#PVDE_BôNumbî
 0x04

	)

59 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

64 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

65 
	#EWUP_BôNumbî
 0x08

	)

66 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

71 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

72 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

112 
	$PWR_DeInô
()

114 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

115 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

116 
	}
}

124 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

127 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

128 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

129 
	}
}

137 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

140 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

141 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

142 
	}
}

158 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

160 
uöt32_t
 
tm¥eg
 = 0;

162 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

163 
tm¥eg
 = 
PWR
->
CR
;

165 
tm¥eg
 &
CR_PLS_MASK
;

167 
tm¥eg
 |
PWR_PVDLevñ
;

169 
PWR
->
CR
 = 
tm¥eg
;

170 
	}
}

178 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

182 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

183 
	}
}

197 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

199 
uöt32_t
 
tm¥eg
 = 0;

201 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

202 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

205 
tm¥eg
 = 
PWR
->
CR
;

207 
tm¥eg
 &
CR_DS_MASK
;

209 
tm¥eg
 |
PWR_Reguœt‹
;

211 
PWR
->
CR
 = 
tm¥eg
;

213 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP
;

216 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

219 
	`__WFI
();

224 
	`__WFE
();

228 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP
);

229 
	}
}

236 
	$PWR_E¡îSTANDBYMode
()

239 
PWR
->
CR
 |
PWR_CR_CWUF
;

241 
PWR
->
CR
 |
PWR_CR_PDDS
;

243 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP
;

245 #i‡
	`deföed
 ( 
__CC_ARM
 )

246 
	`__f‹˚_°‹es
();

249 
	`__WFI
();

250 
	}
}

261 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

263 
FœgSètus
 
bô°©us
 = 
RESET
;

265 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

267 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

269 
bô°©us
 = 
SET
;

273 
bô°©us
 = 
RESET
;

276  
bô°©us
;

277 
	}
}

287 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

290 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

292 
PWR
->
CR
 |
PWR_FLAG
 << 2;

293 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c

23 
	~"°m32f10x_rcc.h
"

47 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

53 
	#HSION_BôNumbî
 0x00

	)

54 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

57 
	#PLLON_BôNumbî
 0x18

	)

58 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

60 #ifde‡
STM32F10X_CL


62 
	#PLL2ON_BôNumbî
 0x1A

	)

63 
	#CR_PLL2ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL2ON_BôNumbî
 * 4))

	)

66 
	#PLL3ON_BôNumbî
 0x1C

	)

67 
	#CR_PLL3ON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLL3ON_BôNumbî
 * 4))

	)

71 
	#CSSON_BôNumbî
 0x13

	)

72 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

77 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x04)

	)

79 #i‚de‡
STM32F10X_CL


80 
	#USBPRE_BôNumbî
 0x16

	)

81 
	#CFGR_USBPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
USBPRE_BôNumbî
 * 4))

	)

83 
	#OTGFSPRE_BôNumbî
 0x16

	)

84 
	#CFGR_OTGFSPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
OTGFSPRE_BôNumbî
 * 4))

	)

90 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x20)

	)

91 
	#RTCEN_BôNumbî
 0x0F

	)

92 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

95 
	#BDRST_BôNumbî
 0x10

	)

96 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

101 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x24)

	)

102 
	#LSION_BôNumbî
 0x00

	)

103 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

105 #ifde‡
STM32F10X_CL


109 
	#CFGR2_OFFSET
 (
RCC_OFFSET
 + 0x2C)

	)

110 
	#I2S2SRC_BôNumbî
 0x11

	)

111 
	#CFGR2_I2S2SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S2SRC_BôNumbî
 * 4))

	)

114 
	#I2S3SRC_BôNumbî
 0x12

	)

115 
	#CFGR2_I2S3SRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
I2S3SRC_BôNumbî
 * 4))

	)

121 
	#CR_HSEBYP_Re£t
 ((
uöt32_t
)0xFFFBFFFF)

	)

122 
	#CR_HSEBYP_Së
 ((
uöt32_t
)0x00040000)

	)

123 
	#CR_HSEON_Re£t
 ((
uöt32_t
)0xFFFEFFFF)

	)

124 
	#CR_HSEON_Së
 ((
uöt32_t
)0x00010000)

	)

125 
	#CR_HSITRIM_Mask
 ((
uöt32_t
)0xFFFFFF07)

	)

128 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

129 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC2FFFF)

	)

131 
	#CFGR_PLL_Mask
 ((
uöt32_t
)0xFFC0FFFF)

	)

134 
	#CFGR_PLLMuŒ_Mask
 ((
uöt32_t
)0x003C0000)

	)

135 
	#CFGR_PLLSRC_Mask
 ((
uöt32_t
)0x00010000)

	)

136 
	#CFGR_PLLXTPRE_Mask
 ((
uöt32_t
)0x00020000)

	)

137 
	#CFGR_SWS_Mask
 ((
uöt32_t
)0x0000000C)

	)

138 
	#CFGR_SW_Mask
 ((
uöt32_t
)0xFFFFFFFC)

	)

139 
	#CFGR_HPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFFFF0F)

	)

140 
	#CFGR_HPRE_Së_Mask
 ((
uöt32_t
)0x000000F0)

	)

141 
	#CFGR_PPRE1_Re£t_Mask
 ((
uöt32_t
)0xFFFFF8FF)

	)

142 
	#CFGR_PPRE1_Së_Mask
 ((
uöt32_t
)0x00000700)

	)

143 
	#CFGR_PPRE2_Re£t_Mask
 ((
uöt32_t
)0xFFFFC7FF)

	)

144 
	#CFGR_PPRE2_Së_Mask
 ((
uöt32_t
)0x00003800)

	)

145 
	#CFGR_ADCPRE_Re£t_Mask
 ((
uöt32_t
)0xFFFF3FFF)

	)

146 
	#CFGR_ADCPRE_Së_Mask
 ((
uöt32_t
)0x0000C000)

	)

149 
	#CSR_RMVF_Së
 ((
uöt32_t
)0x01000000)

	)

151 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

153 
	#CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000)

	)

154 
	#CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000F)

	)

156 #ifde‡
STM32F10X_CL


157 
	#CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0)

	)

158 
	#CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00)

	)

159 
	#CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000)

	)

163 
	#FLAG_Mask
 ((
uöt8_t
)0x1F)

	)

166 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021009)

	)

169 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002100A)

	)

172 
	#CFGR_BYTE4_ADDRESS
 ((
uöt32_t
)0x40021007)

	)

175 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

193 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

194 
__I
 
uöt8_t
 
	gADCPªscTabÀ
[4] = {2, 4, 6, 8};

217 
	$RCC_DeInô
()

220 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

223 #i‚de‡
STM32F10X_CL


224 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

226 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

230 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

233 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

236 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

238 #ifde‡
STM32F10X_CL


240 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

243 
RCC
->
CIR
 = 0x00FF0000;

246 
RCC
->
CFGR2
 = 0x00000000;

247 #ñi‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

249 
RCC
->
CIR
 = 0x009F0000;

252 
RCC
->
CFGR2
 = 0x00000000;

255 
RCC
->
CIR
 = 0x009F0000;

258 
	}
}

270 
	$RCC_HSEC⁄fig
(
uöt32_t
 
RCC_HSE
)

273 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

276 
RCC
->
CR
 &
CR_HSEON_Re£t
;

278 
RCC
->
CR
 &
CR_HSEBYP_Re£t
;

280 
RCC_HSE
)

282 
RCC_HSE_ON
:

284 
RCC
->
CR
 |
CR_HSEON_Së
;

287 
RCC_HSE_By∑ss
:

289 
RCC
->
CR
 |
CR_HSEBYP_Së
 | 
CR_HSEON_Së
;

295 
	}
}

304 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

306 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

307 
Eº‹Sètus
 
°©us
 = 
ERROR
;

308 
FœgSètus
 
HSESètus
 = 
RESET
;

313 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

314 
SèπUpCou¡î
++;

315 } (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
HSESètus
 =
RESET
));

317 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

319 
°©us
 = 
SUCCESS
;

323 
°©us
 = 
ERROR
;

325  (
°©us
);

326 
	}
}

334 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

336 
uöt32_t
 
tm¥eg
 = 0;

338 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

339 
tm¥eg
 = 
RCC
->
CR
;

341 
tm¥eg
 &
CR_HSITRIM_Mask
;

343 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

345 
RCC
->
CR
 = 
tm¥eg
;

346 
	}
}

354 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

358 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

359 
	}
}

378 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
)

380 
uöt32_t
 
tm¥eg
 = 0;

383 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

384 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

386 
tm¥eg
 = 
RCC
->
CFGR
;

388 
tm¥eg
 &
CFGR_PLL_Mask
;

390 
tm¥eg
 |
RCC_PLLSour˚
 | 
RCC_PLLMul
;

392 
RCC
->
CFGR
 = 
tm¥eg
;

393 
	}
}

401 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

404 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

406 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

407 
	}
}

409 #i‡
deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
Ë|| deföed (
STM32F10X_CL
)

426 
	$RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Sour˚
, uöt32_à
RCC_PREDIV1_Div
)

428 
uöt32_t
 
tm¥eg
 = 0;

431 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_PREDIV1_Sour˚
));

432 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1
(
RCC_PREDIV1_Div
));

434 
tm¥eg
 = 
RCC
->
CFGR2
;

436 
tm¥eg
 &~(
CFGR2_PREDIV1
 | 
CFGR2_PREDIV1SRC
);

438 
tm¥eg
 |
RCC_PREDIV1_Sour˚
 | 
RCC_PREDIV1_Div
 ;

440 
RCC
->
CFGR2
 = 
tm¥eg
;

441 
	}
}

444 #ifde‡
STM32F10X_CL


454 
	$RCC_PREDIV2C⁄fig
(
uöt32_t
 
RCC_PREDIV2_Div
)

456 
uöt32_t
 
tm¥eg
 = 0;

459 
	`as£π_∑øm
(
	`IS_RCC_PREDIV2
(
RCC_PREDIV2_Div
));

461 
tm¥eg
 = 
RCC
->
CFGR2
;

463 
tm¥eg
 &~
CFGR2_PREDIV2
;

465 
tm¥eg
 |
RCC_PREDIV2_Div
;

467 
RCC
->
CFGR2
 = 
tm¥eg
;

468 
	}
}

479 
	$RCC_PLL2C⁄fig
(
uöt32_t
 
RCC_PLL2Mul
)

481 
uöt32_t
 
tm¥eg
 = 0;

484 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_PLL2Mul
));

486 
tm¥eg
 = 
RCC
->
CFGR2
;

488 
tm¥eg
 &~
CFGR2_PLL2MUL
;

490 
tm¥eg
 |
RCC_PLL2Mul
;

492 
RCC
->
CFGR2
 = 
tm¥eg
;

493 
	}
}

505 
	$RCC_PLL2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

508 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

510 *(
__IO
 
uöt32_t
 *Ë
CR_PLL2ON_BB
 = (uöt32_t)
NewSèã
;

511 
	}
}

523 
	$RCC_PLL3C⁄fig
(
uöt32_t
 
RCC_PLL3Mul
)

525 
uöt32_t
 
tm¥eg
 = 0;

528 
	`as£π_∑øm
(
	`IS_RCC_PLL3_MUL
(
RCC_PLL3Mul
));

530 
tm¥eg
 = 
RCC
->
CFGR2
;

532 
tm¥eg
 &~
CFGR2_PLL3MUL
;

534 
tm¥eg
 |
RCC_PLL3Mul
;

536 
RCC
->
CFGR2
 = 
tm¥eg
;

537 
	}
}

546 
	$RCC_PLL3Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

550 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

551 *(
__IO
 
uöt32_t
 *Ë
CR_PLL3ON_BB
 = (uöt32_t)
NewSèã
;

552 
	}
}

564 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

566 
uöt32_t
 
tm¥eg
 = 0;

568 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

569 
tm¥eg
 = 
RCC
->
CFGR
;

571 
tm¥eg
 &
CFGR_SW_Mask
;

573 
tm¥eg
 |
RCC_SYSCLKSour˚
;

575 
RCC
->
CFGR
 = 
tm¥eg
;

576 
	}
}

587 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

589  ((
uöt8_t
)(
RCC
->
CFGR
 & 
CFGR_SWS_Mask
));

590 
	}
}

608 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

610 
uöt32_t
 
tm¥eg
 = 0;

612 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

613 
tm¥eg
 = 
RCC
->
CFGR
;

615 
tm¥eg
 &
CFGR_HPRE_Re£t_Mask
;

617 
tm¥eg
 |
RCC_SYSCLK
;

619 
RCC
->
CFGR
 = 
tm¥eg
;

620 
	}
}

634 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

636 
uöt32_t
 
tm¥eg
 = 0;

638 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

639 
tm¥eg
 = 
RCC
->
CFGR
;

641 
tm¥eg
 &
CFGR_PPRE1_Re£t_Mask
;

643 
tm¥eg
 |
RCC_HCLK
;

645 
RCC
->
CFGR
 = 
tm¥eg
;

646 
	}
}

660 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

662 
uöt32_t
 
tm¥eg
 = 0;

664 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

665 
tm¥eg
 = 
RCC
->
CFGR
;

667 
tm¥eg
 &
CFGR_PPRE2_Re£t_Mask
;

669 
tm¥eg
 |
RCC_HCLK
 << 3;

671 
RCC
->
CFGR
 = 
tm¥eg
;

672 
	}
}

700 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

703 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

704 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

705 i‡(
NewSèã
 !
DISABLE
)

708 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

713 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

715 
	}
}

717 #i‚de‡
STM32F10X_CL


728 
	$RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
)

731 
	`as£π_∑øm
(
	`IS_RCC_USBCLK_SOURCE
(
RCC_USBCLKSour˚
));

733 *(
__IO
 
uöt32_t
 *Ë
CFGR_USBPRE_BB
 = 
RCC_USBCLKSour˚
;

734 
	}
}

746 
	$RCC_OTGFSCLKC⁄fig
(
uöt32_t
 
RCC_OTGFSCLKSour˚
)

749 
	`as£π_∑øm
(
	`IS_RCC_OTGFSCLK_SOURCE
(
RCC_OTGFSCLKSour˚
));

751 *(
__IO
 
uöt32_t
 *Ë
CFGR_OTGFSPRE_BB
 = 
RCC_OTGFSCLKSour˚
;

752 
	}
}

766 
	$RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PCLK2
)

768 
uöt32_t
 
tm¥eg
 = 0;

770 
	`as£π_∑øm
(
	`IS_RCC_ADCCLK
(
RCC_PCLK2
));

771 
tm¥eg
 = 
RCC
->
CFGR
;

773 
tm¥eg
 &
CFGR_ADCPRE_Re£t_Mask
;

775 
tm¥eg
 |
RCC_PCLK2
;

777 
RCC
->
CFGR
 = 
tm¥eg
;

778 
	}
}

780 #ifde‡
STM32F10X_CL


792 
	$RCC_I2S2CLKC⁄fig
(
uöt32_t
 
RCC_I2S2CLKSour˚
)

795 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLK_SOURCE
(
RCC_I2S2CLKSour˚
));

797 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S2SRC_BB
 = 
RCC_I2S2CLKSour˚
;

798 
	}
}

811 
	$RCC_I2S3CLKC⁄fig
(
uöt32_t
 
RCC_I2S3CLKSour˚
)

814 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLK_SOURCE
(
RCC_I2S3CLKSour˚
));

816 *(
__IO
 
uöt32_t
 *Ë
CFGR2_I2S3SRC_BB
 = 
RCC_I2S3CLKSour˚
;

817 
	}
}

829 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

832 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

835 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

837 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

839 
RCC_LSE
)

841 
RCC_LSE_ON
:

843 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

846 
RCC_LSE_By∑ss
:

848 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

854 
	}
}

862 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

865 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

866 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

867 
	}
}

879 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

882 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

884 
RCC
->
BDCR
 |
RCC_RTCCLKSour˚
;

885 
	}
}

893 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

896 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

897 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

898 
	}
}

908 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

910 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥esc
 = 0;

912 #ifde‡ 
STM32F10X_CL


913 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

916 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

917 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

921 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_SWS_Mask
;

923 
tmp
)

926 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

929 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

934 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
CFGR_PLLMuŒ_Mask
;

935 
∂lsour˚
 = 
RCC
->
CFGR
 & 
CFGR_PLLSRC_Mask
;

937 #i‚de‡
STM32F10X_CL


938 
∂lmuŒ
 = (Öllmull >> 18) + 2;

940 i‡(
∂lsour˚
 == 0x00)

942 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

946 #i‡
	`deföed
 (
STM32F10X_LD_VL
Ë|| deföed (
STM32F10X_MD_VL
Ë|| deföed (
STM32F10X_HD_VL
)

947 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

949 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

952 i‡((
RCC
->
CFGR
 & 
CFGR_PLLXTPRE_Mask
Ë!(
uöt32_t
)
RESET
)

954 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 >> 1Ë* 
∂lmuŒ
;

958 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
 * 
∂lmuŒ
;

963 
∂lmuŒ
 =Öllmull >> 18;

965 i‡(
∂lmuŒ
 != 0x0D)

967 
∂lmuŒ
 += 2;

971 
∂lmuŒ
 = 13 / 2;

974 i‡(
∂lsour˚
 == 0x00)

976 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

982 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
CFGR2_PREDIV1SRC
;

983 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
CFGR2_PREDIV1
) + 1;

985 i‡(
¥ediv1sour˚
 == 0)

987 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

993 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
CFGR2_PREDIV2
) >> 4) + 1;

994 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
CFGR2_PLL2MUL
) >> 8 ) + 2;

995 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (((
HSE_VALUE
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

1002 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1008 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_HPRE_Së_Mask
;

1009 
tmp
 =Åmp >> 4;

1010 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1012 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1014 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE1_Së_Mask
;

1015 
tmp
 =Åmp >> 8;

1016 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1018 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1020 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_PPRE2_Së_Mask
;

1021 
tmp
 =Åmp >> 11;

1022 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1024 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1026 
tmp
 = 
RCC
->
CFGR
 & 
CFGR_ADCPRE_Së_Mask
;

1027 
tmp
 =Åmp >> 14;

1028 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

1030 
RCC_Clocks
->
ADCCLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
 / 
¥esc
;

1031 
	}
}

1064 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1067 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

1068 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1070 i‡(
NewSèã
 !
DISABLE
)

1072 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

1076 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

1078 
	}
}

1095 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1098 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1099 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1100 i‡(
NewSèã
 !
DISABLE
)

1102 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1106 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1108 
	}
}

1126 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1129 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1130 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1131 i‡(
NewSèã
 !
DISABLE
)

1133 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1137 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1139 
	}
}

1141 #ifde‡
STM32F10X_CL


1153 
	$RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1156 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH_RESET
(
RCC_AHBPîùh
));

1157 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1159 i‡(
NewSèã
 !
DISABLE
)

1161 
RCC
->
AHBRSTR
 |
RCC_AHBPîùh
;

1165 
RCC
->
AHBRSTR
 &~
RCC_AHBPîùh
;

1167 
	}
}

1185 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1188 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1189 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1190 i‡(
NewSèã
 !
DISABLE
)

1192 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1196 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1198 
	}
}

1216 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1219 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1220 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1221 i‡(
NewSèã
 !
DISABLE
)

1223 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1227 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1229 
	}
}

1237 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1240 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1241 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1242 
	}
}

1250 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1253 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1254 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

1255 
	}
}

1282 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCO
)

1285 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCO
));

1288 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE4_ADDRESS
 = 
RCC_MCO
;

1289 
	}
}

1326 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1328 
uöt32_t
 
tmp
 = 0;

1329 
uöt32_t
 
°©u§eg
 = 0;

1330 
FœgSètus
 
bô°©us
 = 
RESET
;

1332 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1335 
tmp
 = 
RCC_FLAG
 >> 5;

1336 i‡(
tmp
 == 1)

1338 
°©u§eg
 = 
RCC
->
CR
;

1340 i‡(
tmp
 == 2)

1342 
°©u§eg
 = 
RCC
->
BDCR
;

1346 
°©u§eg
 = 
RCC
->
CSR
;

1350 
tmp
 = 
RCC_FLAG
 & 
FLAG_Mask
;

1351 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1353 
bô°©us
 = 
SET
;

1357 
bô°©us
 = 
RESET
;

1361  
bô°©us
;

1362 
	}
}

1371 
	$RCC_CÀ¨Fœg
()

1374 
RCC
->
CSR
 |
CSR_RMVF_Së
;

1375 
	}
}

1402 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1404 
ITSètus
 
bô°©us
 = 
RESET
;

1406 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1409 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1411 
bô°©us
 = 
SET
;

1415 
bô°©us
 = 
RESET
;

1419  
bô°©us
;

1420 
	}
}

1448 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1451 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1455 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1456 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c

23 
	~"°m32f10x_πc.h
"

44 
	#RTC_LSB_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

45 
	#PRLH_MSB_MASK
 ((
uöt32_t
)0x000F0000Ë

	)

90 
	$RTC_ITC⁄fig
(
uöt16_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

93 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

94 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

96 i‡(
NewSèã
 !
DISABLE
)

98 
RTC
->
CRH
 |
RTC_IT
;

102 
RTC
->
CRH
 &(
uöt16_t
)~
RTC_IT
;

104 
	}
}

111 
	$RTC_E¡îC⁄figMode
()

114 
RTC
->
CRL
 |
RTC_CRL_CNF
;

115 
	}
}

122 
	$RTC_ExôC⁄figMode
()

125 
RTC
->
CRL
 &(
uöt16_t
)~((uöt16_t)
RTC_CRL_CNF
);

126 
	}
}

133 
uöt32_t
 
	$RTC_GëCou¡î
()

135 
uöt16_t
 
tmp
 = 0;

136 
tmp
 = 
RTC
->
CNTL
;

137  (((
uöt32_t
)
RTC
->
CNTH
 << 16 ) | 
tmp
) ;

138 
	}
}

145 
	$RTC_SëCou¡î
(
uöt32_t
 
Cou¡îVÆue
)

147 
	`RTC_E¡îC⁄figMode
();

149 
RTC
->
CNTH
 = 
Cou¡îVÆue
 >> 16;

151 
RTC
->
CNTL
 = (
Cou¡îVÆue
 & 
RTC_LSB_MASK
);

152 
	`RTC_ExôC⁄figMode
();

153 
	}
}

160 
	$RTC_SëPªsˇÀr
(
uöt32_t
 
PªsˇÀrVÆue
)

163 
	`as£π_∑øm
(
	`IS_RTC_PRESCALER
(
PªsˇÀrVÆue
));

165 
	`RTC_E¡îC⁄figMode
();

167 
RTC
->
PRLH
 = (
PªsˇÀrVÆue
 & 
PRLH_MSB_MASK
) >> 16;

169 
RTC
->
PRLL
 = (
PªsˇÀrVÆue
 & 
RTC_LSB_MASK
);

170 
	`RTC_ExôC⁄figMode
();

171 
	}
}

178 
	$RTC_SëAœrm
(
uöt32_t
 
AœrmVÆue
)

180 
	`RTC_E¡îC⁄figMode
();

182 
RTC
->
ALRH
 = 
AœrmVÆue
 >> 16;

184 
RTC
->
ALRL
 = (
AœrmVÆue
 & 
RTC_LSB_MASK
);

185 
	`RTC_ExôC⁄figMode
();

186 
	}
}

193 
uöt32_t
 
	$RTC_GëDividî
()

195 
uöt32_t
 
tmp
 = 0x00;

196 
tmp
 = ((
uöt32_t
)
RTC
->
DIVH
 & (uint32_t)0x000F) << 16;

197 
tmp
 |
RTC
->
DIVL
;

198  
tmp
;

199 
	}
}

207 
	$RTC_WaôF‹La°Task
()

210 (
RTC
->
CRL
 & 
RTC_FLAG_RTOFF
Ë=(
uöt16_t
)
RESET
)

213 
	}
}

223 
	$RTC_WaôF‹Synchro
()

226 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG_RSF
;

228 (
RTC
->
CRL
 & 
RTC_FLAG_RSF
Ë=(
uöt16_t
)
RESET
)

231 
	}
}

244 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt16_t
 
RTC_FLAG
)

246 
FœgSètus
 
bô°©us
 = 
RESET
;

249 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

251 i‡((
RTC
->
CRL
 & 
RTC_FLAG
Ë!(
uöt16_t
)
RESET
)

253 
bô°©us
 = 
SET
;

257 
bô°©us
 = 
RESET
;

259  
bô°©us
;

260 
	}
}

273 
	$RTC_CÀ¨Fœg
(
uöt16_t
 
RTC_FLAG
)

276 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

279 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_FLAG
;

280 
	}
}

291 
ITSètus
 
	$RTC_GëITSètus
(
uöt16_t
 
RTC_IT
)

293 
ITSètus
 
bô°©us
 = 
RESET
;

295 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

297 
bô°©us
 = (
ITSètus
)(
RTC
->
CRL
 & 
RTC_IT
);

298 i‡(((
RTC
->
CRH
 & 
RTC_IT
Ë!(
uöt16_t
)
RESET
Ë&& (
bô°©us
 != (uint16_t)RESET))

300 
bô°©us
 = 
SET
;

304 
bô°©us
 = 
RESET
;

306  
bô°©us
;

307 
	}
}

318 
	$RTC_CÀ¨ITPídögBô
(
uöt16_t
 
RTC_IT
)

321 
	`as£π_∑øm
(
	`IS_RTC_IT
(
RTC_IT
));

324 
RTC
->
CRL
 &(
uöt16_t
)~
RTC_IT
;

325 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c

23 
	~"°m32f10x_sdio.h
"

24 
	~"°m32f10x_rcc.h
"

40 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

45 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

46 
	#CLKEN_BôNumbî
 0x08

	)

47 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

52 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

53 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

54 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

57 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

58 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

61 
	#NIEN_BôNumbî
 0x0D

	)

62 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

65 
	#ATACMD_BôNumbî
 0x0E

	)

66 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

71 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

72 
	#DMAEN_BôNumbî
 0x03

	)

73 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

76 
	#RWSTART_BôNumbî
 0x08

	)

77 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

80 
	#RWSTOP_BôNumbî
 0x09

	)

81 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

84 
	#RWMOD_BôNumbî
 0x0A

	)

85 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

88 
	#SDIOEN_BôNumbî
 0x0B

	)

89 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

96 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

101 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

106 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

111 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

114 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

161 
	$SDIO_DeInô
()

163 
SDIO
->
POWER
 = 0x00000000;

164 
SDIO
->
CLKCR
 = 0x00000000;

165 
SDIO
->
ARG
 = 0x00000000;

166 
SDIO
->
CMD
 = 0x00000000;

167 
SDIO
->
DTIMER
 = 0x00000000;

168 
SDIO
->
DLEN
 = 0x00000000;

169 
SDIO
->
DCTRL
 = 0x00000000;

170 
SDIO
->
ICR
 = 0x00C007FF;

171 
SDIO
->
MASK
 = 0x00000000;

172 
	}
}

181 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

183 
uöt32_t
 
tm¥eg
 = 0;

186 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

187 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

188 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

189 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

190 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

194 
tm¥eg
 = 
SDIO
->
CLKCR
;

197 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

205 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

206 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

207 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

210 
SDIO
->
CLKCR
 = 
tm¥eg
;

211 
	}
}

219 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

222 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

223 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

224 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

225 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

226 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

227 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

228 
	}
}

235 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

238 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

240 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

241 
	}
}

251 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

254 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

256 
SDIO
->
POWER
 &
PWR_PWRCTRL_MASK
;

257 
SDIO
->
POWER
 |
SDIO_PowîSèã
;

258 
	}
}

269 
uöt32_t
 
	$SDIO_GëPowîSèã
()

271  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

272 
	}
}

307 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

310 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

311 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

313 i‡(
NewSèã
 !
DISABLE
)

316 
SDIO
->
MASK
 |
SDIO_IT
;

321 
SDIO
->
MASK
 &~
SDIO_IT
;

323 
	}
}

331 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

334 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

336 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

337 
	}
}

346 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

348 
uöt32_t
 
tm¥eg
 = 0;

351 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

352 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

353 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

354 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

358 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

362 
tm¥eg
 = 
SDIO
->
CMD
;

364 
tm¥eg
 &
CMD_CLEAR_MASK
;

369 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


370 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

373 
SDIO
->
CMD
 = 
tm¥eg
;

374 
	}
}

382 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

385 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

386 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

387 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

388 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

389 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

390 
	}
}

397 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

399  (
uöt8_t
)(
SDIO
->
RESPCMD
);

400 
	}
}

412 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

414 
__IO
 
uöt32_t
 
tmp
 = 0;

417 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

419 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

421  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

422 
	}
}

431 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

433 
uöt32_t
 
tm¥eg
 = 0;

436 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

437 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

438 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

439 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

440 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

444 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

448 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

452 
tm¥eg
 = 
SDIO
->
DCTRL
;

454 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

459 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


460 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

463 
SDIO
->
DCTRL
 = 
tm¥eg
;

464 
	}
}

472 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

475 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

476 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

477 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

478 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

479 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

480 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

481 
	}
}

488 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

490  
SDIO
->
DCOUNT
;

491 
	}
}

498 
uöt32_t
 
	$SDIO_RódD©a
()

500  
SDIO
->
FIFO
;

501 
	}
}

508 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

510 
SDIO
->
FIFO
 = 
D©a
;

511 
	}
}

518 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

520  
SDIO
->
FIFOCNT
;

521 
	}
}

529 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

532 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

534 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

535 
	}
}

543 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

546 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

548 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

549 
	}
}

559 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

562 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

564 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

565 
	}
}

573 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

576 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

578 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

579 
	}
}

587 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

590 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

592 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

593 
	}
}

601 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

604 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

606 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

607 
	}
}

614 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

617 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

619 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

620 
	}
}

627 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

630 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

632 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

633 
	}
}

666 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

668 
FœgSètus
 
bô°©us
 = 
RESET
;

671 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

673 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

675 
bô°©us
 = 
SET
;

679 
bô°©us
 = 
RESET
;

681  
bô°©us
;

682 
	}
}

704 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

707 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

709 
SDIO
->
ICR
 = 
SDIO_FLAG
;

710 
	}
}

743 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

745 
ITSètus
 
bô°©us
 = 
RESET
;

748 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

749 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

751 
bô°©us
 = 
SET
;

755 
bô°©us
 = 
RESET
;

757  
bô°©us
;

758 
	}
}

779 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

782 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

784 
SDIO
->
ICR
 = 
SDIO_IT
;

785 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c

23 
	~"°m32f10x_•i.h
"

24 
	~"°m32f10x_rcc.h
"

49 
	#CR1_SPE_Së
 ((
uöt16_t
)0x0040)

	)

50 
	#CR1_SPE_Re£t
 ((
uöt16_t
)0xFFBF)

	)

53 
	#I2SCFGR_I2SE_Së
 ((
uöt16_t
)0x0400)

	)

54 
	#I2SCFGR_I2SE_Re£t
 ((
uöt16_t
)0xFBFF)

	)

57 
	#CR1_CRCNext_Së
 ((
uöt16_t
)0x1000)

	)

60 
	#CR1_CRCEN_Së
 ((
uöt16_t
)0x2000)

	)

61 
	#CR1_CRCEN_Re£t
 ((
uöt16_t
)0xDFFF)

	)

64 
	#CR2_SSOE_Së
 ((
uöt16_t
)0x0004)

	)

65 
	#CR2_SSOE_Re£t
 ((
uöt16_t
)0xFFFB)

	)

68 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0x3040)

	)

69 
	#I2SCFGR_CLEAR_Mask
 ((
uöt16_t
)0xF040)

	)

72 
	#SPI_Mode_Sñe˘
 ((
uöt16_t
)0xF7FF)

	)

73 
	#I2S_Mode_Sñe˘
 ((
uöt16_t
)0x0800)

	)

76 
	#I2S2_CLOCK_SRC
 ((
uöt32_t
)(0x00020000))

	)

77 
	#I2S3_CLOCK_SRC
 ((
uöt32_t
)(0x00040000))

	)

78 
	#I2S_MUL_MASK
 ((
uöt32_t
)(0x0000F000))

	)

79 
	#I2S_DIV_MASK
 ((
uöt32_t
)(0x000000F0))

	)

119 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

122 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

124 i‡(
SPIx
 =
SPI1
)

127 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

131 i‡(
SPIx
 =
SPI2
)

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

136 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

140 i‡(
SPIx
 =
SPI3
)

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

148 
	}
}

158 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

160 
uöt16_t
 
tm¥eg
 = 0;

163 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

166 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

167 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

168 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

169 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

170 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

171 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

172 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

173 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

174 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

178 
tm¥eg
 = 
SPIx
->
CR1
;

180 
tm¥eg
 &
CR1_CLEAR_Mask
;

189 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

190 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

191 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

192 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

194 
SPIx
->
CR1
 = 
tm¥eg
;

197 
SPIx
->
I2SCFGR
 &
SPI_Mode_Sñe˘
;

201 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

202 
	}
}

219 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

221 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

222 
uöt32_t
 
tmp
 = 0;

223 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

224 
uöt32_t
 
sour˚˛ock
 = 0;

227 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

228 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

229 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

230 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

231 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

232 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

233 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

237 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_Mask
;

238 
SPIx
->
I2SPR
 = 0x0002;

241 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

244 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

246 
i2sodd
 = (
uöt16_t
)0;

247 
i2sdiv
 = (
uöt16_t
)2;

253 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

256 
∑ckëÀngth
 = 1;

261 
∑ckëÀngth
 = 2;

265 if(((
uöt32_t
)
SPIx
Ë=
SPI2_BASE
)

268 
tmp
 = 
I2S2_CLOCK_SRC
;

273 
tmp
 = 
I2S3_CLOCK_SRC
;

278 #ifde‡
STM32F10X_CL


279 if((
RCC
->
CFGR2
 & 
tmp
) != 0)

282 
tmp
 = (
uöt32_t
)((
RCC
->
CFGR2
 & 
I2S_MUL_MASK
) >> 12);

285 if((
tmp
 > 5) && (tmp < 15))

288 
tmp
 += 2;

292 i‡(
tmp
 == 15)

295 
tmp
 = 20;

299 
sour˚˛ock
 = (
uöt32_t
)(((
RCC
->
CFGR2
 & 
I2S_DIV_MASK
) >> 4) + 1);

302 
sour˚˛ock
 = (
uöt32_t
Ë((
HSE_VÆue
 / sour˚˛ockË* 
tmp
 * 2);

307 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

310 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

314 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

317 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

321 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

324 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

329 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

333 
tmp
 =Åmp / 10;

336 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

339 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

342 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

346 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

349 
i2sdiv
 = 2;

350 
i2sodd
 = 0;

354 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

357 
tm¥eg
 |(
uöt16_t
)(
I2S_Mode_Sñe˘
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

358 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

359 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

362 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

363 
	}
}

370 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

374 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

376 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

378 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

380 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

382 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

384 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

386 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

388 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

390 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

391 
	}
}

398 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

402 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

405 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

408 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

411 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

414 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

417 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

418 
	}
}

427 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

430 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

431 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

432 i‡(
NewSèã
 !
DISABLE
)

435 
SPIx
->
CR1
 |
CR1_SPE_Së
;

440 
SPIx
->
CR1
 &
CR1_SPE_Re£t
;

442 
	}
}

451 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

454 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

455 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

456 i‡(
NewSèã
 !
DISABLE
)

459 
SPIx
->
I2SCFGR
 |
I2SCFGR_I2SE_Së
;

464 
SPIx
->
I2SCFGR
 &
I2SCFGR_I2SE_Re£t
;

466 
	}
}

482 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

486 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

487 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

488 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

491 
ôpos
 = 
SPI_I2S_IT
 >> 4;

494 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

496 i‡(
NewSèã
 !
DISABLE
)

499 
SPIx
->
CR2
 |
ômask
;

504 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

506 
	}
}

521 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

524 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

525 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

526 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

527 i‡(
NewSèã
 !
DISABLE
)

530 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

535 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

537 
	}
}

547 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

550 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

553 
SPIx
->
DR
 = 
D©a
;

554 
	}
}

563 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

566 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

569  
SPIx
->
DR
;

570 
	}
}

581 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

584 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

585 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

586 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

589 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

594 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

596 
	}
}

605 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

608 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

609 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

610 i‡(
NewSèã
 !
DISABLE
)

613 
SPIx
->
CR2
 |
CR2_SSOE_Së
;

618 
SPIx
->
CR2
 &
CR2_SSOE_Re£t
;

620 
	}
}

631 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

634 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

635 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

637 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

639 
SPIx
->
CR1
 |
SPI_D©aSize
;

640 
	}
}

647 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

650 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

653 
SPIx
->
CR1
 |
CR1_CRCNext_Së
;

654 
	}
}

663 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

666 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

667 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

668 i‡(
NewSèã
 !
DISABLE
)

671 
SPIx
->
CR1
 |
CR1_CRCEN_Së
;

676 
SPIx
->
CR1
 &
CR1_CRCEN_Re£t
;

678 
	}
}

689 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

691 
uöt16_t
 
¸¸eg
 = 0;

693 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

694 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

695 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

698 
¸¸eg
 = 
SPIx
->
TXCRCR
;

703 
¸¸eg
 = 
SPIx
->
RXCRCR
;

706  
¸¸eg
;

707 
	}
}

714 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

717 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

720  
SPIx
->
CRCPR
;

721 
	}
}

732 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

735 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

736 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

737 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

740 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

745 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

747 
	}
}

766 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

768 
FœgSètus
 
bô°©us
 = 
RESET
;

770 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

771 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

773 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

776 
bô°©us
 = 
SET
;

781 
bô°©us
 = 
RESET
;

784  
bô°©us
;

785 
	}
}

804 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

807 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

808 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

811 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

812 
	}
}

829 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

831 
ITSètus
 
bô°©us
 = 
RESET
;

832 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

835 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

836 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

839 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

842 
ômask
 = 
SPI_I2S_IT
 >> 4;

845 
ômask
 = 0x01 << itmask;

848 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

851 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

854 
bô°©us
 = 
SET
;

859 
bô°©us
 = 
RESET
;

862  
bô°©us
;

863 
	}
}

883 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

885 
uöt16_t
 
ôpos
 = 0;

887 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

888 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

891 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

894 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

895 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c

23 
	~"°m32f10x_tim.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#SMCR_ETR_Mask
 ((
uöt16_t
)0x00FF)

	)

49 
	#CCMR_Off£t
 ((
uöt16_t
)0x0018)

	)

50 
	#CCER_CCE_Së
 ((
uöt16_t
)0x0001)

	)

51 
	#CCER_CCNE_Së
 ((
uöt16_t
)0x0004)

	)

77 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

78 
uöt16_t
 
TIM_ICFûãr
);

79 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

80 
uöt16_t
 
TIM_ICFûãr
);

81 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

82 
uöt16_t
 
TIM_ICFûãr
);

83 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

84 
uöt16_t
 
TIM_ICFûãr
);

122 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

125 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

127 i‡(
TIMx
 =
TIM1
)

129 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

130 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

132 i‡(
TIMx
 =
TIM2
)

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

135 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

137 i‡(
TIMx
 =
TIM3
)

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

142 i‡(
TIMx
 =
TIM4
)

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

147 i‡(
TIMx
 =
TIM5
)

149 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

150 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

152 i‡(
TIMx
 =
TIM6
)

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

155 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

157 i‡(
TIMx
 =
TIM7
)

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

162 i‡(
TIMx
 =
TIM8
)

164 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

165 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

167 i‡(
TIMx
 =
TIM9
)

169 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

170 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

172 i‡(
TIMx
 =
TIM10
)

174 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

175 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

177 i‡(
TIMx
 =
TIM11
)

179 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

180 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

182 i‡(
TIMx
 =
TIM12
)

184 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

185 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

187 i‡(
TIMx
 =
TIM13
)

189 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

192 i‡(
TIMx
 =
TIM14
)

194 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

195 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

197 i‡(
TIMx
 =
TIM15
)

199 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
ENABLE
);

200 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
DISABLE
);

202 i‡(
TIMx
 =
TIM16
)

204 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
ENABLE
);

205 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
DISABLE
);

209 i‡(
TIMx
 =
TIM17
)

211 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
ENABLE
);

212 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
DISABLE
);

215 
	}
}

226 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

228 
uöt16_t
 
tmp¸1
 = 0;

231 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

232 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

233 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

235 
tmp¸1
 = 
TIMx
->
CR1
;

237 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
)||

238 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

241 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

242 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

245 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

248 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CKD
));

249 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

252 
TIMx
->
CR1
 = 
tmp¸1
;

255 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

258 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

260 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)|| (TIMx =
TIM16
Ë|| (TIMx =
TIM17
))

263 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

268 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

269 
	}
}

279 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

281 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

284 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

285 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

286 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

287 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

289 
TIMx
->
CCER
 &(
uöt16_t
)(~(uöt16_t)
TIM_CCER_CC1E
);

291 
tmpc˚r
 = 
TIMx
->
CCER
;

293 
tmp¸2
 = 
TIMx
->
CR2
;

296 
tmpccmrx
 = 
TIMx
->
CCMR1
;

299 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC1M
));

300 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC1S
));

303 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

306 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1P
));

308 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

311 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

313 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
)||

314 (
TIMx
 =
TIM16
)|| (TIMx =
TIM17
))

316 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

317 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

318 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

319 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

322 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NP
));

324 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

327 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1NE
));

329 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

332 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1
));

333 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS1N
));

336 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

338 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

341 
TIMx
->
CR2
 = 
tmp¸2
;

344 
TIMx
->
CCMR1
 = 
tmpccmrx
;

347 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

350 
TIMx
->
CCER
 = 
tmpc˚r
;

351 
	}
}

362 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

364 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

367 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

368 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

369 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

370 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

372 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2E
));

375 
tmpc˚r
 = 
TIMx
->
CCER
;

377 
tmp¸2
 = 
TIMx
->
CR2
;

380 
tmpccmrx
 = 
TIMx
->
CCMR1
;

383 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC2M
));

384 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC2S
));

387 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

390 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2P
));

392 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

395 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

397 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

399 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

400 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

401 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

402 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

405 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NP
));

407 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

410 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2NE
));

412 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

415 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2
));

416 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS2N
));

419 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

421 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

424 
TIMx
->
CR2
 = 
tmp¸2
;

427 
TIMx
->
CCMR1
 = 
tmpccmrx
;

430 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

433 
TIMx
->
CCER
 = 
tmpc˚r
;

434 
	}
}

444 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

446 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

449 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

450 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

451 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

452 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

454 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3E
));

457 
tmpc˚r
 = 
TIMx
->
CCER
;

459 
tmp¸2
 = 
TIMx
->
CR2
;

462 
tmpccmrx
 = 
TIMx
->
CCMR2
;

465 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC3M
));

466 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC3S
));

468 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

471 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3P
));

473 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

476 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

478 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

480 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

481 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

482 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

483 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

486 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NP
));

488 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

490 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3NE
));

493 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

495 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3
));

496 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS3N
));

498 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

500 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

503 
TIMx
->
CR2
 = 
tmp¸2
;

506 
TIMx
->
CCMR2
 = 
tmpccmrx
;

509 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

512 
TIMx
->
CCER
 = 
tmpc˚r
;

513 
	}
}

523 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

525 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

528 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

529 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

530 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

531 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

533 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4E
));

536 
tmpc˚r
 = 
TIMx
->
CCER
;

538 
tmp¸2
 = 
TIMx
->
CR2
;

541 
tmpccmrx
 = 
TIMx
->
CCMR2
;

544 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC4M
));

545 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_CC4S
));

548 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

551 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4P
));

553 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

556 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

558 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

560 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

562 
tmp¸2
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR2_OIS4
));

564 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

567 
TIMx
->
CR2
 = 
tmp¸2
;

570 
TIMx
->
CCMR2
 = 
tmpccmrx
;

573 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

576 
TIMx
->
CCER
 = 
tmpc˚r
;

577 
	}
}

587 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

590 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_ICInôSåu˘
->
TIM_Ch™√l
));

591 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

592 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

593 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

595 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

596 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

598 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

602 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY_LITE
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

604 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

606 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

608 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

609 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

610 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

612 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

614 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

616 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

618 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

619 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

620 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

622 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

624 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

626 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

628 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

629 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

630 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

632 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

636 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

638 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

639 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

640 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

642 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

644 
	}
}

654 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

656 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

657 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

659 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

661 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

663 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

667 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

670 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

672 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

676 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

678 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

681 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

682 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

684 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

686 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

688 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

693 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

694 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

696 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

698 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

700 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

702 
	}
}

712 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

715 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

716 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

717 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

718 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

719 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

720 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

721 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

724 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

725 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

726 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

727 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

728 
	}
}

736 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

739 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFF;

740 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

741 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

742 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

743 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

744 
	}
}

752 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

755 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

756 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

757 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

758 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x0000;

759 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

760 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

761 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

762 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

763 
	}
}

771 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

774 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

775 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

776 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

777 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

778 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

779 
	}
}

787 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

790 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

791 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

792 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

793 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

794 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

795 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

796 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

797 
	}
}

806 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

809 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

810 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

812 i‡(
NewSèã
 !
DISABLE
)

815 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

820 
TIMx
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
));

822 
	}
}

831 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

834 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

835 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

836 i‡(
NewSèã
 !
DISABLE
)

839 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

844 
TIMx
->
BDTR
 &(
uöt16_t
)(~((uöt16_t)
TIM_BDTR_MOE
));

846 
	}
}

872 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

875 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

876 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

877 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

879 i‡(
NewSèã
 !
DISABLE
)

882 
TIMx
->
DIER
 |
TIM_IT
;

887 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

889 
	}
}

909 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

912 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

913 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

916 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

917 
	}
}

937 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

940 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

941 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

942 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

944 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

945 
	}
}

964 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

967 
	`as£π_∑øm
(
	`IS_TIM_LIST9_PERIPH
(
TIMx
));

968 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

969 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

971 i‡(
NewSèã
 !
DISABLE
)

974 
TIMx
->
DIER
 |
TIM_DMASour˚
;

979 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

981 
	}
}

989 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

992 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

994 
TIMx
->
SMCR
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

995 
	}
}

1008 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1011 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1012 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1014 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

1016 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1017 
	}
}

1035 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1036 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

1039 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1040 
	`as£π_∑øm
(
	`IS_TIM_TIXCLK_SOURCE
(
TIM_TIxExã∫ÆCLKSour˚
));

1041 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

1042 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

1044 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

1046 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1050 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

1053 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

1055 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

1056 
	}
}

1075 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1076 
uöt16_t
 
ExtTRGFûãr
)

1078 
uöt16_t
 
tmpsm¸
 = 0;

1080 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1081 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1082 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1083 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1085 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1088 
tmpsm¸
 = 
TIMx
->
SMCR
;

1090 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1092 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

1094 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1095 
tmpsm¸
 |
TIM_TS_ETRF
;

1097 
TIMx
->
SMCR
 = 
tmpsm¸
;

1098 
	}
}

1117 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1118 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

1121 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1122 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1123 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1124 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1126 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

1128 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

1129 
	}
}

1148 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1149 
uöt16_t
 
ExtTRGFûãr
)

1151 
uöt16_t
 
tmpsm¸
 = 0;

1153 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1154 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

1155 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

1156 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

1157 
tmpsm¸
 = 
TIMx
->
SMCR
;

1159 
tmpsm¸
 &
SMCR_ETR_Mask
;

1161 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

1163 
TIMx
->
SMCR
 = 
tmpsm¸
;

1164 
	}
}

1176 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

1179 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1180 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

1182 
TIMx
->
PSC
 = 
PªsˇÀr
;

1184 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

1185 
	}
}

1199 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

1201 
uöt16_t
 
tmp¸1
 = 0;

1203 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1204 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

1205 
tmp¸1
 = 
TIMx
->
CR1
;

1207 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

1209 
tmp¸1
 |
TIM_Cou¡îMode
;

1211 
TIMx
->
CR1
 = 
tmp¸1
;

1212 
	}
}

1229 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

1231 
uöt16_t
 
tmpsm¸
 = 0;

1233 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1234 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

1236 
tmpsm¸
 = 
TIMx
->
SMCR
;

1238 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

1240 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

1242 
TIMx
->
SMCR
 = 
tmpsm¸
;

1243 
	}
}

1264 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1265 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

1267 
uöt16_t
 
tmpsm¸
 = 0;

1268 
uöt16_t
 
tmpccmr1
 = 0;

1269 
uöt16_t
 
tmpc˚r
 = 0;

1272 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1273 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

1274 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

1275 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

1278 
tmpsm¸
 = 
TIMx
->
SMCR
;

1281 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1284 
tmpc˚r
 = 
TIMx
->
CCER
;

1287 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

1288 
tmpsm¸
 |
TIM_EncodîMode
;

1291 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& (uöt16_t)(~((uöt16_t)
TIM_CCMR1_CC2S
)));

1292 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

1295 
tmpc˚r
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCER_CC1P
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCER_CC2P
)));

1296 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

1299 
TIMx
->
SMCR
 = 
tmpsm¸
;

1301 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1303 
TIMx
->
CCER
 = 
tmpc˚r
;

1304 
	}
}

1315 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1317 
uöt16_t
 
tmpccmr1
 = 0;

1319 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1320 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1321 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1323 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1M
);

1325 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1327 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1328 
	}
}

1339 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1341 
uöt16_t
 
tmpccmr1
 = 0;

1343 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1344 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1345 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1347 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2M
);

1349 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1351 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1352 
	}
}

1363 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1365 
uöt16_t
 
tmpccmr2
 = 0;

1367 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1368 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1369 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1371 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3M
);

1373 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1375 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1376 
	}
}

1387 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1389 
uöt16_t
 
tmpccmr2
 = 0;

1391 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1392 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1393 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1395 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4M
);

1397 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1399 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1400 
	}
}

1409 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1412 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1413 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1414 i‡(
NewSèã
 !
DISABLE
)

1417 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

1422 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_ARPE
);

1424 
	}
}

1433 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1436 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1437 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1438 i‡(
NewSèã
 !
DISABLE
)

1441 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

1446 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCUS
);

1448 
	}
}

1458 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1461 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1462 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1463 i‡(
NewSèã
 !
DISABLE
)

1466 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

1471 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCDS
);

1473 
	}
}

1483 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1486 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

1487 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1488 i‡(
NewSèã
 !
DISABLE
)

1491 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

1496 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCPC
);

1498 
	}
}

1509 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1511 
uöt16_t
 
tmpccmr1
 = 0;

1513 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1514 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1515 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1517 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1PE
);

1519 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1521 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1522 
	}
}

1534 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1536 
uöt16_t
 
tmpccmr1
 = 0;

1538 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1539 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1540 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1542 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2PE
);

1544 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1546 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1547 
	}
}

1558 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1560 
uöt16_t
 
tmpccmr2
 = 0;

1562 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1563 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1564 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1566 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3PE
);

1568 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1570 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1571 
	}
}

1582 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1584 
uöt16_t
 
tmpccmr2
 = 0;

1586 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1587 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1588 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1590 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4PE
);

1592 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1594 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1595 
	}
}

1606 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1608 
uöt16_t
 
tmpccmr1
 = 0;

1610 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1611 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1613 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1615 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1FE
);

1617 
tmpccmr1
 |
TIM_OCFa°
;

1619 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1620 
	}
}

1632 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1634 
uöt16_t
 
tmpccmr1
 = 0;

1636 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1637 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1639 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1641 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2FE
);

1643 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1645 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1646 
	}
}

1657 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1659 
uöt16_t
 
tmpccmr2
 = 0;

1661 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1662 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1664 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1666 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3FE
);

1668 
tmpccmr2
 |
TIM_OCFa°
;

1670 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1671 
	}
}

1682 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1684 
uöt16_t
 
tmpccmr2
 = 0;

1686 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1687 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1689 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1691 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4FE
);

1693 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1695 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1696 
	}
}

1707 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1709 
uöt16_t
 
tmpccmr1
 = 0;

1711 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1712 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1714 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1717 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1CE
);

1719 
tmpccmr1
 |
TIM_OCCÀ¨
;

1721 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1722 
	}
}

1733 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1735 
uöt16_t
 
tmpccmr1
 = 0;

1737 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1738 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1739 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1741 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2CE
);

1743 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1745 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1746 
	}
}

1757 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1759 
uöt16_t
 
tmpccmr2
 = 0;

1761 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1762 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1763 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1765 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3CE
);

1767 
tmpccmr2
 |
TIM_OCCÀ¨
;

1769 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1770 
	}
}

1781 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1783 
uöt16_t
 
tmpccmr2
 = 0;

1785 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1786 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1787 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1789 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4CE
);

1791 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1793 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1794 
	}
}

1805 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1807 
uöt16_t
 
tmpc˚r
 = 0;

1809 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1810 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1811 
tmpc˚r
 = 
TIMx
->
CCER
;

1813 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1P
);

1814 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1816 
TIMx
->
CCER
 = 
tmpc˚r
;

1817 
	}
}

1828 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1830 
uöt16_t
 
tmpc˚r
 = 0;

1832 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1833 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1835 
tmpc˚r
 = 
TIMx
->
CCER
;

1837 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1NP
);

1838 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1840 
TIMx
->
CCER
 = 
tmpc˚r
;

1841 
	}
}

1852 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1854 
uöt16_t
 
tmpc˚r
 = 0;

1856 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

1857 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1858 
tmpc˚r
 = 
TIMx
->
CCER
;

1860 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2P
);

1861 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1863 
TIMx
->
CCER
 = 
tmpc˚r
;

1864 
	}
}

1875 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1877 
uöt16_t
 
tmpc˚r
 = 0;

1879 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1880 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1882 
tmpc˚r
 = 
TIMx
->
CCER
;

1884 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2NP
);

1885 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1887 
TIMx
->
CCER
 = 
tmpc˚r
;

1888 
	}
}

1899 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1901 
uöt16_t
 
tmpc˚r
 = 0;

1903 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1904 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1905 
tmpc˚r
 = 
TIMx
->
CCER
;

1907 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3P
);

1908 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1910 
TIMx
->
CCER
 = 
tmpc˚r
;

1911 
	}
}

1922 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1924 
uöt16_t
 
tmpc˚r
 = 0;

1927 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1928 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1930 
tmpc˚r
 = 
TIMx
->
CCER
;

1932 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3NP
);

1933 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1935 
TIMx
->
CCER
 = 
tmpc˚r
;

1936 
	}
}

1947 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1949 
uöt16_t
 
tmpc˚r
 = 0;

1951 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1952 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1953 
tmpc˚r
 = 
TIMx
->
CCER
;

1955 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4P
);

1956 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1958 
TIMx
->
CCER
 = 
tmpc˚r
;

1959 
	}
}

1974 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1976 
uöt16_t
 
tmp
 = 0;

1979 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

1980 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1981 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1983 
tmp
 = 
CCER_CCE_Së
 << 
TIM_Ch™√l
;

1986 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1989 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1990 
	}
}

2004 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

2006 
uöt16_t
 
tmp
 = 0;

2009 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2010 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

2011 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

2013 
tmp
 = 
CCER_CCNE_Së
 << 
TIM_Ch™√l
;

2016 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

2019 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

2020 
	}
}

2045 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

2047 
uöt32_t
 
tmp
 = 0;

2048 
uöt16_t
 
tmp1
 = 0;

2051 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2052 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

2053 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

2055 
tmp
 = (
uöt32_t
Ë
TIMx
;

2056 
tmp
 +
CCMR_Off£t
;

2058 
tmp1
 = 
CCER_CCE_Së
 << (
uöt16_t
)
TIM_Ch™√l
;

2061 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

2063 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

2065 
tmp
 +(
TIM_Ch™√l
>>1);

2068 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC1M
);

2071 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

2075 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

2078 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC2M
);

2081 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

2083 
	}
}

2092 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2095 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2096 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2097 i‡(
NewSèã
 !
DISABLE
)

2100 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

2105 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_UDIS
);

2107 
	}
}

2120 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

2123 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2124 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

2125 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

2128 
TIMx
->
CR1
 |
TIM_CR1_URS
;

2133 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_URS
);

2135 
	}
}

2144 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2147 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2148 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2149 i‡(
NewSèã
 !
DISABLE
)

2152 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

2157 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_TI1S
);

2159 
	}
}

2170 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

2173 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2174 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

2176 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_OPM
);

2178 
TIMx
->
CR1
 |
TIM_OPMode
;

2179 
	}
}

2202 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2205 
	`as£π_∑øm
(
	`IS_TIM_LIST7_PERIPH
(
TIMx
));

2206 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2208 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_MMS
);

2210 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2211 
	}
}

2225 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2228 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2229 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2231 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_SMS
);

2233 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2234 
	}
}

2246 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2249 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2250 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2252 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_MSM
);

2255 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2256 
	}
}

2264 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Cou¡î
)

2267 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2269 
TIMx
->
CNT
 = 
Cou¡î
;

2270 
	}
}

2278 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Aut‹ñﬂd
)

2281 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2283 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

2284 
	}
}

2292 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª1
)

2295 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2297 
TIMx
->
CCR1
 = 
Com∑ª1
;

2298 
	}
}

2306 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª2
)

2309 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2311 
TIMx
->
CCR2
 = 
Com∑ª2
;

2312 
	}
}

2320 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª3
)

2323 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2325 
TIMx
->
CCR3
 = 
Com∑ª3
;

2326 
	}
}

2334 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
Com∑ª4
)

2337 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2339 
TIMx
->
CCR4
 = 
Com∑ª4
;

2340 
	}
}

2353 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2356 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2357 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2359 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC1PSC
);

2361 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2362 
	}
}

2375 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2378 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2379 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2381 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC2PSC
);

2383 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2384 
	}
}

2397 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2400 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2401 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2403 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC3PSC
);

2405 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2406 
	}
}

2419 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2422 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2423 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2425 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC4PSC
);

2427 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2428 
	}
}

2441 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

2444 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2445 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

2447 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_CKD
);

2449 
TIMx
->
CR1
 |
TIM_CKD
;

2450 
	}
}

2457 
uöt16_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2460 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

2462  
TIMx
->
CCR1
;

2463 
	}
}

2470 
uöt16_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2473 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2475  
TIMx
->
CCR2
;

2476 
	}
}

2483 
uöt16_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2486 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2488  
TIMx
->
CCR3
;

2489 
	}
}

2496 
uöt16_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2499 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2501  
TIMx
->
CCR4
;

2502 
	}
}

2509 
uöt16_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

2512 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2514  
TIMx
->
CNT
;

2515 
	}
}

2522 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

2525 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2527  
TIMx
->
PSC
;

2528 
	}
}

2556 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2558 
ITSètus
 
bô°©us
 = 
RESET
;

2560 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2561 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2563 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2565 
bô°©us
 = 
SET
;

2569 
bô°©us
 = 
RESET
;

2571  
bô°©us
;

2572 
	}
}

2600 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2603 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2604 
	`as£π_∑øm
(
	`IS_TIM_CLEAR_FLAG
(
TIM_FLAG
));

2607 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2608 
	}
}

2632 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2634 
ITSètus
 
bô°©us
 = 
RESET
;

2635 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2637 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2638 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2640 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2642 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2643 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2645 
bô°©us
 = 
SET
;

2649 
bô°©us
 = 
RESET
;

2651  
bô°©us
;

2652 
	}
}

2676 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2679 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2680 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2682 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2683 
	}
}

2701 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2702 
uöt16_t
 
TIM_ICFûãr
)

2704 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

2706 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1E
);

2707 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2708 
tmpc˚r
 = 
TIMx
->
CCER
;

2710 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC1F
)));

2711 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2713 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2714 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2717 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
));

2718 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2723 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
));

2724 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2728 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2729 
TIMx
->
CCER
 = 
tmpc˚r
;

2730 
	}
}

2748 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2749 
uöt16_t
 
TIM_ICFûãr
)

2751 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2753 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2E
);

2754 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2755 
tmpc˚r
 = 
TIMx
->
CCER
;

2756 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

2758 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC2S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC2F
)));

2759 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2760 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2762 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2763 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2766 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
));

2767 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

2772 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
));

2773 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC2E
);

2777 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

2778 
TIMx
->
CCER
 = 
tmpc˚r
;

2779 
	}
}

2797 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2798 
uöt16_t
 
TIM_ICFûãr
)

2800 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2802 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3E
);

2803 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2804 
tmpc˚r
 = 
TIMx
->
CCER
;

2805 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

2807 
tmpccmr2
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR2_CC3S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC3F
)));

2808 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2810 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2811 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2814 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
));

2815 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

2820 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
));

2821 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC3E
);

2825 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2826 
TIMx
->
CCER
 = 
tmpc˚r
;

2827 
	}
}

2845 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2846 
uöt16_t
 
TIM_ICFûãr
)

2848 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2851 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4E
);

2852 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2853 
tmpc˚r
 = 
TIMx
->
CCER
;

2854 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

2856 
tmpccmr2
 &(
uöt16_t
)((uöt16_t)(~(uöt16_t)
TIM_CCMR2_CC4S
Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC4F
)));

2857 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2858 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2860 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM2
Ë|| (TIMx =
TIM3
) ||

2861 (
TIMx
 =
TIM4
Ë||(TIMx =
TIM5
))

2864 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC4P
));

2865 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

2870 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
 | 
TIM_CCER_CC4NP
));

2871 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC4E
);

2874 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2875 
TIMx
->
CCER
 = 
tmpc˚r
;

2876 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c

23 
	~"°m32f10x_ußπ.h
"

24 
	~"°m32f10x_rcc.h
"

47 
	#CR1_UE_Së
 ((
uöt16_t
)0x2000Ë

	)

48 
	#CR1_UE_Re£t
 ((
uöt16_t
)0xDFFFË

	)

50 
	#CR1_WAKE_Mask
 ((
uöt16_t
)0xF7FFË

	)

52 
	#CR1_RWU_Së
 ((
uöt16_t
)0x0002Ë

	)

53 
	#CR1_RWU_Re£t
 ((
uöt16_t
)0xFFFDË

	)

54 
	#CR1_SBK_Së
 ((
uöt16_t
)0x0001Ë

	)

55 
	#CR1_CLEAR_Mask
 ((
uöt16_t
)0xE9F3Ë

	)

56 
	#CR2_Addªss_Mask
 ((
uöt16_t
)0xFFF0Ë

	)

58 
	#CR2_LINEN_Së
 ((
uöt16_t
)0x4000Ë

	)

59 
	#CR2_LINEN_Re£t
 ((
uöt16_t
)0xBFFFË

	)

61 
	#CR2_LBDL_Mask
 ((
uöt16_t
)0xFFDFË

	)

62 
	#CR2_STOP_CLEAR_Mask
 ((
uöt16_t
)0xCFFFË

	)

63 
	#CR2_CLOCK_CLEAR_Mask
 ((
uöt16_t
)0xF0FFË

	)

65 
	#CR3_SCEN_Së
 ((
uöt16_t
)0x0020Ë

	)

66 
	#CR3_SCEN_Re£t
 ((
uöt16_t
)0xFFDFË

	)

68 
	#CR3_NACK_Së
 ((
uöt16_t
)0x0010Ë

	)

69 
	#CR3_NACK_Re£t
 ((
uöt16_t
)0xFFEFË

	)

71 
	#CR3_HDSEL_Së
 ((
uöt16_t
)0x0008Ë

	)

72 
	#CR3_HDSEL_Re£t
 ((
uöt16_t
)0xFFF7Ë

	)

74 
	#CR3_IRLP_Mask
 ((
uöt16_t
)0xFFFBË

	)

75 
	#CR3_CLEAR_Mask
 ((
uöt16_t
)0xFCFFË

	)

77 
	#CR3_IREN_Së
 ((
uöt16_t
)0x0002Ë

	)

78 
	#CR3_IREN_Re£t
 ((
uöt16_t
)0xFFFDË

	)

79 
	#GTPR_LSB_Mask
 ((
uöt16_t
)0x00FFË

	)

80 
	#GTPR_MSB_Mask
 ((
uöt16_t
)0xFF00Ë

	)

81 
	#IT_Mask
 ((
uöt16_t
)0x001FË

	)

84 
	#CR1_OVER8_Së
 ((
u16
)0x8000Ë

	)

85 
	#CR1_OVER8_Re£t
 ((
u16
)0x7FFFË

	)

88 
	#CR3_ONEBITE_Së
 ((
u16
)0x0800Ë

	)

89 
	#CR3_ONEBITE_Re£t
 ((
u16
)0xF7FFË

	)

130 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

133 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

135 i‡(
USARTx
 =
USART1
)

137 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

138 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

140 i‡(
USARTx
 =
USART2
)

142 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

143 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

145 i‡(
USARTx
 =
USART3
)

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

148 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

150 i‡(
USARTx
 =
UART4
)

152 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

157 i‡(
USARTx
 =
UART5
)

159 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

163 
	}
}

176 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

178 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

179 
uöt32_t
 
öãgîdividî
 = 0x00;

180 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

181 
uöt32_t
 
ußπxba£
 = 0;

182 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

184 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

185 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

186 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

187 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

188 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

189 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

190 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

192 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

194 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

197 
ußπxba£
 = (
uöt32_t
)
USARTx
;

200 
tm¥eg
 = 
USARTx
->
CR2
;

202 
tm¥eg
 &
CR2_STOP_CLEAR_Mask
;

205 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

208 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

211 
tm¥eg
 = 
USARTx
->
CR1
;

213 
tm¥eg
 &
CR1_CLEAR_Mask
;

218 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

219 
USART_InôSåu˘
->
USART_Mode
;

221 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

224 
tm¥eg
 = 
USARTx
->
CR3
;

226 
tm¥eg
 &
CR3_CLEAR_Mask
;

229 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

231 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

235 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

236 i‡(
ußπxba£
 =
USART1_BASE
)

238 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

242 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

246 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

249 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

254 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

256 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

259 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

262 i‡((
USARTx
->
CR1
 & 
CR1_OVER8_Së
) != 0)

264 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

268 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

272 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

273 
	}
}

281 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

284 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

285 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

286 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

287 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

288 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

289 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

290 
	}
}

302 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

304 
uöt32_t
 
tm¥eg
 = 0x00;

306 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

307 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

308 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

309 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

310 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

313 
tm¥eg
 = 
USARTx
->
CR2
;

315 
tm¥eg
 &
CR2_CLOCK_CLEAR_Mask
;

321 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

322 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

324 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

325 
	}
}

333 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

336 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

337 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

338 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

339 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

340 
	}
}

351 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

354 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

355 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

357 i‡(
NewSèã
 !
DISABLE
)

360 
USARTx
->
CR1
 |
CR1_UE_Së
;

365 
USARTx
->
CR1
 &
CR1_UE_Re£t
;

367 
	}
}

388 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

390 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

391 
uöt32_t
 
ußπxba£
 = 0x00;

393 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

394 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

395 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

397 i‡(
USART_IT
 =
USART_IT_CTS
)

399 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

402 
ußπxba£
 = (
uöt32_t
)
USARTx
;

405 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

408 
ôpos
 = 
USART_IT
 & 
IT_Mask
;

409 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

411 i‡(
ußπªg
 == 0x01)

413 
ußπxba£
 += 0x0C;

415 i‡(
ußπªg
 == 0x02)

417 
ußπxba£
 += 0x10;

421 
ußπxba£
 += 0x14;

423 i‡(
NewSèã
 !
DISABLE
)

425 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

429 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

431 
	}
}

448 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

451 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

452 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

453 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

454 i‡(
NewSèã
 !
DISABLE
)

458 
USARTx
->
CR3
 |
USART_DMAReq
;

464 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

466 
	}
}

476 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

479 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

480 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

483 
USARTx
->
CR2
 &
CR2_Addªss_Mask
;

485 
USARTx
->
CR2
 |
USART_Addªss
;

486 
	}
}

499 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

502 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

503 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

505 
USARTx
->
CR1
 &
CR1_WAKE_Mask
;

506 
USARTx
->
CR1
 |
USART_WakeUp
;

507 
	}
}

518 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

521 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

522 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

524 i‡(
NewSèã
 !
DISABLE
)

527 
USARTx
->
CR1
 |
CR1_RWU_Së
;

532 
USARTx
->
CR1
 &
CR1_RWU_Re£t
;

534 
	}
}

547 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

550 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

551 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

553 
USARTx
->
CR2
 &
CR2_LBDL_Mask
;

554 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

555 
	}
}

566 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

569 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

570 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

572 i‡(
NewSèã
 !
DISABLE
)

575 
USARTx
->
CR2
 |
CR2_LINEN_Së
;

580 
USARTx
->
CR2
 &
CR2_LINEN_Re£t
;

582 
	}
}

592 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

595 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

596 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

599 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

600 
	}
}

609 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

612 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

615  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

616 
	}
}

625 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

628 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

631 
USARTx
->
CR1
 |
CR1_SBK_Së
;

632 
	}
}

641 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

644 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

647 
USARTx
->
GTPR
 &
GTPR_LSB_Mask
;

649 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

650 
	}
}

661 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

664 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

667 
USARTx
->
GTPR
 &
GTPR_MSB_Mask
;

669 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

670 
	}
}

680 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

683 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

684 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

685 i‡(
NewSèã
 !
DISABLE
)

688 
USARTx
->
CR3
 |
CR3_SCEN_Së
;

693 
USARTx
->
CR3
 &
CR3_SCEN_Re£t
;

695 
	}
}

705 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

708 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

709 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

710 i‡(
NewSèã
 !
DISABLE
)

713 
USARTx
->
CR3
 |
CR3_NACK_Së
;

718 
USARTx
->
CR3
 &
CR3_NACK_Re£t
;

720 
	}
}

731 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

734 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

735 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

737 i‡(
NewSèã
 !
DISABLE
)

740 
USARTx
->
CR3
 |
CR3_HDSEL_Së
;

745 
USARTx
->
CR3
 &
CR3_HDSEL_Re£t
;

747 
	}
}

762 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

765 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

766 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

768 i‡(
NewSèã
 !
DISABLE
)

771 
USARTx
->
CR1
 |
CR1_OVER8_Së
;

776 
USARTx
->
CR1
 &
CR1_OVER8_Re£t
;

778 
	}
}

789 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

792 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

793 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

795 i‡(
NewSèã
 !
DISABLE
)

798 
USARTx
->
CR3
 |
CR3_ONEBITE_Së
;

803 
USARTx
->
CR3
 &
CR3_ONEBITE_Re£t
;

805 
	}
}

818 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

821 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

822 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

824 
USARTx
->
CR3
 &
CR3_IRLP_Mask
;

825 
USARTx
->
CR3
 |
USART_IrDAMode
;

826 
	}
}

837 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

840 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

841 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

843 i‡(
NewSèã
 !
DISABLE
)

846 
USARTx
->
CR3
 |
CR3_IREN_Së
;

851 
USARTx
->
CR3
 &
CR3_IREN_Re£t
;

853 
	}
}

874 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

876 
FœgSètus
 
bô°©us
 = 
RESET
;

878 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

879 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

881 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

883 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

886 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

888 
bô°©us
 = 
SET
;

892 
bô°©us
 = 
RESET
;

894  
bô°©us
;

895 
	}
}

923 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

926 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

927 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

929 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

931 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

934 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

935 
	}
}

956 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

958 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

959 
ITSètus
 
bô°©us
 = 
RESET
;

961 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

962 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

964 i‡(
USART_IT
 =
USART_IT_CTS
)

966 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

970 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

972 
ômask
 = 
USART_IT
 & 
IT_Mask
;

973 
ômask
 = (
uöt32_t
)0x01 << itmask;

975 i‡(
ußπªg
 == 0x01)

977 
ômask
 &
USARTx
->
CR1
;

979 i‡(
ußπªg
 == 0x02)

981 
ômask
 &
USARTx
->
CR2
;

985 
ômask
 &
USARTx
->
CR3
;

988 
bôpos
 = 
USART_IT
 >> 0x08;

989 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

990 
bôpos
 &
USARTx
->
SR
;

991 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

993 
bô°©us
 = 
SET
;

997 
bô°©us
 = 
RESET
;

1000  
bô°©us
;

1001 
	}
}

1030 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1032 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1034 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1035 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1037 i‡(
USART_IT
 =
USART_IT_CTS
)

1039 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1042 
bôpos
 = 
USART_IT
 >> 0x08;

1043 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1044 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1045 
	}
}

	@/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c

23 
	~"°m32f10x_wwdg.h
"

24 
	~"°m32f10x_rcc.h
"

48 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

51 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

52 
	#EWI_BôNumbî
 0x09

	)

53 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

58 
	#CR_WDGA_Së
 ((
uöt32_t
)0x00000080)

	)

61 
	#CFR_WDGTB_Mask
 ((
uöt32_t
)0xFFFFFE7F)

	)

62 
	#CFR_W_Mask
 ((
uöt32_t
)0xFFFFFF80)

	)

63 
	#BIT_Mask
 ((
uöt8_t
)0x7F)

	)

102 
	$WWDG_DeInô
()

104 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

105 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

106 
	}
}

118 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

120 
uöt32_t
 
tm¥eg
 = 0;

122 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

124 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_Mask
;

126 
tm¥eg
 |
WWDG_PªsˇÀr
;

128 
WWDG
->
CFR
 = 
tm¥eg
;

129 
	}
}

137 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

139 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

142 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

145 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_Mask
;

148 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_Mask
;

151 
WWDG
->
CFR
 = 
tm¥eg
;

152 
	}
}

159 
	$WWDG_E«bÀIT
()

161 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

162 
	}
}

170 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

173 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

176 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_Mask
;

177 
	}
}

185 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

188 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

189 
WWDG
->
CR
 = 
CR_WDGA_Së
 | 
Cou¡î
;

190 
	}
}

197 
FœgSètus
 
	$WWDG_GëFœgSètus
()

199  (
FœgSètus
)(
WWDG
->
SR
);

200 
	}
}

207 
	$WWDG_CÀ¨Fœg
()

209 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

210 
	}
}

	@/home/wanbo/workspace/xPSPM-C/main.c

1 
	#USE_STDPERIPH_DRIVER


	)

2 
	~"≠p.h
"

3 
	~"PSPMc⁄figuª.h
"

6 
	$maö
()

8 
ps_£rv™t_t
 
ps_£rv™ts
[8];

9 
ps_èsk_t
 
ps_èsks
[2];

13 
	`ps_duøti⁄_£t_öput
(200);

14 
	`ps_duøti⁄_£t_ouçut
(200);

17 
ps_£rv™ts
[0] = 
	`ps_£rv™t_¸óã
(0, 0, 100, 0, 
NULL
, 
£ns‹1
);

18 
ps_£rv™ts
[1] = 
	`ps_£rv™t_¸óã
(1, 1, 1000, 1,Ös_£rv™ts, 
c⁄åﬁÀr11
);

19 
ps_£rv™ts
[2] = 
	`ps_£rv™t_¸óã
(2, 1, 500, 1,Ös_£rv™ts, 
c⁄åﬁÀr12
);

20 
ps_£rv™ts
[3] = 
	`ps_£rv™t_¸óã
(3, 2, 100, 2,Ös_£rv™ts+1, 
a˘u©‹1
);

23 
ps_£rv™ts
[4] = 
	`ps_£rv™t_¸óã
(4, 0, 100, 0, 
NULL
, 
£ns‹2
);

24 
ps_£rv™ts
[5] = 
	`ps_£rv™t_¸óã
(5, 1, 2000, 1,Ös_£rv™ts+4, 
c⁄åﬁÀr21
);

25 
ps_£rv™ts
[6] = 
	`ps_£rv™t_¸óã
(6, 1, 1500, 1,Ös_£rv™ts+5, 
c⁄åﬁÀr22
);

26 
ps_£rv™ts
[7] = 
	`ps_£rv™t_¸óã
(7, 2, 100, 1,Ös_£rv™ts+6, 
a˘u©‹2
);

30 
ps_èsks
[0] = 
	`ps_èsk_¸óã
(0, 5000, 4, 
ps_£rv™ts
);

31 
ps_èsks
[1] = 
	`ps_èsk_¸óã
(1, 10000, 4, 
ps_£rv™ts
+4);

34 
	`ps_mode_¸óã
(0, 2, 
ps_èsks
);

37 
	`ps_mode_swôch_¸óã
–
mode_swôch1
, 0);

40 
	`sy°em_°¨t
();

42 
	}
}

	@/home/wanbo/workspace/xPSPM-C/plibs/PSPMconfigure.c

1 
	~"PSPMc⁄figuª.h
"

2 
	~"PSPMp‹t.h
"

3 
	~"mode.h
"

5 
¥v_tick_t
 
	gINPUT
;

6 
¥v_tick_t
 
	gOUTPUT
;

9 
	$¥v_time_åiggî
()

11 if–
	`¥v_mode_is_≥riod_íd
() == 1){

12 
	`¥v_mode_swôch
();

15 if(
	`¥v_ef_is_time_to_åiggî
() == 1){

16 
	`¥v_ef_åiggîög
();

18 
	}
}

20 
	$myH¨dw¨eInô
(){

21 
	`öô_Àd
();

22 
	`öô_rs232
();

23 
	`íabÀ_rs232_öãºu±s
();

24 
	`íabÀ_rs232
();

25 
	}
}

27 
	$sy°em_°¨t
()

29 
	`myH¨dw¨eInô
();

30 
	`¥v_ef_¸óã
();

31 
	`¥v_mode_swôch
();

32 
	`p‹t_scheduÀr_°¨t
();

33 
	}
}

35 
	$ps_duøti⁄_£t_öput
(
¥v_tick_t
 
t
)

37 
INPUT
 = 
t
;

38 
	}
}

40 
	$ps_duøti⁄_£t_ouçut
(
¥v_tick_t
 
t
)

42 
OUTPUT
 = 
t
;

43 
	}
}

45 
¥v_tick_t
 
	$¥v_duøti⁄_gë_öput
()

47  
INPUT
;

48 
	}
}

50 
¥v_tick_t
 
	$¥v_duøti⁄_gë_ouçut
()

52  
OUTPUT
;

53 
	}
}

55 
	$myTø˚Cª©e
 (){

56 
	}
}

58 
	$myTø˚SwôchedIn
 (){

59 
	}
}

61 
	$myTø˚SwôchedOut
 (){

62 
	}
}

64 
	$vAµliˇti⁄TickHook
( )

66 
	`¥v_time_åiggî
();

67 
	}
}

69 
	$vAµliˇti⁄IdÀHook
()

71 
	}
}

78 
	$gcd
(
a
, 
b
)

80  
b
 =0?
a
:
	`gcd
(b,a%b);

81 
	}
}

83 
	$lcm
(
a
, 
b
)

85  (
a
*
b
)/
	`gcd
(a,b);

86 
	}
}

90 
	$ôﬂ
(
n
 , *
s
)

92 
i
 = 0;

93 
n
){

94 
s
[
i
++] = 
n
%10 + '0';

95 
n
 /= 10;

97 
s
[
i
] = '\0';

98 
	}
}

	@/home/wanbo/workspace/xPSPM-C/plibs/ef.c

1 
	~"ef.h
"

3 
	sªœti⁄
{

4 
¥v_li°_t
 
	mö
;

5 
¥v_li°_t
 
	mout
;

6 } 
	t¥v_ªœti⁄_t
;

8 
¥v_ªœti⁄_t
 
	gªœti⁄s
[
NUMOFSERVANTS
];

10 
	snode
{

11 
ps_£rv™t_t
 
	m£rv™t
;

12 
¥v_tick_t
 
	mªÀa£
;

14 
node
 * 
	tscheduÀ_node
;

16 
¥v_li°_t
 
	gSTT
[
NUMOFMODES
];

18 
ps_£rv™t_t
 
	gcuºít_£rv™t
;

19 
	g£rv™t_Êags
[
NUMOFSERVANTS
];

20 
	gödegªes
[
NUMOFSERVANTS
];

21 
	gedges
[
NUMOFSERVANTS
][NUMOFSERVANTS];

23 
ps_èsk_t
 
èsks
[
NUMOFTASKS
];

24 
ps_£rv™t_t
 
£rv™ts
[
NUMOFSERVANTS
];

25 
p‹t_£mph_t
 
£m
[
NUMOFSERVANTS
];

26 
mode_¨øy
 
m¨øy
;

28 
¥v_li°_t
 * 
	$¥v_ef_gë_de°_li°
(
ps_£rv™t_t
 
s
)

30  &
ªœti⁄s
[
s
->
sid
].
out
;

31 
	}
}

33 
¥v_li°_t
 * 
	$¥v_ef_gë_§c_li°
(
ps_£rv™t_t
 
s
)

35  &
ªœti⁄s
[
s
->
sid
].
ö
;

36 
	}
}

38 
	$¥v_ef_add_ªœti⁄
(
ps_£rv™t_t
 
§c
,Ös_£rv™t_à
de°
)

40 
	`¥v_li°_ö£π
(
de°
, 
	`¥v_ef_gë_de°_li°
(
§c
));

41 
	`¥v_li°_ö£π
(
§c
, 
	`¥v_ef_gë_§c_li°
(
de°
));

42 
	}
}

44 
	$¥v_ef_£t_cuºít_£rv™t
(
ps_£rv™t_t
 
s
)

46 
cuºít_£rv™t
 = 
s
;

47 
	}
}

49 
ps_£rv™t_t
 
	$¥v_ef_gë_cuºít_£rv™t
()

51  
cuºít_£rv™t
;

52 
	}
}

55 
	$¥v_∑ømëî_öô
()

57 
i
, 
j
;

58  
i
 = 0; i < 
NUMOFSERVANTS
; ++i ){

59 
£rv™t_Êags
[
i
] = -1;

60 
ödegªes
[
i
] = 0;

61  
j
 = 0; j < 
NUMOFSERVANTS
; ++j ){

62 
edges
[
i
][
j
] = 0;

65 
	}
}

68 
	$¥v_ef_edge_add
(
ps_£rv™t_t
 
s
)

70 
i
;

71 
ps_£rv™t_t
 
cuºít
;

72 
¥v_id_t
 
sid
 = 
s
->sid;

74 
£rv™t_Êags
[
sid
] = 1;

76  
i
=0; i<
ªœti⁄s
[
sid
].
ö
.
Àngth
; ++i ){

78 
cuºít
 = (
ps_£rv™t_t
)
	`¥v_li°_gë_cuºít_ítôy
(
	`¥v_ef_gë_§c_li°
(
s
));

79 if(
£rv™t_Êags
[
cuºít
->
sid
] == 1){

80 
edges
[
cuºít
->
sid
][sid] = 1;

83  
i
=0; i<
ªœti⁄s
[
sid
].
out
.
Àngth
; ++i ){

84 
cuºít
 = (
ps_£rv™t_t
)
	`¥v_li°_gë_cuºít_ítôy
(
	`¥v_ef_gë_de°_li°
(
s
));

85 if(
£rv™t_Êags
[
cuºít
->
sid
] == 1){

86 
edges
[
sid
][
cuºít
->sid] = 1;

89 
	}
}

92 
	$¥v_ef_t›ogøph_upd©e_⁄e
(
ps_èsk_t
 
t
)

94 
i
;

95 
ps_£rv™t_t
 
cuºít
;

96 
i
 = 0; i < 
t
->
£rv™ts
->
Àngth
; ++i){

97 
cuºít
 = (
ps_£rv™t_t
)
	`¥v_li°_gë_cuºít_ítôy
(
t
->
£rv™ts
);

98 
	`¥v_ef_edge_add
(
cuºít
);

100 
	}
}

103 
	$¥v_ef_t›ogøph_upd©e
(
ps_mode_t
 
m
)

105 
i
, 
j
;

106 
ps_èsk_t
 
cuºít
;

107 
i
 = 0; i < 
m
->
èsks
->
Àngth
; ++i){

108 
cuºít
 = (
ps_èsk_t
)
	`¥v_li°_gë_cuºít_ítôy
(
m
->
èsks
);

109 if(
	`¥v_modñtime_is_≥riod_°¨t
(
cuºít
) == 1){

110 
	`¥v_ef_t›ogøph_upd©e_⁄e
(
cuºít
);

115  
i
 = 0; i < 
NUMOFSERVANTS
; ++i ){

116 
ödegªes
[
i
] = 0;

119 
i
 = 0; i < 
NUMOFSERVANTS
; ++i){

120 
j
 = 0; j < 
NUMOFSERVANTS
; ++j){

121 if(
edges
[
i
][
j
]){

122 
ödegªes
[
j
]++;

126 
	}
}

129 
	$com∑ª
(* 
s1
, *
s2
)

131 
ps_£rv™t_t
 
a
 = 
s1
;

132 
ps_£rv™t_t
 
b
 = 
s2
;

133 
ps_èsk_t
 
t1
 = 
èsks
[
a
->
tid
];

134 
ps_èsk_t
 
t2
 = 
èsks
[
b
->
tid
];

135 if(
a
->
ty≥
 < 
b
->type){

137 }if(
a
->
ty≥
 =
b
->ty≥ && 
t1
->
Àt
 < 
t2
->let){

139 }if(
a
->
ty≥
 =
b
->ty≥ && 
t1
->
Àt
 =
t2
->Àà&&Å1->
tid
 <Å2->tid){

144 
	}
}

147 
	$¥v_ef_£t_öô
(
¥v_li°_t
 *
S
)

150 
S
->
Àngth
 = 0;

151 
S
->
fú°
 = S->
œ°
 = S->
cuºít
 = 
NULL
;

152 
	}
}

155 
	$¥v_ef_£t_unô_upd©e
(
¥v_li°_t
 *
S
)

157 
i
;

158 
i
 = 0; i < 
NUMOFSERVANTS
; ++i){

160 if(!
ödegªes
[
i
] && 
£rv™t_Êags
[i] == 1){

161 
£rv™t_Êags
[
i
] = -1;

162 
	`¥v_li°_ö£π_s‹ãd
(
£rv™ts
[
i
], 
S
, 
com∑ª
);

165 
	}
}

169 
	$¥v_ef_£t_£rv™t_upd©e
(
ps_£rv™t_t
 
£rv™t
, 
¥v_li°_t
 * 
S
)

171 
i
;

173 
¥v_id_t
 
sid
 = 
£rv™t
->sid;

175 
i
 = 0; i < 
NUMOFSERVANTS
; ++i){

176 if(
edges
[
sid
][
i
]){

177 
ödegªes
[
i
] --;

178 
edges
[
sid
][
i
] = 0;

179 if(!
ödegªes
[
i
] && 
£rv™t_Êags
[i] == 1){

180 
£rv™t_Êags
[
i
] = -1;

181 
	`¥v_li°_ö£π_s‹ãd
(
£rv™ts
[
i
], 
S
, 
com∑ª
);

185 
	}
}

187 
ps_£rv™t_t
 
	$¥v_ef_föd_£rv™t
(
¥v_°y≥_t
 
ty≥
, 
¥v_li°_t
 * 
S
)

189 
i
, 
Àn
;

190 
Àn
 = 
S
->
Àngth
;

191 
ps_£rv™t_t
 
ªsu…
;

192 
¥v_ôem_t
 * 
ödex
;

194 
ödex
 = 
	`¥v_li°_gë_fú°_ôem
(
S
);

195 
i
 = 0; i < 
Àn
; ++i){

196 
ªsu…
 = (
ps_£rv™t_t
)
ödex
->
ítôy
;

197 if(
ªsu…
->
ty≥
 ==Åype){

198 
ödex
 = index->
√xt
;

199 
	`¥v_li°_ªmove
(
ödex
->
¥ev
);

200  
ªsu…
;

202 
ödex
 = index->
√xt
;

205  
NULL
;

206 
	}
}

218 
	$¥v_STT_¸óã
(
ps_mode_t
 
m
)

220 
¥v_id_t
 
mid
 = 
m
->mid;

221 
¥v_li°_t
 * 
èbÀ
 = &
STT
[
mid
];

222 
¥v_li°_t
 
S
;

223 
ps_£rv™t_t
 
tmp_£rv™t
;

224 
¥v_tick_t
 
ªÀa£
;

225 
scheduÀ_node
 
ñem
;

227 
	`¥v_ef_£t_öô
(&
S
);

229 
	`¥v_ef_t›ogøph_upd©e
(
m
);

230 
	`¥v_ef_£t_unô_upd©e
(&
S
);

231 (
tmp_£rv™t
 = 
	`¥v_ef_föd_£rv™t
(0, &
S
)Ë!
NULL
){

233 if–(
ªÀa£
 = 
	`¥v_modñtime_run
(
tmp_£rv™t
)) >= 0 ){

234 
ñem
 = (
scheduÀ_node
)
	`p‹t_mÆloc
((
node
));

235 
ñem
->
£rv™t
 = 
tmp_£rv™t
;

236 
ñem
->
ªÀa£
 =Ñelease;

240 
	`¥v_li°_ö£π
(
ñem
, 
èbÀ
);

241 
	`¥v_ef_£t_£rv™t_upd©e
(
tmp_£rv™t
, &
S
);

244 (
tmp_£rv™t
 = 
	`¥v_ef_föd_£rv™t
(1, &
S
)Ë!
NULL
){

245 if–(
ªÀa£
 = 
	`¥v_modñtime_run
(
tmp_£rv™t
)) >= 0 ){

246 
ñem
 = (
scheduÀ_node
)
	`p‹t_mÆloc
((
node
));

247 
ñem
->
£rv™t
 = 
tmp_£rv™t
;

248 
ñem
->
ªÀa£
 =Ñelease;

252 
£rv™t_Êags
[
tmp_£rv™t
->
sid
] = 1;

255 
	`¥v_li°_ö£π
(
ñem
, 
èbÀ
);

256 
	`¥v_ef_£t_£rv™t_upd©e
(
tmp_£rv™t
, &
S
);

258 (
tmp_£rv™t
 = 
	`¥v_ef_föd_£rv™t
(2, &
S
)Ë!
NULL
){

259 if–(
ªÀa£
 = 
	`¥v_modñtime_run
(
tmp_£rv™t
)) >= 0 ){

260 
ñem
 = (
scheduÀ_node
)
	`p‹t_mÆloc
((
node
));

261 
ñem
->
£rv™t
 = 
tmp_£rv™t
;

262 
ñem
->
ªÀa£
 =Ñelease;

263 
	`¥v_li°_ö£π
(
ñem
, 
èbÀ
);

264 
	`¥v_ef_£t_£rv™t_upd©e
(
tmp_£rv™t
, &
S
);

268 
£rv™t_Êags
[
tmp_£rv™t
->
sid
] = 1;

273 
	`¥v_modñtime_£t_√w_unô_°¨t
();

275 } !
	`¥v_modñtime_is_mode_íd
() );

276 
	}
}

278 
	$¥v_ef_¸óã
()

280 
cou¡
 = 
m¨øy
.
num
;

281 
ps_mode_t
 
m
;

282 
cou¡
--){

283 
m
 = 
m¨øy
.
modes
[
cou¡
];

284 
	`¥v_modñtime_öô
(
m
);

285 
	`¥v_∑ømëî_öô
();

286 
	`¥v_STT_¸óã
(
m
);

288 
	}
}

291 #i‡(
c⁄figUSE_OPTIMIZATION
==0)

293 
	$¥v_ef_is_time_to_åiggî
()

295 
ps_mode_t
 
cuºít_mode
 = 
	`¥v_mode_gë_cuºít_mode
();

296 
¥v_ôem_t
 * 
cuºít_ôem
 = 
	`¥v_li°_gë_cuºít_ôem
(&
STT
[
cuºít_mode
->
mid
]);

297 
scheduÀ_node
 
n
 = (scheduÀ_node)
cuºít_ôem
->
ítôy
;

298 
¥v_tick_t
 
cuºít_time
 = 
	`p‹t_gë_cuºít_time
();

300 if(
cuºít_time
 >
n
->
ªÀa£
 + 
	`¥v_mode_gë_mode°¨t
()){

302 
	`¥v_ef_£t_cuºít_£rv™t
(
n
->
£rv™t
);

305 
	`¥v_li°_£t_cuºít_ôem
(&
STT
[
cuºít_mode
->
mid
]);

306 if(
cuºít_ôem
 =
STT
[
cuºít_mode
->
mid
].
œ°
){

307 
	`¥v_mode_£t_mode°¨t
(
	`¥v_mode_gë_mode°¨t
(Ë+ 
cuºít_mode
->
≥riod
);

313 
	}
}

318 
	$¥v_ef_is_time_to_åiggî
()

320 
ps_mode_t
 
cuºít_mode
 = 
	`¥v_mode_gë_cuºít_mode
();

321 
¥v_ôem_t
 * 
cuºít_ôem
 = 
	`¥v_li°_gë_cuºít_ôem
(&
STT
[
cuºít_mode
->
mid
]);

322 
scheduÀ_node
 
n
 = (scheduÀ_node)
cuºít_ôem
->
ítôy
;

323 
¥v_tick_t
 
cuºít_time
 = 
	`p‹t_gë_cuºít_time
();

326 if(
	`¥v_£rv™t_gë_ty≥
(
n
->
£rv™t
) != 1){

327 if(
cuºít_time
 >
n
->
ªÀa£
 + 
	`¥v_mode_gë_mode°¨t
()){

329 
	`¥v_ef_£t_cuºít_£rv™t
(
n
->
£rv™t
);

332 
	`¥v_li°_£t_cuºít_ôem
(&
STT
[
cuºít_mode
->
mid
]);

333 if(
cuºít_ôem
 =
STT
[
cuºít_mode
->
mid
].
œ°
){

334 
	`¥v_mode_£t_mode°¨t
(
	`¥v_mode_gë_mode°¨t
(Ë+ 
cuºít_mode
->
≥riod
);

343 if(
cuºít_time
 >
	`¥v_mode_gë_mode°¨t
(Ë+ 
	`¥v_duøti⁄_gë_öput
()){

344 
	`¥v_ef_£t_cuºít_£rv™t
(
n
->
£rv™t
);

345 
	`¥v_li°_£t_cuºít_ôem
(&
STT
[
cuºít_mode
->
mid
]);

351 
	}
}

355 
	$¥v_ef_åiggîög
()

357 
	`p‹t_åiggî
(
£m
[
cuºít_£rv™t
->
sid
]);

358 
	}
}

	@/home/wanbo/workspace/xPSPM-C/plibs/event.c

1 
	~"evít.h
"

2 
	~"PSPMp‹t.h
"

3 
	~"ef.h
"

4 
	~"li°_öã∫Æ.h
"

5 
	~"modñtime.h
"

9 
ps_mesßge_t
 
	$ps_mesßge_¸óã
–
d©a
 )

11 
ps_mesßge_t
 
mesßge
 = 
	`p‹t_mÆloc
((message));

13 
ps_£rv™t_t
 
s
 = 
	`¥v_ef_gë_cuºít_£rv™t
();

14 
mesßge
->
sour˚
 = 
s
;

15 
mesßge
->
d©a
 = data;

17  
mesßge
;

18 
	}
}

	@/home/wanbo/workspace/xPSPM-C/plibs/hashtable.c

1 
	~"hashèbÀ.h
"

2 
	~"°rög.h
"

3 
	~"PSPMp‹t.h
"

5 
	#TABLESIZE
 20

	)

7 
	skv
{

8 
kv
 * 
	m√xt
;

9 * 
	mkey
;

10 * 
	mvÆue
;

11 (*
	m‰ì_vÆue
)(*);

15 
	sHashTabÀ
{

16 
	mÀngth
;

17 
kv
 ** 
	mèbÀ
;

20 
	$¥v_hashèbÀ_gë_Àngth
(
HashTabÀ
 * 
ht
){

21  
ht
->
Àngth
;

22 
	}
}

25 
	$öô_kv
(
kv
 * kv)

27 
kv
->
√xt
 = 
NULL
;

28 
kv
->
key
 = 
NULL
;

29 
kv
->
vÆue

NULL
;

30 
kv
->
‰ì_vÆue
 = 
NULL
;

31 
	}
}

33 
	$‰ì_kv
(
kv
 * kv)

35 if(
kv
){

36 if(
kv
->
‰ì_vÆue
){

37 
kv
->
	`‰ì_vÆue
(kv->
vÆue
);

39 
	`p‹t_‰ì
(
kv
->
key
);

40 
kv
->
key
 = 
NULL
;

41 
	`p‹t_‰ì
(
kv
);

42 
kv
 = 
NULL
;

44 
	}
}

46 
	$hash_33
(* 
key
)

48 
hash
 = 5381;

49 
i
;

50  *
key
 ){

51 
hash
 = (hash << 5Ë+ hash + *(
key
++);

54  
hash
%
TABLESIZE
;

55 
	}
}

72 
¥v_hashèbÀ_t
 * 
	$¥v_hashèbÀ_√w
()

74 
¥v_hashèbÀ_t
 * 
ht
 = (¥v_hashèbÀ_à*)
	`p‹t_mÆloc
((
HashTabÀ
));

75 if(
NULL
 =
ht
){

76 
	`¥v_hashèbÀ_dñëe
(
ht
);

77  
NULL
;

79 
ht
->
èbÀ
 = 
	`p‹t_mÆloc
((
kv
 *Ë* 
TABLESIZE
);

80 if(
NULL
 =
ht
->
èbÀ
){

81 
	`¥v_hashèbÀ_dñëe
(
ht
);

82  
NULL
;

84 
	`mem£t
(
ht
->
èbÀ
, 0, (
kv
*)*
TABLESIZE
);

85 
	}
}

87 
	$¥v_hashèbÀ_dñëe
(
¥v_hashèbÀ_t
 *
ht
)

89 if(
ht
){

90 if(
ht
->
èbÀ
){

91 
i
 = 0;

92 ;
i
<
TABLESIZE
;++i){

93 
kv
 *
p
 = 
ht
->
èbÀ
[
i
];

94 
kv
 *
q
 = 
NULL
;

95 
p
){

96 
q
 = 
p
->
√xt
;

97 
	`‰ì_kv
(
p
);

98 
p
=
q
;

101 
	`p‹t_‰ì
(
ht
->
èbÀ
);

102 
ht
->
èbÀ
 = 
NULL
;

105 
	}
}

108 
¥v_hashèbÀ_put
(
¥v_hashèbÀ_t
 *
ht
, *
key
, * 
vÆue
, (*
‰ì_vÆue
)(*))

110 
i
 = 
	`hash_33
(
key
);

111 
kv
 * 
p
 = 
ht
->
èbÀ
[
i
];

112 
kv
 * 
¥ï
 = 
p
;

114 
p
){

115 if(
	`°rcmp
(
p
->
key
, key)==0){

120 
p
->
vÆue
 = value;

124 
¥ï
 = 
p
;

125 
p
 =Ö->
√xt
;

128 if(
p
 =
NULL
){

129 *
k°r
 = 
	`p‹t_mÆloc
(
	`°æí
(
key
) + 1);

130 if(
k°r
 =
NULL
){

133 
kv
 *kv = 
	`p‹t_mÆloc
((kv));

134 if–
NULL
 =
kv
 ){

135 
	`vP‹tFªe
(
k°r
);

136 
k°r
 = 
NULL
;

139 
	`öô_kv
(
kv
);

140 
	`°r˝y
(
k°r
, 
key
);

141 
kv
->
key
 = 
k°r
;

142 
kv
->
vÆue
 = value;

143 
kv
->
‰ì_vÆue
 = 
vP‹tFªe
;

145 if(
¥ï
 =
NULL
){

146 
ht
->
èbÀ
[
i
] = 
kv
;

148 
¥ï
->
√xt
 = 
kv
;

151 
ht
->
Àngth
 ++;

154 
	}
}

157 * 
	$¥v_hashèbÀ_gë
(
¥v_hashèbÀ_t
 *
ht
, *
key
)

159 
i
 = 
	`hash_33
(
key
);

160 
kv
 * 
p
 = 
ht
->
èbÀ
[
i
];

161 
p
){

162 if(
	`°rcmp
(
key
, 
p
->key) == 0){

163  
p
->
vÆue
;

165 
p
 =Ö->
√xt
;

167  
NULL
;

168 
	}
}

171 
	$¥v_hashèbÀ_ªmove
(
¥v_hashèbÀ_t
 *
ht
, *
key
)

173 
i
 = 
	`hash_33
(
key
);

174 
kv
 * 
p
 = 
ht
->
èbÀ
[
i
];

175 
kv
 * 
¥ï
 = 
p
;

176 
p
){

177 if(
	`°rcmp
(
key
, 
p
->key) == 0){

178 if(
p
 =
¥ï
){

179 
ht
->
èbÀ
[
i
] = 
NULL
;

181 
¥ï
->
√xt
 = 
p
->next;

183 
	`‰ì_kv
(
p
);

185 
¥ï
 = 
p
;

186 
p
ı->
√xt
;

188 
	}
}

	@/home/wanbo/workspace/xPSPM-C/plibs/include/PSPMconfigure.h

1 #i‚de‡
__PSEFMCONFIGURE_H


2 
	#__PSEFMCONFIGURE_H


	)

4 
	~"li°_öã∫Æ.h
"

5 
	~"hashèbÀ.h
"

7 
	#NUMOFMODES
 2

8 
	#NUMOFCONDS
 4

9 
	#NUMOFTASKS
 4

10 
	#NUMOFSERVANTS
 
NUMOFMODES
*
NUMOFTASKS
*4

11 
	#NUMOFINS
 4

12 
	#NUMOFRELATIONS
 
NUMOFINS
*
NUMOFSERVANTS


	)

15 
	t¥v_id_t
;

16 
	t¥v_°y≥_t
;

17 
	t¥v_tick_t
;

18 
	t¥v_num_t
;

19 
	tboﬁ
;

23 
ps_duøti⁄_£t_öput
(
¥v_tick_t
 
t
);

24 
ps_duøti⁄_£t_ouçut
(
¥v_tick_t
 
t
);

25 
¥v_tick_t
 
¥v_duøti⁄_gë_öput
();

26 
¥v_tick_t
 
¥v_duøti⁄_gë_ouçut
();

30 
	g£rv™t
;

31 
	gmesßge
;

32 
	g±ask
;

33 
	gmode
;

34 
	gc⁄dôi⁄
;

35 
	gc⁄dôi⁄_¨øy
;

36 
	gmode_¨øy
;

38 
mesßge
 * 
	tps_mesßge_t
;

39 
£rv™t
 * 
	tps_£rv™t_t
;

40 
±ask
 * 
	tps_èsk_t
;

41 
mode
 * 
	tps_mode_t
;

42 
c⁄dôi⁄
 * 
	tps_mode_c⁄dôi⁄_t
;

43 
c⁄dôi⁄_¨øy
 * 
	tps_c⁄dôi⁄_¨øy_t
;

44 
mode_¨øy
 * 
	tps_mode_¨øy_t
;

46 
	s£rv™t
{

47 
¥v_id_t
 
	msid
;

48 
¥v_°y≥_t
 
	mty≥
;

49 
¥v_tick_t
 
	mw˚t
;

50 
¥v_id_t
 
	mtid
;

51 
¥v_hashèbÀ_t
 *
	möbox
;

54 
	smesßge
{

55 
ps_£rv™t_t
 
	msour˚
;

56 
ps_£rv™t_t
 
	mde°ö©i⁄
;

63 
	md©a
;

66 
	s±ask
{

67 
¥v_id_t
 
	mtid
;

68 
¥v_tick_t
 
	mÀt
;

69 
¥v_tick_t
 
	m≥riod
;

70 
¥v_tick_t
 
	mdódlöe
;

71 
¥v_li°_t
 *
	m£rv™ts
;

74 
	smode
{

75 
¥v_id_t
 
	mmid
;

76 
¥v_tick_t
 
	m≥riod
;

77 
¥v_tick_t
 
	munô
;

78 
¥v_li°_t
 *
	mèsks
;

81 
	sc⁄dôi⁄
{

82 
¥v_id_t
 
	mmid
;

83 
boﬁ
 (*
c⁄dôi⁄
)();

86 
	sc⁄dôi⁄_¨øy
{

87 
¥v_num_t
 
	mnum
;

88 
ps_mode_c⁄dôi⁄_t
 
	mc⁄dôi⁄s
[
NUMOFCONDS
];

91 
	smode_¨øy
{

92 
¥v_num_t
 
	mnum
;

93 
ps_mode_t
 
	mmodes
[
NUMOFMODES
];

97 
¥v_time_åiggî
();

99 
myH¨dw¨eInô
();

101 
sy°em_°¨t
();

104 
myTø˚Cª©e
();

106 
myTø˚SwôchedIn
();

108 
myTø˚SwôchedOut
();

111 
vAµliˇti⁄TickHook
( );

113 
vAµliˇti⁄IdÀHook
();

119 
	#m2s
(
m
, 
s
Ë((s*)((*)m - 
	`off£tof
(s,m)))

	)

121 
gcd
(
a
, 
b
);

123 
lcm
(
a
, 
b
);

127 
ôﬂ
(
n
 , *
s
);

	@/home/wanbo/workspace/xPSPM-C/plibs/include/PSPMport.h

1 #i‚de‡
__PSEFMPORT_H


2 
	#__PSEFMPORT_H


	)

4 
	~"FªeRTOS.h
"

5 
	~"èsk.h
"

6 
	~"£mphr.h
"

7 
	~"queue.h
"

12 
	#c⁄figUSE_OPTIMIZATION
 1

	)

14 
	#p‹t_£rv™t_¸óã
(
ru¬abÀ
, 
∑ø
, 
¥io
Ë
	`xTaskCª©e
‘u¬abÀ, 
NULL
, 128,Ö¨a,Örio, NULL)

	)

17 
	#p‹t_£rv™t_yõld
(Ë
	`èskYIELD
()

	)

21 
	#p‹t_waô
(
e
Ë
	`xSem≠h‹eTake
–e, 
p‹tMAX_DELAY
)

	)

22 
	#p‹t_åiggî
(
e
Ë
	`xSem≠h‹eGive
–ê)

	)

24 
	#p‹t_£mph_¸óã
(
e
Ë
	`vSem≠h‹eCª©eBö¨y
”);
	`xSem≠h‹eTake
”, 
p‹tMAX_DELAY
)

	)

25 
	#p‹t_£mph_t
 
xQueueH™dÀ


	)

29 
	#p‹t_gë_cuºít_time
(Ë
	`xTaskGëTickCou¡
()

	)

33 
	#p‹t_mÆloc
(
size
Ë
	`pvP‹tMÆloc
(size)

	)

35 
	#p‹t_‰ì
(
poöãr
Ë
	`vP‹tFªe
’oöãr)

	)

38 
	#p‹t_¥öt
(
°rög
Ë
	`vPrötSåög
((*Ë°rög)

	)

40 
	#p‹t_scheduÀr_°¨t
(Ë
	`vTaskSèπScheduÀr
()

	)

	@/home/wanbo/workspace/xPSPM-C/plibs/include/ef.h

1 #i‚de‡
__EXEC_FLOW_H


2 
	#__EXEC_FLOW_H


	)

4 
	~"PSPMc⁄figuª.h
"

5 
	~"PSPMp‹t.h
"

6 
	~"evít.h
"

7 
	~"mode.h
"

8 
	~"±ask.h
"

9 
	~"£rv™t.h
"

10 
	~"li°_öã∫Æ.h
"

13 
¥v_li°_t
 * 
¥v_ef_gë_de°_li°
(
ps_£rv™t_t
 
s
);

15 
¥v_li°_t
 * 
¥v_ef_gë_§c_li°
(
ps_£rv™t_t
 
s
);

27 
¥v_ef_add_ªœti⁄
(
ps_£rv™t_t
 
§c
,Ös_£rv™t_à
de°
);

40 
ps_£rv™t_t
 
¥v_ef_gë_cuºít_£rv™t
();

41 
¥v_ef_£t_cuºít_£rv™t
(
ps_£rv™t_t
 
s
);

54 
¥v_ef_åiggîög
();

66 
¥v_ef_¸óã
();

69 
¥v_ef_is_time_to_åiggî
();

70 
¥v_ef_c‹outöe_åiggî
();

	@/home/wanbo/workspace/xPSPM-C/plibs/include/event.h

1 #i‚de‡
__EVENT_H


2 
	#__EVENT_H


	)

4 
	~"PSPMc⁄figuª.h
"

5 
	~"PSPMp‹t.h
"

7 
	#¥v_mesßge_gë_d©a
(
e
Ë(–(
ps_mesßge_t
 *Î)->
d©a
)

	)

8 
	#¥v_mesßge_gë_§c
(
e
Ë(–(
ps_mesßge_t
 *Î)->
sour˚
)

	)

9 
	#¥v_mesßge_gë_de°
(
e
Ë(–(
ps_mesßge_t
 *Î)->
de°ö©i⁄
)

	)

12 
ps_mesßge_t
 
ps_mesßge_¸óã
(
d©a
);

	@/home/wanbo/workspace/xPSPM-C/plibs/include/hashtable.h

2 #i‚de‡
__HASHTABLE_H


3 
	#__HASHTABLE_H


	)

5 
	~"li°_öã∫Æ.h
"

7 
HashTabÀ
 
	t¥v_hashèbÀ_t
;

9 
¥v_hashèbÀ_t
 * 
¥v_hashèbÀ_√w
();

11 
¥v_hashèbÀ_dñëe
(
¥v_hashèbÀ_t
 * 
ht
);

13 
	#¥v_hashèbÀ_add
(
ht
,
key
,
vÆue
Ë
	`¥v_hashèbÀ_put
(ht,key,vÆue, 
NULL
)

	)

15 * 
¥v_hashèbÀ_gë
(
¥v_hashèbÀ_t
 * 
ht
, *
key
);

17 
¥v_hashèbÀ_ªmove
(
¥v_hashèbÀ_t
 *
ht
, *
key
);

19 
¥v_hashèbÀ_put
(
¥v_hashèbÀ_t
 *
ht
, *
key
, * 
vÆue
, (*
‰ì_vÆue
)(*));

	@/home/wanbo/workspace/xPSPM-C/plibs/include/list_internal.h

1 #i‚de‡
__LIST_INTERNAL_H


2 
	#__LIST_INTERNAL_H


	)

8 
	sôem
{

9 * 
	mítôy
;

10 * 
	mow√r
;

11 
ôem
 *
	m√xt
;

12 
ôem
 *
	m¥ev
;

13 } 
	t¥v_ôem_t
;

15 
	sli°
{

16 
	mÀngth
;

17 
¥v_ôem_t
 *
	mfú°
;

18 
¥v_ôem_t
 *
	mœ°
;

19 
¥v_ôem_t
 *
	mcuºít
;

20 } 
	t¥v_li°_t
;

24 
	#¥v_li°_gë_Àngth
(
L
Ë(((
¥v_li°_t
 *)L)->
Àngth
)

	)

25 
	#¥v_li°_gë_fú°_ôem
(
L
Ë(((
¥v_li°_t
 *)L)->
fú°
)

	)

26 
	#¥v_li°_gë_œ°_ôem
(
L
Ë(((
¥v_li°_t
 *)L)->
œ°
)

	)

27 
	#¥v_li°_gë_cuºít_ôem
(
L
Ë(((
¥v_li°_t
 *)L)->
cuºít
)

	)

30 
	#¥v_ôem_gë_ítôy
(
ôem
Ë(((
¥v_ôem_t
 *)ôem)->
ítôy
)

	)

31 
	#¥v_ôem_gë_ow√r
(
ôem
Ë(((
¥v_ôem_t
 *)ôem)->
ow√r
)

	)

32 
	#¥v_ôem_gë_√xt
(
ôem
Ë(((
¥v_ôem_t
 *)ôem)->
√xt
)

	)

33 
	#¥v_ôem_gë_¥ev
(
ôem
Ë(((
¥v_ôem_t
 *)ôem)->
¥ev
)

	)

35 
¥v_li°_£t_cuºít_ôem
(
¥v_li°_t
 *);

46 
¥v_li°_öôülize
(
¥v_li°_t
 * 
L
);

47 
¥v_ôem_öôülize
(* 
ítôy
, 
¥v_ôem_t
 * 
ôem
);

49 * 
¥v_li°_gë_cuºít_ítôy
(
¥v_li°_t
 * 
L
);

53 
¥v_li°_ö£π
–* 
ítôy
, 
¥v_li°_t
 * 
L
);

55 
¥v_li°_ö£π_s‹ãd
(* 
ítôy
, 
¥v_li°_t
 * 
L
, (*
com∑ª
)(*, *));

68 
	`¥v_li°_ªmove
(
¥v_ôem_t
 * 
ôem
);

70 * 
	`¥v_li°_p›
(
¥v_li°_t
 * 
L
);

	@/home/wanbo/workspace/xPSPM-C/plibs/include/mode.h

1 #i‚de‡
__MODE_H


2 
	#__MODE_H


	)

4 
	~"PSPMc⁄figuª.h
"

5 
	~"±ask.h
"

6 
	~"evít.h
"

8 
	#¥v_mode_gë_èsk_num
(
mode
Ë(((
ps_mode_t
)mode)->
èsks
.
Àg¡h
)

	)

9 
	#¥v_mode_gë_≥riod
(
mode
Ë(((
ps_mode_t
)mode)->
≥riod
)

	)

10 
	#¥v_mode_gë_unô
(
mode
Ë(((
ps_mode_t
)mode)->
unô
)

	)

11 
	#¥v_mode_gë_èsks
(
mode
Ë(((
ps_mode_t
)mode)->
èsks
)

	)

22 
ps_mode_¸óã
(
¥v_id_t
 
mid
, 
¥v_num_t
 
num
, 
ps_èsk_t
 
èsk_¨øy
[]);

35 
ps_mode_swôch_¸óã
(
	$boﬁ
 (*
c⁄dôi⁄
)(), 
¥v_id_t
 
mode_de°
);

48 
	`¥v_mode_swôch
();

60 
ps_mode_t
 
	`¥v_mode_gë_cuºít_mode
();

63 
¥v_tick_t
 
	`¥v_mode_gë_mode°¨t
();

66 
	`¥v_mode_£t_mode°¨t
(
¥v_tick_t
 
t
);

68 
	`¥v_mode_is_≥riod_íd
();

70 
	`ps_duøti⁄_£t_öput
(
¥v_tick_t
 
t
);

72 
	`ps_duøti⁄_£t_ouçut
(
¥v_tick_t
 
t
);

74 
¥v_tick_t
 
	`¥v_duøti⁄_gë_öput
();

76 
¥v_tick_t
 
	`¥v_duøti⁄_gë_ouçut
();

	@/home/wanbo/workspace/xPSPM-C/plibs/include/modeltime.h

1 #i‚de‡
__MODEL_TIME_H


2 
	#__MODEL_TIME_H


	)

4 
	~"PSPMc⁄figuª.h
"

5 
	~"mode.h
"

7 
¥v_modñtime_öô
(
ps_mode_t
 
m
);

10 
¥v_tick_t
 
¥v_modñtime_unô_°¨t
();

11 
¥v_tick_t
 
¥v_modñtime_compuã_°¨t
();

12 
¥v_tick_t
 
¥v_modñtime_ouçut_°¨t
();

13 
¥v_tick_t
 
¥v_modñtime_unô_íd
();

16 
¥v_tick_t
 
¥v_modñtime_run
(
ps_£rv™t_t
 
s
);

18 
¥v_modñtime_£t_√w_unô_°¨t
();

20 
boﬁ
 
¥v_modñtime_is_mode_íd
();

21 
boﬁ
 
¥v_modñtime_is_≥riod_°¨t
(
ps_èsk_t
 
t
);

	@/home/wanbo/workspace/xPSPM-C/plibs/include/ptask.h

1 #i‚de‡
__TASK_H


2 
	#__TASK_H


	)

4 
	~"£rv™t.h
"

20 
	#¥v_èsk_gë_id
(
t
Ë(–(
p_èsk_t
È)->
tid
)

	)

21 
	#¥v_èsk_gë_Àt
(
t
Ë(–(
p_èsk_t
È)->
Àt
)

	)

22 
	#¥v_èsk_gë_≥riod
(
t
Ë(–(
p_èsk_t
È)->
≥riod
)

	)

23 
	#¥v_èsk_gë_dódlöe
(
t
Ë(–(
p_èsk_t
È)->
dódlöe
)

	)

24 
	#¥v_èsk_gë_£rv™t_num
(
t
Ë(–(
p_èsk_t
È)->
£rv™ts
->
Àngth
)

	)

36 
ps_èsk_t
 
ps_èsk_¸óã
(
¥v_id_t
 
tid
,

37 
¥v_tick_t
 
Àt
,

38 
¥v_num_t
 
num
,

39 
ps_£rv™t_t
 
£rv™ts
[]);

	@/home/wanbo/workspace/xPSPM-C/plibs/include/servant.h

1 #i‚de‡
__SERVANT_H


2 
	#__SERVANT_H


	)

4 
	~"PSPMc⁄figuª.h
"

5 
	~"PSPMp‹t.h
"

6 
	~"li°_öã∫Æ.h
"

7 
	~"hashèbÀ.h
"

8 
	~"ef.h
"

26 
	#¥v_£rv™t_gë_id
(
s
Ë(((
ps_£rv™t_t
)s)->
sid
)

	)

27 
	#¥v_£rv™t_gë_w˚t
(
s
Ë(((
ps_£rv™t_t
)s)->
w˚t
)

	)

28 
	#¥v_£rv™t_gë_ty≥
(
s
Ë(((
ps_£rv™t_t
)s)->
ty≥
)

	)

29 
	#¥v_£rv™t_gë_èsk
(
s
Ë(((
ps_£rv™t_t
)s)->
tid
)

	)

30 
	#¥v_£rv™t_gë_öbox
(
s
Ë(((
ps_£rv™t_t
)s)->
öbox
)

	)

51 
ps_£rv™t_t
 
ps_£rv™t_¸óã
–
¥v_id_t
 
sid
,

52 
¥v_°y≥_t
 
ty≥
,

53 
¥v_tick_t
 
w˚t
,

54 
¥v_num_t
 
num
,

55 
ps_£rv™t_t
 
§c_¨øy
[],

56 (*
ru¬abÀ
)(*));

68 
	`ps_£rv™t_wake
–
ps_£rv™t_t
 * 
s
);

81 
	`ps_£rv™t_waô
(
¥v_id_t
 
sid
);

94 
	`ps_£rv™t_£nd
(
¥v_id_t
 
sid
, 
d©a
, 
ps_mesßge_t
 
msg
);

106 
	`ps_£rv™t_ª˚ive
(
¥v_id_t
 
sid
);

108 
	`ps_£rv™t_gë§˙um
();

111 
	`ps_£rv™t_gë§csid
(
ödex
);

113 
	`ps_£rv™t_gëde°num
();

115 
	`ps_£rv™t_gëde°sid
(
ödex
);

	@/home/wanbo/workspace/xPSPM-C/plibs/list_internal.c

1 
	~"li°_öã∫Æ.h
"

2 
	~"PSPMc⁄figuª.h
"

3 
	~"PSPMp‹t.h
"

6 
	$¥v_li°_öôülize
(
¥v_li°_t
 * 
L
)

8 
L
->
Àngth
 = 0;

9 
L
->
fú°
 = L->
œ°
 = L->
cuºít
 = 
NULL
;

10 
	}
}

12 
	$¥v_ôem_öôülize
(* 
ítôy
, 
¥v_ôem_t
 * 
ôem
)

14 
ôem
->
ítôy
=Éntity;

15 
ôem
->
ow√r
 = 
NULL
;

16 
ôem
->
√xt
 = 
NULL
;

17 
ôem
->
¥ev
 = 
NULL
;

18 
	}
}

20 
	$¥v_li°_£t_cuºít_ôem
(
¥v_li°_t
 * 
l
)

22 
l
->
cuºít
 =Ü->cuºít->
√xt
;

23 
	}
}

25 * 
	$¥v_li°_gë_cuºít_ítôy
(
¥v_li°_t
 * 
L
)

27 * 
s
 = ((
¥v_li°_t
 *)
L
)->
cuºít
->
ítôy
;

28 ((
¥v_li°_t
 *)
L
)->
cuºít
 = (’rv_li°_à*)L)->cuºít->
√xt
;

30  
s
;

31 
	}
}

33 
	$¥v_li°_ö£π
–* 
ítôy
, 
¥v_li°_t
 * 
L
)

35 
¥v_ôem_t
 * 
ôem
 = (¥v_ôem_t*)
	`p‹t_mÆloc
((prv_item_t));

36 
	`¥v_ôem_öôülize
(
ítôy
, 
ôem
);

38 if(
L
->
Àngth
 == 0){

39 
L
->
fú°
 = L->
œ°
 = L->
cuºít

ôem
;

40 
ôem
->
¥ev
 = item;

41 
ôem
->
√xt
 = item;

43 
L
->
œ°
->
√xt
 = 
ôem
;

44 
L
->
fú°
->
¥ev
 = 
ôem
;

46 
ôem
->
¥ev
 = 
L
->
œ°
;

47 
ôem
->
√xt
 = 
L
->
fú°
;

48 
L
->
œ°
 = 
ôem
;

52 
L
->
Àngth
 ++;

53 
ôem
->
ow√r
 = (*)
L
;

54 
	}
}

57 
¥v_li°_ö£π_s‹ãd
(* 
ítôy
, 
¥v_li°_t
 * 
L
, (*
com∑ª
)(*, *))

59 vﬁ©ûê
¥v_ôem_t
 * 
pIndex
;

60 
i
;

61 
Àn
 = 
	`¥v_li°_gë_Àngth
(
L
);

63 
¥v_ôem_t
 * 
ôem
 = (¥v_ôem_t*)
	`p‹t_mÆloc
((prv_item_t));

64 
	`¥v_ôem_öôülize
(
ítôy
, 
ôem
);

66 if(
Àn
 == 0){

67 
L
->
fú°
 = L->
œ°
 = L->
cuºít
 = 
ôem
;

68 
ôem
->
¥ev
 = item;

69 
ôem
->
√xt
 = item;

71 
pIndex
 = 
	`¥v_li°_gë_fú°_ôem
(
L
);

72  
i
 = 0; i < 
Àn
; ++i, 
pIndex
 = 
	`¥v_ôem_gë_√xt
(pIndex)){

73 if(1 =
	`com∑ª
(
ítôy
, 
	`¥v_ôem_gë_ítôy
(
pIndex
))){

74 if–
i
 == 0 ){

75 
L
->
fú°
 = 
ôem
;

80 if–
i
 =
Àn
 ){

81 
L
->
œ°
 = 
ôem
;

83 
ôem
->
√xt
 = (
¥v_ôem_t
 *)
pIndex
;

84 
ôem
->
¥ev
 = 
pIndex
->prev;

85 
pIndex
->
¥ev
->
√xt
 = 
ôem
;

86 
pIndex
->
¥ev
 = 
ôem
;

89 
L
->
Àngth
 ++;

90 
ôem
->
ow√r
 = (*)
L
;

91 
	}
}

94 
	$¥v_li°_ªmove
(
¥v_ôem_t
 * 
ôem
)

96 
¥v_li°_t
 * 
L
 = (¥v_li°_à*)
ôem
->
ow√r
;

98 if(
L
->
Àngth
 == 0){

103 if(
L
->
Àngth
 == 1){

104 
L
->
fú°
 = 
NULL
;

105 
L
->
œ°
 = 
NULL
;

106 
L
->
cuºít
 = 
NULL
;

108 if(
ôem
 =
	`¥v_li°_gë_fú°_ôem
(
L
)){

109 
L
->
fú°
 = 
ôem
->
√xt
;

111 if(
ôem
 =
	`¥v_li°_gë_œ°_ôem
(
L
)){

112 
L
->
œ°
 = 
ôem
->
¥ev
;

114 
ôem
->
¥ev
->
√xt
 = item->next;

115 
ôem
->
√xt
->
¥ev
 = item->prev;

118 
	`p‹t_‰ì
(
ôem
);

119 
ôem
 = 
NULL
;

120 
L
->
Àngth
 --;

121 
	}
}

125 * 
	$¥v_li°_p›
(
¥v_li°_t
 * 
L
)

127 if(
L
->
Àngth
 == 0){

128  
NULL
;

131 * 
ítôy
 = 
L
->
fú°
->entity;

132 
	`¥v_li°_ªmove
(
L
->
fú°
);

134  
ítôy
;

135 
	}
}

	@/home/wanbo/workspace/xPSPM-C/plibs/mode.c

1 
	~"mode.h
"

6 
mode_¨øy
 
	gm¨øy
;

7 
c⁄dôi⁄_¨øy
 
	gˇºay
;

9 
¥v_tick_t
 
	gmode°¨t
;

10 
ps_mode_t
 
	gcuºít_mode
;

12 
ps_mode_t
 
	$¥v_mode_gë_cuºít_mode
()

14  
cuºít_mode
;

15 
	}
}

17 
¥v_tick_t
 
	$¥v_mode_gë_mode°¨t
()

19  
mode°¨t
;

20 
	}
}

22 
	$¥v_mode_£t_mode°¨t
(
¥v_tick_t
 
t
)

25 
mode°¨t
 = 
t
;

26 
	}
}

28 
	$¥v_mode_is_≥riod_íd
()

30 
¥v_tick_t
 
ªÆtime
 = 
	`p‹t_gë_cuºít_time
();

31 if(
ªÆtime
 =
	`¥v_mode_gë_≥riod
(
cuºít_mode
Ë+ 
mode°¨t
){

36 
	}
}

38 
	$ps_mode_¸óã
(
¥v_id_t
 
mid
, 
¥v_num_t
 
num
, 
ps_èsk_t
 
èsk_¨øy
[])

40 
i
;

41 
i_gcd
 = 0 , 
i_lcm
 = 1;

42 
m¨øy
.
modes
[
mid
] = (
ps_mode_t
)
	`p‹t_mÆloc
((
mode
));

43 
m¨øy
.
modes
[
mid
]->
èsks
 = (
¥v_li°_t
 *)
	`p‹t_mÆloc
((
li°
));

45 
m¨øy
.
modes
[
mid
]->mid = mid;

46 
i
=0;i<
num
;++i){

47 
	`¥v_li°_ö£π
(
èsk_¨øy
[
i
], 
m¨øy
.
modes
[
mid
]->
èsks
);

48 
i_gcd
 = 
	`gcd
(
èsk_¨øy
[
i
]->
≥riod
, i_gcd);

49 
i_lcm
 = 
	`lcm
(
èsk_¨øy
[
i
]->
≥riod
, i_lcm);

52 
m¨øy
.
modes
[
mid
]->
≥riod
 = 
i_lcm
;

53 
m¨øy
.
modes
[
mid
]->
unô
 = 
i_gcd
;

55 
m¨øy
.
num
 ++;

56 
	}
}

59 
ps_mode_swôch_¸óã
(
	$boﬁ
 (*
c⁄dôi⁄
)(), 
¥v_id_t
 
èrgë
)

61 
num
 = 
ˇºay
.num;

62 
ˇºay
.
c⁄dôi⁄s
[
num
] = (
ps_mode_c⁄dôi⁄_t
)
	`p‹t_mÆloc
((
c⁄dôi⁄
));

63 
ˇºay
.
c⁄dôi⁄s
[
num
]->
mid

èrgë
;

64 
ˇºay
.
c⁄dôi⁄s
[
num
]->
c⁄dôi⁄
 = condition;

65 
ˇºay
.
num
 ++;

66 
	}
}

69 
	$¥v_mode_swôch
()

71 
i
, 
tmp
;

72  
i
 = 0; i < 
ˇºay
.
num
; ++i ){

73 if–(
tmp
 = 
ˇºay
.
c⁄dôi⁄s
[
i
]->
	`c⁄dôi⁄
()) == 1){

74 
cuºít_mode
 = 
m¨øy
.
modes
[
ˇºay
.
c⁄dôi⁄s
[
i
]->
mid
];

79 
cuºít_mode
 = 
m¨øy
.
modes
[0];

81 
	}
}

	@/home/wanbo/workspace/xPSPM-C/plibs/modeltime.c

1 
	~"modñtime.h
"

3 
¥v_tick_t
 
	gmode°¨t
;

4 
¥v_tick_t
 
	gmodñtime
;

5 
ps_mode_t
 
	gcuºít_mode
;

6 
ps_èsk_t
 
èsks
[
NUMOFTASKS
];

8 
	$¥v_modñtime_öô
(
ps_mode_t
 
m
)

10 
cuºít_mode
 = 
m
;

11 
mode°¨t
 = 0;

12 
modñtime
 = 0;

13 
	}
}

15 
¥v_tick_t
 
	$¥v_modñtime_unô_°¨t
()

19  
modñtime
 - (modñtimê- 
mode°¨t
 - 1)%(
	`¥v_mode_gë_unô
(
cuºít_mode
)) - 1;

20 
	}
}

22 
¥v_tick_t
 
	$¥v_modñtime_compuã_°¨t
()

24  
	`¥v_modñtime_unô_°¨t
(Ë+ 
	`¥v_duøti⁄_gë_öput
();

25 
	}
}

27 
¥v_tick_t
 
	$¥v_modñtime_ouçut_°¨t
()

29  
	`¥v_modñtime_unô_°¨t
(Ë+ 
	`¥v_mode_gë_unô
(
cuºít_mode
Ë- 
	`¥v_duøti⁄_gë_ouçut
();

30 
	}
}

32 
¥v_tick_t
 
	$¥v_modñtime_unô_íd
()

34  
	`¥v_modñtime_ouçut_°¨t
(Ë+ 
	`¥v_duøti⁄_gë_ouçut
();

35 
	}
}

38 
¥v_tick_t
 
	$¥v_modñtime_run
(
ps_£rv™t_t
 
s
 )

40 
¥v_tick_t
 
ªÀa£
;

41 if(
s
->
ty≥
 == 0){

43 
ªÀa£
 = 
modñtime
;

44 
modñtime
 +
s
->
w˚t
;

45 }if(
s
->
ty≥
 == 1){

46 if(
modñtime
 < 
	`¥v_modñtime_compuã_°¨t
()){

47 
modñtime
 = 
	`¥v_modñtime_compuã_°¨t
();

48 
ªÀa£
 = 
modñtime
;

50 if(
modñtime
 + 
s
->
w˚t
 <
	`¥v_modñtime_ouçut_°¨t
()){

51 
ªÀa£
 = 
modñtime
;

52 
modñtime
 +
s
->
w˚t
;

57 if(
modñtime
 < 
	`¥v_modñtime_ouçut_°¨t
()){

58 
modñtime
 = 
	`¥v_modñtime_ouçut_°¨t
();

60 if(0 =(
	`¥v_modñtime_ouçut_°¨t
(Ë+ 
	`¥v_duøti⁄_gë_ouçut
()Ë% 
èsks
[
s
->
tid
]->
≥riod
){

61 
ªÀa£
 = 
modñtime
;

62 
modñtime
 +
s
->
w˚t
;

64 
ªÀa£
 = -1;

67  
ªÀa£
;

68 
	}
}

72 
	$¥v_modñtime_£t_√w_unô_°¨t
()

74 
modñtime
 = 
	`¥v_modñtime_unô_íd
();

75 
	}
}

77 
boﬁ
 
	$¥v_modñtime_is_mode_íd
()

79 if(
modñtime
 =
mode°¨t
 + 
	`¥v_mode_gë_≥riod
(
cuºít_mode
)){

84 
	}
}

86 
boﬁ
 
	$¥v_modñtime_is_≥riod_°¨t
(
ps_èsk_t
 
t
)

88 if–(
modñtime
 - 
mode°¨t
Ë% 
t
->
≥riod
 == 0){

93 
	}
}

	@/home/wanbo/workspace/xPSPM-C/plibs/ptask.c

1 
	~"±ask.h
"

2 
	~"ef.h
"

3 
	~"PSPMc⁄figuª.h
"

4 
	~"PSPMp‹t.h
"

6 
ps_èsk_t
 
	gèsks
[
NUMOFTASKS
];

8 
ps_èsk_t
 
	$ps_èsk_¸óã
(
¥v_id_t
 
tid
,

9 
¥v_tick_t
 
Àt
,

10 
¥v_num_t
 
num
,

11 
ps_£rv™t_t
 
£rv™ts
[])

13 
i
;

14 
èsks
[
tid
] = (
ps_èsk_t
)
	`p‹t_mÆloc
((
±ask
));

15 
èsks
[
tid
]->
£rv™ts
 = (
¥v_li°_t
 *)
	`p‹t_mÆloc
((prv_list_t));

16 
èsks
[
tid
]->tid =Åid;

17 
èsks
[
tid
]->
Àt
 =Åasks[tid]->
≥riod
 =Åasks[tid]->
dódlöe
 =Üet;

19 
i
=0;i<
num
;++i){

20 
	`¥v_li°_ö£π
(
£rv™ts
[
i
], 
èsks
[
tid
]->servants);

21 
£rv™ts
[
i
]->
tid
 =Åid;

24  
èsks
[
tid
];

25 
	}
}

	@/home/wanbo/workspace/xPSPM-C/plibs/servant.c

1 
	~"£rv™t.h
"

2 
	~"evít.h
"

3 
	~"ef.h
"

4 
	~"PSPMc⁄figuª.h
"

6 
p‹t_£mph_t
 
	g£m
[
NUMOFSERVANTS
];

7 
ps_£rv™t_t
 
	g£rv™ts
[
NUMOFSERVANTS
];

11 
ps_£rv™t_t
 
ps_£rv™t_¸óã
–
¥v_id_t
 
sid
,

12 
¥v_°y≥_t
 
ty≥
,

13 
¥v_tick_t
 
w˚t
,

14 
¥v_num_t
 
num
,

15 
ps_£rv™t_t
 
§c_¨øy
[],

16 (*
ru¬abÀ
)(*))

18 
i
;

19 
ch
[10];

20 
ps_mesßge_t
 
mesßge
[
num
];

21 
£rv™ts
[
sid
] = (
ps_£rv™t_t
)
	`p‹t_mÆloc
((
£rv™t
));

22 
ps_£rv™t_t
 
s
 = 
£rv™ts
[
sid
];

23 
	`p‹t_£mph_¸óã
 ( 
£m
[
sid
] );

24 
¥v_hashèbÀ_t
 * 
ht
 = 
	`¥v_hashèbÀ_√w
();

26 
s
->
sid
 = sid;

27 
s
->
ty≥
 =Åype;

28 
s
->
w˚t
 = wcet;

29 
s
->
öbox
 = 
ht
;

31 
	`p‹t_£rv™t_¸óã
(
ru¬abÀ
, &
s
->
sid
, 2);

33 
i
 = 0; i < 
num
; ++ i){

34 
	`¥v_ef_add_ªœti⁄
(
§c_¨øy
[
i
], 
s
);

35 
mesßge
[
i
] = 
	`p‹t_mÆloc
((message));

36 
mesßge
[
i
]->
d©a
 = 0;

37 
mesßge
[
i
]->
sour˚
 = 
§c_¨øy
[i];

38 
mesßge
[
i
]->
de°ö©i⁄
 = 
s
;

39 
	`ôﬂ
(
§c_¨øy
[
i
]->
sid
, 
ch
);

46  
s
;

47 
	}
}

51 
	$ps_£rv™t_waô
(
¥v_id_t
 
sid
)

55 
	`p‹t_waô
–
£m
[
sid
] );

56 
	}
}

59 
	$ps_£rv™t_wake
–
ps_£rv™t_t
 * 
s
 )

61 
¥v_id_t
 
sid
 = 
	`¥v_£rv™t_gë_id
(
s
);

62 
	`p‹t_åiggî
–
£m
[
sid
] );

63 
	}
}

65 
	$ps_£rv™t_£nd
–
¥v_id_t
 
sid
, 
d©a
, 
ps_mesßge_t
 
mesßge
)

67 
ch
[10];

68 
ps_£rv™t_t
 
£nd
 = 
	`¥v_ef_gë_cuºít_£rv™t
();

69 
	`ôﬂ
(
£nd
->
sid
, 
ch
);

70 
mesßge
->
sour˚
 = 
£nd
;

71 
mesßge
->
de°ö©i⁄
 = 
£rv™ts
[
sid
];

72 
mesßge
->
d©a
 = data;

74 
	`¥v_hashèbÀ_add
(
£rv™ts
[
sid
]->
öbox
, 
ch
, 
mesßge
);

75 
	}
}

77 
	$ps_£rv™t_ª˚ive
(
¥v_id_t
 
sid
)

79 
ch
[10];

80 
	`ôﬂ
(
sid
, 
ch
);

81 
ps_£rv™t_t
 
s
 = 
	`¥v_ef_gë_cuºít_£rv™t
();

82 
ps_mesßge_t
 
mesßge
 = (ps_mesßge_t)
	`¥v_hashèbÀ_gë
(
s
->
öbox
, 
ch
);

83  
mesßge
->
d©a
;

84 
	}
}

87 
	$ps_£rv™t_gë§˙um
()

89 
ps_£rv™t_t
 
s
 = 
	`¥v_ef_gë_cuºít_£rv™t
();

90 
¥v_li°_t
 * 
§c
 = 
	`¥v_ef_gë_§c_li°
(
s
);

91  
§c
->
Àngth
;

92 
	}
}

94 
	$ps_£rv™t_gë§csid
(
ödex
)

96 
i
;

97 
ps_£rv™t_t
 
s
 = 
	`¥v_ef_gë_cuºít_£rv™t
();

98 
¥v_li°_t
 * 
§c
 = 
	`¥v_ef_gë_§c_li°
(
s
);

99 
¥v_ôem_t
 * 
ªsu…
 = 
§c
->
fú°
;

101 if(
ödex
 >
§c
->
Àngth
){

105 
ödex
--){

106 
ªsu…
 =Ñesu…->
√xt
;

109  ((
ps_£rv™t_t
)(
ªsu…
->
ítôy
))->
sid
;

110 
	}
}

112 
	$ps_£rv™t_gë_de°num
()

114 
ps_£rv™t_t
 
s
 = 
	`¥v_ef_gë_cuºít_£rv™t
();

115 
¥v_li°_t
 * 
de°
 = 
	`¥v_ef_gë_de°_li°
(
s
);

116  
de°
->
Àngth
;

117 
	}
}

120 
	$ps_£rv™t_gëde°sid
(
ödex
)

122 
i
;

123 
ps_£rv™t_t
 
s
 = 
	`¥v_ef_gë_cuºít_£rv™t
();

124 
¥v_li°_t
 * 
de°
 = 
	`¥v_ef_gë_de°_li°
(
s
);

125 
¥v_ôem_t
 * 
ªsu…
 = 
de°
->
fú°
;

127 if(
ödex
 >
de°
->
Àngth
){

131 
ödex
--){

132 
ªsu…
 =Ñesu…->
√xt
;

135  ((
ps_£rv™t_t
)(
ªsu…
->
ítôy
))->
sid
;

136 
	}
}

	@
1
.
0
280
22436
/home/wanbo/workspace/xPSPM-C/apps/FreeRTOSConfig.h
/home/wanbo/workspace/xPSPM-C/apps/app.c
/home/wanbo/workspace/xPSPM-C/apps/app.h
/home/wanbo/workspace/xPSPM-C/apps/stm32_p103.c
/home/wanbo/workspace/xPSPM-C/apps/stm32_p103.h
/home/wanbo/workspace/xPSPM-C/apps/stm32f10x_conf.h
/home/wanbo/workspace/xPSPM-C/libraries/CMSIS/CM3/CoreSupport/core_cm3.c
/home/wanbo/workspace/xPSPM-C/libraries/CMSIS/CM3/CoreSupport/core_cm3.h
/home/wanbo/workspace/xPSPM-C/libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h
/home/wanbo/workspace/xPSPM-C/libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.c
/home/wanbo/workspace/xPSPM-C/libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/croutine.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/FreeRTOS.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/StackMacros.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/croutine.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/list.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/mpu_wrappers.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/portable.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/projdefs.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/queue.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/semphr.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/task.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/include/timers.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/list.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/Flsh186/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/Flsh186/prtmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/PC/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/PC/prtmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/common/portasm.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/BCC/16BitDOS/common/portcomn.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CCS/MSP430X/data_model.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CCS/MSP430X/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CCS/MSP430X/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/ColdFire_V1/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/ColdFire_V1/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/ColdFire_V2/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/ColdFire_V2/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/HCS12/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/CodeWarrior/HCS12/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91FR40008/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91FR40008/portISR.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91FR40008/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/AT91SAM7X256.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/ioat91sam7x256.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/lib_AT91SAM7X256.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/lib_AT91SAM7X256.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/portISR.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_AT91SAM7S/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC2000/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC2000/portISR.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC2000/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC23xx/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC23xx/portISR.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM7_LPC23xx/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM0/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM0/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM3/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM3_MPU/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM3_MPU/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM4F/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ATMega323/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ATMega323/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/AVR32_UC3/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/AVR32_UC3/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/CORTUS_APS3/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/CORTUS_APS3/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ColdFire_V2/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/ColdFire_V2/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/H8S2329/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/H8S2329/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/HCS12/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/HCS12/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MCF5235/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MCF5235/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MSP430F449/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MSP430F449/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MicroBlaze/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MicroBlaze/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MicroBlazeV8/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MicroBlazeV8/port_exceptions.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/MicroBlazeV8/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/NiosII/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/NiosII/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC405_Xilinx/FPU_Macros.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC405_Xilinx/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC405_Xilinx/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC440_Xilinx/FPU_Macros.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC440_Xilinx/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/PPC440_Xilinx/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/RX600/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/RX600/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/STR75x/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/STR75x/portISR.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/STR75x/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/TriCore_1782/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/TriCore_1782/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/GCC/TriCore_1782/porttrap.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/78K0R/ISR_Support.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/78K0R/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/78K0R/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM0/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM0/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM3/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM3/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM4F/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ARM_CM4F/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ATMega323/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/ATMega323/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AVR32_UC3/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AVR32_UC3/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AVR32_UC3/read.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AVR32_UC3/write.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7S64.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7S64_inc.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7X128.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7X128_inc.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7X256.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/AT91SAM7X256_inc.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/ISR_Support.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/lib_AT91SAM7S64.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/lib_AT91SAM7X128.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/lib_AT91SAM7X256.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM7S64/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM9XE/ISR_Support.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM9XE/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/AtmelSAM9XE/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/LPC2000/ISR_Support.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/LPC2000/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/LPC2000/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430/portasm.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430X/data_model.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430X/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/MSP430X/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/RL78/ISR_Support.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/RL78/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/RL78/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/RX600/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/RX600/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR71x/ISR_Support.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR71x/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR71x/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR75x/ISR_Support.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR75x/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR75x/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR91x/ISR_Support.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR91x/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/STR91x/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/V850ES/ISR_Support.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/V850ES/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/IAR/V850ES/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC18F/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC18F/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC18F/stdio.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC24_dsPIC/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC24_dsPIC/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC32MX/ISR_Support.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC32MX/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MPLAB/PIC32MX/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MSVC-MingW/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MSVC-MingW/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MemMang/heap_1.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MemMang/heap_2.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/MemMang/heap_3.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/large_untested/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/large_untested/portasm.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/large_untested/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/small/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/small/portasm.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Paradigm/Tern_EE/small/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM7_LPC21xx/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM7_LPC21xx/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM_CM3/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM_CM3/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM_CM4F/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/RVDS/ARM_CM4F/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/RX200/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/RX200/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/RX600/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/RX600/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/SH2A_FPU/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Renesas/SH2A_FPU/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Rowley/MSP430F449/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Rowley/MSP430F449/portasm.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Rowley/MSP430F449/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/SDCC/Cygnal/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/SDCC/Cygnal/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB91460/__STD_LIB_sbrk.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB91460/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB91460/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB96340/__STD_LIB_sbrk.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB96340/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Softune/MB96340/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Tasking/ARM_CM4F/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/Tasking/ARM_CM4F/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/WizC/PIC18/Drivers/Tick/Tick.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/WizC/PIC18/Drivers/Tick/isrTick.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/WizC/PIC18/addFreeRTOS.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/WizC/PIC18/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/WizC/PIC18/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/Flsh186/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/Flsh186/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/PC/port.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/PC/portmacro.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/common/portasm.h
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/portable/oWatcom/16BitDOS/common/portcomn.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/queue.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/tasks.c
/home/wanbo/workspace/xPSPM-C/libraries/FreeRTOS/timers.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/misc.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_can.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_cec.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_crc.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/misc.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_cec.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c
/home/wanbo/workspace/xPSPM-C/libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c
/home/wanbo/workspace/xPSPM-C/main.c
/home/wanbo/workspace/xPSPM-C/plibs/PSPMconfigure.c
/home/wanbo/workspace/xPSPM-C/plibs/ef.c
/home/wanbo/workspace/xPSPM-C/plibs/event.c
/home/wanbo/workspace/xPSPM-C/plibs/hashtable.c
/home/wanbo/workspace/xPSPM-C/plibs/include/PSPMconfigure.h
/home/wanbo/workspace/xPSPM-C/plibs/include/PSPMport.h
/home/wanbo/workspace/xPSPM-C/plibs/include/ef.h
/home/wanbo/workspace/xPSPM-C/plibs/include/event.h
/home/wanbo/workspace/xPSPM-C/plibs/include/hashtable.h
/home/wanbo/workspace/xPSPM-C/plibs/include/list_internal.h
/home/wanbo/workspace/xPSPM-C/plibs/include/mode.h
/home/wanbo/workspace/xPSPM-C/plibs/include/modeltime.h
/home/wanbo/workspace/xPSPM-C/plibs/include/ptask.h
/home/wanbo/workspace/xPSPM-C/plibs/include/servant.h
/home/wanbo/workspace/xPSPM-C/plibs/list_internal.c
/home/wanbo/workspace/xPSPM-C/plibs/mode.c
/home/wanbo/workspace/xPSPM-C/plibs/modeltime.c
/home/wanbo/workspace/xPSPM-C/plibs/ptask.c
/home/wanbo/workspace/xPSPM-C/plibs/servant.c
