
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 00 01 20 15 6d 00 00 59 6d 00 00 59 6d 00 00     ... .m..Ym..Ym..
      10:	59 6d 00 00 59 6d 00 00 59 6d 00 00 00 00 00 00     Ym..Ym..Ym......
	...
      2c:	c9 44 00 00 59 6d 00 00 00 00 00 00 d5 45 00 00     .D..Ym.......E..
      3c:	11 46 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     .F..Ym..Ym..Ym..
      4c:	59 6d 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     Ym..Ym..Ym..Ym..
      5c:	59 6d 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     Ym..Ym..Ym..Ym..
      6c:	59 6d 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     Ym..Ym..Ym..Ym..
      7c:	59 6d 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     Ym..Ym..Ym..Ym..
      8c:	59 6d 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     Ym..Ym..Ym..Ym..
      9c:	59 6d 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     Ym..Ym..Ym..Ym..
      ac:	59 6d 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     Ym..Ym..Ym..Ym..
      bc:	59 6d 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     Ym..Ym..Ym..Ym..
      cc:	59 6d 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     Ym..Ym..Ym..Ym..
      dc:	59 6d 00 00 59 6d 00 00 59 6d 00 00 59 6d 00 00     Ym..Ym..Ym..Ym..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	4603      	mov	r3, r0
     31c:	6039      	str	r1, [r7, #0]
     31e:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     320:	2300      	movs	r3, #0
     322:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     324:	683a      	ldr	r2, [r7, #0]
     326:	79f9      	ldrb	r1, [r7, #7]
     328:	e8c2 1f43 	strexb	r3, r1, [r2]
     32c:	60fb      	str	r3, [r7, #12]
   return(result);
     32e:	68fb      	ldr	r3, [r7, #12]
}
     330:	4618      	mov	r0, r3
     332:	3714      	adds	r7, #20
     334:	46bd      	mov	sp, r7
     336:	f85d 7b04 	ldr.w	r7, [sp], #4
     33a:	4770      	bx	lr

0000033c <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     33c:	b480      	push	{r7}
     33e:	b085      	sub	sp, #20
     340:	af00      	add	r7, sp, #0
     342:	4603      	mov	r3, r0
     344:	6039      	str	r1, [r7, #0]
     346:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     348:	2300      	movs	r3, #0
     34a:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     34c:	683a      	ldr	r2, [r7, #0]
     34e:	88f9      	ldrh	r1, [r7, #6]
     350:	e8c2 1f53 	strexh	r3, r1, [r2]
     354:	60fb      	str	r3, [r7, #12]
   return(result);
     356:	68fb      	ldr	r3, [r7, #12]
}
     358:	4618      	mov	r0, r3
     35a:	3714      	adds	r7, #20
     35c:	46bd      	mov	sp, r7
     35e:	f85d 7b04 	ldr.w	r7, [sp], #4
     362:	4770      	bx	lr

00000364 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     364:	b480      	push	{r7}
     366:	b085      	sub	sp, #20
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
     36c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     36e:	2300      	movs	r3, #0
     370:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     372:	683b      	ldr	r3, [r7, #0]
     374:	687a      	ldr	r2, [r7, #4]
     376:	e843 2300 	strex	r3, r2, [r3]
     37a:	60fb      	str	r3, [r7, #12]
   return(result);
     37c:	68fb      	ldr	r3, [r7, #12]
}
     37e:	4618      	mov	r0, r3
     380:	3714      	adds	r7, #20
     382:	46bd      	mov	sp, r7
     384:	f85d 7b04 	ldr.w	r7, [sp], #4
     388:	4770      	bx	lr
     38a:	bf00      	nop

0000038c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     38c:	b580      	push	{r7, lr}
     38e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f042 0201 	orr.w	r2, r2, #1
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     3a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b8:	6859      	ldr	r1, [r3, #4]
     3ba:	2300      	movs	r3, #0
     3bc:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     3c0:	400b      	ands	r3, r1
     3c2:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     3c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3d4:	6812      	ldr	r2, [r2, #0]
     3d6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     3da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     3de:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     3e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3f0:	6812      	ldr	r2, [r2, #0]
     3f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3f6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     404:	f2c4 0202 	movt	r2, #16386	; 0x4002
     408:	6852      	ldr	r2, [r2, #4]
     40a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     40e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     414:	f2c4 0302 	movt	r3, #16386	; 0x4002
     418:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     41c:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     41e:	f000 f8a7 	bl	570 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     422:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     426:	f2ce 0300 	movt	r3, #57344	; 0xe000
     42a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     42e:	609a      	str	r2, [r3, #8]
#endif 
}
     430:	bd80      	pop	{r7, pc}
     432:	bf00      	nop

00000434 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     434:	b480      	push	{r7}
     436:	b085      	sub	sp, #20
     438:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     43a:	2300      	movs	r3, #0
     43c:	60fb      	str	r3, [r7, #12]
     43e:	2300      	movs	r3, #0
     440:	60bb      	str	r3, [r7, #8]
     442:	2300      	movs	r3, #0
     444:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     44a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     44e:	685b      	ldr	r3, [r3, #4]
     450:	f003 030c 	and.w	r3, r3, #12
     454:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
     456:	68fb      	ldr	r3, [r7, #12]
     458:	2b04      	cmp	r3, #4
     45a:	d00d      	beq.n	478 <SystemCoreClockUpdate+0x44>
     45c:	2b08      	cmp	r3, #8
     45e:	d015      	beq.n	48c <SystemCoreClockUpdate+0x58>
     460:	2b00      	cmp	r3, #0
     462:	d15b      	bne.n	51c <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     464:	f240 0300 	movw	r3, #0
     468:	f2c2 0300 	movt	r3, #8192	; 0x2000
     46c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     470:	f2c0 027a 	movt	r2, #122	; 0x7a
     474:	601a      	str	r2, [r3, #0]
      break;
     476:	e05b      	b.n	530 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     484:	f2c0 027a 	movt	r2, #122	; 0x7a
     488:	601a      	str	r2, [r3, #0]
      break;
     48a:	e051      	b.n	530 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     48c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     490:	f2c4 0302 	movt	r3, #16386	; 0x4002
     494:	685b      	ldr	r3, [r3, #4]
     496:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     49a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     49c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4a4:	685b      	ldr	r3, [r3, #4]
     4a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     4aa:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     4ac:	68bb      	ldr	r3, [r7, #8]
     4ae:	0c9b      	lsrs	r3, r3, #18
     4b0:	3302      	adds	r3, #2
     4b2:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	2b00      	cmp	r3, #0
     4b8:	d10c      	bne.n	4d4 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     4ba:	68ba      	ldr	r2, [r7, #8]
     4bc:	f44f 6310 	mov.w	r3, #2304	; 0x900
     4c0:	f2c0 033d 	movt	r3, #61	; 0x3d
     4c4:	fb03 f202 	mul.w	r2, r3, r2
     4c8:	f240 0300 	movw	r3, #0
     4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d0:	601a      	str	r2, [r3, #0]
     4d2:	e022      	b.n	51a <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     4d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4dc:	685b      	ldr	r3, [r3, #4]
     4de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4e2:	2b00      	cmp	r3, #0
     4e4:	d00c      	beq.n	500 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     4e6:	68ba      	ldr	r2, [r7, #8]
     4e8:	f44f 6310 	mov.w	r3, #2304	; 0x900
     4ec:	f2c0 033d 	movt	r3, #61	; 0x3d
     4f0:	fb03 f202 	mul.w	r2, r3, r2
     4f4:	f240 0300 	movw	r3, #0
     4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4fc:	601a      	str	r2, [r3, #0]
     4fe:	e00c      	b.n	51a <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     500:	68ba      	ldr	r2, [r7, #8]
     502:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     506:	f2c0 037a 	movt	r3, #122	; 0x7a
     50a:	fb03 f202 	mul.w	r2, r3, r2
     50e:	f240 0300 	movw	r3, #0
     512:	f2c2 0300 	movt	r3, #8192	; 0x2000
     516:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     518:	e00a      	b.n	530 <SystemCoreClockUpdate+0xfc>
     51a:	e009      	b.n	530 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     51c:	f240 0300 	movw	r3, #0
     520:	f2c2 0300 	movt	r3, #8192	; 0x2000
     524:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     528:	f2c0 027a 	movt	r2, #122	; 0x7a
     52c:	601a      	str	r2, [r3, #0]
      break;
     52e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     534:	f2c4 0302 	movt	r3, #16386	; 0x4002
     538:	685b      	ldr	r3, [r3, #4]
     53a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     53e:	091a      	lsrs	r2, r3, #4
     540:	f240 0304 	movw	r3, #4
     544:	f2c2 0300 	movt	r3, #8192	; 0x2000
     548:	5c9b      	ldrb	r3, [r3, r2]
     54a:	b2db      	uxtb	r3, r3
     54c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
     54e:	f240 0300 	movw	r3, #0
     552:	f2c2 0300 	movt	r3, #8192	; 0x2000
     556:	681a      	ldr	r2, [r3, #0]
     558:	68fb      	ldr	r3, [r7, #12]
     55a:	40da      	lsrs	r2, r3
     55c:	f240 0300 	movw	r3, #0
     560:	f2c2 0300 	movt	r3, #8192	; 0x2000
     564:	601a      	str	r2, [r3, #0]
}
     566:	3714      	adds	r7, #20
     568:	46bd      	mov	sp, r7
     56a:	f85d 7b04 	ldr.w	r7, [sp], #4
     56e:	4770      	bx	lr

00000570 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     570:	b580      	push	{r7, lr}
     572:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     574:	f000 f802 	bl	57c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
     578:	bd80      	pop	{r7, pc}
     57a:	bf00      	nop

0000057c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     57c:	b480      	push	{r7}
     57e:	b083      	sub	sp, #12
     580:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     582:	2300      	movs	r3, #0
     584:	607b      	str	r3, [r7, #4]
     586:	2300      	movs	r3, #0
     588:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     58a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     58e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     592:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     596:	f2c4 0202 	movt	r2, #16386	; 0x4002
     59a:	6812      	ldr	r2, [r2, #0]
     59c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     5a0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     5a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5aa:	681b      	ldr	r3, [r3, #0]
     5ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5b0:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	3301      	adds	r3, #1
     5b6:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     5b8:	683b      	ldr	r3, [r7, #0]
     5ba:	2b00      	cmp	r3, #0
     5bc:	d103      	bne.n	5c6 <SetSysClockTo72+0x4a>
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     5c4:	d1ed      	bne.n	5a2 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     5c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ce:	681b      	ldr	r3, [r3, #0]
     5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5d4:	2b00      	cmp	r3, #0
     5d6:	d002      	beq.n	5de <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     5d8:	2301      	movs	r3, #1
     5da:	603b      	str	r3, [r7, #0]
     5dc:	e001      	b.n	5e2 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     5de:	2300      	movs	r3, #0
     5e0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	2b01      	cmp	r3, #1
     5e6:	f040 8094 	bne.w	712 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     5ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5fa:	6812      	ldr	r2, [r2, #0]
     5fc:	f042 0210 	orr.w	r2, r2, #16
     600:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     606:	f2c4 0302 	movt	r3, #16386	; 0x4002
     60a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     60e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     612:	6812      	ldr	r2, [r2, #0]
     614:	f022 0203 	bic.w	r2, r2, #3
     618:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
     61a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     61e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     626:	f2c4 0202 	movt	r2, #16386	; 0x4002
     62a:	6812      	ldr	r2, [r2, #0]
     62c:	f042 0202 	orr.w	r2, r2, #2
     630:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     636:	f2c4 0302 	movt	r3, #16386	; 0x4002
     63a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     63e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     642:	6852      	ldr	r2, [r2, #4]
     644:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     64a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     64e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     652:	f2c4 0202 	movt	r2, #16386	; 0x4002
     656:	6852      	ldr	r2, [r2, #4]
     658:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     65a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     65e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     666:	f2c4 0202 	movt	r2, #16386	; 0x4002
     66a:	6852      	ldr	r2, [r2, #4]
     66c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     670:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     676:	f2c4 0302 	movt	r3, #16386	; 0x4002
     67a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     67e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     682:	6852      	ldr	r2, [r2, #4]
     684:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     688:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     68a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     68e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     696:	f2c4 0202 	movt	r2, #16386	; 0x4002
     69a:	6852      	ldr	r2, [r2, #4]
     69c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     6a0:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     6a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6b2:	6812      	ldr	r2, [r2, #0]
     6b4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     6b8:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     6ba:	bf00      	nop
     6bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     6ca:	2b00      	cmp	r3, #0
     6cc:	d0f6      	beq.n	6bc <SetSysClockTo72+0x140>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     6ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6da:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6de:	6852      	ldr	r2, [r2, #4]
     6e0:	f022 0203 	bic.w	r2, r2, #3
     6e4:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
     6e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f6:	6852      	ldr	r2, [r2, #4]
     6f8:	f042 0202 	orr.w	r2, r2, #2
     6fc:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6fe:	bf00      	nop
     700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     704:	f2c4 0302 	movt	r3, #16386	; 0x4002
     708:	685b      	ldr	r3, [r3, #4]
     70a:	f003 030c 	and.w	r3, r3, #12
     70e:	2b08      	cmp	r3, #8
     710:	d1f6      	bne.n	700 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
     712:	370c      	adds	r7, #12
     714:	46bd      	mov	sp, r7
     716:	f85d 7b04 	ldr.w	r7, [sp], #4
     71a:	4770      	bx	lr
     71c:	00006dfc 	.word	0x00006dfc
     720:	20000000 	.word	0x20000000
     724:	20000034 	.word	0x20000034
     728:	20000038 	.word	0x20000038
     72c:	2000e040 	.word	0x2000e040

00000730 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     730:	b480      	push	{r7}
     732:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f042 0201 	orr.w	r2, r2, #1
     74a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     74c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     750:	f2c4 0202 	movt	r2, #16386	; 0x4002
     754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     758:	f2c4 0302 	movt	r3, #16386	; 0x4002
     75c:	6859      	ldr	r1, [r3, #4]
     75e:	2300      	movs	r3, #0
     760:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     764:	400b      	ands	r3, r1
     766:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     76c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     774:	f2c4 0202 	movt	r2, #16386	; 0x4002
     778:	6812      	ldr	r2, [r2, #0]
     77a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     77e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     782:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     79a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6852      	ldr	r2, [r2, #4]
     7ae:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     7b2:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     7b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7bc:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     7c0:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     7c2:	46bd      	mov	sp, r7
     7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7c8:	4770      	bx	lr
     7ca:	bf00      	nop

000007cc <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     7cc:	b480      	push	{r7}
     7ce:	b083      	sub	sp, #12
     7d0:	af00      	add	r7, sp, #0
     7d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     7d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7e4:	6812      	ldr	r2, [r2, #0]
     7e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     7ea:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     7ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7fc:	6812      	ldr	r2, [r2, #0]
     7fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     802:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     804:	687b      	ldr	r3, [r7, #4]
     806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     80a:	d003      	beq.n	814 <RCC_HSEConfig+0x48>
     80c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     810:	d00d      	beq.n	82e <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
     812:	e019      	b.n	848 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     818:	f2c4 0302 	movt	r3, #16386	; 0x4002
     81c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     820:	f2c4 0202 	movt	r2, #16386	; 0x4002
     824:	6812      	ldr	r2, [r2, #0]
     826:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     82a:	601a      	str	r2, [r3, #0]
      break;
     82c:	e00c      	b.n	848 <RCC_HSEConfig+0x7c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     82e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     832:	f2c4 0302 	movt	r3, #16386	; 0x4002
     836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     83a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     83e:	6812      	ldr	r2, [r2, #0]
     840:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     844:	601a      	str	r2, [r3, #0]
      break;
     846:	bf00      	nop
      
    default:
      break;
  }
}
     848:	370c      	adds	r7, #12
     84a:	46bd      	mov	sp, r7
     84c:	f85d 7b04 	ldr.w	r7, [sp], #4
     850:	4770      	bx	lr
     852:	bf00      	nop

00000854 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     854:	b580      	push	{r7, lr}
     856:	b082      	sub	sp, #8
     858:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     85a:	2300      	movs	r3, #0
     85c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     85e:	2300      	movs	r3, #0
     860:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     862:	2300      	movs	r3, #0
     864:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     866:	2031      	movs	r0, #49	; 0x31
     868:	f000 fba2 	bl	fb0 <RCC_GetFlagStatus>
     86c:	4603      	mov	r3, r0
     86e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
     870:	683b      	ldr	r3, [r7, #0]
     872:	3301      	adds	r3, #1
     874:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     876:	683b      	ldr	r3, [r7, #0]
     878:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     87c:	d002      	beq.n	884 <RCC_WaitForHSEStartUp+0x30>
     87e:	79bb      	ldrb	r3, [r7, #6]
     880:	2b00      	cmp	r3, #0
     882:	d0f0      	beq.n	866 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     884:	2031      	movs	r0, #49	; 0x31
     886:	f000 fb93 	bl	fb0 <RCC_GetFlagStatus>
     88a:	4603      	mov	r3, r0
     88c:	2b00      	cmp	r3, #0
     88e:	d002      	beq.n	896 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     890:	2301      	movs	r3, #1
     892:	71fb      	strb	r3, [r7, #7]
     894:	e001      	b.n	89a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     896:	2300      	movs	r3, #0
     898:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
     89a:	79fb      	ldrb	r3, [r7, #7]
}
     89c:	4618      	mov	r0, r3
     89e:	3708      	adds	r7, #8
     8a0:	46bd      	mov	sp, r7
     8a2:	bd80      	pop	{r7, pc}

000008a4 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     8a4:	b480      	push	{r7}
     8a6:	b085      	sub	sp, #20
     8a8:	af00      	add	r7, sp, #0
     8aa:	4603      	mov	r3, r0
     8ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     8ae:	2300      	movs	r3, #0
     8b0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     8b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ba:	681b      	ldr	r3, [r3, #0]
     8bc:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     8be:	68fb      	ldr	r3, [r7, #12]
     8c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     8c4:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     8c6:	79fb      	ldrb	r3, [r7, #7]
     8c8:	00db      	lsls	r3, r3, #3
     8ca:	68fa      	ldr	r2, [r7, #12]
     8cc:	4313      	orrs	r3, r2
     8ce:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     8d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8d8:	68fa      	ldr	r2, [r7, #12]
     8da:	601a      	str	r2, [r3, #0]
}
     8dc:	3714      	adds	r7, #20
     8de:	46bd      	mov	sp, r7
     8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8e4:	4770      	bx	lr
     8e6:	bf00      	nop

000008e8 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     8e8:	b480      	push	{r7}
     8ea:	b083      	sub	sp, #12
     8ec:	af00      	add	r7, sp, #0
     8ee:	4603      	mov	r3, r0
     8f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8f2:	2300      	movs	r3, #0
     8f4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8f8:	79fa      	ldrb	r2, [r7, #7]
     8fa:	601a      	str	r2, [r3, #0]
}
     8fc:	370c      	adds	r7, #12
     8fe:	46bd      	mov	sp, r7
     900:	f85d 7b04 	ldr.w	r7, [sp], #4
     904:	4770      	bx	lr
     906:	bf00      	nop

00000908 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     908:	b480      	push	{r7}
     90a:	b085      	sub	sp, #20
     90c:	af00      	add	r7, sp, #0
     90e:	6078      	str	r0, [r7, #4]
     910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     912:	2300      	movs	r3, #0
     914:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     91a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     91e:	685b      	ldr	r3, [r3, #4]
     920:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     922:	68fb      	ldr	r3, [r7, #12]
     924:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     928:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     92a:	687a      	ldr	r2, [r7, #4]
     92c:	683b      	ldr	r3, [r7, #0]
     92e:	4313      	orrs	r3, r2
     930:	68fa      	ldr	r2, [r7, #12]
     932:	4313      	orrs	r3, r2
     934:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     93a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     93e:	68fa      	ldr	r2, [r7, #12]
     940:	605a      	str	r2, [r3, #4]
}
     942:	3714      	adds	r7, #20
     944:	46bd      	mov	sp, r7
     946:	f85d 7b04 	ldr.w	r7, [sp], #4
     94a:	4770      	bx	lr

0000094c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     94c:	b480      	push	{r7}
     94e:	b083      	sub	sp, #12
     950:	af00      	add	r7, sp, #0
     952:	4603      	mov	r3, r0
     954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     956:	2360      	movs	r3, #96	; 0x60
     958:	f2c4 2342 	movt	r3, #16962	; 0x4242
     95c:	79fa      	ldrb	r2, [r7, #7]
     95e:	601a      	str	r2, [r3, #0]
}
     960:	370c      	adds	r7, #12
     962:	46bd      	mov	sp, r7
     964:	f85d 7b04 	ldr.w	r7, [sp], #4
     968:	4770      	bx	lr
     96a:	bf00      	nop

0000096c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     96c:	b480      	push	{r7}
     96e:	b085      	sub	sp, #20
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     974:	2300      	movs	r3, #0
     976:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     97c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     980:	685b      	ldr	r3, [r3, #4]
     982:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     984:	68fb      	ldr	r3, [r7, #12]
     986:	f023 0303 	bic.w	r3, r3, #3
     98a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     98c:	68fa      	ldr	r2, [r7, #12]
     98e:	687b      	ldr	r3, [r7, #4]
     990:	4313      	orrs	r3, r2
     992:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     998:	f2c4 0302 	movt	r3, #16386	; 0x4002
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	605a      	str	r2, [r3, #4]
}
     9a0:	3714      	adds	r7, #20
     9a2:	46bd      	mov	sp, r7
     9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop

000009ac <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     9ac:	b480      	push	{r7}
     9ae:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     9b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9b8:	685b      	ldr	r3, [r3, #4]
     9ba:	b2db      	uxtb	r3, r3
     9bc:	f003 030c 	and.w	r3, r3, #12
     9c0:	b2db      	uxtb	r3, r3
}
     9c2:	4618      	mov	r0, r3
     9c4:	46bd      	mov	sp, r7
     9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     9ca:	4770      	bx	lr

000009cc <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     9cc:	b480      	push	{r7}
     9ce:	b085      	sub	sp, #20
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9d4:	2300      	movs	r3, #0
     9d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     9d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9e0:	685b      	ldr	r3, [r3, #4]
     9e2:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     9e4:	68fb      	ldr	r3, [r7, #12]
     9e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     9ea:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	4313      	orrs	r3, r2
     9f2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9fc:	68fa      	ldr	r2, [r7, #12]
     9fe:	605a      	str	r2, [r3, #4]
}
     a00:	3714      	adds	r7, #20
     a02:	46bd      	mov	sp, r7
     a04:	f85d 7b04 	ldr.w	r7, [sp], #4
     a08:	4770      	bx	lr
     a0a:	bf00      	nop

00000a0c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     a0c:	b480      	push	{r7}
     a0e:	b085      	sub	sp, #20
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a14:	2300      	movs	r3, #0
     a16:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a20:	685b      	ldr	r3, [r3, #4]
     a22:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     a24:	68fb      	ldr	r3, [r7, #12]
     a26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     a2a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     a2c:	68fa      	ldr	r2, [r7, #12]
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	4313      	orrs	r3, r2
     a32:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a38:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a3c:	68fa      	ldr	r2, [r7, #12]
     a3e:	605a      	str	r2, [r3, #4]
}
     a40:	3714      	adds	r7, #20
     a42:	46bd      	mov	sp, r7
     a44:	f85d 7b04 	ldr.w	r7, [sp], #4
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     a4c:	b480      	push	{r7}
     a4e:	b085      	sub	sp, #20
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a54:	2300      	movs	r3, #0
     a56:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a60:	685b      	ldr	r3, [r3, #4]
     a62:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a64:	68fb      	ldr	r3, [r7, #12]
     a66:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a6a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a6c:	687b      	ldr	r3, [r7, #4]
     a6e:	00db      	lsls	r3, r3, #3
     a70:	68fa      	ldr	r2, [r7, #12]
     a72:	4313      	orrs	r3, r2
     a74:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a7e:	68fa      	ldr	r2, [r7, #12]
     a80:	605a      	str	r2, [r3, #4]
}
     a82:	3714      	adds	r7, #20
     a84:	46bd      	mov	sp, r7
     a86:	f85d 7b04 	ldr.w	r7, [sp], #4
     a8a:	4770      	bx	lr

00000a8c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a8c:	b480      	push	{r7}
     a8e:	b083      	sub	sp, #12
     a90:	af00      	add	r7, sp, #0
     a92:	4602      	mov	r2, r0
     a94:	460b      	mov	r3, r1
     a96:	71fa      	strb	r2, [r7, #7]
     a98:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a9a:	79bb      	ldrb	r3, [r7, #6]
     a9c:	2b00      	cmp	r3, #0
     a9e:	d00e      	beq.n	abe <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     aa0:	f241 0309 	movw	r3, #4105	; 0x1009
     aa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aa8:	f241 0209 	movw	r2, #4105	; 0x1009
     aac:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ab0:	7812      	ldrb	r2, [r2, #0]
     ab2:	b2d1      	uxtb	r1, r2
     ab4:	79fa      	ldrb	r2, [r7, #7]
     ab6:	430a      	orrs	r2, r1
     ab8:	b2d2      	uxtb	r2, r2
     aba:	701a      	strb	r2, [r3, #0]
     abc:	e00f      	b.n	ade <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     abe:	f241 0309 	movw	r3, #4105	; 0x1009
     ac2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac6:	f241 0209 	movw	r2, #4105	; 0x1009
     aca:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ace:	7812      	ldrb	r2, [r2, #0]
     ad0:	b2d1      	uxtb	r1, r2
     ad2:	79fa      	ldrb	r2, [r7, #7]
     ad4:	43d2      	mvns	r2, r2
     ad6:	b2d2      	uxtb	r2, r2
     ad8:	400a      	ands	r2, r1
     ada:	b2d2      	uxtb	r2, r2
     adc:	701a      	strb	r2, [r3, #0]
  }
}
     ade:	370c      	adds	r7, #12
     ae0:	46bd      	mov	sp, r7
     ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
     ae6:	4770      	bx	lr

00000ae8 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     ae8:	b480      	push	{r7}
     aea:	b083      	sub	sp, #12
     aec:	af00      	add	r7, sp, #0
     aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     af0:	23d8      	movs	r3, #216	; 0xd8
     af2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     af6:	687a      	ldr	r2, [r7, #4]
     af8:	601a      	str	r2, [r3, #0]
}
     afa:	370c      	adds	r7, #12
     afc:	46bd      	mov	sp, r7
     afe:	f85d 7b04 	ldr.w	r7, [sp], #4
     b02:	4770      	bx	lr

00000b04 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     b04:	b480      	push	{r7}
     b06:	b085      	sub	sp, #20
     b08:	af00      	add	r7, sp, #0
     b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     b0c:	2300      	movs	r3, #0
     b0e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b14:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b18:	685b      	ldr	r3, [r3, #4]
     b1a:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     b1c:	68fb      	ldr	r3, [r7, #12]
     b1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     b22:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     b24:	68fa      	ldr	r2, [r7, #12]
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	4313      	orrs	r3, r2
     b2a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b30:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b34:	68fa      	ldr	r2, [r7, #12]
     b36:	605a      	str	r2, [r3, #4]
}
     b38:	3714      	adds	r7, #20
     b3a:	46bd      	mov	sp, r7
     b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b40:	4770      	bx	lr
     b42:	bf00      	nop

00000b44 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     b44:	b480      	push	{r7}
     b46:	b083      	sub	sp, #12
     b48:	af00      	add	r7, sp, #0
     b4a:	4603      	mov	r3, r0
     b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b4e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b52:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b56:	2200      	movs	r2, #0
     b58:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b5a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b62:	2200      	movs	r2, #0
     b64:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b66:	79fb      	ldrb	r3, [r7, #7]
     b68:	2b01      	cmp	r3, #1
     b6a:	d002      	beq.n	b72 <RCC_LSEConfig+0x2e>
     b6c:	2b04      	cmp	r3, #4
     b6e:	d007      	beq.n	b80 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
     b70:	e00d      	b.n	b8e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b72:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b7a:	2201      	movs	r2, #1
     b7c:	701a      	strb	r2, [r3, #0]
      break;
     b7e:	e006      	b.n	b8e <RCC_LSEConfig+0x4a>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b80:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b84:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b88:	2205      	movs	r2, #5
     b8a:	701a      	strb	r2, [r3, #0]
      break;            
     b8c:	bf00      	nop
      
    default:
      break;      
  }
}
     b8e:	370c      	adds	r7, #12
     b90:	46bd      	mov	sp, r7
     b92:	f85d 7b04 	ldr.w	r7, [sp], #4
     b96:	4770      	bx	lr

00000b98 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b98:	b480      	push	{r7}
     b9a:	b083      	sub	sp, #12
     b9c:	af00      	add	r7, sp, #0
     b9e:	4603      	mov	r3, r0
     ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     ba2:	f44f 6390 	mov.w	r3, #1152	; 0x480
     ba6:	f2c4 2342 	movt	r3, #16962	; 0x4242
     baa:	79fa      	ldrb	r2, [r7, #7]
     bac:	601a      	str	r2, [r3, #0]
}
     bae:	370c      	adds	r7, #12
     bb0:	46bd      	mov	sp, r7
     bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb6:	4770      	bx	lr

00000bb8 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     bb8:	b480      	push	{r7}
     bba:	b083      	sub	sp, #12
     bbc:	af00      	add	r7, sp, #0
     bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     bcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     bd0:	6a11      	ldr	r1, [r2, #32]
     bd2:	687a      	ldr	r2, [r7, #4]
     bd4:	430a      	orrs	r2, r1
     bd6:	621a      	str	r2, [r3, #32]
}
     bd8:	370c      	adds	r7, #12
     bda:	46bd      	mov	sp, r7
     bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     be0:	4770      	bx	lr
     be2:	bf00      	nop

00000be4 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     be4:	b480      	push	{r7}
     be6:	b083      	sub	sp, #12
     be8:	af00      	add	r7, sp, #0
     bea:	4603      	mov	r3, r0
     bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     bee:	f240 433c 	movw	r3, #1084	; 0x43c
     bf2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     bf6:	79fa      	ldrb	r2, [r7, #7]
     bf8:	601a      	str	r2, [r3, #0]
}
     bfa:	370c      	adds	r7, #12
     bfc:	46bd      	mov	sp, r7
     bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
     c02:	4770      	bx	lr

00000c04 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     c04:	b480      	push	{r7}
     c06:	b087      	sub	sp, #28
     c08:	af00      	add	r7, sp, #0
     c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     c0c:	2300      	movs	r3, #0
     c0e:	617b      	str	r3, [r7, #20]
     c10:	2300      	movs	r3, #0
     c12:	613b      	str	r3, [r7, #16]
     c14:	2300      	movs	r3, #0
     c16:	60fb      	str	r3, [r7, #12]
     c18:	2300      	movs	r3, #0
     c1a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c20:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c24:	685b      	ldr	r3, [r3, #4]
     c26:	f003 030c 	and.w	r3, r3, #12
     c2a:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
     c2c:	697b      	ldr	r3, [r7, #20]
     c2e:	2b04      	cmp	r3, #4
     c30:	d00a      	beq.n	c48 <RCC_GetClocksFreq+0x44>
     c32:	2b08      	cmp	r3, #8
     c34:	d00f      	beq.n	c56 <RCC_GetClocksFreq+0x52>
     c36:	2b00      	cmp	r3, #0
     c38:	d14c      	bne.n	cd4 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c3a:	687a      	ldr	r2, [r7, #4]
     c3c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c40:	f2c0 037a 	movt	r3, #122	; 0x7a
     c44:	6013      	str	r3, [r2, #0]
      break;
     c46:	e04c      	b.n	ce2 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     c48:	687a      	ldr	r2, [r7, #4]
     c4a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c4e:	f2c0 037a 	movt	r3, #122	; 0x7a
     c52:	6013      	str	r3, [r2, #0]
      break;
     c54:	e045      	b.n	ce2 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c5e:	685b      	ldr	r3, [r3, #4]
     c60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c64:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c6e:	685b      	ldr	r3, [r3, #4]
     c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c74:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     c76:	693b      	ldr	r3, [r7, #16]
     c78:	0c9b      	lsrs	r3, r3, #18
     c7a:	3302      	adds	r3, #2
     c7c:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
     c7e:	68fb      	ldr	r3, [r7, #12]
     c80:	2b00      	cmp	r3, #0
     c82:	d109      	bne.n	c98 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c84:	693a      	ldr	r2, [r7, #16]
     c86:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c8a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c8e:	fb03 f202 	mul.w	r2, r3, r2
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	601a      	str	r2, [r3, #0]
     c96:	e01c      	b.n	cd2 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ca0:	685b      	ldr	r3, [r3, #4]
     ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     ca6:	2b00      	cmp	r3, #0
     ca8:	d009      	beq.n	cbe <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     caa:	693a      	ldr	r2, [r7, #16]
     cac:	f44f 6310 	mov.w	r3, #2304	; 0x900
     cb0:	f2c0 033d 	movt	r3, #61	; 0x3d
     cb4:	fb03 f202 	mul.w	r2, r3, r2
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	601a      	str	r2, [r3, #0]
     cbc:	e009      	b.n	cd2 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     cbe:	693a      	ldr	r2, [r7, #16]
     cc0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     cc4:	f2c0 037a 	movt	r3, #122	; 0x7a
     cc8:	fb03 f202 	mul.w	r2, r3, r2
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     cd0:	e007      	b.n	ce2 <RCC_GetClocksFreq+0xde>
     cd2:	e006      	b.n	ce2 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     cd4:	687a      	ldr	r2, [r7, #4]
     cd6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     cda:	f2c0 037a 	movt	r3, #122	; 0x7a
     cde:	6013      	str	r3, [r2, #0]
      break;
     ce0:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ce6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cea:	685b      	ldr	r3, [r3, #4]
     cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     cf0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     cf2:	697b      	ldr	r3, [r7, #20]
     cf4:	091b      	lsrs	r3, r3, #4
     cf6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cf8:	f240 0314 	movw	r3, #20
     cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d00:	697a      	ldr	r2, [r7, #20]
     d02:	4413      	add	r3, r2
     d04:	781b      	ldrb	r3, [r3, #0]
     d06:	b2db      	uxtb	r3, r3
     d08:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	681a      	ldr	r2, [r3, #0]
     d0e:	68bb      	ldr	r3, [r7, #8]
     d10:	40da      	lsrs	r2, r3
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d1e:	685b      	ldr	r3, [r3, #4]
     d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     d24:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     d26:	697b      	ldr	r3, [r7, #20]
     d28:	0a1b      	lsrs	r3, r3, #8
     d2a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d2c:	f240 0314 	movw	r3, #20
     d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d34:	697a      	ldr	r2, [r7, #20]
     d36:	4413      	add	r3, r2
     d38:	781b      	ldrb	r3, [r3, #0]
     d3a:	b2db      	uxtb	r3, r3
     d3c:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	685a      	ldr	r2, [r3, #4]
     d42:	68bb      	ldr	r3, [r7, #8]
     d44:	40da      	lsrs	r2, r3
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d52:	685b      	ldr	r3, [r3, #4]
     d54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d58:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d5a:	697b      	ldr	r3, [r7, #20]
     d5c:	0adb      	lsrs	r3, r3, #11
     d5e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d60:	f240 0314 	movw	r3, #20
     d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d68:	697a      	ldr	r2, [r7, #20]
     d6a:	4413      	add	r3, r2
     d6c:	781b      	ldrb	r3, [r3, #0]
     d6e:	b2db      	uxtb	r3, r3
     d70:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	685a      	ldr	r2, [r3, #4]
     d76:	68bb      	ldr	r3, [r7, #8]
     d78:	40da      	lsrs	r2, r3
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d82:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d86:	685b      	ldr	r3, [r3, #4]
     d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d8c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d8e:	697b      	ldr	r3, [r7, #20]
     d90:	0b9b      	lsrs	r3, r3, #14
     d92:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d94:	f240 0324 	movw	r3, #36	; 0x24
     d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d9c:	697a      	ldr	r2, [r7, #20]
     d9e:	4413      	add	r3, r2
     da0:	781b      	ldrb	r3, [r3, #0]
     da2:	b2db      	uxtb	r3, r3
     da4:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	68da      	ldr	r2, [r3, #12]
     daa:	68bb      	ldr	r3, [r7, #8]
     dac:	fbb2 f2f3 	udiv	r2, r2, r3
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	611a      	str	r2, [r3, #16]
}
     db4:	371c      	adds	r7, #28
     db6:	46bd      	mov	sp, r7
     db8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop

00000dc0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6951      	ldr	r1, [r2, #20]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	615a      	str	r2, [r3, #20]
     dea:	e00c      	b.n	e06 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6951      	ldr	r1, [r2, #20]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	615a      	str	r2, [r3, #20]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	6991      	ldr	r1, [r2, #24]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	619a      	str	r2, [r3, #24]
     e3a:	e00c      	b.n	e56 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	6991      	ldr	r1, [r2, #24]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	619a      	str	r2, [r3, #24]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	69d1      	ldr	r1, [r2, #28]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	61da      	str	r2, [r3, #28]
     e8a:	e00c      	b.n	ea6 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	69d1      	ldr	r1, [r2, #28]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	61da      	str	r2, [r3, #28]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	68d1      	ldr	r1, [r2, #12]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	60da      	str	r2, [r3, #12]
     eda:	e00c      	b.n	ef6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	68d1      	ldr	r1, [r2, #12]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	60da      	str	r2, [r3, #12]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	6078      	str	r0, [r7, #4]
     f08:	460b      	mov	r3, r1
     f0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f0c:	78fb      	ldrb	r3, [r7, #3]
     f0e:	2b00      	cmp	r3, #0
     f10:	d00c      	beq.n	f2c <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f16:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f22:	6911      	ldr	r1, [r2, #16]
     f24:	687a      	ldr	r2, [r7, #4]
     f26:	430a      	orrs	r2, r1
     f28:	611a      	str	r2, [r3, #16]
     f2a:	e00c      	b.n	f46 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f30:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f38:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f3c:	6911      	ldr	r1, [r2, #16]
     f3e:	687a      	ldr	r2, [r7, #4]
     f40:	43d2      	mvns	r2, r2
     f42:	400a      	ands	r2, r1
     f44:	611a      	str	r2, [r3, #16]
  }
}
     f46:	370c      	adds	r7, #12
     f48:	46bd      	mov	sp, r7
     f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f4e:	4770      	bx	lr

00000f50 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f50:	b480      	push	{r7}
     f52:	b083      	sub	sp, #12
     f54:	af00      	add	r7, sp, #0
     f56:	4603      	mov	r3, r0
     f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f5a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f5e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f62:	79fa      	ldrb	r2, [r7, #7]
     f64:	601a      	str	r2, [r3, #0]
}
     f66:	370c      	adds	r7, #12
     f68:	46bd      	mov	sp, r7
     f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f6e:	4770      	bx	lr

00000f70 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f70:	b480      	push	{r7}
     f72:	b083      	sub	sp, #12
     f74:	af00      	add	r7, sp, #0
     f76:	4603      	mov	r3, r0
     f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f7a:	234c      	movs	r3, #76	; 0x4c
     f7c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f80:	79fa      	ldrb	r2, [r7, #7]
     f82:	601a      	str	r2, [r3, #0]
}
     f84:	370c      	adds	r7, #12
     f86:	46bd      	mov	sp, r7
     f88:	f85d 7b04 	ldr.w	r7, [sp], #4
     f8c:	4770      	bx	lr
     f8e:	bf00      	nop

00000f90 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f90:	b480      	push	{r7}
     f92:	b083      	sub	sp, #12
     f94:	af00      	add	r7, sp, #0
     f96:	4603      	mov	r3, r0
     f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f9a:	f241 0307 	movw	r3, #4103	; 0x1007
     f9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa2:	79fa      	ldrb	r2, [r7, #7]
     fa4:	701a      	strb	r2, [r3, #0]
}
     fa6:	370c      	adds	r7, #12
     fa8:	46bd      	mov	sp, r7
     faa:	f85d 7b04 	ldr.w	r7, [sp], #4
     fae:	4770      	bx	lr

00000fb0 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     fb0:	b480      	push	{r7}
     fb2:	b087      	sub	sp, #28
     fb4:	af00      	add	r7, sp, #0
     fb6:	4603      	mov	r3, r0
     fb8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     fba:	2300      	movs	r3, #0
     fbc:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     fbe:	2300      	movs	r3, #0
     fc0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     fc2:	2300      	movs	r3, #0
     fc4:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     fc6:	79fb      	ldrb	r3, [r7, #7]
     fc8:	095b      	lsrs	r3, r3, #5
     fca:	b2db      	uxtb	r3, r3
     fcc:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     fce:	68fb      	ldr	r3, [r7, #12]
     fd0:	2b01      	cmp	r3, #1
     fd2:	d106      	bne.n	fe2 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fdc:	681b      	ldr	r3, [r3, #0]
     fde:	617b      	str	r3, [r7, #20]
     fe0:	e00f      	b.n	1002 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     fe2:	68fb      	ldr	r3, [r7, #12]
     fe4:	2b02      	cmp	r3, #2
     fe6:	d106      	bne.n	ff6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	6a1b      	ldr	r3, [r3, #32]
     ff2:	617b      	str	r3, [r7, #20]
     ff4:	e005      	b.n	1002 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ffa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1000:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    1002:	79fb      	ldrb	r3, [r7, #7]
    1004:	f003 031f 	and.w	r3, r3, #31
    1008:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    100a:	68fb      	ldr	r3, [r7, #12]
    100c:	697a      	ldr	r2, [r7, #20]
    100e:	fa22 f303 	lsr.w	r3, r2, r3
    1012:	f003 0301 	and.w	r3, r3, #1
    1016:	2b00      	cmp	r3, #0
    1018:	d002      	beq.n	1020 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
    101a:	2301      	movs	r3, #1
    101c:	74fb      	strb	r3, [r7, #19]
    101e:	e001      	b.n	1024 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
    1020:	2300      	movs	r3, #0
    1022:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    1024:	7cfb      	ldrb	r3, [r7, #19]
}
    1026:	4618      	mov	r0, r3
    1028:	371c      	adds	r7, #28
    102a:	46bd      	mov	sp, r7
    102c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1030:	4770      	bx	lr
    1032:	bf00      	nop

00001034 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    1034:	b480      	push	{r7}
    1036:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    1038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    103c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1044:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1048:	6a52      	ldr	r2, [r2, #36]	; 0x24
    104a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    104e:	625a      	str	r2, [r3, #36]	; 0x24
}
    1050:	46bd      	mov	sp, r7
    1052:	f85d 7b04 	ldr.w	r7, [sp], #4
    1056:	4770      	bx	lr

00001058 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1058:	b480      	push	{r7}
    105a:	b085      	sub	sp, #20
    105c:	af00      	add	r7, sp, #0
    105e:	4603      	mov	r3, r0
    1060:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1062:	2300      	movs	r3, #0
    1064:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    106a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    106e:	689a      	ldr	r2, [r3, #8]
    1070:	79fb      	ldrb	r3, [r7, #7]
    1072:	4013      	ands	r3, r2
    1074:	2b00      	cmp	r3, #0
    1076:	d002      	beq.n	107e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1078:	2301      	movs	r3, #1
    107a:	73fb      	strb	r3, [r7, #15]
    107c:	e001      	b.n	1082 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    107e:	2300      	movs	r3, #0
    1080:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1082:	7bfb      	ldrb	r3, [r7, #15]
}
    1084:	4618      	mov	r0, r3
    1086:	3714      	adds	r7, #20
    1088:	46bd      	mov	sp, r7
    108a:	f85d 7b04 	ldr.w	r7, [sp], #4
    108e:	4770      	bx	lr

00001090 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1090:	b480      	push	{r7}
    1092:	b083      	sub	sp, #12
    1094:	af00      	add	r7, sp, #0
    1096:	4603      	mov	r3, r0
    1098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    109a:	f241 030a 	movw	r3, #4106	; 0x100a
    109e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10a2:	79fa      	ldrb	r2, [r7, #7]
    10a4:	701a      	strb	r2, [r3, #0]
}
    10a6:	370c      	adds	r7, #12
    10a8:	46bd      	mov	sp, r7
    10aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    10ae:	4770      	bx	lr

000010b0 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    10b0:	b580      	push	{r7, lr}
    10b2:	b082      	sub	sp, #8
    10b4:	af00      	add	r7, sp, #0
    10b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    10b8:	687a      	ldr	r2, [r7, #4]
    10ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
    10be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10c2:	429a      	cmp	r2, r3
    10c4:	d108      	bne.n	10d8 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    10c6:	2004      	movs	r0, #4
    10c8:	2101      	movs	r1, #1
    10ca:	f7ff fef1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    10ce:	2004      	movs	r0, #4
    10d0:	2100      	movs	r1, #0
    10d2:	f7ff feed 	bl	eb0 <RCC_APB2PeriphResetCmd>
    10d6:	e060      	b.n	119a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    10d8:	687a      	ldr	r2, [r7, #4]
    10da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    10de:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10e2:	429a      	cmp	r2, r3
    10e4:	d108      	bne.n	10f8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    10e6:	2008      	movs	r0, #8
    10e8:	2101      	movs	r1, #1
    10ea:	f7ff fee1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    10ee:	2008      	movs	r0, #8
    10f0:	2100      	movs	r1, #0
    10f2:	f7ff fedd 	bl	eb0 <RCC_APB2PeriphResetCmd>
    10f6:	e050      	b.n	119a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10f8:	687a      	ldr	r2, [r7, #4]
    10fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1102:	429a      	cmp	r2, r3
    1104:	d108      	bne.n	1118 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    1106:	2010      	movs	r0, #16
    1108:	2101      	movs	r1, #1
    110a:	f7ff fed1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    110e:	2010      	movs	r0, #16
    1110:	2100      	movs	r1, #0
    1112:	f7ff fecd 	bl	eb0 <RCC_APB2PeriphResetCmd>
    1116:	e040      	b.n	119a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    1118:	687a      	ldr	r2, [r7, #4]
    111a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    111e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1122:	429a      	cmp	r2, r3
    1124:	d108      	bne.n	1138 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    1126:	2020      	movs	r0, #32
    1128:	2101      	movs	r1, #1
    112a:	f7ff fec1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    112e:	2020      	movs	r0, #32
    1130:	2100      	movs	r1, #0
    1132:	f7ff febd 	bl	eb0 <RCC_APB2PeriphResetCmd>
    1136:	e030      	b.n	119a <GPIO_DeInit+0xea>
  }    
  else if (GPIOx == GPIOE)
    1138:	687a      	ldr	r2, [r7, #4]
    113a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    113e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1142:	429a      	cmp	r2, r3
    1144:	d108      	bne.n	1158 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1146:	2040      	movs	r0, #64	; 0x40
    1148:	2101      	movs	r1, #1
    114a:	f7ff feb1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    114e:	2040      	movs	r0, #64	; 0x40
    1150:	2100      	movs	r1, #0
    1152:	f7ff fead 	bl	eb0 <RCC_APB2PeriphResetCmd>
    1156:	e020      	b.n	119a <GPIO_DeInit+0xea>
  } 
  else if (GPIOx == GPIOF)
    1158:	687a      	ldr	r2, [r7, #4]
    115a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    115e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1162:	429a      	cmp	r2, r3
    1164:	d108      	bne.n	1178 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1166:	2080      	movs	r0, #128	; 0x80
    1168:	2101      	movs	r1, #1
    116a:	f7ff fea1 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    116e:	2080      	movs	r0, #128	; 0x80
    1170:	2100      	movs	r1, #0
    1172:	f7ff fe9d 	bl	eb0 <RCC_APB2PeriphResetCmd>
    1176:	e010      	b.n	119a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1178:	687a      	ldr	r2, [r7, #4]
    117a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    117e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1182:	429a      	cmp	r2, r3
    1184:	d109      	bne.n	119a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1186:	f44f 7080 	mov.w	r0, #256	; 0x100
    118a:	2101      	movs	r1, #1
    118c:	f7ff fe90 	bl	eb0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1190:	f44f 7080 	mov.w	r0, #256	; 0x100
    1194:	2100      	movs	r1, #0
    1196:	f7ff fe8b 	bl	eb0 <RCC_APB2PeriphResetCmd>
    }
  }
}
    119a:	3708      	adds	r7, #8
    119c:	46bd      	mov	sp, r7
    119e:	bd80      	pop	{r7, pc}

000011a0 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    11a0:	b580      	push	{r7, lr}
    11a2:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    11a4:	2001      	movs	r0, #1
    11a6:	2101      	movs	r1, #1
    11a8:	f7ff fe82 	bl	eb0 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    11ac:	2001      	movs	r0, #1
    11ae:	2100      	movs	r1, #0
    11b0:	f7ff fe7e 	bl	eb0 <RCC_APB2PeriphResetCmd>
}
    11b4:	bd80      	pop	{r7, pc}
    11b6:	bf00      	nop

000011b8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    11b8:	b480      	push	{r7}
    11ba:	b089      	sub	sp, #36	; 0x24
    11bc:	af00      	add	r7, sp, #0
    11be:	6078      	str	r0, [r7, #4]
    11c0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    11c2:	2300      	movs	r3, #0
    11c4:	61fb      	str	r3, [r7, #28]
    11c6:	2300      	movs	r3, #0
    11c8:	613b      	str	r3, [r7, #16]
    11ca:	2300      	movs	r3, #0
    11cc:	61bb      	str	r3, [r7, #24]
    11ce:	2300      	movs	r3, #0
    11d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    11d2:	2300      	movs	r3, #0
    11d4:	617b      	str	r3, [r7, #20]
    11d6:	2300      	movs	r3, #0
    11d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    11da:	683b      	ldr	r3, [r7, #0]
    11dc:	78db      	ldrb	r3, [r3, #3]
    11de:	f003 030f 	and.w	r3, r3, #15
    11e2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    11e4:	683b      	ldr	r3, [r7, #0]
    11e6:	78db      	ldrb	r3, [r3, #3]
    11e8:	f003 0310 	and.w	r3, r3, #16
    11ec:	2b00      	cmp	r3, #0
    11ee:	d004      	beq.n	11fa <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11f0:	683b      	ldr	r3, [r7, #0]
    11f2:	789b      	ldrb	r3, [r3, #2]
    11f4:	69fa      	ldr	r2, [r7, #28]
    11f6:	4313      	orrs	r3, r2
    11f8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11fa:	683b      	ldr	r3, [r7, #0]
    11fc:	881b      	ldrh	r3, [r3, #0]
    11fe:	b2db      	uxtb	r3, r3
    1200:	2b00      	cmp	r3, #0
    1202:	d044      	beq.n	128e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    1204:	687b      	ldr	r3, [r7, #4]
    1206:	681b      	ldr	r3, [r3, #0]
    1208:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    120a:	2300      	movs	r3, #0
    120c:	61bb      	str	r3, [r7, #24]
    120e:	e038      	b.n	1282 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    1210:	69bb      	ldr	r3, [r7, #24]
    1212:	2201      	movs	r2, #1
    1214:	fa02 f303 	lsl.w	r3, r2, r3
    1218:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	881b      	ldrh	r3, [r3, #0]
    121e:	461a      	mov	r2, r3
    1220:	68fb      	ldr	r3, [r7, #12]
    1222:	4013      	ands	r3, r2
    1224:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1226:	693a      	ldr	r2, [r7, #16]
    1228:	68fb      	ldr	r3, [r7, #12]
    122a:	429a      	cmp	r2, r3
    122c:	d126      	bne.n	127c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    122e:	69bb      	ldr	r3, [r7, #24]
    1230:	009b      	lsls	r3, r3, #2
    1232:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1234:	68fb      	ldr	r3, [r7, #12]
    1236:	220f      	movs	r2, #15
    1238:	fa02 f303 	lsl.w	r3, r2, r3
    123c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    123e:	68bb      	ldr	r3, [r7, #8]
    1240:	43db      	mvns	r3, r3
    1242:	697a      	ldr	r2, [r7, #20]
    1244:	4013      	ands	r3, r2
    1246:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	69fa      	ldr	r2, [r7, #28]
    124c:	fa02 f303 	lsl.w	r3, r2, r3
    1250:	697a      	ldr	r2, [r7, #20]
    1252:	4313      	orrs	r3, r2
    1254:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1256:	683b      	ldr	r3, [r7, #0]
    1258:	78db      	ldrb	r3, [r3, #3]
    125a:	2b28      	cmp	r3, #40	; 0x28
    125c:	d105      	bne.n	126a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    125e:	69bb      	ldr	r3, [r7, #24]
    1260:	2201      	movs	r2, #1
    1262:	409a      	lsls	r2, r3
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	615a      	str	r2, [r3, #20]
    1268:	e008      	b.n	127c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    126a:	683b      	ldr	r3, [r7, #0]
    126c:	78db      	ldrb	r3, [r3, #3]
    126e:	2b48      	cmp	r3, #72	; 0x48
    1270:	d104      	bne.n	127c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	2201      	movs	r2, #1
    1276:	409a      	lsls	r2, r3
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    127c:	69bb      	ldr	r3, [r7, #24]
    127e:	3301      	adds	r3, #1
    1280:	61bb      	str	r3, [r7, #24]
    1282:	69bb      	ldr	r3, [r7, #24]
    1284:	2b07      	cmp	r3, #7
    1286:	d9c3      	bls.n	1210 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	697a      	ldr	r2, [r7, #20]
    128c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    128e:	683b      	ldr	r3, [r7, #0]
    1290:	881b      	ldrh	r3, [r3, #0]
    1292:	2bff      	cmp	r3, #255	; 0xff
    1294:	d946      	bls.n	1324 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	685b      	ldr	r3, [r3, #4]
    129a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    129c:	2300      	movs	r3, #0
    129e:	61bb      	str	r3, [r7, #24]
    12a0:	e03a      	b.n	1318 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	fa02 f303 	lsl.w	r3, r2, r3
    12ac:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	881b      	ldrh	r3, [r3, #0]
    12b2:	461a      	mov	r2, r3
    12b4:	68fb      	ldr	r3, [r7, #12]
    12b6:	4013      	ands	r3, r2
    12b8:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    12ba:	693a      	ldr	r2, [r7, #16]
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	429a      	cmp	r2, r3
    12c0:	d127      	bne.n	1312 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	009b      	lsls	r3, r3, #2
    12c6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	220f      	movs	r2, #15
    12cc:	fa02 f303 	lsl.w	r3, r2, r3
    12d0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    12d2:	68bb      	ldr	r3, [r7, #8]
    12d4:	43db      	mvns	r3, r3
    12d6:	697a      	ldr	r2, [r7, #20]
    12d8:	4013      	ands	r3, r2
    12da:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    12dc:	68fb      	ldr	r3, [r7, #12]
    12de:	69fa      	ldr	r2, [r7, #28]
    12e0:	fa02 f303 	lsl.w	r3, r2, r3
    12e4:	697a      	ldr	r2, [r7, #20]
    12e6:	4313      	orrs	r3, r2
    12e8:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    12ea:	683b      	ldr	r3, [r7, #0]
    12ec:	78db      	ldrb	r3, [r3, #3]
    12ee:	2b28      	cmp	r3, #40	; 0x28
    12f0:	d105      	bne.n	12fe <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12f2:	69bb      	ldr	r3, [r7, #24]
    12f4:	3308      	adds	r3, #8
    12f6:	2201      	movs	r2, #1
    12f8:	409a      	lsls	r2, r3
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12fe:	683b      	ldr	r3, [r7, #0]
    1300:	78db      	ldrb	r3, [r3, #3]
    1302:	2b48      	cmp	r3, #72	; 0x48
    1304:	d105      	bne.n	1312 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1306:	69bb      	ldr	r3, [r7, #24]
    1308:	3308      	adds	r3, #8
    130a:	2201      	movs	r2, #1
    130c:	409a      	lsls	r2, r3
    130e:	687b      	ldr	r3, [r7, #4]
    1310:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1312:	69bb      	ldr	r3, [r7, #24]
    1314:	3301      	adds	r3, #1
    1316:	61bb      	str	r3, [r7, #24]
    1318:	69bb      	ldr	r3, [r7, #24]
    131a:	2b07      	cmp	r3, #7
    131c:	d9c1      	bls.n	12a2 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	697a      	ldr	r2, [r7, #20]
    1322:	605a      	str	r2, [r3, #4]
  }
}
    1324:	3724      	adds	r7, #36	; 0x24
    1326:	46bd      	mov	sp, r7
    1328:	f85d 7b04 	ldr.w	r7, [sp], #4
    132c:	4770      	bx	lr
    132e:	bf00      	nop

00001330 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1330:	b480      	push	{r7}
    1332:	b083      	sub	sp, #12
    1334:	af00      	add	r7, sp, #0
    1336:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    133e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1340:	687b      	ldr	r3, [r7, #4]
    1342:	2202      	movs	r2, #2
    1344:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	2204      	movs	r2, #4
    134a:	70da      	strb	r2, [r3, #3]
}
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	689a      	ldr	r2, [r3, #8]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	689b      	ldr	r3, [r3, #8]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b085      	sub	sp, #20
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    13b4:	2300      	movs	r3, #0
    13b6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    13b8:	687b      	ldr	r3, [r7, #4]
    13ba:	68da      	ldr	r2, [r3, #12]
    13bc:	887b      	ldrh	r3, [r7, #2]
    13be:	4013      	ands	r3, r2
    13c0:	2b00      	cmp	r3, #0
    13c2:	d002      	beq.n	13ca <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    13c4:	2301      	movs	r3, #1
    13c6:	73fb      	strb	r3, [r7, #15]
    13c8:	e001      	b.n	13ce <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    13ca:	2300      	movs	r3, #0
    13cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    13ce:	7bfb      	ldrb	r3, [r7, #15]
}
    13d0:	4618      	mov	r0, r3
    13d2:	3714      	adds	r7, #20
    13d4:	46bd      	mov	sp, r7
    13d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    13da:	4770      	bx	lr

000013dc <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    13dc:	b480      	push	{r7}
    13de:	b083      	sub	sp, #12
    13e0:	af00      	add	r7, sp, #0
    13e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	68db      	ldr	r3, [r3, #12]
    13e8:	b29b      	uxth	r3, r3
}
    13ea:	4618      	mov	r0, r3
    13ec:	370c      	adds	r7, #12
    13ee:	46bd      	mov	sp, r7
    13f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13f4:	4770      	bx	lr
    13f6:	bf00      	nop

000013f8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13f8:	b480      	push	{r7}
    13fa:	b083      	sub	sp, #12
    13fc:	af00      	add	r7, sp, #0
    13fe:	6078      	str	r0, [r7, #4]
    1400:	460b      	mov	r3, r1
    1402:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    1404:	887a      	ldrh	r2, [r7, #2]
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	611a      	str	r2, [r3, #16]
}
    140a:	370c      	adds	r7, #12
    140c:	46bd      	mov	sp, r7
    140e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1412:	4770      	bx	lr

00001414 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1414:	b480      	push	{r7}
    1416:	b083      	sub	sp, #12
    1418:	af00      	add	r7, sp, #0
    141a:	6078      	str	r0, [r7, #4]
    141c:	460b      	mov	r3, r1
    141e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    1420:	887a      	ldrh	r2, [r7, #2]
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	615a      	str	r2, [r3, #20]
}
    1426:	370c      	adds	r7, #12
    1428:	46bd      	mov	sp, r7
    142a:	f85d 7b04 	ldr.w	r7, [sp], #4
    142e:	4770      	bx	lr

00001430 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    1430:	b480      	push	{r7}
    1432:	b083      	sub	sp, #12
    1434:	af00      	add	r7, sp, #0
    1436:	6078      	str	r0, [r7, #4]
    1438:	4613      	mov	r3, r2
    143a:	460a      	mov	r2, r1
    143c:	807a      	strh	r2, [r7, #2]
    143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    1440:	787b      	ldrb	r3, [r7, #1]
    1442:	2b00      	cmp	r3, #0
    1444:	d003      	beq.n	144e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    1446:	887a      	ldrh	r2, [r7, #2]
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	611a      	str	r2, [r3, #16]
    144c:	e002      	b.n	1454 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    144e:	887a      	ldrh	r2, [r7, #2]
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	615a      	str	r2, [r3, #20]
  }
}
    1454:	370c      	adds	r7, #12
    1456:	46bd      	mov	sp, r7
    1458:	f85d 7b04 	ldr.w	r7, [sp], #4
    145c:	4770      	bx	lr
    145e:	bf00      	nop

00001460 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1460:	b480      	push	{r7}
    1462:	b083      	sub	sp, #12
    1464:	af00      	add	r7, sp, #0
    1466:	6078      	str	r0, [r7, #4]
    1468:	460b      	mov	r3, r1
    146a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    146c:	887a      	ldrh	r2, [r7, #2]
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	60da      	str	r2, [r3, #12]
}
    1472:	370c      	adds	r7, #12
    1474:	46bd      	mov	sp, r7
    1476:	f85d 7b04 	ldr.w	r7, [sp], #4
    147a:	4770      	bx	lr

0000147c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    147c:	b480      	push	{r7}
    147e:	b085      	sub	sp, #20
    1480:	af00      	add	r7, sp, #0
    1482:	6078      	str	r0, [r7, #4]
    1484:	460b      	mov	r3, r1
    1486:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    148c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    148e:	887b      	ldrh	r3, [r7, #2]
    1490:	68fa      	ldr	r2, [r7, #12]
    1492:	4313      	orrs	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	68fa      	ldr	r2, [r7, #12]
    149a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    149c:	887a      	ldrh	r2, [r7, #2]
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    14a2:	687b      	ldr	r3, [r7, #4]
    14a4:	68fa      	ldr	r2, [r7, #12]
    14a6:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	699b      	ldr	r3, [r3, #24]
    14ac:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    14ae:	687b      	ldr	r3, [r7, #4]
    14b0:	699b      	ldr	r3, [r3, #24]
    14b2:	60fb      	str	r3, [r7, #12]
}
    14b4:	3714      	adds	r7, #20
    14b6:	46bd      	mov	sp, r7
    14b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    14bc:	4770      	bx	lr
    14be:	bf00      	nop

000014c0 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    14c0:	b480      	push	{r7}
    14c2:	b085      	sub	sp, #20
    14c4:	af00      	add	r7, sp, #0
    14c6:	4602      	mov	r2, r0
    14c8:	460b      	mov	r3, r1
    14ca:	71fa      	strb	r2, [r7, #7]
    14cc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    14ce:	2300      	movs	r3, #0
    14d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    14d2:	2300      	movs	r3, #0
    14d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14d8:	681b      	ldr	r3, [r3, #0]
    14da:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    14dc:	68fa      	ldr	r2, [r7, #12]
    14de:	f64f 7380 	movw	r3, #65408	; 0xff80
    14e2:	4013      	ands	r3, r2
    14e4:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    14e6:	79fb      	ldrb	r3, [r7, #7]
    14e8:	011b      	lsls	r3, r3, #4
    14ea:	68fa      	ldr	r2, [r7, #12]
    14ec:	4313      	orrs	r3, r2
    14ee:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14f0:	79bb      	ldrb	r3, [r7, #6]
    14f2:	68fa      	ldr	r2, [r7, #12]
    14f4:	4313      	orrs	r3, r2
    14f6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14f8:	2300      	movs	r3, #0
    14fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14fe:	68fa      	ldr	r2, [r7, #12]
    1500:	601a      	str	r2, [r3, #0]
}
    1502:	3714      	adds	r7, #20
    1504:	46bd      	mov	sp, r7
    1506:	f85d 7b04 	ldr.w	r7, [sp], #4
    150a:	4770      	bx	lr

0000150c <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    150c:	b480      	push	{r7}
    150e:	b083      	sub	sp, #12
    1510:	af00      	add	r7, sp, #0
    1512:	4603      	mov	r3, r0
    1514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1516:	231c      	movs	r3, #28
    1518:	f2c4 2320 	movt	r3, #16928	; 0x4220
    151c:	79fa      	ldrb	r2, [r7, #7]
    151e:	601a      	str	r2, [r3, #0]
}
    1520:	370c      	adds	r7, #12
    1522:	46bd      	mov	sp, r7
    1524:	f85d 7b04 	ldr.w	r7, [sp], #4
    1528:	4770      	bx	lr
    152a:	bf00      	nop

0000152c <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    152c:	b480      	push	{r7}
    152e:	b087      	sub	sp, #28
    1530:	af00      	add	r7, sp, #0
    1532:	6078      	str	r0, [r7, #4]
    1534:	460b      	mov	r3, r1
    1536:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1538:	2300      	movs	r3, #0
    153a:	613b      	str	r3, [r7, #16]
    153c:	2300      	movs	r3, #0
    153e:	60fb      	str	r3, [r7, #12]
    1540:	2300      	movs	r3, #0
    1542:	617b      	str	r3, [r7, #20]
    1544:	2300      	movs	r3, #0
    1546:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1548:	687b      	ldr	r3, [r7, #4]
    154a:	2b00      	cmp	r3, #0
    154c:	da05      	bge.n	155a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    154e:	2300      	movs	r3, #0
    1550:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1554:	69db      	ldr	r3, [r3, #28]
    1556:	617b      	str	r3, [r7, #20]
    1558:	e004      	b.n	1564 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    155a:	2300      	movs	r3, #0
    155c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1560:	685b      	ldr	r3, [r3, #4]
    1562:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1564:	687b      	ldr	r3, [r7, #4]
    1566:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    156a:	0c1b      	lsrs	r3, r3, #16
    156c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	b29b      	uxth	r3, r3
    1572:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    157a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    157e:	d10e      	bne.n	159e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1580:	697b      	ldr	r3, [r7, #20]
    1582:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1586:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1588:	2300      	movs	r3, #0
    158a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    158e:	2200      	movs	r2, #0
    1590:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1594:	6852      	ldr	r2, [r2, #4]
    1596:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    159a:	605a      	str	r2, [r3, #4]
    159c:	e021      	b.n	15e2 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    159e:	687b      	ldr	r3, [r7, #4]
    15a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    15a4:	2b00      	cmp	r3, #0
    15a6:	d00e      	beq.n	15c6 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    15a8:	68bb      	ldr	r3, [r7, #8]
    15aa:	2203      	movs	r2, #3
    15ac:	fa02 f303 	lsl.w	r3, r2, r3
    15b0:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    15b2:	68fb      	ldr	r3, [r7, #12]
    15b4:	43db      	mvns	r3, r3
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	4013      	ands	r3, r2
    15ba:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    15bc:	697b      	ldr	r3, [r7, #20]
    15be:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    15c2:	617b      	str	r3, [r7, #20]
    15c4:	e00d      	b.n	15e2 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	0d5b      	lsrs	r3, r3, #21
    15ca:	011b      	lsls	r3, r3, #4
    15cc:	693a      	ldr	r2, [r7, #16]
    15ce:	fa02 f303 	lsl.w	r3, r2, r3
    15d2:	43db      	mvns	r3, r3
    15d4:	697a      	ldr	r2, [r7, #20]
    15d6:	4013      	ands	r3, r2
    15d8:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    15da:	697b      	ldr	r3, [r7, #20]
    15dc:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    15e0:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    15e2:	78fb      	ldrb	r3, [r7, #3]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d008      	beq.n	15fa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    15e8:	687b      	ldr	r3, [r7, #4]
    15ea:	0d5b      	lsrs	r3, r3, #21
    15ec:	011b      	lsls	r3, r3, #4
    15ee:	693a      	ldr	r2, [r7, #16]
    15f0:	fa02 f303 	lsl.w	r3, r2, r3
    15f4:	697a      	ldr	r2, [r7, #20]
    15f6:	4313      	orrs	r3, r2
    15f8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	2b00      	cmp	r3, #0
    15fe:	da05      	bge.n	160c <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    1600:	2300      	movs	r3, #0
    1602:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1606:	697a      	ldr	r2, [r7, #20]
    1608:	61da      	str	r2, [r3, #28]
    160a:	e004      	b.n	1616 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    160c:	2300      	movs	r3, #0
    160e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1612:	697a      	ldr	r2, [r7, #20]
    1614:	605a      	str	r2, [r3, #4]
  }  
}
    1616:	371c      	adds	r7, #28
    1618:	46bd      	mov	sp, r7
    161a:	f85d 7b04 	ldr.w	r7, [sp], #4
    161e:	4770      	bx	lr

00001620 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1620:	b490      	push	{r4, r7}
    1622:	b084      	sub	sp, #16
    1624:	af00      	add	r7, sp, #0
    1626:	4602      	mov	r2, r0
    1628:	460b      	mov	r3, r1
    162a:	71fa      	strb	r2, [r7, #7]
    162c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    162e:	2300      	movs	r3, #0
    1630:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    1632:	79bb      	ldrb	r3, [r7, #6]
    1634:	f003 0303 	and.w	r3, r3, #3
    1638:	009b      	lsls	r3, r3, #2
    163a:	220f      	movs	r2, #15
    163c:	fa02 f303 	lsl.w	r3, r2, r3
    1640:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1642:	2300      	movs	r3, #0
    1644:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1648:	79ba      	ldrb	r2, [r7, #6]
    164a:	0892      	lsrs	r2, r2, #2
    164c:	b2d2      	uxtb	r2, r2
    164e:	4610      	mov	r0, r2
    1650:	2200      	movs	r2, #0
    1652:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1656:	79b9      	ldrb	r1, [r7, #6]
    1658:	0889      	lsrs	r1, r1, #2
    165a:	b2c9      	uxtb	r1, r1
    165c:	3102      	adds	r1, #2
    165e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1662:	68fa      	ldr	r2, [r7, #12]
    1664:	43d2      	mvns	r2, r2
    1666:	4011      	ands	r1, r2
    1668:	1c82      	adds	r2, r0, #2
    166a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    166e:	2300      	movs	r3, #0
    1670:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1674:	79ba      	ldrb	r2, [r7, #6]
    1676:	0892      	lsrs	r2, r2, #2
    1678:	b2d2      	uxtb	r2, r2
    167a:	4610      	mov	r0, r2
    167c:	2200      	movs	r2, #0
    167e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1682:	79b9      	ldrb	r1, [r7, #6]
    1684:	0889      	lsrs	r1, r1, #2
    1686:	b2c9      	uxtb	r1, r1
    1688:	3102      	adds	r1, #2
    168a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    168e:	79fc      	ldrb	r4, [r7, #7]
    1690:	79ba      	ldrb	r2, [r7, #6]
    1692:	f002 0203 	and.w	r2, r2, #3
    1696:	0092      	lsls	r2, r2, #2
    1698:	fa04 f202 	lsl.w	r2, r4, r2
    169c:	4311      	orrs	r1, r2
    169e:	1c82      	adds	r2, r0, #2
    16a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    16a4:	3710      	adds	r7, #16
    16a6:	46bd      	mov	sp, r7
    16a8:	bc90      	pop	{r4, r7}
    16aa:	4770      	bx	lr

000016ac <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    16ac:	b480      	push	{r7}
    16ae:	b083      	sub	sp, #12
    16b0:	af00      	add	r7, sp, #0
    16b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    16b4:	23dc      	movs	r3, #220	; 0xdc
    16b6:	f2c4 2320 	movt	r3, #16928	; 0x4220
    16ba:	687a      	ldr	r2, [r7, #4]
    16bc:	601a      	str	r2, [r3, #0]
}
    16be:	370c      	adds	r7, #12
    16c0:	46bd      	mov	sp, r7
    16c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    16c6:	4770      	bx	lr

000016c8 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    16c8:	b580      	push	{r7, lr}
    16ca:	b082      	sub	sp, #8
    16cc:	af00      	add	r7, sp, #0
    16ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    16d0:	687a      	ldr	r2, [r7, #4]
    16d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    16d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    16da:	429a      	cmp	r2, r3
    16dc:	d10a      	bne.n	16f4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    16de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    16e2:	2101      	movs	r1, #1
    16e4:	f7ff fbe4 	bl	eb0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    16e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    16ec:	2100      	movs	r1, #0
    16ee:	f7ff fbdf 	bl	eb0 <RCC_APB2PeriphResetCmd>
    16f2:	e046      	b.n	1782 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16f4:	687a      	ldr	r2, [r7, #4]
    16f6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16fe:	429a      	cmp	r2, r3
    1700:	d10a      	bne.n	1718 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    1702:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1706:	2101      	movs	r1, #1
    1708:	f7ff fbfa 	bl	f00 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    170c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1710:	2100      	movs	r1, #0
    1712:	f7ff fbf5 	bl	f00 <RCC_APB1PeriphResetCmd>
    1716:	e034      	b.n	1782 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    1718:	687a      	ldr	r2, [r7, #4]
    171a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    171e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1722:	429a      	cmp	r2, r3
    1724:	d10a      	bne.n	173c <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    1726:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    172a:	2101      	movs	r1, #1
    172c:	f7ff fbe8 	bl	f00 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    1730:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1734:	2100      	movs	r1, #0
    1736:	f7ff fbe3 	bl	f00 <RCC_APB1PeriphResetCmd>
    173a:	e022      	b.n	1782 <USART_DeInit+0xba>
  }    
  else if (USARTx == UART4)
    173c:	687a      	ldr	r2, [r7, #4]
    173e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    1742:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1746:	429a      	cmp	r2, r3
    1748:	d10a      	bne.n	1760 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    174a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    174e:	2101      	movs	r1, #1
    1750:	f7ff fbd6 	bl	f00 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1754:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1758:	2100      	movs	r1, #0
    175a:	f7ff fbd1 	bl	f00 <RCC_APB1PeriphResetCmd>
    175e:	e010      	b.n	1782 <USART_DeInit+0xba>
  }    
  else
  {
    if (USARTx == UART5)
    1760:	687a      	ldr	r2, [r7, #4]
    1762:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1766:	f2c4 0300 	movt	r3, #16384	; 0x4000
    176a:	429a      	cmp	r2, r3
    176c:	d109      	bne.n	1782 <USART_DeInit+0xba>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    176e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1772:	2101      	movs	r1, #1
    1774:	f7ff fbc4 	bl	f00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1778:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    177c:	2100      	movs	r1, #0
    177e:	f7ff fbbf 	bl	f00 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1782:	3708      	adds	r7, #8
    1784:	46bd      	mov	sp, r7
    1786:	bd80      	pop	{r7, pc}

00001788 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1788:	b580      	push	{r7, lr}
    178a:	b08c      	sub	sp, #48	; 0x30
    178c:	af00      	add	r7, sp, #0
    178e:	6078      	str	r0, [r7, #4]
    1790:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1792:	2300      	movs	r3, #0
    1794:	62fb      	str	r3, [r7, #44]	; 0x2c
    1796:	2300      	movs	r3, #0
    1798:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    179a:	2300      	movs	r3, #0
    179c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    179e:	2300      	movs	r3, #0
    17a0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    17a2:	2300      	movs	r3, #0
    17a4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	8a1b      	ldrh	r3, [r3, #16]
    17ae:	b29b      	uxth	r3, r3
    17b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    17b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17b4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    17b8:	4013      	ands	r3, r2
    17ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    17bc:	683b      	ldr	r3, [r7, #0]
    17be:	88db      	ldrh	r3, [r3, #6]
    17c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17c2:	4313      	orrs	r3, r2
    17c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    17c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17c8:	b29a      	uxth	r2, r3
    17ca:	687b      	ldr	r3, [r7, #4]
    17cc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	899b      	ldrh	r3, [r3, #12]
    17d2:	b29b      	uxth	r3, r3
    17d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    17d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17d8:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    17dc:	4013      	ands	r3, r2
    17de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17e0:	683b      	ldr	r3, [r7, #0]
    17e2:	889a      	ldrh	r2, [r3, #4]
    17e4:	683b      	ldr	r3, [r7, #0]
    17e6:	891b      	ldrh	r3, [r3, #8]
    17e8:	4313      	orrs	r3, r2
    17ea:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    17ec:	683b      	ldr	r3, [r7, #0]
    17ee:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17f0:	4313      	orrs	r3, r2
    17f2:	b29b      	uxth	r3, r3
    17f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17f6:	4313      	orrs	r3, r2
    17f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17fc:	b29a      	uxth	r2, r3
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	8a9b      	ldrh	r3, [r3, #20]
    1806:	b29b      	uxth	r3, r3
    1808:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    180a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    180c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    1810:	4013      	ands	r3, r2
    1812:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    1814:	683b      	ldr	r3, [r7, #0]
    1816:	899b      	ldrh	r3, [r3, #12]
    1818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    181a:	4313      	orrs	r3, r2
    181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1820:	b29a      	uxth	r2, r3
    1822:	687b      	ldr	r3, [r7, #4]
    1824:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    1826:	f107 0308 	add.w	r3, r7, #8
    182a:	4618      	mov	r0, r3
    182c:	f7ff f9ea 	bl	c04 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    1830:	69fa      	ldr	r2, [r7, #28]
    1832:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1836:	f2c4 0301 	movt	r3, #16385	; 0x4001
    183a:	429a      	cmp	r2, r3
    183c:	d102      	bne.n	1844 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    183e:	697b      	ldr	r3, [r7, #20]
    1840:	62bb      	str	r3, [r7, #40]	; 0x28
    1842:	e001      	b.n	1848 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    1844:	693b      	ldr	r3, [r7, #16]
    1846:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1848:	687b      	ldr	r3, [r7, #4]
    184a:	899b      	ldrh	r3, [r3, #12]
    184c:	b29b      	uxth	r3, r3
    184e:	b29b      	uxth	r3, r3
    1850:	b21b      	sxth	r3, r3
    1852:	2b00      	cmp	r3, #0
    1854:	da0c      	bge.n	1870 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
    1856:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1858:	4613      	mov	r3, r2
    185a:	009b      	lsls	r3, r3, #2
    185c:	4413      	add	r3, r2
    185e:	009a      	lsls	r2, r3, #2
    1860:	441a      	add	r2, r3
    1862:	683b      	ldr	r3, [r7, #0]
    1864:	681b      	ldr	r3, [r3, #0]
    1866:	005b      	lsls	r3, r3, #1
    1868:	fbb2 f3f3 	udiv	r3, r2, r3
    186c:	627b      	str	r3, [r7, #36]	; 0x24
    186e:	e00b      	b.n	1888 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
    1870:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1872:	4613      	mov	r3, r2
    1874:	009b      	lsls	r3, r3, #2
    1876:	4413      	add	r3, r2
    1878:	009a      	lsls	r2, r3, #2
    187a:	441a      	add	r2, r3
    187c:	683b      	ldr	r3, [r7, #0]
    187e:	681b      	ldr	r3, [r3, #0]
    1880:	009b      	lsls	r3, r3, #2
    1882:	fbb2 f3f3 	udiv	r3, r2, r3
    1886:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    188a:	f248 531f 	movw	r3, #34079	; 0x851f
    188e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1892:	fba3 1302 	umull	r1, r3, r3, r2
    1896:	095b      	lsrs	r3, r3, #5
    1898:	011b      	lsls	r3, r3, #4
    189a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    189e:	091b      	lsrs	r3, r3, #4
    18a0:	2264      	movs	r2, #100	; 0x64
    18a2:	fb02 f303 	mul.w	r3, r2, r3
    18a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    18a8:	1ad3      	subs	r3, r2, r3
    18aa:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    18ac:	687b      	ldr	r3, [r7, #4]
    18ae:	899b      	ldrh	r3, [r3, #12]
    18b0:	b29b      	uxth	r3, r3
    18b2:	b29b      	uxth	r3, r3
    18b4:	b21b      	sxth	r3, r3
    18b6:	2b00      	cmp	r3, #0
    18b8:	da10      	bge.n	18dc <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    18ba:	6a3b      	ldr	r3, [r7, #32]
    18bc:	00db      	lsls	r3, r3, #3
    18be:	f103 0232 	add.w	r2, r3, #50	; 0x32
    18c2:	f248 531f 	movw	r3, #34079	; 0x851f
    18c6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    18ca:	fba3 1302 	umull	r1, r3, r3, r2
    18ce:	095b      	lsrs	r3, r3, #5
    18d0:	f003 0307 	and.w	r3, r3, #7
    18d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18d6:	4313      	orrs	r3, r2
    18d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    18da:	e00f      	b.n	18fc <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    18dc:	6a3b      	ldr	r3, [r7, #32]
    18de:	011b      	lsls	r3, r3, #4
    18e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
    18e4:	f248 531f 	movw	r3, #34079	; 0x851f
    18e8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    18ec:	fba3 1302 	umull	r1, r3, r3, r2
    18f0:	095b      	lsrs	r3, r3, #5
    18f2:	f003 030f 	and.w	r3, r3, #15
    18f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18f8:	4313      	orrs	r3, r2
    18fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18fe:	b29a      	uxth	r2, r3
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	811a      	strh	r2, [r3, #8]
}
    1904:	3730      	adds	r7, #48	; 0x30
    1906:	46bd      	mov	sp, r7
    1908:	bd80      	pop	{r7, pc}
    190a:	bf00      	nop

0000190c <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    190c:	b480      	push	{r7}
    190e:	b083      	sub	sp, #12
    1910:	af00      	add	r7, sp, #0
    1912:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    191a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    191c:	687b      	ldr	r3, [r7, #4]
    191e:	2200      	movs	r2, #0
    1920:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	2200      	movs	r2, #0
    1926:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    1928:	687b      	ldr	r3, [r7, #4]
    192a:	2200      	movs	r2, #0
    192c:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	220c      	movs	r2, #12
    1932:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	2200      	movs	r2, #0
    1938:	819a      	strh	r2, [r3, #12]
}
    193a:	370c      	adds	r7, #12
    193c:	46bd      	mov	sp, r7
    193e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1942:	4770      	bx	lr

00001944 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1944:	b480      	push	{r7}
    1946:	b085      	sub	sp, #20
    1948:	af00      	add	r7, sp, #0
    194a:	6078      	str	r0, [r7, #4]
    194c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    194e:	2300      	movs	r3, #0
    1950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1952:	687b      	ldr	r3, [r7, #4]
    1954:	8a1b      	ldrh	r3, [r3, #16]
    1956:	b29b      	uxth	r3, r3
    1958:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    195a:	68fa      	ldr	r2, [r7, #12]
    195c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1960:	4013      	ands	r3, r2
    1962:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    1964:	683b      	ldr	r3, [r7, #0]
    1966:	881a      	ldrh	r2, [r3, #0]
    1968:	683b      	ldr	r3, [r7, #0]
    196a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    196c:	4313      	orrs	r3, r2
    196e:	b29a      	uxth	r2, r3
    1970:	683b      	ldr	r3, [r7, #0]
    1972:	889b      	ldrh	r3, [r3, #4]
    1974:	4313      	orrs	r3, r2
    1976:	b29a      	uxth	r2, r3
    1978:	683b      	ldr	r3, [r7, #0]
    197a:	88db      	ldrh	r3, [r3, #6]
    197c:	4313      	orrs	r3, r2
    197e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    1980:	68fa      	ldr	r2, [r7, #12]
    1982:	4313      	orrs	r3, r2
    1984:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1986:	68fb      	ldr	r3, [r7, #12]
    1988:	b29a      	uxth	r2, r3
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	821a      	strh	r2, [r3, #16]
}
    198e:	3714      	adds	r7, #20
    1990:	46bd      	mov	sp, r7
    1992:	f85d 7b04 	ldr.w	r7, [sp], #4
    1996:	4770      	bx	lr

00001998 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1998:	b480      	push	{r7}
    199a:	b083      	sub	sp, #12
    199c:	af00      	add	r7, sp, #0
    199e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	2200      	movs	r2, #0
    19a4:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    19a6:	687b      	ldr	r3, [r7, #4]
    19a8:	2200      	movs	r2, #0
    19aa:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	2200      	movs	r2, #0
    19b0:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    19b2:	687b      	ldr	r3, [r7, #4]
    19b4:	2200      	movs	r2, #0
    19b6:	80da      	strh	r2, [r3, #6]
}
    19b8:	370c      	adds	r7, #12
    19ba:	46bd      	mov	sp, r7
    19bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    19c0:	4770      	bx	lr
    19c2:	bf00      	nop

000019c4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    19c4:	b480      	push	{r7}
    19c6:	b083      	sub	sp, #12
    19c8:	af00      	add	r7, sp, #0
    19ca:	6078      	str	r0, [r7, #4]
    19cc:	460b      	mov	r3, r1
    19ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    19d0:	78fb      	ldrb	r3, [r7, #3]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d008      	beq.n	19e8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    19d6:	687b      	ldr	r3, [r7, #4]
    19d8:	899b      	ldrh	r3, [r3, #12]
    19da:	b29b      	uxth	r3, r3
    19dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    19e0:	b29a      	uxth	r2, r3
    19e2:	687b      	ldr	r3, [r7, #4]
    19e4:	819a      	strh	r2, [r3, #12]
    19e6:	e007      	b.n	19f8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	899b      	ldrh	r3, [r3, #12]
    19ec:	b29b      	uxth	r3, r3
    19ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19f2:	b29a      	uxth	r2, r3
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	819a      	strh	r2, [r3, #12]
  }
}
    19f8:	370c      	adds	r7, #12
    19fa:	46bd      	mov	sp, r7
    19fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a00:	4770      	bx	lr
    1a02:	bf00      	nop

00001a04 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    1a04:	b480      	push	{r7}
    1a06:	b087      	sub	sp, #28
    1a08:	af00      	add	r7, sp, #0
    1a0a:	6078      	str	r0, [r7, #4]
    1a0c:	4613      	mov	r3, r2
    1a0e:	460a      	mov	r2, r1
    1a10:	807a      	strh	r2, [r7, #2]
    1a12:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    1a14:	2300      	movs	r3, #0
    1a16:	613b      	str	r3, [r7, #16]
    1a18:	2300      	movs	r3, #0
    1a1a:	60fb      	str	r3, [r7, #12]
    1a1c:	2300      	movs	r3, #0
    1a1e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    1a20:	2300      	movs	r3, #0
    1a22:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1a28:	887b      	ldrh	r3, [r7, #2]
    1a2a:	b2db      	uxtb	r3, r3
    1a2c:	095b      	lsrs	r3, r3, #5
    1a2e:	b2db      	uxtb	r3, r3
    1a30:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    1a32:	887b      	ldrh	r3, [r7, #2]
    1a34:	f003 031f 	and.w	r3, r3, #31
    1a38:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    1a3a:	68fb      	ldr	r3, [r7, #12]
    1a3c:	2201      	movs	r2, #1
    1a3e:	fa02 f303 	lsl.w	r3, r2, r3
    1a42:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    1a44:	693b      	ldr	r3, [r7, #16]
    1a46:	2b01      	cmp	r3, #1
    1a48:	d103      	bne.n	1a52 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    1a4a:	697b      	ldr	r3, [r7, #20]
    1a4c:	330c      	adds	r3, #12
    1a4e:	617b      	str	r3, [r7, #20]
    1a50:	e009      	b.n	1a66 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a52:	693b      	ldr	r3, [r7, #16]
    1a54:	2b02      	cmp	r3, #2
    1a56:	d103      	bne.n	1a60 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a58:	697b      	ldr	r3, [r7, #20]
    1a5a:	3310      	adds	r3, #16
    1a5c:	617b      	str	r3, [r7, #20]
    1a5e:	e002      	b.n	1a66 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    1a60:	697b      	ldr	r3, [r7, #20]
    1a62:	3314      	adds	r3, #20
    1a64:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a66:	787b      	ldrb	r3, [r7, #1]
    1a68:	2b00      	cmp	r3, #0
    1a6a:	d006      	beq.n	1a7a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a6c:	697b      	ldr	r3, [r7, #20]
    1a6e:	697a      	ldr	r2, [r7, #20]
    1a70:	6811      	ldr	r1, [r2, #0]
    1a72:	68ba      	ldr	r2, [r7, #8]
    1a74:	430a      	orrs	r2, r1
    1a76:	601a      	str	r2, [r3, #0]
    1a78:	e006      	b.n	1a88 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a7a:	697b      	ldr	r3, [r7, #20]
    1a7c:	697a      	ldr	r2, [r7, #20]
    1a7e:	6811      	ldr	r1, [r2, #0]
    1a80:	68ba      	ldr	r2, [r7, #8]
    1a82:	43d2      	mvns	r2, r2
    1a84:	400a      	ands	r2, r1
    1a86:	601a      	str	r2, [r3, #0]
  }
}
    1a88:	371c      	adds	r7, #28
    1a8a:	46bd      	mov	sp, r7
    1a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a90:	4770      	bx	lr
    1a92:	bf00      	nop

00001a94 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a94:	b480      	push	{r7}
    1a96:	b083      	sub	sp, #12
    1a98:	af00      	add	r7, sp, #0
    1a9a:	6078      	str	r0, [r7, #4]
    1a9c:	4613      	mov	r3, r2
    1a9e:	460a      	mov	r2, r1
    1aa0:	807a      	strh	r2, [r7, #2]
    1aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    1aa4:	787b      	ldrb	r3, [r7, #1]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	d008      	beq.n	1abc <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	8a9b      	ldrh	r3, [r3, #20]
    1aae:	b29a      	uxth	r2, r3
    1ab0:	887b      	ldrh	r3, [r7, #2]
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	829a      	strh	r2, [r3, #20]
    1aba:	e009      	b.n	1ad0 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1abc:	687b      	ldr	r3, [r7, #4]
    1abe:	8a9b      	ldrh	r3, [r3, #20]
    1ac0:	b29a      	uxth	r2, r3
    1ac2:	887b      	ldrh	r3, [r7, #2]
    1ac4:	43db      	mvns	r3, r3
    1ac6:	b29b      	uxth	r3, r3
    1ac8:	4013      	ands	r3, r2
    1aca:	b29a      	uxth	r2, r3
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	829a      	strh	r2, [r3, #20]
  }
}
    1ad0:	370c      	adds	r7, #12
    1ad2:	46bd      	mov	sp, r7
    1ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ad8:	4770      	bx	lr
    1ada:	bf00      	nop

00001adc <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1adc:	b480      	push	{r7}
    1ade:	b083      	sub	sp, #12
    1ae0:	af00      	add	r7, sp, #0
    1ae2:	6078      	str	r0, [r7, #4]
    1ae4:	460b      	mov	r3, r1
    1ae6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1ae8:	687b      	ldr	r3, [r7, #4]
    1aea:	8a1b      	ldrh	r3, [r3, #16]
    1aec:	b29b      	uxth	r3, r3
    1aee:	f023 030f 	bic.w	r3, r3, #15
    1af2:	b29a      	uxth	r2, r3
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1af8:	687b      	ldr	r3, [r7, #4]
    1afa:	8a1b      	ldrh	r3, [r3, #16]
    1afc:	b29a      	uxth	r2, r3
    1afe:	78fb      	ldrb	r3, [r7, #3]
    1b00:	b29b      	uxth	r3, r3
    1b02:	4313      	orrs	r3, r2
    1b04:	b29a      	uxth	r2, r3
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	821a      	strh	r2, [r3, #16]
}
    1b0a:	370c      	adds	r7, #12
    1b0c:	46bd      	mov	sp, r7
    1b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b12:	4770      	bx	lr

00001b14 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1b14:	b480      	push	{r7}
    1b16:	b083      	sub	sp, #12
    1b18:	af00      	add	r7, sp, #0
    1b1a:	6078      	str	r0, [r7, #4]
    1b1c:	460b      	mov	r3, r1
    1b1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	899b      	ldrh	r3, [r3, #12]
    1b34:	b29a      	uxth	r2, r3
    1b36:	887b      	ldrh	r3, [r7, #2]
    1b38:	4313      	orrs	r3, r2
    1b3a:	b29a      	uxth	r2, r3
    1b3c:	687b      	ldr	r3, [r7, #4]
    1b3e:	819a      	strh	r2, [r3, #12]
}
    1b40:	370c      	adds	r7, #12
    1b42:	46bd      	mov	sp, r7
    1b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b48:	4770      	bx	lr
    1b4a:	bf00      	nop

00001b4c <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b4c:	b480      	push	{r7}
    1b4e:	b083      	sub	sp, #12
    1b50:	af00      	add	r7, sp, #0
    1b52:	6078      	str	r0, [r7, #4]
    1b54:	460b      	mov	r3, r1
    1b56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    1b58:	78fb      	ldrb	r3, [r7, #3]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d008      	beq.n	1b70 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b5e:	687b      	ldr	r3, [r7, #4]
    1b60:	899b      	ldrh	r3, [r3, #12]
    1b62:	b29b      	uxth	r3, r3
    1b64:	f043 0302 	orr.w	r3, r3, #2
    1b68:	b29a      	uxth	r2, r3
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	819a      	strh	r2, [r3, #12]
    1b6e:	e007      	b.n	1b80 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b70:	687b      	ldr	r3, [r7, #4]
    1b72:	899b      	ldrh	r3, [r3, #12]
    1b74:	b29b      	uxth	r3, r3
    1b76:	f023 0302 	bic.w	r3, r3, #2
    1b7a:	b29a      	uxth	r2, r3
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	819a      	strh	r2, [r3, #12]
  }
}
    1b80:	370c      	adds	r7, #12
    1b82:	46bd      	mov	sp, r7
    1b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b88:	4770      	bx	lr
    1b8a:	bf00      	nop

00001b8c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b8c:	b480      	push	{r7}
    1b8e:	b083      	sub	sp, #12
    1b90:	af00      	add	r7, sp, #0
    1b92:	6078      	str	r0, [r7, #4]
    1b94:	460b      	mov	r3, r1
    1b96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f023 0320 	bic.w	r3, r3, #32
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    1ba8:	687b      	ldr	r3, [r7, #4]
    1baa:	8a1b      	ldrh	r3, [r3, #16]
    1bac:	b29a      	uxth	r2, r3
    1bae:	887b      	ldrh	r3, [r7, #2]
    1bb0:	4313      	orrs	r3, r2
    1bb2:	b29a      	uxth	r2, r3
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	821a      	strh	r2, [r3, #16]
}
    1bb8:	370c      	adds	r7, #12
    1bba:	46bd      	mov	sp, r7
    1bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bc0:	4770      	bx	lr
    1bc2:	bf00      	nop

00001bc4 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1bc4:	b480      	push	{r7}
    1bc6:	b083      	sub	sp, #12
    1bc8:	af00      	add	r7, sp, #0
    1bca:	6078      	str	r0, [r7, #4]
    1bcc:	460b      	mov	r3, r1
    1bce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1bd0:	78fb      	ldrb	r3, [r7, #3]
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d008      	beq.n	1be8 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1bd6:	687b      	ldr	r3, [r7, #4]
    1bd8:	8a1b      	ldrh	r3, [r3, #16]
    1bda:	b29b      	uxth	r3, r3
    1bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1be0:	b29a      	uxth	r2, r3
    1be2:	687b      	ldr	r3, [r7, #4]
    1be4:	821a      	strh	r2, [r3, #16]
    1be6:	e007      	b.n	1bf8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1be8:	687b      	ldr	r3, [r7, #4]
    1bea:	8a1b      	ldrh	r3, [r3, #16]
    1bec:	b29b      	uxth	r3, r3
    1bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1bf2:	b29a      	uxth	r2, r3
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	821a      	strh	r2, [r3, #16]
  }
}
    1bf8:	370c      	adds	r7, #12
    1bfa:	46bd      	mov	sp, r7
    1bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c00:	4770      	bx	lr
    1c02:	bf00      	nop

00001c04 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1c04:	b480      	push	{r7}
    1c06:	b083      	sub	sp, #12
    1c08:	af00      	add	r7, sp, #0
    1c0a:	6078      	str	r0, [r7, #4]
    1c0c:	460b      	mov	r3, r1
    1c0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1c10:	887b      	ldrh	r3, [r7, #2]
    1c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1c16:	b29a      	uxth	r2, r3
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	809a      	strh	r2, [r3, #4]
}
    1c1c:	370c      	adds	r7, #12
    1c1e:	46bd      	mov	sp, r7
    1c20:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c24:	4770      	bx	lr
    1c26:	bf00      	nop

00001c28 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1c28:	b480      	push	{r7}
    1c2a:	b083      	sub	sp, #12
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	889b      	ldrh	r3, [r3, #4]
    1c34:	b29b      	uxth	r3, r3
    1c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1c3a:	b29b      	uxth	r3, r3
}
    1c3c:	4618      	mov	r0, r3
    1c3e:	370c      	adds	r7, #12
    1c40:	46bd      	mov	sp, r7
    1c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c46:	4770      	bx	lr

00001c48 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1c48:	b480      	push	{r7}
    1c4a:	b083      	sub	sp, #12
    1c4c:	af00      	add	r7, sp, #0
    1c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	899b      	ldrh	r3, [r3, #12]
    1c54:	b29b      	uxth	r3, r3
    1c56:	f043 0301 	orr.w	r3, r3, #1
    1c5a:	b29a      	uxth	r2, r3
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	819a      	strh	r2, [r3, #12]
}
    1c60:	370c      	adds	r7, #12
    1c62:	46bd      	mov	sp, r7
    1c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c68:	4770      	bx	lr
    1c6a:	bf00      	nop

00001c6c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    1c6c:	b480      	push	{r7}
    1c6e:	b083      	sub	sp, #12
    1c70:	af00      	add	r7, sp, #0
    1c72:	6078      	str	r0, [r7, #4]
    1c74:	460b      	mov	r3, r1
    1c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	8b1b      	ldrh	r3, [r3, #24]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	b2db      	uxtb	r3, r3
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	8b1b      	ldrh	r3, [r3, #24]
    1c8a:	b29a      	uxth	r2, r3
    1c8c:	78fb      	ldrb	r3, [r7, #3]
    1c8e:	b29b      	uxth	r3, r3
    1c90:	021b      	lsls	r3, r3, #8
    1c92:	b29b      	uxth	r3, r3
    1c94:	4313      	orrs	r3, r2
    1c96:	b29a      	uxth	r2, r3
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	831a      	strh	r2, [r3, #24]
}
    1c9c:	370c      	adds	r7, #12
    1c9e:	46bd      	mov	sp, r7
    1ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ca4:	4770      	bx	lr
    1ca6:	bf00      	nop

00001ca8 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    1ca8:	b480      	push	{r7}
    1caa:	b083      	sub	sp, #12
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
    1cb0:	460b      	mov	r3, r1
    1cb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8b1b      	ldrh	r3, [r3, #24]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1cc4:	687b      	ldr	r3, [r7, #4]
    1cc6:	8b1b      	ldrh	r3, [r3, #24]
    1cc8:	b29a      	uxth	r2, r3
    1cca:	78fb      	ldrb	r3, [r7, #3]
    1ccc:	b29b      	uxth	r3, r3
    1cce:	4313      	orrs	r3, r2
    1cd0:	b29a      	uxth	r2, r3
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	831a      	strh	r2, [r3, #24]
}
    1cd6:	370c      	adds	r7, #12
    1cd8:	46bd      	mov	sp, r7
    1cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cde:	4770      	bx	lr

00001ce0 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1ce0:	b480      	push	{r7}
    1ce2:	b083      	sub	sp, #12
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	6078      	str	r0, [r7, #4]
    1ce8:	460b      	mov	r3, r1
    1cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cec:	78fb      	ldrb	r3, [r7, #3]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d008      	beq.n	1d04 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	8a9b      	ldrh	r3, [r3, #20]
    1cf6:	b29b      	uxth	r3, r3
    1cf8:	f043 0320 	orr.w	r3, r3, #32
    1cfc:	b29a      	uxth	r2, r3
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	829a      	strh	r2, [r3, #20]
    1d02:	e007      	b.n	1d14 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	8a9b      	ldrh	r3, [r3, #20]
    1d08:	b29b      	uxth	r3, r3
    1d0a:	f023 0320 	bic.w	r3, r3, #32
    1d0e:	b29a      	uxth	r2, r3
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	829a      	strh	r2, [r3, #20]
  }
}
    1d14:	370c      	adds	r7, #12
    1d16:	46bd      	mov	sp, r7
    1d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d1c:	4770      	bx	lr
    1d1e:	bf00      	nop

00001d20 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d20:	b480      	push	{r7}
    1d22:	b083      	sub	sp, #12
    1d24:	af00      	add	r7, sp, #0
    1d26:	6078      	str	r0, [r7, #4]
    1d28:	460b      	mov	r3, r1
    1d2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1d2c:	78fb      	ldrb	r3, [r7, #3]
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d008      	beq.n	1d44 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	8a9b      	ldrh	r3, [r3, #20]
    1d36:	b29b      	uxth	r3, r3
    1d38:	f043 0310 	orr.w	r3, r3, #16
    1d3c:	b29a      	uxth	r2, r3
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	829a      	strh	r2, [r3, #20]
    1d42:	e007      	b.n	1d54 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	8a9b      	ldrh	r3, [r3, #20]
    1d48:	b29b      	uxth	r3, r3
    1d4a:	f023 0310 	bic.w	r3, r3, #16
    1d4e:	b29a      	uxth	r2, r3
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	829a      	strh	r2, [r3, #20]
  }
}
    1d54:	370c      	adds	r7, #12
    1d56:	46bd      	mov	sp, r7
    1d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d5c:	4770      	bx	lr
    1d5e:	bf00      	nop

00001d60 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d60:	b480      	push	{r7}
    1d62:	b083      	sub	sp, #12
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
    1d68:	460b      	mov	r3, r1
    1d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1d6c:	78fb      	ldrb	r3, [r7, #3]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d008      	beq.n	1d84 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	8a9b      	ldrh	r3, [r3, #20]
    1d76:	b29b      	uxth	r3, r3
    1d78:	f043 0308 	orr.w	r3, r3, #8
    1d7c:	b29a      	uxth	r2, r3
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	829a      	strh	r2, [r3, #20]
    1d82:	e007      	b.n	1d94 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	8a9b      	ldrh	r3, [r3, #20]
    1d88:	b29b      	uxth	r3, r3
    1d8a:	f023 0308 	bic.w	r3, r3, #8
    1d8e:	b29a      	uxth	r2, r3
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	829a      	strh	r2, [r3, #20]
  }
}
    1d94:	370c      	adds	r7, #12
    1d96:	46bd      	mov	sp, r7
    1d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d9c:	4770      	bx	lr
    1d9e:	bf00      	nop

00001da0 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1da0:	b480      	push	{r7}
    1da2:	b083      	sub	sp, #12
    1da4:	af00      	add	r7, sp, #0
    1da6:	6078      	str	r0, [r7, #4]
    1da8:	460b      	mov	r3, r1
    1daa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1dac:	78fb      	ldrb	r3, [r7, #3]
    1dae:	2b00      	cmp	r3, #0
    1db0:	d00a      	beq.n	1dc8 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	899b      	ldrh	r3, [r3, #12]
    1db6:	b29b      	uxth	r3, r3
    1db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1dc0:	b29a      	uxth	r2, r3
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	819a      	strh	r2, [r3, #12]
    1dc6:	e007      	b.n	1dd8 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	899b      	ldrh	r3, [r3, #12]
    1dcc:	b29b      	uxth	r3, r3
    1dce:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1dd2:	b29a      	uxth	r2, r3
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	819a      	strh	r2, [r3, #12]
  }
}
    1dd8:	370c      	adds	r7, #12
    1dda:	46bd      	mov	sp, r7
    1ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1de0:	4770      	bx	lr
    1de2:	bf00      	nop

00001de4 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1de4:	b480      	push	{r7}
    1de6:	b083      	sub	sp, #12
    1de8:	af00      	add	r7, sp, #0
    1dea:	6078      	str	r0, [r7, #4]
    1dec:	460b      	mov	r3, r1
    1dee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    1df0:	78fb      	ldrb	r3, [r7, #3]
    1df2:	2b00      	cmp	r3, #0
    1df4:	d008      	beq.n	1e08 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	8a9b      	ldrh	r3, [r3, #20]
    1dfa:	b29b      	uxth	r3, r3
    1dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1e00:	b29a      	uxth	r2, r3
    1e02:	687b      	ldr	r3, [r7, #4]
    1e04:	829a      	strh	r2, [r3, #20]
    1e06:	e007      	b.n	1e18 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	8a9b      	ldrh	r3, [r3, #20]
    1e0c:	b29b      	uxth	r3, r3
    1e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1e12:	b29a      	uxth	r2, r3
    1e14:	687b      	ldr	r3, [r7, #4]
    1e16:	829a      	strh	r2, [r3, #20]
  }
}
    1e18:	370c      	adds	r7, #12
    1e1a:	46bd      	mov	sp, r7
    1e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e20:	4770      	bx	lr
    1e22:	bf00      	nop

00001e24 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1e24:	b480      	push	{r7}
    1e26:	b083      	sub	sp, #12
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
    1e2c:	460b      	mov	r3, r1
    1e2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0304 	bic.w	r3, r3, #4
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	8a9b      	ldrh	r3, [r3, #20]
    1e44:	b29a      	uxth	r2, r3
    1e46:	887b      	ldrh	r3, [r7, #2]
    1e48:	4313      	orrs	r3, r2
    1e4a:	b29a      	uxth	r2, r3
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	829a      	strh	r2, [r3, #20]
}
    1e50:	370c      	adds	r7, #12
    1e52:	46bd      	mov	sp, r7
    1e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e58:	4770      	bx	lr
    1e5a:	bf00      	nop

00001e5c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e5c:	b480      	push	{r7}
    1e5e:	b083      	sub	sp, #12
    1e60:	af00      	add	r7, sp, #0
    1e62:	6078      	str	r0, [r7, #4]
    1e64:	460b      	mov	r3, r1
    1e66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    1e68:	78fb      	ldrb	r3, [r7, #3]
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	d008      	beq.n	1e80 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e6e:	687b      	ldr	r3, [r7, #4]
    1e70:	8a9b      	ldrh	r3, [r3, #20]
    1e72:	b29b      	uxth	r3, r3
    1e74:	f043 0302 	orr.w	r3, r3, #2
    1e78:	b29a      	uxth	r2, r3
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	829a      	strh	r2, [r3, #20]
    1e7e:	e007      	b.n	1e90 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	8a9b      	ldrh	r3, [r3, #20]
    1e84:	b29b      	uxth	r3, r3
    1e86:	f023 0302 	bic.w	r3, r3, #2
    1e8a:	b29a      	uxth	r2, r3
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	829a      	strh	r2, [r3, #20]
  }
}
    1e90:	370c      	adds	r7, #12
    1e92:	46bd      	mov	sp, r7
    1e94:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e98:	4770      	bx	lr
    1e9a:	bf00      	nop

00001e9c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e9c:	b480      	push	{r7}
    1e9e:	b085      	sub	sp, #20
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
    1ea4:	460b      	mov	r3, r1
    1ea6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1ea8:	2300      	movs	r3, #0
    1eaa:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1eac:	687b      	ldr	r3, [r7, #4]
    1eae:	881b      	ldrh	r3, [r3, #0]
    1eb0:	b29a      	uxth	r2, r3
    1eb2:	887b      	ldrh	r3, [r7, #2]
    1eb4:	4013      	ands	r3, r2
    1eb6:	b29b      	uxth	r3, r3
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d002      	beq.n	1ec2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1ebc:	2301      	movs	r3, #1
    1ebe:	73fb      	strb	r3, [r7, #15]
    1ec0:	e001      	b.n	1ec6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1ec2:	2300      	movs	r3, #0
    1ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1ec6:	7bfb      	ldrb	r3, [r7, #15]
}
    1ec8:	4618      	mov	r0, r3
    1eca:	3714      	adds	r7, #20
    1ecc:	46bd      	mov	sp, r7
    1ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ed2:	4770      	bx	lr

00001ed4 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1ed4:	b480      	push	{r7}
    1ed6:	b083      	sub	sp, #12
    1ed8:	af00      	add	r7, sp, #0
    1eda:	6078      	str	r0, [r7, #4]
    1edc:	460b      	mov	r3, r1
    1ede:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    1ee0:	887b      	ldrh	r3, [r7, #2]
    1ee2:	43db      	mvns	r3, r3
    1ee4:	b29a      	uxth	r2, r3
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	801a      	strh	r2, [r3, #0]
}
    1eea:	370c      	adds	r7, #12
    1eec:	46bd      	mov	sp, r7
    1eee:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ef2:	4770      	bx	lr

00001ef4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ef4:	b480      	push	{r7}
    1ef6:	b087      	sub	sp, #28
    1ef8:	af00      	add	r7, sp, #0
    1efa:	6078      	str	r0, [r7, #4]
    1efc:	460b      	mov	r3, r1
    1efe:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1f00:	2300      	movs	r3, #0
    1f02:	60fb      	str	r3, [r7, #12]
    1f04:	2300      	movs	r3, #0
    1f06:	617b      	str	r3, [r7, #20]
    1f08:	2300      	movs	r3, #0
    1f0a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1f0c:	2300      	movs	r3, #0
    1f0e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	b2db      	uxtb	r3, r3
    1f14:	095b      	lsrs	r3, r3, #5
    1f16:	b2db      	uxtb	r3, r3
    1f18:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1f1a:	887b      	ldrh	r3, [r7, #2]
    1f1c:	f003 031f 	and.w	r3, r3, #31
    1f20:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1f22:	697b      	ldr	r3, [r7, #20]
    1f24:	2201      	movs	r2, #1
    1f26:	fa02 f303 	lsl.w	r3, r2, r3
    1f2a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1f2c:	68bb      	ldr	r3, [r7, #8]
    1f2e:	2b01      	cmp	r3, #1
    1f30:	d106      	bne.n	1f40 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	899b      	ldrh	r3, [r3, #12]
    1f36:	b29b      	uxth	r3, r3
    1f38:	697a      	ldr	r2, [r7, #20]
    1f3a:	4013      	ands	r3, r2
    1f3c:	617b      	str	r3, [r7, #20]
    1f3e:	e00f      	b.n	1f60 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1f40:	68bb      	ldr	r3, [r7, #8]
    1f42:	2b02      	cmp	r3, #2
    1f44:	d106      	bne.n	1f54 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1f46:	687b      	ldr	r3, [r7, #4]
    1f48:	8a1b      	ldrh	r3, [r3, #16]
    1f4a:	b29b      	uxth	r3, r3
    1f4c:	697a      	ldr	r2, [r7, #20]
    1f4e:	4013      	ands	r3, r2
    1f50:	617b      	str	r3, [r7, #20]
    1f52:	e005      	b.n	1f60 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	8a9b      	ldrh	r3, [r3, #20]
    1f58:	b29b      	uxth	r3, r3
    1f5a:	697a      	ldr	r2, [r7, #20]
    1f5c:	4013      	ands	r3, r2
    1f5e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
    1f60:	887b      	ldrh	r3, [r7, #2]
    1f62:	0a1b      	lsrs	r3, r3, #8
    1f64:	b29b      	uxth	r3, r3
    1f66:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f68:	68fb      	ldr	r3, [r7, #12]
    1f6a:	2201      	movs	r2, #1
    1f6c:	fa02 f303 	lsl.w	r3, r2, r3
    1f70:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	881b      	ldrh	r3, [r3, #0]
    1f76:	b29b      	uxth	r3, r3
    1f78:	68fa      	ldr	r2, [r7, #12]
    1f7a:	4013      	ands	r3, r2
    1f7c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f7e:	697b      	ldr	r3, [r7, #20]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d005      	beq.n	1f90 <USART_GetITStatus+0x9c>
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d002      	beq.n	1f90 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f8a:	2301      	movs	r3, #1
    1f8c:	74fb      	strb	r3, [r7, #19]
    1f8e:	e001      	b.n	1f94 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f90:	2300      	movs	r3, #0
    1f92:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
    1f94:	7cfb      	ldrb	r3, [r7, #19]
}
    1f96:	4618      	mov	r0, r3
    1f98:	371c      	adds	r7, #28
    1f9a:	46bd      	mov	sp, r7
    1f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fa0:	4770      	bx	lr
    1fa2:	bf00      	nop

00001fa4 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1fa4:	b480      	push	{r7}
    1fa6:	b085      	sub	sp, #20
    1fa8:	af00      	add	r7, sp, #0
    1faa:	6078      	str	r0, [r7, #4]
    1fac:	460b      	mov	r3, r1
    1fae:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1fb0:	2300      	movs	r3, #0
    1fb2:	81fb      	strh	r3, [r7, #14]
    1fb4:	2300      	movs	r3, #0
    1fb6:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    1fb8:	887b      	ldrh	r3, [r7, #2]
    1fba:	0a1b      	lsrs	r3, r3, #8
    1fbc:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1fbe:	89fb      	ldrh	r3, [r7, #14]
    1fc0:	2201      	movs	r2, #1
    1fc2:	fa02 f303 	lsl.w	r3, r2, r3
    1fc6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1fc8:	89bb      	ldrh	r3, [r7, #12]
    1fca:	43db      	mvns	r3, r3
    1fcc:	b29a      	uxth	r2, r3
    1fce:	687b      	ldr	r3, [r7, #4]
    1fd0:	801a      	strh	r2, [r3, #0]
}
    1fd2:	3714      	adds	r7, #20
    1fd4:	46bd      	mov	sp, r7
    1fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fda:	4770      	bx	lr

00001fdc <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1fdc:	b480      	push	{r7}
    1fde:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fe4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fe8:	2200      	movs	r2, #0
    1fea:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ff0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff4:	2200      	movs	r2, #0
    1ff6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
    1ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2000:	2200      	movs	r2, #0
    2002:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
    2004:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2008:	f2c4 0301 	movt	r3, #16385	; 0x4001
    200c:	2200      	movs	r2, #0
    200e:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    2010:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2014:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2018:	f64f 72ff 	movw	r2, #65535	; 0xffff
    201c:	f2c0 020f 	movt	r2, #15
    2020:	615a      	str	r2, [r3, #20]
}
    2022:	46bd      	mov	sp, r7
    2024:	f85d 7b04 	ldr.w	r7, [sp], #4
    2028:	4770      	bx	lr
    202a:	bf00      	nop

0000202c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    202c:	b480      	push	{r7}
    202e:	b085      	sub	sp, #20
    2030:	af00      	add	r7, sp, #0
    2032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    2034:	2300      	movs	r3, #0
    2036:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    2038:	f44f 6380 	mov.w	r3, #1024	; 0x400
    203c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2040:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    2042:	687b      	ldr	r3, [r7, #4]
    2044:	799b      	ldrb	r3, [r3, #6]
    2046:	2b00      	cmp	r3, #0
    2048:	d074      	beq.n	2134 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6811      	ldr	r1, [r2, #0]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	6851      	ldr	r1, [r2, #4]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	791b      	ldrb	r3, [r3, #4]
    2086:	68fa      	ldr	r2, [r7, #12]
    2088:	4413      	add	r3, r2
    208a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    208c:	68fb      	ldr	r3, [r7, #12]
    208e:	68fa      	ldr	r2, [r7, #12]
    2090:	6811      	ldr	r1, [r2, #0]
    2092:	687a      	ldr	r2, [r7, #4]
    2094:	6812      	ldr	r2, [r2, #0]
    2096:	430a      	orrs	r2, r1
    2098:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    209a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    209e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20a6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20aa:	6891      	ldr	r1, [r2, #8]
    20ac:	687a      	ldr	r2, [r7, #4]
    20ae:	6812      	ldr	r2, [r2, #0]
    20b0:	43d2      	mvns	r2, r2
    20b2:	400a      	ands	r2, r1
    20b4:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    20b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20c6:	68d1      	ldr	r1, [r2, #12]
    20c8:	687a      	ldr	r2, [r7, #4]
    20ca:	6812      	ldr	r2, [r2, #0]
    20cc:	43d2      	mvns	r2, r2
    20ce:	400a      	ands	r2, r1
    20d0:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	795b      	ldrb	r3, [r3, #5]
    20d6:	2b10      	cmp	r3, #16
    20d8:	d11a      	bne.n	2110 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    20da:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20de:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20e6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20ea:	6891      	ldr	r1, [r2, #8]
    20ec:	687a      	ldr	r2, [r7, #4]
    20ee:	6812      	ldr	r2, [r2, #0]
    20f0:	430a      	orrs	r2, r1
    20f2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2100:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2104:	68d1      	ldr	r1, [r2, #12]
    2106:	687a      	ldr	r2, [r7, #4]
    2108:	6812      	ldr	r2, [r2, #0]
    210a:	430a      	orrs	r2, r1
    210c:	60da      	str	r2, [r3, #12]
    210e:	e01e      	b.n	214e <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    2110:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2114:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2118:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    211a:	687b      	ldr	r3, [r7, #4]
    211c:	795b      	ldrb	r3, [r3, #5]
    211e:	68fa      	ldr	r2, [r7, #12]
    2120:	4413      	add	r3, r2
    2122:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2124:	68fb      	ldr	r3, [r7, #12]
    2126:	68fa      	ldr	r2, [r7, #12]
    2128:	6811      	ldr	r1, [r2, #0]
    212a:	687a      	ldr	r2, [r7, #4]
    212c:	6812      	ldr	r2, [r2, #0]
    212e:	430a      	orrs	r2, r1
    2130:	601a      	str	r2, [r3, #0]
    2132:	e00c      	b.n	214e <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    2134:	687b      	ldr	r3, [r7, #4]
    2136:	791b      	ldrb	r3, [r3, #4]
    2138:	68fa      	ldr	r2, [r7, #12]
    213a:	4413      	add	r3, r2
    213c:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    213e:	68fb      	ldr	r3, [r7, #12]
    2140:	68fa      	ldr	r2, [r7, #12]
    2142:	6811      	ldr	r1, [r2, #0]
    2144:	687a      	ldr	r2, [r7, #4]
    2146:	6812      	ldr	r2, [r2, #0]
    2148:	43d2      	mvns	r2, r2
    214a:	400a      	ands	r2, r1
    214c:	601a      	str	r2, [r3, #0]
  }
}
    214e:	3714      	adds	r7, #20
    2150:	46bd      	mov	sp, r7
    2152:	f85d 7b04 	ldr.w	r7, [sp], #4
    2156:	4770      	bx	lr

00002158 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2158:	b480      	push	{r7}
    215a:	b083      	sub	sp, #12
    215c:	af00      	add	r7, sp, #0
    215e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	2200      	movs	r2, #0
    2164:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2166:	687b      	ldr	r3, [r7, #4]
    2168:	2200      	movs	r2, #0
    216a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    216c:	687b      	ldr	r3, [r7, #4]
    216e:	220c      	movs	r2, #12
    2170:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	2200      	movs	r2, #0
    2176:	719a      	strb	r2, [r3, #6]
}
    2178:	370c      	adds	r7, #12
    217a:	46bd      	mov	sp, r7
    217c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2180:	4770      	bx	lr
    2182:	bf00      	nop

00002184 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2184:	b480      	push	{r7}
    2186:	b083      	sub	sp, #12
    2188:	af00      	add	r7, sp, #0
    218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    218c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2190:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2194:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2198:	f2c4 0201 	movt	r2, #16385	; 0x4001
    219c:	6911      	ldr	r1, [r2, #16]
    219e:	687a      	ldr	r2, [r7, #4]
    21a0:	430a      	orrs	r2, r1
    21a2:	611a      	str	r2, [r3, #16]
}
    21a4:	370c      	adds	r7, #12
    21a6:	46bd      	mov	sp, r7
    21a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ac:	4770      	bx	lr
    21ae:	bf00      	nop

000021b0 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    21b0:	b480      	push	{r7}
    21b2:	b085      	sub	sp, #20
    21b4:	af00      	add	r7, sp, #0
    21b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    21b8:	2300      	movs	r3, #0
    21ba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    21bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21c4:	695a      	ldr	r2, [r3, #20]
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	4013      	ands	r3, r2
    21ca:	2b00      	cmp	r3, #0
    21cc:	d002      	beq.n	21d4 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    21ce:	2301      	movs	r3, #1
    21d0:	73fb      	strb	r3, [r7, #15]
    21d2:	e001      	b.n	21d8 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    21d4:	2300      	movs	r3, #0
    21d6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21d8:	7bfb      	ldrb	r3, [r7, #15]
}
    21da:	4618      	mov	r0, r3
    21dc:	3714      	adds	r7, #20
    21de:	46bd      	mov	sp, r7
    21e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21e4:	4770      	bx	lr
    21e6:	bf00      	nop

000021e8 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    21e8:	b480      	push	{r7}
    21ea:	b083      	sub	sp, #12
    21ec:	af00      	add	r7, sp, #0
    21ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    21f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21f8:	687a      	ldr	r2, [r7, #4]
    21fa:	615a      	str	r2, [r3, #20]
}
    21fc:	370c      	adds	r7, #12
    21fe:	46bd      	mov	sp, r7
    2200:	f85d 7b04 	ldr.w	r7, [sp], #4
    2204:	4770      	bx	lr
    2206:	bf00      	nop

00002208 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b085      	sub	sp, #20
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    2210:	2300      	movs	r3, #0
    2212:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    2214:	2300      	movs	r3, #0
    2216:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    2218:	f44f 6380 	mov.w	r3, #1024	; 0x400
    221c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2220:	681a      	ldr	r2, [r3, #0]
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	4013      	ands	r3, r2
    2226:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    2228:	f44f 6380 	mov.w	r3, #1024	; 0x400
    222c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2230:	695a      	ldr	r2, [r3, #20]
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	4013      	ands	r3, r2
    2236:	2b00      	cmp	r3, #0
    2238:	d005      	beq.n	2246 <EXTI_GetITStatus+0x3e>
    223a:	68bb      	ldr	r3, [r7, #8]
    223c:	2b00      	cmp	r3, #0
    223e:	d002      	beq.n	2246 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    2240:	2301      	movs	r3, #1
    2242:	73fb      	strb	r3, [r7, #15]
    2244:	e001      	b.n	224a <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    2246:	2300      	movs	r3, #0
    2248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    224a:	7bfb      	ldrb	r3, [r7, #15]
}
    224c:	4618      	mov	r0, r3
    224e:	3714      	adds	r7, #20
    2250:	46bd      	mov	sp, r7
    2252:	f85d 7b04 	ldr.w	r7, [sp], #4
    2256:	4770      	bx	lr

00002258 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2258:	b480      	push	{r7}
    225a:	b083      	sub	sp, #12
    225c:	af00      	add	r7, sp, #0
    225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    2260:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2264:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2268:	687a      	ldr	r2, [r7, #4]
    226a:	615a      	str	r2, [r3, #20]
}
    226c:	370c      	adds	r7, #12
    226e:	46bd      	mov	sp, r7
    2270:	f85d 7b04 	ldr.w	r7, [sp], #4
    2274:	4770      	bx	lr
    2276:	bf00      	nop

00002278 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2278:	b480      	push	{r7}
    227a:	b083      	sub	sp, #12
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2280:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2284:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2288:	687a      	ldr	r2, [r7, #4]
    228a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    228e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2292:	60da      	str	r2, [r3, #12]
}
    2294:	370c      	adds	r7, #12
    2296:	46bd      	mov	sp, r7
    2298:	f85d 7b04 	ldr.w	r7, [sp], #4
    229c:	4770      	bx	lr
    229e:	bf00      	nop

000022a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    22a0:	b480      	push	{r7}
    22a2:	b087      	sub	sp, #28
    22a4:	af00      	add	r7, sp, #0
    22a6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    22a8:	2300      	movs	r3, #0
    22aa:	617b      	str	r3, [r7, #20]
    22ac:	2300      	movs	r3, #0
    22ae:	613b      	str	r3, [r7, #16]
    22b0:	230f      	movs	r3, #15
    22b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	78db      	ldrb	r3, [r3, #3]
    22b8:	2b00      	cmp	r3, #0
    22ba:	d042      	beq.n	2342 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    22bc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    22c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22c4:	68db      	ldr	r3, [r3, #12]
    22c6:	43db      	mvns	r3, r3
    22c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    22cc:	0a1b      	lsrs	r3, r3, #8
    22ce:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    22d0:	697b      	ldr	r3, [r7, #20]
    22d2:	f1c3 0304 	rsb	r3, r3, #4
    22d6:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    22d8:	697b      	ldr	r3, [r7, #20]
    22da:	68fa      	ldr	r2, [r7, #12]
    22dc:	fa22 f303 	lsr.w	r3, r2, r3
    22e0:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	785b      	ldrb	r3, [r3, #1]
    22e6:	461a      	mov	r2, r3
    22e8:	693b      	ldr	r3, [r7, #16]
    22ea:	fa02 f303 	lsl.w	r3, r2, r3
    22ee:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22f0:	687b      	ldr	r3, [r7, #4]
    22f2:	789b      	ldrb	r3, [r3, #2]
    22f4:	461a      	mov	r2, r3
    22f6:	68fb      	ldr	r3, [r7, #12]
    22f8:	4013      	ands	r3, r2
    22fa:	697a      	ldr	r2, [r7, #20]
    22fc:	4313      	orrs	r3, r2
    22fe:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    2300:	697b      	ldr	r3, [r7, #20]
    2302:	011b      	lsls	r3, r3, #4
    2304:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    2306:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    230a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    230e:	687a      	ldr	r2, [r7, #4]
    2310:	7812      	ldrb	r2, [r2, #0]
    2312:	4611      	mov	r1, r2
    2314:	697a      	ldr	r2, [r7, #20]
    2316:	b2d2      	uxtb	r2, r2
    2318:	440b      	add	r3, r1
    231a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    231e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    2322:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2326:	687a      	ldr	r2, [r7, #4]
    2328:	7812      	ldrb	r2, [r2, #0]
    232a:	0952      	lsrs	r2, r2, #5
    232c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    232e:	6879      	ldr	r1, [r7, #4]
    2330:	7809      	ldrb	r1, [r1, #0]
    2332:	f001 011f 	and.w	r1, r1, #31
    2336:	2001      	movs	r0, #1
    2338:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2340:	e011      	b.n	2366 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2342:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    2346:	f2ce 0300 	movt	r3, #57344	; 0xe000
    234a:	687a      	ldr	r2, [r7, #4]
    234c:	7812      	ldrb	r2, [r2, #0]
    234e:	0952      	lsrs	r2, r2, #5
    2350:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2352:	6879      	ldr	r1, [r7, #4]
    2354:	7809      	ldrb	r1, [r1, #0]
    2356:	f001 011f 	and.w	r1, r1, #31
    235a:	2001      	movs	r0, #1
    235c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2360:	3220      	adds	r2, #32
    2362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2366:	371c      	adds	r7, #28
    2368:	46bd      	mov	sp, r7
    236a:	f85d 7b04 	ldr.w	r7, [sp], #4
    236e:	4770      	bx	lr

00002370 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
    2370:	b480      	push	{r7}
    2372:	b083      	sub	sp, #12
    2374:	af00      	add	r7, sp, #0
    2376:	6078      	str	r0, [r7, #4]
    2378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	683a      	ldr	r2, [r7, #0]
    2384:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2388:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    238c:	6879      	ldr	r1, [r7, #4]
    238e:	430a      	orrs	r2, r1
    2390:	609a      	str	r2, [r3, #8]
}
    2392:	370c      	adds	r7, #12
    2394:	46bd      	mov	sp, r7
    2396:	f85d 7b04 	ldr.w	r7, [sp], #4
    239a:	4770      	bx	lr

0000239c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    239c:	b480      	push	{r7}
    239e:	b083      	sub	sp, #12
    23a0:	af00      	add	r7, sp, #0
    23a2:	4602      	mov	r2, r0
    23a4:	460b      	mov	r3, r1
    23a6:	71fa      	strb	r2, [r7, #7]
    23a8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    23aa:	79bb      	ldrb	r3, [r7, #6]
    23ac:	2b00      	cmp	r3, #0
    23ae:	d00c      	beq.n	23ca <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    23b0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    23b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    23bc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23c0:	6911      	ldr	r1, [r2, #16]
    23c2:	79fa      	ldrb	r2, [r7, #7]
    23c4:	430a      	orrs	r2, r1
    23c6:	611a      	str	r2, [r3, #16]
    23c8:	e00c      	b.n	23e4 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    23ca:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    23ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    23d6:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23da:	6911      	ldr	r1, [r2, #16]
    23dc:	79fa      	ldrb	r2, [r7, #7]
    23de:	43d2      	mvns	r2, r2
    23e0:	400a      	ands	r2, r1
    23e2:	611a      	str	r2, [r3, #16]
  }
}
    23e4:	370c      	adds	r7, #12
    23e6:	46bd      	mov	sp, r7
    23e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    23ec:	4770      	bx	lr
    23ee:	bf00      	nop

000023f0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23f0:	b480      	push	{r7}
    23f2:	b083      	sub	sp, #12
    23f4:	af00      	add	r7, sp, #0
    23f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23f8:	687b      	ldr	r3, [r7, #4]
    23fa:	2b04      	cmp	r3, #4
    23fc:	d10c      	bne.n	2418 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23fe:	f24e 0310 	movw	r3, #57360	; 0xe010
    2402:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2406:	f24e 0210 	movw	r2, #57360	; 0xe010
    240a:	f2ce 0200 	movt	r2, #57344	; 0xe000
    240e:	6812      	ldr	r2, [r2, #0]
    2410:	f042 0204 	orr.w	r2, r2, #4
    2414:	601a      	str	r2, [r3, #0]
    2416:	e00b      	b.n	2430 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    2418:	f24e 0310 	movw	r3, #57360	; 0xe010
    241c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2420:	f24e 0210 	movw	r2, #57360	; 0xe010
    2424:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2428:	6812      	ldr	r2, [r2, #0]
    242a:	f022 0204 	bic.w	r2, r2, #4
    242e:	601a      	str	r2, [r3, #0]
  }
}
    2430:	370c      	adds	r7, #12
    2432:	46bd      	mov	sp, r7
    2434:	f85d 7b04 	ldr.w	r7, [sp], #4
    2438:	4770      	bx	lr
    243a:	bf00      	nop

0000243c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    243c:	b580      	push	{r7, lr}
    243e:	b086      	sub	sp, #24
    2440:	af00      	add	r7, sp, #0
    2442:	60f8      	str	r0, [r7, #12]
    2444:	60b9      	str	r1, [r7, #8]
    2446:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    2448:	2038      	movs	r0, #56	; 0x38
    244a:	f002 f90b 	bl	4664 <pvPortMalloc>
    244e:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	2b00      	cmp	r3, #0
    2454:	d058      	beq.n	2508 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2456:	f240 03a4 	movw	r3, #164	; 0xa4
    245a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	2b00      	cmp	r3, #0
    2462:	d107      	bne.n	2474 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2464:	f240 03a4 	movw	r3, #164	; 0xa4
    2468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    246c:	693a      	ldr	r2, [r7, #16]
    246e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2470:	f000 fa08 	bl	2884 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2474:	68bb      	ldr	r3, [r7, #8]
    2476:	2b01      	cmp	r3, #1
    2478:	d901      	bls.n	247e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    247a:	2301      	movs	r3, #1
    247c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    247e:	693b      	ldr	r3, [r7, #16]
    2480:	2200      	movs	r2, #0
    2482:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2484:	693b      	ldr	r3, [r7, #16]
    2486:	68ba      	ldr	r2, [r7, #8]
    2488:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    248a:	693b      	ldr	r3, [r7, #16]
    248c:	687a      	ldr	r2, [r7, #4]
    248e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	68fa      	ldr	r2, [r7, #12]
    2494:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2496:	693b      	ldr	r3, [r7, #16]
    2498:	3304      	adds	r3, #4
    249a:	4618      	mov	r0, r3
    249c:	f000 fa7c 	bl	2998 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    24a0:	693b      	ldr	r3, [r7, #16]
    24a2:	3318      	adds	r3, #24
    24a4:	4618      	mov	r0, r3
    24a6:	f000 fa77 	bl	2998 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    24aa:	693b      	ldr	r3, [r7, #16]
    24ac:	693a      	ldr	r2, [r7, #16]
    24ae:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    24b0:	693b      	ldr	r3, [r7, #16]
    24b2:	693a      	ldr	r2, [r7, #16]
    24b4:	625a      	str	r2, [r3, #36]	; 0x24

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    24b6:	68bb      	ldr	r3, [r7, #8]
    24b8:	f1c3 0205 	rsb	r2, r3, #5
    24bc:	693b      	ldr	r3, [r7, #16]
    24be:	619a      	str	r2, [r3, #24]

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    24c0:	693b      	ldr	r3, [r7, #16]
    24c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    24c4:	f240 03a8 	movw	r3, #168	; 0xa8
    24c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24cc:	681b      	ldr	r3, [r3, #0]
    24ce:	429a      	cmp	r2, r3
    24d0:	d906      	bls.n	24e0 <xCoRoutineCreate+0xa4>
    24d2:	693b      	ldr	r3, [r7, #16]
    24d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    24d6:	f240 03a8 	movw	r3, #168	; 0xa8
    24da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24de:	601a      	str	r2, [r3, #0]
    24e0:	693b      	ldr	r3, [r7, #16]
    24e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    24e4:	4613      	mov	r3, r2
    24e6:	009b      	lsls	r3, r3, #2
    24e8:	4413      	add	r3, r2
    24ea:	009b      	lsls	r3, r3, #2
    24ec:	f240 0238 	movw	r2, #56	; 0x38
    24f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24f4:	441a      	add	r2, r3
    24f6:	693b      	ldr	r3, [r7, #16]
    24f8:	3304      	adds	r3, #4
    24fa:	4610      	mov	r0, r2
    24fc:	4619      	mov	r1, r3
    24fe:	f000 fa57 	bl	29b0 <vListInsertEnd>

		xReturn = pdPASS;
    2502:	2301      	movs	r3, #1
    2504:	617b      	str	r3, [r7, #20]
    2506:	e002      	b.n	250e <xCoRoutineCreate+0xd2>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2508:	f04f 33ff 	mov.w	r3, #4294967295
    250c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    250e:	697b      	ldr	r3, [r7, #20]
}
    2510:	4618      	mov	r0, r3
    2512:	3718      	adds	r7, #24
    2514:	46bd      	mov	sp, r7
    2516:	bd80      	pop	{r7, pc}

00002518 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    2518:	b580      	push	{r7, lr}
    251a:	b084      	sub	sp, #16
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
    2520:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    2522:	f240 03ac 	movw	r3, #172	; 0xac
    2526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    252a:	681a      	ldr	r2, [r3, #0]
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	4413      	add	r3, r2
    2530:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 03a4 	movw	r3, #164	; 0xa4
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681b      	ldr	r3, [r3, #0]
    253c:	3304      	adds	r3, #4
    253e:	4618      	mov	r0, r3
    2540:	f000 fa96 	bl	2a70 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    2544:	f240 03a4 	movw	r3, #164	; 0xa4
    2548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    254c:	681b      	ldr	r3, [r3, #0]
    254e:	68fa      	ldr	r2, [r7, #12]
    2550:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2552:	f240 03ac 	movw	r3, #172	; 0xac
    2556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	68fa      	ldr	r2, [r7, #12]
    255e:	429a      	cmp	r2, r3
    2560:	d20f      	bcs.n	2582 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2562:	f240 038c 	movw	r3, #140	; 0x8c
    2566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    256a:	681a      	ldr	r2, [r3, #0]
    256c:	f240 03a4 	movw	r3, #164	; 0xa4
    2570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2574:	681b      	ldr	r3, [r3, #0]
    2576:	3304      	adds	r3, #4
    2578:	4610      	mov	r0, r2
    257a:	4619      	mov	r1, r3
    257c:	f000 fa40 	bl	2a00 <vListInsert>
    2580:	e00e      	b.n	25a0 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2582:	f240 0388 	movw	r3, #136	; 0x88
    2586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    258a:	681a      	ldr	r2, [r3, #0]
    258c:	f240 03a4 	movw	r3, #164	; 0xa4
    2590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2594:	681b      	ldr	r3, [r3, #0]
    2596:	3304      	adds	r3, #4
    2598:	4610      	mov	r0, r2
    259a:	4619      	mov	r1, r3
    259c:	f000 fa30 	bl	2a00 <vListInsert>
	}

	if( pxEventList )
    25a0:	683b      	ldr	r3, [r7, #0]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d009      	beq.n	25ba <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    25a6:	f240 03a4 	movw	r3, #164	; 0xa4
    25aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25ae:	681b      	ldr	r3, [r3, #0]
    25b0:	3318      	adds	r3, #24
    25b2:	6838      	ldr	r0, [r7, #0]
    25b4:	4619      	mov	r1, r3
    25b6:	f000 fa23 	bl	2a00 <vListInsert>
	}
}
    25ba:	3710      	adds	r7, #16
    25bc:	46bd      	mov	sp, r7
    25be:	bd80      	pop	{r7, pc}

000025c0 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    25c0:	b580      	push	{r7, lr}
    25c2:	b082      	sub	sp, #8
    25c4:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25c6:	e039      	b.n	263c <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    25c8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    25cc:	f380 8811 	msr	BASEPRI, r0
		{
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
    25d0:	f240 0390 	movw	r3, #144	; 0x90
    25d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25d8:	68db      	ldr	r3, [r3, #12]
    25da:	68db      	ldr	r3, [r3, #12]
    25dc:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	3318      	adds	r3, #24
    25e2:	4618      	mov	r0, r3
    25e4:	f000 fa44 	bl	2a70 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    25e8:	f04f 0000 	mov.w	r0, #0
    25ec:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25f0:	687b      	ldr	r3, [r7, #4]
    25f2:	3304      	adds	r3, #4
    25f4:	4618      	mov	r0, r3
    25f6:	f000 fa3b 	bl	2a70 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    25fa:	687b      	ldr	r3, [r7, #4]
    25fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25fe:	f240 03a8 	movw	r3, #168	; 0xa8
    2602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2606:	681b      	ldr	r3, [r3, #0]
    2608:	429a      	cmp	r2, r3
    260a:	d906      	bls.n	261a <prvCheckPendingReadyList+0x5a>
    260c:	687b      	ldr	r3, [r7, #4]
    260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2610:	f240 03a8 	movw	r3, #168	; 0xa8
    2614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2618:	601a      	str	r2, [r3, #0]
    261a:	687b      	ldr	r3, [r7, #4]
    261c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    261e:	4613      	mov	r3, r2
    2620:	009b      	lsls	r3, r3, #2
    2622:	4413      	add	r3, r2
    2624:	009b      	lsls	r3, r3, #2
    2626:	f240 0238 	movw	r2, #56	; 0x38
    262a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    262e:	441a      	add	r2, r3
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	3304      	adds	r3, #4
    2634:	4610      	mov	r0, r2
    2636:	4619      	mov	r1, r3
    2638:	f000 f9ba 	bl	29b0 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    263c:	f240 0390 	movw	r3, #144	; 0x90
    2640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2644:	681b      	ldr	r3, [r3, #0]
    2646:	2b00      	cmp	r3, #0
    2648:	d1be      	bne.n	25c8 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
    264a:	3708      	adds	r7, #8
    264c:	46bd      	mov	sp, r7
    264e:	bd80      	pop	{r7, pc}

00002650 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2650:	b580      	push	{r7, lr}
    2652:	b082      	sub	sp, #8
    2654:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2656:	f001 fa89 	bl	3b6c <xTaskGetTickCount>
    265a:	4602      	mov	r2, r0
    265c:	f240 03b0 	movw	r3, #176	; 0xb0
    2660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2664:	681b      	ldr	r3, [r3, #0]
    2666:	1ad2      	subs	r2, r2, r3
    2668:	f240 03b4 	movw	r3, #180	; 0xb4
    266c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2670:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2672:	e085      	b.n	2780 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2674:	f240 03ac 	movw	r3, #172	; 0xac
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	681b      	ldr	r3, [r3, #0]
    267e:	1c5a      	adds	r2, r3, #1
    2680:	f240 03ac 	movw	r3, #172	; 0xac
    2684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2688:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    268a:	f240 03b4 	movw	r3, #180	; 0xb4
    268e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2692:	681b      	ldr	r3, [r3, #0]
    2694:	1e5a      	subs	r2, r3, #1
    2696:	f240 03b4 	movw	r3, #180	; 0xb4
    269a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    269e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    26a0:	f240 03ac 	movw	r3, #172	; 0xac
    26a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26a8:	681b      	ldr	r3, [r3, #0]
    26aa:	2b00      	cmp	r3, #0
    26ac:	d116      	bne.n	26dc <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    26ae:	f240 0388 	movw	r3, #136	; 0x88
    26b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26b6:	681b      	ldr	r3, [r3, #0]
    26b8:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    26ba:	f240 038c 	movw	r3, #140	; 0x8c
    26be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26c2:	681a      	ldr	r2, [r3, #0]
    26c4:	f240 0388 	movw	r3, #136	; 0x88
    26c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26cc:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    26ce:	f240 038c 	movw	r3, #140	; 0x8c
    26d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26d6:	687a      	ldr	r2, [r7, #4]
    26d8:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    26da:	e049      	b.n	2770 <prvCheckDelayedList+0x120>
    26dc:	e048      	b.n	2770 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    26de:	f240 0388 	movw	r3, #136	; 0x88
    26e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26e6:	681b      	ldr	r3, [r3, #0]
    26e8:	68db      	ldr	r3, [r3, #12]
    26ea:	68db      	ldr	r3, [r3, #12]
    26ec:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    26ee:	683b      	ldr	r3, [r7, #0]
    26f0:	685a      	ldr	r2, [r3, #4]
    26f2:	f240 03ac 	movw	r3, #172	; 0xac
    26f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fa:	681b      	ldr	r3, [r3, #0]
    26fc:	429a      	cmp	r2, r3
    26fe:	d900      	bls.n	2702 <prvCheckDelayedList+0xb2>
			{
				/* Timeout not yet expired. */
				break;
    2700:	e03e      	b.n	2780 <prvCheckDelayedList+0x130>
			}

			portDISABLE_INTERRUPTS();
    2702:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2706:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );
    270a:	683b      	ldr	r3, [r7, #0]
    270c:	3304      	adds	r3, #4
    270e:	4618      	mov	r0, r3
    2710:	f000 f9ae 	bl	2a70 <vListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2718:	2b00      	cmp	r3, #0
    271a:	d004      	beq.n	2726 <prvCheckDelayedList+0xd6>
				{
					vListRemove( &( pxCRCB->xEventListItem ) );
    271c:	683b      	ldr	r3, [r7, #0]
    271e:	3318      	adds	r3, #24
    2720:	4618      	mov	r0, r3
    2722:	f000 f9a5 	bl	2a70 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    2726:	f04f 0000 	mov.w	r0, #0
    272a:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );
    272e:	683b      	ldr	r3, [r7, #0]
    2730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2732:	f240 03a8 	movw	r3, #168	; 0xa8
    2736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	429a      	cmp	r2, r3
    273e:	d906      	bls.n	274e <prvCheckDelayedList+0xfe>
    2740:	683b      	ldr	r3, [r7, #0]
    2742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2744:	f240 03a8 	movw	r3, #168	; 0xa8
    2748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    274c:	601a      	str	r2, [r3, #0]
    274e:	683b      	ldr	r3, [r7, #0]
    2750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2752:	4613      	mov	r3, r2
    2754:	009b      	lsls	r3, r3, #2
    2756:	4413      	add	r3, r2
    2758:	009b      	lsls	r3, r3, #2
    275a:	f240 0238 	movw	r2, #56	; 0x38
    275e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2762:	441a      	add	r2, r3
    2764:	683b      	ldr	r3, [r7, #0]
    2766:	3304      	adds	r3, #4
    2768:	4610      	mov	r0, r2
    276a:	4619      	mov	r1, r3
    276c:	f000 f920 	bl	29b0 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2770:	f240 0388 	movw	r3, #136	; 0x88
    2774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2778:	681b      	ldr	r3, [r3, #0]
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	2b00      	cmp	r3, #0
    277e:	d1ae      	bne.n	26de <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2780:	f240 03b4 	movw	r3, #180	; 0xb4
    2784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2788:	681b      	ldr	r3, [r3, #0]
    278a:	2b00      	cmp	r3, #0
    278c:	f47f af72 	bne.w	2674 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
    2790:	f240 03ac 	movw	r3, #172	; 0xac
    2794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2798:	681a      	ldr	r2, [r3, #0]
    279a:	f240 03b0 	movw	r3, #176	; 0xb0
    279e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27a2:	601a      	str	r2, [r3, #0]
}
    27a4:	3708      	adds	r7, #8
    27a6:	46bd      	mov	sp, r7
    27a8:	bd80      	pop	{r7, pc}
    27aa:	bf00      	nop

000027ac <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    27ac:	b580      	push	{r7, lr}
    27ae:	b082      	sub	sp, #8
    27b0:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    27b2:	f7ff ff05 	bl	25c0 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    27b6:	f7ff ff4b 	bl	2650 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    27ba:	e012      	b.n	27e2 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    27bc:	f240 03a8 	movw	r3, #168	; 0xa8
    27c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27c4:	681b      	ldr	r3, [r3, #0]
    27c6:	2b00      	cmp	r3, #0
    27c8:	d100      	bne.n	27cc <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    27ca:	e057      	b.n	287c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    27cc:	f240 03a8 	movw	r3, #168	; 0xa8
    27d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	1e5a      	subs	r2, r3, #1
    27d8:	f240 03a8 	movw	r3, #168	; 0xa8
    27dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27e0:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    27e2:	f240 03a8 	movw	r3, #168	; 0xa8
    27e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27ea:	6819      	ldr	r1, [r3, #0]
    27ec:	f240 0238 	movw	r2, #56	; 0x38
    27f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27f4:	460b      	mov	r3, r1
    27f6:	009b      	lsls	r3, r3, #2
    27f8:	440b      	add	r3, r1
    27fa:	009b      	lsls	r3, r3, #2
    27fc:	4413      	add	r3, r2
    27fe:	681b      	ldr	r3, [r3, #0]
    2800:	2b00      	cmp	r3, #0
    2802:	d0db      	beq.n	27bc <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2804:	f240 03a8 	movw	r3, #168	; 0xa8
    2808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	4613      	mov	r3, r2
    2810:	009b      	lsls	r3, r3, #2
    2812:	4413      	add	r3, r2
    2814:	009b      	lsls	r3, r3, #2
    2816:	f240 0238 	movw	r2, #56	; 0x38
    281a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    281e:	4413      	add	r3, r2
    2820:	607b      	str	r3, [r7, #4]
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	685b      	ldr	r3, [r3, #4]
    2826:	685a      	ldr	r2, [r3, #4]
    2828:	687b      	ldr	r3, [r7, #4]
    282a:	605a      	str	r2, [r3, #4]
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	685a      	ldr	r2, [r3, #4]
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	3308      	adds	r3, #8
    2834:	429a      	cmp	r2, r3
    2836:	d104      	bne.n	2842 <vCoRoutineSchedule+0x96>
    2838:	687b      	ldr	r3, [r7, #4]
    283a:	685b      	ldr	r3, [r3, #4]
    283c:	685a      	ldr	r2, [r3, #4]
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	605a      	str	r2, [r3, #4]
    2842:	687b      	ldr	r3, [r7, #4]
    2844:	685b      	ldr	r3, [r3, #4]
    2846:	68da      	ldr	r2, [r3, #12]
    2848:	f240 03a4 	movw	r3, #164	; 0xa4
    284c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2850:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2852:	f240 03a4 	movw	r3, #164	; 0xa4
    2856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    285a:	681b      	ldr	r3, [r3, #0]
    285c:	681a      	ldr	r2, [r3, #0]
    285e:	f240 03a4 	movw	r3, #164	; 0xa4
    2862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2866:	6819      	ldr	r1, [r3, #0]
    2868:	f240 03a4 	movw	r3, #164	; 0xa4
    286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2870:	681b      	ldr	r3, [r3, #0]
    2872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2874:	4608      	mov	r0, r1
    2876:	4619      	mov	r1, r3
    2878:	4790      	blx	r2

	return;
    287a:	bf00      	nop
}
    287c:	3708      	adds	r7, #8
    287e:	46bd      	mov	sp, r7
    2880:	bd80      	pop	{r7, pc}
    2882:	bf00      	nop

00002884 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2884:	b580      	push	{r7, lr}
    2886:	b082      	sub	sp, #8
    2888:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    288a:	2300      	movs	r3, #0
    288c:	607b      	str	r3, [r7, #4]
    288e:	e00f      	b.n	28b0 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2890:	687a      	ldr	r2, [r7, #4]
    2892:	4613      	mov	r3, r2
    2894:	009b      	lsls	r3, r3, #2
    2896:	4413      	add	r3, r2
    2898:	009b      	lsls	r3, r3, #2
    289a:	f240 0238 	movw	r2, #56	; 0x38
    289e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28a2:	4413      	add	r3, r2
    28a4:	4618      	mov	r0, r3
    28a6:	f000 f857 	bl	2958 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	3301      	adds	r3, #1
    28ae:	607b      	str	r3, [r7, #4]
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	2b01      	cmp	r3, #1
    28b4:	d9ec      	bls.n	2890 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    28b6:	f240 0060 	movw	r0, #96	; 0x60
    28ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28be:	f000 f84b 	bl	2958 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    28c2:	f240 0074 	movw	r0, #116	; 0x74
    28c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28ca:	f000 f845 	bl	2958 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    28ce:	f240 0090 	movw	r0, #144	; 0x90
    28d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28d6:	f000 f83f 	bl	2958 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    28da:	f240 0388 	movw	r3, #136	; 0x88
    28de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28e2:	f240 0260 	movw	r2, #96	; 0x60
    28e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    28ec:	f240 038c 	movw	r3, #140	; 0x8c
    28f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28f4:	f240 0274 	movw	r2, #116	; 0x74
    28f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28fc:	601a      	str	r2, [r3, #0]
}
    28fe:	3708      	adds	r7, #8
    2900:	46bd      	mov	sp, r7
    2902:	bd80      	pop	{r7, pc}

00002904 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2904:	b580      	push	{r7, lr}
    2906:	b084      	sub	sp, #16
    2908:	af00      	add	r7, sp, #0
    290a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	68db      	ldr	r3, [r3, #12]
    2910:	68db      	ldr	r3, [r3, #12]
    2912:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2914:	68bb      	ldr	r3, [r7, #8]
    2916:	3318      	adds	r3, #24
    2918:	4618      	mov	r0, r3
    291a:	f000 f8a9 	bl	2a70 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    291e:	68bb      	ldr	r3, [r7, #8]
    2920:	3318      	adds	r3, #24
    2922:	f240 0090 	movw	r0, #144	; 0x90
    2926:	f2c2 0000 	movt	r0, #8192	; 0x2000
    292a:	4619      	mov	r1, r3
    292c:	f000 f840 	bl	29b0 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2930:	68bb      	ldr	r3, [r7, #8]
    2932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2934:	f240 03a4 	movw	r3, #164	; 0xa4
    2938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    293c:	681b      	ldr	r3, [r3, #0]
    293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2940:	429a      	cmp	r2, r3
    2942:	d302      	bcc.n	294a <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    2944:	2301      	movs	r3, #1
    2946:	60fb      	str	r3, [r7, #12]
    2948:	e001      	b.n	294e <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    294a:	2300      	movs	r3, #0
    294c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    294e:	68fb      	ldr	r3, [r7, #12]
}
    2950:	4618      	mov	r0, r3
    2952:	3710      	adds	r7, #16
    2954:	46bd      	mov	sp, r7
    2956:	bd80      	pop	{r7, pc}

00002958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2958:	b480      	push	{r7}
    295a:	b083      	sub	sp, #12
    295c:	af00      	add	r7, sp, #0
    295e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2960:	687b      	ldr	r3, [r7, #4]
    2962:	f103 0208 	add.w	r2, r3, #8
    2966:	687b      	ldr	r3, [r7, #4]
    2968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    296a:	687b      	ldr	r3, [r7, #4]
    296c:	f04f 32ff 	mov.w	r2, #4294967295
    2970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2972:	687b      	ldr	r3, [r7, #4]
    2974:	f103 0208 	add.w	r2, r3, #8
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	f103 0208 	add.w	r2, r3, #8
    2982:	687b      	ldr	r3, [r7, #4]
    2984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	2200      	movs	r2, #0
    298a:	601a      	str	r2, [r3, #0]
}
    298c:	370c      	adds	r7, #12
    298e:	46bd      	mov	sp, r7
    2990:	f85d 7b04 	ldr.w	r7, [sp], #4
    2994:	4770      	bx	lr
    2996:	bf00      	nop

00002998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2998:	b480      	push	{r7}
    299a:	b083      	sub	sp, #12
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	2200      	movs	r2, #0
    29a4:	611a      	str	r2, [r3, #16]
}
    29a6:	370c      	adds	r7, #12
    29a8:	46bd      	mov	sp, r7
    29aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ae:	4770      	bx	lr

000029b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    29b0:	b480      	push	{r7}
    29b2:	b085      	sub	sp, #20
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    29b8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    29ba:	687b      	ldr	r3, [r7, #4]
    29bc:	685b      	ldr	r3, [r3, #4]
    29be:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    29c0:	68fb      	ldr	r3, [r7, #12]
    29c2:	685a      	ldr	r2, [r3, #4]
    29c4:	683b      	ldr	r3, [r7, #0]
    29c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	685a      	ldr	r2, [r3, #4]
    29cc:	683b      	ldr	r3, [r7, #0]
    29ce:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    29d0:	68fb      	ldr	r3, [r7, #12]
    29d2:	685b      	ldr	r3, [r3, #4]
    29d4:	683a      	ldr	r2, [r7, #0]
    29d6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	683a      	ldr	r2, [r7, #0]
    29dc:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    29de:	687b      	ldr	r3, [r7, #4]
    29e0:	683a      	ldr	r2, [r7, #0]
    29e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    29e4:	683b      	ldr	r3, [r7, #0]
    29e6:	687a      	ldr	r2, [r7, #4]
    29e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	681b      	ldr	r3, [r3, #0]
    29ee:	1c5a      	adds	r2, r3, #1
    29f0:	687b      	ldr	r3, [r7, #4]
    29f2:	601a      	str	r2, [r3, #0]
}
    29f4:	3714      	adds	r7, #20
    29f6:	46bd      	mov	sp, r7
    29f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29fc:	4770      	bx	lr
    29fe:	bf00      	nop

00002a00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2a00:	b480      	push	{r7}
    2a02:	b085      	sub	sp, #20
    2a04:	af00      	add	r7, sp, #0
    2a06:	6078      	str	r0, [r7, #4]
    2a08:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2a0a:	683b      	ldr	r3, [r7, #0]
    2a0c:	681b      	ldr	r3, [r3, #0]
    2a0e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2a10:	68bb      	ldr	r3, [r7, #8]
    2a12:	f1b3 3fff 	cmp.w	r3, #4294967295
    2a16:	d103      	bne.n	2a20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	691b      	ldr	r3, [r3, #16]
    2a1c:	60fb      	str	r3, [r7, #12]
    2a1e:	e00c      	b.n	2a3a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	3308      	adds	r3, #8
    2a24:	60fb      	str	r3, [r7, #12]
    2a26:	e002      	b.n	2a2e <vListInsert+0x2e>
    2a28:	68fb      	ldr	r3, [r7, #12]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	60fb      	str	r3, [r7, #12]
    2a2e:	68fb      	ldr	r3, [r7, #12]
    2a30:	685b      	ldr	r3, [r3, #4]
    2a32:	681a      	ldr	r2, [r3, #0]
    2a34:	68bb      	ldr	r3, [r7, #8]
    2a36:	429a      	cmp	r2, r3
    2a38:	d9f6      	bls.n	2a28 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2a3a:	68fb      	ldr	r3, [r7, #12]
    2a3c:	685a      	ldr	r2, [r3, #4]
    2a3e:	683b      	ldr	r3, [r7, #0]
    2a40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2a42:	683b      	ldr	r3, [r7, #0]
    2a44:	685b      	ldr	r3, [r3, #4]
    2a46:	683a      	ldr	r2, [r7, #0]
    2a48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2a4a:	683b      	ldr	r3, [r7, #0]
    2a4c:	68fa      	ldr	r2, [r7, #12]
    2a4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	683a      	ldr	r2, [r7, #0]
    2a54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a56:	683b      	ldr	r3, [r7, #0]
    2a58:	687a      	ldr	r2, [r7, #4]
    2a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	1c5a      	adds	r2, r3, #1
    2a62:	687b      	ldr	r3, [r7, #4]
    2a64:	601a      	str	r2, [r3, #0]
}
    2a66:	3714      	adds	r7, #20
    2a68:	46bd      	mov	sp, r7
    2a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6e:	4770      	bx	lr

00002a70 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2a70:	b480      	push	{r7}
    2a72:	b085      	sub	sp, #20
    2a74:	af00      	add	r7, sp, #0
    2a76:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	685b      	ldr	r3, [r3, #4]
    2a7c:	687a      	ldr	r2, [r7, #4]
    2a7e:	6892      	ldr	r2, [r2, #8]
    2a80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	689b      	ldr	r3, [r3, #8]
    2a86:	687a      	ldr	r2, [r7, #4]
    2a88:	6852      	ldr	r2, [r2, #4]
    2a8a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2a8c:	687b      	ldr	r3, [r7, #4]
    2a8e:	691b      	ldr	r3, [r3, #16]
    2a90:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2a92:	68fb      	ldr	r3, [r7, #12]
    2a94:	685a      	ldr	r2, [r3, #4]
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	429a      	cmp	r2, r3
    2a9a:	d103      	bne.n	2aa4 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	689a      	ldr	r2, [r3, #8]
    2aa0:	68fb      	ldr	r3, [r7, #12]
    2aa2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	2200      	movs	r2, #0
    2aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2aaa:	68fb      	ldr	r3, [r7, #12]
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	1e5a      	subs	r2, r3, #1
    2ab0:	68fb      	ldr	r3, [r7, #12]
    2ab2:	601a      	str	r2, [r3, #0]
}
    2ab4:	3714      	adds	r7, #20
    2ab6:	46bd      	mov	sp, r7
    2ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2abc:	4770      	bx	lr
    2abe:	bf00      	nop

00002ac0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b084      	sub	sp, #16
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	6078      	str	r0, [r7, #4]
    2ac8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2aca:	2301      	movs	r3, #1
    2acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2ace:	683b      	ldr	r3, [r7, #0]
    2ad0:	2b01      	cmp	r3, #1
    2ad2:	d00b      	beq.n	2aec <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ad4:	687b      	ldr	r3, [r7, #4]
    2ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d001      	beq.n	2ae0 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    2adc:	2300      	movs	r3, #0
    2ade:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	691b      	ldr	r3, [r3, #16]
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d001      	beq.n	2aec <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    2ae8:	2300      	movs	r3, #0
    2aea:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2aec:	68fb      	ldr	r3, [r7, #12]
    2aee:	2b01      	cmp	r3, #1
    2af0:	d12f      	bne.n	2b52 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2af2:	687b      	ldr	r3, [r7, #4]
    2af4:	681a      	ldr	r2, [r3, #0]
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2afa:	6879      	ldr	r1, [r7, #4]
    2afc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2afe:	fb01 f303 	mul.w	r3, r1, r3
    2b02:	441a      	add	r2, r3
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	2200      	movs	r2, #0
    2b0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2b0e:	687b      	ldr	r3, [r7, #4]
    2b10:	681a      	ldr	r2, [r3, #0]
    2b12:	687b      	ldr	r3, [r7, #4]
    2b14:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	681a      	ldr	r2, [r3, #0]
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2b1e:	3b01      	subs	r3, #1
    2b20:	6879      	ldr	r1, [r7, #4]
    2b22:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2b24:	fb01 f303 	mul.w	r3, r1, r3
    2b28:	441a      	add	r2, r3
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	f04f 32ff 	mov.w	r2, #4294967295
    2b34:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2b36:	687b      	ldr	r3, [r7, #4]
    2b38:	f04f 32ff 	mov.w	r2, #4294967295
    2b3c:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2b3e:	687b      	ldr	r3, [r7, #4]
    2b40:	3310      	adds	r3, #16
    2b42:	4618      	mov	r0, r3
    2b44:	f7ff ff08 	bl	2958 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	3324      	adds	r3, #36	; 0x24
    2b4c:	4618      	mov	r0, r3
    2b4e:	f7ff ff03 	bl	2958 <vListInitialise>
	}

	return xReturn;
    2b52:	68fb      	ldr	r3, [r7, #12]
}
    2b54:	4618      	mov	r0, r3
    2b56:	3710      	adds	r7, #16
    2b58:	46bd      	mov	sp, r7
    2b5a:	bd80      	pop	{r7, pc}

00002b5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b088      	sub	sp, #32
    2b60:	af00      	add	r7, sp, #0
    2b62:	60f8      	str	r0, [r7, #12]
    2b64:	60b9      	str	r1, [r7, #8]
    2b66:	4613      	mov	r3, r2
    2b68:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2b6a:	2300      	movs	r3, #0
    2b6c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2b6e:	68fb      	ldr	r3, [r7, #12]
    2b70:	2b00      	cmp	r3, #0
    2b72:	d026      	beq.n	2bc2 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2b74:	204c      	movs	r0, #76	; 0x4c
    2b76:	f001 fd75 	bl	4664 <pvPortMalloc>
    2b7a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2b7c:	69bb      	ldr	r3, [r7, #24]
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d01f      	beq.n	2bc2 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2b82:	68fb      	ldr	r3, [r7, #12]
    2b84:	68ba      	ldr	r2, [r7, #8]
    2b86:	fb02 f303 	mul.w	r3, r2, r3
    2b8a:	3301      	adds	r3, #1
    2b8c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2b8e:	6978      	ldr	r0, [r7, #20]
    2b90:	f001 fd68 	bl	4664 <pvPortMalloc>
    2b94:	4602      	mov	r2, r0
    2b96:	69bb      	ldr	r3, [r7, #24]
    2b98:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2b9a:	69bb      	ldr	r3, [r7, #24]
    2b9c:	681b      	ldr	r3, [r3, #0]
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d00c      	beq.n	2bbc <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2ba2:	69bb      	ldr	r3, [r7, #24]
    2ba4:	68fa      	ldr	r2, [r7, #12]
    2ba6:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2ba8:	69bb      	ldr	r3, [r7, #24]
    2baa:	68ba      	ldr	r2, [r7, #8]
    2bac:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2bae:	69b8      	ldr	r0, [r7, #24]
    2bb0:	2101      	movs	r1, #1
    2bb2:	f7ff ff85 	bl	2ac0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2bb6:	69bb      	ldr	r3, [r7, #24]
    2bb8:	61fb      	str	r3, [r7, #28]
    2bba:	e002      	b.n	2bc2 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2bbc:	69b8      	ldr	r0, [r7, #24]
    2bbe:	f001 fe15 	bl	47ec <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2bc2:	69fb      	ldr	r3, [r7, #28]
}
    2bc4:	4618      	mov	r0, r3
    2bc6:	3720      	adds	r7, #32
    2bc8:	46bd      	mov	sp, r7
    2bca:	bd80      	pop	{r7, pc}

00002bcc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2bcc:	b580      	push	{r7, lr}
    2bce:	b084      	sub	sp, #16
    2bd0:	af00      	add	r7, sp, #0
    2bd2:	4603      	mov	r3, r0
    2bd4:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2bd6:	204c      	movs	r0, #76	; 0x4c
    2bd8:	f001 fd44 	bl	4664 <pvPortMalloc>
    2bdc:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2bde:	68fb      	ldr	r3, [r7, #12]
    2be0:	2b00      	cmp	r3, #0
    2be2:	d02c      	beq.n	2c3e <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2be4:	68fb      	ldr	r3, [r7, #12]
    2be6:	2200      	movs	r2, #0
    2be8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2bea:	68fb      	ldr	r3, [r7, #12]
    2bec:	2200      	movs	r2, #0
    2bee:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2bf0:	68fb      	ldr	r3, [r7, #12]
    2bf2:	2200      	movs	r2, #0
    2bf4:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2bf6:	68fb      	ldr	r3, [r7, #12]
    2bf8:	2200      	movs	r2, #0
    2bfa:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2bfc:	68fb      	ldr	r3, [r7, #12]
    2bfe:	2200      	movs	r2, #0
    2c00:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2c02:	68fb      	ldr	r3, [r7, #12]
    2c04:	2201      	movs	r2, #1
    2c06:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2c08:	68fb      	ldr	r3, [r7, #12]
    2c0a:	2200      	movs	r2, #0
    2c0c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2c0e:	68fb      	ldr	r3, [r7, #12]
    2c10:	f04f 32ff 	mov.w	r2, #4294967295
    2c14:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2c16:	68fb      	ldr	r3, [r7, #12]
    2c18:	f04f 32ff 	mov.w	r2, #4294967295
    2c1c:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2c1e:	68fb      	ldr	r3, [r7, #12]
    2c20:	3310      	adds	r3, #16
    2c22:	4618      	mov	r0, r3
    2c24:	f7ff fe98 	bl	2958 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2c28:	68fb      	ldr	r3, [r7, #12]
    2c2a:	3324      	adds	r3, #36	; 0x24
    2c2c:	4618      	mov	r0, r3
    2c2e:	f7ff fe93 	bl	2958 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2c32:	68f8      	ldr	r0, [r7, #12]
    2c34:	2100      	movs	r1, #0
    2c36:	2200      	movs	r2, #0
    2c38:	2300      	movs	r3, #0
    2c3a:	f000 f81d 	bl	2c78 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2c3e:	68fb      	ldr	r3, [r7, #12]
	}
    2c40:	4618      	mov	r0, r3
    2c42:	3710      	adds	r7, #16
    2c44:	46bd      	mov	sp, r7
    2c46:	bd80      	pop	{r7, pc}

00002c48 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2c48:	b580      	push	{r7, lr}
    2c4a:	b084      	sub	sp, #16
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the 
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2c50:	f001 fc8e 	bl	4570 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	681b      	ldr	r3, [r3, #0]
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d103      	bne.n	2c64 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	685b      	ldr	r3, [r3, #4]
    2c60:	60fb      	str	r3, [r7, #12]
    2c62:	e001      	b.n	2c68 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    2c64:	2300      	movs	r3, #0
    2c66:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2c68:	f001 fc98 	bl	459c <vPortExitCritical>
		
		return pxReturn;
    2c6c:	68fb      	ldr	r3, [r7, #12]
	}
    2c6e:	4618      	mov	r0, r3
    2c70:	3710      	adds	r7, #16
    2c72:	46bd      	mov	sp, r7
    2c74:	bd80      	pop	{r7, pc}
    2c76:	bf00      	nop

00002c78 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2c78:	b580      	push	{r7, lr}
    2c7a:	b088      	sub	sp, #32
    2c7c:	af00      	add	r7, sp, #0
    2c7e:	60f8      	str	r0, [r7, #12]
    2c80:	60b9      	str	r1, [r7, #8]
    2c82:	607a      	str	r2, [r7, #4]
    2c84:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2c86:	2300      	movs	r3, #0
    2c88:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2c8a:	f001 fc71 	bl	4570 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2c92:	68fb      	ldr	r3, [r7, #12]
    2c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2c96:	429a      	cmp	r2, r3
    2c98:	d216      	bcs.n	2cc8 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2c9a:	68f8      	ldr	r0, [r7, #12]
    2c9c:	68b9      	ldr	r1, [r7, #8]
    2c9e:	683a      	ldr	r2, [r7, #0]
    2ca0:	f000 f9d6 	bl	3050 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ca4:	68fb      	ldr	r3, [r7, #12]
    2ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d009      	beq.n	2cc0 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2cac:	68fb      	ldr	r3, [r7, #12]
    2cae:	3324      	adds	r3, #36	; 0x24
    2cb0:	4618      	mov	r0, r3
    2cb2:	f001 f905 	bl	3ec0 <xTaskRemoveFromEventList>
    2cb6:	4603      	mov	r3, r0
    2cb8:	2b01      	cmp	r3, #1
    2cba:	d101      	bne.n	2cc0 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2cbc:	f001 fc4a 	bl	4554 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2cc0:	f001 fc6c 	bl	459c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2cc4:	2301      	movs	r3, #1
    2cc6:	e059      	b.n	2d7c <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d103      	bne.n	2cd6 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2cce:	f001 fc65 	bl	459c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2cd2:	2300      	movs	r3, #0
    2cd4:	e052      	b.n	2d7c <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    2cd6:	69fb      	ldr	r3, [r7, #28]
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d106      	bne.n	2cea <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2cdc:	f107 0314 	add.w	r3, r7, #20
    2ce0:	4618      	mov	r0, r3
    2ce2:	f001 f945 	bl	3f70 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2ce6:	2301      	movs	r3, #1
    2ce8:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2cea:	f001 fc57 	bl	459c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2cee:	f000 fe93 	bl	3a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2cf2:	f001 fc3d 	bl	4570 <vPortEnterCritical>
    2cf6:	68fb      	ldr	r3, [r7, #12]
    2cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
    2cfe:	d102      	bne.n	2d06 <xQueueGenericSend+0x8e>
    2d00:	68fb      	ldr	r3, [r7, #12]
    2d02:	2200      	movs	r2, #0
    2d04:	645a      	str	r2, [r3, #68]	; 0x44
    2d06:	68fb      	ldr	r3, [r7, #12]
    2d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d0e:	d102      	bne.n	2d16 <xQueueGenericSend+0x9e>
    2d10:	68fb      	ldr	r3, [r7, #12]
    2d12:	2200      	movs	r2, #0
    2d14:	649a      	str	r2, [r3, #72]	; 0x48
    2d16:	f001 fc41 	bl	459c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2d1a:	f107 0214 	add.w	r2, r7, #20
    2d1e:	1d3b      	adds	r3, r7, #4
    2d20:	4610      	mov	r0, r2
    2d22:	4619      	mov	r1, r3
    2d24:	f001 f93c 	bl	3fa0 <xTaskCheckForTimeOut>
    2d28:	4603      	mov	r3, r0
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d11e      	bne.n	2d6c <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2d2e:	68f8      	ldr	r0, [r7, #12]
    2d30:	f000 fa86 	bl	3240 <prvIsQueueFull>
    2d34:	4603      	mov	r3, r0
    2d36:	2b00      	cmp	r3, #0
    2d38:	d012      	beq.n	2d60 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2d3a:	68fb      	ldr	r3, [r7, #12]
    2d3c:	f103 0210 	add.w	r2, r3, #16
    2d40:	687b      	ldr	r3, [r7, #4]
    2d42:	4610      	mov	r0, r2
    2d44:	4619      	mov	r1, r3
    2d46:	f001 f883 	bl	3e50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2d4a:	68f8      	ldr	r0, [r7, #12]
    2d4c:	f000 fa02 	bl	3154 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2d50:	f000 fe74 	bl	3a3c <xTaskResumeAll>
    2d54:	4603      	mov	r3, r0
    2d56:	2b00      	cmp	r3, #0
    2d58:	d10f      	bne.n	2d7a <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    2d5a:	f001 fbfb 	bl	4554 <vPortYieldFromISR>
    2d5e:	e00c      	b.n	2d7a <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2d60:	68f8      	ldr	r0, [r7, #12]
    2d62:	f000 f9f7 	bl	3154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2d66:	f000 fe69 	bl	3a3c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2d6a:	e78e      	b.n	2c8a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2d6c:	68f8      	ldr	r0, [r7, #12]
    2d6e:	f000 f9f1 	bl	3154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2d72:	f000 fe63 	bl	3a3c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2d76:	2300      	movs	r3, #0
    2d78:	e000      	b.n	2d7c <xQueueGenericSend+0x104>
		}
	}
    2d7a:	e786      	b.n	2c8a <xQueueGenericSend+0x12>
}
    2d7c:	4618      	mov	r0, r3
    2d7e:	3720      	adds	r7, #32
    2d80:	46bd      	mov	sp, r7
    2d82:	bd80      	pop	{r7, pc}

00002d84 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2d84:	b580      	push	{r7, lr}
    2d86:	b086      	sub	sp, #24
    2d88:	af00      	add	r7, sp, #0
    2d8a:	60f8      	str	r0, [r7, #12]
    2d8c:	60b9      	str	r1, [r7, #8]
    2d8e:	607a      	str	r2, [r7, #4]
    2d90:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2d92:	2300      	movs	r3, #0
    2d94:	613b      	str	r3, [r7, #16]
    2d96:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2d9a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2d9e:	68fb      	ldr	r3, [r7, #12]
    2da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2da2:	68fb      	ldr	r3, [r7, #12]
    2da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2da6:	429a      	cmp	r2, r3
    2da8:	d221      	bcs.n	2dee <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2daa:	68f8      	ldr	r0, [r7, #12]
    2dac:	68b9      	ldr	r1, [r7, #8]
    2dae:	683a      	ldr	r2, [r7, #0]
    2db0:	f000 f94e 	bl	3050 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2db4:	68fb      	ldr	r3, [r7, #12]
    2db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2db8:	f1b3 3fff 	cmp.w	r3, #4294967295
    2dbc:	d10f      	bne.n	2dde <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2dbe:	68fb      	ldr	r3, [r7, #12]
    2dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d010      	beq.n	2de8 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2dc6:	68fb      	ldr	r3, [r7, #12]
    2dc8:	3324      	adds	r3, #36	; 0x24
    2dca:	4618      	mov	r0, r3
    2dcc:	f001 f878 	bl	3ec0 <xTaskRemoveFromEventList>
    2dd0:	4603      	mov	r3, r0
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d008      	beq.n	2de8 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2dd6:	687b      	ldr	r3, [r7, #4]
    2dd8:	2201      	movs	r2, #1
    2dda:	601a      	str	r2, [r3, #0]
    2ddc:	e004      	b.n	2de8 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2dde:	68fb      	ldr	r3, [r7, #12]
    2de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2de2:	1c5a      	adds	r2, r3, #1
    2de4:	68fb      	ldr	r3, [r7, #12]
    2de6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    2de8:	2301      	movs	r3, #1
    2dea:	617b      	str	r3, [r7, #20]
    2dec:	e001      	b.n	2df2 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2dee:	2300      	movs	r3, #0
    2df0:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2df2:	f04f 0000 	mov.w	r0, #0
    2df6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2dfa:	697b      	ldr	r3, [r7, #20]
}
    2dfc:	4618      	mov	r0, r3
    2dfe:	3718      	adds	r7, #24
    2e00:	46bd      	mov	sp, r7
    2e02:	bd80      	pop	{r7, pc}

00002e04 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2e04:	b580      	push	{r7, lr}
    2e06:	b088      	sub	sp, #32
    2e08:	af00      	add	r7, sp, #0
    2e0a:	60f8      	str	r0, [r7, #12]
    2e0c:	60b9      	str	r1, [r7, #8]
    2e0e:	607a      	str	r2, [r7, #4]
    2e10:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2e12:	2300      	movs	r3, #0
    2e14:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2e16:	f001 fbab 	bl	4570 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2e1a:	68fb      	ldr	r3, [r7, #12]
    2e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d03b      	beq.n	2e9a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2e22:	68fb      	ldr	r3, [r7, #12]
    2e24:	68db      	ldr	r3, [r3, #12]
    2e26:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2e28:	68f8      	ldr	r0, [r7, #12]
    2e2a:	68b9      	ldr	r1, [r7, #8]
    2e2c:	f000 f96c 	bl	3108 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2e30:	683b      	ldr	r3, [r7, #0]
    2e32:	2b00      	cmp	r3, #0
    2e34:	d11c      	bne.n	2e70 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2e36:	68fb      	ldr	r3, [r7, #12]
    2e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2e3a:	1e5a      	subs	r2, r3, #1
    2e3c:	68fb      	ldr	r3, [r7, #12]
    2e3e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2e40:	68fb      	ldr	r3, [r7, #12]
    2e42:	681b      	ldr	r3, [r3, #0]
    2e44:	2b00      	cmp	r3, #0
    2e46:	d104      	bne.n	2e52 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2e48:	f001 fa5e 	bl	4308 <xTaskGetCurrentTaskHandle>
    2e4c:	4602      	mov	r2, r0
    2e4e:	68fb      	ldr	r3, [r7, #12]
    2e50:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2e52:	68fb      	ldr	r3, [r7, #12]
    2e54:	691b      	ldr	r3, [r3, #16]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d01b      	beq.n	2e92 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	3310      	adds	r3, #16
    2e5e:	4618      	mov	r0, r3
    2e60:	f001 f82e 	bl	3ec0 <xTaskRemoveFromEventList>
    2e64:	4603      	mov	r3, r0
    2e66:	2b01      	cmp	r3, #1
    2e68:	d113      	bne.n	2e92 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    2e6a:	f001 fb73 	bl	4554 <vPortYieldFromISR>
    2e6e:	e010      	b.n	2e92 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2e70:	68fb      	ldr	r3, [r7, #12]
    2e72:	69ba      	ldr	r2, [r7, #24]
    2e74:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e76:	68fb      	ldr	r3, [r7, #12]
    2e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d009      	beq.n	2e92 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2e7e:	68fb      	ldr	r3, [r7, #12]
    2e80:	3324      	adds	r3, #36	; 0x24
    2e82:	4618      	mov	r0, r3
    2e84:	f001 f81c 	bl	3ec0 <xTaskRemoveFromEventList>
    2e88:	4603      	mov	r3, r0
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d001      	beq.n	2e92 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2e8e:	f001 fb61 	bl	4554 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    2e92:	f001 fb83 	bl	459c <vPortExitCritical>
				return pdPASS;
    2e96:	2301      	movs	r3, #1
    2e98:	e066      	b.n	2f68 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d103      	bne.n	2ea8 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2ea0:	f001 fb7c 	bl	459c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2ea4:	2300      	movs	r3, #0
    2ea6:	e05f      	b.n	2f68 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    2ea8:	69fb      	ldr	r3, [r7, #28]
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d106      	bne.n	2ebc <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2eae:	f107 0310 	add.w	r3, r7, #16
    2eb2:	4618      	mov	r0, r3
    2eb4:	f001 f85c 	bl	3f70 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2eb8:	2301      	movs	r3, #1
    2eba:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    2ebc:	f001 fb6e 	bl	459c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2ec0:	f000 fdaa 	bl	3a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2ec4:	f001 fb54 	bl	4570 <vPortEnterCritical>
    2ec8:	68fb      	ldr	r3, [r7, #12]
    2eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
    2ed0:	d102      	bne.n	2ed8 <xQueueGenericReceive+0xd4>
    2ed2:	68fb      	ldr	r3, [r7, #12]
    2ed4:	2200      	movs	r2, #0
    2ed6:	645a      	str	r2, [r3, #68]	; 0x44
    2ed8:	68fb      	ldr	r3, [r7, #12]
    2eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2edc:	f1b3 3fff 	cmp.w	r3, #4294967295
    2ee0:	d102      	bne.n	2ee8 <xQueueGenericReceive+0xe4>
    2ee2:	68fb      	ldr	r3, [r7, #12]
    2ee4:	2200      	movs	r2, #0
    2ee6:	649a      	str	r2, [r3, #72]	; 0x48
    2ee8:	f001 fb58 	bl	459c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2eec:	f107 0210 	add.w	r2, r7, #16
    2ef0:	1d3b      	adds	r3, r7, #4
    2ef2:	4610      	mov	r0, r2
    2ef4:	4619      	mov	r1, r3
    2ef6:	f001 f853 	bl	3fa0 <xTaskCheckForTimeOut>
    2efa:	4603      	mov	r3, r0
    2efc:	2b00      	cmp	r3, #0
    2efe:	d12b      	bne.n	2f58 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2f00:	68f8      	ldr	r0, [r7, #12]
    2f02:	f000 f973 	bl	31ec <prvIsQueueEmpty>
    2f06:	4603      	mov	r3, r0
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d01f      	beq.n	2f4c <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2f0c:	68fb      	ldr	r3, [r7, #12]
    2f0e:	681b      	ldr	r3, [r3, #0]
    2f10:	2b00      	cmp	r3, #0
    2f12:	d108      	bne.n	2f26 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    2f14:	f001 fb2c 	bl	4570 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2f18:	68fb      	ldr	r3, [r7, #12]
    2f1a:	685b      	ldr	r3, [r3, #4]
    2f1c:	4618      	mov	r0, r3
    2f1e:	f001 fa03 	bl	4328 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2f22:	f001 fb3b 	bl	459c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2f26:	68fb      	ldr	r3, [r7, #12]
    2f28:	f103 0224 	add.w	r2, r3, #36	; 0x24
    2f2c:	687b      	ldr	r3, [r7, #4]
    2f2e:	4610      	mov	r0, r2
    2f30:	4619      	mov	r1, r3
    2f32:	f000 ff8d 	bl	3e50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2f36:	68f8      	ldr	r0, [r7, #12]
    2f38:	f000 f90c 	bl	3154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2f3c:	f000 fd7e 	bl	3a3c <xTaskResumeAll>
    2f40:	4603      	mov	r3, r0
    2f42:	2b00      	cmp	r3, #0
    2f44:	d10f      	bne.n	2f66 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    2f46:	f001 fb05 	bl	4554 <vPortYieldFromISR>
    2f4a:	e00c      	b.n	2f66 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2f4c:	68f8      	ldr	r0, [r7, #12]
    2f4e:	f000 f901 	bl	3154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2f52:	f000 fd73 	bl	3a3c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    2f56:	e75e      	b.n	2e16 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2f58:	68f8      	ldr	r0, [r7, #12]
    2f5a:	f000 f8fb 	bl	3154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2f5e:	f000 fd6d 	bl	3a3c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2f62:	2300      	movs	r3, #0
    2f64:	e000      	b.n	2f68 <xQueueGenericReceive+0x164>
		}
	}
    2f66:	e756      	b.n	2e16 <xQueueGenericReceive+0x12>
}
    2f68:	4618      	mov	r0, r3
    2f6a:	3720      	adds	r7, #32
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bd80      	pop	{r7, pc}

00002f70 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    2f70:	b580      	push	{r7, lr}
    2f72:	b086      	sub	sp, #24
    2f74:	af00      	add	r7, sp, #0
    2f76:	60f8      	str	r0, [r7, #12]
    2f78:	60b9      	str	r1, [r7, #8]
    2f7a:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2f7c:	2300      	movs	r3, #0
    2f7e:	613b      	str	r3, [r7, #16]
    2f80:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2f84:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2f88:	68fb      	ldr	r3, [r7, #12]
    2f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d025      	beq.n	2fdc <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2f90:	68f8      	ldr	r0, [r7, #12]
    2f92:	68b9      	ldr	r1, [r7, #8]
    2f94:	f000 f8b8 	bl	3108 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2f98:	68fb      	ldr	r3, [r7, #12]
    2f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2f9c:	1e5a      	subs	r2, r3, #1
    2f9e:	68fb      	ldr	r3, [r7, #12]
    2fa0:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2fa2:	68fb      	ldr	r3, [r7, #12]
    2fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
    2faa:	d10f      	bne.n	2fcc <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2fac:	68fb      	ldr	r3, [r7, #12]
    2fae:	691b      	ldr	r3, [r3, #16]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d010      	beq.n	2fd6 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2fb4:	68fb      	ldr	r3, [r7, #12]
    2fb6:	3310      	adds	r3, #16
    2fb8:	4618      	mov	r0, r3
    2fba:	f000 ff81 	bl	3ec0 <xTaskRemoveFromEventList>
    2fbe:	4603      	mov	r3, r0
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	d008      	beq.n	2fd6 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2fc4:	687b      	ldr	r3, [r7, #4]
    2fc6:	2201      	movs	r2, #1
    2fc8:	601a      	str	r2, [r3, #0]
    2fca:	e004      	b.n	2fd6 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2fcc:	68fb      	ldr	r3, [r7, #12]
    2fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fd0:	1c5a      	adds	r2, r3, #1
    2fd2:	68fb      	ldr	r3, [r7, #12]
    2fd4:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    2fd6:	2301      	movs	r3, #1
    2fd8:	617b      	str	r3, [r7, #20]
    2fda:	e001      	b.n	2fe0 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    2fdc:	2300      	movs	r3, #0
    2fde:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2fe0:	f04f 0000 	mov.w	r0, #0
    2fe4:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    2fe8:	697b      	ldr	r3, [r7, #20]
}
    2fea:	4618      	mov	r0, r3
    2fec:	3718      	adds	r7, #24
    2fee:	46bd      	mov	sp, r7
    2ff0:	bd80      	pop	{r7, pc}
    2ff2:	bf00      	nop

00002ff4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    2ff4:	b580      	push	{r7, lr}
    2ff6:	b084      	sub	sp, #16
    2ff8:	af00      	add	r7, sp, #0
    2ffa:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2ffc:	f001 fab8 	bl	4570 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3004:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3006:	f001 fac9 	bl	459c <vPortExitCritical>

	return uxReturn;
    300a:	68fb      	ldr	r3, [r7, #12]
}
    300c:	4618      	mov	r0, r3
    300e:	3710      	adds	r7, #16
    3010:	46bd      	mov	sp, r7
    3012:	bd80      	pop	{r7, pc}

00003014 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    3014:	b480      	push	{r7}
    3016:	b085      	sub	sp, #20
    3018:	af00      	add	r7, sp, #0
    301a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    301c:	687b      	ldr	r3, [r7, #4]
    301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3020:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    3022:	68fb      	ldr	r3, [r7, #12]
}
    3024:	4618      	mov	r0, r3
    3026:	3714      	adds	r7, #20
    3028:	46bd      	mov	sp, r7
    302a:	f85d 7b04 	ldr.w	r7, [sp], #4
    302e:	4770      	bx	lr

00003030 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3030:	b580      	push	{r7, lr}
    3032:	b082      	sub	sp, #8
    3034:	af00      	add	r7, sp, #0
    3036:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	4618      	mov	r0, r3
    303e:	f001 fbd5 	bl	47ec <vPortFree>
	vPortFree( pxQueue );
    3042:	6878      	ldr	r0, [r7, #4]
    3044:	f001 fbd2 	bl	47ec <vPortFree>
}
    3048:	3708      	adds	r7, #8
    304a:	46bd      	mov	sp, r7
    304c:	bd80      	pop	{r7, pc}
    304e:	bf00      	nop

00003050 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3050:	b580      	push	{r7, lr}
    3052:	b084      	sub	sp, #16
    3054:	af00      	add	r7, sp, #0
    3056:	60f8      	str	r0, [r7, #12]
    3058:	60b9      	str	r1, [r7, #8]
    305a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    305c:	68fb      	ldr	r3, [r7, #12]
    305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3060:	2b00      	cmp	r3, #0
    3062:	d10c      	bne.n	307e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3064:	68fb      	ldr	r3, [r7, #12]
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	2b00      	cmp	r3, #0
    306a:	d145      	bne.n	30f8 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    306c:	68fb      	ldr	r3, [r7, #12]
    306e:	685b      	ldr	r3, [r3, #4]
    3070:	4618      	mov	r0, r3
    3072:	f001 f9bd 	bl	43f0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    3076:	68fb      	ldr	r3, [r7, #12]
    3078:	2200      	movs	r2, #0
    307a:	605a      	str	r2, [r3, #4]
    307c:	e03c      	b.n	30f8 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    307e:	687b      	ldr	r3, [r7, #4]
    3080:	2b00      	cmp	r3, #0
    3082:	d11a      	bne.n	30ba <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3084:	68fb      	ldr	r3, [r7, #12]
    3086:	689a      	ldr	r2, [r3, #8]
    3088:	68fb      	ldr	r3, [r7, #12]
    308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    308c:	4610      	mov	r0, r2
    308e:	68b9      	ldr	r1, [r7, #8]
    3090:	461a      	mov	r2, r3
    3092:	f003 fbbb 	bl	680c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3096:	68fb      	ldr	r3, [r7, #12]
    3098:	689a      	ldr	r2, [r3, #8]
    309a:	68fb      	ldr	r3, [r7, #12]
    309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    309e:	441a      	add	r2, r3
    30a0:	68fb      	ldr	r3, [r7, #12]
    30a2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    30a4:	68fb      	ldr	r3, [r7, #12]
    30a6:	689a      	ldr	r2, [r3, #8]
    30a8:	68fb      	ldr	r3, [r7, #12]
    30aa:	685b      	ldr	r3, [r3, #4]
    30ac:	429a      	cmp	r2, r3
    30ae:	d323      	bcc.n	30f8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    30b0:	68fb      	ldr	r3, [r7, #12]
    30b2:	681a      	ldr	r2, [r3, #0]
    30b4:	68fb      	ldr	r3, [r7, #12]
    30b6:	609a      	str	r2, [r3, #8]
    30b8:	e01e      	b.n	30f8 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    30ba:	68fb      	ldr	r3, [r7, #12]
    30bc:	68da      	ldr	r2, [r3, #12]
    30be:	68fb      	ldr	r3, [r7, #12]
    30c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30c2:	4610      	mov	r0, r2
    30c4:	68b9      	ldr	r1, [r7, #8]
    30c6:	461a      	mov	r2, r3
    30c8:	f003 fba0 	bl	680c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    30cc:	68fb      	ldr	r3, [r7, #12]
    30ce:	68da      	ldr	r2, [r3, #12]
    30d0:	68fb      	ldr	r3, [r7, #12]
    30d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30d4:	425b      	negs	r3, r3
    30d6:	441a      	add	r2, r3
    30d8:	68fb      	ldr	r3, [r7, #12]
    30da:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    30dc:	68fb      	ldr	r3, [r7, #12]
    30de:	68da      	ldr	r2, [r3, #12]
    30e0:	68fb      	ldr	r3, [r7, #12]
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	429a      	cmp	r2, r3
    30e6:	d207      	bcs.n	30f8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    30e8:	68fb      	ldr	r3, [r7, #12]
    30ea:	685a      	ldr	r2, [r3, #4]
    30ec:	68fb      	ldr	r3, [r7, #12]
    30ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    30f0:	425b      	negs	r3, r3
    30f2:	441a      	add	r2, r3
    30f4:	68fb      	ldr	r3, [r7, #12]
    30f6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    30fc:	1c5a      	adds	r2, r3, #1
    30fe:	68fb      	ldr	r3, [r7, #12]
    3100:	639a      	str	r2, [r3, #56]	; 0x38
}
    3102:	3710      	adds	r7, #16
    3104:	46bd      	mov	sp, r7
    3106:	bd80      	pop	{r7, pc}

00003108 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    3108:	b580      	push	{r7, lr}
    310a:	b082      	sub	sp, #8
    310c:	af00      	add	r7, sp, #0
    310e:	6078      	str	r0, [r7, #4]
    3110:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	681b      	ldr	r3, [r3, #0]
    3116:	2b00      	cmp	r3, #0
    3118:	d019      	beq.n	314e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	68da      	ldr	r2, [r3, #12]
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3122:	441a      	add	r2, r3
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3128:	687b      	ldr	r3, [r7, #4]
    312a:	68da      	ldr	r2, [r3, #12]
    312c:	687b      	ldr	r3, [r7, #4]
    312e:	685b      	ldr	r3, [r3, #4]
    3130:	429a      	cmp	r2, r3
    3132:	d303      	bcc.n	313c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    3134:	687b      	ldr	r3, [r7, #4]
    3136:	681a      	ldr	r2, [r3, #0]
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	68da      	ldr	r2, [r3, #12]
    3140:	687b      	ldr	r3, [r7, #4]
    3142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3144:	6838      	ldr	r0, [r7, #0]
    3146:	4611      	mov	r1, r2
    3148:	461a      	mov	r2, r3
    314a:	f003 fb5f 	bl	680c <memcpy>
	}
}
    314e:	3708      	adds	r7, #8
    3150:	46bd      	mov	sp, r7
    3152:	bd80      	pop	{r7, pc}

00003154 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3154:	b580      	push	{r7, lr}
    3156:	b082      	sub	sp, #8
    3158:	af00      	add	r7, sp, #0
    315a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    315c:	f001 fa08 	bl	4570 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3160:	e014      	b.n	318c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3166:	2b00      	cmp	r3, #0
    3168:	d00f      	beq.n	318a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	3324      	adds	r3, #36	; 0x24
    316e:	4618      	mov	r0, r3
    3170:	f000 fea6 	bl	3ec0 <xTaskRemoveFromEventList>
    3174:	4603      	mov	r3, r0
    3176:	2b00      	cmp	r3, #0
    3178:	d001      	beq.n	317e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    317a:	f000 ff5d 	bl	4038 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    317e:	687b      	ldr	r3, [r7, #4]
    3180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3182:	1e5a      	subs	r2, r3, #1
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	649a      	str	r2, [r3, #72]	; 0x48
    3188:	e000      	b.n	318c <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    318a:	e003      	b.n	3194 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3190:	2b00      	cmp	r3, #0
    3192:	dce6      	bgt.n	3162 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3194:	687b      	ldr	r3, [r7, #4]
    3196:	f04f 32ff 	mov.w	r2, #4294967295
    319a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    319c:	f001 f9fe 	bl	459c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    31a0:	f001 f9e6 	bl	4570 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    31a4:	e014      	b.n	31d0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	691b      	ldr	r3, [r3, #16]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d00f      	beq.n	31ce <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	3310      	adds	r3, #16
    31b2:	4618      	mov	r0, r3
    31b4:	f000 fe84 	bl	3ec0 <xTaskRemoveFromEventList>
    31b8:	4603      	mov	r3, r0
    31ba:	2b00      	cmp	r3, #0
    31bc:	d001      	beq.n	31c2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    31be:	f000 ff3b 	bl	4038 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    31c2:	687b      	ldr	r3, [r7, #4]
    31c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    31c6:	1e5a      	subs	r2, r3, #1
    31c8:	687b      	ldr	r3, [r7, #4]
    31ca:	645a      	str	r2, [r3, #68]	; 0x44
    31cc:	e000      	b.n	31d0 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    31ce:	e003      	b.n	31d8 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    31d4:	2b00      	cmp	r3, #0
    31d6:	dce6      	bgt.n	31a6 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    31d8:	687b      	ldr	r3, [r7, #4]
    31da:	f04f 32ff 	mov.w	r2, #4294967295
    31de:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    31e0:	f001 f9dc 	bl	459c <vPortExitCritical>
}
    31e4:	3708      	adds	r7, #8
    31e6:	46bd      	mov	sp, r7
    31e8:	bd80      	pop	{r7, pc}
    31ea:	bf00      	nop

000031ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    31ec:	b580      	push	{r7, lr}
    31ee:	b084      	sub	sp, #16
    31f0:	af00      	add	r7, sp, #0
    31f2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    31f4:	f001 f9bc 	bl	4570 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    31fc:	2b00      	cmp	r3, #0
    31fe:	bf14      	ite	ne
    3200:	2300      	movne	r3, #0
    3202:	2301      	moveq	r3, #1
    3204:	b2db      	uxtb	r3, r3
    3206:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3208:	f001 f9c8 	bl	459c <vPortExitCritical>

	return xReturn;
    320c:	68fb      	ldr	r3, [r7, #12]
}
    320e:	4618      	mov	r0, r3
    3210:	3710      	adds	r7, #16
    3212:	46bd      	mov	sp, r7
    3214:	bd80      	pop	{r7, pc}
    3216:	bf00      	nop

00003218 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    3218:	b480      	push	{r7}
    321a:	b085      	sub	sp, #20
    321c:	af00      	add	r7, sp, #0
    321e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3224:	2b00      	cmp	r3, #0
    3226:	bf14      	ite	ne
    3228:	2300      	movne	r3, #0
    322a:	2301      	moveq	r3, #1
    322c:	b2db      	uxtb	r3, r3
    322e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3230:	68fb      	ldr	r3, [r7, #12]
}
    3232:	4618      	mov	r0, r3
    3234:	3714      	adds	r7, #20
    3236:	46bd      	mov	sp, r7
    3238:	f85d 7b04 	ldr.w	r7, [sp], #4
    323c:	4770      	bx	lr
    323e:	bf00      	nop

00003240 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3240:	b580      	push	{r7, lr}
    3242:	b084      	sub	sp, #16
    3244:	af00      	add	r7, sp, #0
    3246:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3248:	f001 f992 	bl	4570 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    324c:	687b      	ldr	r3, [r7, #4]
    324e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3250:	687b      	ldr	r3, [r7, #4]
    3252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3254:	429a      	cmp	r2, r3
    3256:	bf14      	ite	ne
    3258:	2300      	movne	r3, #0
    325a:	2301      	moveq	r3, #1
    325c:	b2db      	uxtb	r3, r3
    325e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3260:	f001 f99c 	bl	459c <vPortExitCritical>

	return xReturn;
    3264:	68fb      	ldr	r3, [r7, #12]
}
    3266:	4618      	mov	r0, r3
    3268:	3710      	adds	r7, #16
    326a:	46bd      	mov	sp, r7
    326c:	bd80      	pop	{r7, pc}
    326e:	bf00      	nop

00003270 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3270:	b480      	push	{r7}
    3272:	b085      	sub	sp, #20
    3274:	af00      	add	r7, sp, #0
    3276:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    327c:	687b      	ldr	r3, [r7, #4]
    327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3280:	429a      	cmp	r2, r3
    3282:	bf14      	ite	ne
    3284:	2300      	movne	r3, #0
    3286:	2301      	moveq	r3, #1
    3288:	b2db      	uxtb	r3, r3
    328a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    328c:	68fb      	ldr	r3, [r7, #12]
}
    328e:	4618      	mov	r0, r3
    3290:	3714      	adds	r7, #20
    3292:	46bd      	mov	sp, r7
    3294:	f85d 7b04 	ldr.w	r7, [sp], #4
    3298:	4770      	bx	lr
    329a:	bf00      	nop

0000329c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    329c:	b580      	push	{r7, lr}
    329e:	b08a      	sub	sp, #40	; 0x28
    32a0:	af02      	add	r7, sp, #8
    32a2:	60f8      	str	r0, [r7, #12]
    32a4:	60b9      	str	r1, [r7, #8]
    32a6:	603b      	str	r3, [r7, #0]
    32a8:	4613      	mov	r3, r2
    32aa:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    32ac:	88fb      	ldrh	r3, [r7, #6]
    32ae:	4618      	mov	r0, r3
    32b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    32b2:	f000 ffe7 	bl	4284 <prvAllocateTCBAndStack>
    32b6:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    32b8:	69bb      	ldr	r3, [r7, #24]
    32ba:	2b00      	cmp	r3, #0
    32bc:	f000 80a1 	beq.w	3402 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    32c0:	69bb      	ldr	r3, [r7, #24]
    32c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    32c4:	88fb      	ldrh	r3, [r7, #6]
    32c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    32ca:	3b01      	subs	r3, #1
    32cc:	009b      	lsls	r3, r3, #2
    32ce:	4413      	add	r3, r2
    32d0:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    32d2:	697b      	ldr	r3, [r7, #20]
    32d4:	f023 0307 	bic.w	r3, r3, #7
    32d8:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    32da:	88fb      	ldrh	r3, [r7, #6]
    32dc:	9300      	str	r3, [sp, #0]
    32de:	69b8      	ldr	r0, [r7, #24]
    32e0:	68b9      	ldr	r1, [r7, #8]
    32e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    32e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32e6:	f000 febf 	bl	4068 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    32ea:	6978      	ldr	r0, [r7, #20]
    32ec:	68f9      	ldr	r1, [r7, #12]
    32ee:	683a      	ldr	r2, [r7, #0]
    32f0:	f001 f8c0 	bl	4474 <pxPortInitialiseStack>
    32f4:	4602      	mov	r2, r0
    32f6:	69bb      	ldr	r3, [r7, #24]
    32f8:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    32fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32fc:	2b00      	cmp	r3, #0
    32fe:	d002      	beq.n	3306 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3302:	69ba      	ldr	r2, [r7, #24]
    3304:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    3306:	f001 f933 	bl	4570 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    330a:	f240 1390 	movw	r3, #400	; 0x190
    330e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3312:	681b      	ldr	r3, [r3, #0]
    3314:	1c5a      	adds	r2, r3, #1
    3316:	f240 1390 	movw	r3, #400	; 0x190
    331a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    331e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    3320:	f240 03b8 	movw	r3, #184	; 0xb8
    3324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3328:	681b      	ldr	r3, [r3, #0]
    332a:	2b00      	cmp	r3, #0
    332c:	d10f      	bne.n	334e <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    332e:	f240 03b8 	movw	r3, #184	; 0xb8
    3332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3336:	69ba      	ldr	r2, [r7, #24]
    3338:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    333a:	f240 1390 	movw	r3, #400	; 0x190
    333e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3342:	681b      	ldr	r3, [r3, #0]
    3344:	2b01      	cmp	r3, #1
    3346:	d118      	bne.n	337a <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3348:	f000 fec4 	bl	40d4 <prvInitialiseTaskLists>
    334c:	e015      	b.n	337a <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    334e:	f240 13a0 	movw	r3, #416	; 0x1a0
    3352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	2b00      	cmp	r3, #0
    335a:	d10e      	bne.n	337a <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    335c:	f240 03b8 	movw	r3, #184	; 0xb8
    3360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3364:	681b      	ldr	r3, [r3, #0]
    3366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3368:	6abb      	ldr	r3, [r7, #40]	; 0x28
    336a:	429a      	cmp	r2, r3
    336c:	d805      	bhi.n	337a <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    336e:	f240 03b8 	movw	r3, #184	; 0xb8
    3372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3376:	69ba      	ldr	r2, [r7, #24]
    3378:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    337a:	69bb      	ldr	r3, [r7, #24]
    337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    337e:	f240 1398 	movw	r3, #408	; 0x198
    3382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3386:	681b      	ldr	r3, [r3, #0]
    3388:	429a      	cmp	r2, r3
    338a:	d906      	bls.n	339a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    338c:	69bb      	ldr	r3, [r7, #24]
    338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3390:	f240 1398 	movw	r3, #408	; 0x198
    3394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3398:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    339a:	f240 13b4 	movw	r3, #436	; 0x1b4
    339e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a2:	681b      	ldr	r3, [r3, #0]
    33a4:	1c5a      	adds	r2, r3, #1
    33a6:	f240 13b4 	movw	r3, #436	; 0x1b4
    33aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ae:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    33b0:	69bb      	ldr	r3, [r7, #24]
    33b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33b4:	f240 139c 	movw	r3, #412	; 0x19c
    33b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33bc:	681b      	ldr	r3, [r3, #0]
    33be:	429a      	cmp	r2, r3
    33c0:	d906      	bls.n	33d0 <xTaskGenericCreate+0x134>
    33c2:	69bb      	ldr	r3, [r7, #24]
    33c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33c6:	f240 139c 	movw	r3, #412	; 0x19c
    33ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ce:	601a      	str	r2, [r3, #0]
    33d0:	69bb      	ldr	r3, [r7, #24]
    33d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    33d4:	4613      	mov	r3, r2
    33d6:	009b      	lsls	r3, r3, #2
    33d8:	4413      	add	r3, r2
    33da:	009b      	lsls	r3, r3, #2
    33dc:	f240 02bc 	movw	r2, #188	; 0xbc
    33e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33e4:	441a      	add	r2, r3
    33e6:	69bb      	ldr	r3, [r7, #24]
    33e8:	3304      	adds	r3, #4
    33ea:	4610      	mov	r0, r2
    33ec:	4619      	mov	r1, r3
    33ee:	f7ff fadf 	bl	29b0 <vListInsertEnd>

			xReturn = pdPASS;
    33f2:	2301      	movs	r3, #1
    33f4:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    33f6:	69b8      	ldr	r0, [r7, #24]
    33f8:	f002 fcec 	bl	5dd4 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    33fc:	f001 f8ce 	bl	459c <vPortExitCritical>
    3400:	e002      	b.n	3408 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3402:	f04f 33ff 	mov.w	r3, #4294967295
    3406:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    3408:	69fb      	ldr	r3, [r7, #28]
    340a:	2b01      	cmp	r3, #1
    340c:	d111      	bne.n	3432 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    340e:	f240 13a0 	movw	r3, #416	; 0x1a0
    3412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3416:	681b      	ldr	r3, [r3, #0]
    3418:	2b00      	cmp	r3, #0
    341a:	d00a      	beq.n	3432 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    341c:	f240 03b8 	movw	r3, #184	; 0xb8
    3420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3424:	681b      	ldr	r3, [r3, #0]
    3426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3428:	6abb      	ldr	r3, [r7, #40]	; 0x28
    342a:	429a      	cmp	r2, r3
    342c:	d201      	bcs.n	3432 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    342e:	f001 f891 	bl	4554 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    3432:	69fb      	ldr	r3, [r7, #28]
}
    3434:	4618      	mov	r0, r3
    3436:	3720      	adds	r7, #32
    3438:	46bd      	mov	sp, r7
    343a:	bd80      	pop	{r7, pc}

0000343c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    343c:	b580      	push	{r7, lr}
    343e:	b084      	sub	sp, #16
    3440:	af00      	add	r7, sp, #0
    3442:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3444:	f001 f894 	bl	4570 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3448:	f240 03b8 	movw	r3, #184	; 0xb8
    344c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	687a      	ldr	r2, [r7, #4]
    3454:	429a      	cmp	r2, r3
    3456:	d101      	bne.n	345c <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    3458:	2300      	movs	r3, #0
    345a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	2b00      	cmp	r3, #0
    3460:	d105      	bne.n	346e <vTaskDelete+0x32>
    3462:	f240 03b8 	movw	r3, #184	; 0xb8
    3466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    346a:	681b      	ldr	r3, [r3, #0]
    346c:	e000      	b.n	3470 <vTaskDelete+0x34>
    346e:	687b      	ldr	r3, [r7, #4]
    3470:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3472:	68fb      	ldr	r3, [r7, #12]
    3474:	3304      	adds	r3, #4
    3476:	4618      	mov	r0, r3
    3478:	f7ff fafa 	bl	2a70 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    347c:	68fb      	ldr	r3, [r7, #12]
    347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3480:	2b00      	cmp	r3, #0
    3482:	d004      	beq.n	348e <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3484:	68fb      	ldr	r3, [r7, #12]
    3486:	3318      	adds	r3, #24
    3488:	4618      	mov	r0, r3
    348a:	f7ff faf1 	bl	2a70 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    348e:	68fb      	ldr	r3, [r7, #12]
    3490:	3304      	adds	r3, #4
    3492:	f240 1064 	movw	r0, #356	; 0x164
    3496:	f2c2 0000 	movt	r0, #8192	; 0x2000
    349a:	4619      	mov	r1, r3
    349c:	f7ff fa88 	bl	29b0 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    34a0:	f240 1378 	movw	r3, #376	; 0x178
    34a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34a8:	681b      	ldr	r3, [r3, #0]
    34aa:	1c5a      	adds	r2, r3, #1
    34ac:	f240 1378 	movw	r3, #376	; 0x178
    34b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34b4:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    34b6:	f240 13b4 	movw	r3, #436	; 0x1b4
    34ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34be:	681b      	ldr	r3, [r3, #0]
    34c0:	1c5a      	adds	r2, r3, #1
    34c2:	f240 13b4 	movw	r3, #436	; 0x1b4
    34c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34ca:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    34cc:	f001 f866 	bl	459c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    34d0:	f240 13a0 	movw	r3, #416	; 0x1a0
    34d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34d8:	681b      	ldr	r3, [r3, #0]
    34da:	2b00      	cmp	r3, #0
    34dc:	d004      	beq.n	34e8 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d101      	bne.n	34e8 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    34e4:	f001 f836 	bl	4554 <vPortYieldFromISR>
			}
		}
	}
    34e8:	3710      	adds	r7, #16
    34ea:	46bd      	mov	sp, r7
    34ec:	bd80      	pop	{r7, pc}
    34ee:	bf00      	nop

000034f0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    34f0:	b580      	push	{r7, lr}
    34f2:	b086      	sub	sp, #24
    34f4:	af00      	add	r7, sp, #0
    34f6:	6078      	str	r0, [r7, #4]
    34f8:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    34fa:	2300      	movs	r3, #0
    34fc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    34fe:	f000 fa8b 	bl	3a18 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	681a      	ldr	r2, [r3, #0]
    3506:	683b      	ldr	r3, [r7, #0]
    3508:	4413      	add	r3, r2
    350a:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	681a      	ldr	r2, [r3, #0]
    3510:	f240 1394 	movw	r3, #404	; 0x194
    3514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3518:	681b      	ldr	r3, [r3, #0]
    351a:	429a      	cmp	r2, r3
    351c:	d90f      	bls.n	353e <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	681a      	ldr	r2, [r3, #0]
    3522:	693b      	ldr	r3, [r7, #16]
    3524:	429a      	cmp	r2, r3
    3526:	d919      	bls.n	355c <vTaskDelayUntil+0x6c>
    3528:	f240 1394 	movw	r3, #404	; 0x194
    352c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3530:	681b      	ldr	r3, [r3, #0]
    3532:	693a      	ldr	r2, [r7, #16]
    3534:	429a      	cmp	r2, r3
    3536:	d911      	bls.n	355c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    3538:	2301      	movs	r3, #1
    353a:	617b      	str	r3, [r7, #20]
    353c:	e00e      	b.n	355c <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    353e:	687b      	ldr	r3, [r7, #4]
    3540:	681a      	ldr	r2, [r3, #0]
    3542:	693b      	ldr	r3, [r7, #16]
    3544:	429a      	cmp	r2, r3
    3546:	d807      	bhi.n	3558 <vTaskDelayUntil+0x68>
    3548:	f240 1394 	movw	r3, #404	; 0x194
    354c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	693a      	ldr	r2, [r7, #16]
    3554:	429a      	cmp	r2, r3
    3556:	d901      	bls.n	355c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    3558:	2301      	movs	r3, #1
    355a:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    355c:	687b      	ldr	r3, [r7, #4]
    355e:	693a      	ldr	r2, [r7, #16]
    3560:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    3562:	697b      	ldr	r3, [r7, #20]
    3564:	2b00      	cmp	r3, #0
    3566:	d00b      	beq.n	3580 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3568:	f240 03b8 	movw	r3, #184	; 0xb8
    356c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3570:	681b      	ldr	r3, [r3, #0]
    3572:	3304      	adds	r3, #4
    3574:	4618      	mov	r0, r3
    3576:	f7ff fa7b 	bl	2a70 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    357a:	6938      	ldr	r0, [r7, #16]
    357c:	f000 fe3e 	bl	41fc <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3580:	f000 fa5c 	bl	3a3c <xTaskResumeAll>
    3584:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3586:	68fb      	ldr	r3, [r7, #12]
    3588:	2b00      	cmp	r3, #0
    358a:	d101      	bne.n	3590 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    358c:	f000 ffe2 	bl	4554 <vPortYieldFromISR>
		}
	}
    3590:	3718      	adds	r7, #24
    3592:	46bd      	mov	sp, r7
    3594:	bd80      	pop	{r7, pc}
    3596:	bf00      	nop

00003598 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3598:	b580      	push	{r7, lr}
    359a:	b084      	sub	sp, #16
    359c:	af00      	add	r7, sp, #0
    359e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    35a0:	2300      	movs	r3, #0
    35a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    35a4:	687b      	ldr	r3, [r7, #4]
    35a6:	2b00      	cmp	r3, #0
    35a8:	d018      	beq.n	35dc <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    35aa:	f000 fa35 	bl	3a18 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    35ae:	f240 1394 	movw	r3, #404	; 0x194
    35b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35b6:	681a      	ldr	r2, [r3, #0]
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	4413      	add	r3, r2
    35bc:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35be:	f240 03b8 	movw	r3, #184	; 0xb8
    35c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c6:	681b      	ldr	r3, [r3, #0]
    35c8:	3304      	adds	r3, #4
    35ca:	4618      	mov	r0, r3
    35cc:	f7ff fa50 	bl	2a70 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    35d0:	68b8      	ldr	r0, [r7, #8]
    35d2:	f000 fe13 	bl	41fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    35d6:	f000 fa31 	bl	3a3c <xTaskResumeAll>
    35da:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    35dc:	68fb      	ldr	r3, [r7, #12]
    35de:	2b00      	cmp	r3, #0
    35e0:	d101      	bne.n	35e6 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    35e2:	f000 ffb7 	bl	4554 <vPortYieldFromISR>
		}
	}
    35e6:	3710      	adds	r7, #16
    35e8:	46bd      	mov	sp, r7
    35ea:	bd80      	pop	{r7, pc}

000035ec <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    35ec:	b580      	push	{r7, lr}
    35ee:	b084      	sub	sp, #16
    35f0:	af00      	add	r7, sp, #0
    35f2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    35f4:	f000 ffbc 	bl	4570 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    35f8:	687b      	ldr	r3, [r7, #4]
    35fa:	2b00      	cmp	r3, #0
    35fc:	d105      	bne.n	360a <uxTaskPriorityGet+0x1e>
    35fe:	f240 03b8 	movw	r3, #184	; 0xb8
    3602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3606:	681b      	ldr	r3, [r3, #0]
    3608:	e000      	b.n	360c <uxTaskPriorityGet+0x20>
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    360e:	68fb      	ldr	r3, [r7, #12]
    3610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3612:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    3614:	f000 ffc2 	bl	459c <vPortExitCritical>

		return uxReturn;
    3618:	68bb      	ldr	r3, [r7, #8]
	}
    361a:	4618      	mov	r0, r3
    361c:	3710      	adds	r7, #16
    361e:	46bd      	mov	sp, r7
    3620:	bd80      	pop	{r7, pc}
    3622:	bf00      	nop

00003624 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    3624:	b580      	push	{r7, lr}
    3626:	b086      	sub	sp, #24
    3628:	af00      	add	r7, sp, #0
    362a:	6078      	str	r0, [r7, #4]
    362c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    362e:	2300      	movs	r3, #0
    3630:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    3632:	683b      	ldr	r3, [r7, #0]
    3634:	2b04      	cmp	r3, #4
    3636:	d901      	bls.n	363c <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3638:	2304      	movs	r3, #4
    363a:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    363c:	f000 ff98 	bl	4570 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    3640:	f240 03b8 	movw	r3, #184	; 0xb8
    3644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3648:	681b      	ldr	r3, [r3, #0]
    364a:	687a      	ldr	r2, [r7, #4]
    364c:	429a      	cmp	r2, r3
    364e:	d101      	bne.n	3654 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    3650:	2300      	movs	r3, #0
    3652:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3654:	687b      	ldr	r3, [r7, #4]
    3656:	2b00      	cmp	r3, #0
    3658:	d105      	bne.n	3666 <vTaskPrioritySet+0x42>
    365a:	f240 03b8 	movw	r3, #184	; 0xb8
    365e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3662:	681b      	ldr	r3, [r3, #0]
    3664:	e000      	b.n	3668 <vTaskPrioritySet+0x44>
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    366a:	693b      	ldr	r3, [r7, #16]
    366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    366e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3670:	68fa      	ldr	r2, [r7, #12]
    3672:	683b      	ldr	r3, [r7, #0]
    3674:	429a      	cmp	r2, r3
    3676:	d058      	beq.n	372a <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    3678:	683a      	ldr	r2, [r7, #0]
    367a:	68fb      	ldr	r3, [r7, #12]
    367c:	429a      	cmp	r2, r3
    367e:	d905      	bls.n	368c <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	2b00      	cmp	r3, #0
    3684:	d007      	beq.n	3696 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3686:	2301      	movs	r3, #1
    3688:	617b      	str	r3, [r7, #20]
    368a:	e004      	b.n	3696 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	2b00      	cmp	r3, #0
    3690:	d101      	bne.n	3696 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3692:	2301      	movs	r3, #1
    3694:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3696:	693b      	ldr	r3, [r7, #16]
    3698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    369a:	693b      	ldr	r3, [r7, #16]
    369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    369e:	429a      	cmp	r2, r3
    36a0:	d102      	bne.n	36a8 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    36a2:	693b      	ldr	r3, [r7, #16]
    36a4:	683a      	ldr	r2, [r7, #0]
    36a6:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    36a8:	693b      	ldr	r3, [r7, #16]
    36aa:	683a      	ldr	r2, [r7, #0]
    36ac:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    36ae:	683b      	ldr	r3, [r7, #0]
    36b0:	f1c3 0205 	rsb	r2, r3, #5
    36b4:	693b      	ldr	r3, [r7, #16]
    36b6:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    36b8:	693b      	ldr	r3, [r7, #16]
    36ba:	6959      	ldr	r1, [r3, #20]
    36bc:	68fa      	ldr	r2, [r7, #12]
    36be:	4613      	mov	r3, r2
    36c0:	009b      	lsls	r3, r3, #2
    36c2:	4413      	add	r3, r2
    36c4:	009b      	lsls	r3, r3, #2
    36c6:	f240 02bc 	movw	r2, #188	; 0xbc
    36ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36ce:	4413      	add	r3, r2
    36d0:	4299      	cmp	r1, r3
    36d2:	d125      	bne.n	3720 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    36d4:	693b      	ldr	r3, [r7, #16]
    36d6:	3304      	adds	r3, #4
    36d8:	4618      	mov	r0, r3
    36da:	f7ff f9c9 	bl	2a70 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    36de:	693b      	ldr	r3, [r7, #16]
    36e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    36e2:	f240 139c 	movw	r3, #412	; 0x19c
    36e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ea:	681b      	ldr	r3, [r3, #0]
    36ec:	429a      	cmp	r2, r3
    36ee:	d906      	bls.n	36fe <vTaskPrioritySet+0xda>
    36f0:	693b      	ldr	r3, [r7, #16]
    36f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    36f4:	f240 139c 	movw	r3, #412	; 0x19c
    36f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36fc:	601a      	str	r2, [r3, #0]
    36fe:	693b      	ldr	r3, [r7, #16]
    3700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3702:	4613      	mov	r3, r2
    3704:	009b      	lsls	r3, r3, #2
    3706:	4413      	add	r3, r2
    3708:	009b      	lsls	r3, r3, #2
    370a:	f240 02bc 	movw	r2, #188	; 0xbc
    370e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3712:	441a      	add	r2, r3
    3714:	693b      	ldr	r3, [r7, #16]
    3716:	3304      	adds	r3, #4
    3718:	4610      	mov	r0, r2
    371a:	4619      	mov	r1, r3
    371c:	f7ff f948 	bl	29b0 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    3720:	697b      	ldr	r3, [r7, #20]
    3722:	2b01      	cmp	r3, #1
    3724:	d101      	bne.n	372a <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    3726:	f000 ff15 	bl	4554 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    372a:	f000 ff37 	bl	459c <vPortExitCritical>
	}
    372e:	3718      	adds	r7, #24
    3730:	46bd      	mov	sp, r7
    3732:	bd80      	pop	{r7, pc}

00003734 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    3734:	b580      	push	{r7, lr}
    3736:	b084      	sub	sp, #16
    3738:	af00      	add	r7, sp, #0
    373a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    373c:	f000 ff18 	bl	4570 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    3740:	f240 03b8 	movw	r3, #184	; 0xb8
    3744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3748:	681b      	ldr	r3, [r3, #0]
    374a:	687a      	ldr	r2, [r7, #4]
    374c:	429a      	cmp	r2, r3
    374e:	d101      	bne.n	3754 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    3750:	2300      	movs	r3, #0
    3752:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	2b00      	cmp	r3, #0
    3758:	d105      	bne.n	3766 <vTaskSuspend+0x32>
    375a:	f240 03b8 	movw	r3, #184	; 0xb8
    375e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3762:	681b      	ldr	r3, [r3, #0]
    3764:	e000      	b.n	3768 <vTaskSuspend+0x34>
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    376a:	68fb      	ldr	r3, [r7, #12]
    376c:	3304      	adds	r3, #4
    376e:	4618      	mov	r0, r3
    3770:	f7ff f97e 	bl	2a70 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3774:	68fb      	ldr	r3, [r7, #12]
    3776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3778:	2b00      	cmp	r3, #0
    377a:	d004      	beq.n	3786 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    377c:	68fb      	ldr	r3, [r7, #12]
    377e:	3318      	adds	r3, #24
    3780:	4618      	mov	r0, r3
    3782:	f7ff f975 	bl	2a70 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3786:	68fb      	ldr	r3, [r7, #12]
    3788:	3304      	adds	r3, #4
    378a:	f240 107c 	movw	r0, #380	; 0x17c
    378e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3792:	4619      	mov	r1, r3
    3794:	f7ff f90c 	bl	29b0 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3798:	f000 ff00 	bl	459c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	2b00      	cmp	r3, #0
    37a0:	d11e      	bne.n	37e0 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    37a2:	f240 13a0 	movw	r3, #416	; 0x1a0
    37a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	2b00      	cmp	r3, #0
    37ae:	d002      	beq.n	37b6 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    37b0:	f000 fed0 	bl	4554 <vPortYieldFromISR>
    37b4:	e014      	b.n	37e0 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    37b6:	f240 137c 	movw	r3, #380	; 0x17c
    37ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37be:	681a      	ldr	r2, [r3, #0]
    37c0:	f240 1390 	movw	r3, #400	; 0x190
    37c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37c8:	681b      	ldr	r3, [r3, #0]
    37ca:	429a      	cmp	r2, r3
    37cc:	d106      	bne.n	37dc <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    37ce:	f240 03b8 	movw	r3, #184	; 0xb8
    37d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37d6:	2200      	movs	r2, #0
    37d8:	601a      	str	r2, [r3, #0]
    37da:	e001      	b.n	37e0 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    37dc:	f000 fadc 	bl	3d98 <vTaskSwitchContext>
				}
			}
		}
	}
    37e0:	3710      	adds	r7, #16
    37e2:	46bd      	mov	sp, r7
    37e4:	bd80      	pop	{r7, pc}
    37e6:	bf00      	nop

000037e8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    37e8:	b480      	push	{r7}
    37ea:	b085      	sub	sp, #20
    37ec:	af00      	add	r7, sp, #0
    37ee:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    37f0:	2300      	movs	r3, #0
    37f2:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    37f8:	68bb      	ldr	r3, [r7, #8]
    37fa:	695a      	ldr	r2, [r3, #20]
    37fc:	f240 137c 	movw	r3, #380	; 0x17c
    3800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3804:	429a      	cmp	r2, r3
    3806:	d10d      	bne.n	3824 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3808:	68bb      	ldr	r3, [r7, #8]
    380a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    380c:	f240 1350 	movw	r3, #336	; 0x150
    3810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3814:	429a      	cmp	r2, r3
    3816:	d005      	beq.n	3824 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3818:	68bb      	ldr	r3, [r7, #8]
    381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    381c:	2b00      	cmp	r3, #0
    381e:	d101      	bne.n	3824 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    3820:	2301      	movs	r3, #1
    3822:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    3824:	68fb      	ldr	r3, [r7, #12]
	}
    3826:	4618      	mov	r0, r3
    3828:	3714      	adds	r7, #20
    382a:	46bd      	mov	sp, r7
    382c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3830:	4770      	bx	lr
    3832:	bf00      	nop

00003834 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    3834:	b580      	push	{r7, lr}
    3836:	b084      	sub	sp, #16
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3840:	68fb      	ldr	r3, [r7, #12]
    3842:	2b00      	cmp	r3, #0
    3844:	d043      	beq.n	38ce <vTaskResume+0x9a>
    3846:	f240 03b8 	movw	r3, #184	; 0xb8
    384a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	68fa      	ldr	r2, [r7, #12]
    3852:	429a      	cmp	r2, r3
    3854:	d03b      	beq.n	38ce <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    3856:	f000 fe8b 	bl	4570 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    385a:	68f8      	ldr	r0, [r7, #12]
    385c:	f7ff ffc4 	bl	37e8 <xTaskIsTaskSuspended>
    3860:	4603      	mov	r3, r0
    3862:	2b01      	cmp	r3, #1
    3864:	d131      	bne.n	38ca <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3866:	68fb      	ldr	r3, [r7, #12]
    3868:	3304      	adds	r3, #4
    386a:	4618      	mov	r0, r3
    386c:	f7ff f900 	bl	2a70 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3870:	68fb      	ldr	r3, [r7, #12]
    3872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3874:	f240 139c 	movw	r3, #412	; 0x19c
    3878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	429a      	cmp	r2, r3
    3880:	d906      	bls.n	3890 <vTaskResume+0x5c>
    3882:	68fb      	ldr	r3, [r7, #12]
    3884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3886:	f240 139c 	movw	r3, #412	; 0x19c
    388a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    388e:	601a      	str	r2, [r3, #0]
    3890:	68fb      	ldr	r3, [r7, #12]
    3892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3894:	4613      	mov	r3, r2
    3896:	009b      	lsls	r3, r3, #2
    3898:	4413      	add	r3, r2
    389a:	009b      	lsls	r3, r3, #2
    389c:	f240 02bc 	movw	r2, #188	; 0xbc
    38a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38a4:	441a      	add	r2, r3
    38a6:	68fb      	ldr	r3, [r7, #12]
    38a8:	3304      	adds	r3, #4
    38aa:	4610      	mov	r0, r2
    38ac:	4619      	mov	r1, r3
    38ae:	f7ff f87f 	bl	29b0 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    38b2:	68fb      	ldr	r3, [r7, #12]
    38b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38b6:	f240 03b8 	movw	r3, #184	; 0xb8
    38ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38be:	681b      	ldr	r3, [r3, #0]
    38c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38c2:	429a      	cmp	r2, r3
    38c4:	d301      	bcc.n	38ca <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    38c6:	f000 fe45 	bl	4554 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    38ca:	f000 fe67 	bl	459c <vPortExitCritical>
		}
	}
    38ce:	3710      	adds	r7, #16
    38d0:	46bd      	mov	sp, r7
    38d2:	bd80      	pop	{r7, pc}

000038d4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    38d4:	b580      	push	{r7, lr}
    38d6:	b086      	sub	sp, #24
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    38dc:	2300      	movs	r3, #0
    38de:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    38e4:	2300      	movs	r3, #0
    38e6:	60fb      	str	r3, [r7, #12]
    38e8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    38ec:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    38f0:	6938      	ldr	r0, [r7, #16]
    38f2:	f7ff ff79 	bl	37e8 <xTaskIsTaskSuspended>
    38f6:	4603      	mov	r3, r0
    38f8:	2b01      	cmp	r3, #1
    38fa:	d144      	bne.n	3986 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    38fc:	f240 13a4 	movw	r3, #420	; 0x1a4
    3900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3904:	681b      	ldr	r3, [r3, #0]
    3906:	2b00      	cmp	r3, #0
    3908:	d134      	bne.n	3974 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    390a:	693b      	ldr	r3, [r7, #16]
    390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    390e:	f240 03b8 	movw	r3, #184	; 0xb8
    3912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3916:	681b      	ldr	r3, [r3, #0]
    3918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    391a:	429a      	cmp	r2, r3
    391c:	bf34      	ite	cc
    391e:	2300      	movcc	r3, #0
    3920:	2301      	movcs	r3, #1
    3922:	b2db      	uxtb	r3, r3
    3924:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3926:	693b      	ldr	r3, [r7, #16]
    3928:	3304      	adds	r3, #4
    392a:	4618      	mov	r0, r3
    392c:	f7ff f8a0 	bl	2a70 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3930:	693b      	ldr	r3, [r7, #16]
    3932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3934:	f240 139c 	movw	r3, #412	; 0x19c
    3938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    393c:	681b      	ldr	r3, [r3, #0]
    393e:	429a      	cmp	r2, r3
    3940:	d906      	bls.n	3950 <xTaskResumeFromISR+0x7c>
    3942:	693b      	ldr	r3, [r7, #16]
    3944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3946:	f240 139c 	movw	r3, #412	; 0x19c
    394a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    394e:	601a      	str	r2, [r3, #0]
    3950:	693b      	ldr	r3, [r7, #16]
    3952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3954:	4613      	mov	r3, r2
    3956:	009b      	lsls	r3, r3, #2
    3958:	4413      	add	r3, r2
    395a:	009b      	lsls	r3, r3, #2
    395c:	f240 02bc 	movw	r2, #188	; 0xbc
    3960:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3964:	441a      	add	r2, r3
    3966:	693b      	ldr	r3, [r7, #16]
    3968:	3304      	adds	r3, #4
    396a:	4610      	mov	r0, r2
    396c:	4619      	mov	r1, r3
    396e:	f7ff f81f 	bl	29b0 <vListInsertEnd>
    3972:	e008      	b.n	3986 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3974:	693b      	ldr	r3, [r7, #16]
    3976:	3318      	adds	r3, #24
    3978:	f240 1050 	movw	r0, #336	; 0x150
    397c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3980:	4619      	mov	r1, r3
    3982:	f7ff f815 	bl	29b0 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3986:	f04f 0000 	mov.w	r0, #0
    398a:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    398e:	697b      	ldr	r3, [r7, #20]
	}
    3990:	4618      	mov	r0, r3
    3992:	3718      	adds	r7, #24
    3994:	46bd      	mov	sp, r7
    3996:	bd80      	pop	{r7, pc}

00003998 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3998:	b580      	push	{r7, lr}
    399a:	b086      	sub	sp, #24
    399c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    399e:	2300      	movs	r3, #0
    39a0:	9300      	str	r3, [sp, #0]
    39a2:	2300      	movs	r3, #0
    39a4:	9301      	str	r3, [sp, #4]
    39a6:	2300      	movs	r3, #0
    39a8:	9302      	str	r3, [sp, #8]
    39aa:	2300      	movs	r3, #0
    39ac:	9303      	str	r3, [sp, #12]
    39ae:	f244 0051 	movw	r0, #16465	; 0x4051
    39b2:	f2c0 0000 	movt	r0, #0
    39b6:	f646 515c 	movw	r1, #27996	; 0x6d5c
    39ba:	f2c0 0100 	movt	r1, #0
    39be:	2280      	movs	r2, #128	; 0x80
    39c0:	2300      	movs	r3, #0
    39c2:	f7ff fc6b 	bl	329c <xTaskGenericCreate>
    39c6:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    39c8:	687b      	ldr	r3, [r7, #4]
    39ca:	2b01      	cmp	r3, #1
    39cc:	d111      	bne.n	39f2 <vTaskStartScheduler+0x5a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    39ce:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    39d2:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    39d6:	f240 13a0 	movw	r3, #416	; 0x1a0
    39da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39de:	2201      	movs	r2, #1
    39e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    39e2:	f240 1394 	movw	r3, #404	; 0x194
    39e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39ea:	2200      	movs	r2, #0
    39ec:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    39ee:	f000 fd83 	bl	44f8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    39f2:	3708      	adds	r7, #8
    39f4:	46bd      	mov	sp, r7
    39f6:	bd80      	pop	{r7, pc}

000039f8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    39f8:	b580      	push	{r7, lr}
    39fa:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    39fc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3a00:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3a04:	f240 13a0 	movw	r3, #416	; 0x1a0
    3a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a0c:	2200      	movs	r2, #0
    3a0e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3a10:	f000 fd9a 	bl	4548 <vPortEndScheduler>
}
    3a14:	bd80      	pop	{r7, pc}
    3a16:	bf00      	nop

00003a18 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3a18:	b480      	push	{r7}
    3a1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3a1c:	f240 13a4 	movw	r3, #420	; 0x1a4
    3a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a24:	681b      	ldr	r3, [r3, #0]
    3a26:	1c5a      	adds	r2, r3, #1
    3a28:	f240 13a4 	movw	r3, #420	; 0x1a4
    3a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a30:	601a      	str	r2, [r3, #0]
}
    3a32:	46bd      	mov	sp, r7
    3a34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a38:	4770      	bx	lr
    3a3a:	bf00      	nop

00003a3c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3a3c:	b590      	push	{r4, r7, lr}
    3a3e:	b083      	sub	sp, #12
    3a40:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3a42:	2300      	movs	r3, #0
    3a44:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3a46:	f000 fd93 	bl	4570 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3a4a:	f240 13a4 	movw	r3, #420	; 0x1a4
    3a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a52:	681b      	ldr	r3, [r3, #0]
    3a54:	1e5a      	subs	r2, r3, #1
    3a56:	f240 13a4 	movw	r3, #420	; 0x1a4
    3a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a5e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3a60:	f240 13a4 	movw	r3, #420	; 0x1a4
    3a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a68:	681b      	ldr	r3, [r3, #0]
    3a6a:	2b00      	cmp	r3, #0
    3a6c:	d177      	bne.n	3b5e <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3a6e:	f240 1390 	movw	r3, #400	; 0x190
    3a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a76:	681b      	ldr	r3, [r3, #0]
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d070      	beq.n	3b5e <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3a7c:	2300      	movs	r3, #0
    3a7e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3a80:	e036      	b.n	3af0 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3a82:	f240 1350 	movw	r3, #336	; 0x150
    3a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a8a:	68db      	ldr	r3, [r3, #12]
    3a8c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3a8e:	f104 0318 	add.w	r3, r4, #24
    3a92:	4618      	mov	r0, r3
    3a94:	f7fe ffec 	bl	2a70 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3a98:	1d23      	adds	r3, r4, #4
    3a9a:	4618      	mov	r0, r3
    3a9c:	f7fe ffe8 	bl	2a70 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3aa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3aa2:	f240 139c 	movw	r3, #412	; 0x19c
    3aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aaa:	681b      	ldr	r3, [r3, #0]
    3aac:	429a      	cmp	r2, r3
    3aae:	d905      	bls.n	3abc <xTaskResumeAll+0x80>
    3ab0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3ab2:	f240 139c 	movw	r3, #412	; 0x19c
    3ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aba:	601a      	str	r2, [r3, #0]
    3abc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3abe:	4613      	mov	r3, r2
    3ac0:	009b      	lsls	r3, r3, #2
    3ac2:	4413      	add	r3, r2
    3ac4:	009b      	lsls	r3, r3, #2
    3ac6:	f240 02bc 	movw	r2, #188	; 0xbc
    3aca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ace:	441a      	add	r2, r3
    3ad0:	1d23      	adds	r3, r4, #4
    3ad2:	4610      	mov	r0, r2
    3ad4:	4619      	mov	r1, r3
    3ad6:	f7fe ff6b 	bl	29b0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3ada:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3adc:	f240 03b8 	movw	r3, #184	; 0xb8
    3ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ae8:	429a      	cmp	r2, r3
    3aea:	d301      	bcc.n	3af0 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    3aec:	2301      	movs	r3, #1
    3aee:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3af0:	f240 1350 	movw	r3, #336	; 0x150
    3af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	2b00      	cmp	r3, #0
    3afc:	d1c1      	bne.n	3a82 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3afe:	f240 13a8 	movw	r3, #424	; 0x1a8
    3b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b06:	681b      	ldr	r3, [r3, #0]
    3b08:	2b00      	cmp	r3, #0
    3b0a:	d014      	beq.n	3b36 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3b0c:	e00c      	b.n	3b28 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    3b0e:	f000 f865 	bl	3bdc <vTaskIncrementTick>
						--uxMissedTicks;
    3b12:	f240 13a8 	movw	r3, #424	; 0x1a8
    3b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	1e5a      	subs	r2, r3, #1
    3b1e:	f240 13a8 	movw	r3, #424	; 0x1a8
    3b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b26:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3b28:	f240 13a8 	movw	r3, #424	; 0x1a8
    3b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b30:	681b      	ldr	r3, [r3, #0]
    3b32:	2b00      	cmp	r3, #0
    3b34:	d1eb      	bne.n	3b0e <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3b36:	683b      	ldr	r3, [r7, #0]
    3b38:	2b01      	cmp	r3, #1
    3b3a:	d006      	beq.n	3b4a <xTaskResumeAll+0x10e>
    3b3c:	f240 13ac 	movw	r3, #428	; 0x1ac
    3b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b44:	681b      	ldr	r3, [r3, #0]
    3b46:	2b01      	cmp	r3, #1
    3b48:	d109      	bne.n	3b5e <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    3b4a:	2301      	movs	r3, #1
    3b4c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3b4e:	f240 13ac 	movw	r3, #428	; 0x1ac
    3b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b56:	2200      	movs	r2, #0
    3b58:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3b5a:	f000 fcfb 	bl	4554 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3b5e:	f000 fd1d 	bl	459c <vPortExitCritical>

	return xAlreadyYielded;
    3b62:	687b      	ldr	r3, [r7, #4]
}
    3b64:	4618      	mov	r0, r3
    3b66:	370c      	adds	r7, #12
    3b68:	46bd      	mov	sp, r7
    3b6a:	bd90      	pop	{r4, r7, pc}

00003b6c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3b6c:	b580      	push	{r7, lr}
    3b6e:	b082      	sub	sp, #8
    3b70:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3b72:	f000 fcfd 	bl	4570 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3b76:	f240 1394 	movw	r3, #404	; 0x194
    3b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b7e:	681b      	ldr	r3, [r3, #0]
    3b80:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3b82:	f000 fd0b 	bl	459c <vPortExitCritical>

	return xTicks;
    3b86:	687b      	ldr	r3, [r7, #4]
}
    3b88:	4618      	mov	r0, r3
    3b8a:	3708      	adds	r7, #8
    3b8c:	46bd      	mov	sp, r7
    3b8e:	bd80      	pop	{r7, pc}

00003b90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3b90:	b480      	push	{r7}
    3b92:	b083      	sub	sp, #12
    3b94:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3b96:	2300      	movs	r3, #0
    3b98:	607b      	str	r3, [r7, #4]
    3b9a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3b9e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3ba2:	f240 1394 	movw	r3, #404	; 0x194
    3ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3bae:	f04f 0000 	mov.w	r0, #0
    3bb2:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3bb6:	683b      	ldr	r3, [r7, #0]
}
    3bb8:	4618      	mov	r0, r3
    3bba:	370c      	adds	r7, #12
    3bbc:	46bd      	mov	sp, r7
    3bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bc2:	4770      	bx	lr

00003bc4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3bc4:	b480      	push	{r7}
    3bc6:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3bc8:	f240 1390 	movw	r3, #400	; 0x190
    3bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bd0:	681b      	ldr	r3, [r3, #0]
}
    3bd2:	4618      	mov	r0, r3
    3bd4:	46bd      	mov	sp, r7
    3bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bda:	4770      	bx	lr

00003bdc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b084      	sub	sp, #16
    3be0:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3be2:	f240 13a4 	movw	r3, #420	; 0x1a4
    3be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bea:	681b      	ldr	r3, [r3, #0]
    3bec:	2b00      	cmp	r3, #0
    3bee:	f040 80b9 	bne.w	3d64 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    3bf2:	f240 1394 	movw	r3, #404	; 0x194
    3bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bfa:	681b      	ldr	r3, [r3, #0]
    3bfc:	1c5a      	adds	r2, r3, #1
    3bfe:	f240 1394 	movw	r3, #404	; 0x194
    3c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c06:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    3c08:	f240 1394 	movw	r3, #404	; 0x194
    3c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	2b00      	cmp	r3, #0
    3c14:	d13f      	bne.n	3c96 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
    3c16:	f240 1348 	movw	r3, #328	; 0x148
    3c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c1e:	681b      	ldr	r3, [r3, #0]
    3c20:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3c22:	f240 134c 	movw	r3, #332	; 0x14c
    3c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c2a:	681a      	ldr	r2, [r3, #0]
    3c2c:	f240 1348 	movw	r3, #328	; 0x148
    3c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c34:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3c36:	f240 134c 	movw	r3, #332	; 0x14c
    3c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c3e:	68fa      	ldr	r2, [r7, #12]
    3c40:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    3c42:	f240 13b0 	movw	r3, #432	; 0x1b0
    3c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c4a:	681b      	ldr	r3, [r3, #0]
    3c4c:	1c5a      	adds	r2, r3, #1
    3c4e:	f240 13b0 	movw	r3, #432	; 0x1b0
    3c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c56:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3c58:	f240 1348 	movw	r3, #328	; 0x148
    3c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	681b      	ldr	r3, [r3, #0]
    3c64:	2b00      	cmp	r3, #0
    3c66:	d107      	bne.n	3c78 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3c68:	f240 0328 	movw	r3, #40	; 0x28
    3c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c70:	f04f 32ff 	mov.w	r2, #4294967295
    3c74:	601a      	str	r2, [r3, #0]
    3c76:	e00e      	b.n	3c96 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3c78:	f240 1348 	movw	r3, #328	; 0x148
    3c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c80:	681b      	ldr	r3, [r3, #0]
    3c82:	68db      	ldr	r3, [r3, #12]
    3c84:	68db      	ldr	r3, [r3, #12]
    3c86:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3c88:	68bb      	ldr	r3, [r7, #8]
    3c8a:	685a      	ldr	r2, [r3, #4]
    3c8c:	f240 0328 	movw	r3, #40	; 0x28
    3c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c94:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3c96:	f240 1394 	movw	r3, #404	; 0x194
    3c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c9e:	681a      	ldr	r2, [r3, #0]
    3ca0:	f240 0328 	movw	r3, #40	; 0x28
    3ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	429a      	cmp	r2, r3
    3cac:	d359      	bcc.n	3d62 <vTaskIncrementTick+0x186>
    3cae:	f240 1348 	movw	r3, #328	; 0x148
    3cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cb6:	681b      	ldr	r3, [r3, #0]
    3cb8:	681b      	ldr	r3, [r3, #0]
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d107      	bne.n	3cce <vTaskIncrementTick+0xf2>
    3cbe:	f240 0328 	movw	r3, #40	; 0x28
    3cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cc6:	f04f 32ff 	mov.w	r2, #4294967295
    3cca:	601a      	str	r2, [r3, #0]
    3ccc:	e049      	b.n	3d62 <vTaskIncrementTick+0x186>
    3cce:	f240 1348 	movw	r3, #328	; 0x148
    3cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cd6:	681b      	ldr	r3, [r3, #0]
    3cd8:	68db      	ldr	r3, [r3, #12]
    3cda:	68db      	ldr	r3, [r3, #12]
    3cdc:	60bb      	str	r3, [r7, #8]
    3cde:	68bb      	ldr	r3, [r7, #8]
    3ce0:	685b      	ldr	r3, [r3, #4]
    3ce2:	607b      	str	r3, [r7, #4]
    3ce4:	f240 1394 	movw	r3, #404	; 0x194
    3ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cec:	681a      	ldr	r2, [r3, #0]
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	429a      	cmp	r2, r3
    3cf2:	d206      	bcs.n	3d02 <vTaskIncrementTick+0x126>
    3cf4:	f240 0328 	movw	r3, #40	; 0x28
    3cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cfc:	687a      	ldr	r2, [r7, #4]
    3cfe:	601a      	str	r2, [r3, #0]
    3d00:	e02f      	b.n	3d62 <vTaskIncrementTick+0x186>
    3d02:	68bb      	ldr	r3, [r7, #8]
    3d04:	3304      	adds	r3, #4
    3d06:	4618      	mov	r0, r3
    3d08:	f7fe feb2 	bl	2a70 <vListRemove>
    3d0c:	68bb      	ldr	r3, [r7, #8]
    3d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d10:	2b00      	cmp	r3, #0
    3d12:	d004      	beq.n	3d1e <vTaskIncrementTick+0x142>
    3d14:	68bb      	ldr	r3, [r7, #8]
    3d16:	3318      	adds	r3, #24
    3d18:	4618      	mov	r0, r3
    3d1a:	f7fe fea9 	bl	2a70 <vListRemove>
    3d1e:	68bb      	ldr	r3, [r7, #8]
    3d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d22:	f240 139c 	movw	r3, #412	; 0x19c
    3d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	429a      	cmp	r2, r3
    3d2e:	d906      	bls.n	3d3e <vTaskIncrementTick+0x162>
    3d30:	68bb      	ldr	r3, [r7, #8]
    3d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d34:	f240 139c 	movw	r3, #412	; 0x19c
    3d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d3c:	601a      	str	r2, [r3, #0]
    3d3e:	68bb      	ldr	r3, [r7, #8]
    3d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d42:	4613      	mov	r3, r2
    3d44:	009b      	lsls	r3, r3, #2
    3d46:	4413      	add	r3, r2
    3d48:	009b      	lsls	r3, r3, #2
    3d4a:	f240 02bc 	movw	r2, #188	; 0xbc
    3d4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d52:	441a      	add	r2, r3
    3d54:	68bb      	ldr	r3, [r7, #8]
    3d56:	3304      	adds	r3, #4
    3d58:	4610      	mov	r0, r2
    3d5a:	4619      	mov	r1, r3
    3d5c:	f7fe fe28 	bl	29b0 <vListInsertEnd>
    3d60:	e7a5      	b.n	3cae <vTaskIncrementTick+0xd2>
    3d62:	e00c      	b.n	3d7e <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    3d64:	f240 13a8 	movw	r3, #424	; 0x1a8
    3d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d6c:	681b      	ldr	r3, [r3, #0]
    3d6e:	1c5a      	adds	r2, r3, #1
    3d70:	f240 13a8 	movw	r3, #424	; 0x1a8
    3d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d78:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    3d7a:	f002 f83d 	bl	5df8 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    3d7e:	f240 13a8 	movw	r3, #424	; 0x1a8
    3d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d86:	681b      	ldr	r3, [r3, #0]
    3d88:	2b00      	cmp	r3, #0
    3d8a:	d101      	bne.n	3d90 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    3d8c:	f002 f834 	bl	5df8 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3d90:	3710      	adds	r7, #16
    3d92:	46bd      	mov	sp, r7
    3d94:	bd80      	pop	{r7, pc}
    3d96:	bf00      	nop

00003d98 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	b082      	sub	sp, #8
    3d9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3d9e:	f240 13a4 	movw	r3, #420	; 0x1a4
    3da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3da6:	681b      	ldr	r3, [r3, #0]
    3da8:	2b00      	cmp	r3, #0
    3daa:	d006      	beq.n	3dba <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3dac:	f240 13ac 	movw	r3, #428	; 0x1ac
    3db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3db4:	2201      	movs	r2, #1
    3db6:	601a      	str	r2, [r3, #0]
    3db8:	e047      	b.n	3e4a <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    3dba:	f002 f817 	bl	5dec <myTraceSwitchedOut>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3dbe:	e00a      	b.n	3dd6 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3dc0:	f240 139c 	movw	r3, #412	; 0x19c
    3dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dc8:	681b      	ldr	r3, [r3, #0]
    3dca:	1e5a      	subs	r2, r3, #1
    3dcc:	f240 139c 	movw	r3, #412	; 0x19c
    3dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dd4:	601a      	str	r2, [r3, #0]

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3dd6:	f240 139c 	movw	r3, #412	; 0x19c
    3dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dde:	6819      	ldr	r1, [r3, #0]
    3de0:	f240 02bc 	movw	r2, #188	; 0xbc
    3de4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3de8:	460b      	mov	r3, r1
    3dea:	009b      	lsls	r3, r3, #2
    3dec:	440b      	add	r3, r1
    3dee:	009b      	lsls	r3, r3, #2
    3df0:	4413      	add	r3, r2
    3df2:	681b      	ldr	r3, [r3, #0]
    3df4:	2b00      	cmp	r3, #0
    3df6:	d0e3      	beq.n	3dc0 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3df8:	f240 139c 	movw	r3, #412	; 0x19c
    3dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e00:	681a      	ldr	r2, [r3, #0]
    3e02:	4613      	mov	r3, r2
    3e04:	009b      	lsls	r3, r3, #2
    3e06:	4413      	add	r3, r2
    3e08:	009b      	lsls	r3, r3, #2
    3e0a:	f240 02bc 	movw	r2, #188	; 0xbc
    3e0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3e12:	4413      	add	r3, r2
    3e14:	607b      	str	r3, [r7, #4]
    3e16:	687b      	ldr	r3, [r7, #4]
    3e18:	685b      	ldr	r3, [r3, #4]
    3e1a:	685a      	ldr	r2, [r3, #4]
    3e1c:	687b      	ldr	r3, [r7, #4]
    3e1e:	605a      	str	r2, [r3, #4]
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	685a      	ldr	r2, [r3, #4]
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	3308      	adds	r3, #8
    3e28:	429a      	cmp	r2, r3
    3e2a:	d104      	bne.n	3e36 <vTaskSwitchContext+0x9e>
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	685b      	ldr	r3, [r3, #4]
    3e30:	685a      	ldr	r2, [r3, #4]
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	605a      	str	r2, [r3, #4]
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	685b      	ldr	r3, [r3, #4]
    3e3a:	68da      	ldr	r2, [r3, #12]
    3e3c:	f240 03b8 	movw	r3, #184	; 0xb8
    3e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
    3e46:	f001 ffcb 	bl	5de0 <myTraceSwitchedIn>
	}
}
    3e4a:	3708      	adds	r7, #8
    3e4c:	46bd      	mov	sp, r7
    3e4e:	bd80      	pop	{r7, pc}

00003e50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b084      	sub	sp, #16
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
    3e58:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3e5a:	f240 03b8 	movw	r3, #184	; 0xb8
    3e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e62:	681b      	ldr	r3, [r3, #0]
    3e64:	3318      	adds	r3, #24
    3e66:	6878      	ldr	r0, [r7, #4]
    3e68:	4619      	mov	r1, r3
    3e6a:	f7fe fdc9 	bl	2a00 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3e6e:	f240 03b8 	movw	r3, #184	; 0xb8
    3e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e76:	681b      	ldr	r3, [r3, #0]
    3e78:	3304      	adds	r3, #4
    3e7a:	4618      	mov	r0, r3
    3e7c:	f7fe fdf8 	bl	2a70 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3e80:	683b      	ldr	r3, [r7, #0]
    3e82:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e86:	d10d      	bne.n	3ea4 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3e88:	f240 03b8 	movw	r3, #184	; 0xb8
    3e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e90:	681b      	ldr	r3, [r3, #0]
    3e92:	3304      	adds	r3, #4
    3e94:	f240 107c 	movw	r0, #380	; 0x17c
    3e98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3e9c:	4619      	mov	r1, r3
    3e9e:	f7fe fd87 	bl	29b0 <vListInsertEnd>
    3ea2:	e00a      	b.n	3eba <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3ea4:	f240 1394 	movw	r3, #404	; 0x194
    3ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eac:	681a      	ldr	r2, [r3, #0]
    3eae:	683b      	ldr	r3, [r7, #0]
    3eb0:	4413      	add	r3, r2
    3eb2:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3eb4:	68f8      	ldr	r0, [r7, #12]
    3eb6:	f000 f9a1 	bl	41fc <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    3eba:	3710      	adds	r7, #16
    3ebc:	46bd      	mov	sp, r7
    3ebe:	bd80      	pop	{r7, pc}

00003ec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b084      	sub	sp, #16
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	68db      	ldr	r3, [r3, #12]
    3ecc:	68db      	ldr	r3, [r3, #12]
    3ece:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3ed0:	68bb      	ldr	r3, [r7, #8]
    3ed2:	3318      	adds	r3, #24
    3ed4:	4618      	mov	r0, r3
    3ed6:	f7fe fdcb 	bl	2a70 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3eda:	f240 13a4 	movw	r3, #420	; 0x1a4
    3ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ee2:	681b      	ldr	r3, [r3, #0]
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d126      	bne.n	3f36 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3ee8:	68bb      	ldr	r3, [r7, #8]
    3eea:	3304      	adds	r3, #4
    3eec:	4618      	mov	r0, r3
    3eee:	f7fe fdbf 	bl	2a70 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3ef2:	68bb      	ldr	r3, [r7, #8]
    3ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ef6:	f240 139c 	movw	r3, #412	; 0x19c
    3efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3efe:	681b      	ldr	r3, [r3, #0]
    3f00:	429a      	cmp	r2, r3
    3f02:	d906      	bls.n	3f12 <xTaskRemoveFromEventList+0x52>
    3f04:	68bb      	ldr	r3, [r7, #8]
    3f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f08:	f240 139c 	movw	r3, #412	; 0x19c
    3f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f10:	601a      	str	r2, [r3, #0]
    3f12:	68bb      	ldr	r3, [r7, #8]
    3f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f16:	4613      	mov	r3, r2
    3f18:	009b      	lsls	r3, r3, #2
    3f1a:	4413      	add	r3, r2
    3f1c:	009b      	lsls	r3, r3, #2
    3f1e:	f240 02bc 	movw	r2, #188	; 0xbc
    3f22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3f26:	441a      	add	r2, r3
    3f28:	68bb      	ldr	r3, [r7, #8]
    3f2a:	3304      	adds	r3, #4
    3f2c:	4610      	mov	r0, r2
    3f2e:	4619      	mov	r1, r3
    3f30:	f7fe fd3e 	bl	29b0 <vListInsertEnd>
    3f34:	e008      	b.n	3f48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3f36:	68bb      	ldr	r3, [r7, #8]
    3f38:	3318      	adds	r3, #24
    3f3a:	f240 1050 	movw	r0, #336	; 0x150
    3f3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3f42:	4619      	mov	r1, r3
    3f44:	f7fe fd34 	bl	29b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3f48:	68bb      	ldr	r3, [r7, #8]
    3f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3f4c:	f240 03b8 	movw	r3, #184	; 0xb8
    3f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f54:	681b      	ldr	r3, [r3, #0]
    3f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f58:	429a      	cmp	r2, r3
    3f5a:	d302      	bcc.n	3f62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    3f5c:	2301      	movs	r3, #1
    3f5e:	60fb      	str	r3, [r7, #12]
    3f60:	e001      	b.n	3f66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    3f62:	2300      	movs	r3, #0
    3f64:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    3f66:	68fb      	ldr	r3, [r7, #12]
}
    3f68:	4618      	mov	r0, r3
    3f6a:	3710      	adds	r7, #16
    3f6c:	46bd      	mov	sp, r7
    3f6e:	bd80      	pop	{r7, pc}

00003f70 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    3f70:	b480      	push	{r7}
    3f72:	b083      	sub	sp, #12
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3f78:	f240 13b0 	movw	r3, #432	; 0x1b0
    3f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f80:	681a      	ldr	r2, [r3, #0]
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    3f86:	f240 1394 	movw	r3, #404	; 0x194
    3f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f8e:	681a      	ldr	r2, [r3, #0]
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	605a      	str	r2, [r3, #4]
}
    3f94:	370c      	adds	r7, #12
    3f96:	46bd      	mov	sp, r7
    3f98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f9c:	4770      	bx	lr
    3f9e:	bf00      	nop

00003fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b084      	sub	sp, #16
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
    3fa8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3faa:	f000 fae1 	bl	4570 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    3fae:	683b      	ldr	r3, [r7, #0]
    3fb0:	681b      	ldr	r3, [r3, #0]
    3fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3fb6:	d102      	bne.n	3fbe <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    3fb8:	2300      	movs	r3, #0
    3fba:	60fb      	str	r3, [r7, #12]
    3fbc:	e035      	b.n	402a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	681a      	ldr	r2, [r3, #0]
    3fc2:	f240 13b0 	movw	r3, #432	; 0x1b0
    3fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fca:	681b      	ldr	r3, [r3, #0]
    3fcc:	429a      	cmp	r2, r3
    3fce:	d00b      	beq.n	3fe8 <xTaskCheckForTimeOut+0x48>
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	685a      	ldr	r2, [r3, #4]
    3fd4:	f240 1394 	movw	r3, #404	; 0x194
    3fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fdc:	681b      	ldr	r3, [r3, #0]
    3fde:	429a      	cmp	r2, r3
    3fe0:	d802      	bhi.n	3fe8 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3fe2:	2301      	movs	r3, #1
    3fe4:	60fb      	str	r3, [r7, #12]
    3fe6:	e020      	b.n	402a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3fe8:	f240 1394 	movw	r3, #404	; 0x194
    3fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ff0:	681a      	ldr	r2, [r3, #0]
    3ff2:	687b      	ldr	r3, [r7, #4]
    3ff4:	685b      	ldr	r3, [r3, #4]
    3ff6:	1ad2      	subs	r2, r2, r3
    3ff8:	683b      	ldr	r3, [r7, #0]
    3ffa:	681b      	ldr	r3, [r3, #0]
    3ffc:	429a      	cmp	r2, r3
    3ffe:	d212      	bcs.n	4026 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4000:	683b      	ldr	r3, [r7, #0]
    4002:	681a      	ldr	r2, [r3, #0]
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	6859      	ldr	r1, [r3, #4]
    4008:	f240 1394 	movw	r3, #404	; 0x194
    400c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4010:	681b      	ldr	r3, [r3, #0]
    4012:	1acb      	subs	r3, r1, r3
    4014:	441a      	add	r2, r3
    4016:	683b      	ldr	r3, [r7, #0]
    4018:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    401a:	6878      	ldr	r0, [r7, #4]
    401c:	f7ff ffa8 	bl	3f70 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4020:	2300      	movs	r3, #0
    4022:	60fb      	str	r3, [r7, #12]
    4024:	e001      	b.n	402a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    4026:	2301      	movs	r3, #1
    4028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    402a:	f000 fab7 	bl	459c <vPortExitCritical>

	return xReturn;
    402e:	68fb      	ldr	r3, [r7, #12]
}
    4030:	4618      	mov	r0, r3
    4032:	3710      	adds	r7, #16
    4034:	46bd      	mov	sp, r7
    4036:	bd80      	pop	{r7, pc}

00004038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4038:	b480      	push	{r7}
    403a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    403c:	f240 13ac 	movw	r3, #428	; 0x1ac
    4040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4044:	2201      	movs	r2, #1
    4046:	601a      	str	r2, [r3, #0]
}
    4048:	46bd      	mov	sp, r7
    404a:	f85d 7b04 	ldr.w	r7, [sp], #4
    404e:	4770      	bx	lr

00004050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4050:	b580      	push	{r7, lr}
    4052:	b082      	sub	sp, #8
    4054:	af00      	add	r7, sp, #0
    4056:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    4058:	f000 f888 	bl	416c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    405c:	f000 fa7a 	bl	4554 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    4060:	f001 fed0 	bl	5e04 <vApplicationIdleHook>
		}
		#endif
	}
    4064:	e7f8      	b.n	4058 <prvIdleTask+0x8>
    4066:	bf00      	nop

00004068 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4068:	b580      	push	{r7, lr}
    406a:	b084      	sub	sp, #16
    406c:	af00      	add	r7, sp, #0
    406e:	60f8      	str	r0, [r7, #12]
    4070:	60b9      	str	r1, [r7, #8]
    4072:	607a      	str	r2, [r7, #4]
    4074:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    4076:	68fb      	ldr	r3, [r7, #12]
    4078:	3334      	adds	r3, #52	; 0x34
    407a:	4618      	mov	r0, r3
    407c:	68b9      	ldr	r1, [r7, #8]
    407e:	2210      	movs	r2, #16
    4080:	f002 fe14 	bl	6cac <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4084:	68fb      	ldr	r3, [r7, #12]
    4086:	2200      	movs	r2, #0
    4088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	2b04      	cmp	r3, #4
    4090:	d901      	bls.n	4096 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4092:	2304      	movs	r3, #4
    4094:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    4096:	68fb      	ldr	r3, [r7, #12]
    4098:	687a      	ldr	r2, [r7, #4]
    409a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    409c:	68fb      	ldr	r3, [r7, #12]
    409e:	687a      	ldr	r2, [r7, #4]
    40a0:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    40a2:	68fb      	ldr	r3, [r7, #12]
    40a4:	3304      	adds	r3, #4
    40a6:	4618      	mov	r0, r3
    40a8:	f7fe fc76 	bl	2998 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    40ac:	68fb      	ldr	r3, [r7, #12]
    40ae:	3318      	adds	r3, #24
    40b0:	4618      	mov	r0, r3
    40b2:	f7fe fc71 	bl	2998 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    40b6:	68fb      	ldr	r3, [r7, #12]
    40b8:	68fa      	ldr	r2, [r7, #12]
    40ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	f1c3 0205 	rsb	r2, r3, #5
    40c2:	68fb      	ldr	r3, [r7, #12]
    40c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    40c6:	68fb      	ldr	r3, [r7, #12]
    40c8:	68fa      	ldr	r2, [r7, #12]
    40ca:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    40cc:	3710      	adds	r7, #16
    40ce:	46bd      	mov	sp, r7
    40d0:	bd80      	pop	{r7, pc}
    40d2:	bf00      	nop

000040d4 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    40d4:	b580      	push	{r7, lr}
    40d6:	b082      	sub	sp, #8
    40d8:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    40da:	2300      	movs	r3, #0
    40dc:	607b      	str	r3, [r7, #4]
    40de:	e00f      	b.n	4100 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    40e0:	687a      	ldr	r2, [r7, #4]
    40e2:	4613      	mov	r3, r2
    40e4:	009b      	lsls	r3, r3, #2
    40e6:	4413      	add	r3, r2
    40e8:	009b      	lsls	r3, r3, #2
    40ea:	f240 02bc 	movw	r2, #188	; 0xbc
    40ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    40f2:	4413      	add	r3, r2
    40f4:	4618      	mov	r0, r3
    40f6:	f7fe fc2f 	bl	2958 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	3301      	adds	r3, #1
    40fe:	607b      	str	r3, [r7, #4]
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	2b04      	cmp	r3, #4
    4104:	d9ec      	bls.n	40e0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    4106:	f240 1020 	movw	r0, #288	; 0x120
    410a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    410e:	f7fe fc23 	bl	2958 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    4112:	f240 1034 	movw	r0, #308	; 0x134
    4116:	f2c2 0000 	movt	r0, #8192	; 0x2000
    411a:	f7fe fc1d 	bl	2958 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    411e:	f240 1050 	movw	r0, #336	; 0x150
    4122:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4126:	f7fe fc17 	bl	2958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    412a:	f240 1064 	movw	r0, #356	; 0x164
    412e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4132:	f7fe fc11 	bl	2958 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    4136:	f240 107c 	movw	r0, #380	; 0x17c
    413a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    413e:	f7fe fc0b 	bl	2958 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4142:	f240 1348 	movw	r3, #328	; 0x148
    4146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    414a:	f240 1220 	movw	r2, #288	; 0x120
    414e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4152:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4154:	f240 134c 	movw	r3, #332	; 0x14c
    4158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    415c:	f240 1234 	movw	r2, #308	; 0x134
    4160:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4164:	601a      	str	r2, [r3, #0]
}
    4166:	3708      	adds	r7, #8
    4168:	46bd      	mov	sp, r7
    416a:	bd80      	pop	{r7, pc}

0000416c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    416c:	b580      	push	{r7, lr}
    416e:	b082      	sub	sp, #8
    4170:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4172:	f240 1378 	movw	r3, #376	; 0x178
    4176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	2b00      	cmp	r3, #0
    417e:	d03a      	beq.n	41f6 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    4180:	f7ff fc4a 	bl	3a18 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4184:	f240 1364 	movw	r3, #356	; 0x164
    4188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    418c:	681b      	ldr	r3, [r3, #0]
    418e:	2b00      	cmp	r3, #0
    4190:	bf14      	ite	ne
    4192:	2300      	movne	r3, #0
    4194:	2301      	moveq	r3, #1
    4196:	b2db      	uxtb	r3, r3
    4198:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    419a:	f7ff fc4f 	bl	3a3c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    419e:	687b      	ldr	r3, [r7, #4]
    41a0:	2b00      	cmp	r3, #0
    41a2:	d128      	bne.n	41f6 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    41a4:	f000 f9e4 	bl	4570 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    41a8:	f240 1364 	movw	r3, #356	; 0x164
    41ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41b0:	68db      	ldr	r3, [r3, #12]
    41b2:	68db      	ldr	r3, [r3, #12]
    41b4:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    41b6:	683b      	ldr	r3, [r7, #0]
    41b8:	3304      	adds	r3, #4
    41ba:	4618      	mov	r0, r3
    41bc:	f7fe fc58 	bl	2a70 <vListRemove>
					--uxCurrentNumberOfTasks;
    41c0:	f240 1390 	movw	r3, #400	; 0x190
    41c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41c8:	681b      	ldr	r3, [r3, #0]
    41ca:	1e5a      	subs	r2, r3, #1
    41cc:	f240 1390 	movw	r3, #400	; 0x190
    41d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41d4:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    41d6:	f240 1378 	movw	r3, #376	; 0x178
    41da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41de:	681b      	ldr	r3, [r3, #0]
    41e0:	1e5a      	subs	r2, r3, #1
    41e2:	f240 1378 	movw	r3, #376	; 0x178
    41e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41ea:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    41ec:	f000 f9d6 	bl	459c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    41f0:	6838      	ldr	r0, [r7, #0]
    41f2:	f000 f879 	bl	42e8 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    41f6:	3708      	adds	r7, #8
    41f8:	46bd      	mov	sp, r7
    41fa:	bd80      	pop	{r7, pc}

000041fc <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    41fc:	b580      	push	{r7, lr}
    41fe:	b082      	sub	sp, #8
    4200:	af00      	add	r7, sp, #0
    4202:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    4204:	f240 03b8 	movw	r3, #184	; 0xb8
    4208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    420c:	681b      	ldr	r3, [r3, #0]
    420e:	687a      	ldr	r2, [r7, #4]
    4210:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    4212:	f240 1394 	movw	r3, #404	; 0x194
    4216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    421a:	681b      	ldr	r3, [r3, #0]
    421c:	687a      	ldr	r2, [r7, #4]
    421e:	429a      	cmp	r2, r3
    4220:	d20f      	bcs.n	4242 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4222:	f240 134c 	movw	r3, #332	; 0x14c
    4226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    422a:	681a      	ldr	r2, [r3, #0]
    422c:	f240 03b8 	movw	r3, #184	; 0xb8
    4230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4234:	681b      	ldr	r3, [r3, #0]
    4236:	3304      	adds	r3, #4
    4238:	4610      	mov	r0, r2
    423a:	4619      	mov	r1, r3
    423c:	f7fe fbe0 	bl	2a00 <vListInsert>
    4240:	e01c      	b.n	427c <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4242:	f240 1348 	movw	r3, #328	; 0x148
    4246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    424a:	681a      	ldr	r2, [r3, #0]
    424c:	f240 03b8 	movw	r3, #184	; 0xb8
    4250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4254:	681b      	ldr	r3, [r3, #0]
    4256:	3304      	adds	r3, #4
    4258:	4610      	mov	r0, r2
    425a:	4619      	mov	r1, r3
    425c:	f7fe fbd0 	bl	2a00 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4260:	f240 0328 	movw	r3, #40	; 0x28
    4264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4268:	681b      	ldr	r3, [r3, #0]
    426a:	687a      	ldr	r2, [r7, #4]
    426c:	429a      	cmp	r2, r3
    426e:	d205      	bcs.n	427c <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4270:	f240 0328 	movw	r3, #40	; 0x28
    4274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4278:	687a      	ldr	r2, [r7, #4]
    427a:	601a      	str	r2, [r3, #0]
		}
	}
}
    427c:	3708      	adds	r7, #8
    427e:	46bd      	mov	sp, r7
    4280:	bd80      	pop	{r7, pc}
    4282:	bf00      	nop

00004284 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4284:	b580      	push	{r7, lr}
    4286:	b084      	sub	sp, #16
    4288:	af00      	add	r7, sp, #0
    428a:	4603      	mov	r3, r0
    428c:	6039      	str	r1, [r7, #0]
    428e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4290:	2048      	movs	r0, #72	; 0x48
    4292:	f000 f9e7 	bl	4664 <pvPortMalloc>
    4296:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    4298:	68fb      	ldr	r3, [r7, #12]
    429a:	2b00      	cmp	r3, #0
    429c:	d01f      	beq.n	42de <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    429e:	683b      	ldr	r3, [r7, #0]
    42a0:	2b00      	cmp	r3, #0
    42a2:	d106      	bne.n	42b2 <prvAllocateTCBAndStack+0x2e>
    42a4:	88fb      	ldrh	r3, [r7, #6]
    42a6:	009b      	lsls	r3, r3, #2
    42a8:	4618      	mov	r0, r3
    42aa:	f000 f9db 	bl	4664 <pvPortMalloc>
    42ae:	4603      	mov	r3, r0
    42b0:	e000      	b.n	42b4 <prvAllocateTCBAndStack+0x30>
    42b2:	683b      	ldr	r3, [r7, #0]
    42b4:	68fa      	ldr	r2, [r7, #12]
    42b6:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    42b8:	68fb      	ldr	r3, [r7, #12]
    42ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    42bc:	2b00      	cmp	r3, #0
    42be:	d105      	bne.n	42cc <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    42c0:	68f8      	ldr	r0, [r7, #12]
    42c2:	f000 fa93 	bl	47ec <vPortFree>
			pxNewTCB = NULL;
    42c6:	2300      	movs	r3, #0
    42c8:	60fb      	str	r3, [r7, #12]
    42ca:	e008      	b.n	42de <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    42d0:	88fb      	ldrh	r3, [r7, #6]
    42d2:	009b      	lsls	r3, r3, #2
    42d4:	4610      	mov	r0, r2
    42d6:	21a5      	movs	r1, #165	; 0xa5
    42d8:	461a      	mov	r2, r3
    42da:	f002 faeb 	bl	68b4 <memset>
		}
	}

	return pxNewTCB;
    42de:	68fb      	ldr	r3, [r7, #12]
}
    42e0:	4618      	mov	r0, r3
    42e2:	3710      	adds	r7, #16
    42e4:	46bd      	mov	sp, r7
    42e6:	bd80      	pop	{r7, pc}

000042e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    42e8:	b580      	push	{r7, lr}
    42ea:	b082      	sub	sp, #8
    42ec:	af00      	add	r7, sp, #0
    42ee:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    42f4:	4618      	mov	r0, r3
    42f6:	f000 fa79 	bl	47ec <vPortFree>
		vPortFree( pxTCB );
    42fa:	6878      	ldr	r0, [r7, #4]
    42fc:	f000 fa76 	bl	47ec <vPortFree>
	}
    4300:	3708      	adds	r7, #8
    4302:	46bd      	mov	sp, r7
    4304:	bd80      	pop	{r7, pc}
    4306:	bf00      	nop

00004308 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    4308:	b480      	push	{r7}
    430a:	b083      	sub	sp, #12
    430c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    430e:	f240 03b8 	movw	r3, #184	; 0xb8
    4312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4316:	681b      	ldr	r3, [r3, #0]
    4318:	607b      	str	r3, [r7, #4]

		return xReturn;
    431a:	687b      	ldr	r3, [r7, #4]
	}
    431c:	4618      	mov	r0, r3
    431e:	370c      	adds	r7, #12
    4320:	46bd      	mov	sp, r7
    4322:	f85d 7b04 	ldr.w	r7, [sp], #4
    4326:	4770      	bx	lr

00004328 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    4328:	b580      	push	{r7, lr}
    432a:	b084      	sub	sp, #16
    432c:	af00      	add	r7, sp, #0
    432e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4330:	687b      	ldr	r3, [r7, #4]
    4332:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4334:	68fb      	ldr	r3, [r7, #12]
    4336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4338:	f240 03b8 	movw	r3, #184	; 0xb8
    433c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4340:	681b      	ldr	r3, [r3, #0]
    4342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4344:	429a      	cmp	r2, r3
    4346:	d24f      	bcs.n	43e8 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4348:	f240 03b8 	movw	r3, #184	; 0xb8
    434c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4350:	681b      	ldr	r3, [r3, #0]
    4352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4354:	f1c3 0205 	rsb	r2, r3, #5
    4358:	68fb      	ldr	r3, [r7, #12]
    435a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    435c:	68fb      	ldr	r3, [r7, #12]
    435e:	6959      	ldr	r1, [r3, #20]
    4360:	68fb      	ldr	r3, [r7, #12]
    4362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4364:	4613      	mov	r3, r2
    4366:	009b      	lsls	r3, r3, #2
    4368:	4413      	add	r3, r2
    436a:	009b      	lsls	r3, r3, #2
    436c:	f240 02bc 	movw	r2, #188	; 0xbc
    4370:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4374:	4413      	add	r3, r2
    4376:	4299      	cmp	r1, r3
    4378:	d12e      	bne.n	43d8 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    437a:	68fb      	ldr	r3, [r7, #12]
    437c:	3304      	adds	r3, #4
    437e:	4618      	mov	r0, r3
    4380:	f7fe fb76 	bl	2a70 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4384:	f240 03b8 	movw	r3, #184	; 0xb8
    4388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    438c:	681b      	ldr	r3, [r3, #0]
    438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4390:	68fb      	ldr	r3, [r7, #12]
    4392:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4394:	68fb      	ldr	r3, [r7, #12]
    4396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4398:	f240 139c 	movw	r3, #412	; 0x19c
    439c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43a0:	681b      	ldr	r3, [r3, #0]
    43a2:	429a      	cmp	r2, r3
    43a4:	d906      	bls.n	43b4 <vTaskPriorityInherit+0x8c>
    43a6:	68fb      	ldr	r3, [r7, #12]
    43a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43aa:	f240 139c 	movw	r3, #412	; 0x19c
    43ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43b2:	601a      	str	r2, [r3, #0]
    43b4:	68fb      	ldr	r3, [r7, #12]
    43b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43b8:	4613      	mov	r3, r2
    43ba:	009b      	lsls	r3, r3, #2
    43bc:	4413      	add	r3, r2
    43be:	009b      	lsls	r3, r3, #2
    43c0:	f240 02bc 	movw	r2, #188	; 0xbc
    43c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    43c8:	441a      	add	r2, r3
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	3304      	adds	r3, #4
    43ce:	4610      	mov	r0, r2
    43d0:	4619      	mov	r1, r3
    43d2:	f7fe faed 	bl	29b0 <vListInsertEnd>
    43d6:	e007      	b.n	43e8 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    43d8:	f240 03b8 	movw	r3, #184	; 0xb8
    43dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43e0:	681b      	ldr	r3, [r3, #0]
    43e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    43e8:	3710      	adds	r7, #16
    43ea:	46bd      	mov	sp, r7
    43ec:	bd80      	pop	{r7, pc}
    43ee:	bf00      	nop

000043f0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    43f0:	b580      	push	{r7, lr}
    43f2:	b084      	sub	sp, #16
    43f4:	af00      	add	r7, sp, #0
    43f6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    43f8:	687b      	ldr	r3, [r7, #4]
    43fa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    43fc:	687b      	ldr	r3, [r7, #4]
    43fe:	2b00      	cmp	r3, #0
    4400:	d035      	beq.n	446e <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4402:	68fb      	ldr	r3, [r7, #12]
    4404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4406:	68fb      	ldr	r3, [r7, #12]
    4408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    440a:	429a      	cmp	r2, r3
    440c:	d02f      	beq.n	446e <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    440e:	68fb      	ldr	r3, [r7, #12]
    4410:	3304      	adds	r3, #4
    4412:	4618      	mov	r0, r3
    4414:	f7fe fb2c 	bl	2a70 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4418:	68fb      	ldr	r3, [r7, #12]
    441a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    441c:	68fb      	ldr	r3, [r7, #12]
    441e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4420:	68fb      	ldr	r3, [r7, #12]
    4422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4424:	f1c3 0205 	rsb	r2, r3, #5
    4428:	68fb      	ldr	r3, [r7, #12]
    442a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    442c:	68fb      	ldr	r3, [r7, #12]
    442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4430:	f240 139c 	movw	r3, #412	; 0x19c
    4434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4438:	681b      	ldr	r3, [r3, #0]
    443a:	429a      	cmp	r2, r3
    443c:	d906      	bls.n	444c <vTaskPriorityDisinherit+0x5c>
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4442:	f240 139c 	movw	r3, #412	; 0x19c
    4446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    444a:	601a      	str	r2, [r3, #0]
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4450:	4613      	mov	r3, r2
    4452:	009b      	lsls	r3, r3, #2
    4454:	4413      	add	r3, r2
    4456:	009b      	lsls	r3, r3, #2
    4458:	f240 02bc 	movw	r2, #188	; 0xbc
    445c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4460:	441a      	add	r2, r3
    4462:	68fb      	ldr	r3, [r7, #12]
    4464:	3304      	adds	r3, #4
    4466:	4610      	mov	r0, r2
    4468:	4619      	mov	r1, r3
    446a:	f7fe faa1 	bl	29b0 <vListInsertEnd>
			}
		}
	}
    446e:	3710      	adds	r7, #16
    4470:	46bd      	mov	sp, r7
    4472:	bd80      	pop	{r7, pc}

00004474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4474:	b480      	push	{r7}
    4476:	b085      	sub	sp, #20
    4478:	af00      	add	r7, sp, #0
    447a:	60f8      	str	r0, [r7, #12]
    447c:	60b9      	str	r1, [r7, #8]
    447e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4480:	68fb      	ldr	r3, [r7, #12]
    4482:	3b04      	subs	r3, #4
    4484:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4486:	68fb      	ldr	r3, [r7, #12]
    4488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    448c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    448e:	68fb      	ldr	r3, [r7, #12]
    4490:	3b04      	subs	r3, #4
    4492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4494:	68ba      	ldr	r2, [r7, #8]
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    449a:	68fb      	ldr	r3, [r7, #12]
    449c:	3b04      	subs	r3, #4
    449e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    44a0:	68fb      	ldr	r3, [r7, #12]
    44a2:	2200      	movs	r2, #0
    44a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    44a6:	68fb      	ldr	r3, [r7, #12]
    44a8:	3b14      	subs	r3, #20
    44aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    44ac:	687a      	ldr	r2, [r7, #4]
    44ae:	68fb      	ldr	r3, [r7, #12]
    44b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    44b2:	68fb      	ldr	r3, [r7, #12]
    44b4:	3b20      	subs	r3, #32
    44b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    44b8:	68fb      	ldr	r3, [r7, #12]
}
    44ba:	4618      	mov	r0, r3
    44bc:	3714      	adds	r7, #20
    44be:	46bd      	mov	sp, r7
    44c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    44c4:	4770      	bx	lr
    44c6:	bf00      	nop

000044c8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    44c8:	4b06      	ldr	r3, [pc, #24]	; (44e4 <pxCurrentTCBConst2>)
    44ca:	6819      	ldr	r1, [r3, #0]
    44cc:	6808      	ldr	r0, [r1, #0]
    44ce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    44d2:	f380 8809 	msr	PSP, r0
    44d6:	f04f 0000 	mov.w	r0, #0
    44da:	f380 8811 	msr	BASEPRI, r0
    44de:	f04e 0e0d 	orr.w	lr, lr, #13
    44e2:	4770      	bx	lr

000044e4 <pxCurrentTCBConst2>:
    44e4:	200000b8 	.word	0x200000b8

000044e8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    44e8:	485d      	ldr	r0, [pc, #372]	; (4660 <prvSetupTimerInterrupt+0x2c>)
    44ea:	6800      	ldr	r0, [r0, #0]
    44ec:	6800      	ldr	r0, [r0, #0]
    44ee:	f380 8808 	msr	MSP, r0
    44f2:	b662      	cpsie	i
    44f4:	df00      	svc	0
    44f6:	bf00      	nop

000044f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    44f8:	b580      	push	{r7, lr}
    44fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    44fc:	f64e 5320 	movw	r3, #60704	; 0xed20
    4500:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4504:	f64e 5220 	movw	r2, #60704	; 0xed20
    4508:	f2ce 0200 	movt	r2, #57344	; 0xe000
    450c:	6812      	ldr	r2, [r2, #0]
    450e:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    4512:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    4514:	f64e 5320 	movw	r3, #60704	; 0xed20
    4518:	f2ce 0300 	movt	r3, #57344	; 0xe000
    451c:	f64e 5220 	movw	r2, #60704	; 0xed20
    4520:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4524:	6812      	ldr	r2, [r2, #0]
    4526:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    452a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    452c:	f000 f882 	bl	4634 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    4530:	f240 032c 	movw	r3, #44	; 0x2c
    4534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4538:	2200      	movs	r2, #0
    453a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    453c:	f7ff ffd4 	bl	44e8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4540:	2300      	movs	r3, #0
}
    4542:	4618      	mov	r0, r3
    4544:	bd80      	pop	{r7, pc}
    4546:	bf00      	nop

00004548 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4548:	b480      	push	{r7}
    454a:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    454c:	46bd      	mov	sp, r7
    454e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4552:	4770      	bx	lr

00004554 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4554:	b480      	push	{r7}
    4556:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4558:	f64e 5304 	movw	r3, #60676	; 0xed04
    455c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4564:	601a      	str	r2, [r3, #0]
}
    4566:	46bd      	mov	sp, r7
    4568:	f85d 7b04 	ldr.w	r7, [sp], #4
    456c:	4770      	bx	lr
    456e:	bf00      	nop

00004570 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4570:	b480      	push	{r7}
    4572:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4574:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4578:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    457c:	f240 032c 	movw	r3, #44	; 0x2c
    4580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4584:	681b      	ldr	r3, [r3, #0]
    4586:	1c5a      	adds	r2, r3, #1
    4588:	f240 032c 	movw	r3, #44	; 0x2c
    458c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4590:	601a      	str	r2, [r3, #0]
}
    4592:	46bd      	mov	sp, r7
    4594:	f85d 7b04 	ldr.w	r7, [sp], #4
    4598:	4770      	bx	lr
    459a:	bf00      	nop

0000459c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    459c:	b480      	push	{r7}
    459e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    45a0:	f240 032c 	movw	r3, #44	; 0x2c
    45a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45a8:	681b      	ldr	r3, [r3, #0]
    45aa:	1e5a      	subs	r2, r3, #1
    45ac:	f240 032c 	movw	r3, #44	; 0x2c
    45b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45b4:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    45b6:	f240 032c 	movw	r3, #44	; 0x2c
    45ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45be:	681b      	ldr	r3, [r3, #0]
    45c0:	2b00      	cmp	r3, #0
    45c2:	d103      	bne.n	45cc <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    45c4:	f04f 0000 	mov.w	r0, #0
    45c8:	f380 8811 	msr	BASEPRI, r0
	}
}
    45cc:	46bd      	mov	sp, r7
    45ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    45d2:	4770      	bx	lr

000045d4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    45d4:	f3ef 8009 	mrs	r0, PSP
    45d8:	4b0c      	ldr	r3, [pc, #48]	; (460c <pxCurrentTCBConst>)
    45da:	681a      	ldr	r2, [r3, #0]
    45dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    45e0:	6010      	str	r0, [r2, #0]
    45e2:	e92d 4008 	stmdb	sp!, {r3, lr}
    45e6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    45ea:	f380 8811 	msr	BASEPRI, r0
    45ee:	f7ff fbd3 	bl	3d98 <vTaskSwitchContext>
    45f2:	f04f 0000 	mov.w	r0, #0
    45f6:	f380 8811 	msr	BASEPRI, r0
    45fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    45fe:	6819      	ldr	r1, [r3, #0]
    4600:	6808      	ldr	r0, [r1, #0]
    4602:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4606:	f380 8809 	msr	PSP, r0
    460a:	4770      	bx	lr

0000460c <pxCurrentTCBConst>:
    460c:	200000b8 	.word	0x200000b8

00004610 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    4610:	b580      	push	{r7, lr}
    4612:	b082      	sub	sp, #8
    4614:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    4616:	2300      	movs	r3, #0
    4618:	607b      	str	r3, [r7, #4]
    461a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    461e:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    4622:	f7ff fadb 	bl	3bdc <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4626:	f04f 0000 	mov.w	r0, #0
    462a:	f380 8811 	msr	BASEPRI, r0
}
    462e:	3708      	adds	r7, #8
    4630:	46bd      	mov	sp, r7
    4632:	bd80      	pop	{r7, pc}

00004634 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4634:	b480      	push	{r7}
    4636:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    4638:	f24e 0314 	movw	r3, #57364	; 0xe014
    463c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4640:	f641 123f 	movw	r2, #6463	; 0x193f
    4644:	f2c0 0201 	movt	r2, #1
    4648:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    464a:	f24e 0310 	movw	r3, #57360	; 0xe010
    464e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4652:	2207      	movs	r2, #7
    4654:	601a      	str	r2, [r3, #0]
}
    4656:	46bd      	mov	sp, r7
    4658:	f85d 7b04 	ldr.w	r7, [sp], #4
    465c:	4770      	bx	lr
    465e:	0000      	.short	0x0000
    4660:	e000ed08 	.word	0xe000ed08

00004664 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4664:	b580      	push	{r7, lr}
    4666:	b08a      	sub	sp, #40	; 0x28
    4668:	af00      	add	r7, sp, #0
    466a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    466c:	2300      	movs	r3, #0
    466e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    4670:	f7ff f9d2 	bl	3a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4674:	f64c 13c8 	movw	r3, #51656	; 0xc9c8
    4678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    467c:	681b      	ldr	r3, [r3, #0]
    467e:	2b00      	cmp	r3, #0
    4680:	d130      	bne.n	46e4 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    4682:	f64c 13b8 	movw	r3, #51640	; 0xc9b8
    4686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    468a:	f240 12b8 	movw	r2, #440	; 0x1b8
    468e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4692:	601a      	str	r2, [r3, #0]
    4694:	f64c 13b8 	movw	r3, #51640	; 0xc9b8
    4698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    469c:	2200      	movs	r2, #0
    469e:	605a      	str	r2, [r3, #4]
    46a0:	f64c 13c0 	movw	r3, #51648	; 0xc9c0
    46a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46a8:	f44f 4248 	mov.w	r2, #51200	; 0xc800
    46ac:	605a      	str	r2, [r3, #4]
    46ae:	f64c 13c0 	movw	r3, #51648	; 0xc9c0
    46b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46b6:	2200      	movs	r2, #0
    46b8:	601a      	str	r2, [r3, #0]
    46ba:	f240 13b8 	movw	r3, #440	; 0x1b8
    46be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46c2:	617b      	str	r3, [r7, #20]
    46c4:	697b      	ldr	r3, [r7, #20]
    46c6:	f44f 4248 	mov.w	r2, #51200	; 0xc800
    46ca:	605a      	str	r2, [r3, #4]
    46cc:	697a      	ldr	r2, [r7, #20]
    46ce:	f64c 13c0 	movw	r3, #51648	; 0xc9c0
    46d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46d6:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    46d8:	f64c 13c8 	movw	r3, #51656	; 0xc9c8
    46dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46e0:	2201      	movs	r2, #1
    46e2:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d00d      	beq.n	4706 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    46ea:	2310      	movs	r3, #16
    46ec:	687a      	ldr	r2, [r7, #4]
    46ee:	4413      	add	r3, r2
    46f0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    46f2:	687b      	ldr	r3, [r7, #4]
    46f4:	f003 0307 	and.w	r3, r3, #7
    46f8:	2b00      	cmp	r3, #0
    46fa:	d004      	beq.n	4706 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	f023 0307 	bic.w	r3, r3, #7
    4702:	3308      	adds	r3, #8
    4704:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	2b00      	cmp	r3, #0
    470a:	d068      	beq.n	47de <pvPortMalloc+0x17a>
    470c:	687b      	ldr	r3, [r7, #4]
    470e:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
    4712:	d264      	bcs.n	47de <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    4714:	f64c 13b8 	movw	r3, #51640	; 0xc9b8
    4718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    471c:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    471e:	f64c 13b8 	movw	r3, #51640	; 0xc9b8
    4722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4726:	681b      	ldr	r3, [r3, #0]
    4728:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    472a:	e004      	b.n	4736 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    472e:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    4730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4732:	681b      	ldr	r3, [r3, #0]
    4734:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    4736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4738:	685a      	ldr	r2, [r3, #4]
    473a:	687b      	ldr	r3, [r7, #4]
    473c:	429a      	cmp	r2, r3
    473e:	d203      	bcs.n	4748 <pvPortMalloc+0xe4>
    4740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4742:	681b      	ldr	r3, [r3, #0]
    4744:	2b00      	cmp	r3, #0
    4746:	d1f1      	bne.n	472c <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    4748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    474a:	f64c 13c0 	movw	r3, #51648	; 0xc9c0
    474e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4752:	429a      	cmp	r2, r3
    4754:	d043      	beq.n	47de <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    4756:	6a3b      	ldr	r3, [r7, #32]
    4758:	681a      	ldr	r2, [r3, #0]
    475a:	2310      	movs	r3, #16
    475c:	4413      	add	r3, r2
    475e:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    4760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4762:	681a      	ldr	r2, [r3, #0]
    4764:	6a3b      	ldr	r3, [r7, #32]
    4766:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    4768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    476a:	685a      	ldr	r2, [r3, #4]
    476c:	687b      	ldr	r3, [r7, #4]
    476e:	1ad2      	subs	r2, r2, r3
    4770:	2310      	movs	r3, #16
    4772:	005b      	lsls	r3, r3, #1
    4774:	429a      	cmp	r2, r3
    4776:	d925      	bls.n	47c4 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    4778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    477a:	687b      	ldr	r3, [r7, #4]
    477c:	4413      	add	r3, r2
    477e:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    4780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4782:	685a      	ldr	r2, [r3, #4]
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	1ad2      	subs	r2, r2, r3
    4788:	693b      	ldr	r3, [r7, #16]
    478a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    478e:	687a      	ldr	r2, [r7, #4]
    4790:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    4792:	693b      	ldr	r3, [r7, #16]
    4794:	685b      	ldr	r3, [r3, #4]
    4796:	60fb      	str	r3, [r7, #12]
    4798:	f64c 13b8 	movw	r3, #51640	; 0xc9b8
    479c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47a0:	61bb      	str	r3, [r7, #24]
    47a2:	e002      	b.n	47aa <pvPortMalloc+0x146>
    47a4:	69bb      	ldr	r3, [r7, #24]
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	61bb      	str	r3, [r7, #24]
    47aa:	69bb      	ldr	r3, [r7, #24]
    47ac:	681b      	ldr	r3, [r3, #0]
    47ae:	685a      	ldr	r2, [r3, #4]
    47b0:	68fb      	ldr	r3, [r7, #12]
    47b2:	429a      	cmp	r2, r3
    47b4:	d3f6      	bcc.n	47a4 <pvPortMalloc+0x140>
    47b6:	69bb      	ldr	r3, [r7, #24]
    47b8:	681a      	ldr	r2, [r3, #0]
    47ba:	693b      	ldr	r3, [r7, #16]
    47bc:	601a      	str	r2, [r3, #0]
    47be:	69bb      	ldr	r3, [r7, #24]
    47c0:	693a      	ldr	r2, [r7, #16]
    47c2:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    47c4:	f240 0330 	movw	r3, #48	; 0x30
    47c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47cc:	681a      	ldr	r2, [r3, #0]
    47ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47d0:	685b      	ldr	r3, [r3, #4]
    47d2:	1ad2      	subs	r2, r2, r3
    47d4:	f240 0330 	movw	r3, #48	; 0x30
    47d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47dc:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    47de:	f7ff f92d 	bl	3a3c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    47e2:	69fb      	ldr	r3, [r7, #28]
}
    47e4:	4618      	mov	r0, r3
    47e6:	3728      	adds	r7, #40	; 0x28
    47e8:	46bd      	mov	sp, r7
    47ea:	bd80      	pop	{r7, pc}

000047ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b086      	sub	sp, #24
    47f0:	af00      	add	r7, sp, #0
    47f2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    47f8:	687b      	ldr	r3, [r7, #4]
    47fa:	2b00      	cmp	r3, #0
    47fc:	d030      	beq.n	4860 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    47fe:	2310      	movs	r3, #16
    4800:	425b      	negs	r3, r3
    4802:	693a      	ldr	r2, [r7, #16]
    4804:	4413      	add	r3, r2
    4806:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    4808:	693b      	ldr	r3, [r7, #16]
    480a:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    480c:	f7ff f904 	bl	3a18 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	685b      	ldr	r3, [r3, #4]
    4814:	60bb      	str	r3, [r7, #8]
    4816:	f64c 13b8 	movw	r3, #51640	; 0xc9b8
    481a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    481e:	617b      	str	r3, [r7, #20]
    4820:	e002      	b.n	4828 <vPortFree+0x3c>
    4822:	697b      	ldr	r3, [r7, #20]
    4824:	681b      	ldr	r3, [r3, #0]
    4826:	617b      	str	r3, [r7, #20]
    4828:	697b      	ldr	r3, [r7, #20]
    482a:	681b      	ldr	r3, [r3, #0]
    482c:	685a      	ldr	r2, [r3, #4]
    482e:	68bb      	ldr	r3, [r7, #8]
    4830:	429a      	cmp	r2, r3
    4832:	d3f6      	bcc.n	4822 <vPortFree+0x36>
    4834:	697b      	ldr	r3, [r7, #20]
    4836:	681a      	ldr	r2, [r3, #0]
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	601a      	str	r2, [r3, #0]
    483c:	697b      	ldr	r3, [r7, #20]
    483e:	68fa      	ldr	r2, [r7, #12]
    4840:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    4842:	68fb      	ldr	r3, [r7, #12]
    4844:	685a      	ldr	r2, [r3, #4]
    4846:	f240 0330 	movw	r3, #48	; 0x30
    484a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    484e:	681b      	ldr	r3, [r3, #0]
    4850:	441a      	add	r2, r3
    4852:	f240 0330 	movw	r3, #48	; 0x30
    4856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    485a:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    485c:	f7ff f8ee 	bl	3a3c <xTaskResumeAll>
	}
}
    4860:	3718      	adds	r7, #24
    4862:	46bd      	mov	sp, r7
    4864:	bd80      	pop	{r7, pc}
    4866:	bf00      	nop

00004868 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4868:	b480      	push	{r7}
    486a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    486c:	f240 0330 	movw	r3, #48	; 0x30
    4870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4874:	681b      	ldr	r3, [r3, #0]
}
    4876:	4618      	mov	r0, r3
    4878:	46bd      	mov	sp, r7
    487a:	f85d 7b04 	ldr.w	r7, [sp], #4
    487e:	4770      	bx	lr

00004880 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4880:	b480      	push	{r7}
    4882:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    4884:	46bd      	mov	sp, r7
    4886:	f85d 7b04 	ldr.w	r7, [sp], #4
    488a:	4770      	bx	lr

0000488c <prv_mode_get_current_mode>:

static prv_tick_t modestart; // record the real time of mode start
static ps_mode_t current_mode;

ps_mode_t prv_mode_get_current_mode()
{
    488c:	b480      	push	{r7}
    488e:	af00      	add	r7, sp, #0
    return current_mode;
    4890:	f64c 13f4 	movw	r3, #51700	; 0xc9f4
    4894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4898:	681b      	ldr	r3, [r3, #0]
}
    489a:	4618      	mov	r0, r3
    489c:	46bd      	mov	sp, r7
    489e:	f85d 7b04 	ldr.w	r7, [sp], #4
    48a2:	4770      	bx	lr

000048a4 <prv_mode_get_modestart>:

prv_tick_t prv_mode_get_modestart()
{
    48a4:	b480      	push	{r7}
    48a6:	af00      	add	r7, sp, #0
	return modestart;
    48a8:	f64c 13f0 	movw	r3, #51696	; 0xc9f0
    48ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48b0:	681b      	ldr	r3, [r3, #0]
}
    48b2:	4618      	mov	r0, r3
    48b4:	46bd      	mov	sp, r7
    48b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    48ba:	4770      	bx	lr

000048bc <prv_mode_set_modestart>:

void prv_mode_set_modestart(prv_tick_t t)
{
    48bc:	b480      	push	{r7}
    48be:	b083      	sub	sp, #12
    48c0:	af00      	add	r7, sp, #0
    48c2:	6078      	str	r0, [r7, #4]
	// t is the period of current mode
	modestart = t;
    48c4:	f64c 13f0 	movw	r3, #51696	; 0xc9f0
    48c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48cc:	687a      	ldr	r2, [r7, #4]
    48ce:	601a      	str	r2, [r3, #0]
}
    48d0:	370c      	adds	r7, #12
    48d2:	46bd      	mov	sp, r7
    48d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48d8:	4770      	bx	lr
    48da:	bf00      	nop

000048dc <prv_mode_is_period_end>:

int prv_mode_is_period_end()
{
    48dc:	b580      	push	{r7, lr}
    48de:	b082      	sub	sp, #8
    48e0:	af00      	add	r7, sp, #0
	prv_tick_t realtime = port_get_current_time();
    48e2:	f7ff f943 	bl	3b6c <xTaskGetTickCount>
    48e6:	4603      	mov	r3, r0
    48e8:	607b      	str	r3, [r7, #4]
	if(realtime == prv_mode_get_period(current_mode) + modestart){
    48ea:	f64c 13f4 	movw	r3, #51700	; 0xc9f4
    48ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48f2:	681b      	ldr	r3, [r3, #0]
    48f4:	685a      	ldr	r2, [r3, #4]
    48f6:	f64c 13f0 	movw	r3, #51696	; 0xc9f0
    48fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48fe:	681b      	ldr	r3, [r3, #0]
    4900:	441a      	add	r2, r3
    4902:	687b      	ldr	r3, [r7, #4]
    4904:	429a      	cmp	r2, r3
    4906:	d101      	bne.n	490c <prv_mode_is_period_end+0x30>
		return 1;
    4908:	2301      	movs	r3, #1
    490a:	e000      	b.n	490e <prv_mode_is_period_end+0x32>
	}else{
		return 0;
    490c:	2300      	movs	r3, #0
	}
}
    490e:	4618      	mov	r0, r3
    4910:	3708      	adds	r7, #8
    4912:	46bd      	mov	sp, r7
    4914:	bd80      	pop	{r7, pc}
    4916:	bf00      	nop

00004918 <ps_mode_create>:

void ps_mode_create(prv_id_t mid, prv_num_t num, ps_task_t task_array[])
{
    4918:	b590      	push	{r4, r7, lr}
    491a:	b089      	sub	sp, #36	; 0x24
    491c:	af00      	add	r7, sp, #0
    491e:	60f8      	str	r0, [r7, #12]
    4920:	60b9      	str	r1, [r7, #8]
    4922:	607a      	str	r2, [r7, #4]
    int i;
	int i_gcd = 0 , i_lcm = 1;
    4924:	2300      	movs	r3, #0
    4926:	61bb      	str	r3, [r7, #24]
    4928:	2301      	movs	r3, #1
    492a:	617b      	str	r3, [r7, #20]
	marray.modes[mid] = (ps_mode_t)port_malloc(sizeof(struct mode));
    492c:	2010      	movs	r0, #16
    492e:	f7ff fe99 	bl	4664 <pvPortMalloc>
    4932:	4601      	mov	r1, r0
    4934:	f64c 12d0 	movw	r2, #51664	; 0xc9d0
    4938:	f2c2 0200 	movt	r2, #8192	; 0x2000
    493c:	68fb      	ldr	r3, [r7, #12]
    493e:	009b      	lsls	r3, r3, #2
    4940:	4413      	add	r3, r2
    4942:	6059      	str	r1, [r3, #4]
	marray.modes[mid]->tasks = (prv_list_t *)port_malloc(sizeof(struct list));
    4944:	f64c 12d0 	movw	r2, #51664	; 0xc9d0
    4948:	f2c2 0200 	movt	r2, #8192	; 0x2000
    494c:	68fb      	ldr	r3, [r7, #12]
    494e:	009b      	lsls	r3, r3, #2
    4950:	4413      	add	r3, r2
    4952:	685c      	ldr	r4, [r3, #4]
    4954:	2010      	movs	r0, #16
    4956:	f7ff fe85 	bl	4664 <pvPortMalloc>
    495a:	4603      	mov	r3, r0
    495c:	60e3      	str	r3, [r4, #12]

    marray.modes[mid]->mid = mid;
    495e:	f64c 12d0 	movw	r2, #51664	; 0xc9d0
    4962:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4966:	68fb      	ldr	r3, [r7, #12]
    4968:	009b      	lsls	r3, r3, #2
    496a:	4413      	add	r3, r2
    496c:	685b      	ldr	r3, [r3, #4]
    496e:	68fa      	ldr	r2, [r7, #12]
    4970:	601a      	str	r2, [r3, #0]
    for(i=0;i<num;++i){
    4972:	2300      	movs	r3, #0
    4974:	61fb      	str	r3, [r7, #28]
    4976:	e02a      	b.n	49ce <ps_mode_create+0xb6>
		prv_list_insert(task_array[i], marray.modes[mid]->tasks);
    4978:	69fb      	ldr	r3, [r7, #28]
    497a:	009b      	lsls	r3, r3, #2
    497c:	687a      	ldr	r2, [r7, #4]
    497e:	4413      	add	r3, r2
    4980:	6819      	ldr	r1, [r3, #0]
    4982:	f64c 12d0 	movw	r2, #51664	; 0xc9d0
    4986:	f2c2 0200 	movt	r2, #8192	; 0x2000
    498a:	68fb      	ldr	r3, [r7, #12]
    498c:	009b      	lsls	r3, r3, #2
    498e:	4413      	add	r3, r2
    4990:	685b      	ldr	r3, [r3, #4]
    4992:	68db      	ldr	r3, [r3, #12]
    4994:	4608      	mov	r0, r1
    4996:	4619      	mov	r1, r3
    4998:	f000 ff5a 	bl	5850 <prv_list_insert>
		i_gcd = gcd(task_array[i]->period, i_gcd);
    499c:	69fb      	ldr	r3, [r7, #28]
    499e:	009b      	lsls	r3, r3, #2
    49a0:	687a      	ldr	r2, [r7, #4]
    49a2:	4413      	add	r3, r2
    49a4:	681b      	ldr	r3, [r3, #0]
    49a6:	689b      	ldr	r3, [r3, #8]
    49a8:	4618      	mov	r0, r3
    49aa:	69b9      	ldr	r1, [r7, #24]
    49ac:	f001 fa30 	bl	5e10 <gcd>
    49b0:	61b8      	str	r0, [r7, #24]
		i_lcm = lcm(task_array[i]->period, i_lcm);
    49b2:	69fb      	ldr	r3, [r7, #28]
    49b4:	009b      	lsls	r3, r3, #2
    49b6:	687a      	ldr	r2, [r7, #4]
    49b8:	4413      	add	r3, r2
    49ba:	681b      	ldr	r3, [r3, #0]
    49bc:	689b      	ldr	r3, [r3, #8]
    49be:	4618      	mov	r0, r3
    49c0:	6979      	ldr	r1, [r7, #20]
    49c2:	f001 fa41 	bl	5e48 <lcm>
    49c6:	6178      	str	r0, [r7, #20]
	int i_gcd = 0 , i_lcm = 1;
	marray.modes[mid] = (ps_mode_t)port_malloc(sizeof(struct mode));
	marray.modes[mid]->tasks = (prv_list_t *)port_malloc(sizeof(struct list));

    marray.modes[mid]->mid = mid;
    for(i=0;i<num;++i){
    49c8:	69fb      	ldr	r3, [r7, #28]
    49ca:	3301      	adds	r3, #1
    49cc:	61fb      	str	r3, [r7, #28]
    49ce:	69fa      	ldr	r2, [r7, #28]
    49d0:	68bb      	ldr	r3, [r7, #8]
    49d2:	429a      	cmp	r2, r3
    49d4:	dbd0      	blt.n	4978 <ps_mode_create+0x60>
		prv_list_insert(task_array[i], marray.modes[mid]->tasks);
		i_gcd = gcd(task_array[i]->period, i_gcd);
		i_lcm = lcm(task_array[i]->period, i_lcm);

    }
	marray.modes[mid]->period	= i_lcm;
    49d6:	f64c 12d0 	movw	r2, #51664	; 0xc9d0
    49da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    49de:	68fb      	ldr	r3, [r7, #12]
    49e0:	009b      	lsls	r3, r3, #2
    49e2:	4413      	add	r3, r2
    49e4:	685b      	ldr	r3, [r3, #4]
    49e6:	697a      	ldr	r2, [r7, #20]
    49e8:	605a      	str	r2, [r3, #4]
	marray.modes[mid]->unit	= i_gcd;
    49ea:	f64c 12d0 	movw	r2, #51664	; 0xc9d0
    49ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    49f2:	68fb      	ldr	r3, [r7, #12]
    49f4:	009b      	lsls	r3, r3, #2
    49f6:	4413      	add	r3, r2
    49f8:	685b      	ldr	r3, [r3, #4]
    49fa:	69ba      	ldr	r2, [r7, #24]
    49fc:	609a      	str	r2, [r3, #8]

	marray.num ++;
    49fe:	f64c 13d0 	movw	r3, #51664	; 0xc9d0
    4a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a06:	681b      	ldr	r3, [r3, #0]
    4a08:	1c5a      	adds	r2, r3, #1
    4a0a:	f64c 13d0 	movw	r3, #51664	; 0xc9d0
    4a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a12:	601a      	str	r2, [r3, #0]
}
    4a14:	3724      	adds	r7, #36	; 0x24
    4a16:	46bd      	mov	sp, r7
    4a18:	bd90      	pop	{r4, r7, pc}
    4a1a:	bf00      	nop

00004a1c <ps_mode_switch_create>:


void ps_mode_switch_create(bool (*condition)(void), prv_id_t target)
{
    4a1c:	b580      	push	{r7, lr}
    4a1e:	b084      	sub	sp, #16
    4a20:	af00      	add	r7, sp, #0
    4a22:	6078      	str	r0, [r7, #4]
    4a24:	6039      	str	r1, [r7, #0]
    int num = carray.num;
    4a26:	f64c 13dc 	movw	r3, #51676	; 0xc9dc
    4a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a2e:	681b      	ldr	r3, [r3, #0]
    4a30:	60fb      	str	r3, [r7, #12]
	carray.conditions[num] = (ps_mode_condition_t)port_malloc(sizeof(struct condition));
    4a32:	2008      	movs	r0, #8
    4a34:	f7ff fe16 	bl	4664 <pvPortMalloc>
    4a38:	4601      	mov	r1, r0
    4a3a:	f64c 12dc 	movw	r2, #51676	; 0xc9dc
    4a3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a42:	68fb      	ldr	r3, [r7, #12]
    4a44:	009b      	lsls	r3, r3, #2
    4a46:	4413      	add	r3, r2
    4a48:	6059      	str	r1, [r3, #4]
    carray.conditions[num]->mid= target;
    4a4a:	f64c 12dc 	movw	r2, #51676	; 0xc9dc
    4a4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a52:	68fb      	ldr	r3, [r7, #12]
    4a54:	009b      	lsls	r3, r3, #2
    4a56:	4413      	add	r3, r2
    4a58:	685b      	ldr	r3, [r3, #4]
    4a5a:	683a      	ldr	r2, [r7, #0]
    4a5c:	601a      	str	r2, [r3, #0]
    carray.conditions[num]->condition = condition;
    4a5e:	f64c 12dc 	movw	r2, #51676	; 0xc9dc
    4a62:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a66:	68fb      	ldr	r3, [r7, #12]
    4a68:	009b      	lsls	r3, r3, #2
    4a6a:	4413      	add	r3, r2
    4a6c:	685b      	ldr	r3, [r3, #4]
    4a6e:	687a      	ldr	r2, [r7, #4]
    4a70:	605a      	str	r2, [r3, #4]
    carray.num ++;
    4a72:	f64c 13dc 	movw	r3, #51676	; 0xc9dc
    4a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a7a:	681b      	ldr	r3, [r3, #0]
    4a7c:	1c5a      	adds	r2, r3, #1
    4a7e:	f64c 13dc 	movw	r3, #51676	; 0xc9dc
    4a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a86:	601a      	str	r2, [r3, #0]
}
    4a88:	3710      	adds	r7, #16
    4a8a:	46bd      	mov	sp, r7
    4a8c:	bd80      	pop	{r7, pc}
    4a8e:	bf00      	nop

00004a90 <prv_mode_switch>:

// being invoked at the end of mode period
void prv_mode_switch()
{
    4a90:	b580      	push	{r7, lr}
    4a92:	b082      	sub	sp, #8
    4a94:	af00      	add	r7, sp, #0
	int i, tmp;
	for( i = 0; i < carray.num; ++i ){
    4a96:	2300      	movs	r3, #0
    4a98:	607b      	str	r3, [r7, #4]
    4a9a:	e026      	b.n	4aea <prv_mode_switch+0x5a>
		if( (tmp = carray.conditions[i]->condition()) == 1){
    4a9c:	f64c 12dc 	movw	r2, #51676	; 0xc9dc
    4aa0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4aa4:	687b      	ldr	r3, [r7, #4]
    4aa6:	009b      	lsls	r3, r3, #2
    4aa8:	4413      	add	r3, r2
    4aaa:	685b      	ldr	r3, [r3, #4]
    4aac:	685b      	ldr	r3, [r3, #4]
    4aae:	4798      	blx	r3
    4ab0:	6038      	str	r0, [r7, #0]
    4ab2:	683b      	ldr	r3, [r7, #0]
    4ab4:	2b01      	cmp	r3, #1
    4ab6:	d115      	bne.n	4ae4 <prv_mode_switch+0x54>
			current_mode = marray.modes[carray.conditions[i]->mid];
    4ab8:	f64c 12dc 	movw	r2, #51676	; 0xc9dc
    4abc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ac0:	687b      	ldr	r3, [r7, #4]
    4ac2:	009b      	lsls	r3, r3, #2
    4ac4:	4413      	add	r3, r2
    4ac6:	685b      	ldr	r3, [r3, #4]
    4ac8:	681b      	ldr	r3, [r3, #0]
    4aca:	f64c 12d0 	movw	r2, #51664	; 0xc9d0
    4ace:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ad2:	009b      	lsls	r3, r3, #2
    4ad4:	4413      	add	r3, r2
    4ad6:	685a      	ldr	r2, [r3, #4]
    4ad8:	f64c 13f4 	movw	r3, #51700	; 0xc9f4
    4adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae0:	601a      	str	r2, [r3, #0]
			return;
    4ae2:	e014      	b.n	4b0e <prv_mode_switch+0x7e>

// being invoked at the end of mode period
void prv_mode_switch()
{
	int i, tmp;
	for( i = 0; i < carray.num; ++i ){
    4ae4:	687b      	ldr	r3, [r7, #4]
    4ae6:	3301      	adds	r3, #1
    4ae8:	607b      	str	r3, [r7, #4]
    4aea:	f64c 13dc 	movw	r3, #51676	; 0xc9dc
    4aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af2:	681a      	ldr	r2, [r3, #0]
    4af4:	687b      	ldr	r3, [r7, #4]
    4af6:	429a      	cmp	r2, r3
    4af8:	dcd0      	bgt.n	4a9c <prv_mode_switch+0xc>
			current_mode = marray.modes[carray.conditions[i]->mid];
			return;
		}
	}
	// no mode switch happens
	current_mode = marray.modes[0];
    4afa:	f64c 13d0 	movw	r3, #51664	; 0xc9d0
    4afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b02:	685a      	ldr	r2, [r3, #4]
    4b04:	f64c 13f4 	movw	r3, #51700	; 0xc9f4
    4b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b0c:	601a      	str	r2, [r3, #0]

}
    4b0e:	3708      	adds	r7, #8
    4b10:	46bd      	mov	sp, r7
    4b12:	bd80      	pop	{r7, pc}

00004b14 <ps_task_create>:

ps_task_t  ps_task_create(prv_id_t		tid,
							prv_tick_t		let,
							prv_num_t		num,
							ps_servant_t	servants[])
{
    4b14:	b590      	push	{r4, r7, lr}
    4b16:	b087      	sub	sp, #28
    4b18:	af00      	add	r7, sp, #0
    4b1a:	60f8      	str	r0, [r7, #12]
    4b1c:	60b9      	str	r1, [r7, #8]
    4b1e:	607a      	str	r2, [r7, #4]
    4b20:	603b      	str	r3, [r7, #0]
    int i;
	tasks[tid] = (ps_task_t)port_malloc(sizeof(struct ptask));
    4b22:	2014      	movs	r0, #20
    4b24:	f7ff fd9e 	bl	4664 <pvPortMalloc>
    4b28:	4601      	mov	r1, r0
    4b2a:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    4b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b32:	68fa      	ldr	r2, [r7, #12]
    4b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	tasks[tid]->servants = (prv_list_t *)port_malloc(sizeof(prv_list_t));
    4b38:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    4b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b40:	68fa      	ldr	r2, [r7, #12]
    4b42:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    4b46:	2010      	movs	r0, #16
    4b48:	f7ff fd8c 	bl	4664 <pvPortMalloc>
    4b4c:	4603      	mov	r3, r0
    4b4e:	6123      	str	r3, [r4, #16]
	tasks[tid]->tid = tid;
    4b50:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    4b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b58:	68fa      	ldr	r2, [r7, #12]
    4b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4b5e:	68fa      	ldr	r2, [r7, #12]
    4b60:	601a      	str	r2, [r3, #0]
	tasks[tid]->let = tasks[tid]->period = tasks[tid]->deadline = let;
    4b62:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    4b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b6a:	68fa      	ldr	r2, [r7, #12]
    4b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    4b70:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    4b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b78:	68fa      	ldr	r2, [r7, #12]
    4b7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4b7e:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    4b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b86:	68f8      	ldr	r0, [r7, #12]
    4b88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4b8c:	68b8      	ldr	r0, [r7, #8]
    4b8e:	60d8      	str	r0, [r3, #12]
    4b90:	68db      	ldr	r3, [r3, #12]
    4b92:	6093      	str	r3, [r2, #8]
    4b94:	6893      	ldr	r3, [r2, #8]
    4b96:	604b      	str	r3, [r1, #4]

    for(i=0;i<num;++i){
    4b98:	2300      	movs	r3, #0
    4b9a:	617b      	str	r3, [r7, #20]
    4b9c:	e01a      	b.n	4bd4 <ps_task_create+0xc0>
		prv_list_insert(servants[i], tasks[tid]->servants);
    4b9e:	697b      	ldr	r3, [r7, #20]
    4ba0:	009b      	lsls	r3, r3, #2
    4ba2:	683a      	ldr	r2, [r7, #0]
    4ba4:	4413      	add	r3, r2
    4ba6:	681a      	ldr	r2, [r3, #0]
    4ba8:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    4bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb0:	68f9      	ldr	r1, [r7, #12]
    4bb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4bb6:	691b      	ldr	r3, [r3, #16]
    4bb8:	4610      	mov	r0, r2
    4bba:	4619      	mov	r1, r3
    4bbc:	f000 fe48 	bl	5850 <prv_list_insert>
		servants[i]->tid = tid;
    4bc0:	697b      	ldr	r3, [r7, #20]
    4bc2:	009b      	lsls	r3, r3, #2
    4bc4:	683a      	ldr	r2, [r7, #0]
    4bc6:	4413      	add	r3, r2
    4bc8:	681b      	ldr	r3, [r3, #0]
    4bca:	68fa      	ldr	r2, [r7, #12]
    4bcc:	60da      	str	r2, [r3, #12]
	tasks[tid] = (ps_task_t)port_malloc(sizeof(struct ptask));
	tasks[tid]->servants = (prv_list_t *)port_malloc(sizeof(prv_list_t));
	tasks[tid]->tid = tid;
	tasks[tid]->let = tasks[tid]->period = tasks[tid]->deadline = let;

    for(i=0;i<num;++i){
    4bce:	697b      	ldr	r3, [r7, #20]
    4bd0:	3301      	adds	r3, #1
    4bd2:	617b      	str	r3, [r7, #20]
    4bd4:	697a      	ldr	r2, [r7, #20]
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	429a      	cmp	r2, r3
    4bda:	dbe0      	blt.n	4b9e <ps_task_create+0x8a>
		prv_list_insert(servants[i], tasks[tid]->servants);
		servants[i]->tid = tid;
    }

    return tasks[tid];
    4bdc:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    4be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be4:	68fa      	ldr	r2, [r7, #12]
    4be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
    4bea:	4618      	mov	r0, r3
    4bec:	371c      	adds	r7, #28
    4bee:	46bd      	mov	sp, r7
    4bf0:	bd90      	pop	{r4, r7, pc}
    4bf2:	bf00      	nop

00004bf4 <ps_servant_create>:
									prv_stype_t type,
                                    prv_tick_t wcet,
                                    prv_num_t  num,   /* number of elements in src_array */
                                    ps_servant_t src_array[],
                                    void (*runnable)(void *))
{
    4bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4bf8:	b091      	sub	sp, #68	; 0x44
    4bfa:	af04      	add	r7, sp, #16
    4bfc:	60f8      	str	r0, [r7, #12]
    4bfe:	60b9      	str	r1, [r7, #8]
    4c00:	607a      	str	r2, [r7, #4]
    4c02:	603b      	str	r3, [r7, #0]
    4c04:	466b      	mov	r3, sp
    4c06:	461e      	mov	r6, r3
    int i;
	char ch[10];
	ps_message_t message[num];
    4c08:	6839      	ldr	r1, [r7, #0]
    4c0a:	1e4b      	subs	r3, r1, #1
    4c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    4c0e:	460b      	mov	r3, r1
    4c10:	461a      	mov	r2, r3
    4c12:	f04f 0300 	mov.w	r3, #0
    4c16:	ea4f 1943 	mov.w	r9, r3, lsl #5
    4c1a:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
    4c1e:	ea4f 1842 	mov.w	r8, r2, lsl #5
    4c22:	460b      	mov	r3, r1
    4c24:	461a      	mov	r2, r3
    4c26:	f04f 0300 	mov.w	r3, #0
    4c2a:	015d      	lsls	r5, r3, #5
    4c2c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    4c30:	0154      	lsls	r4, r2, #5
    4c32:	460b      	mov	r3, r1
    4c34:	009b      	lsls	r3, r3, #2
    4c36:	3303      	adds	r3, #3
    4c38:	3307      	adds	r3, #7
    4c3a:	08db      	lsrs	r3, r3, #3
    4c3c:	00db      	lsls	r3, r3, #3
    4c3e:	ebad 0d03 	sub.w	sp, sp, r3
    4c42:	ab04      	add	r3, sp, #16
    4c44:	3303      	adds	r3, #3
    4c46:	089b      	lsrs	r3, r3, #2
    4c48:	009b      	lsls	r3, r3, #2
    4c4a:	627b      	str	r3, [r7, #36]	; 0x24
	servants[sid] = (ps_servant_t)port_malloc(sizeof(struct servant));
    4c4c:	2014      	movs	r0, #20
    4c4e:	f7ff fd09 	bl	4664 <pvPortMalloc>
    4c52:	4601      	mov	r1, r0
    4c54:	f64c 2388 	movw	r3, #51848	; 0xca88
    4c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c5c:	68fa      	ldr	r2, [r7, #12]
    4c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ps_servant_t s = servants[sid];
    4c62:	f64c 2388 	movw	r3, #51848	; 0xca88
    4c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c6a:	68fa      	ldr	r2, [r7, #12]
    4c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4c70:	623b      	str	r3, [r7, #32]
	port_semph_create ( sem[sid] );
    4c72:	2001      	movs	r0, #1
    4c74:	2100      	movs	r1, #0
    4c76:	2203      	movs	r2, #3
    4c78:	f7fd ff70 	bl	2b5c <xQueueGenericCreate>
    4c7c:	4601      	mov	r1, r0
    4c7e:	f64c 2308 	movw	r3, #51720	; 0xca08
    4c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c86:	68fa      	ldr	r2, [r7, #12]
    4c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    4c8c:	f64c 2308 	movw	r3, #51720	; 0xca08
    4c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c94:	68fa      	ldr	r2, [r7, #12]
    4c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d00c      	beq.n	4cb8 <ps_servant_create+0xc4>
    4c9e:	f64c 2308 	movw	r3, #51720	; 0xca08
    4ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca6:	68fa      	ldr	r2, [r7, #12]
    4ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4cac:	4618      	mov	r0, r3
    4cae:	2100      	movs	r1, #0
    4cb0:	2200      	movs	r2, #0
    4cb2:	2300      	movs	r3, #0
    4cb4:	f7fd ffe0 	bl	2c78 <xQueueGenericSend>
    4cb8:	f64c 2308 	movw	r3, #51720	; 0xca08
    4cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cc0:	68fa      	ldr	r2, [r7, #12]
    4cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4cc6:	4618      	mov	r0, r3
    4cc8:	2100      	movs	r1, #0
    4cca:	f04f 32ff 	mov.w	r2, #4294967295
    4cce:	2300      	movs	r3, #0
    4cd0:	f7fe f898 	bl	2e04 <xQueueGenericReceive>
	prv_hashtable_t * ht = prv_hashtable_new();  // memory allocated in heap
    4cd4:	f001 f972 	bl	5fbc <prv_hashtable_new>
    4cd8:	61f8      	str	r0, [r7, #28]

	s->sid  = sid;
    4cda:	6a3b      	ldr	r3, [r7, #32]
    4cdc:	68fa      	ldr	r2, [r7, #12]
    4cde:	601a      	str	r2, [r3, #0]
    s->type = type;
    4ce0:	6a3b      	ldr	r3, [r7, #32]
    4ce2:	68ba      	ldr	r2, [r7, #8]
    4ce4:	605a      	str	r2, [r3, #4]
    s->wcet = wcet;
    4ce6:	6a3b      	ldr	r3, [r7, #32]
    4ce8:	687a      	ldr	r2, [r7, #4]
    4cea:	609a      	str	r2, [r3, #8]
	s->inbox = ht;
    4cec:	6a3b      	ldr	r3, [r7, #32]
    4cee:	69fa      	ldr	r2, [r7, #28]
    4cf0:	611a      	str	r2, [r3, #16]

    port_servant_create(runnable, &s->sid, 2);
    4cf2:	6a3b      	ldr	r3, [r7, #32]
    4cf4:	2202      	movs	r2, #2
    4cf6:	9200      	str	r2, [sp, #0]
    4cf8:	2200      	movs	r2, #0
    4cfa:	9201      	str	r2, [sp, #4]
    4cfc:	2200      	movs	r2, #0
    4cfe:	9202      	str	r2, [sp, #8]
    4d00:	2200      	movs	r2, #0
    4d02:	9203      	str	r2, [sp, #12]
    4d04:	6d78      	ldr	r0, [r7, #84]	; 0x54
    4d06:	2100      	movs	r1, #0
    4d08:	2280      	movs	r2, #128	; 0x80
    4d0a:	f7fe fac7 	bl	329c <xTaskGenericCreate>

    for(i = 0; i < num; ++ i){
    4d0e:	2300      	movs	r3, #0
    4d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    4d12:	e035      	b.n	4d80 <ps_servant_create+0x18c>
		prv_ef_add_relation(src_array[i], s);   // construct topological graph
    4d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4d16:	009b      	lsls	r3, r3, #2
    4d18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4d1a:	4413      	add	r3, r2
    4d1c:	681b      	ldr	r3, [r3, #0]
    4d1e:	4618      	mov	r0, r3
    4d20:	6a39      	ldr	r1, [r7, #32]
    4d22:	f000 f95f 	bl	4fe4 <prv_ef_add_relation>
		message[i] = port_malloc(sizeof(struct message));   // init the inbox of each servant
    4d26:	200c      	movs	r0, #12
    4d28:	f7ff fc9c 	bl	4664 <pvPortMalloc>
    4d2c:	4601      	mov	r1, r0
    4d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		message[i]->data = 0;
    4d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4d3e:	2200      	movs	r2, #0
    4d40:	609a      	str	r2, [r3, #8]
		message[i]->source = src_array[i];
    4d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4d4c:	0092      	lsls	r2, r2, #2
    4d4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
    4d50:	440a      	add	r2, r1
    4d52:	6812      	ldr	r2, [r2, #0]
    4d54:	601a      	str	r2, [r3, #0]
		message[i]->destination = s;
    4d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4d5e:	6a3a      	ldr	r2, [r7, #32]
    4d60:	605a      	str	r2, [r3, #4]
		itoa(src_array[i]->sid, ch);
    4d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4d64:	009b      	lsls	r3, r3, #2
    4d66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4d68:	4413      	add	r3, r2
    4d6a:	681b      	ldr	r3, [r3, #0]
    4d6c:	681a      	ldr	r2, [r3, #0]
    4d6e:	f107 0310 	add.w	r3, r7, #16
    4d72:	4610      	mov	r0, r2
    4d74:	4619      	mov	r1, r3
    4d76:	f001 f87b 	bl	5e70 <itoa>
    s->wcet = wcet;
	s->inbox = ht;

    port_servant_create(runnable, &s->sid, 2);

    for(i = 0; i < num; ++ i){
    4d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4d7c:	3301      	adds	r3, #1
    4d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    4d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4d82:	683b      	ldr	r3, [r7, #0]
    4d84:	429a      	cmp	r2, r3
    4d86:	dbc5      	blt.n	4d14 <ps_servant_create+0x120>
		//{
		//	port_print("memory allocate failed\n");
		//}
    }

	return s;
    4d88:	6a3b      	ldr	r3, [r7, #32]
    4d8a:	46b5      	mov	sp, r6
}
    4d8c:	4618      	mov	r0, r3
    4d8e:	3734      	adds	r7, #52	; 0x34
    4d90:	46bd      	mov	sp, r7
    4d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4d96:	bf00      	nop

00004d98 <ps_servant_wait>:



void ps_servant_wait(prv_id_t sid)
{
    4d98:	b580      	push	{r7, lr}
    4d9a:	b082      	sub	sp, #8
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	6078      	str	r0, [r7, #4]
	//ps_servant_t s = prv_ef_get_current_servant();
	//prv_id_t  sid = prv_servant_get_id(s);
	port_wait( sem[sid] );
    4da0:	f64c 2308 	movw	r3, #51720	; 0xca08
    4da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da8:	687a      	ldr	r2, [r7, #4]
    4daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4dae:	4618      	mov	r0, r3
    4db0:	2100      	movs	r1, #0
    4db2:	f04f 32ff 	mov.w	r2, #4294967295
    4db6:	2300      	movs	r3, #0
    4db8:	f7fe f824 	bl	2e04 <xQueueGenericReceive>
}
    4dbc:	3708      	adds	r7, #8
    4dbe:	46bd      	mov	sp, r7
    4dc0:	bd80      	pop	{r7, pc}
    4dc2:	bf00      	nop

00004dc4 <ps_servant_wake>:

// not used
void ps_servant_wake( ps_servant_t * s )
{
    4dc4:	b580      	push	{r7, lr}
    4dc6:	b084      	sub	sp, #16
    4dc8:	af00      	add	r7, sp, #0
    4dca:	6078      	str	r0, [r7, #4]
	prv_id_t  sid = prv_servant_get_id(s);
    4dcc:	687b      	ldr	r3, [r7, #4]
    4dce:	681b      	ldr	r3, [r3, #0]
    4dd0:	60fb      	str	r3, [r7, #12]
	port_trigger( sem[sid] );
    4dd2:	f64c 2308 	movw	r3, #51720	; 0xca08
    4dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dda:	68fa      	ldr	r2, [r7, #12]
    4ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4de0:	4618      	mov	r0, r3
    4de2:	2100      	movs	r1, #0
    4de4:	2200      	movs	r2, #0
    4de6:	2300      	movs	r3, #0
    4de8:	f7fd ff46 	bl	2c78 <xQueueGenericSend>
}
    4dec:	3710      	adds	r7, #16
    4dee:	46bd      	mov	sp, r7
    4df0:	bd80      	pop	{r7, pc}
    4df2:	bf00      	nop

00004df4 <ps_servant_send>:

void ps_servant_send( prv_id_t sid, int data, ps_message_t message)
{
    4df4:	b580      	push	{r7, lr}
    4df6:	b088      	sub	sp, #32
    4df8:	af00      	add	r7, sp, #0
    4dfa:	60f8      	str	r0, [r7, #12]
    4dfc:	60b9      	str	r1, [r7, #8]
    4dfe:	607a      	str	r2, [r7, #4]
	char ch[10];
	ps_servant_t send = prv_ef_get_current_servant();
    4e00:	f000 f918 	bl	5034 <prv_ef_get_current_servant>
    4e04:	61f8      	str	r0, [r7, #28]
	itoa(send->sid, ch);
    4e06:	69fb      	ldr	r3, [r7, #28]
    4e08:	681a      	ldr	r2, [r3, #0]
    4e0a:	f107 0310 	add.w	r3, r7, #16
    4e0e:	4610      	mov	r0, r2
    4e10:	4619      	mov	r1, r3
    4e12:	f001 f82d 	bl	5e70 <itoa>
	message->source = send;
    4e16:	687b      	ldr	r3, [r7, #4]
    4e18:	69fa      	ldr	r2, [r7, #28]
    4e1a:	601a      	str	r2, [r3, #0]
	message->destination = servants[sid];
    4e1c:	f64c 2388 	movw	r3, #51848	; 0xca88
    4e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e24:	68fa      	ldr	r2, [r7, #12]
    4e26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	605a      	str	r2, [r3, #4]
	message->data = data;
    4e2e:	687b      	ldr	r3, [r7, #4]
    4e30:	68ba      	ldr	r2, [r7, #8]
    4e32:	609a      	str	r2, [r3, #8]

	prv_hashtable_add(servants[sid]->inbox, ch, message);
    4e34:	f64c 2388 	movw	r3, #51848	; 0xca88
    4e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e3c:	68fa      	ldr	r2, [r7, #12]
    4e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4e42:	691a      	ldr	r2, [r3, #16]
    4e44:	f107 0310 	add.w	r3, r7, #16
    4e48:	4610      	mov	r0, r2
    4e4a:	4619      	mov	r1, r3
    4e4c:	687a      	ldr	r2, [r7, #4]
    4e4e:	2300      	movs	r3, #0
    4e50:	f001 f912 	bl	6078 <prv_hashtable_put>
}
    4e54:	3720      	adds	r7, #32
    4e56:	46bd      	mov	sp, r7
    4e58:	bd80      	pop	{r7, pc}
    4e5a:	bf00      	nop

00004e5c <ps_servant_receive>:

int ps_servant_receive(prv_id_t sid)
{
    4e5c:	b580      	push	{r7, lr}
    4e5e:	b088      	sub	sp, #32
    4e60:	af00      	add	r7, sp, #0
    4e62:	6078      	str	r0, [r7, #4]
	char ch[10];
	itoa(sid, ch);
    4e64:	f107 030c 	add.w	r3, r7, #12
    4e68:	6878      	ldr	r0, [r7, #4]
    4e6a:	4619      	mov	r1, r3
    4e6c:	f001 f800 	bl	5e70 <itoa>
	ps_servant_t s = prv_ef_get_current_servant();
    4e70:	f000 f8e0 	bl	5034 <prv_ef_get_current_servant>
    4e74:	61f8      	str	r0, [r7, #28]
	ps_message_t message = (ps_message_t)prv_hashtable_get(s->inbox, ch);
    4e76:	69fb      	ldr	r3, [r7, #28]
    4e78:	691a      	ldr	r2, [r3, #16]
    4e7a:	f107 030c 	add.w	r3, r7, #12
    4e7e:	4610      	mov	r0, r2
    4e80:	4619      	mov	r1, r3
    4e82:	f001 f971 	bl	6168 <prv_hashtable_get>
    4e86:	61b8      	str	r0, [r7, #24]
	return message->data;
    4e88:	69bb      	ldr	r3, [r7, #24]
    4e8a:	689b      	ldr	r3, [r3, #8]
}
    4e8c:	4618      	mov	r0, r3
    4e8e:	3720      	adds	r7, #32
    4e90:	46bd      	mov	sp, r7
    4e92:	bd80      	pop	{r7, pc}

00004e94 <ps_servant_getsrcnum>:


int ps_servant_getsrcnum()
{
    4e94:	b580      	push	{r7, lr}
    4e96:	b082      	sub	sp, #8
    4e98:	af00      	add	r7, sp, #0
	ps_servant_t s = prv_ef_get_current_servant();
    4e9a:	f000 f8cb 	bl	5034 <prv_ef_get_current_servant>
    4e9e:	6078      	str	r0, [r7, #4]
	prv_list_t * src = prv_ef_get_src_list(s);
    4ea0:	6878      	ldr	r0, [r7, #4]
    4ea2:	f000 f88d 	bl	4fc0 <prv_ef_get_src_list>
    4ea6:	6038      	str	r0, [r7, #0]
	return src->length;
    4ea8:	683b      	ldr	r3, [r7, #0]
    4eaa:	681b      	ldr	r3, [r3, #0]
}
    4eac:	4618      	mov	r0, r3
    4eae:	3708      	adds	r7, #8
    4eb0:	46bd      	mov	sp, r7
    4eb2:	bd80      	pop	{r7, pc}

00004eb4 <ps_servant_getsrcsid>:

int ps_servant_getsrcsid(int index)
{
    4eb4:	b580      	push	{r7, lr}
    4eb6:	b086      	sub	sp, #24
    4eb8:	af00      	add	r7, sp, #0
    4eba:	6078      	str	r0, [r7, #4]
	int i;
	ps_servant_t s = prv_ef_get_current_servant();
    4ebc:	f000 f8ba 	bl	5034 <prv_ef_get_current_servant>
    4ec0:	6138      	str	r0, [r7, #16]
	prv_list_t * src = prv_ef_get_src_list(s);
    4ec2:	6938      	ldr	r0, [r7, #16]
    4ec4:	f000 f87c 	bl	4fc0 <prv_ef_get_src_list>
    4ec8:	60f8      	str	r0, [r7, #12]
	prv_item_t * result = src->first;
    4eca:	68fb      	ldr	r3, [r7, #12]
    4ecc:	685b      	ldr	r3, [r3, #4]
    4ece:	617b      	str	r3, [r7, #20]

	if(index >= src->length){
    4ed0:	68fb      	ldr	r3, [r7, #12]
    4ed2:	681a      	ldr	r2, [r3, #0]
    4ed4:	687b      	ldr	r3, [r7, #4]
    4ed6:	429a      	cmp	r2, r3
    4ed8:	dc02      	bgt.n	4ee0 <ps_servant_getsrcsid+0x2c>
		return -1;
    4eda:	f04f 33ff 	mov.w	r3, #4294967295
    4ede:	e00b      	b.n	4ef8 <ps_servant_getsrcsid+0x44>
	}

	while(index--){
    4ee0:	e002      	b.n	4ee8 <ps_servant_getsrcsid+0x34>
		result = result->next;
    4ee2:	697b      	ldr	r3, [r7, #20]
    4ee4:	689b      	ldr	r3, [r3, #8]
    4ee6:	617b      	str	r3, [r7, #20]

	if(index >= src->length){
		return -1;
	}

	while(index--){
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	1e5a      	subs	r2, r3, #1
    4eec:	607a      	str	r2, [r7, #4]
    4eee:	2b00      	cmp	r3, #0
    4ef0:	d1f7      	bne.n	4ee2 <ps_servant_getsrcsid+0x2e>
		result = result->next;
	}

	return ((ps_servant_t)(result->entity))->sid;
    4ef2:	697b      	ldr	r3, [r7, #20]
    4ef4:	681b      	ldr	r3, [r3, #0]
    4ef6:	681b      	ldr	r3, [r3, #0]
}
    4ef8:	4618      	mov	r0, r3
    4efa:	3718      	adds	r7, #24
    4efc:	46bd      	mov	sp, r7
    4efe:	bd80      	pop	{r7, pc}

00004f00 <ps_servant_get_destnum>:

int ps_servant_get_destnum()
{
    4f00:	b580      	push	{r7, lr}
    4f02:	b082      	sub	sp, #8
    4f04:	af00      	add	r7, sp, #0
	ps_servant_t s = prv_ef_get_current_servant();
    4f06:	f000 f895 	bl	5034 <prv_ef_get_current_servant>
    4f0a:	6078      	str	r0, [r7, #4]
	prv_list_t * dest = prv_ef_get_dest_list(s);
    4f0c:	6878      	ldr	r0, [r7, #4]
    4f0e:	f000 f843 	bl	4f98 <prv_ef_get_dest_list>
    4f12:	6038      	str	r0, [r7, #0]
	return dest->length;
    4f14:	683b      	ldr	r3, [r7, #0]
    4f16:	681b      	ldr	r3, [r3, #0]
}
    4f18:	4618      	mov	r0, r3
    4f1a:	3708      	adds	r7, #8
    4f1c:	46bd      	mov	sp, r7
    4f1e:	bd80      	pop	{r7, pc}

00004f20 <ps_servant_getdestsid>:


int ps_servant_getdestsid(int index)
{
    4f20:	b580      	push	{r7, lr}
    4f22:	b086      	sub	sp, #24
    4f24:	af00      	add	r7, sp, #0
    4f26:	6078      	str	r0, [r7, #4]
	int i;
	ps_servant_t s = prv_ef_get_current_servant();
    4f28:	f000 f884 	bl	5034 <prv_ef_get_current_servant>
    4f2c:	6138      	str	r0, [r7, #16]
	prv_list_t *  dest = prv_ef_get_dest_list(s);
    4f2e:	6938      	ldr	r0, [r7, #16]
    4f30:	f000 f832 	bl	4f98 <prv_ef_get_dest_list>
    4f34:	60f8      	str	r0, [r7, #12]
	prv_item_t * result = dest->first;
    4f36:	68fb      	ldr	r3, [r7, #12]
    4f38:	685b      	ldr	r3, [r3, #4]
    4f3a:	617b      	str	r3, [r7, #20]

	if(index >= dest->length){
    4f3c:	68fb      	ldr	r3, [r7, #12]
    4f3e:	681a      	ldr	r2, [r3, #0]
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	429a      	cmp	r2, r3
    4f44:	dc02      	bgt.n	4f4c <ps_servant_getdestsid+0x2c>
		return -1;
    4f46:	f04f 33ff 	mov.w	r3, #4294967295
    4f4a:	e00b      	b.n	4f64 <ps_servant_getdestsid+0x44>
	}

	while(index--){
    4f4c:	e002      	b.n	4f54 <ps_servant_getdestsid+0x34>
		result = result->next;
    4f4e:	697b      	ldr	r3, [r7, #20]
    4f50:	689b      	ldr	r3, [r3, #8]
    4f52:	617b      	str	r3, [r7, #20]

	if(index >= dest->length){
		return -1;
	}

	while(index--){
    4f54:	687b      	ldr	r3, [r7, #4]
    4f56:	1e5a      	subs	r2, r3, #1
    4f58:	607a      	str	r2, [r7, #4]
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	d1f7      	bne.n	4f4e <ps_servant_getdestsid+0x2e>
		result = result->next;
	}

	return ((ps_servant_t)(result->entity))->sid;
    4f5e:	697b      	ldr	r3, [r7, #20]
    4f60:	681b      	ldr	r3, [r3, #0]
    4f62:	681b      	ldr	r3, [r3, #0]
}
    4f64:	4618      	mov	r0, r3
    4f66:	3718      	adds	r7, #24
    4f68:	46bd      	mov	sp, r7
    4f6a:	bd80      	pop	{r7, pc}

00004f6c <ps_message_create>:
#include "modeltime.h"



ps_message_t ps_message_create( int data )
{
    4f6c:	b580      	push	{r7, lr}
    4f6e:	b084      	sub	sp, #16
    4f70:	af00      	add	r7, sp, #0
    4f72:	6078      	str	r0, [r7, #4]
	ps_message_t  message = port_malloc(sizeof(struct message));
    4f74:	200c      	movs	r0, #12
    4f76:	f7ff fb75 	bl	4664 <pvPortMalloc>
    4f7a:	60f8      	str	r0, [r7, #12]

	ps_servant_t s =  prv_ef_get_current_servant();
    4f7c:	f000 f85a 	bl	5034 <prv_ef_get_current_servant>
    4f80:	60b8      	str	r0, [r7, #8]
	message->source = s;
    4f82:	68fb      	ldr	r3, [r7, #12]
    4f84:	68ba      	ldr	r2, [r7, #8]
    4f86:	601a      	str	r2, [r3, #0]
	message->data = data;
    4f88:	68fb      	ldr	r3, [r7, #12]
    4f8a:	687a      	ldr	r2, [r7, #4]
    4f8c:	609a      	str	r2, [r3, #8]

	return message;
    4f8e:	68fb      	ldr	r3, [r7, #12]
}
    4f90:	4618      	mov	r0, r3
    4f92:	3710      	adds	r7, #16
    4f94:	46bd      	mov	sp, r7
    4f96:	bd80      	pop	{r7, pc}

00004f98 <prv_ef_get_dest_list>:
extern ps_servant_t servants[NUMOFSERVANTS];
extern port_semph_t sem[NUMOFSERVANTS];
extern struct mode_array marray;

prv_list_t * prv_ef_get_dest_list(ps_servant_t s)
{
    4f98:	b480      	push	{r7}
    4f9a:	b083      	sub	sp, #12
    4f9c:	af00      	add	r7, sp, #0
    4f9e:	6078      	str	r0, [r7, #4]
	return &relations[s->sid].out;
    4fa0:	687b      	ldr	r3, [r7, #4]
    4fa2:	681b      	ldr	r3, [r3, #0]
    4fa4:	015b      	lsls	r3, r3, #5
    4fa6:	f103 0210 	add.w	r2, r3, #16
    4faa:	f64c 3308 	movw	r3, #51976	; 0xcb08
    4fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb2:	4413      	add	r3, r2
}
    4fb4:	4618      	mov	r0, r3
    4fb6:	370c      	adds	r7, #12
    4fb8:	46bd      	mov	sp, r7
    4fba:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fbe:	4770      	bx	lr

00004fc0 <prv_ef_get_src_list>:

prv_list_t  * prv_ef_get_src_list(ps_servant_t s)
{
    4fc0:	b480      	push	{r7}
    4fc2:	b083      	sub	sp, #12
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	6078      	str	r0, [r7, #4]
	return &relations[s->sid].in;
    4fc8:	687b      	ldr	r3, [r7, #4]
    4fca:	681b      	ldr	r3, [r3, #0]
    4fcc:	015a      	lsls	r2, r3, #5
    4fce:	f64c 3308 	movw	r3, #51976	; 0xcb08
    4fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fd6:	4413      	add	r3, r2
}
    4fd8:	4618      	mov	r0, r3
    4fda:	370c      	adds	r7, #12
    4fdc:	46bd      	mov	sp, r7
    4fde:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fe2:	4770      	bx	lr

00004fe4 <prv_ef_add_relation>:

void prv_ef_add_relation(ps_servant_t src, ps_servant_t dest)
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b082      	sub	sp, #8
    4fe8:	af00      	add	r7, sp, #0
    4fea:	6078      	str	r0, [r7, #4]
    4fec:	6039      	str	r1, [r7, #0]
	prv_list_insert(dest, prv_ef_get_dest_list(src));
    4fee:	6878      	ldr	r0, [r7, #4]
    4ff0:	f7ff ffd2 	bl	4f98 <prv_ef_get_dest_list>
    4ff4:	4603      	mov	r3, r0
    4ff6:	6838      	ldr	r0, [r7, #0]
    4ff8:	4619      	mov	r1, r3
    4ffa:	f000 fc29 	bl	5850 <prv_list_insert>
	prv_list_insert(src,  prv_ef_get_src_list(dest));
    4ffe:	6838      	ldr	r0, [r7, #0]
    5000:	f7ff ffde 	bl	4fc0 <prv_ef_get_src_list>
    5004:	4603      	mov	r3, r0
    5006:	6878      	ldr	r0, [r7, #4]
    5008:	4619      	mov	r1, r3
    500a:	f000 fc21 	bl	5850 <prv_list_insert>
}
    500e:	3708      	adds	r7, #8
    5010:	46bd      	mov	sp, r7
    5012:	bd80      	pop	{r7, pc}

00005014 <prv_ef_set_current_servant>:

void prv_ef_set_current_servant(ps_servant_t s)
{
    5014:	b480      	push	{r7}
    5016:	b083      	sub	sp, #12
    5018:	af00      	add	r7, sp, #0
    501a:	6078      	str	r0, [r7, #4]
    current_servant = s;
    501c:	f64c 7328 	movw	r3, #53032	; 0xcf28
    5020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5024:	687a      	ldr	r2, [r7, #4]
    5026:	601a      	str	r2, [r3, #0]
}
    5028:	370c      	adds	r7, #12
    502a:	46bd      	mov	sp, r7
    502c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5030:	4770      	bx	lr
    5032:	bf00      	nop

00005034 <prv_ef_get_current_servant>:

ps_servant_t prv_ef_get_current_servant()
{
    5034:	b480      	push	{r7}
    5036:	af00      	add	r7, sp, #0
    return current_servant;
    5038:	f64c 7328 	movw	r3, #53032	; 0xcf28
    503c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5040:	681b      	ldr	r3, [r3, #0]
}
    5042:	4618      	mov	r0, r3
    5044:	46bd      	mov	sp, r7
    5046:	f85d 7b04 	ldr.w	r7, [sp], #4
    504a:	4770      	bx	lr

0000504c <prv_parameter_init>:

// reset the map at the beginning of each mode period
static void prv_parameter_init()
{
    504c:	b480      	push	{r7}
    504e:	b083      	sub	sp, #12
    5050:	af00      	add	r7, sp, #0
	int  i, j;
	for( i = 0; i < NUMOFSERVANTS; ++i ){
    5052:	2300      	movs	r3, #0
    5054:	607b      	str	r3, [r7, #4]
    5056:	e027      	b.n	50a8 <prv_parameter_init+0x5c>
		servant_flags[i] = -1; //1 means in current scheduling list; -1 means not
    5058:	f64c 732c 	movw	r3, #53036	; 0xcf2c
    505c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5060:	687a      	ldr	r2, [r7, #4]
    5062:	f04f 31ff 	mov.w	r1, #4294967295
    5066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		indegrees[i] = 0;
    506a:	f64c 73ac 	movw	r3, #53164	; 0xcfac
    506e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5072:	687a      	ldr	r2, [r7, #4]
    5074:	2100      	movs	r1, #0
    5076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for( j = 0; j < NUMOFSERVANTS; ++j ){
    507a:	2300      	movs	r3, #0
    507c:	603b      	str	r3, [r7, #0]
    507e:	e00d      	b.n	509c <prv_parameter_init+0x50>
			edges[i][j] = 0; // 1 means exist edges; 0 means not
    5080:	f24d 032c 	movw	r3, #53292	; 0xd02c
    5084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5088:	687a      	ldr	r2, [r7, #4]
    508a:	0151      	lsls	r1, r2, #5
    508c:	683a      	ldr	r2, [r7, #0]
    508e:	440a      	add	r2, r1
    5090:	2100      	movs	r1, #0
    5092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
{
	int  i, j;
	for( i = 0; i < NUMOFSERVANTS; ++i ){
		servant_flags[i] = -1; //1 means in current scheduling list; -1 means not
		indegrees[i] = 0;
		for( j = 0; j < NUMOFSERVANTS; ++j ){
    5096:	683b      	ldr	r3, [r7, #0]
    5098:	3301      	adds	r3, #1
    509a:	603b      	str	r3, [r7, #0]
    509c:	683b      	ldr	r3, [r7, #0]
    509e:	2b1f      	cmp	r3, #31
    50a0:	ddee      	ble.n	5080 <prv_parameter_init+0x34>

// reset the map at the beginning of each mode period
static void prv_parameter_init()
{
	int  i, j;
	for( i = 0; i < NUMOFSERVANTS; ++i ){
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	3301      	adds	r3, #1
    50a6:	607b      	str	r3, [r7, #4]
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	2b1f      	cmp	r3, #31
    50ac:	ddd4      	ble.n	5058 <prv_parameter_init+0xc>
		indegrees[i] = 0;
		for( j = 0; j < NUMOFSERVANTS; ++j ){
			edges[i][j] = 0; // 1 means exist edges; 0 means not
		}
	}
}
    50ae:	370c      	adds	r7, #12
    50b0:	46bd      	mov	sp, r7
    50b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    50b6:	4770      	bx	lr

000050b8 <prv_ef_edge_add>:

// add edges of the graph by the relation of a servant
static void prv_ef_edge_add(ps_servant_t s)
{
    50b8:	b580      	push	{r7, lr}
    50ba:	b086      	sub	sp, #24
    50bc:	af00      	add	r7, sp, #0
    50be:	6078      	str	r0, [r7, #4]
	int i;
	ps_servant_t current;
	prv_id_t sid = s->sid;
    50c0:	687b      	ldr	r3, [r7, #4]
    50c2:	681b      	ldr	r3, [r3, #0]
    50c4:	613b      	str	r3, [r7, #16]
	// active the servants
	servant_flags[sid] = 1;
    50c6:	f64c 732c 	movw	r3, #53036	; 0xcf2c
    50ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ce:	693a      	ldr	r2, [r7, #16]
    50d0:	2101      	movs	r1, #1
    50d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	for( i=0; i<relations[sid].in.length; ++i ){
    50d6:	2300      	movs	r3, #0
    50d8:	617b      	str	r3, [r7, #20]
    50da:	e020      	b.n	511e <prv_ef_edge_add+0x66>
		// only when two servants of the edge are in scheduling list, the edge is added
		current = (ps_servant_t)prv_list_get_current_entity(prv_ef_get_src_list(s));
    50dc:	6878      	ldr	r0, [r7, #4]
    50de:	f7ff ff6f 	bl	4fc0 <prv_ef_get_src_list>
    50e2:	4603      	mov	r3, r0
    50e4:	4618      	mov	r0, r3
    50e6:	f000 fb9f 	bl	5828 <prv_list_get_current_entity>
    50ea:	60f8      	str	r0, [r7, #12]
		if(servant_flags[current->sid] == 1){
    50ec:	68fb      	ldr	r3, [r7, #12]
    50ee:	681a      	ldr	r2, [r3, #0]
    50f0:	f64c 732c 	movw	r3, #53036	; 0xcf2c
    50f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    50fc:	2b01      	cmp	r3, #1
    50fe:	d10b      	bne.n	5118 <prv_ef_edge_add+0x60>
			edges[current->sid][sid] = 1;
    5100:	68fb      	ldr	r3, [r7, #12]
    5102:	681a      	ldr	r2, [r3, #0]
    5104:	f24d 032c 	movw	r3, #53292	; 0xd02c
    5108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    510c:	0151      	lsls	r1, r2, #5
    510e:	693a      	ldr	r2, [r7, #16]
    5110:	440a      	add	r2, r1
    5112:	2101      	movs	r1, #1
    5114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ps_servant_t current;
	prv_id_t sid = s->sid;
	// active the servants
	servant_flags[sid] = 1;

	for( i=0; i<relations[sid].in.length; ++i ){
    5118:	697b      	ldr	r3, [r7, #20]
    511a:	3301      	adds	r3, #1
    511c:	617b      	str	r3, [r7, #20]
    511e:	f64c 3308 	movw	r3, #51976	; 0xcb08
    5122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5126:	693a      	ldr	r2, [r7, #16]
    5128:	0152      	lsls	r2, r2, #5
    512a:	4413      	add	r3, r2
    512c:	681a      	ldr	r2, [r3, #0]
    512e:	697b      	ldr	r3, [r7, #20]
    5130:	429a      	cmp	r2, r3
    5132:	dcd3      	bgt.n	50dc <prv_ef_edge_add+0x24>
		current = (ps_servant_t)prv_list_get_current_entity(prv_ef_get_src_list(s));
		if(servant_flags[current->sid] == 1){
			edges[current->sid][sid] = 1;
		}
	}
	for( i=0; i<relations[sid].out.length; ++i ){
    5134:	2300      	movs	r3, #0
    5136:	617b      	str	r3, [r7, #20]
    5138:	e020      	b.n	517c <prv_ef_edge_add+0xc4>
		current = (ps_servant_t)prv_list_get_current_entity(prv_ef_get_dest_list(s));
    513a:	6878      	ldr	r0, [r7, #4]
    513c:	f7ff ff2c 	bl	4f98 <prv_ef_get_dest_list>
    5140:	4603      	mov	r3, r0
    5142:	4618      	mov	r0, r3
    5144:	f000 fb70 	bl	5828 <prv_list_get_current_entity>
    5148:	60f8      	str	r0, [r7, #12]
		if(servant_flags[current->sid] == 1){
    514a:	68fb      	ldr	r3, [r7, #12]
    514c:	681a      	ldr	r2, [r3, #0]
    514e:	f64c 732c 	movw	r3, #53036	; 0xcf2c
    5152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    515a:	2b01      	cmp	r3, #1
    515c:	d10b      	bne.n	5176 <prv_ef_edge_add+0xbe>
			edges[sid][current->sid] = 1;
    515e:	68fb      	ldr	r3, [r7, #12]
    5160:	681a      	ldr	r2, [r3, #0]
    5162:	f24d 032c 	movw	r3, #53292	; 0xd02c
    5166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516a:	6939      	ldr	r1, [r7, #16]
    516c:	0149      	lsls	r1, r1, #5
    516e:	440a      	add	r2, r1
    5170:	2101      	movs	r1, #1
    5172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		current = (ps_servant_t)prv_list_get_current_entity(prv_ef_get_src_list(s));
		if(servant_flags[current->sid] == 1){
			edges[current->sid][sid] = 1;
		}
	}
	for( i=0; i<relations[sid].out.length; ++i ){
    5176:	697b      	ldr	r3, [r7, #20]
    5178:	3301      	adds	r3, #1
    517a:	617b      	str	r3, [r7, #20]
    517c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    5180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5184:	693a      	ldr	r2, [r7, #16]
    5186:	0152      	lsls	r2, r2, #5
    5188:	4413      	add	r3, r2
    518a:	3310      	adds	r3, #16
    518c:	681a      	ldr	r2, [r3, #0]
    518e:	697b      	ldr	r3, [r7, #20]
    5190:	429a      	cmp	r2, r3
    5192:	dcd2      	bgt.n	513a <prv_ef_edge_add+0x82>
		current = (ps_servant_t)prv_list_get_current_entity(prv_ef_get_dest_list(s));
		if(servant_flags[current->sid] == 1){
			edges[sid][current->sid] = 1;
		}
	}
}
    5194:	3718      	adds	r7, #24
    5196:	46bd      	mov	sp, r7
    5198:	bd80      	pop	{r7, pc}
    519a:	bf00      	nop

0000519c <prv_ef_topograph_update_one>:

// add edges in the graph of a task
static void prv_ef_topograph_update_one(ps_task_t t)
{
    519c:	b580      	push	{r7, lr}
    519e:	b084      	sub	sp, #16
    51a0:	af00      	add	r7, sp, #0
    51a2:	6078      	str	r0, [r7, #4]
	int i;
	ps_servant_t current;
	for(i = 0; i < t->servants->length; ++i){
    51a4:	2300      	movs	r3, #0
    51a6:	60fb      	str	r3, [r7, #12]
    51a8:	e00b      	b.n	51c2 <prv_ef_topograph_update_one+0x26>
		current = (ps_servant_t)prv_list_get_current_entity(t->servants);
    51aa:	687b      	ldr	r3, [r7, #4]
    51ac:	691b      	ldr	r3, [r3, #16]
    51ae:	4618      	mov	r0, r3
    51b0:	f000 fb3a 	bl	5828 <prv_list_get_current_entity>
    51b4:	60b8      	str	r0, [r7, #8]
		prv_ef_edge_add(current);
    51b6:	68b8      	ldr	r0, [r7, #8]
    51b8:	f7ff ff7e 	bl	50b8 <prv_ef_edge_add>
// add edges in the graph of a task
static void prv_ef_topograph_update_one(ps_task_t t)
{
	int i;
	ps_servant_t current;
	for(i = 0; i < t->servants->length; ++i){
    51bc:	68fb      	ldr	r3, [r7, #12]
    51be:	3301      	adds	r3, #1
    51c0:	60fb      	str	r3, [r7, #12]
    51c2:	687b      	ldr	r3, [r7, #4]
    51c4:	691b      	ldr	r3, [r3, #16]
    51c6:	681a      	ldr	r2, [r3, #0]
    51c8:	68fb      	ldr	r3, [r7, #12]
    51ca:	429a      	cmp	r2, r3
    51cc:	dced      	bgt.n	51aa <prv_ef_topograph_update_one+0xe>
		current = (ps_servant_t)prv_list_get_current_entity(t->servants);
		prv_ef_edge_add(current);
	}
}
    51ce:	3710      	adds	r7, #16
    51d0:	46bd      	mov	sp, r7
    51d2:	bd80      	pop	{r7, pc}

000051d4 <prv_ef_topograph_update>:

// being invoked once per unit
static void prv_ef_topograph_update(ps_mode_t m)
{
    51d4:	b580      	push	{r7, lr}
    51d6:	b086      	sub	sp, #24
    51d8:	af00      	add	r7, sp, #0
    51da:	6078      	str	r0, [r7, #4]
	int i, j;
	ps_task_t current;
	for(i = 0; i < m->tasks->length; ++i){
    51dc:	2300      	movs	r3, #0
    51de:	617b      	str	r3, [r7, #20]
    51e0:	e011      	b.n	5206 <prv_ef_topograph_update+0x32>
		current = (ps_task_t)prv_list_get_current_entity(m->tasks);
    51e2:	687b      	ldr	r3, [r7, #4]
    51e4:	68db      	ldr	r3, [r3, #12]
    51e6:	4618      	mov	r0, r3
    51e8:	f000 fb1e 	bl	5828 <prv_list_get_current_entity>
    51ec:	60f8      	str	r0, [r7, #12]
		if(prv_modeltime_is_period_start(current) == 1){
    51ee:	68f8      	ldr	r0, [r7, #12]
    51f0:	f000 fd6c 	bl	5ccc <prv_modeltime_is_period_start>
    51f4:	4603      	mov	r3, r0
    51f6:	2b01      	cmp	r3, #1
    51f8:	d102      	bne.n	5200 <prv_ef_topograph_update+0x2c>
			prv_ef_topograph_update_one(current);
    51fa:	68f8      	ldr	r0, [r7, #12]
    51fc:	f7ff ffce 	bl	519c <prv_ef_topograph_update_one>
// being invoked once per unit
static void prv_ef_topograph_update(ps_mode_t m)
{
	int i, j;
	ps_task_t current;
	for(i = 0; i < m->tasks->length; ++i){
    5200:	697b      	ldr	r3, [r7, #20]
    5202:	3301      	adds	r3, #1
    5204:	617b      	str	r3, [r7, #20]
    5206:	687b      	ldr	r3, [r7, #4]
    5208:	68db      	ldr	r3, [r3, #12]
    520a:	681a      	ldr	r2, [r3, #0]
    520c:	697b      	ldr	r3, [r7, #20]
    520e:	429a      	cmp	r2, r3
    5210:	dce7      	bgt.n	51e2 <prv_ef_topograph_update+0xe>
			prv_ef_topograph_update_one(current);
		}
	}

	// count the indegrees for each servant at the beginning of each unit
	for( i = 0; i < NUMOFSERVANTS; ++i ){
    5212:	2300      	movs	r3, #0
    5214:	617b      	str	r3, [r7, #20]
    5216:	e00a      	b.n	522e <prv_ef_topograph_update+0x5a>
		indegrees[i] = 0;
    5218:	f64c 73ac 	movw	r3, #53164	; 0xcfac
    521c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5220:	697a      	ldr	r2, [r7, #20]
    5222:	2100      	movs	r1, #0
    5224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			prv_ef_topograph_update_one(current);
		}
	}

	// count the indegrees for each servant at the beginning of each unit
	for( i = 0; i < NUMOFSERVANTS; ++i ){
    5228:	697b      	ldr	r3, [r7, #20]
    522a:	3301      	adds	r3, #1
    522c:	617b      	str	r3, [r7, #20]
    522e:	697b      	ldr	r3, [r7, #20]
    5230:	2b1f      	cmp	r3, #31
    5232:	ddf1      	ble.n	5218 <prv_ef_topograph_update+0x44>
		indegrees[i] = 0;
	}

	for(i = 0; i < NUMOFSERVANTS; ++i){
    5234:	2300      	movs	r3, #0
    5236:	617b      	str	r3, [r7, #20]
    5238:	e026      	b.n	5288 <prv_ef_topograph_update+0xb4>
		for(j = 0; j < NUMOFSERVANTS; ++j){
    523a:	2300      	movs	r3, #0
    523c:	613b      	str	r3, [r7, #16]
    523e:	e01d      	b.n	527c <prv_ef_topograph_update+0xa8>
			if(edges[i][j]){
    5240:	f24d 032c 	movw	r3, #53292	; 0xd02c
    5244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5248:	697a      	ldr	r2, [r7, #20]
    524a:	0151      	lsls	r1, r2, #5
    524c:	693a      	ldr	r2, [r7, #16]
    524e:	440a      	add	r2, r1
    5250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5254:	2b00      	cmp	r3, #0
    5256:	d00e      	beq.n	5276 <prv_ef_topograph_update+0xa2>
				indegrees[j]++;
    5258:	f64c 73ac 	movw	r3, #53164	; 0xcfac
    525c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5260:	693a      	ldr	r2, [r7, #16]
    5262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5266:	1c59      	adds	r1, r3, #1
    5268:	f64c 73ac 	movw	r3, #53164	; 0xcfac
    526c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5270:	693a      	ldr	r2, [r7, #16]
    5272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for( i = 0; i < NUMOFSERVANTS; ++i ){
		indegrees[i] = 0;
	}

	for(i = 0; i < NUMOFSERVANTS; ++i){
		for(j = 0; j < NUMOFSERVANTS; ++j){
    5276:	693b      	ldr	r3, [r7, #16]
    5278:	3301      	adds	r3, #1
    527a:	613b      	str	r3, [r7, #16]
    527c:	693b      	ldr	r3, [r7, #16]
    527e:	2b1f      	cmp	r3, #31
    5280:	ddde      	ble.n	5240 <prv_ef_topograph_update+0x6c>
	// count the indegrees for each servant at the beginning of each unit
	for( i = 0; i < NUMOFSERVANTS; ++i ){
		indegrees[i] = 0;
	}

	for(i = 0; i < NUMOFSERVANTS; ++i){
    5282:	697b      	ldr	r3, [r7, #20]
    5284:	3301      	adds	r3, #1
    5286:	617b      	str	r3, [r7, #20]
    5288:	697b      	ldr	r3, [r7, #20]
    528a:	2b1f      	cmp	r3, #31
    528c:	ddd5      	ble.n	523a <prv_ef_topograph_update+0x66>
			if(edges[i][j]){
				indegrees[j]++;
			}
		}
	}
}
    528e:	3718      	adds	r7, #24
    5290:	46bd      	mov	sp, r7
    5292:	bd80      	pop	{r7, pc}

00005294 <compare>:


static int compare(void * s1, void *s2)
{
    5294:	b480      	push	{r7}
    5296:	b087      	sub	sp, #28
    5298:	af00      	add	r7, sp, #0
    529a:	6078      	str	r0, [r7, #4]
    529c:	6039      	str	r1, [r7, #0]
	ps_servant_t a = s1;
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	617b      	str	r3, [r7, #20]
	ps_servant_t b = s2;
    52a2:	683b      	ldr	r3, [r7, #0]
    52a4:	613b      	str	r3, [r7, #16]
	ps_task_t	t1 = tasks[a->tid];
    52a6:	697b      	ldr	r3, [r7, #20]
    52a8:	68da      	ldr	r2, [r3, #12]
    52aa:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    52ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    52b6:	60fb      	str	r3, [r7, #12]
	ps_task_t	t2 = tasks[b->tid];
    52b8:	693b      	ldr	r3, [r7, #16]
    52ba:	68da      	ldr	r2, [r3, #12]
    52bc:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    52c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    52c8:	60bb      	str	r3, [r7, #8]
	if(a->type < b->type){
    52ca:	697b      	ldr	r3, [r7, #20]
    52cc:	685a      	ldr	r2, [r3, #4]
    52ce:	693b      	ldr	r3, [r7, #16]
    52d0:	685b      	ldr	r3, [r3, #4]
    52d2:	429a      	cmp	r2, r3
    52d4:	da01      	bge.n	52da <compare+0x46>
		return 1;
    52d6:	2301      	movs	r3, #1
    52d8:	e022      	b.n	5320 <compare+0x8c>
	}else if(a->type == b->type && t1->let < t2->let){
    52da:	697b      	ldr	r3, [r7, #20]
    52dc:	685a      	ldr	r2, [r3, #4]
    52de:	693b      	ldr	r3, [r7, #16]
    52e0:	685b      	ldr	r3, [r3, #4]
    52e2:	429a      	cmp	r2, r3
    52e4:	d107      	bne.n	52f6 <compare+0x62>
    52e6:	68fb      	ldr	r3, [r7, #12]
    52e8:	685a      	ldr	r2, [r3, #4]
    52ea:	68bb      	ldr	r3, [r7, #8]
    52ec:	685b      	ldr	r3, [r3, #4]
    52ee:	429a      	cmp	r2, r3
    52f0:	da01      	bge.n	52f6 <compare+0x62>
		return 1;
    52f2:	2301      	movs	r3, #1
    52f4:	e014      	b.n	5320 <compare+0x8c>
	}else if(a->type == b->type && t1->let == t2->let && t1->tid < t2->tid){
    52f6:	697b      	ldr	r3, [r7, #20]
    52f8:	685a      	ldr	r2, [r3, #4]
    52fa:	693b      	ldr	r3, [r7, #16]
    52fc:	685b      	ldr	r3, [r3, #4]
    52fe:	429a      	cmp	r2, r3
    5300:	d10d      	bne.n	531e <compare+0x8a>
    5302:	68fb      	ldr	r3, [r7, #12]
    5304:	685a      	ldr	r2, [r3, #4]
    5306:	68bb      	ldr	r3, [r7, #8]
    5308:	685b      	ldr	r3, [r3, #4]
    530a:	429a      	cmp	r2, r3
    530c:	d107      	bne.n	531e <compare+0x8a>
    530e:	68fb      	ldr	r3, [r7, #12]
    5310:	681a      	ldr	r2, [r3, #0]
    5312:	68bb      	ldr	r3, [r7, #8]
    5314:	681b      	ldr	r3, [r3, #0]
    5316:	429a      	cmp	r2, r3
    5318:	da01      	bge.n	531e <compare+0x8a>
		return 1;
    531a:	2301      	movs	r3, #1
    531c:	e000      	b.n	5320 <compare+0x8c>
	}else{
		return 0;
    531e:	2300      	movs	r3, #0
	}
}
    5320:	4618      	mov	r0, r3
    5322:	371c      	adds	r7, #28
    5324:	46bd      	mov	sp, r7
    5326:	f85d 7b04 	ldr.w	r7, [sp], #4
    532a:	4770      	bx	lr

0000532c <prv_ef_set_init>:

//being invoked once per mode
static void prv_ef_set_init(prv_list_t *S)
{
    532c:	b480      	push	{r7}
    532e:	b083      	sub	sp, #12
    5330:	af00      	add	r7, sp, #0
    5332:	6078      	str	r0, [r7, #4]

	S->length = 0;
    5334:	687b      	ldr	r3, [r7, #4]
    5336:	2200      	movs	r2, #0
    5338:	601a      	str	r2, [r3, #0]
	S->first = S->last = S->current = NULL;
    533a:	687b      	ldr	r3, [r7, #4]
    533c:	2200      	movs	r2, #0
    533e:	60da      	str	r2, [r3, #12]
    5340:	687b      	ldr	r3, [r7, #4]
    5342:	68da      	ldr	r2, [r3, #12]
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	609a      	str	r2, [r3, #8]
    5348:	687b      	ldr	r3, [r7, #4]
    534a:	689a      	ldr	r2, [r3, #8]
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	605a      	str	r2, [r3, #4]
}
    5350:	370c      	adds	r7, #12
    5352:	46bd      	mov	sp, r7
    5354:	f85d 7b04 	ldr.w	r7, [sp], #4
    5358:	4770      	bx	lr
    535a:	bf00      	nop

0000535c <prv_ef_set_unit_update>:

//being invoked once per unit
static void prv_ef_set_unit_update(prv_list_t *S)
{
    535c:	b580      	push	{r7, lr}
    535e:	b084      	sub	sp, #16
    5360:	af00      	add	r7, sp, #0
    5362:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0; i < NUMOFSERVANTS; ++i){
    5364:	2300      	movs	r3, #0
    5366:	60fb      	str	r3, [r7, #12]
    5368:	e02c      	b.n	53c4 <prv_ef_set_unit_update+0x68>
		// choose the servants with zero indegree
		if(!indegrees[i] && servant_flags[i] == 1){
    536a:	f64c 73ac 	movw	r3, #53164	; 0xcfac
    536e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5372:	68fa      	ldr	r2, [r7, #12]
    5374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5378:	2b00      	cmp	r3, #0
    537a:	d120      	bne.n	53be <prv_ef_set_unit_update+0x62>
    537c:	f64c 732c 	movw	r3, #53036	; 0xcf2c
    5380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5384:	68fa      	ldr	r2, [r7, #12]
    5386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    538a:	2b01      	cmp	r3, #1
    538c:	d117      	bne.n	53be <prv_ef_set_unit_update+0x62>
			servant_flags[i] = -1; // deactive  the servant
    538e:	f64c 732c 	movw	r3, #53036	; 0xcf2c
    5392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5396:	68fa      	ldr	r2, [r7, #12]
    5398:	f04f 31ff 	mov.w	r1, #4294967295
    539c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			prv_list_insert_sorted(servants[i], S, compare);
    53a0:	f64c 2388 	movw	r3, #51848	; 0xca88
    53a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a8:	68fa      	ldr	r2, [r7, #12]
    53aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    53ae:	4618      	mov	r0, r3
    53b0:	6879      	ldr	r1, [r7, #4]
    53b2:	f245 2295 	movw	r2, #21141	; 0x5295
    53b6:	f2c0 0200 	movt	r2, #0
    53ba:	f000 fa8b 	bl	58d4 <prv_list_insert_sorted>

//being invoked once per unit
static void prv_ef_set_unit_update(prv_list_t *S)
{
	int i;
	for(i = 0; i < NUMOFSERVANTS; ++i){
    53be:	68fb      	ldr	r3, [r7, #12]
    53c0:	3301      	adds	r3, #1
    53c2:	60fb      	str	r3, [r7, #12]
    53c4:	68fb      	ldr	r3, [r7, #12]
    53c6:	2b1f      	cmp	r3, #31
    53c8:	ddcf      	ble.n	536a <prv_ef_set_unit_update+0xe>
		if(!indegrees[i] && servant_flags[i] == 1){
			servant_flags[i] = -1; // deactive  the servant
			prv_list_insert_sorted(servants[i], S, compare);
		}
	}
}
    53ca:	3710      	adds	r7, #16
    53cc:	46bd      	mov	sp, r7
    53ce:	bd80      	pop	{r7, pc}

000053d0 <prv_ef_set_servant_update>:

// being invoked for each sorted servant
// update the set S that contains nodes without edges
static void prv_ef_set_servant_update(ps_servant_t servant, prv_list_t * S)
{
    53d0:	b580      	push	{r7, lr}
    53d2:	b084      	sub	sp, #16
    53d4:	af00      	add	r7, sp, #0
    53d6:	6078      	str	r0, [r7, #4]
    53d8:	6039      	str	r1, [r7, #0]
	int i;

	prv_id_t sid = servant->sid;
    53da:	687b      	ldr	r3, [r7, #4]
    53dc:	681b      	ldr	r3, [r3, #0]
    53de:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < NUMOFSERVANTS; ++i){
    53e0:	2300      	movs	r3, #0
    53e2:	60fb      	str	r3, [r7, #12]
    53e4:	e052      	b.n	548c <prv_ef_set_servant_update+0xbc>
		if(edges[sid][i]){
    53e6:	f24d 032c 	movw	r3, #53292	; 0xd02c
    53ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ee:	68ba      	ldr	r2, [r7, #8]
    53f0:	0151      	lsls	r1, r2, #5
    53f2:	68fa      	ldr	r2, [r7, #12]
    53f4:	440a      	add	r2, r1
    53f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    53fa:	2b00      	cmp	r3, #0
    53fc:	d043      	beq.n	5486 <prv_ef_set_servant_update+0xb6>
			indegrees[i] --;
    53fe:	f64c 73ac 	movw	r3, #53164	; 0xcfac
    5402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5406:	68fa      	ldr	r2, [r7, #12]
    5408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    540c:	1e59      	subs	r1, r3, #1
    540e:	f64c 73ac 	movw	r3, #53164	; 0xcfac
    5412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5416:	68fa      	ldr	r2, [r7, #12]
    5418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			edges[sid][i] = 0;
    541c:	f24d 032c 	movw	r3, #53292	; 0xd02c
    5420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5424:	68ba      	ldr	r2, [r7, #8]
    5426:	0151      	lsls	r1, r2, #5
    5428:	68fa      	ldr	r2, [r7, #12]
    542a:	440a      	add	r2, r1
    542c:	2100      	movs	r1, #0
    542e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(!indegrees[i] && servant_flags[i] == 1){
    5432:	f64c 73ac 	movw	r3, #53164	; 0xcfac
    5436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    543a:	68fa      	ldr	r2, [r7, #12]
    543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5440:	2b00      	cmp	r3, #0
    5442:	d120      	bne.n	5486 <prv_ef_set_servant_update+0xb6>
    5444:	f64c 732c 	movw	r3, #53036	; 0xcf2c
    5448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    544c:	68fa      	ldr	r2, [r7, #12]
    544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5452:	2b01      	cmp	r3, #1
    5454:	d117      	bne.n	5486 <prv_ef_set_servant_update+0xb6>
				servant_flags[i] = -1; // deactive  the servant
    5456:	f64c 732c 	movw	r3, #53036	; 0xcf2c
    545a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545e:	68fa      	ldr	r2, [r7, #12]
    5460:	f04f 31ff 	mov.w	r1, #4294967295
    5464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				prv_list_insert_sorted(servants[i], S, compare);
    5468:	f64c 2388 	movw	r3, #51848	; 0xca88
    546c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5470:	68fa      	ldr	r2, [r7, #12]
    5472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5476:	4618      	mov	r0, r3
    5478:	6839      	ldr	r1, [r7, #0]
    547a:	f245 2295 	movw	r2, #21141	; 0x5295
    547e:	f2c0 0200 	movt	r2, #0
    5482:	f000 fa27 	bl	58d4 <prv_list_insert_sorted>
{
	int i;

	prv_id_t sid = servant->sid;

	for(i = 0; i < NUMOFSERVANTS; ++i){
    5486:	68fb      	ldr	r3, [r7, #12]
    5488:	3301      	adds	r3, #1
    548a:	60fb      	str	r3, [r7, #12]
    548c:	68fb      	ldr	r3, [r7, #12]
    548e:	2b1f      	cmp	r3, #31
    5490:	dda9      	ble.n	53e6 <prv_ef_set_servant_update+0x16>
				servant_flags[i] = -1; // deactive  the servant
				prv_list_insert_sorted(servants[i], S, compare);
			}
		}
	}
}
    5492:	3710      	adds	r7, #16
    5494:	46bd      	mov	sp, r7
    5496:	bd80      	pop	{r7, pc}

00005498 <prv_ef_find_servant>:

static ps_servant_t prv_ef_find_servant(prv_stype_t type, prv_list_t * S)
{
    5498:	b580      	push	{r7, lr}
    549a:	b086      	sub	sp, #24
    549c:	af00      	add	r7, sp, #0
    549e:	6078      	str	r0, [r7, #4]
    54a0:	6039      	str	r1, [r7, #0]
	int i, len;
	len = S->length;
    54a2:	683b      	ldr	r3, [r7, #0]
    54a4:	681b      	ldr	r3, [r3, #0]
    54a6:	60fb      	str	r3, [r7, #12]
	ps_servant_t result;
	prv_item_t * index;

	index = prv_list_get_first_item(S);
    54a8:	683b      	ldr	r3, [r7, #0]
    54aa:	685b      	ldr	r3, [r3, #4]
    54ac:	613b      	str	r3, [r7, #16]
	for(i = 0; i < len; ++i){
    54ae:	2300      	movs	r3, #0
    54b0:	617b      	str	r3, [r7, #20]
    54b2:	e017      	b.n	54e4 <prv_ef_find_servant+0x4c>
		result = (ps_servant_t)index->entity;
    54b4:	693b      	ldr	r3, [r7, #16]
    54b6:	681b      	ldr	r3, [r3, #0]
    54b8:	60bb      	str	r3, [r7, #8]
		if(result->type == type){
    54ba:	68bb      	ldr	r3, [r7, #8]
    54bc:	685a      	ldr	r2, [r3, #4]
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	429a      	cmp	r2, r3
    54c2:	d109      	bne.n	54d8 <prv_ef_find_servant+0x40>
			index = index->next;
    54c4:	693b      	ldr	r3, [r7, #16]
    54c6:	689b      	ldr	r3, [r3, #8]
    54c8:	613b      	str	r3, [r7, #16]
			prv_list_remove(index->prev);
    54ca:	693b      	ldr	r3, [r7, #16]
    54cc:	68db      	ldr	r3, [r3, #12]
    54ce:	4618      	mov	r0, r3
    54d0:	f000 fa68 	bl	59a4 <prv_list_remove>
			return result;
    54d4:	68bb      	ldr	r3, [r7, #8]
    54d6:	e00a      	b.n	54ee <prv_ef_find_servant+0x56>
		}else{
			index = index->next;
    54d8:	693b      	ldr	r3, [r7, #16]
    54da:	689b      	ldr	r3, [r3, #8]
    54dc:	613b      	str	r3, [r7, #16]
	len = S->length;
	ps_servant_t result;
	prv_item_t * index;

	index = prv_list_get_first_item(S);
	for(i = 0; i < len; ++i){
    54de:	697b      	ldr	r3, [r7, #20]
    54e0:	3301      	adds	r3, #1
    54e2:	617b      	str	r3, [r7, #20]
    54e4:	697a      	ldr	r2, [r7, #20]
    54e6:	68fb      	ldr	r3, [r7, #12]
    54e8:	429a      	cmp	r2, r3
    54ea:	dbe3      	blt.n	54b4 <prv_ef_find_servant+0x1c>
			return result;
		}else{
			index = index->next;
		}
	}
	return NULL;
    54ec:	2300      	movs	r3, #0
}
    54ee:	4618      	mov	r0, r3
    54f0:	3718      	adds	r7, #24
    54f2:	46bd      	mov	sp, r7
    54f4:	bd80      	pop	{r7, pc}
    54f6:	bf00      	nop

000054f8 <prv_STT_create>:
 *		prv_modeltime_run
 *		prv_ef_set_update
 * */

static void prv_STT_create(ps_mode_t m)
{
    54f8:	b580      	push	{r7, lr}
    54fa:	b08c      	sub	sp, #48	; 0x30
    54fc:	af00      	add	r7, sp, #0
    54fe:	6078      	str	r0, [r7, #4]
	prv_id_t mid = m->mid;
    5500:	687b      	ldr	r3, [r7, #4]
    5502:	681b      	ldr	r3, [r3, #0]
    5504:	62fb      	str	r3, [r7, #44]	; 0x2c
	prv_list_t * table = &STT[mid];
    5506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5508:	011a      	lsls	r2, r3, #4
    550a:	f64c 7308 	movw	r3, #53000	; 0xcf08
    550e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5512:	4413      	add	r3, r2
    5514:	62bb      	str	r3, [r7, #40]	; 0x28
	prv_list_t S; // the set of nodes without in edges
	ps_servant_t tmp_servant;
	prv_tick_t release;
	schedule_node elem;

	prv_ef_set_init(&S);
    5516:	f107 030c 	add.w	r3, r7, #12
    551a:	4618      	mov	r0, r3
    551c:	f7ff ff06 	bl	532c <prv_ef_set_init>
	do{
		prv_ef_topograph_update(m);
    5520:	6878      	ldr	r0, [r7, #4]
    5522:	f7ff fe57 	bl	51d4 <prv_ef_topograph_update>
		prv_ef_set_unit_update(&S);
    5526:	f107 030c 	add.w	r3, r7, #12
    552a:	4618      	mov	r0, r3
    552c:	f7ff ff16 	bl	535c <prv_ef_set_unit_update>
		while((tmp_servant = prv_ef_find_servant(0, &S)) != NULL){
    5530:	e01c      	b.n	556c <prv_STT_create+0x74>
			// construct a schedule node in STT
			if( (release = prv_modeltime_run(tmp_servant)) >= 0 ){
    5532:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5534:	f000 fafe 	bl	5b34 <prv_modeltime_run>
    5538:	6238      	str	r0, [r7, #32]
    553a:	6a3b      	ldr	r3, [r7, #32]
    553c:	2b00      	cmp	r3, #0
    553e:	db14      	blt.n	556a <prv_STT_create+0x72>
				elem = (schedule_node)port_malloc(sizeof(struct node));
    5540:	2008      	movs	r0, #8
    5542:	f7ff f88f 	bl	4664 <pvPortMalloc>
    5546:	61f8      	str	r0, [r7, #28]
				elem->servant = tmp_servant;
    5548:	69fb      	ldr	r3, [r7, #28]
    554a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    554c:	601a      	str	r2, [r3, #0]
				elem->release = release;
    554e:	69fb      	ldr	r3, [r7, #28]
    5550:	6a3a      	ldr	r2, [r7, #32]
    5552:	605a      	str	r2, [r3, #4]
			}else{
				break;
			}
			prv_list_insert(elem, table);
    5554:	69f8      	ldr	r0, [r7, #28]
    5556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5558:	f000 f97a 	bl	5850 <prv_list_insert>
			prv_ef_set_servant_update(tmp_servant, &S);
    555c:	f107 030c 	add.w	r3, r7, #12
    5560:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5562:	4619      	mov	r1, r3
    5564:	f7ff ff34 	bl	53d0 <prv_ef_set_servant_update>
    5568:	e000      	b.n	556c <prv_STT_create+0x74>
			if( (release = prv_modeltime_run(tmp_servant)) >= 0 ){
				elem = (schedule_node)port_malloc(sizeof(struct node));
				elem->servant = tmp_servant;
				elem->release = release;
			}else{
				break;
    556a:	e009      	b.n	5580 <prv_STT_create+0x88>

	prv_ef_set_init(&S);
	do{
		prv_ef_topograph_update(m);
		prv_ef_set_unit_update(&S);
		while((tmp_servant = prv_ef_find_servant(0, &S)) != NULL){
    556c:	f107 030c 	add.w	r3, r7, #12
    5570:	2000      	movs	r0, #0
    5572:	4619      	mov	r1, r3
    5574:	f7ff ff90 	bl	5498 <prv_ef_find_servant>
    5578:	6278      	str	r0, [r7, #36]	; 0x24
    557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    557c:	2b00      	cmp	r3, #0
    557e:	d1d8      	bne.n	5532 <prv_STT_create+0x3a>
			}
			prv_list_insert(elem, table);
			prv_ef_set_servant_update(tmp_servant, &S);
		}
		// function prv_ef_find_servant() find the servant and remove it from the original list
		while((tmp_servant = prv_ef_find_servant(1, &S)) != NULL){
    5580:	e025      	b.n	55ce <prv_STT_create+0xd6>
			if( (release = prv_modeltime_run(tmp_servant)) >= 0 ){
    5582:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5584:	f000 fad6 	bl	5b34 <prv_modeltime_run>
    5588:	6238      	str	r0, [r7, #32]
    558a:	6a3b      	ldr	r3, [r7, #32]
    558c:	2b00      	cmp	r3, #0
    558e:	db14      	blt.n	55ba <prv_STT_create+0xc2>
				elem = (schedule_node)port_malloc(sizeof(struct node));
    5590:	2008      	movs	r0, #8
    5592:	f7ff f867 	bl	4664 <pvPortMalloc>
    5596:	61f8      	str	r0, [r7, #28]
				elem->servant = tmp_servant;
    5598:	69fb      	ldr	r3, [r7, #28]
    559a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    559c:	601a      	str	r2, [r3, #0]
				elem->release = release;
    559e:	69fb      	ldr	r3, [r7, #28]
    55a0:	6a3a      	ldr	r2, [r7, #32]
    55a2:	605a      	str	r2, [r3, #4]
				// set the flag into true
				// then the prv_ef_set_unit_update() will insert the servant into S again
				servant_flags[tmp_servant->sid] = 1;
				break;
			}
			prv_list_insert(elem, table);
    55a4:	69f8      	ldr	r0, [r7, #28]
    55a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    55a8:	f000 f952 	bl	5850 <prv_list_insert>
			prv_ef_set_servant_update(tmp_servant, &S);
    55ac:	f107 030c 	add.w	r3, r7, #12
    55b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    55b2:	4619      	mov	r1, r3
    55b4:	f7ff ff0c 	bl	53d0 <prv_ef_set_servant_update>
    55b8:	e009      	b.n	55ce <prv_STT_create+0xd6>
				elem->servant = tmp_servant;
				elem->release = release;
			}else{
				// set the flag into true
				// then the prv_ef_set_unit_update() will insert the servant into S again
				servant_flags[tmp_servant->sid] = 1;
    55ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    55bc:	681a      	ldr	r2, [r3, #0]
    55be:	f64c 732c 	movw	r3, #53036	; 0xcf2c
    55c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c6:	2101      	movs	r1, #1
    55c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				break;
    55cc:	e009      	b.n	55e2 <prv_STT_create+0xea>
			}
			prv_list_insert(elem, table);
			prv_ef_set_servant_update(tmp_servant, &S);
		}
		// function prv_ef_find_servant() find the servant and remove it from the original list
		while((tmp_servant = prv_ef_find_servant(1, &S)) != NULL){
    55ce:	f107 030c 	add.w	r3, r7, #12
    55d2:	2001      	movs	r0, #1
    55d4:	4619      	mov	r1, r3
    55d6:	f7ff ff5f 	bl	5498 <prv_ef_find_servant>
    55da:	6278      	str	r0, [r7, #36]	; 0x24
    55dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    55de:	2b00      	cmp	r3, #0
    55e0:	d1cf      	bne.n	5582 <prv_STT_create+0x8a>
				break;
			}
			prv_list_insert(elem, table);
			prv_ef_set_servant_update(tmp_servant, &S);
		}
		while((tmp_servant = prv_ef_find_servant(2, &S)) != NULL){
    55e2:	e024      	b.n	562e <prv_STT_create+0x136>
			if( (release = prv_modeltime_run(tmp_servant)) >= 0 ){
    55e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    55e6:	f000 faa5 	bl	5b34 <prv_modeltime_run>
    55ea:	6238      	str	r0, [r7, #32]
    55ec:	6a3b      	ldr	r3, [r7, #32]
    55ee:	2b00      	cmp	r3, #0
    55f0:	db14      	blt.n	561c <prv_STT_create+0x124>
				elem = (schedule_node)port_malloc(sizeof(struct node));
    55f2:	2008      	movs	r0, #8
    55f4:	f7ff f836 	bl	4664 <pvPortMalloc>
    55f8:	61f8      	str	r0, [r7, #28]
				elem->servant = tmp_servant;
    55fa:	69fb      	ldr	r3, [r7, #28]
    55fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    55fe:	601a      	str	r2, [r3, #0]
				elem->release = release;
    5600:	69fb      	ldr	r3, [r7, #28]
    5602:	6a3a      	ldr	r2, [r7, #32]
    5604:	605a      	str	r2, [r3, #4]
				prv_list_insert(elem, table);
    5606:	69f8      	ldr	r0, [r7, #28]
    5608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    560a:	f000 f921 	bl	5850 <prv_list_insert>
				prv_ef_set_servant_update(tmp_servant, &S);
    560e:	f107 030c 	add.w	r3, r7, #12
    5612:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5614:	4619      	mov	r1, r3
    5616:	f7ff fedb 	bl	53d0 <prv_ef_set_servant_update>
    561a:	e008      	b.n	562e <prv_STT_create+0x136>
			}else{
				// set the flag into true
				// then the prv_ef_set_unit_update() will insert the servant into S again
				servant_flags[tmp_servant->sid] = 1;
    561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    561e:	681a      	ldr	r2, [r3, #0]
    5620:	f64c 732c 	movw	r3, #53036	; 0xcf2c
    5624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5628:	2101      	movs	r1, #1
    562a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				break;
			}
			prv_list_insert(elem, table);
			prv_ef_set_servant_update(tmp_servant, &S);
		}
		while((tmp_servant = prv_ef_find_servant(2, &S)) != NULL){
    562e:	f107 030c 	add.w	r3, r7, #12
    5632:	2002      	movs	r0, #2
    5634:	4619      	mov	r1, r3
    5636:	f7ff ff2f 	bl	5498 <prv_ef_find_servant>
    563a:	6278      	str	r0, [r7, #36]	; 0x24
    563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    563e:	2b00      	cmp	r3, #0
    5640:	d1d0      	bne.n	55e4 <prv_STT_create+0xec>
				servant_flags[tmp_servant->sid] = 1;
			}
		}

		// push forward the model time for simulation
		prv_modeltime_set_new_unit_start();
    5642:	f000 fb19 	bl	5c78 <prv_modeltime_set_new_unit_start>

	}while( !prv_modeltime_is_mode_end() );
    5646:	f000 fb23 	bl	5c90 <prv_modeltime_is_mode_end>
    564a:	4603      	mov	r3, r0
    564c:	2b00      	cmp	r3, #0
    564e:	f43f af67 	beq.w	5520 <prv_STT_create+0x28>
}
    5652:	3730      	adds	r7, #48	; 0x30
    5654:	46bd      	mov	sp, r7
    5656:	bd80      	pop	{r7, pc}

00005658 <prv_ef_create>:

 void prv_ef_create()
{
    5658:	b580      	push	{r7, lr}
    565a:	b082      	sub	sp, #8
    565c:	af00      	add	r7, sp, #0
	int count = marray.num;
    565e:	f64c 13d0 	movw	r3, #51664	; 0xc9d0
    5662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5666:	681b      	ldr	r3, [r3, #0]
    5668:	607b      	str	r3, [r7, #4]
	ps_mode_t m;
	while(count--){
    566a:	e010      	b.n	568e <prv_ef_create+0x36>
		m = marray.modes[count];
    566c:	f64c 12d0 	movw	r2, #51664	; 0xc9d0
    5670:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5674:	687b      	ldr	r3, [r7, #4]
    5676:	009b      	lsls	r3, r3, #2
    5678:	4413      	add	r3, r2
    567a:	685b      	ldr	r3, [r3, #4]
    567c:	603b      	str	r3, [r7, #0]
		prv_modeltime_init(m);
    567e:	6838      	ldr	r0, [r7, #0]
    5680:	f000 f9ec 	bl	5a5c <prv_modeltime_init>
		prv_parameter_init();
    5684:	f7ff fce2 	bl	504c <prv_parameter_init>
		prv_STT_create(m);
    5688:	6838      	ldr	r0, [r7, #0]
    568a:	f7ff ff35 	bl	54f8 <prv_STT_create>

 void prv_ef_create()
{
	int count = marray.num;
	ps_mode_t m;
	while(count--){
    568e:	687b      	ldr	r3, [r7, #4]
    5690:	1e5a      	subs	r2, r3, #1
    5692:	607a      	str	r2, [r7, #4]
    5694:	2b00      	cmp	r3, #0
    5696:	d1e9      	bne.n	566c <prv_ef_create+0x14>
		m = marray.modes[count];
		prv_modeltime_init(m);
		prv_parameter_init();
		prv_STT_create(m);
	}
}
    5698:	3708      	adds	r7, #8
    569a:	46bd      	mov	sp, r7
    569c:	bd80      	pop	{r7, pc}
    569e:	bf00      	nop

000056a0 <prv_ef_is_time_to_trigger>:

#else
// advance execution of C-Servants

int prv_ef_is_time_to_trigger()
{
    56a0:	b590      	push	{r4, r7, lr}
    56a2:	b085      	sub	sp, #20
    56a4:	af00      	add	r7, sp, #0
	ps_mode_t current_mode = prv_mode_get_current_mode();
    56a6:	f7ff f8f1 	bl	488c <prv_mode_get_current_mode>
    56aa:	60f8      	str	r0, [r7, #12]
	prv_item_t * current_item = prv_list_get_current_item(&STT[current_mode->mid]);
    56ac:	68fb      	ldr	r3, [r7, #12]
    56ae:	681a      	ldr	r2, [r3, #0]
    56b0:	f64c 7308 	movw	r3, #53000	; 0xcf08
    56b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b8:	0112      	lsls	r2, r2, #4
    56ba:	4413      	add	r3, r2
    56bc:	330c      	adds	r3, #12
    56be:	681b      	ldr	r3, [r3, #0]
    56c0:	60bb      	str	r3, [r7, #8]
	schedule_node n = (schedule_node)current_item->entity;
    56c2:	68bb      	ldr	r3, [r7, #8]
    56c4:	681b      	ldr	r3, [r3, #0]
    56c6:	607b      	str	r3, [r7, #4]
	prv_tick_t current_time = port_get_current_time();
    56c8:	f7fe fa50 	bl	3b6c <xTaskGetTickCount>
    56cc:	4603      	mov	r3, r0
    56ce:	603b      	str	r3, [r7, #0]

	// cope with I-Servant and O-Servant
	if(prv_servant_get_type(n->servant) != 1){
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	681b      	ldr	r3, [r3, #0]
    56d4:	685b      	ldr	r3, [r3, #4]
    56d6:	2b01      	cmp	r3, #1
    56d8:	d032      	beq.n	5740 <prv_ef_is_time_to_trigger+0xa0>
		if(current_time >= n->release + prv_mode_get_modestart()){
    56da:	687b      	ldr	r3, [r7, #4]
    56dc:	685c      	ldr	r4, [r3, #4]
    56de:	f7ff f8e1 	bl	48a4 <prv_mode_get_modestart>
    56e2:	4603      	mov	r3, r0
    56e4:	18e2      	adds	r2, r4, r3
    56e6:	683b      	ldr	r3, [r7, #0]
    56e8:	429a      	cmp	r2, r3
    56ea:	dc27      	bgt.n	573c <prv_ef_is_time_to_trigger+0x9c>
			// set the n->servant as current Servant
			prv_ef_set_current_servant(n->servant);
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	681b      	ldr	r3, [r3, #0]
    56f0:	4618      	mov	r0, r3
    56f2:	f7ff fc8f 	bl	5014 <prv_ef_set_current_servant>

			// point to the next iterator of the STT
			prv_list_set_current_item(&STT[current_mode->mid]);
    56f6:	68fb      	ldr	r3, [r7, #12]
    56f8:	681b      	ldr	r3, [r3, #0]
    56fa:	011a      	lsls	r2, r3, #4
    56fc:	f64c 7308 	movw	r3, #53000	; 0xcf08
    5700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5704:	4413      	add	r3, r2
    5706:	4618      	mov	r0, r3
    5708:	f000 f880 	bl	580c <prv_list_set_current_item>
			if(current_item == STT[current_mode->mid].last){
    570c:	68fb      	ldr	r3, [r7, #12]
    570e:	681a      	ldr	r2, [r3, #0]
    5710:	f64c 7308 	movw	r3, #53000	; 0xcf08
    5714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5718:	0112      	lsls	r2, r2, #4
    571a:	4413      	add	r3, r2
    571c:	3308      	adds	r3, #8
    571e:	681a      	ldr	r2, [r3, #0]
    5720:	68bb      	ldr	r3, [r7, #8]
    5722:	429a      	cmp	r2, r3
    5724:	d108      	bne.n	5738 <prv_ef_is_time_to_trigger+0x98>
				prv_mode_set_modestart(prv_mode_get_modestart() + current_mode->period);
    5726:	f7ff f8bd 	bl	48a4 <prv_mode_get_modestart>
    572a:	4602      	mov	r2, r0
    572c:	68fb      	ldr	r3, [r7, #12]
    572e:	685b      	ldr	r3, [r3, #4]
    5730:	4413      	add	r3, r2
    5732:	4618      	mov	r0, r3
    5734:	f7ff f8c2 	bl	48bc <prv_mode_set_modestart>
			}
			return 1;
    5738:	2301      	movs	r3, #1
    573a:	e01e      	b.n	577a <prv_ef_is_time_to_trigger+0xda>
		}else{
			return 0;
    573c:	2300      	movs	r3, #0
    573e:	e01c      	b.n	577a <prv_ef_is_time_to_trigger+0xda>
		}
	}else{
		// cope with C-Servant: allow next C-Servant to be triggered advance
		// one the previous finish its execution
		if(current_time >= prv_mode_get_modestart() + prv_duration_get_input()){
    5740:	f7ff f8b0 	bl	48a4 <prv_mode_get_modestart>
    5744:	4604      	mov	r4, r0
    5746:	f000 fb2d 	bl	5da4 <prv_duration_get_input>
    574a:	4603      	mov	r3, r0
    574c:	18e2      	adds	r2, r4, r3
    574e:	683b      	ldr	r3, [r7, #0]
    5750:	429a      	cmp	r2, r3
    5752:	dc11      	bgt.n	5778 <prv_ef_is_time_to_trigger+0xd8>
			prv_ef_set_current_servant(n->servant);
    5754:	687b      	ldr	r3, [r7, #4]
    5756:	681b      	ldr	r3, [r3, #0]
    5758:	4618      	mov	r0, r3
    575a:	f7ff fc5b 	bl	5014 <prv_ef_set_current_servant>
			prv_list_set_current_item(&STT[current_mode->mid]);
    575e:	68fb      	ldr	r3, [r7, #12]
    5760:	681b      	ldr	r3, [r3, #0]
    5762:	011a      	lsls	r2, r3, #4
    5764:	f64c 7308 	movw	r3, #53000	; 0xcf08
    5768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    576c:	4413      	add	r3, r2
    576e:	4618      	mov	r0, r3
    5770:	f000 f84c 	bl	580c <prv_list_set_current_item>
			return 1;
    5774:	2301      	movs	r3, #1
    5776:	e000      	b.n	577a <prv_ef_is_time_to_trigger+0xda>
		}else{
			return 0;
    5778:	2300      	movs	r3, #0
		}
	}
}
    577a:	4618      	mov	r0, r3
    577c:	3714      	adds	r7, #20
    577e:	46bd      	mov	sp, r7
    5780:	bd90      	pop	{r4, r7, pc}
    5782:	bf00      	nop

00005784 <prv_ef_triggering>:

#endif

void prv_ef_triggering()
{
    5784:	b580      	push	{r7, lr}
    5786:	af00      	add	r7, sp, #0
	port_trigger(sem[current_servant->sid]);
    5788:	f64c 7328 	movw	r3, #53032	; 0xcf28
    578c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	681a      	ldr	r2, [r3, #0]
    5794:	f64c 2308 	movw	r3, #51720	; 0xca08
    5798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    579c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57a0:	4618      	mov	r0, r3
    57a2:	2100      	movs	r1, #0
    57a4:	2200      	movs	r2, #0
    57a6:	2300      	movs	r3, #0
    57a8:	f7fd fa66 	bl	2c78 <xQueueGenericSend>
}
    57ac:	bd80      	pop	{r7, pc}
    57ae:	bf00      	nop

000057b0 <prv_list_initialize>:
#include "PSPMconfigure.h"
#include "PSPMport.h"


void prv_list_initialize(prv_list_t * L)
{
    57b0:	b480      	push	{r7}
    57b2:	b083      	sub	sp, #12
    57b4:	af00      	add	r7, sp, #0
    57b6:	6078      	str	r0, [r7, #4]
    L->length = 0;
    57b8:	687b      	ldr	r3, [r7, #4]
    57ba:	2200      	movs	r2, #0
    57bc:	601a      	str	r2, [r3, #0]
    L->first = L->last = L->current = NULL;
    57be:	687b      	ldr	r3, [r7, #4]
    57c0:	2200      	movs	r2, #0
    57c2:	60da      	str	r2, [r3, #12]
    57c4:	687b      	ldr	r3, [r7, #4]
    57c6:	68da      	ldr	r2, [r3, #12]
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	609a      	str	r2, [r3, #8]
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	689a      	ldr	r2, [r3, #8]
    57d0:	687b      	ldr	r3, [r7, #4]
    57d2:	605a      	str	r2, [r3, #4]
}
    57d4:	370c      	adds	r7, #12
    57d6:	46bd      	mov	sp, r7
    57d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57dc:	4770      	bx	lr
    57de:	bf00      	nop

000057e0 <prv_item_initialize>:

void prv_item_initialize(void * entity, prv_item_t * item)
{
    57e0:	b480      	push	{r7}
    57e2:	b083      	sub	sp, #12
    57e4:	af00      	add	r7, sp, #0
    57e6:	6078      	str	r0, [r7, #4]
    57e8:	6039      	str	r1, [r7, #0]
    item->entity= entity;
    57ea:	683b      	ldr	r3, [r7, #0]
    57ec:	687a      	ldr	r2, [r7, #4]
    57ee:	601a      	str	r2, [r3, #0]
    item->owner = NULL;
    57f0:	683b      	ldr	r3, [r7, #0]
    57f2:	2200      	movs	r2, #0
    57f4:	605a      	str	r2, [r3, #4]
    item->next = NULL;
    57f6:	683b      	ldr	r3, [r7, #0]
    57f8:	2200      	movs	r2, #0
    57fa:	609a      	str	r2, [r3, #8]
    item->prev = NULL;
    57fc:	683b      	ldr	r3, [r7, #0]
    57fe:	2200      	movs	r2, #0
    5800:	60da      	str	r2, [r3, #12]
}
    5802:	370c      	adds	r7, #12
    5804:	46bd      	mov	sp, r7
    5806:	f85d 7b04 	ldr.w	r7, [sp], #4
    580a:	4770      	bx	lr

0000580c <prv_list_set_current_item>:

void prv_list_set_current_item(prv_list_t * l)
{
    580c:	b480      	push	{r7}
    580e:	b083      	sub	sp, #12
    5810:	af00      	add	r7, sp, #0
    5812:	6078      	str	r0, [r7, #4]
	l->current = l->current->next;
    5814:	687b      	ldr	r3, [r7, #4]
    5816:	68db      	ldr	r3, [r3, #12]
    5818:	689a      	ldr	r2, [r3, #8]
    581a:	687b      	ldr	r3, [r7, #4]
    581c:	60da      	str	r2, [r3, #12]
}
    581e:	370c      	adds	r7, #12
    5820:	46bd      	mov	sp, r7
    5822:	f85d 7b04 	ldr.w	r7, [sp], #4
    5826:	4770      	bx	lr

00005828 <prv_list_get_current_entity>:

void * prv_list_get_current_entity(prv_list_t * L)
{
    5828:	b480      	push	{r7}
    582a:	b085      	sub	sp, #20
    582c:	af00      	add	r7, sp, #0
    582e:	6078      	str	r0, [r7, #4]
	void * s = ((prv_list_t *)L)->current->entity;
    5830:	687b      	ldr	r3, [r7, #4]
    5832:	68db      	ldr	r3, [r3, #12]
    5834:	681b      	ldr	r3, [r3, #0]
    5836:	60fb      	str	r3, [r7, #12]
	((prv_list_t *)L)->current = ((prv_list_t *)L)->current->next;
    5838:	687b      	ldr	r3, [r7, #4]
    583a:	68db      	ldr	r3, [r3, #12]
    583c:	689a      	ldr	r2, [r3, #8]
    583e:	687b      	ldr	r3, [r7, #4]
    5840:	60da      	str	r2, [r3, #12]

	return s;
    5842:	68fb      	ldr	r3, [r7, #12]
}
    5844:	4618      	mov	r0, r3
    5846:	3714      	adds	r7, #20
    5848:	46bd      	mov	sp, r7
    584a:	f85d 7b04 	ldr.w	r7, [sp], #4
    584e:	4770      	bx	lr

00005850 <prv_list_insert>:

void prv_list_insert( void * entity, prv_list_t * L)
{
    5850:	b580      	push	{r7, lr}
    5852:	b084      	sub	sp, #16
    5854:	af00      	add	r7, sp, #0
    5856:	6078      	str	r0, [r7, #4]
    5858:	6039      	str	r1, [r7, #0]
	prv_item_t * item = (prv_item_t*)port_malloc(sizeof(prv_item_t));
    585a:	2010      	movs	r0, #16
    585c:	f7fe ff02 	bl	4664 <pvPortMalloc>
    5860:	60f8      	str	r0, [r7, #12]
	prv_item_initialize(entity, item);
    5862:	6878      	ldr	r0, [r7, #4]
    5864:	68f9      	ldr	r1, [r7, #12]
    5866:	f7ff ffbb 	bl	57e0 <prv_item_initialize>

    if(L->length == 0){
    586a:	683b      	ldr	r3, [r7, #0]
    586c:	681b      	ldr	r3, [r3, #0]
    586e:	2b00      	cmp	r3, #0
    5870:	d111      	bne.n	5896 <prv_list_insert+0x46>
        L->first = L->last = L->current= item;
    5872:	683b      	ldr	r3, [r7, #0]
    5874:	68fa      	ldr	r2, [r7, #12]
    5876:	60da      	str	r2, [r3, #12]
    5878:	683b      	ldr	r3, [r7, #0]
    587a:	68da      	ldr	r2, [r3, #12]
    587c:	683b      	ldr	r3, [r7, #0]
    587e:	609a      	str	r2, [r3, #8]
    5880:	683b      	ldr	r3, [r7, #0]
    5882:	689a      	ldr	r2, [r3, #8]
    5884:	683b      	ldr	r3, [r7, #0]
    5886:	605a      	str	r2, [r3, #4]
        item->prev = item;
    5888:	68fb      	ldr	r3, [r7, #12]
    588a:	68fa      	ldr	r2, [r7, #12]
    588c:	60da      	str	r2, [r3, #12]
		item->next = item;
    588e:	68fb      	ldr	r3, [r7, #12]
    5890:	68fa      	ldr	r2, [r7, #12]
    5892:	609a      	str	r2, [r3, #8]
    5894:	e012      	b.n	58bc <prv_list_insert+0x6c>
    }else{
        L->last->next = item;
    5896:	683b      	ldr	r3, [r7, #0]
    5898:	689b      	ldr	r3, [r3, #8]
    589a:	68fa      	ldr	r2, [r7, #12]
    589c:	609a      	str	r2, [r3, #8]
        L->first->prev = item;
    589e:	683b      	ldr	r3, [r7, #0]
    58a0:	685b      	ldr	r3, [r3, #4]
    58a2:	68fa      	ldr	r2, [r7, #12]
    58a4:	60da      	str	r2, [r3, #12]

        item->prev = L->last;
    58a6:	683b      	ldr	r3, [r7, #0]
    58a8:	689a      	ldr	r2, [r3, #8]
    58aa:	68fb      	ldr	r3, [r7, #12]
    58ac:	60da      	str	r2, [r3, #12]
        item->next = L->first;
    58ae:	683b      	ldr	r3, [r7, #0]
    58b0:	685a      	ldr	r2, [r3, #4]
    58b2:	68fb      	ldr	r3, [r7, #12]
    58b4:	609a      	str	r2, [r3, #8]
		L->last = item; // insert in the end of list
    58b6:	683b      	ldr	r3, [r7, #0]
    58b8:	68fa      	ldr	r2, [r7, #12]
    58ba:	609a      	str	r2, [r3, #8]
		//L->fist = item; // insert in the start of list
    }

    L->length ++;
    58bc:	683b      	ldr	r3, [r7, #0]
    58be:	681b      	ldr	r3, [r3, #0]
    58c0:	1c5a      	adds	r2, r3, #1
    58c2:	683b      	ldr	r3, [r7, #0]
    58c4:	601a      	str	r2, [r3, #0]
    item->owner = (void *)L;
    58c6:	68fb      	ldr	r3, [r7, #12]
    58c8:	683a      	ldr	r2, [r7, #0]
    58ca:	605a      	str	r2, [r3, #4]
}
    58cc:	3710      	adds	r7, #16
    58ce:	46bd      	mov	sp, r7
    58d0:	bd80      	pop	{r7, pc}
    58d2:	bf00      	nop

000058d4 <prv_list_insert_sorted>:


void prv_list_insert_sorted(void * entity, prv_list_t * L, int (*compare)(void *, void *))
{
    58d4:	b580      	push	{r7, lr}
    58d6:	b088      	sub	sp, #32
    58d8:	af00      	add	r7, sp, #0
    58da:	60f8      	str	r0, [r7, #12]
    58dc:	60b9      	str	r1, [r7, #8]
    58de:	607a      	str	r2, [r7, #4]
    volatile  prv_item_t * pIndex;
    int i;
	int len = prv_list_get_length(L);
    58e0:	68bb      	ldr	r3, [r7, #8]
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	617b      	str	r3, [r7, #20]

	prv_item_t * item = (prv_item_t*)port_malloc(sizeof(prv_item_t));
    58e6:	2010      	movs	r0, #16
    58e8:	f7fe febc 	bl	4664 <pvPortMalloc>
    58ec:	6138      	str	r0, [r7, #16]
	prv_item_initialize(entity, item);
    58ee:	68f8      	ldr	r0, [r7, #12]
    58f0:	6939      	ldr	r1, [r7, #16]
    58f2:	f7ff ff75 	bl	57e0 <prv_item_initialize>

    if(len == 0){
    58f6:	697b      	ldr	r3, [r7, #20]
    58f8:	2b00      	cmp	r3, #0
    58fa:	d111      	bne.n	5920 <prv_list_insert_sorted+0x4c>
        L->first = L->last = L->current = item;
    58fc:	68bb      	ldr	r3, [r7, #8]
    58fe:	693a      	ldr	r2, [r7, #16]
    5900:	60da      	str	r2, [r3, #12]
    5902:	68bb      	ldr	r3, [r7, #8]
    5904:	68da      	ldr	r2, [r3, #12]
    5906:	68bb      	ldr	r3, [r7, #8]
    5908:	609a      	str	r2, [r3, #8]
    590a:	68bb      	ldr	r3, [r7, #8]
    590c:	689a      	ldr	r2, [r3, #8]
    590e:	68bb      	ldr	r3, [r7, #8]
    5910:	605a      	str	r2, [r3, #4]
        item->prev = item;
    5912:	693b      	ldr	r3, [r7, #16]
    5914:	693a      	ldr	r2, [r7, #16]
    5916:	60da      	str	r2, [r3, #12]
        item->next = item;
    5918:	693b      	ldr	r3, [r7, #16]
    591a:	693a      	ldr	r2, [r7, #16]
    591c:	609a      	str	r2, [r3, #8]
    591e:	e035      	b.n	598c <prv_list_insert_sorted+0xb8>
    }else{
        pIndex = prv_list_get_first_item(L);
    5920:	68bb      	ldr	r3, [r7, #8]
    5922:	685b      	ldr	r3, [r3, #4]
    5924:	61fb      	str	r3, [r7, #28]
        for( i = 0; i < len; ++i, pIndex = prv_item_get_next(pIndex)){
    5926:	2300      	movs	r3, #0
    5928:	61bb      	str	r3, [r7, #24]
    592a:	e016      	b.n	595a <prv_list_insert_sorted+0x86>
            if(1 == compare(entity, prv_item_get_entity(pIndex))){
    592c:	69fb      	ldr	r3, [r7, #28]
    592e:	681a      	ldr	r2, [r3, #0]
    5930:	687b      	ldr	r3, [r7, #4]
    5932:	68f8      	ldr	r0, [r7, #12]
    5934:	4611      	mov	r1, r2
    5936:	4798      	blx	r3
    5938:	4603      	mov	r3, r0
    593a:	2b01      	cmp	r3, #1
    593c:	d107      	bne.n	594e <prv_list_insert_sorted+0x7a>
                if( i == 0 ){
    593e:	69bb      	ldr	r3, [r7, #24]
    5940:	2b00      	cmp	r3, #0
    5942:	d103      	bne.n	594c <prv_list_insert_sorted+0x78>
					L->first = item;  // the entity should be the first one
    5944:	68bb      	ldr	r3, [r7, #8]
    5946:	693a      	ldr	r2, [r7, #16]
    5948:	605a      	str	r2, [r3, #4]
                }
				break; // find the right position
    594a:	e00a      	b.n	5962 <prv_list_insert_sorted+0x8e>
    594c:	e009      	b.n	5962 <prv_list_insert_sorted+0x8e>
        L->first = L->last = L->current = item;
        item->prev = item;
        item->next = item;
    }else{
        pIndex = prv_list_get_first_item(L);
        for( i = 0; i < len; ++i, pIndex = prv_item_get_next(pIndex)){
    594e:	69bb      	ldr	r3, [r7, #24]
    5950:	3301      	adds	r3, #1
    5952:	61bb      	str	r3, [r7, #24]
    5954:	69fb      	ldr	r3, [r7, #28]
    5956:	689b      	ldr	r3, [r3, #8]
    5958:	61fb      	str	r3, [r7, #28]
    595a:	69ba      	ldr	r2, [r7, #24]
    595c:	697b      	ldr	r3, [r7, #20]
    595e:	429a      	cmp	r2, r3
    5960:	dbe4      	blt.n	592c <prv_list_insert_sorted+0x58>
					L->first = item;  // the entity should be the first one
                }
				break; // find the right position
            }
        }
        if( i == len ){
    5962:	69ba      	ldr	r2, [r7, #24]
    5964:	697b      	ldr	r3, [r7, #20]
    5966:	429a      	cmp	r2, r3
    5968:	d102      	bne.n	5970 <prv_list_insert_sorted+0x9c>
			L->last = item; // the entity should be the last one
    596a:	68bb      	ldr	r3, [r7, #8]
    596c:	693a      	ldr	r2, [r7, #16]
    596e:	609a      	str	r2, [r3, #8]
        }
        item->next = (prv_item_t *)pIndex;
    5970:	693b      	ldr	r3, [r7, #16]
    5972:	69fa      	ldr	r2, [r7, #28]
    5974:	609a      	str	r2, [r3, #8]
        item->prev = pIndex->prev;
    5976:	69fb      	ldr	r3, [r7, #28]
    5978:	68da      	ldr	r2, [r3, #12]
    597a:	693b      	ldr	r3, [r7, #16]
    597c:	60da      	str	r2, [r3, #12]
        pIndex->prev->next = item;
    597e:	69fb      	ldr	r3, [r7, #28]
    5980:	68db      	ldr	r3, [r3, #12]
    5982:	693a      	ldr	r2, [r7, #16]
    5984:	609a      	str	r2, [r3, #8]
        pIndex->prev = item;
    5986:	69fb      	ldr	r3, [r7, #28]
    5988:	693a      	ldr	r2, [r7, #16]
    598a:	60da      	str	r2, [r3, #12]
    }

    L->length ++;
    598c:	68bb      	ldr	r3, [r7, #8]
    598e:	681b      	ldr	r3, [r3, #0]
    5990:	1c5a      	adds	r2, r3, #1
    5992:	68bb      	ldr	r3, [r7, #8]
    5994:	601a      	str	r2, [r3, #0]
    item->owner = (void *)L;
    5996:	693b      	ldr	r3, [r7, #16]
    5998:	68ba      	ldr	r2, [r7, #8]
    599a:	605a      	str	r2, [r3, #4]
}
    599c:	3720      	adds	r7, #32
    599e:	46bd      	mov	sp, r7
    59a0:	bd80      	pop	{r7, pc}
    59a2:	bf00      	nop

000059a4 <prv_list_remove>:


void prv_list_remove(prv_item_t * item)
{
    59a4:	b580      	push	{r7, lr}
    59a6:	b084      	sub	sp, #16
    59a8:	af00      	add	r7, sp, #0
    59aa:	6078      	str	r0, [r7, #4]
    prv_list_t * L = (prv_list_t *)item->owner;
    59ac:	687b      	ldr	r3, [r7, #4]
    59ae:	685b      	ldr	r3, [r3, #4]
    59b0:	60fb      	str	r3, [r7, #12]

    if(L->length == 0){
    59b2:	68fb      	ldr	r3, [r7, #12]
    59b4:	681b      	ldr	r3, [r3, #0]
    59b6:	2b00      	cmp	r3, #0
    59b8:	d100      	bne.n	59bc <prv_list_remove+0x18>
        //port_print("error: no event could be remove in this event list; in prv_list_remove()\n\r");
		return;
    59ba:	e033      	b.n	5a24 <prv_list_remove+0x80>
    }

    if(L->length == 1){
    59bc:	68fb      	ldr	r3, [r7, #12]
    59be:	681b      	ldr	r3, [r3, #0]
    59c0:	2b01      	cmp	r3, #1
    59c2:	d109      	bne.n	59d8 <prv_list_remove+0x34>
        L->first = NULL;
    59c4:	68fb      	ldr	r3, [r7, #12]
    59c6:	2200      	movs	r2, #0
    59c8:	605a      	str	r2, [r3, #4]
        L->last = NULL;
    59ca:	68fb      	ldr	r3, [r7, #12]
    59cc:	2200      	movs	r2, #0
    59ce:	609a      	str	r2, [r3, #8]
		L->current = NULL;
    59d0:	68fb      	ldr	r3, [r7, #12]
    59d2:	2200      	movs	r2, #0
    59d4:	60da      	str	r2, [r3, #12]
    59d6:	e01b      	b.n	5a10 <prv_list_remove+0x6c>
    }else{
        if(item == prv_list_get_first_item(L)){
    59d8:	68fb      	ldr	r3, [r7, #12]
    59da:	685a      	ldr	r2, [r3, #4]
    59dc:	687b      	ldr	r3, [r7, #4]
    59de:	429a      	cmp	r2, r3
    59e0:	d103      	bne.n	59ea <prv_list_remove+0x46>
            L->first = item->next;
    59e2:	687b      	ldr	r3, [r7, #4]
    59e4:	689a      	ldr	r2, [r3, #8]
    59e6:	68fb      	ldr	r3, [r7, #12]
    59e8:	605a      	str	r2, [r3, #4]
        }
        if(item == prv_list_get_last_item(L)){
    59ea:	68fb      	ldr	r3, [r7, #12]
    59ec:	689a      	ldr	r2, [r3, #8]
    59ee:	687b      	ldr	r3, [r7, #4]
    59f0:	429a      	cmp	r2, r3
    59f2:	d103      	bne.n	59fc <prv_list_remove+0x58>
            L->last = item->prev;
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	68da      	ldr	r2, [r3, #12]
    59f8:	68fb      	ldr	r3, [r7, #12]
    59fa:	609a      	str	r2, [r3, #8]
        }
        item->prev->next = item->next;
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	68db      	ldr	r3, [r3, #12]
    5a00:	687a      	ldr	r2, [r7, #4]
    5a02:	6892      	ldr	r2, [r2, #8]
    5a04:	609a      	str	r2, [r3, #8]
        item->next->prev = item->prev;
    5a06:	687b      	ldr	r3, [r7, #4]
    5a08:	689b      	ldr	r3, [r3, #8]
    5a0a:	687a      	ldr	r2, [r7, #4]
    5a0c:	68d2      	ldr	r2, [r2, #12]
    5a0e:	60da      	str	r2, [r3, #12]
    }

	port_free(item); // free the memory of item but not the entity
    5a10:	6878      	ldr	r0, [r7, #4]
    5a12:	f7fe feeb 	bl	47ec <vPortFree>
	item = NULL;
    5a16:	2300      	movs	r3, #0
    5a18:	607b      	str	r3, [r7, #4]
    L->length --;
    5a1a:	68fb      	ldr	r3, [r7, #12]
    5a1c:	681b      	ldr	r3, [r3, #0]
    5a1e:	1e5a      	subs	r2, r3, #1
    5a20:	68fb      	ldr	r3, [r7, #12]
    5a22:	601a      	str	r2, [r3, #0]
}
    5a24:	3710      	adds	r7, #16
    5a26:	46bd      	mov	sp, r7
    5a28:	bd80      	pop	{r7, pc}
    5a2a:	bf00      	nop

00005a2c <prv_list_pop>:


// remove and return the first item of a list
void * prv_list_pop(prv_list_t * L)
{
    5a2c:	b580      	push	{r7, lr}
    5a2e:	b084      	sub	sp, #16
    5a30:	af00      	add	r7, sp, #0
    5a32:	6078      	str	r0, [r7, #4]
    if(L->length == 0){
    5a34:	687b      	ldr	r3, [r7, #4]
    5a36:	681b      	ldr	r3, [r3, #0]
    5a38:	2b00      	cmp	r3, #0
    5a3a:	d101      	bne.n	5a40 <prv_list_pop+0x14>
        return NULL;
    5a3c:	2300      	movs	r3, #0
    5a3e:	e009      	b.n	5a54 <prv_list_pop+0x28>
    }

	void * entity = L->first->entity;
    5a40:	687b      	ldr	r3, [r7, #4]
    5a42:	685b      	ldr	r3, [r3, #4]
    5a44:	681b      	ldr	r3, [r3, #0]
    5a46:	60fb      	str	r3, [r7, #12]
    prv_list_remove(L->first);
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	685b      	ldr	r3, [r3, #4]
    5a4c:	4618      	mov	r0, r3
    5a4e:	f7ff ffa9 	bl	59a4 <prv_list_remove>

    return entity;
    5a52:	68fb      	ldr	r3, [r7, #12]
}
    5a54:	4618      	mov	r0, r3
    5a56:	3710      	adds	r7, #16
    5a58:	46bd      	mov	sp, r7
    5a5a:	bd80      	pop	{r7, pc}

00005a5c <prv_modeltime_init>:
static prv_tick_t modeltime;
static ps_mode_t current_mode;
extern ps_task_t tasks[NUMOFTASKS];

void prv_modeltime_init(ps_mode_t m)
{
    5a5c:	b480      	push	{r7}
    5a5e:	b083      	sub	sp, #12
    5a60:	af00      	add	r7, sp, #0
    5a62:	6078      	str	r0, [r7, #4]
	current_mode = m; // set the m as the current mode
    5a64:	f24e 0334 	movw	r3, #57396	; 0xe034
    5a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a6c:	687a      	ldr	r2, [r7, #4]
    5a6e:	601a      	str	r2, [r3, #0]
	modestart = 0;    // simulation, each mode start at 0
    5a70:	f24e 032c 	movw	r3, #57388	; 0xe02c
    5a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a78:	2200      	movs	r2, #0
    5a7a:	601a      	str	r2, [r3, #0]
	modeltime = 0;
    5a7c:	f24e 0330 	movw	r3, #57392	; 0xe030
    5a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a84:	2200      	movs	r2, #0
    5a86:	601a      	str	r2, [r3, #0]
}
    5a88:	370c      	adds	r7, #12
    5a8a:	46bd      	mov	sp, r7
    5a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a90:	4770      	bx	lr
    5a92:	bf00      	nop

00005a94 <prv_modeltime_unit_start>:

prv_tick_t prv_modeltime_unit_start()
{
    5a94:	b480      	push	{r7}
    5a96:	af00      	add	r7, sp, #0
	// I'am a genius, to implement the duration like (x,y]
	// for example, unit = 500, then the time point 500 is the end of the first unit not the start of the second unit
	return modeltime - (modeltime - modestart - 1)%(prv_mode_get_unit(current_mode)) - 1;
    5a98:	f24e 0330 	movw	r3, #57392	; 0xe030
    5a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa0:	6819      	ldr	r1, [r3, #0]
    5aa2:	f24e 0330 	movw	r3, #57392	; 0xe030
    5aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aaa:	681a      	ldr	r2, [r3, #0]
    5aac:	f24e 032c 	movw	r3, #57388	; 0xe02c
    5ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab4:	681b      	ldr	r3, [r3, #0]
    5ab6:	1ad3      	subs	r3, r2, r3
    5ab8:	1e5a      	subs	r2, r3, #1
    5aba:	f24e 0334 	movw	r3, #57396	; 0xe034
    5abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac2:	681b      	ldr	r3, [r3, #0]
    5ac4:	689b      	ldr	r3, [r3, #8]
    5ac6:	fb92 f0f3 	sdiv	r0, r2, r3
    5aca:	fb03 f300 	mul.w	r3, r3, r0
    5ace:	1ad3      	subs	r3, r2, r3
    5ad0:	1acb      	subs	r3, r1, r3
    5ad2:	3b01      	subs	r3, #1
}
    5ad4:	4618      	mov	r0, r3
    5ad6:	46bd      	mov	sp, r7
    5ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5adc:	4770      	bx	lr
    5ade:	bf00      	nop

00005ae0 <prv_modeltime_compute_start>:

prv_tick_t prv_modeltime_compute_start()
{
    5ae0:	b598      	push	{r3, r4, r7, lr}
    5ae2:	af00      	add	r7, sp, #0
	return prv_modeltime_unit_start() +  prv_duration_get_input();
    5ae4:	f7ff ffd6 	bl	5a94 <prv_modeltime_unit_start>
    5ae8:	4604      	mov	r4, r0
    5aea:	f000 f95b 	bl	5da4 <prv_duration_get_input>
    5aee:	4603      	mov	r3, r0
    5af0:	4423      	add	r3, r4
}
    5af2:	4618      	mov	r0, r3
    5af4:	bd98      	pop	{r3, r4, r7, pc}
    5af6:	bf00      	nop

00005af8 <prv_modeltime_output_start>:

prv_tick_t prv_modeltime_output_start()
{
    5af8:	b598      	push	{r3, r4, r7, lr}
    5afa:	af00      	add	r7, sp, #0
	return prv_modeltime_unit_start() + prv_mode_get_unit(current_mode) - prv_duration_get_output();
    5afc:	f7ff ffca 	bl	5a94 <prv_modeltime_unit_start>
    5b00:	4602      	mov	r2, r0
    5b02:	f24e 0334 	movw	r3, #57396	; 0xe034
    5b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b0a:	681b      	ldr	r3, [r3, #0]
    5b0c:	689b      	ldr	r3, [r3, #8]
    5b0e:	18d4      	adds	r4, r2, r3
    5b10:	f000 f954 	bl	5dbc <prv_duration_get_output>
    5b14:	4603      	mov	r3, r0
    5b16:	1ae3      	subs	r3, r4, r3
}
    5b18:	4618      	mov	r0, r3
    5b1a:	bd98      	pop	{r3, r4, r7, pc}

00005b1c <prv_modeltime_unit_end>:

prv_tick_t prv_modeltime_unit_end()
{
    5b1c:	b598      	push	{r3, r4, r7, lr}
    5b1e:	af00      	add	r7, sp, #0
	return prv_modeltime_output_start() + prv_duration_get_output();
    5b20:	f7ff ffea 	bl	5af8 <prv_modeltime_output_start>
    5b24:	4604      	mov	r4, r0
    5b26:	f000 f949 	bl	5dbc <prv_duration_get_output>
    5b2a:	4603      	mov	r3, r0
    5b2c:	4423      	add	r3, r4
}
    5b2e:	4618      	mov	r0, r3
    5b30:	bd98      	pop	{r3, r4, r7, pc}
    5b32:	bf00      	nop

00005b34 <prv_modeltime_run>:

// simulate the execution of a servant and return its release time
prv_tick_t prv_modeltime_run(ps_servant_t s )
{
    5b34:	b590      	push	{r4, r7, lr}
    5b36:	b085      	sub	sp, #20
    5b38:	af00      	add	r7, sp, #0
    5b3a:	6078      	str	r0, [r7, #4]
	prv_tick_t release;
	if(s->type == 0){
    5b3c:	687b      	ldr	r3, [r7, #4]
    5b3e:	685b      	ldr	r3, [r3, #4]
    5b40:	2b00      	cmp	r3, #0
    5b42:	d113      	bne.n	5b6c <prv_modeltime_run+0x38>
		// I-Servants are executing with synchrony hypothesis
		release = modeltime; // modeltime is set to unit start time point each time enter a new unit
    5b44:	f24e 0330 	movw	r3, #57392	; 0xe030
    5b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b4c:	681b      	ldr	r3, [r3, #0]
    5b4e:	60fb      	str	r3, [r7, #12]
		modeltime += s->wcet;
    5b50:	687b      	ldr	r3, [r7, #4]
    5b52:	689a      	ldr	r2, [r3, #8]
    5b54:	f24e 0330 	movw	r3, #57392	; 0xe030
    5b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b5c:	681b      	ldr	r3, [r3, #0]
    5b5e:	441a      	add	r2, r3
    5b60:	f24e 0330 	movw	r3, #57392	; 0xe030
    5b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b68:	601a      	str	r2, [r3, #0]
    5b6a:	e07f      	b.n	5c6c <prv_modeltime_run+0x138>
	}else if(s->type == 1){
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	685b      	ldr	r3, [r3, #4]
    5b70:	2b01      	cmp	r3, #1
    5b72:	d13b      	bne.n	5bec <prv_modeltime_run+0xb8>
		if(modeltime < prv_modeltime_compute_start()){
    5b74:	f7ff ffb4 	bl	5ae0 <prv_modeltime_compute_start>
    5b78:	4602      	mov	r2, r0
    5b7a:	f24e 0330 	movw	r3, #57392	; 0xe030
    5b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b82:	681b      	ldr	r3, [r3, #0]
    5b84:	429a      	cmp	r2, r3
    5b86:	dd0d      	ble.n	5ba4 <prv_modeltime_run+0x70>
			modeltime = prv_modeltime_compute_start();
    5b88:	f7ff ffaa 	bl	5ae0 <prv_modeltime_compute_start>
    5b8c:	4602      	mov	r2, r0
    5b8e:	f24e 0330 	movw	r3, #57392	; 0xe030
    5b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b96:	601a      	str	r2, [r3, #0]
			release = modeltime;
    5b98:	f24e 0330 	movw	r3, #57392	; 0xe030
    5b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ba0:	681b      	ldr	r3, [r3, #0]
    5ba2:	60fb      	str	r3, [r7, #12]
		}
		if(modeltime + s->wcet <= prv_modeltime_output_start()){
    5ba4:	687b      	ldr	r3, [r7, #4]
    5ba6:	689a      	ldr	r2, [r3, #8]
    5ba8:	f24e 0330 	movw	r3, #57392	; 0xe030
    5bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bb0:	681b      	ldr	r3, [r3, #0]
    5bb2:	18d4      	adds	r4, r2, r3
    5bb4:	f7ff ffa0 	bl	5af8 <prv_modeltime_output_start>
    5bb8:	4603      	mov	r3, r0
    5bba:	429c      	cmp	r4, r3
    5bbc:	dc13      	bgt.n	5be6 <prv_modeltime_run+0xb2>
			release = modeltime;
    5bbe:	f24e 0330 	movw	r3, #57392	; 0xe030
    5bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	60fb      	str	r3, [r7, #12]
			modeltime += s->wcet; // simulate the execution
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	689a      	ldr	r2, [r3, #8]
    5bce:	f24e 0330 	movw	r3, #57392	; 0xe030
    5bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd6:	681b      	ldr	r3, [r3, #0]
    5bd8:	441a      	add	r2, r3
    5bda:	f24e 0330 	movw	r3, #57392	; 0xe030
    5bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5be2:	601a      	str	r2, [r3, #0]
    5be4:	e042      	b.n	5c6c <prv_modeltime_run+0x138>
		}else{
			return -1; // no enough time for this servants, the system enters idle state
    5be6:	f04f 33ff 	mov.w	r3, #4294967295
    5bea:	e040      	b.n	5c6e <prv_modeltime_run+0x13a>
		}
	}else{
		if(modeltime < prv_modeltime_output_start()){
    5bec:	f7ff ff84 	bl	5af8 <prv_modeltime_output_start>
    5bf0:	4602      	mov	r2, r0
    5bf2:	f24e 0330 	movw	r3, #57392	; 0xe030
    5bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bfa:	681b      	ldr	r3, [r3, #0]
    5bfc:	429a      	cmp	r2, r3
    5bfe:	dd07      	ble.n	5c10 <prv_modeltime_run+0xdc>
			modeltime = prv_modeltime_output_start();
    5c00:	f7ff ff7a 	bl	5af8 <prv_modeltime_output_start>
    5c04:	4602      	mov	r2, r0
    5c06:	f24e 0330 	movw	r3, #57392	; 0xe030
    5c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c0e:	601a      	str	r2, [r3, #0]
		}
		if(0 == (prv_modeltime_output_start() + prv_duration_get_output()) % tasks[s->tid]->period){
    5c10:	f7ff ff72 	bl	5af8 <prv_modeltime_output_start>
    5c14:	4604      	mov	r4, r0
    5c16:	f000 f8d1 	bl	5dbc <prv_duration_get_output>
    5c1a:	4603      	mov	r3, r0
    5c1c:	18e2      	adds	r2, r4, r3
    5c1e:	687b      	ldr	r3, [r7, #4]
    5c20:	68d9      	ldr	r1, [r3, #12]
    5c22:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
    5c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5c2e:	689b      	ldr	r3, [r3, #8]
    5c30:	fb92 f1f3 	sdiv	r1, r2, r3
    5c34:	fb03 f301 	mul.w	r3, r3, r1
    5c38:	1ad3      	subs	r3, r2, r3
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d113      	bne.n	5c66 <prv_modeltime_run+0x132>
			release = modeltime;
    5c3e:	f24e 0330 	movw	r3, #57392	; 0xe030
    5c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c46:	681b      	ldr	r3, [r3, #0]
    5c48:	60fb      	str	r3, [r7, #12]
			modeltime += s->wcet;
    5c4a:	687b      	ldr	r3, [r7, #4]
    5c4c:	689a      	ldr	r2, [r3, #8]
    5c4e:	f24e 0330 	movw	r3, #57392	; 0xe030
    5c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c56:	681b      	ldr	r3, [r3, #0]
    5c58:	441a      	add	r2, r3
    5c5a:	f24e 0330 	movw	r3, #57392	; 0xe030
    5c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c62:	601a      	str	r2, [r3, #0]
    5c64:	e002      	b.n	5c6c <prv_modeltime_run+0x138>
		}else{
			release = -1;
    5c66:	f04f 33ff 	mov.w	r3, #4294967295
    5c6a:	60fb      	str	r3, [r7, #12]
		}
	}
	return release;
    5c6c:	68fb      	ldr	r3, [r7, #12]
}
    5c6e:	4618      	mov	r0, r3
    5c70:	3714      	adds	r7, #20
    5c72:	46bd      	mov	sp, r7
    5c74:	bd90      	pop	{r4, r7, pc}
    5c76:	bf00      	nop

00005c78 <prv_modeltime_set_new_unit_start>:

// start a new unit, must be called in function improvedTSA
// when all O-Servant are added into STT
void prv_modeltime_set_new_unit_start()
{
    5c78:	b580      	push	{r7, lr}
    5c7a:	af00      	add	r7, sp, #0
	modeltime = prv_modeltime_unit_end();
    5c7c:	f7ff ff4e 	bl	5b1c <prv_modeltime_unit_end>
    5c80:	4602      	mov	r2, r0
    5c82:	f24e 0330 	movw	r3, #57392	; 0xe030
    5c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c8a:	601a      	str	r2, [r3, #0]
}
    5c8c:	bd80      	pop	{r7, pc}
    5c8e:	bf00      	nop

00005c90 <prv_modeltime_is_mode_end>:

bool prv_modeltime_is_mode_end()
{
    5c90:	b480      	push	{r7}
    5c92:	af00      	add	r7, sp, #0
	if(modeltime == modestart + prv_mode_get_period(current_mode)){
    5c94:	f24e 0334 	movw	r3, #57396	; 0xe034
    5c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c9c:	681b      	ldr	r3, [r3, #0]
    5c9e:	685a      	ldr	r2, [r3, #4]
    5ca0:	f24e 032c 	movw	r3, #57388	; 0xe02c
    5ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca8:	681b      	ldr	r3, [r3, #0]
    5caa:	441a      	add	r2, r3
    5cac:	f24e 0330 	movw	r3, #57392	; 0xe030
    5cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cb4:	681b      	ldr	r3, [r3, #0]
    5cb6:	429a      	cmp	r2, r3
    5cb8:	d101      	bne.n	5cbe <prv_modeltime_is_mode_end+0x2e>
		return 1;
    5cba:	2301      	movs	r3, #1
    5cbc:	e000      	b.n	5cc0 <prv_modeltime_is_mode_end+0x30>
	}else{
		return 0;
    5cbe:	2300      	movs	r3, #0
	}
}
    5cc0:	4618      	mov	r0, r3
    5cc2:	46bd      	mov	sp, r7
    5cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cc8:	4770      	bx	lr
    5cca:	bf00      	nop

00005ccc <prv_modeltime_is_period_start>:

bool prv_modeltime_is_period_start(ps_task_t t)
{
    5ccc:	b480      	push	{r7}
    5cce:	b083      	sub	sp, #12
    5cd0:	af00      	add	r7, sp, #0
    5cd2:	6078      	str	r0, [r7, #4]
    if( (modeltime - modestart) % t->period == 0){
    5cd4:	f24e 0330 	movw	r3, #57392	; 0xe030
    5cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cdc:	681a      	ldr	r2, [r3, #0]
    5cde:	f24e 032c 	movw	r3, #57388	; 0xe02c
    5ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ce6:	681b      	ldr	r3, [r3, #0]
    5ce8:	1ad3      	subs	r3, r2, r3
    5cea:	687a      	ldr	r2, [r7, #4]
    5cec:	6892      	ldr	r2, [r2, #8]
    5cee:	fb93 f1f2 	sdiv	r1, r3, r2
    5cf2:	fb02 f201 	mul.w	r2, r2, r1
    5cf6:	1a9b      	subs	r3, r3, r2
    5cf8:	2b00      	cmp	r3, #0
    5cfa:	d101      	bne.n	5d00 <prv_modeltime_is_period_start+0x34>
        return 1;
    5cfc:	2301      	movs	r3, #1
    5cfe:	e000      	b.n	5d02 <prv_modeltime_is_period_start+0x36>
    }else{
        return 0;
    5d00:	2300      	movs	r3, #0
    }
}
    5d02:	4618      	mov	r0, r3
    5d04:	370c      	adds	r7, #12
    5d06:	46bd      	mov	sp, r7
    5d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d0c:	4770      	bx	lr
    5d0e:	bf00      	nop

00005d10 <prv_time_trigger>:
static prv_tick_t INPUT;
static prv_tick_t OUTPUT;


void prv_time_trigger()
{
    5d10:	b580      	push	{r7, lr}
    5d12:	af00      	add	r7, sp, #0
    if( prv_mode_is_period_end() == 1){  /* start a new mode, and trigger all the tasks in this mode*/
    5d14:	f7fe fde2 	bl	48dc <prv_mode_is_period_end>
    5d18:	4603      	mov	r3, r0
    5d1a:	2b01      	cmp	r3, #1
    5d1c:	d101      	bne.n	5d22 <prv_time_trigger+0x12>
		prv_mode_switch();
    5d1e:	f7fe feb7 	bl	4a90 <prv_mode_switch>
	}

	if(prv_ef_is_time_to_trigger() == 1){
    5d22:	f7ff fcbd 	bl	56a0 <prv_ef_is_time_to_trigger>
    5d26:	4603      	mov	r3, r0
    5d28:	2b01      	cmp	r3, #1
    5d2a:	d101      	bne.n	5d30 <prv_time_trigger+0x20>
		prv_ef_triggering();
    5d2c:	f7ff fd2a 	bl	5784 <prv_ef_triggering>
	}
}
    5d30:	bd80      	pop	{r7, pc}
    5d32:	bf00      	nop

00005d34 <myHardwareInit>:

void myHardwareInit(){
    5d34:	b580      	push	{r7, lr}
    5d36:	af00      	add	r7, sp, #0
	init_led();
    5d38:	f000 fb14 	bl	6364 <init_led>
	init_rs232();
    5d3c:	f000 fb74 	bl	6428 <init_rs232>
	enable_rs232_interrupts();
    5d40:	f000 fbb8 	bl	64b4 <enable_rs232_interrupts>
	enable_rs232();
    5d44:	f000 fbd8 	bl	64f8 <enable_rs232>
}
    5d48:	bd80      	pop	{r7, pc}
    5d4a:	bf00      	nop

00005d4c <system_start>:

void system_start()
{
    5d4c:	b580      	push	{r7, lr}
    5d4e:	af00      	add	r7, sp, #0
    myHardwareInit();
    5d50:	f7ff fff0 	bl	5d34 <myHardwareInit>
    prv_ef_create();
    5d54:	f7ff fc80 	bl	5658 <prv_ef_create>
	prv_mode_switch();
    5d58:	f7fe fe9a 	bl	4a90 <prv_mode_switch>
    port_scheduler_start();
    5d5c:	f7fd fe1c 	bl	3998 <vTaskStartScheduler>
}
    5d60:	bd80      	pop	{r7, pc}
    5d62:	bf00      	nop

00005d64 <ps_duration_set_input>:

void ps_duration_set_input(prv_tick_t t)
{
    5d64:	b480      	push	{r7}
    5d66:	b083      	sub	sp, #12
    5d68:	af00      	add	r7, sp, #0
    5d6a:	6078      	str	r0, [r7, #4]
	INPUT = t;
    5d6c:	f24e 0338 	movw	r3, #57400	; 0xe038
    5d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d74:	687a      	ldr	r2, [r7, #4]
    5d76:	601a      	str	r2, [r3, #0]
}
    5d78:	370c      	adds	r7, #12
    5d7a:	46bd      	mov	sp, r7
    5d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d80:	4770      	bx	lr
    5d82:	bf00      	nop

00005d84 <ps_duration_set_output>:

void ps_duration_set_output(prv_tick_t t)
{
    5d84:	b480      	push	{r7}
    5d86:	b083      	sub	sp, #12
    5d88:	af00      	add	r7, sp, #0
    5d8a:	6078      	str	r0, [r7, #4]
	OUTPUT = t;
    5d8c:	f24e 033c 	movw	r3, #57404	; 0xe03c
    5d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d94:	687a      	ldr	r2, [r7, #4]
    5d96:	601a      	str	r2, [r3, #0]
}
    5d98:	370c      	adds	r7, #12
    5d9a:	46bd      	mov	sp, r7
    5d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5da0:	4770      	bx	lr
    5da2:	bf00      	nop

00005da4 <prv_duration_get_input>:

prv_tick_t prv_duration_get_input()
{
    5da4:	b480      	push	{r7}
    5da6:	af00      	add	r7, sp, #0
	return INPUT;
    5da8:	f24e 0338 	movw	r3, #57400	; 0xe038
    5dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db0:	681b      	ldr	r3, [r3, #0]
}
    5db2:	4618      	mov	r0, r3
    5db4:	46bd      	mov	sp, r7
    5db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dba:	4770      	bx	lr

00005dbc <prv_duration_get_output>:

prv_tick_t prv_duration_get_output()
{
    5dbc:	b480      	push	{r7}
    5dbe:	af00      	add	r7, sp, #0
	return OUTPUT;
    5dc0:	f24e 033c 	movw	r3, #57404	; 0xe03c
    5dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dc8:	681b      	ldr	r3, [r3, #0]
}
    5dca:	4618      	mov	r0, r3
    5dcc:	46bd      	mov	sp, r7
    5dce:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dd2:	4770      	bx	lr

00005dd4 <myTraceCreate>:

void myTraceCreate      (){
    5dd4:	b480      	push	{r7}
    5dd6:	af00      	add	r7, sp, #0
}
    5dd8:	46bd      	mov	sp, r7
    5dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dde:	4770      	bx	lr

00005de0 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
    5de0:	b480      	push	{r7}
    5de2:	af00      	add	r7, sp, #0
}
    5de4:	46bd      	mov	sp, r7
    5de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dea:	4770      	bx	lr

00005dec <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
    5dec:	b480      	push	{r7}
    5dee:	af00      	add	r7, sp, #0
}
    5df0:	46bd      	mov	sp, r7
    5df2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5df6:	4770      	bx	lr

00005df8 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
    5df8:	b580      	push	{r7, lr}
    5dfa:	af00      	add	r7, sp, #0
	prv_time_trigger();
    5dfc:	f7ff ff88 	bl	5d10 <prv_time_trigger>
}
    5e00:	bd80      	pop	{r7, pc}
    5e02:	bf00      	nop

00005e04 <vApplicationIdleHook>:

void vApplicationIdleHook()
{
    5e04:	b480      	push	{r7}
    5e06:	af00      	add	r7, sp, #0
}
    5e08:	46bd      	mov	sp, r7
    5e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e0e:	4770      	bx	lr

00005e10 <gcd>:
/**
 *get struct pointer from member pointer
 */

int gcd(int a, int b)
{
    5e10:	b580      	push	{r7, lr}
    5e12:	b082      	sub	sp, #8
    5e14:	af00      	add	r7, sp, #0
    5e16:	6078      	str	r0, [r7, #4]
    5e18:	6039      	str	r1, [r7, #0]
	return b == 0?a:gcd(b,a%b);
    5e1a:	683b      	ldr	r3, [r7, #0]
    5e1c:	2b00      	cmp	r3, #0
    5e1e:	d00d      	beq.n	5e3c <gcd+0x2c>
    5e20:	687b      	ldr	r3, [r7, #4]
    5e22:	683a      	ldr	r2, [r7, #0]
    5e24:	fb93 f2f2 	sdiv	r2, r3, r2
    5e28:	6839      	ldr	r1, [r7, #0]
    5e2a:	fb01 f202 	mul.w	r2, r1, r2
    5e2e:	1a9b      	subs	r3, r3, r2
    5e30:	6838      	ldr	r0, [r7, #0]
    5e32:	4619      	mov	r1, r3
    5e34:	f7ff ffec 	bl	5e10 <gcd>
    5e38:	4603      	mov	r3, r0
    5e3a:	e000      	b.n	5e3e <gcd+0x2e>
    5e3c:	687b      	ldr	r3, [r7, #4]
}
    5e3e:	4618      	mov	r0, r3
    5e40:	3708      	adds	r7, #8
    5e42:	46bd      	mov	sp, r7
    5e44:	bd80      	pop	{r7, pc}
    5e46:	bf00      	nop

00005e48 <lcm>:

int lcm(int a, int b)
{
    5e48:	b590      	push	{r4, r7, lr}
    5e4a:	b083      	sub	sp, #12
    5e4c:	af00      	add	r7, sp, #0
    5e4e:	6078      	str	r0, [r7, #4]
    5e50:	6039      	str	r1, [r7, #0]
	return (a*b)/gcd(a,b);
    5e52:	687b      	ldr	r3, [r7, #4]
    5e54:	683a      	ldr	r2, [r7, #0]
    5e56:	fb02 f403 	mul.w	r4, r2, r3
    5e5a:	6878      	ldr	r0, [r7, #4]
    5e5c:	6839      	ldr	r1, [r7, #0]
    5e5e:	f7ff ffd7 	bl	5e10 <gcd>
    5e62:	4603      	mov	r3, r0
    5e64:	fb94 f3f3 	sdiv	r3, r4, r3
}
    5e68:	4618      	mov	r0, r3
    5e6a:	370c      	adds	r7, #12
    5e6c:	46bd      	mov	sp, r7
    5e6e:	bd90      	pop	{r4, r7, pc}

00005e70 <itoa>:

// a simple itoa implementation

void itoa(int n , char *s)
{
    5e70:	b480      	push	{r7}
    5e72:	b085      	sub	sp, #20
    5e74:	af00      	add	r7, sp, #0
    5e76:	6078      	str	r0, [r7, #4]
    5e78:	6039      	str	r1, [r7, #0]
	int i = 0;
    5e7a:	2300      	movs	r3, #0
    5e7c:	60fb      	str	r3, [r7, #12]
	while(n){
    5e7e:	e022      	b.n	5ec6 <itoa+0x56>
		s[i++] = n%10 + '0';
    5e80:	68fb      	ldr	r3, [r7, #12]
    5e82:	1c5a      	adds	r2, r3, #1
    5e84:	60fa      	str	r2, [r7, #12]
    5e86:	683a      	ldr	r2, [r7, #0]
    5e88:	18d0      	adds	r0, r2, r3
    5e8a:	6879      	ldr	r1, [r7, #4]
    5e8c:	f246 6367 	movw	r3, #26215	; 0x6667
    5e90:	f2c6 6366 	movt	r3, #26214	; 0x6666
    5e94:	fb83 2301 	smull	r2, r3, r3, r1
    5e98:	109a      	asrs	r2, r3, #2
    5e9a:	17cb      	asrs	r3, r1, #31
    5e9c:	1ad2      	subs	r2, r2, r3
    5e9e:	4613      	mov	r3, r2
    5ea0:	009b      	lsls	r3, r3, #2
    5ea2:	4413      	add	r3, r2
    5ea4:	005b      	lsls	r3, r3, #1
    5ea6:	1aca      	subs	r2, r1, r3
    5ea8:	b2d3      	uxtb	r3, r2
    5eaa:	3330      	adds	r3, #48	; 0x30
    5eac:	b2db      	uxtb	r3, r3
    5eae:	7003      	strb	r3, [r0, #0]
		n /= 10;
    5eb0:	687a      	ldr	r2, [r7, #4]
    5eb2:	f246 6367 	movw	r3, #26215	; 0x6667
    5eb6:	f2c6 6366 	movt	r3, #26214	; 0x6666
    5eba:	fb83 1302 	smull	r1, r3, r3, r2
    5ebe:	1099      	asrs	r1, r3, #2
    5ec0:	17d3      	asrs	r3, r2, #31
    5ec2:	1acb      	subs	r3, r1, r3
    5ec4:	607b      	str	r3, [r7, #4]
// a simple itoa implementation

void itoa(int n , char *s)
{
	int i = 0;
	while(n){
    5ec6:	687b      	ldr	r3, [r7, #4]
    5ec8:	2b00      	cmp	r3, #0
    5eca:	d1d9      	bne.n	5e80 <itoa+0x10>
		s[i++] = n%10 + '0';
		n /= 10;
	}
	s[i] = '\0';
    5ecc:	68fb      	ldr	r3, [r7, #12]
    5ece:	683a      	ldr	r2, [r7, #0]
    5ed0:	4413      	add	r3, r2
    5ed2:	2200      	movs	r2, #0
    5ed4:	701a      	strb	r2, [r3, #0]
}
    5ed6:	3714      	adds	r7, #20
    5ed8:	46bd      	mov	sp, r7
    5eda:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ede:	4770      	bx	lr

00005ee0 <prv_hashtable_get_length>:
struct HashTable{
	int			length;
	struct kv ** table;
};

int prv_hashtable_get_length(struct HashTable * ht){
    5ee0:	b480      	push	{r7}
    5ee2:	b083      	sub	sp, #12
    5ee4:	af00      	add	r7, sp, #0
    5ee6:	6078      	str	r0, [r7, #4]
	return ht->length;
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	681b      	ldr	r3, [r3, #0]
}
    5eec:	4618      	mov	r0, r3
    5eee:	370c      	adds	r7, #12
    5ef0:	46bd      	mov	sp, r7
    5ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ef6:	4770      	bx	lr

00005ef8 <init_kv>:


static void init_kv(struct kv * kv)
{
    5ef8:	b480      	push	{r7}
    5efa:	b083      	sub	sp, #12
    5efc:	af00      	add	r7, sp, #0
    5efe:	6078      	str	r0, [r7, #4]
	kv->next = NULL;
    5f00:	687b      	ldr	r3, [r7, #4]
    5f02:	2200      	movs	r2, #0
    5f04:	601a      	str	r2, [r3, #0]
	kv->key  = NULL;
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	2200      	movs	r2, #0
    5f0a:	605a      	str	r2, [r3, #4]
	kv->value= NULL;
    5f0c:	687b      	ldr	r3, [r7, #4]
    5f0e:	2200      	movs	r2, #0
    5f10:	609a      	str	r2, [r3, #8]
	kv->free_value = NULL;
    5f12:	687b      	ldr	r3, [r7, #4]
    5f14:	2200      	movs	r2, #0
    5f16:	60da      	str	r2, [r3, #12]
}
    5f18:	370c      	adds	r7, #12
    5f1a:	46bd      	mov	sp, r7
    5f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f20:	4770      	bx	lr
    5f22:	bf00      	nop

00005f24 <free_kv>:

static void free_kv(struct kv * kv)
{
    5f24:	b580      	push	{r7, lr}
    5f26:	b082      	sub	sp, #8
    5f28:	af00      	add	r7, sp, #0
    5f2a:	6078      	str	r0, [r7, #4]
	if(kv){
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d016      	beq.n	5f60 <free_kv+0x3c>
		if(kv->free_value){
    5f32:	687b      	ldr	r3, [r7, #4]
    5f34:	68db      	ldr	r3, [r3, #12]
    5f36:	2b00      	cmp	r3, #0
    5f38:	d005      	beq.n	5f46 <free_kv+0x22>
			kv->free_value(kv->value);
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	68db      	ldr	r3, [r3, #12]
    5f3e:	687a      	ldr	r2, [r7, #4]
    5f40:	6892      	ldr	r2, [r2, #8]
    5f42:	4610      	mov	r0, r2
    5f44:	4798      	blx	r3
		}
		port_free(kv->key);
    5f46:	687b      	ldr	r3, [r7, #4]
    5f48:	685b      	ldr	r3, [r3, #4]
    5f4a:	4618      	mov	r0, r3
    5f4c:	f7fe fc4e 	bl	47ec <vPortFree>
		kv->key = NULL;
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	2200      	movs	r2, #0
    5f54:	605a      	str	r2, [r3, #4]
		port_free(kv);
    5f56:	6878      	ldr	r0, [r7, #4]
    5f58:	f7fe fc48 	bl	47ec <vPortFree>
		kv = NULL;
    5f5c:	2300      	movs	r3, #0
    5f5e:	607b      	str	r3, [r7, #4]
	}
}
    5f60:	3708      	adds	r7, #8
    5f62:	46bd      	mov	sp, r7
    5f64:	bd80      	pop	{r7, pc}
    5f66:	bf00      	nop

00005f68 <hash_33>:

static unsigned int hash_33(char * key)
{
    5f68:	b480      	push	{r7}
    5f6a:	b085      	sub	sp, #20
    5f6c:	af00      	add	r7, sp, #0
    5f6e:	6078      	str	r0, [r7, #4]
	unsigned int hash = 5381;
    5f70:	f241 5305 	movw	r3, #5381	; 0x1505
    5f74:	60fb      	str	r3, [r7, #12]
	int i;
	while( *key ){
    5f76:	e009      	b.n	5f8c <hash_33+0x24>
		hash = (hash << 5) + hash + *(key++);
    5f78:	68fb      	ldr	r3, [r7, #12]
    5f7a:	015a      	lsls	r2, r3, #5
    5f7c:	68fb      	ldr	r3, [r7, #12]
    5f7e:	441a      	add	r2, r3
    5f80:	687b      	ldr	r3, [r7, #4]
    5f82:	1c59      	adds	r1, r3, #1
    5f84:	6079      	str	r1, [r7, #4]
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	4413      	add	r3, r2
    5f8a:	60fb      	str	r3, [r7, #12]

static unsigned int hash_33(char * key)
{
	unsigned int hash = 5381;
	int i;
	while( *key ){
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	781b      	ldrb	r3, [r3, #0]
    5f90:	2b00      	cmp	r3, #0
    5f92:	d1f1      	bne.n	5f78 <hash_33+0x10>
		hash = (hash << 5) + hash + *(key++);
	}

	return hash%TABLESIZE;
    5f94:	68f9      	ldr	r1, [r7, #12]
    5f96:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    5f9a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    5f9e:	fba3 2301 	umull	r2, r3, r3, r1
    5fa2:	091a      	lsrs	r2, r3, #4
    5fa4:	4613      	mov	r3, r2
    5fa6:	009b      	lsls	r3, r3, #2
    5fa8:	4413      	add	r3, r2
    5faa:	009b      	lsls	r3, r3, #2
    5fac:	1aca      	subs	r2, r1, r3
    5fae:	4613      	mov	r3, r2
}
    5fb0:	4618      	mov	r0, r3
    5fb2:	3714      	adds	r7, #20
    5fb4:	46bd      	mov	sp, r7
    5fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fba:	4770      	bx	lr

00005fbc <prv_hashtable_new>:
	return src;
}
*/

prv_hashtable_t * prv_hashtable_new()
{
    5fbc:	b580      	push	{r7, lr}
    5fbe:	b082      	sub	sp, #8
    5fc0:	af00      	add	r7, sp, #0
	prv_hashtable_t * ht = (prv_hashtable_t *)port_malloc(sizeof(struct HashTable));
    5fc2:	2008      	movs	r0, #8
    5fc4:	f7fe fb4e 	bl	4664 <pvPortMalloc>
    5fc8:	6078      	str	r0, [r7, #4]
	if(NULL == ht){
    5fca:	687b      	ldr	r3, [r7, #4]
    5fcc:	2b00      	cmp	r3, #0
    5fce:	d104      	bne.n	5fda <prv_hashtable_new+0x1e>
		prv_hashtable_delete(ht);
    5fd0:	6878      	ldr	r0, [r7, #4]
    5fd2:	f000 f81d 	bl	6010 <prv_hashtable_delete>
		return NULL;
    5fd6:	2300      	movs	r3, #0
    5fd8:	e015      	b.n	6006 <prv_hashtable_new+0x4a>
	}
	ht->table = port_malloc(sizeof(struct kv *) * TABLESIZE);
    5fda:	2050      	movs	r0, #80	; 0x50
    5fdc:	f7fe fb42 	bl	4664 <pvPortMalloc>
    5fe0:	4602      	mov	r2, r0
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	605a      	str	r2, [r3, #4]
	if(NULL == ht->table){
    5fe6:	687b      	ldr	r3, [r7, #4]
    5fe8:	685b      	ldr	r3, [r3, #4]
    5fea:	2b00      	cmp	r3, #0
    5fec:	d104      	bne.n	5ff8 <prv_hashtable_new+0x3c>
		prv_hashtable_delete(ht);
    5fee:	6878      	ldr	r0, [r7, #4]
    5ff0:	f000 f80e 	bl	6010 <prv_hashtable_delete>
		return NULL;
    5ff4:	2300      	movs	r3, #0
    5ff6:	e006      	b.n	6006 <prv_hashtable_new+0x4a>
	}
	memset(ht->table, 0, sizeof(struct kv*)*TABLESIZE);
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	685b      	ldr	r3, [r3, #4]
    5ffc:	4618      	mov	r0, r3
    5ffe:	2100      	movs	r1, #0
    6000:	2250      	movs	r2, #80	; 0x50
    6002:	f000 fc57 	bl	68b4 <memset>
}
    6006:	4618      	mov	r0, r3
    6008:	3708      	adds	r7, #8
    600a:	46bd      	mov	sp, r7
    600c:	bd80      	pop	{r7, pc}
    600e:	bf00      	nop

00006010 <prv_hashtable_delete>:

void prv_hashtable_delete(prv_hashtable_t *ht)
{
    6010:	b580      	push	{r7, lr}
    6012:	b086      	sub	sp, #24
    6014:	af00      	add	r7, sp, #0
    6016:	6078      	str	r0, [r7, #4]
	if(ht){
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	2b00      	cmp	r3, #0
    601c:	d029      	beq.n	6072 <prv_hashtable_delete+0x62>
		if(ht->table){
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	685b      	ldr	r3, [r3, #4]
    6022:	2b00      	cmp	r3, #0
    6024:	d025      	beq.n	6072 <prv_hashtable_delete+0x62>
			int i = 0;
    6026:	2300      	movs	r3, #0
    6028:	617b      	str	r3, [r7, #20]
			for(;i<TABLESIZE;++i){
    602a:	e017      	b.n	605c <prv_hashtable_delete+0x4c>
				struct kv *p = ht->table[i];
    602c:	687b      	ldr	r3, [r7, #4]
    602e:	685a      	ldr	r2, [r3, #4]
    6030:	697b      	ldr	r3, [r7, #20]
    6032:	009b      	lsls	r3, r3, #2
    6034:	4413      	add	r3, r2
    6036:	681b      	ldr	r3, [r3, #0]
    6038:	613b      	str	r3, [r7, #16]
				struct kv *q = NULL;
    603a:	2300      	movs	r3, #0
    603c:	60fb      	str	r3, [r7, #12]
				while(p){
    603e:	e007      	b.n	6050 <prv_hashtable_delete+0x40>
					q = p->next;
    6040:	693b      	ldr	r3, [r7, #16]
    6042:	681b      	ldr	r3, [r3, #0]
    6044:	60fb      	str	r3, [r7, #12]
					free_kv(p);
    6046:	6938      	ldr	r0, [r7, #16]
    6048:	f7ff ff6c 	bl	5f24 <free_kv>
					p=q;
    604c:	68fb      	ldr	r3, [r7, #12]
    604e:	613b      	str	r3, [r7, #16]
		if(ht->table){
			int i = 0;
			for(;i<TABLESIZE;++i){
				struct kv *p = ht->table[i];
				struct kv *q = NULL;
				while(p){
    6050:	693b      	ldr	r3, [r7, #16]
    6052:	2b00      	cmp	r3, #0
    6054:	d1f4      	bne.n	6040 <prv_hashtable_delete+0x30>
void prv_hashtable_delete(prv_hashtable_t *ht)
{
	if(ht){
		if(ht->table){
			int i = 0;
			for(;i<TABLESIZE;++i){
    6056:	697b      	ldr	r3, [r7, #20]
    6058:	3301      	adds	r3, #1
    605a:	617b      	str	r3, [r7, #20]
    605c:	697b      	ldr	r3, [r7, #20]
    605e:	2b13      	cmp	r3, #19
    6060:	dde4      	ble.n	602c <prv_hashtable_delete+0x1c>
					q = p->next;
					free_kv(p);
					p=q;
				}
			}
			port_free(ht->table);
    6062:	687b      	ldr	r3, [r7, #4]
    6064:	685b      	ldr	r3, [r3, #4]
    6066:	4618      	mov	r0, r3
    6068:	f7fe fbc0 	bl	47ec <vPortFree>
			ht->table = NULL;
    606c:	687b      	ldr	r3, [r7, #4]
    606e:	2200      	movs	r2, #0
    6070:	605a      	str	r2, [r3, #4]
		}
	}
}
    6072:	3718      	adds	r7, #24
    6074:	46bd      	mov	sp, r7
    6076:	bd80      	pop	{r7, pc}

00006078 <prv_hashtable_put>:


int prv_hashtable_put(prv_hashtable_t *ht, char *key, void * value, void (*free_value)(void*))
{
    6078:	b580      	push	{r7, lr}
    607a:	b08a      	sub	sp, #40	; 0x28
    607c:	af00      	add	r7, sp, #0
    607e:	60f8      	str	r0, [r7, #12]
    6080:	60b9      	str	r1, [r7, #8]
    6082:	607a      	str	r2, [r7, #4]
    6084:	603b      	str	r3, [r7, #0]
	int i = hash_33(key);
    6086:	68b8      	ldr	r0, [r7, #8]
    6088:	f7ff ff6e 	bl	5f68 <hash_33>
    608c:	4603      	mov	r3, r0
    608e:	61fb      	str	r3, [r7, #28]
	struct kv * p = ht->table[i];
    6090:	68fb      	ldr	r3, [r7, #12]
    6092:	685a      	ldr	r2, [r3, #4]
    6094:	69fb      	ldr	r3, [r7, #28]
    6096:	009b      	lsls	r3, r3, #2
    6098:	4413      	add	r3, r2
    609a:	681b      	ldr	r3, [r3, #0]
    609c:	627b      	str	r3, [r7, #36]	; 0x24
	struct kv * prep = p;
    609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60a0:	623b      	str	r3, [r7, #32]

	while(p){
    60a2:	e011      	b.n	60c8 <prv_hashtable_put+0x50>
		if(strcmp(p->key, key)==0){
    60a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60a6:	685b      	ldr	r3, [r3, #4]
    60a8:	4618      	mov	r0, r3
    60aa:	68b9      	ldr	r1, [r7, #8]
    60ac:	f000 fc52 	bl	6954 <strcmp>
    60b0:	4603      	mov	r3, r0
    60b2:	2b00      	cmp	r3, #0
    60b4:	d103      	bne.n	60be <prv_hashtable_put+0x46>
			// no free function needs, because message are created as a stack variable instead of heap variable
			//if(p->free_value){
			//	p->free_value(p->value);
			//}
			p->value = value;
    60b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60b8:	687a      	ldr	r2, [r7, #4]
    60ba:	609a      	str	r2, [r3, #8]
			//p->free_value = vPortFree; // port_free can not be a pointer
			break;
    60bc:	e007      	b.n	60ce <prv_hashtable_put+0x56>
		}
		prep = p;
    60be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60c0:	623b      	str	r3, [r7, #32]
		p = p->next;
    60c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60c4:	681b      	ldr	r3, [r3, #0]
    60c6:	627b      	str	r3, [r7, #36]	; 0x24
{
	int i = hash_33(key);
	struct kv * p = ht->table[i];
	struct kv * prep = p;

	while(p){
    60c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60ca:	2b00      	cmp	r3, #0
    60cc:	d1ea      	bne.n	60a4 <prv_hashtable_put+0x2c>
		}
		prep = p;
		p = p->next;
	}

	if(p == NULL){
    60ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60d0:	2b00      	cmp	r3, #0
    60d2:	d13e      	bne.n	6152 <prv_hashtable_put+0xda>
		char *kstr = port_malloc(strlen(key) + 1);
    60d4:	68b8      	ldr	r0, [r7, #8]
    60d6:	f000 fdb9 	bl	6c4c <strlen>
    60da:	4603      	mov	r3, r0
    60dc:	3301      	adds	r3, #1
    60de:	4618      	mov	r0, r3
    60e0:	f7fe fac0 	bl	4664 <pvPortMalloc>
    60e4:	61b8      	str	r0, [r7, #24]
		if(kstr == NULL){
    60e6:	69bb      	ldr	r3, [r7, #24]
    60e8:	2b00      	cmp	r3, #0
    60ea:	d102      	bne.n	60f2 <prv_hashtable_put+0x7a>
			return -1;
    60ec:	f04f 33ff 	mov.w	r3, #4294967295
    60f0:	e035      	b.n	615e <prv_hashtable_put+0xe6>
		}
		struct kv *kv = port_malloc(sizeof(struct kv));
    60f2:	2010      	movs	r0, #16
    60f4:	f7fe fab6 	bl	4664 <pvPortMalloc>
    60f8:	6178      	str	r0, [r7, #20]
		if( NULL == kv ){
    60fa:	697b      	ldr	r3, [r7, #20]
    60fc:	2b00      	cmp	r3, #0
    60fe:	d107      	bne.n	6110 <prv_hashtable_put+0x98>
			vPortFree(kstr);
    6100:	69b8      	ldr	r0, [r7, #24]
    6102:	f7fe fb73 	bl	47ec <vPortFree>
			kstr = NULL;
    6106:	2300      	movs	r3, #0
    6108:	61bb      	str	r3, [r7, #24]
			return -1;
    610a:	f04f 33ff 	mov.w	r3, #4294967295
    610e:	e026      	b.n	615e <prv_hashtable_put+0xe6>
		}
		init_kv(kv);
    6110:	6978      	ldr	r0, [r7, #20]
    6112:	f7ff fef1 	bl	5ef8 <init_kv>
		strcpy(kstr, key);
    6116:	69b8      	ldr	r0, [r7, #24]
    6118:	68b9      	ldr	r1, [r7, #8]
    611a:	f000 fd39 	bl	6b90 <strcpy>
		kv->key = kstr;
    611e:	697b      	ldr	r3, [r7, #20]
    6120:	69ba      	ldr	r2, [r7, #24]
    6122:	605a      	str	r2, [r3, #4]
		kv->value = value;
    6124:	697b      	ldr	r3, [r7, #20]
    6126:	687a      	ldr	r2, [r7, #4]
    6128:	609a      	str	r2, [r3, #8]
		kv->free_value = vPortFree;  // port_free can not be a pointer
    612a:	697a      	ldr	r2, [r7, #20]
    612c:	f244 73ed 	movw	r3, #18413	; 0x47ed
    6130:	f2c0 0300 	movt	r3, #0
    6134:	60d3      	str	r3, [r2, #12]

		if(prep == NULL){
    6136:	6a3b      	ldr	r3, [r7, #32]
    6138:	2b00      	cmp	r3, #0
    613a:	d107      	bne.n	614c <prv_hashtable_put+0xd4>
			ht->table[i] = kv;
    613c:	68fb      	ldr	r3, [r7, #12]
    613e:	685a      	ldr	r2, [r3, #4]
    6140:	69fb      	ldr	r3, [r7, #28]
    6142:	009b      	lsls	r3, r3, #2
    6144:	4413      	add	r3, r2
    6146:	697a      	ldr	r2, [r7, #20]
    6148:	601a      	str	r2, [r3, #0]
    614a:	e002      	b.n	6152 <prv_hashtable_put+0xda>
		}else{
			prep->next = kv;
    614c:	6a3b      	ldr	r3, [r7, #32]
    614e:	697a      	ldr	r2, [r7, #20]
    6150:	601a      	str	r2, [r3, #0]
		}
	}
	ht->length ++;
    6152:	68fb      	ldr	r3, [r7, #12]
    6154:	681b      	ldr	r3, [r3, #0]
    6156:	1c5a      	adds	r2, r3, #1
    6158:	68fb      	ldr	r3, [r7, #12]
    615a:	601a      	str	r2, [r3, #0]

	return 0;
    615c:	2300      	movs	r3, #0
}
    615e:	4618      	mov	r0, r3
    6160:	3728      	adds	r7, #40	; 0x28
    6162:	46bd      	mov	sp, r7
    6164:	bd80      	pop	{r7, pc}
    6166:	bf00      	nop

00006168 <prv_hashtable_get>:


void * prv_hashtable_get(prv_hashtable_t *ht, char *key)
{
    6168:	b580      	push	{r7, lr}
    616a:	b084      	sub	sp, #16
    616c:	af00      	add	r7, sp, #0
    616e:	6078      	str	r0, [r7, #4]
    6170:	6039      	str	r1, [r7, #0]
	int i = hash_33(key);
    6172:	6838      	ldr	r0, [r7, #0]
    6174:	f7ff fef8 	bl	5f68 <hash_33>
    6178:	4603      	mov	r3, r0
    617a:	60bb      	str	r3, [r7, #8]
	struct kv * p = ht->table[i];
    617c:	687b      	ldr	r3, [r7, #4]
    617e:	685a      	ldr	r2, [r3, #4]
    6180:	68bb      	ldr	r3, [r7, #8]
    6182:	009b      	lsls	r3, r3, #2
    6184:	4413      	add	r3, r2
    6186:	681b      	ldr	r3, [r3, #0]
    6188:	60fb      	str	r3, [r7, #12]
	while(p){
    618a:	e00e      	b.n	61aa <prv_hashtable_get+0x42>
		if(strcmp(key, p->key) == 0){
    618c:	68fb      	ldr	r3, [r7, #12]
    618e:	685b      	ldr	r3, [r3, #4]
    6190:	6838      	ldr	r0, [r7, #0]
    6192:	4619      	mov	r1, r3
    6194:	f000 fbde 	bl	6954 <strcmp>
    6198:	4603      	mov	r3, r0
    619a:	2b00      	cmp	r3, #0
    619c:	d102      	bne.n	61a4 <prv_hashtable_get+0x3c>
			return p->value;
    619e:	68fb      	ldr	r3, [r7, #12]
    61a0:	689b      	ldr	r3, [r3, #8]
    61a2:	e006      	b.n	61b2 <prv_hashtable_get+0x4a>
		}
		p = p->next;
    61a4:	68fb      	ldr	r3, [r7, #12]
    61a6:	681b      	ldr	r3, [r3, #0]
    61a8:	60fb      	str	r3, [r7, #12]

void * prv_hashtable_get(prv_hashtable_t *ht, char *key)
{
	int i = hash_33(key);
	struct kv * p = ht->table[i];
	while(p){
    61aa:	68fb      	ldr	r3, [r7, #12]
    61ac:	2b00      	cmp	r3, #0
    61ae:	d1ed      	bne.n	618c <prv_hashtable_get+0x24>
		if(strcmp(key, p->key) == 0){
			return p->value;
		}
		p = p->next;
	}
	return NULL;
    61b0:	2300      	movs	r3, #0
}
    61b2:	4618      	mov	r0, r3
    61b4:	3710      	adds	r7, #16
    61b6:	46bd      	mov	sp, r7
    61b8:	bd80      	pop	{r7, pc}
    61ba:	bf00      	nop

000061bc <prv_hashtable_remove>:


void prv_hashtable_remove(prv_hashtable_t *ht, char *key)
{
    61bc:	b580      	push	{r7, lr}
    61be:	b086      	sub	sp, #24
    61c0:	af00      	add	r7, sp, #0
    61c2:	6078      	str	r0, [r7, #4]
    61c4:	6039      	str	r1, [r7, #0]
	int i = hash_33(key);
    61c6:	6838      	ldr	r0, [r7, #0]
    61c8:	f7ff fece 	bl	5f68 <hash_33>
    61cc:	4603      	mov	r3, r0
    61ce:	60fb      	str	r3, [r7, #12]
	struct kv * p = ht->table[i];
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	685a      	ldr	r2, [r3, #4]
    61d4:	68fb      	ldr	r3, [r7, #12]
    61d6:	009b      	lsls	r3, r3, #2
    61d8:	4413      	add	r3, r2
    61da:	681b      	ldr	r3, [r3, #0]
    61dc:	617b      	str	r3, [r7, #20]
	struct kv * prep = p;
    61de:	697b      	ldr	r3, [r7, #20]
    61e0:	613b      	str	r3, [r7, #16]
	while(p){
    61e2:	e020      	b.n	6226 <prv_hashtable_remove+0x6a>
		if(strcmp(key, p->key) == 0){
    61e4:	697b      	ldr	r3, [r7, #20]
    61e6:	685b      	ldr	r3, [r3, #4]
    61e8:	6838      	ldr	r0, [r7, #0]
    61ea:	4619      	mov	r1, r3
    61ec:	f000 fbb2 	bl	6954 <strcmp>
    61f0:	4603      	mov	r3, r0
    61f2:	2b00      	cmp	r3, #0
    61f4:	d112      	bne.n	621c <prv_hashtable_remove+0x60>
			if(p == prep){
    61f6:	697a      	ldr	r2, [r7, #20]
    61f8:	693b      	ldr	r3, [r7, #16]
    61fa:	429a      	cmp	r2, r3
    61fc:	d107      	bne.n	620e <prv_hashtable_remove+0x52>
				ht->table[i] = NULL;
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	685a      	ldr	r2, [r3, #4]
    6202:	68fb      	ldr	r3, [r7, #12]
    6204:	009b      	lsls	r3, r3, #2
    6206:	4413      	add	r3, r2
    6208:	2200      	movs	r2, #0
    620a:	601a      	str	r2, [r3, #0]
    620c:	e003      	b.n	6216 <prv_hashtable_remove+0x5a>
			}else{
				prep->next = p->next;
    620e:	697b      	ldr	r3, [r7, #20]
    6210:	681a      	ldr	r2, [r3, #0]
    6212:	693b      	ldr	r3, [r7, #16]
    6214:	601a      	str	r2, [r3, #0]
			}
			free_kv(p);
    6216:	6978      	ldr	r0, [r7, #20]
    6218:	f7ff fe84 	bl	5f24 <free_kv>
		}
		prep = p;
    621c:	697b      	ldr	r3, [r7, #20]
    621e:	613b      	str	r3, [r7, #16]
		p=p->next;
    6220:	697b      	ldr	r3, [r7, #20]
    6222:	681b      	ldr	r3, [r3, #0]
    6224:	617b      	str	r3, [r7, #20]
void prv_hashtable_remove(prv_hashtable_t *ht, char *key)
{
	int i = hash_33(key);
	struct kv * p = ht->table[i];
	struct kv * prep = p;
	while(p){
    6226:	697b      	ldr	r3, [r7, #20]
    6228:	2b00      	cmp	r3, #0
    622a:	d1db      	bne.n	61e4 <prv_hashtable_remove+0x28>
			free_kv(p);
		}
		prep = p;
		p=p->next;
	}
}
    622c:	3718      	adds	r7, #24
    622e:	46bd      	mov	sp, r7
    6230:	bd80      	pop	{r7, pc}
    6232:	bf00      	nop

00006234 <sensor1>:
#include "app.h"

void sensor1( void * para )
{
    6234:	b580      	push	{r7, lr}
    6236:	b084      	sub	sp, #16
    6238:	af00      	add	r7, sp, #0
    623a:	6078      	str	r0, [r7, #4]
	prv_id_t id = *((prv_id_t *)para);
    623c:	687b      	ldr	r3, [r7, #4]
    623e:	681b      	ldr	r3, [r3, #0]
    6240:	60fb      	str	r3, [r7, #12]

	while(1){
        // blocking for message-arrival event arriving
		ps_servant_wait(id);
    6242:	68f8      	ldr	r0, [r7, #12]
    6244:	f7fe fda8 	bl	4d98 <ps_servant_wait>
		// process pevent including tag and data
		port_print("sensor 1\n\r");
    6248:	f646 506c 	movw	r0, #28012	; 0x6d6c
    624c:	f2c0 0000 	movt	r0, #0
    6250:	f000 f992 	bl	6578 <vPrintString>
	}
    6254:	e7f5      	b.n	6242 <sensor1+0xe>
    6256:	bf00      	nop

00006258 <controller11>:
}

void controller11(void * para)
{
    6258:	b580      	push	{r7, lr}
    625a:	b084      	sub	sp, #16
    625c:	af00      	add	r7, sp, #0
    625e:	6078      	str	r0, [r7, #4]
	prv_id_t id = *((prv_id_t *)para);
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	681b      	ldr	r3, [r3, #0]
    6264:	60fb      	str	r3, [r7, #12]

	while(1){
        // blocking for message-arrival event arriving
		ps_servant_wait(id);
    6266:	68f8      	ldr	r0, [r7, #12]
    6268:	f7fe fd96 	bl	4d98 <ps_servant_wait>

		// process pevent including tag and data
		port_print("controller 1-1\n\r");
    626c:	f646 5078 	movw	r0, #28024	; 0x6d78
    6270:	f2c0 0000 	movt	r0, #0
    6274:	f000 f980 	bl	6578 <vPrintString>
	}
    6278:	e7f5      	b.n	6266 <controller11+0xe>
    627a:	bf00      	nop

0000627c <controller12>:
}

void controller12(void * para)
{
    627c:	b580      	push	{r7, lr}
    627e:	b084      	sub	sp, #16
    6280:	af00      	add	r7, sp, #0
    6282:	6078      	str	r0, [r7, #4]
	prv_id_t id = *((prv_id_t *)para);
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	681b      	ldr	r3, [r3, #0]
    6288:	60fb      	str	r3, [r7, #12]

	while(1){
        // blocking for message-arrival event arriving
		ps_servant_wait(id);
    628a:	68f8      	ldr	r0, [r7, #12]
    628c:	f7fe fd84 	bl	4d98 <ps_servant_wait>

		// process pevent including tag and data
		port_print("controller 1-2\n\r");
    6290:	f646 508c 	movw	r0, #28044	; 0x6d8c
    6294:	f2c0 0000 	movt	r0, #0
    6298:	f000 f96e 	bl	6578 <vPrintString>
	}
    629c:	e7f5      	b.n	628a <controller12+0xe>
    629e:	bf00      	nop

000062a0 <actuator1>:
}

void actuator1(void * para)
{
    62a0:	b580      	push	{r7, lr}
    62a2:	b084      	sub	sp, #16
    62a4:	af00      	add	r7, sp, #0
    62a6:	6078      	str	r0, [r7, #4]
	prv_id_t id = *((prv_id_t *)para);
    62a8:	687b      	ldr	r3, [r7, #4]
    62aa:	681b      	ldr	r3, [r3, #0]
    62ac:	60fb      	str	r3, [r7, #12]

	while(1){
        // blocking for message-arrival event arriving
		ps_servant_wait(id);
    62ae:	68f8      	ldr	r0, [r7, #12]
    62b0:	f7fe fd72 	bl	4d98 <ps_servant_wait>
		// process pevent including tag and data
		port_print("actuator 1\n\r");
    62b4:	f646 50a0 	movw	r0, #28064	; 0x6da0
    62b8:	f2c0 0000 	movt	r0, #0
    62bc:	f000 f95c 	bl	6578 <vPrintString>

	}
    62c0:	e7f5      	b.n	62ae <actuator1+0xe>
    62c2:	bf00      	nop

000062c4 <sensor2>:
}

void sensor2(void * para)
{
    62c4:	b580      	push	{r7, lr}
    62c6:	b084      	sub	sp, #16
    62c8:	af00      	add	r7, sp, #0
    62ca:	6078      	str	r0, [r7, #4]
	prv_id_t id = *((prv_id_t *)para);
    62cc:	687b      	ldr	r3, [r7, #4]
    62ce:	681b      	ldr	r3, [r3, #0]
    62d0:	60fb      	str	r3, [r7, #12]

	while(1){
        // blocking for message-arrival event arriving
		ps_servant_wait(id);
    62d2:	68f8      	ldr	r0, [r7, #12]
    62d4:	f7fe fd60 	bl	4d98 <ps_servant_wait>

		// process pevent including tag and data
		port_print("sensor 2\n\r");
    62d8:	f646 50b0 	movw	r0, #28080	; 0x6db0
    62dc:	f2c0 0000 	movt	r0, #0
    62e0:	f000 f94a 	bl	6578 <vPrintString>
	}
    62e4:	e7f5      	b.n	62d2 <sensor2+0xe>
    62e6:	bf00      	nop

000062e8 <controller21>:

}

void controller21(void * para)
{
    62e8:	b580      	push	{r7, lr}
    62ea:	b084      	sub	sp, #16
    62ec:	af00      	add	r7, sp, #0
    62ee:	6078      	str	r0, [r7, #4]
	prv_id_t id = *((prv_id_t *)para);
    62f0:	687b      	ldr	r3, [r7, #4]
    62f2:	681b      	ldr	r3, [r3, #0]
    62f4:	60fb      	str	r3, [r7, #12]

	while(1){
        // blocking for message-arrival event arriving
		ps_servant_wait(id);
    62f6:	68f8      	ldr	r0, [r7, #12]
    62f8:	f7fe fd4e 	bl	4d98 <ps_servant_wait>
		// process pevent including tag and data
		port_print("controller 2-1\n\r");
    62fc:	f646 50bc 	movw	r0, #28092	; 0x6dbc
    6300:	f2c0 0000 	movt	r0, #0
    6304:	f000 f938 	bl	6578 <vPrintString>
	}
    6308:	e7f5      	b.n	62f6 <controller21+0xe>
    630a:	bf00      	nop

0000630c <controller22>:

}

void controller22(void * para)
{
    630c:	b580      	push	{r7, lr}
    630e:	b084      	sub	sp, #16
    6310:	af00      	add	r7, sp, #0
    6312:	6078      	str	r0, [r7, #4]
	prv_id_t id = *((prv_id_t *)para);
    6314:	687b      	ldr	r3, [r7, #4]
    6316:	681b      	ldr	r3, [r3, #0]
    6318:	60fb      	str	r3, [r7, #12]

	while(1){
        // blocking for message-arrival event arriving
		ps_servant_wait(id);
    631a:	68f8      	ldr	r0, [r7, #12]
    631c:	f7fe fd3c 	bl	4d98 <ps_servant_wait>

		// process pevent including tag and data
		port_print("controller 2-2\n\r");
    6320:	f646 50d0 	movw	r0, #28112	; 0x6dd0
    6324:	f2c0 0000 	movt	r0, #0
    6328:	f000 f926 	bl	6578 <vPrintString>

	}
    632c:	e7f5      	b.n	631a <controller22+0xe>
    632e:	bf00      	nop

00006330 <actuator2>:

}

void actuator2(void * para)
{
    6330:	b580      	push	{r7, lr}
    6332:	b084      	sub	sp, #16
    6334:	af00      	add	r7, sp, #0
    6336:	6078      	str	r0, [r7, #4]
	prv_id_t id = *((prv_id_t *)para);
    6338:	687b      	ldr	r3, [r7, #4]
    633a:	681b      	ldr	r3, [r3, #0]
    633c:	60fb      	str	r3, [r7, #12]

	while(1){
        // blocking for message-arrival event arriving
		ps_servant_wait(id);
    633e:	68f8      	ldr	r0, [r7, #12]
    6340:	f7fe fd2a 	bl	4d98 <ps_servant_wait>

		// process pevent including tag and data
		port_print("actuator 2\n\r");
    6344:	f646 50e4 	movw	r0, #28132	; 0x6de4
    6348:	f2c0 0000 	movt	r0, #0
    634c:	f000 f914 	bl	6578 <vPrintString>

	}
    6350:	e7f5      	b.n	633e <actuator2+0xe>
    6352:	bf00      	nop

00006354 <mode_switch1>:
}


bool mode_switch1()
{
    6354:	b480      	push	{r7}
    6356:	af00      	add	r7, sp, #0
	return 1;
    6358:	2301      	movs	r3, #1
}
    635a:	4618      	mov	r0, r3
    635c:	46bd      	mov	sp, r7
    635e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6362:	4770      	bx	lr

00006364 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
    6364:	b580      	push	{r7, lr}
    6366:	b082      	sub	sp, #8
    6368:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    636a:	2010      	movs	r0, #16
    636c:	2101      	movs	r1, #1
    636e:	f7fa fd4f 	bl	e10 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    6372:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6376:	f2c4 0001 	movt	r0, #16385	; 0x4001
    637a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    637e:	2201      	movs	r2, #1
    6380:	f7fb f856 	bl	1430 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    6384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    6388:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    638a:	2310      	movs	r3, #16
    638c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    638e:	2303      	movs	r3, #3
    6390:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    6392:	1d3b      	adds	r3, r7, #4
    6394:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6398:	f2c4 0001 	movt	r0, #16385	; 0x4001
    639c:	4619      	mov	r1, r3
    639e:	f7fa ff0b 	bl	11b8 <GPIO_Init>
}
    63a2:	3708      	adds	r7, #8
    63a4:	46bd      	mov	sp, r7
    63a6:	bd80      	pop	{r7, pc}

000063a8 <init_button>:

void init_button(void)
{
    63a8:	b580      	push	{r7, lr}
    63aa:	b082      	sub	sp, #8
    63ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    63ae:	2004      	movs	r0, #4
    63b0:	2101      	movs	r1, #1
    63b2:	f7fa fd2d 	bl	e10 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    63b6:	2301      	movs	r3, #1
    63b8:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    63ba:	2304      	movs	r3, #4
    63bc:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    63be:	2303      	movs	r3, #3
    63c0:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    63c2:	1d3b      	adds	r3, r7, #4
    63c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    63c8:	f2c4 0001 	movt	r0, #16385	; 0x4001
    63cc:	4619      	mov	r1, r3
    63ce:	f7fa fef3 	bl	11b8 <GPIO_Init>
}
    63d2:	3708      	adds	r7, #8
    63d4:	46bd      	mov	sp, r7
    63d6:	bd80      	pop	{r7, pc}

000063d8 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    63d8:	b580      	push	{r7, lr}
    63da:	b084      	sub	sp, #16
    63dc:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    63de:	2001      	movs	r0, #1
    63e0:	2101      	movs	r1, #1
    63e2:	f7fa fd15 	bl	e10 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    63e6:	2000      	movs	r0, #0
    63e8:	2100      	movs	r1, #0
    63ea:	f7fb f919 	bl	1620 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    63ee:	2301      	movs	r3, #1
    63f0:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    63f2:	2300      	movs	r3, #0
    63f4:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    63f6:	2308      	movs	r3, #8
    63f8:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    63fa:	2301      	movs	r3, #1
    63fc:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    63fe:	f107 0308 	add.w	r3, r7, #8
    6402:	4618      	mov	r0, r3
    6404:	f7fb fe12 	bl	202c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    6408:	2306      	movs	r3, #6
    640a:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    640c:	230f      	movs	r3, #15
    640e:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    6410:	230f      	movs	r3, #15
    6412:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    6414:	2301      	movs	r3, #1
    6416:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    6418:	1d3b      	adds	r3, r7, #4
    641a:	4618      	mov	r0, r3
    641c:	f7fb ff40 	bl	22a0 <NVIC_Init>
}
    6420:	3710      	adds	r7, #16
    6422:	46bd      	mov	sp, r7
    6424:	bd80      	pop	{r7, pc}
    6426:	bf00      	nop

00006428 <init_rs232>:

void init_rs232(void)
{
    6428:	b580      	push	{r7, lr}
    642a:	b086      	sub	sp, #24
    642c:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    642e:	2005      	movs	r0, #5
    6430:	2101      	movs	r1, #1
    6432:	f7fa fced 	bl	e10 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    6436:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    643a:	2101      	movs	r1, #1
    643c:	f7fa fd10 	bl	e60 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    6440:	2308      	movs	r3, #8
    6442:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    6444:	2304      	movs	r3, #4
    6446:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    6448:	1d3b      	adds	r3, r7, #4
    644a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    644e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    6452:	4619      	mov	r1, r3
    6454:	f7fa feb0 	bl	11b8 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    6458:	2304      	movs	r3, #4
    645a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    645c:	2303      	movs	r3, #3
    645e:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    6460:	2318      	movs	r3, #24
    6462:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    6464:	1d3b      	adds	r3, r7, #4
    6466:	f44f 6000 	mov.w	r0, #2048	; 0x800
    646a:	f2c4 0001 	movt	r0, #16385	; 0x4001
    646e:	4619      	mov	r1, r3
    6470:	f7fa fea2 	bl	11b8 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    6474:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    6478:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    647a:	2300      	movs	r3, #0
    647c:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    647e:	2300      	movs	r3, #0
    6480:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    6482:	2300      	movs	r3, #0
    6484:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    6486:	2300      	movs	r3, #0
    6488:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    648a:	230c      	movs	r3, #12
    648c:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    648e:	f107 0308 	add.w	r3, r7, #8
    6492:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    6496:	f2c4 0000 	movt	r0, #16384	; 0x4000
    649a:	4619      	mov	r1, r3
    649c:	f7fb f974 	bl	1788 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    64a0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    64a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
    64a8:	2101      	movs	r1, #1
    64aa:	f7fb fa8b 	bl	19c4 <USART_Cmd>
}
    64ae:	3718      	adds	r7, #24
    64b0:	46bd      	mov	sp, r7
    64b2:	bd80      	pop	{r7, pc}

000064b4 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    64b4:	b580      	push	{r7, lr}
    64b6:	b082      	sub	sp, #8
    64b8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    64ba:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    64be:	f2c4 0000 	movt	r0, #16384	; 0x4000
    64c2:	f240 7127 	movw	r1, #1831	; 0x727
    64c6:	2200      	movs	r2, #0
    64c8:	f7fb fa9c 	bl	1a04 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    64cc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    64d0:	f2c4 0000 	movt	r0, #16384	; 0x4000
    64d4:	f240 5125 	movw	r1, #1317	; 0x525
    64d8:	2201      	movs	r2, #1
    64da:	f7fb fa93 	bl	1a04 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    64de:	2326      	movs	r3, #38	; 0x26
    64e0:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    64e2:	2300      	movs	r3, #0
    64e4:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    64e6:	2301      	movs	r3, #1
    64e8:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    64ea:	1d3b      	adds	r3, r7, #4
    64ec:	4618      	mov	r0, r3
    64ee:	f7fb fed7 	bl	22a0 <NVIC_Init>
}
    64f2:	3708      	adds	r7, #8
    64f4:	46bd      	mov	sp, r7
    64f6:	bd80      	pop	{r7, pc}

000064f8 <enable_rs232>:

void enable_rs232(void)
{
    64f8:	b580      	push	{r7, lr}
    64fa:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
    64fc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    6500:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6504:	2101      	movs	r1, #1
    6506:	f7fb fa5d 	bl	19c4 <USART_Cmd>
}
    650a:	bd80      	pop	{r7, pc}

0000650c <send_byte>:

void send_byte(uint8_t b)
{
    650c:	b580      	push	{r7, lr}
    650e:	b082      	sub	sp, #8
    6510:	af00      	add	r7, sp, #0
    6512:	4603      	mov	r3, r0
    6514:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    6516:	bf00      	nop
    6518:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    651c:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6520:	2180      	movs	r1, #128	; 0x80
    6522:	f7fb fcbb 	bl	1e9c <USART_GetFlagStatus>
    6526:	4603      	mov	r3, r0
    6528:	2b00      	cmp	r3, #0
    652a:	d0f5      	beq.n	6518 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
    652c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    6530:	f2c4 0301 	movt	r3, #16385	; 0x4001
    6534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    6538:	f2c4 0201 	movt	r2, #16385	; 0x4001
    653c:	68d2      	ldr	r2, [r2, #12]
    653e:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
    6542:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
    6544:	79fb      	ldrb	r3, [r7, #7]
    6546:	b29b      	uxth	r3, r3
    6548:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    654c:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6550:	4619      	mov	r1, r3
    6552:	f7fb fb57 	bl	1c04 <USART_SendData>
}
    6556:	3708      	adds	r7, #8
    6558:	46bd      	mov	sp, r7
    655a:	bd80      	pop	{r7, pc}

0000655c <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
    655c:	b580      	push	{r7, lr}
    655e:	b082      	sub	sp, #8
    6560:	af00      	add	r7, sp, #0
    6562:	4603      	mov	r3, r0
    6564:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
    6566:	79fb      	ldrb	r3, [r7, #7]
    6568:	3330      	adds	r3, #48	; 0x30
    656a:	b2db      	uxtb	r3, r3
    656c:	4618      	mov	r0, r3
    656e:	f7ff ffcd 	bl	650c <send_byte>
}
    6572:	3708      	adds	r7, #8
    6574:	46bd      	mov	sp, r7
    6576:	bd80      	pop	{r7, pc}

00006578 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
    6578:	b580      	push	{r7, lr}
    657a:	b084      	sub	sp, #16
    657c:	af00      	add	r7, sp, #0
    657e:	6078      	str	r0, [r7, #4]
    int i = 0;
    6580:	2300      	movs	r3, #0
    6582:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
    6584:	e009      	b.n	659a <vPrintString+0x22>
    {
        send_byte(string[i]);
    6586:	68fb      	ldr	r3, [r7, #12]
    6588:	687a      	ldr	r2, [r7, #4]
    658a:	4413      	add	r3, r2
    658c:	781b      	ldrb	r3, [r3, #0]
    658e:	4618      	mov	r0, r3
    6590:	f7ff ffbc 	bl	650c <send_byte>
        i++;
    6594:	68fb      	ldr	r3, [r7, #12]
    6596:	3301      	adds	r3, #1
    6598:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
    659a:	68fb      	ldr	r3, [r7, #12]
    659c:	687a      	ldr	r2, [r7, #4]
    659e:	4413      	add	r3, r2
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	2b00      	cmp	r3, #0
    65a4:	d1ef      	bne.n	6586 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
    65a6:	3710      	adds	r7, #16
    65a8:	46bd      	mov	sp, r7
    65aa:	bd80      	pop	{r7, pc}

000065ac <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
    65ac:	b580      	push	{r7, lr}
    65ae:	b08a      	sub	sp, #40	; 0x28
    65b0:	af00      	add	r7, sp, #0
    65b2:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
    65b4:	2300      	movs	r3, #0
    65b6:	623b      	str	r3, [r7, #32]
    long num = c_num;
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	61fb      	str	r3, [r7, #28]

    if(num == 0)
    65bc:	69fb      	ldr	r3, [r7, #28]
    65be:	2b00      	cmp	r3, #0
    65c0:	d106      	bne.n	65d0 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
    65c2:	f646 50f4 	movw	r0, #28148	; 0x6df4
    65c6:	f2c0 0000 	movt	r0, #0
    65ca:	f7ff ffd5 	bl	6578 <vPrintString>
    65ce:	e062      	b.n	6696 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
    65d0:	e024      	b.n	661c <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
    65d2:	69f9      	ldr	r1, [r7, #28]
    65d4:	f246 6367 	movw	r3, #26215	; 0x6667
    65d8:	f2c6 6366 	movt	r3, #26214	; 0x6666
    65dc:	fb83 2301 	smull	r2, r3, r3, r1
    65e0:	109a      	asrs	r2, r3, #2
    65e2:	17cb      	asrs	r3, r1, #31
    65e4:	1ad2      	subs	r2, r2, r3
    65e6:	4613      	mov	r3, r2
    65e8:	009b      	lsls	r3, r3, #2
    65ea:	4413      	add	r3, r2
    65ec:	005b      	lsls	r3, r3, #1
    65ee:	1aca      	subs	r2, r1, r3
    65f0:	b2d3      	uxtb	r3, r2
    65f2:	3330      	adds	r3, #48	; 0x30
    65f4:	b2da      	uxtb	r2, r3
    65f6:	f107 010c 	add.w	r1, r7, #12
    65fa:	6a3b      	ldr	r3, [r7, #32]
    65fc:	440b      	add	r3, r1
    65fe:	701a      	strb	r2, [r3, #0]
            count ++;
    6600:	6a3b      	ldr	r3, [r7, #32]
    6602:	3301      	adds	r3, #1
    6604:	623b      	str	r3, [r7, #32]
            num /= 10;
    6606:	69fa      	ldr	r2, [r7, #28]
    6608:	f246 6367 	movw	r3, #26215	; 0x6667
    660c:	f2c6 6366 	movt	r3, #26214	; 0x6666
    6610:	fb83 1302 	smull	r1, r3, r3, r2
    6614:	1099      	asrs	r1, r3, #2
    6616:	17d3      	asrs	r3, r2, #31
    6618:	1acb      	subs	r3, r1, r3
    661a:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
    661c:	69fb      	ldr	r3, [r7, #28]
    661e:	2b00      	cmp	r3, #0
    6620:	d1d7      	bne.n	65d2 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
    6622:	f107 020c 	add.w	r2, r7, #12
    6626:	6a3b      	ldr	r3, [r7, #32]
    6628:	4413      	add	r3, r2
    662a:	2200      	movs	r2, #0
    662c:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
    662e:	2300      	movs	r3, #0
    6630:	627b      	str	r3, [r7, #36]	; 0x24
    6632:	e020      	b.n	6676 <vPrintNumber+0xca>
        {
            tmp = time[i];
    6634:	f107 020c 	add.w	r2, r7, #12
    6638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    663a:	4413      	add	r3, r2
    663c:	781b      	ldrb	r3, [r3, #0]
    663e:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
    6640:	6a3a      	ldr	r2, [r7, #32]
    6642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6644:	1ad3      	subs	r3, r2, r3
    6646:	3b01      	subs	r3, #1
    6648:	f107 0228 	add.w	r2, r7, #40	; 0x28
    664c:	4413      	add	r3, r2
    664e:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
    6652:	f107 010c 	add.w	r1, r7, #12
    6656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6658:	440b      	add	r3, r1
    665a:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
    665c:	6a3a      	ldr	r2, [r7, #32]
    665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6660:	1ad3      	subs	r3, r2, r3
    6662:	3b01      	subs	r3, #1
    6664:	f107 0128 	add.w	r1, r7, #40	; 0x28
    6668:	440b      	add	r3, r1
    666a:	7efa      	ldrb	r2, [r7, #27]
    666c:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
    6670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6672:	3301      	adds	r3, #1
    6674:	627b      	str	r3, [r7, #36]	; 0x24
    6676:	6a3b      	ldr	r3, [r7, #32]
    6678:	085a      	lsrs	r2, r3, #1
    667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    667c:	429a      	cmp	r2, r3
    667e:	d8d9      	bhi.n	6634 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
    6680:	f107 030c 	add.w	r3, r7, #12
    6684:	4618      	mov	r0, r3
    6686:	f7ff ff77 	bl	6578 <vPrintString>
        vPrintString("\n\r");
    668a:	f646 50f8 	movw	r0, #28152	; 0x6df8
    668e:	f2c0 0000 	movt	r0, #0
    6692:	f7ff ff71 	bl	6578 <vPrintString>
    }
}
    6696:	3728      	adds	r7, #40	; 0x28
    6698:	46bd      	mov	sp, r7
    669a:	bd80      	pop	{r7, pc}

0000669c <main>:
#include "app.h"
#include "PSPMconfigure.h"


int main()
{
    669c:	b580      	push	{r7, lr}
    669e:	b08c      	sub	sp, #48	; 0x30
    66a0:	af02      	add	r7, sp, #8
	ps_servant_t ps_servants[8];
	ps_task_t ps_tasks[2];

	// the duration of input phase and output phase of a Unit
	// which is the max jitter tolerance of system
	ps_duration_set_input(200);
    66a2:	20c8      	movs	r0, #200	; 0xc8
    66a4:	f7ff fb5e 	bl	5d64 <ps_duration_set_input>
	ps_duration_set_output(200);
    66a8:	20c8      	movs	r0, #200	; 0xc8
    66aa:	f7ff fb6b 	bl	5d84 <ps_duration_set_output>

	/* parameters : servant_id , servant_type, LED, num of src, src_array[], runnable */
	ps_servants[0] = ps_servant_create(0, 0, 100, 0, NULL, sensor1);
    66ae:	2300      	movs	r3, #0
    66b0:	9300      	str	r3, [sp, #0]
    66b2:	f246 2335 	movw	r3, #25141	; 0x6235
    66b6:	f2c0 0300 	movt	r3, #0
    66ba:	9301      	str	r3, [sp, #4]
    66bc:	2000      	movs	r0, #0
    66be:	2100      	movs	r1, #0
    66c0:	2264      	movs	r2, #100	; 0x64
    66c2:	2300      	movs	r3, #0
    66c4:	f7fe fa96 	bl	4bf4 <ps_servant_create>
    66c8:	4603      	mov	r3, r0
    66ca:	60bb      	str	r3, [r7, #8]
	ps_servants[1] = ps_servant_create(1, 1, 1000, 1, ps_servants, controller11);
    66cc:	f107 0308 	add.w	r3, r7, #8
    66d0:	9300      	str	r3, [sp, #0]
    66d2:	f246 2359 	movw	r3, #25177	; 0x6259
    66d6:	f2c0 0300 	movt	r3, #0
    66da:	9301      	str	r3, [sp, #4]
    66dc:	2001      	movs	r0, #1
    66de:	2101      	movs	r1, #1
    66e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    66e4:	2301      	movs	r3, #1
    66e6:	f7fe fa85 	bl	4bf4 <ps_servant_create>
    66ea:	4603      	mov	r3, r0
    66ec:	60fb      	str	r3, [r7, #12]
	ps_servants[2] = ps_servant_create(2, 1, 500,  1, ps_servants, controller12);
    66ee:	f107 0308 	add.w	r3, r7, #8
    66f2:	9300      	str	r3, [sp, #0]
    66f4:	f246 237d 	movw	r3, #25213	; 0x627d
    66f8:	f2c0 0300 	movt	r3, #0
    66fc:	9301      	str	r3, [sp, #4]
    66fe:	2002      	movs	r0, #2
    6700:	2101      	movs	r1, #1
    6702:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    6706:	2301      	movs	r3, #1
    6708:	f7fe fa74 	bl	4bf4 <ps_servant_create>
    670c:	4603      	mov	r3, r0
    670e:	613b      	str	r3, [r7, #16]
	ps_servants[3] = ps_servant_create(3, 2, 100, 2, ps_servants+1, actuator1);
    6710:	f107 0308 	add.w	r3, r7, #8
    6714:	3304      	adds	r3, #4
    6716:	9300      	str	r3, [sp, #0]
    6718:	f246 23a1 	movw	r3, #25249	; 0x62a1
    671c:	f2c0 0300 	movt	r3, #0
    6720:	9301      	str	r3, [sp, #4]
    6722:	2003      	movs	r0, #3
    6724:	2102      	movs	r1, #2
    6726:	2264      	movs	r2, #100	; 0x64
    6728:	2302      	movs	r3, #2
    672a:	f7fe fa63 	bl	4bf4 <ps_servant_create>
    672e:	4603      	mov	r3, r0
    6730:	617b      	str	r3, [r7, #20]


	ps_servants[4] = ps_servant_create(4, 0, 100, 0, NULL, sensor2);
    6732:	2300      	movs	r3, #0
    6734:	9300      	str	r3, [sp, #0]
    6736:	f246 23c5 	movw	r3, #25285	; 0x62c5
    673a:	f2c0 0300 	movt	r3, #0
    673e:	9301      	str	r3, [sp, #4]
    6740:	2004      	movs	r0, #4
    6742:	2100      	movs	r1, #0
    6744:	2264      	movs	r2, #100	; 0x64
    6746:	2300      	movs	r3, #0
    6748:	f7fe fa54 	bl	4bf4 <ps_servant_create>
    674c:	4603      	mov	r3, r0
    674e:	61bb      	str	r3, [r7, #24]
	ps_servants[5] = ps_servant_create(5, 1, 2000, 1, ps_servants+4, controller21);
    6750:	f107 0308 	add.w	r3, r7, #8
    6754:	3310      	adds	r3, #16
    6756:	9300      	str	r3, [sp, #0]
    6758:	f246 23e9 	movw	r3, #25321	; 0x62e9
    675c:	f2c0 0300 	movt	r3, #0
    6760:	9301      	str	r3, [sp, #4]
    6762:	2005      	movs	r0, #5
    6764:	2101      	movs	r1, #1
    6766:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    676a:	2301      	movs	r3, #1
    676c:	f7fe fa42 	bl	4bf4 <ps_servant_create>
    6770:	4603      	mov	r3, r0
    6772:	61fb      	str	r3, [r7, #28]
	ps_servants[6] = ps_servant_create(6, 1, 1500, 1, ps_servants+5, controller22);
    6774:	f107 0308 	add.w	r3, r7, #8
    6778:	3314      	adds	r3, #20
    677a:	9300      	str	r3, [sp, #0]
    677c:	f246 330d 	movw	r3, #25357	; 0x630d
    6780:	f2c0 0300 	movt	r3, #0
    6784:	9301      	str	r3, [sp, #4]
    6786:	2006      	movs	r0, #6
    6788:	2101      	movs	r1, #1
    678a:	f240 52dc 	movw	r2, #1500	; 0x5dc
    678e:	2301      	movs	r3, #1
    6790:	f7fe fa30 	bl	4bf4 <ps_servant_create>
    6794:	4603      	mov	r3, r0
    6796:	623b      	str	r3, [r7, #32]
	ps_servants[7] = ps_servant_create(7, 2, 100, 1, ps_servants+6, actuator2);
    6798:	f107 0308 	add.w	r3, r7, #8
    679c:	3318      	adds	r3, #24
    679e:	9300      	str	r3, [sp, #0]
    67a0:	f246 3331 	movw	r3, #25393	; 0x6331
    67a4:	f2c0 0300 	movt	r3, #0
    67a8:	9301      	str	r3, [sp, #4]
    67aa:	2007      	movs	r0, #7
    67ac:	2102      	movs	r1, #2
    67ae:	2264      	movs	r2, #100	; 0x64
    67b0:	2301      	movs	r3, #1
    67b2:	f7fe fa1f 	bl	4bf4 <ps_servant_create>
    67b6:	4603      	mov	r3, r0
    67b8:	627b      	str	r3, [r7, #36]	; 0x24


	/* parameters: task_id, LET, servant_num, servant_array[]*/
	ps_tasks[0] = ps_task_create(0, 5000, 4, ps_servants);
    67ba:	f107 0308 	add.w	r3, r7, #8
    67be:	2000      	movs	r0, #0
    67c0:	f241 3188 	movw	r1, #5000	; 0x1388
    67c4:	2204      	movs	r2, #4
    67c6:	f7fe f9a5 	bl	4b14 <ps_task_create>
    67ca:	4603      	mov	r3, r0
    67cc:	603b      	str	r3, [r7, #0]
	ps_tasks[1] = ps_task_create(1, 10000, 4, ps_servants+4);
    67ce:	f107 0308 	add.w	r3, r7, #8
    67d2:	3310      	adds	r3, #16
    67d4:	2001      	movs	r0, #1
    67d6:	f242 7110 	movw	r1, #10000	; 0x2710
    67da:	2204      	movs	r2, #4
    67dc:	f7fe f99a 	bl	4b14 <ps_task_create>
    67e0:	4603      	mov	r3, r0
    67e2:	607b      	str	r3, [r7, #4]

	/* parameters: mode_id, task_num, task_array[]*/
	ps_mode_create(0, 2, ps_tasks);
    67e4:	463b      	mov	r3, r7
    67e6:	2000      	movs	r0, #0
    67e8:	2102      	movs	r1, #2
    67ea:	461a      	mov	r2, r3
    67ec:	f7fe f894 	bl	4918 <ps_mode_create>

	/* parameters: condition, mode_dest */
	ps_mode_switch_create( mode_switch1, 0);
    67f0:	f246 3055 	movw	r0, #25429	; 0x6355
    67f4:	f2c0 0000 	movt	r0, #0
    67f8:	2100      	movs	r1, #0
    67fa:	f7fe f90f 	bl	4a1c <ps_mode_switch_create>

	/* PSEFM kernel initialize and RTOS scheduler start */
	system_start();
    67fe:	f7ff faa5 	bl	5d4c <system_start>

}
    6802:	4618      	mov	r0, r3
    6804:	3728      	adds	r7, #40	; 0x28
    6806:	46bd      	mov	sp, r7
    6808:	bd80      	pop	{r7, pc}
    680a:	bf00      	nop

0000680c <memcpy>:
    680c:	2a0f      	cmp	r2, #15
    680e:	b4f0      	push	{r4, r5, r6, r7}
    6810:	d945      	bls.n	689e <memcpy+0x92>
    6812:	ea40 0301 	orr.w	r3, r0, r1
    6816:	079b      	lsls	r3, r3, #30
    6818:	d145      	bne.n	68a6 <memcpy+0x9a>
    681a:	f1a2 0710 	sub.w	r7, r2, #16
    681e:	460c      	mov	r4, r1
    6820:	4603      	mov	r3, r0
    6822:	093f      	lsrs	r7, r7, #4
    6824:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    6828:	3610      	adds	r6, #16
    682a:	6825      	ldr	r5, [r4, #0]
    682c:	3310      	adds	r3, #16
    682e:	3410      	adds	r4, #16
    6830:	f843 5c10 	str.w	r5, [r3, #-16]
    6834:	f854 5c0c 	ldr.w	r5, [r4, #-12]
    6838:	f843 5c0c 	str.w	r5, [r3, #-12]
    683c:	f854 5c08 	ldr.w	r5, [r4, #-8]
    6840:	f843 5c08 	str.w	r5, [r3, #-8]
    6844:	f854 5c04 	ldr.w	r5, [r4, #-4]
    6848:	f843 5c04 	str.w	r5, [r3, #-4]
    684c:	42b3      	cmp	r3, r6
    684e:	d1ec      	bne.n	682a <memcpy+0x1e>
    6850:	1c7b      	adds	r3, r7, #1
    6852:	f002 0c0f 	and.w	ip, r2, #15
    6856:	f1bc 0f03 	cmp.w	ip, #3
    685a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    685e:	4419      	add	r1, r3
    6860:	4403      	add	r3, r0
    6862:	d922      	bls.n	68aa <memcpy+0x9e>
    6864:	460e      	mov	r6, r1
    6866:	461d      	mov	r5, r3
    6868:	4664      	mov	r4, ip
    686a:	f856 7b04 	ldr.w	r7, [r6], #4
    686e:	3c04      	subs	r4, #4
    6870:	2c03      	cmp	r4, #3
    6872:	f845 7b04 	str.w	r7, [r5], #4
    6876:	d8f8      	bhi.n	686a <memcpy+0x5e>
    6878:	f1ac 0404 	sub.w	r4, ip, #4
    687c:	f002 0203 	and.w	r2, r2, #3
    6880:	f024 0403 	bic.w	r4, r4, #3
    6884:	3404      	adds	r4, #4
    6886:	4423      	add	r3, r4
    6888:	4421      	add	r1, r4
    688a:	b132      	cbz	r2, 689a <memcpy+0x8e>
    688c:	440a      	add	r2, r1
    688e:	f811 4b01 	ldrb.w	r4, [r1], #1
    6892:	4291      	cmp	r1, r2
    6894:	f803 4b01 	strb.w	r4, [r3], #1
    6898:	d1f9      	bne.n	688e <memcpy+0x82>
    689a:	bcf0      	pop	{r4, r5, r6, r7}
    689c:	4770      	bx	lr
    689e:	4603      	mov	r3, r0
    68a0:	2a00      	cmp	r2, #0
    68a2:	d1f3      	bne.n	688c <memcpy+0x80>
    68a4:	e7f9      	b.n	689a <memcpy+0x8e>
    68a6:	4603      	mov	r3, r0
    68a8:	e7f0      	b.n	688c <memcpy+0x80>
    68aa:	4662      	mov	r2, ip
    68ac:	2a00      	cmp	r2, #0
    68ae:	d1ed      	bne.n	688c <memcpy+0x80>
    68b0:	e7f3      	b.n	689a <memcpy+0x8e>
    68b2:	bf00      	nop

000068b4 <memset>:
    68b4:	0783      	lsls	r3, r0, #30
    68b6:	b4f0      	push	{r4, r5, r6, r7}
    68b8:	d048      	beq.n	694c <memset+0x98>
    68ba:	1e54      	subs	r4, r2, #1
    68bc:	2a00      	cmp	r2, #0
    68be:	d043      	beq.n	6948 <memset+0x94>
    68c0:	b2cd      	uxtb	r5, r1
    68c2:	4603      	mov	r3, r0
    68c4:	e002      	b.n	68cc <memset+0x18>
    68c6:	2c00      	cmp	r4, #0
    68c8:	d03e      	beq.n	6948 <memset+0x94>
    68ca:	4614      	mov	r4, r2
    68cc:	f803 5b01 	strb.w	r5, [r3], #1
    68d0:	f013 0f03 	tst.w	r3, #3
    68d4:	f104 32ff 	add.w	r2, r4, #4294967295
    68d8:	d1f5      	bne.n	68c6 <memset+0x12>
    68da:	2c03      	cmp	r4, #3
    68dc:	d92d      	bls.n	693a <memset+0x86>
    68de:	b2cd      	uxtb	r5, r1
    68e0:	2c0f      	cmp	r4, #15
    68e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    68e6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    68ea:	d918      	bls.n	691e <memset+0x6a>
    68ec:	f1a4 0710 	sub.w	r7, r4, #16
    68f0:	f103 0610 	add.w	r6, r3, #16
    68f4:	461a      	mov	r2, r3
    68f6:	093f      	lsrs	r7, r7, #4
    68f8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    68fc:	6015      	str	r5, [r2, #0]
    68fe:	3210      	adds	r2, #16
    6900:	f842 5c0c 	str.w	r5, [r2, #-12]
    6904:	f842 5c08 	str.w	r5, [r2, #-8]
    6908:	f842 5c04 	str.w	r5, [r2, #-4]
    690c:	42b2      	cmp	r2, r6
    690e:	d1f5      	bne.n	68fc <memset+0x48>
    6910:	f004 040f 	and.w	r4, r4, #15
    6914:	3701      	adds	r7, #1
    6916:	2c03      	cmp	r4, #3
    6918:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    691c:	d90d      	bls.n	693a <memset+0x86>
    691e:	461e      	mov	r6, r3
    6920:	4622      	mov	r2, r4
    6922:	3a04      	subs	r2, #4
    6924:	f846 5b04 	str.w	r5, [r6], #4
    6928:	2a03      	cmp	r2, #3
    692a:	d8fa      	bhi.n	6922 <memset+0x6e>
    692c:	1f22      	subs	r2, r4, #4
    692e:	f004 0403 	and.w	r4, r4, #3
    6932:	f022 0203 	bic.w	r2, r2, #3
    6936:	3204      	adds	r2, #4
    6938:	4413      	add	r3, r2
    693a:	b12c      	cbz	r4, 6948 <memset+0x94>
    693c:	b2c9      	uxtb	r1, r1
    693e:	441c      	add	r4, r3
    6940:	f803 1b01 	strb.w	r1, [r3], #1
    6944:	42a3      	cmp	r3, r4
    6946:	d1fb      	bne.n	6940 <memset+0x8c>
    6948:	bcf0      	pop	{r4, r5, r6, r7}
    694a:	4770      	bx	lr
    694c:	4614      	mov	r4, r2
    694e:	4603      	mov	r3, r0
    6950:	e7c3      	b.n	68da <memset+0x26>
    6952:	bf00      	nop

00006954 <strcmp>:
    6954:	ea40 0c01 	orr.w	ip, r0, r1
    6958:	f01c 0f07 	tst.w	ip, #7
    695c:	d127      	bne.n	69ae <strcmp+0x5a>
    695e:	f1bd 0d10 	subs.w	sp, sp, #16
    6962:	e9cd 4502 	strd	r4, r5, [sp, #8]
    6966:	e9cd 6700 	strd	r6, r7, [sp]
    696a:	f06f 0600 	mvn.w	r6, #0
    696e:	f04f 0700 	mov.w	r7, #0
    6972:	bf00      	nop
    6974:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    6978:	e8f1 4502 	ldrd	r4, r5, [r1], #8
    697c:	42a2      	cmp	r2, r4
    697e:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    6982:	ea2c 0c02 	bic.w	ip, ip, r2
    6986:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    698a:	bf08      	it	eq
    698c:	f1bc 0f00 	cmpeq.w	ip, #0
    6990:	f040 80e5 	bne.w	6b5e <strcmp+0x20a>
    6994:	42ab      	cmp	r3, r5
    6996:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    699a:	ea2c 0c03 	bic.w	ip, ip, r3
    699e:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    69a2:	bf08      	it	eq
    69a4:	f1bc 0f00 	cmpeq.w	ip, #0
    69a8:	f040 80d6 	bne.w	6b58 <strcmp+0x204>
    69ac:	e7e2      	b.n	6974 <strcmp+0x20>
    69ae:	f010 0c03 	ands.w	ip, r0, #3
    69b2:	d021      	beq.n	69f8 <strcmp+0xa4>
    69b4:	f020 0003 	bic.w	r0, r0, #3
    69b8:	f850 2b04 	ldr.w	r2, [r0], #4
    69bc:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
    69c0:	d008      	beq.n	69d4 <strcmp+0x80>
    69c2:	d20f      	bcs.n	69e4 <strcmp+0x90>
    69c4:	f811 cb01 	ldrb.w	ip, [r1], #1
    69c8:	fa5f f392 	uxtb.w	r3, r2, ror #8
    69cc:	ebb3 0c0c 	subs.w	ip, r3, ip
    69d0:	d110      	bne.n	69f4 <strcmp+0xa0>
    69d2:	b17b      	cbz	r3, 69f4 <strcmp+0xa0>
    69d4:	f811 cb01 	ldrb.w	ip, [r1], #1
    69d8:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
    69dc:	ebb3 0c0c 	subs.w	ip, r3, ip
    69e0:	d108      	bne.n	69f4 <strcmp+0xa0>
    69e2:	b13b      	cbz	r3, 69f4 <strcmp+0xa0>
    69e4:	f811 cb01 	ldrb.w	ip, [r1], #1
    69e8:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
    69ec:	ebb3 0c0c 	subs.w	ip, r3, ip
    69f0:	d100      	bne.n	69f4 <strcmp+0xa0>
    69f2:	b90b      	cbnz	r3, 69f8 <strcmp+0xa4>
    69f4:	4660      	mov	r0, ip
    69f6:	4770      	bx	lr
    69f8:	f1bd 0d10 	subs.w	sp, sp, #16
    69fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
    6a00:	e9cd 6700 	strd	r6, r7, [sp]
    6a04:	f06f 0600 	mvn.w	r6, #0
    6a08:	f04f 0700 	mov.w	r7, #0
    6a0c:	f011 0c03 	ands.w	ip, r1, #3
    6a10:	d133      	bne.n	6a7a <strcmp+0x126>
    6a12:	f010 0f04 	tst.w	r0, #4
    6a16:	d00f      	beq.n	6a38 <strcmp+0xe4>
    6a18:	f850 2b04 	ldr.w	r2, [r0], #4
    6a1c:	f851 4b04 	ldr.w	r4, [r1], #4
    6a20:	42a2      	cmp	r2, r4
    6a22:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    6a26:	ea2c 0c02 	bic.w	ip, ip, r2
    6a2a:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    6a2e:	bf08      	it	eq
    6a30:	f1bc 0f00 	cmpeq.w	ip, #0
    6a34:	f040 8093 	bne.w	6b5e <strcmp+0x20a>
    6a38:	f011 0f04 	tst.w	r1, #4
    6a3c:	d099      	beq.n	6972 <strcmp+0x1e>
    6a3e:	f851 5b04 	ldr.w	r5, [r1], #4
    6a42:	bf00      	nop
    6a44:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    6a48:	42aa      	cmp	r2, r5
    6a4a:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    6a4e:	ea2c 0c02 	bic.w	ip, ip, r2
    6a52:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    6a56:	bf08      	it	eq
    6a58:	f1bc 0f00 	cmpeq.w	ip, #0
    6a5c:	d179      	bne.n	6b52 <strcmp+0x1fe>
    6a5e:	e8f1 4502 	ldrd	r4, r5, [r1], #8
    6a62:	42a3      	cmp	r3, r4
    6a64:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    6a68:	ea2c 0c03 	bic.w	ip, ip, r3
    6a6c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    6a70:	bf08      	it	eq
    6a72:	f1bc 0f00 	cmpeq.w	ip, #0
    6a76:	d169      	bne.n	6b4c <strcmp+0x1f8>
    6a78:	e7e4      	b.n	6a44 <strcmp+0xf0>
    6a7a:	f021 0103 	bic.w	r1, r1, #3
    6a7e:	f1bc 0f02 	cmp.w	ip, #2
    6a82:	d020      	beq.n	6ac6 <strcmp+0x172>
    6a84:	da3f      	bge.n	6b06 <strcmp+0x1b2>
    6a86:	f851 5b04 	ldr.w	r5, [r1], #4
    6a8a:	bf00      	nop
    6a8c:	f850 3b04 	ldr.w	r3, [r0], #4
    6a90:	ea4f 2515 	mov.w	r5, r5, lsr #8
    6a94:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    6a98:	ea2c 0c03 	bic.w	ip, ip, r3
    6a9c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    6aa0:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
    6aa4:	ea03 2216 	and.w	r2, r3, r6, lsr #8
    6aa8:	bf08      	it	eq
    6aaa:	42aa      	cmpeq	r2, r5
    6aac:	d151      	bne.n	6b52 <strcmp+0x1fe>
    6aae:	f851 5b04 	ldr.w	r5, [r1], #4
    6ab2:	f1bc 0f00 	cmp.w	ip, #0
    6ab6:	ea82 0303 	eor.w	r3, r2, r3
    6aba:	ea4f 6205 	mov.w	r2, r5, lsl #24
    6abe:	bf08      	it	eq
    6ac0:	4293      	cmpeq	r3, r2
    6ac2:	d140      	bne.n	6b46 <strcmp+0x1f2>
    6ac4:	e7e2      	b.n	6a8c <strcmp+0x138>
    6ac6:	f851 5b04 	ldr.w	r5, [r1], #4
    6aca:	bf00      	nop
    6acc:	f850 3b04 	ldr.w	r3, [r0], #4
    6ad0:	ea4f 4515 	mov.w	r5, r5, lsr #16
    6ad4:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    6ad8:	ea2c 0c03 	bic.w	ip, ip, r3
    6adc:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    6ae0:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
    6ae4:	ea03 4216 	and.w	r2, r3, r6, lsr #16
    6ae8:	bf08      	it	eq
    6aea:	42aa      	cmpeq	r2, r5
    6aec:	d131      	bne.n	6b52 <strcmp+0x1fe>
    6aee:	f851 5b04 	ldr.w	r5, [r1], #4
    6af2:	f1bc 0f00 	cmp.w	ip, #0
    6af6:	ea82 0303 	eor.w	r3, r2, r3
    6afa:	ea4f 4205 	mov.w	r2, r5, lsl #16
    6afe:	bf08      	it	eq
    6b00:	4293      	cmpeq	r3, r2
    6b02:	d120      	bne.n	6b46 <strcmp+0x1f2>
    6b04:	e7e2      	b.n	6acc <strcmp+0x178>
    6b06:	f851 5b04 	ldr.w	r5, [r1], #4
    6b0a:	bf00      	nop
    6b0c:	f850 3b04 	ldr.w	r3, [r0], #4
    6b10:	ea4f 6515 	mov.w	r5, r5, lsr #24
    6b14:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    6b18:	ea2c 0c03 	bic.w	ip, ip, r3
    6b1c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    6b20:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
    6b24:	ea03 6216 	and.w	r2, r3, r6, lsr #24
    6b28:	bf08      	it	eq
    6b2a:	42aa      	cmpeq	r2, r5
    6b2c:	d111      	bne.n	6b52 <strcmp+0x1fe>
    6b2e:	f851 5b04 	ldr.w	r5, [r1], #4
    6b32:	f1bc 0f00 	cmp.w	ip, #0
    6b36:	ea82 0303 	eor.w	r3, r2, r3
    6b3a:	ea4f 2205 	mov.w	r2, r5, lsl #8
    6b3e:	bf08      	it	eq
    6b40:	4293      	cmpeq	r3, r2
    6b42:	d100      	bne.n	6b46 <strcmp+0x1f2>
    6b44:	e7e2      	b.n	6b0c <strcmp+0x1b8>
    6b46:	ba19      	rev	r1, r3
    6b48:	ba12      	rev	r2, r2
    6b4a:	e00a      	b.n	6b62 <strcmp+0x20e>
    6b4c:	ba19      	rev	r1, r3
    6b4e:	ba22      	rev	r2, r4
    6b50:	e007      	b.n	6b62 <strcmp+0x20e>
    6b52:	ba11      	rev	r1, r2
    6b54:	ba2a      	rev	r2, r5
    6b56:	e004      	b.n	6b62 <strcmp+0x20e>
    6b58:	ba19      	rev	r1, r3
    6b5a:	ba2a      	rev	r2, r5
    6b5c:	e001      	b.n	6b62 <strcmp+0x20e>
    6b5e:	ba11      	rev	r1, r2
    6b60:	ba22      	rev	r2, r4
    6b62:	fa9c f08c 	rev.w	r0, ip
    6b66:	e9dd 6700 	ldrd	r6, r7, [sp]
    6b6a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    6b6e:	f11d 0d10 	adds.w	sp, sp, #16
    6b72:	b138      	cbz	r0, 6b84 <strcmp+0x230>
    6b74:	fab0 f080 	clz	r0, r0
    6b78:	f1c0 0018 	rsb	r0, r0, #24
    6b7c:	fa21 f100 	lsr.w	r1, r1, r0
    6b80:	fa22 f200 	lsr.w	r2, r2, r0
    6b84:	2001      	movs	r0, #1
    6b86:	4291      	cmp	r1, r2
    6b88:	bf98      	it	ls
    6b8a:	4180      	sbcls	r0, r0
    6b8c:	4770      	bx	lr
    6b8e:	bf00      	nop

00006b90 <strcpy>:
    6b90:	ea80 0201 	eor.w	r2, r0, r1
    6b94:	4684      	mov	ip, r0
    6b96:	f012 0f03 	tst.w	r2, #3
    6b9a:	d14f      	bne.n	6c3c <strcpy+0xac>
    6b9c:	f011 0f03 	tst.w	r1, #3
    6ba0:	d132      	bne.n	6c08 <strcpy+0x78>
    6ba2:	f84d 4d04 	str.w	r4, [sp, #-4]!
    6ba6:	f011 0f04 	tst.w	r1, #4
    6baa:	f851 3b04 	ldr.w	r3, [r1], #4
    6bae:	d00b      	beq.n	6bc8 <strcpy+0x38>
    6bb0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    6bb4:	439a      	bics	r2, r3
    6bb6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6bba:	bf04      	itt	eq
    6bbc:	f84c 3b04 	streq.w	r3, [ip], #4
    6bc0:	f851 3b04 	ldreq.w	r3, [r1], #4
    6bc4:	d116      	bne.n	6bf4 <strcpy+0x64>
    6bc6:	bf00      	nop
    6bc8:	f851 4b04 	ldr.w	r4, [r1], #4
    6bcc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    6bd0:	439a      	bics	r2, r3
    6bd2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6bd6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    6bda:	d10b      	bne.n	6bf4 <strcpy+0x64>
    6bdc:	f84c 3b04 	str.w	r3, [ip], #4
    6be0:	43a2      	bics	r2, r4
    6be2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6be6:	bf04      	itt	eq
    6be8:	f851 3b04 	ldreq.w	r3, [r1], #4
    6bec:	f84c 4b04 	streq.w	r4, [ip], #4
    6bf0:	d0ea      	beq.n	6bc8 <strcpy+0x38>
    6bf2:	4623      	mov	r3, r4
    6bf4:	f80c 3b01 	strb.w	r3, [ip], #1
    6bf8:	f013 0fff 	tst.w	r3, #255	; 0xff
    6bfc:	ea4f 2333 	mov.w	r3, r3, ror #8
    6c00:	d1f8      	bne.n	6bf4 <strcpy+0x64>
    6c02:	f85d 4b04 	ldr.w	r4, [sp], #4
    6c06:	4770      	bx	lr
    6c08:	f011 0f01 	tst.w	r1, #1
    6c0c:	d006      	beq.n	6c1c <strcpy+0x8c>
    6c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
    6c12:	f80c 2b01 	strb.w	r2, [ip], #1
    6c16:	2a00      	cmp	r2, #0
    6c18:	bf08      	it	eq
    6c1a:	4770      	bxeq	lr
    6c1c:	f011 0f02 	tst.w	r1, #2
    6c20:	d0bf      	beq.n	6ba2 <strcpy+0x12>
    6c22:	f831 2b02 	ldrh.w	r2, [r1], #2
    6c26:	f012 0fff 	tst.w	r2, #255	; 0xff
    6c2a:	bf16      	itet	ne
    6c2c:	f82c 2b02 	strhne.w	r2, [ip], #2
    6c30:	f88c 2000 	strbeq.w	r2, [ip]
    6c34:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    6c38:	d1b3      	bne.n	6ba2 <strcpy+0x12>
    6c3a:	4770      	bx	lr
    6c3c:	f811 2b01 	ldrb.w	r2, [r1], #1
    6c40:	f80c 2b01 	strb.w	r2, [ip], #1
    6c44:	2a00      	cmp	r2, #0
    6c46:	d1f9      	bne.n	6c3c <strcpy+0xac>
    6c48:	4770      	bx	lr
    6c4a:	bf00      	nop

00006c4c <strlen>:
    6c4c:	f020 0103 	bic.w	r1, r0, #3
    6c50:	f010 0003 	ands.w	r0, r0, #3
    6c54:	f1c0 0000 	rsb	r0, r0, #0
    6c58:	f851 3b04 	ldr.w	r3, [r1], #4
    6c5c:	f100 0c04 	add.w	ip, r0, #4
    6c60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    6c64:	f06f 0200 	mvn.w	r2, #0
    6c68:	bf1c      	itt	ne
    6c6a:	fa22 f20c 	lsrne.w	r2, r2, ip
    6c6e:	4313      	orrne	r3, r2
    6c70:	f04f 0c01 	mov.w	ip, #1
    6c74:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    6c78:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    6c7c:	eba3 020c 	sub.w	r2, r3, ip
    6c80:	ea22 0203 	bic.w	r2, r2, r3
    6c84:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    6c88:	bf04      	itt	eq
    6c8a:	f851 3b04 	ldreq.w	r3, [r1], #4
    6c8e:	3004      	addeq	r0, #4
    6c90:	d0f4      	beq.n	6c7c <strlen+0x30>
    6c92:	f013 0fff 	tst.w	r3, #255	; 0xff
    6c96:	bf1f      	itttt	ne
    6c98:	3001      	addne	r0, #1
    6c9a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    6c9e:	3001      	addne	r0, #1
    6ca0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    6ca4:	bf18      	it	ne
    6ca6:	3001      	addne	r0, #1
    6ca8:	4770      	bx	lr
    6caa:	bf00      	nop

00006cac <strncpy>:
    6cac:	ea40 0301 	orr.w	r3, r0, r1
    6cb0:	079b      	lsls	r3, r3, #30
    6cb2:	b470      	push	{r4, r5, r6}
    6cb4:	d12b      	bne.n	6d0e <strncpy+0x62>
    6cb6:	2a03      	cmp	r2, #3
    6cb8:	bf84      	itt	hi
    6cba:	460b      	movhi	r3, r1
    6cbc:	4605      	movhi	r5, r0
    6cbe:	d926      	bls.n	6d0e <strncpy+0x62>
    6cc0:	4619      	mov	r1, r3
    6cc2:	f853 4b04 	ldr.w	r4, [r3], #4
    6cc6:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
    6cca:	ea26 0604 	bic.w	r6, r6, r4
    6cce:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    6cd2:	d105      	bne.n	6ce0 <strncpy+0x34>
    6cd4:	3a04      	subs	r2, #4
    6cd6:	f845 4b04 	str.w	r4, [r5], #4
    6cda:	2a03      	cmp	r2, #3
    6cdc:	4619      	mov	r1, r3
    6cde:	d8ef      	bhi.n	6cc0 <strncpy+0x14>
    6ce0:	b19a      	cbz	r2, 6d0a <strncpy+0x5e>
    6ce2:	780c      	ldrb	r4, [r1, #0]
    6ce4:	3a01      	subs	r2, #1
    6ce6:	1c6b      	adds	r3, r5, #1
    6ce8:	702c      	strb	r4, [r5, #0]
    6cea:	b13c      	cbz	r4, 6cfc <strncpy+0x50>
    6cec:	b16a      	cbz	r2, 6d0a <strncpy+0x5e>
    6cee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    6cf2:	3a01      	subs	r2, #1
    6cf4:	f803 4b01 	strb.w	r4, [r3], #1
    6cf8:	2c00      	cmp	r4, #0
    6cfa:	d1f7      	bne.n	6cec <strncpy+0x40>
    6cfc:	b12a      	cbz	r2, 6d0a <strncpy+0x5e>
    6cfe:	441a      	add	r2, r3
    6d00:	2100      	movs	r1, #0
    6d02:	f803 1b01 	strb.w	r1, [r3], #1
    6d06:	4293      	cmp	r3, r2
    6d08:	d1fb      	bne.n	6d02 <strncpy+0x56>
    6d0a:	bc70      	pop	{r4, r5, r6}
    6d0c:	4770      	bx	lr
    6d0e:	4605      	mov	r5, r0
    6d10:	e7e6      	b.n	6ce0 <strncpy+0x34>
    6d12:	bf00      	nop

00006d14 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    6d14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    6d16:	e003      	b.n	6d20 <LoopCopyDataInit>

00006d18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    6d18:	4b0a      	ldr	r3, [pc, #40]	; (6d44 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    6d1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    6d1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    6d1e:	3104      	adds	r1, #4

00006d20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    6d20:	4809      	ldr	r0, [pc, #36]	; (6d48 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    6d22:	4b0a      	ldr	r3, [pc, #40]	; (6d4c <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    6d24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    6d26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    6d28:	d3f6      	bcc.n	6d18 <CopyDataInit>
	ldr	r2, =_sbss
    6d2a:	4a09      	ldr	r2, [pc, #36]	; (6d50 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    6d2c:	e002      	b.n	6d34 <LoopFillZerobss>

00006d2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    6d2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
    6d30:	f842 3b04 	str.w	r3, [r2], #4

00006d34 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6d34:	4b07      	ldr	r3, [pc, #28]	; (6d54 <LoopFillZerobss+0x20>)
	cmp	r2, r3
    6d36:	429a      	cmp	r2, r3
	bcc	FillZerobss
    6d38:	d3f9      	bcc.n	6d2e <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    6d3a:	f7f9 fb27 	bl	38c <SystemInit>
/* Call the application's entry point.*/
	bl	main
    6d3e:	f7ff fcad 	bl	669c <main>
	bx	lr    
    6d42:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    6d44:	00006dfc 	.word	0x00006dfc
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    6d48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    6d4c:	20000034 	.word	0x20000034
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    6d50:	20000038 	.word	0x20000038
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6d54:	2000e040 	.word	0x2000e040

00006d58 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    6d58:	e7fe      	b.n	6d58 <ADC1_2_IRQHandler>
    6d5a:	0000      	movs	r0, r0
    6d5c:	454c4449 	.word	0x454c4449
    6d60:	00000000 	.word	0x00000000

00006d64 <ulKernelPriority>:
    6d64:	0000007f                                ....

00006d68 <heapSTRUCT_SIZE>:
    6d68:	00000010 736e6573 3120726f 00000d0a     ....sensor 1....
    6d78:	746e6f63 6c6c6f72 31207265 0d0a312d     controller 1-1..
    6d88:	00000000 746e6f63 6c6c6f72 31207265     ....controller 1
    6d98:	0d0a322d 00000000 75746361 726f7461     -2......actuator
    6da8:	0d0a3120 00000000 736e6573 3220726f      1......sensor 2
    6db8:	00000d0a 746e6f63 6c6c6f72 32207265     ....controller 2
    6dc8:	0d0a312d 00000000 746e6f63 6c6c6f72     -1......controll
    6dd8:	32207265 0d0a322d 00000000 75746361     er 2-2......actu
    6de8:	726f7461 0d0a3220 00000000 000d0a30     ator 2......0...
    6df8:	00000d0a                                ....
